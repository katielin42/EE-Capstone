
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000152ac  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  08015470  08015470  00025470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b3c  08015b3c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08015b3c  08015b3c  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015b3c  08015b3c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b3c  08015b3c  00025b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b40  08015b40  00025b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08015b44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e0  200001e4  08015d28  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200026c4  08015d28  000326c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a4a9  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aa8  00000000  00000000  0005a6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f8  00000000  00000000  00060168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002070  00000000  00000000  00062460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039b9e  00000000  00000000  000644d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002af79  00000000  00000000  0009e06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c9a6  00000000  00000000  000c8fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021598d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8b4  00000000  00000000  002159e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08015454 	.word	0x08015454

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	08015454 	.word	0x08015454

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <ADC_Init>:
/* USER CODE BEGIN PV */



//initialize ADC thread
void ADC_Init(void *argument) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 8000d30:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <ADC_Init+0x30>)
 8000d32:	2101      	movs	r1, #1
 8000d34:	2001      	movs	r0, #1
 8000d36:	f00c fa7f 	bl	800d238 <osSemaphoreNew>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <ADC_Init+0x34>)
 8000d3e:	6013      	str	r3, [r2, #0]
	//start to collect ADC signals into ADC buffer through the DMA
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 8000d40:	2209      	movs	r2, #9
 8000d42:	4906      	ldr	r1, [pc, #24]	; (8000d5c <ADC_Init+0x38>)
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f001 fd49 	bl	80027dc <HAL_ADC_Start_DMA>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08015538 	.word	0x08015538
 8000d58:	20000220 	.word	0x20000220
 8000d5c:	20000200 	.word	0x20000200

08000d60 <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	// average the ADC values from 3 consecutive samples and convert them into the analog values with the formula (VREF-GND)/ADC_BIT_RESOLUTION
	//// analog values from adc bit sample = (VREF-GND)*ADC_bits/4095
	for(int i = 0 ; i < 3; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	e03a      	b.n	8000de4 <HAL_ADC_ConvCpltCallback+0x84>
		ADC_buffer_processed[i] = resistor_divider_val * ((vref-gnd)/adc_reso)*(((float)ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3);
 8000d6e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000dfc <HAL_ADC_ConvCpltCallback+0x9c>
 8000d72:	eddf 7a23 	vldr	s15, [pc, #140]	; 8000e00 <HAL_ADC_ConvCpltCallback+0xa0>
 8000d76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d7a:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000e04 <HAL_ADC_ConvCpltCallback+0xa4>
 8000d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d82:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000d86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d92:	ee07 3a90 	vmov	s15, r3
 8000d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3303      	adds	r3, #3
 8000d9e:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3306      	adds	r3, #6
 8000db4:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000dc6:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8000dca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_ADC_ConvCpltCallback+0xac>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3; i++) {
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	ddc1      	ble.n	8000d6e <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f00c fafe 	bl	800d3f0 <osSemaphoreRelease>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40533333 	.word	0x40533333
 8000e00:	00000000 	.word	0x00000000
 8000e04:	45800000 	.word	0x45800000
 8000e08:	20000200 	.word	0x20000200
 8000e0c:	20000214 	.word	0x20000214
 8000e10:	20000220 	.word	0x20000220

08000e14 <check_error>:
//define variables
const char yourmom[] = "URMOM.txt";

void controller_state_machine(void *args);

static inline bool check_error(float APPS_VPA, float APPS_VPA2, float BSE){
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e1e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e22:	ed87 1a01 	vstr	s2, [r7, #4]
	//| (APPS_VPA2 >4.5) | (BSE<0.5) | (APPS_VPA2 <0.5) |
	return ((APPS_VPA<=0.5) | (APPS_VPA>=4.5) | (BSE>4.5));
 8000e26:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e36:	bf94      	ite	ls
 8000e38:	2301      	movls	r3, #1
 8000e3a:	2300      	movhi	r3, #0
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e42:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8000e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4e:	bfac      	ite	ge
 8000e50:	2301      	movge	r3, #1
 8000e52:	2300      	movlt	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e60:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8000e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	bfcc      	ite	gt
 8000e6e:	2301      	movgt	r3, #1
 8000e70:	2300      	movle	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	bf14      	ite	ne
 8000e7a:	2301      	movne	r3, #1
 8000e7c:	2300      	moveq	r3, #0
 8000e7e:	b2db      	uxtb	r3, r3
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <state_machine_init>:

void state_machine_init(void){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	thr_1 = osThreadNew(controller_state_machine, &hadc1, &thr_1_attributes);
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <state_machine_init+0x18>)
 8000e92:	4905      	ldr	r1, [pc, #20]	; (8000ea8 <state_machine_init+0x1c>)
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <state_machine_init+0x20>)
 8000e96:	f00b ffee 	bl	800ce76 <osThreadNew>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <state_machine_init+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	08015548 	.word	0x08015548
 8000ea8:	20000278 	.word	0x20000278
 8000eac:	08000ee9 	.word	0x08000ee9
 8000eb0:	20000274 	.word	0x20000274

08000eb4 <update_values>:

void update_values(float *APPS_VPA, float *APPS_VPA2, float * BSE){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
	  *APPS_VPA=ADC_buffer_processed[0];
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <update_values+0x30>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	601a      	str	r2, [r3, #0]
	  *APPS_VPA2=ADC_buffer_processed[1];
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <update_values+0x30>)
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	601a      	str	r2, [r3, #0]
	  *BSE=ADC_buffer_processed[2];
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <update_values+0x30>)
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	601a      	str	r2, [r3, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000214 	.word	0x20000214

08000ee8 <controller_state_machine>:

void controller_state_machine(void *args){
 8000ee8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eec:	b0a6      	sub	sp, #152	; 0x98
 8000eee:	af06      	add	r7, sp, #24
 8000ef0:	6078      	str	r0, [r7, #4]
	SD_init();
 8000ef2:	f000 fcf5 	bl	80018e0 <SD_init>
	float APPS_VPA = 0, APPS_VPA2 = 0, BSE = 0;
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	673b      	str	r3, [r7, #112]	; 0x70
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	66bb      	str	r3, [r7, #104]	; 0x68
//	uint8_t sd_status = BSP_SD_IsDetected();
	char buffer[90];
	//dummy var for storing motor temp
	float motor_overheat = 0;
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t startTimeStamp = osKernelGetSysTimerCount();
 8000f0e:	f00b ff79 	bl	800ce04 <osKernelGetSysTimerCount>
 8000f12:	67f8      	str	r0, [r7, #124]	; 0x7c
//	if (sd_status == SD_PRESENT) {
//		SD_init();
//	}
	  for(;;)
	  {
		  osSemaphoreAcquire(ADC_semHandle, 1);
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <controller_state_machine+0xd0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00c fa16 	bl	800d34c <osSemaphoreAcquire>
//		  if ((sd_status != BSP_SD_IsDetected()) && (BSP_SD_IsDetected() == SD_PRESENT)){
//			  SD_init();
//		  }
//		  sd_status = BSP_SD_IsDetected();
		  update_values(&APPS_VPA, &APPS_VPA2, &BSE);
 8000f20:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000f24:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000f28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ffc1 	bl	8000eb4 <update_values>
		  int n = snprintf(buffer, sizeof(buffer), "Error log: APPS Value is %1.2f, APPS2 Value is %1.2f, BSE Value is %1.2f; \n", APPS_VPA, APPS_VPA2, BSE);
 8000f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb1f 	bl	8000578 <__aeabi_f2d>
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	460d      	mov	r5, r1
 8000f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fb19 	bl	8000578 <__aeabi_f2d>
 8000f46:	4680      	mov	r8, r0
 8000f48:	4689      	mov	r9, r1
 8000f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fb13 	bl	8000578 <__aeabi_f2d>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	f107 000c 	add.w	r0, r7, #12
 8000f5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f5e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000f62:	e9cd 4500 	strd	r4, r5, [sp]
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <controller_state_machine+0xd4>)
 8000f68:	215a      	movs	r1, #90	; 0x5a
 8000f6a:	f010 fdf7 	bl	8011b5c <sniprintf>
 8000f6e:	6778      	str	r0, [r7, #116]	; 0x74
		  //maybe can replace with another while 1 looperoni
		  if (check_error(APPS_VPA, APPS_VPA2, BSE)){
 8000f70:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8000f74:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8000f78:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8000f7c:	eeb0 1a66 	vmov.f32	s2, s13
 8000f80:	eef0 0a47 	vmov.f32	s1, s14
 8000f84:	eeb0 0a67 	vmov.f32	s0, s15
 8000f88:	f7ff ff44 	bl	8000e14 <check_error>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00e      	beq.n	8000fb0 <controller_state_machine+0xc8>
			  if(osKernelGetSysTimerCount() - startTimeStamp >= 100) {
 8000f92:	f00b ff37 	bl	800ce04 <osKernelGetSysTimerCount>
 8000f96:	4602      	mov	r2, r0
 8000f98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b63      	cmp	r3, #99	; 0x63
 8000f9e:	d9b9      	bls.n	8000f14 <controller_state_machine+0x2c>
				  //send error frame
//				  if (sd_status == SD_PRESENT) {
					  SD_process(yourmom, buffer, n);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <controller_state_machine+0xd8>)
 8000faa:	f000 fcbf 	bl	800192c <SD_process>
 8000fae:	e7b1      	b.n	8000f14 <controller_state_machine+0x2c>
				  }
//			  }
		  }
		  else {
			  startTimeStamp = osKernelGetSysTimerCount();
 8000fb0:	f00b ff28 	bl	800ce04 <osKernelGetSysTimerCount>
 8000fb4:	67f8      	str	r0, [r7, #124]	; 0x7c
	  {
 8000fb6:	e7ad      	b.n	8000f14 <controller_state_machine+0x2c>
 8000fb8:	20000220 	.word	0x20000220
 8000fbc:	08015484 	.word	0x08015484
 8000fc0:	0801556c 	.word	0x0801556c

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f001 f871 	bl	80020ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f826 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 f97c 	bl	80012cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd4:	f000 f950 	bl	8001278 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000fd8:	f000 f92c 	bl	8001234 <MX_SDMMC1_SD_Init>
  MX_CAN1_Init();
 8000fdc:	f000 f8f4 	bl	80011c8 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000fe0:	f000 f86a 	bl	80010b8 <MX_ADC1_Init>
  MX_FATFS_Init();
 8000fe4:	f008 fcda 	bl	800999c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fe8:	f00b fe5e 	bl	800cca8 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <main+0x48>)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <main+0x4c>)
 8000ff2:	f00b ff40 	bl	800ce76 <osThreadNew>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a06      	ldr	r2, [pc, #24]	; (8001014 <main+0x50>)
 8000ffa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init(&hadc1);
 8000ffc:	4806      	ldr	r0, [pc, #24]	; (8001018 <main+0x54>)
 8000ffe:	f7ff fe91 	bl	8000d24 <ADC_Init>

  state_machine_init();
 8001002:	f7ff ff43 	bl	8000e8c <state_machine_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001006:	f00b fe95 	bl	800cd34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100a:	e7fe      	b.n	800100a <main+0x46>
 800100c:	08015578 	.word	0x08015578
 8001010:	080018a1 	.word	0x080018a1
 8001014:	200003e8 	.word	0x200003e8
 8001018:	20000278 	.word	0x20000278

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b096      	sub	sp, #88	; 0x58
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2244      	movs	r2, #68	; 0x44
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f00f fdff 	bl	8010c2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800103e:	2000      	movs	r0, #0
 8001040:	f003 f99c 	bl	800437c <HAL_PWREx_ControlVoltageScaling>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800104a:	f000 fc43 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800104e:	2301      	movs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001056:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105c:	2303      	movs	r3, #3
 800105e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001060:	2302      	movs	r3, #2
 8001062:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001064:	231e      	movs	r3, #30
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800106c:	2302      	movs	r3, #2
 800106e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fa33 	bl	80044e4 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001084:	f000 fc26 	bl	80018d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2303      	movs	r3, #3
 800108e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	2105      	movs	r1, #5
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fe39 	bl	8004d18 <HAL_RCC_ClockConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010ac:	f000 fc12 	bl	80018d4 <Error_Handler>
  }
}
 80010b0:	bf00      	nop
 80010b2:	3758      	adds	r7, #88	; 0x58
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <MX_ADC1_Init+0xfc>)
 80010d0:	4a39      	ldr	r2, [pc, #228]	; (80011b8 <MX_ADC1_Init+0x100>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <MX_ADC1_Init+0xfc>)
 80010d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <MX_ADC1_Init+0xfc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <MX_ADC1_Init+0xfc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <MX_ADC1_Init+0xfc>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <MX_ADC1_Init+0xfc>)
 80010f0:	2208      	movs	r2, #8
 80010f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <MX_ADC1_Init+0xfc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <MX_ADC1_Init+0xfc>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001100:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <MX_ADC1_Init+0xfc>)
 8001102:	2203      	movs	r2, #3
 8001104:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <MX_ADC1_Init+0xfc>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110e:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <MX_ADC1_Init+0xfc>)
 8001110:	2200      	movs	r2, #0
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <MX_ADC1_Init+0xfc>)
 8001116:	2200      	movs	r2, #0
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <MX_ADC1_Init+0xfc>)
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <MX_ADC1_Init+0xfc>)
 8001124:	2200      	movs	r2, #0
 8001126:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <MX_ADC1_Init+0xfc>)
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8001130:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <MX_ADC1_Init+0xfc>)
 8001132:	2204      	movs	r2, #4
 8001134:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001136:	481f      	ldr	r0, [pc, #124]	; (80011b4 <MX_ADC1_Init+0xfc>)
 8001138:	f001 fa04 	bl	8002544 <HAL_ADC_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001142:	f000 fbc7 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_ADC1_Init+0x104>)
 8001148:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800114a:	2306      	movs	r3, #6
 800114c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800114e:	2305      	movs	r3, #5
 8001150:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001152:	237f      	movs	r3, #127	; 0x7f
 8001154:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001156:	2304      	movs	r3, #4
 8001158:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <MX_ADC1_Init+0xfc>)
 8001164:	f001 fd90 	bl	8002c88 <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800116e:	f000 fbb1 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001172:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <MX_ADC1_Init+0x108>)
 8001174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001176:	230c      	movs	r3, #12
 8001178:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_ADC1_Init+0xfc>)
 8001180:	f001 fd82 	bl	8002c88 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800118a:	f000 fba3 	bl	80018d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <MX_ADC1_Init+0x10c>)
 8001190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001192:	2312      	movs	r3, #18
 8001194:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_ADC1_Init+0xfc>)
 800119c:	f001 fd74 	bl	8002c88 <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 80011a6:	f000 fb95 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000278 	.word	0x20000278
 80011b8:	50040000 	.word	0x50040000
 80011bc:	14f00020 	.word	0x14f00020
 80011c0:	19200040 	.word	0x19200040
 80011c4:	1d500080 	.word	0x1d500080

080011c8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_CAN1_Init+0x64>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <MX_CAN1_Init+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_CAN1_Init+0x64>)
 80011d4:	2214      	movs	r2, #20
 80011d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_CAN1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_CAN1_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_CAN1_Init+0x64>)
 80011e6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80011ea:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_CAN1_Init+0x64>)
 80011ee:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80011f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <MX_CAN1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_CAN1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_CAN1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_CAN1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_CAN1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_CAN1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_CAN1_Init+0x64>)
 800121a:	f002 fa7d 	bl	8003718 <HAL_CAN_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001224:	f000 fb56 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000340 	.word	0x20000340
 8001230:	40006400 	.word	0x40006400

08001234 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <MX_SDMMC1_SD_Init+0x3c>)
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <MX_SDMMC1_SD_Init+0x40>)
 800123c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_SDMMC1_SD_Init+0x3c>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <MX_SDMMC1_SD_Init+0x3c>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_SDMMC1_SD_Init+0x3c>)
 800124c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001250:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <MX_SDMMC1_SD_Init+0x3c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <MX_SDMMC1_SD_Init+0x3c>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <MX_SDMMC1_SD_Init+0x3c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000368 	.word	0x20000368
 8001274:	50062400 	.word	0x50062400

08001278 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_DMA_Init+0x50>)
 8001280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001282:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <MX_DMA_Init+0x50>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6493      	str	r3, [r2, #72]	; 0x48
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_DMA_Init+0x50>)
 800128c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_DMA_Init+0x50>)
 8001298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <MX_DMA_Init+0x50>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6493      	str	r3, [r2, #72]	; 0x48
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_DMA_Init+0x50>)
 80012a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2105      	movs	r1, #5
 80012b2:	200e      	movs	r0, #14
 80012b4:	f002 fbe4 	bl	8003a80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80012b8:	200e      	movs	r0, #14
 80012ba:	f002 fbfd 	bl	8003ab8 <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	; 0x38
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012e2:	4bb2      	ldr	r3, [pc, #712]	; (80015ac <MX_GPIO_Init+0x2e0>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4ab1      	ldr	r2, [pc, #708]	; (80015ac <MX_GPIO_Init+0x2e0>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4baf      	ldr	r3, [pc, #700]	; (80015ac <MX_GPIO_Init+0x2e0>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fa:	4bac      	ldr	r3, [pc, #688]	; (80015ac <MX_GPIO_Init+0x2e0>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4aab      	ldr	r2, [pc, #684]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4ba9      	ldr	r3, [pc, #676]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001312:	4ba6      	ldr	r3, [pc, #664]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4aa5      	ldr	r2, [pc, #660]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4ba3      	ldr	r3, [pc, #652]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4ba0      	ldr	r3, [pc, #640]	; (80015ac <MX_GPIO_Init+0x2e0>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a9f      	ldr	r2, [pc, #636]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b9d      	ldr	r3, [pc, #628]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b9a      	ldr	r3, [pc, #616]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a99      	ldr	r2, [pc, #612]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b97      	ldr	r3, [pc, #604]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800135a:	4b94      	ldr	r3, [pc, #592]	; (80015ac <MX_GPIO_Init+0x2e0>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a93      	ldr	r2, [pc, #588]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b91      	ldr	r3, [pc, #580]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001372:	f003 f8a7 	bl	80044c4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001376:	4b8d      	ldr	r3, [pc, #564]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a8c      	ldr	r2, [pc, #560]	; (80015ac <MX_GPIO_Init+0x2e0>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b8a      	ldr	r3, [pc, #552]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	4b87      	ldr	r3, [pc, #540]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a86      	ldr	r2, [pc, #536]	; (80015ac <MX_GPIO_Init+0x2e0>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b84      	ldr	r3, [pc, #528]	; (80015ac <MX_GPIO_Init+0x2e0>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013a6:	4b81      	ldr	r3, [pc, #516]	; (80015ac <MX_GPIO_Init+0x2e0>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a80      	ldr	r2, [pc, #512]	; (80015ac <MX_GPIO_Init+0x2e0>)
 80013ac:	f043 0320 	orr.w	r3, r3, #32
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b7e      	ldr	r3, [pc, #504]	; (80015ac <MX_GPIO_Init+0x2e0>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0320 	and.w	r3, r3, #32
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f244 0114 	movw	r1, #16404	; 0x4014
 80013c4:	487a      	ldr	r0, [pc, #488]	; (80015b0 <MX_GPIO_Init+0x2e4>)
 80013c6:	f002 ffa1 	bl	800430c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d0:	4878      	ldr	r0, [pc, #480]	; (80015b4 <MX_GPIO_Init+0x2e8>)
 80013d2:	f002 ff9b 	bl	800430c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f002 ff95 	bl	800430c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2104      	movs	r1, #4
 80013e6:	4874      	ldr	r0, [pc, #464]	; (80015b8 <MX_GPIO_Init+0x2ec>)
 80013e8:	f002 ff90 	bl	800430c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 80013ec:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80013fe:	2305      	movs	r3, #5
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	486c      	ldr	r0, [pc, #432]	; (80015bc <MX_GPIO_Init+0x2f0>)
 800140a:	f002 fdd5 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 800140e:	f244 0314 	movw	r3, #16404	; 0x4014
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	4862      	ldr	r0, [pc, #392]	; (80015b0 <MX_GPIO_Init+0x2e4>)
 8001428:	f002 fdc6 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NBL0_Pin PSRAM_NBL1_Pin PSRAM_A20_Pin PSRAM_A19_Pin
                           D7_Pin D6_Pin D12_Pin D5_Pin
                           D11_Pin D4_Pin D10_Pin D9_Pin
                           D8_Pin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 800142c:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800143e:	230c      	movs	r3, #12
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	485d      	ldr	r0, [pc, #372]	; (80015c0 <MX_GPIO_Init+0x2f4>)
 800144a:	f002 fdb5 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800144e:	2310      	movs	r3, #16
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800145e:	2302      	movs	r3, #2
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	4853      	ldr	r0, [pc, #332]	; (80015b8 <MX_GPIO_Init+0x2ec>)
 800146a:	f002 fda5 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 800146e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001480:	2307      	movs	r3, #7
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f002 fd93 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_10_Pin */
  GPIO_InitStruct.Pin = ARD_10_Pin;
 8001492:	2301      	movs	r3, #1
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014a2:	2305      	movs	r3, #5
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	4843      	ldr	r0, [pc, #268]	; (80015bc <MX_GPIO_Init+0x2f0>)
 80014ae:	f002 fd83 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80014b2:	23b0      	movs	r3, #176	; 0xb0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80014c2:	230a      	movs	r3, #10
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	483b      	ldr	r0, [pc, #236]	; (80015bc <MX_GPIO_Init+0x2f0>)
 80014ce:	f002 fd73 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 80014d2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80014e4:	230d      	movs	r3, #13
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4832      	ldr	r0, [pc, #200]	; (80015b8 <MX_GPIO_Init+0x2ec>)
 80014f0:	f002 fd62 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 80014f4:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8001506:	2305      	movs	r3, #5
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	482c      	ldr	r0, [pc, #176]	; (80015c4 <MX_GPIO_Init+0x2f8>)
 8001512:	f002 fd51 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin PSRAM_OE_Pin D3_Pin PSRAM_WE_Pin
                           PSRAM_WAIT_Pin PSRAM_CLK_Pin PSRAM_NE1_Pin PSRAM_A18_Pin
                           D1_Pin D0_Pin PSRAM_A17_Pin PSRAM_A16_Pin
                           D15_Pin D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001516:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001528:	230c      	movs	r3, #12
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	4825      	ldr	r0, [pc, #148]	; (80015c8 <MX_GPIO_Init+0x2fc>)
 8001534:	f002 fd40 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001538:	2302      	movs	r3, #2
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	481b      	ldr	r0, [pc, #108]	; (80015bc <MX_GPIO_Init+0x2f0>)
 800154e:	f002 fd33 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8001552:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001564:	230a      	movs	r3, #10
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	4619      	mov	r1, r3
 800156e:	4810      	ldr	r0, [pc, #64]	; (80015b0 <MX_GPIO_Init+0x2e4>)
 8001570:	f002 fd22 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SCL_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8001574:	2340      	movs	r3, #64	; 0x40
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001578:	2312      	movs	r3, #18
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157c:	2301      	movs	r3, #1
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001584:	2304      	movs	r3, #4
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	480a      	ldr	r0, [pc, #40]	; (80015b8 <MX_GPIO_Init+0x2ec>)
 8001590:	f002 fd12 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e010      	b.n	80015cc <MX_GPIO_Init+0x300>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	48001c00 	.word	0x48001c00
 80015b4:	48000800 	.word	0x48000800
 80015b8:	48000400 	.word	0x48000400
 80015bc:	48002000 	.word	0x48002000
 80015c0:	48001000 	.word	0x48001000
 80015c4:	48001800 	.word	0x48001800
 80015c8:	48000c00 	.word	0x48000c00
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	48ac      	ldr	r0, [pc, #688]	; (8001888 <MX_GPIO_Init+0x5bc>)
 80015d6:	f002 fcef 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 80015da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80015ec:	2305      	movs	r3, #5
 80015ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	48a4      	ldr	r0, [pc, #656]	; (8001888 <MX_GPIO_Init+0x5bc>)
 80015f8:	f002 fcde 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800160c:	230d      	movs	r3, #13
 800160e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001614:	4619      	mov	r1, r3
 8001616:	489d      	ldr	r0, [pc, #628]	; (800188c <MX_GPIO_Init+0x5c0>)
 8001618:	f002 fcce 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSRAM_ADV_Pin */
  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800162c:	230c      	movs	r3, #12
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	4896      	ldr	r0, [pc, #600]	; (8001890 <MX_GPIO_Init+0x5c4>)
 8001638:	f002 fcbe 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 800163c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800164e:	230a      	movs	r3, #10
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165c:	f002 fcac 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8001660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	2301      	movs	r3, #1
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001676:	4619      	mov	r1, r3
 8001678:	4886      	ldr	r0, [pc, #536]	; (8001894 <MX_GPIO_Init+0x5c8>)
 800167a:	f002 fc9d 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A2_Pin PSRAM_A1_Pin PSRAM_A0_Pin PSRAM_A3_Pin
                           PSRAM_A4_Pin PSRAM_A5_Pin PSRAM_A9_Pin PSRAM_A8_Pin
                           PSRAM_A7_Pin PSRAM_A6_Pin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 800167e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001690:	230c      	movs	r3, #12
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	487f      	ldr	r0, [pc, #508]	; (8001898 <MX_GPIO_Init+0x5cc>)
 800169c:	f002 fc8c 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 80016a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a6:	2312      	movs	r3, #18
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016b2:	2304      	movs	r3, #4
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	4619      	mov	r1, r3
 80016bc:	4877      	ldr	r0, [pc, #476]	; (800189c <MX_GPIO_Init+0x5d0>)
 80016be:	f002 fc7b 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80016c2:	2340      	movs	r3, #64	; 0x40
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	4619      	mov	r1, r3
 80016d6:	486f      	ldr	r0, [pc, #444]	; (8001894 <MX_GPIO_Init+0x5c8>)
 80016d8:	f002 fc6e 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 80016dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ee:	2304      	movs	r3, #4
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	4619      	mov	r1, r3
 80016f8:	4868      	ldr	r0, [pc, #416]	; (800189c <MX_GPIO_Init+0x5d0>)
 80016fa:	f002 fc5d 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A14_Pin PSRAM_A13_Pin PSRAM_A15_Pin PSRAM_A11_Pin
                           PSRAM_A12_Pin PSRAM_A10_Pin */
  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80016fe:	233f      	movs	r3, #63	; 0x3f
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800170e:	230c      	movs	r3, #12
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	4860      	ldr	r0, [pc, #384]	; (800189c <MX_GPIO_Init+0x5d0>)
 800171a:	f002 fc4d 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 800171e:	2384      	movs	r3, #132	; 0x84
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800172e:	2306      	movs	r3, #6
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001736:	4619      	mov	r1, r3
 8001738:	4856      	ldr	r0, [pc, #344]	; (8001894 <MX_GPIO_Init+0x5c8>)
 800173a:	f002 fc3d 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 800173e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001750:	2307      	movs	r3, #7
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	484d      	ldr	r0, [pc, #308]	; (8001890 <MX_GPIO_Init+0x5c4>)
 800175c:	f002 fc2c 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001760:	2303      	movs	r3, #3
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001770:	2308      	movs	r3, #8
 8001772:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	4846      	ldr	r0, [pc, #280]	; (8001894 <MX_GPIO_Init+0x5c8>)
 800177c:	f002 fc1c 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001780:	2320      	movs	r3, #32
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001796:	f002 fc0f 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800179a:	2340      	movs	r3, #64	; 0x40
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b4:	f002 fc00 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_MOSI_Pin SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80017b8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ca:	2305      	movs	r3, #5
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	482e      	ldr	r0, [pc, #184]	; (8001890 <MX_GPIO_Init+0x5c4>)
 80017d6:	f002 fbef 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 80017da:	2308      	movs	r3, #8
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ea:	2307      	movs	r3, #7
 80017ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	4619      	mov	r1, r3
 80017f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f8:	f002 fbde 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 80017fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 800180e:	230b      	movs	r3, #11
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	481f      	ldr	r0, [pc, #124]	; (8001898 <MX_GPIO_Init+0x5cc>)
 800181a:	f002 fbcd 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 800181e:	2310      	movs	r3, #16
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800182e:	230a      	movs	r3, #10
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183c:	f002 fbbc 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8001840:	2304      	movs	r3, #4
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	480e      	ldr	r0, [pc, #56]	; (8001890 <MX_GPIO_Init+0x5c4>)
 8001858:	f002 fbae 	bl	8003fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 800185c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800186e:	2306      	movs	r3, #6
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_GPIO_Init+0x5c4>)
 800187a:	f002 fb9d 	bl	8003fb8 <HAL_GPIO_Init>

}
 800187e:	bf00      	nop
 8001880:	3738      	adds	r7, #56	; 0x38
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	48001c00 	.word	0x48001c00
 800188c:	48001000 	.word	0x48001000
 8001890:	48000400 	.word	0x48000400
 8001894:	48000800 	.word	0x48000800
 8001898:	48001400 	.word	0x48001400
 800189c:	48001800 	.word	0x48001800

080018a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f00b fb76 	bl	800cf9a <osDelay>
 80018ae:	e7fb      	b.n	80018a8 <StartDefaultTask+0x8>

080018b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c2:	f000 fc0d 	bl	80020e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40001000 	.word	0x40001000

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	e7fe      	b.n	80018dc <Error_Handler+0x8>
	...

080018e0 <SD_init>:
uint16_t rtext[_MAX_SS];/* File read buffer */
/* USER CODE END 1 */


//if unmount SD card, need to rerun this block SD_init again to re-mount sd card, otherwise data collection process will be halted.
void SD_init(void){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af02      	add	r7, sp, #8
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK){
 80018e6:	2200      	movs	r2, #0
 80018e8:	490d      	ldr	r1, [pc, #52]	; (8001920 <SD_init+0x40>)
 80018ea:	480e      	ldr	r0, [pc, #56]	; (8001924 <SD_init+0x44>)
 80018ec:	f00a f846 	bl	800b97c <f_mount>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <SD_init+0x1c>
		Error_Handler();
 80018f6:	f7ff ffed 	bl	80018d4 <Error_Handler>
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		{
			Error_Handler();
		}
	}
}
 80018fa:	e00d      	b.n	8001918 <SD_init+0x38>
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 80018fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <SD_init+0x48>)
 8001904:	2200      	movs	r2, #0
 8001906:	2107      	movs	r1, #7
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <SD_init+0x40>)
 800190a:	f00a fcbd 	bl	800c288 <f_mkfs>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SD_init+0x38>
			Error_Handler();
 8001914:	f7ff ffde 	bl	80018d4 <Error_Handler>
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000084c 	.word	0x2000084c
 8001924:	20000850 	.word	0x20000850
 8001928:	200003f4 	.word	0x200003f4

0800192c <SD_process>:
//
//void* is common denominator for all pointers. Temp var to be changed to use with anything else
void SD_process(const char *filename, void *buffer, int length){
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
			//Open file for writing (Create)
//			if(f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK){
			if(f_open(&SDFile, filename, FA_OPEN_APPEND | FA_WRITE) != FR_OK){
 8001938:	2232      	movs	r2, #50	; 0x32
 800193a:	68f9      	ldr	r1, [r7, #12]
 800193c:	4812      	ldr	r0, [pc, #72]	; (8001988 <SD_process+0x5c>)
 800193e:	f00a f881 	bl	800ba44 <f_open>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <SD_process+0x22>
				Error_Handler();
 8001948:	f7ff ffc4 	bl	80018d4 <Error_Handler>
					f_close(&SDFile);
				}
			}
			//create if condition to check if buffer is null/bad function calls
//	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
}
 800194c:	e017      	b.n	800197e <SD_process+0x52>
				res = f_write(&SDFile, buffer, length, (void *)&byteswritten);
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <SD_process+0x60>)
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <SD_process+0x5c>)
 8001956:	f00a fa3a 	bl	800bdce <f_write>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <SD_process+0x64>)
 8001960:	701a      	strb	r2, [r3, #0]
				if((byteswritten == 0) || (res != FR_OK)){
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <SD_process+0x60>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <SD_process+0x46>
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <SD_process+0x64>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <SD_process+0x4c>
					Error_Handler();
 8001972:	f7ff ffaf 	bl	80018d4 <Error_Handler>
}
 8001976:	e002      	b.n	800197e <SD_process+0x52>
					f_close(&SDFile);
 8001978:	4803      	ldr	r0, [pc, #12]	; (8001988 <SD_process+0x5c>)
 800197a:	f00a fc55 	bl	800c228 <f_close>
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000a84 	.word	0x20000a84
 800198c:	200003f0 	.word	0x200003f0
 8001990:	200003ec 	.word	0x200003ec

08001994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_MspInit+0x4c>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199e:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6613      	str	r3, [r2, #96]	; 0x60
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_MspInit+0x4c>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_MspInit+0x4c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6593      	str	r3, [r2, #88]	; 0x58
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_MspInit+0x4c>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	210f      	movs	r1, #15
 80019ce:	f06f 0001 	mvn.w	r0, #1
 80019d2:	f002 f855 	bl	8003a80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0b2      	sub	sp, #200	; 0xc8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019fc:	f107 0318 	add.w	r3, r7, #24
 8001a00:	229c      	movs	r2, #156	; 0x9c
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f00f f912 	bl	8010c2e <memset>
  if(hadc->Instance==ADC1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a5d      	ldr	r2, [pc, #372]	; (8001b84 <HAL_ADC_MspInit+0x1a0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	f040 80b2 	bne.w	8001b7a <HAL_ADC_MspInit+0x196>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001a24:	2303      	movs	r3, #3
 8001a26:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a42:	f107 0318 	add.w	r3, r7, #24
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fc52 	bl	80052f0 <HAL_RCCEx_PeriphCLKConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001a52:	f7ff ff3f 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a56:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a4b      	ldr	r2, [pc, #300]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a45      	ldr	r2, [pc, #276]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b43      	ldr	r3, [pc, #268]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a3f      	ldr	r2, [pc, #252]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a39      	ldr	r2, [pc, #228]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <HAL_ADC_MspInit+0x1a4>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8001ab6:	2318      	movs	r3, #24
 8001ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001abc:	230b      	movs	r3, #11
 8001abe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001acc:	4619      	mov	r1, r3
 8001ace:	482f      	ldr	r0, [pc, #188]	; (8001b8c <HAL_ADC_MspInit+0x1a8>)
 8001ad0:	f002 fa72 	bl	8003fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8001ad4:	2387      	movs	r3, #135	; 0x87
 8001ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ada:	230b      	movs	r3, #11
 8001adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af0:	f002 fa62 	bl	8003fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001afa:	230b      	movs	r3, #11
 8001afc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4820      	ldr	r0, [pc, #128]	; (8001b90 <HAL_ADC_MspInit+0x1ac>)
 8001b0e:	f002 fa53 	bl	8003fb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b14:	4a20      	ldr	r2, [pc, #128]	; (8001b98 <HAL_ADC_MspInit+0x1b4>)
 8001b16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b42:	2220      	movs	r2, #32
 8001b44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b48:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001b4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b4e:	4811      	ldr	r0, [pc, #68]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b50:	f001 ffc0 	bl	8003ad4 <HAL_DMA_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_ADC_MspInit+0x17a>
    {
      Error_Handler();
 8001b5a:	f7ff febb 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b62:	651a      	str	r2, [r3, #80]	; 0x50
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_ADC_MspInit+0x1b0>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2105      	movs	r1, #5
 8001b6e:	2012      	movs	r0, #18
 8001b70:	f001 ff86 	bl	8003a80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001b74:	2012      	movs	r0, #18
 8001b76:	f001 ff9f 	bl	8003ab8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b7a:	bf00      	nop
 8001b7c:	37c8      	adds	r7, #200	; 0xc8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	50040000 	.word	0x50040000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	48000800 	.word	0x48000800
 8001b90:	48000400 	.word	0x48000400
 8001b94:	200002e0 	.word	0x200002e0
 8001b98:	40020044 	.word	0x40020044

08001b9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <HAL_CAN_MspInit+0x80>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d129      	bne.n	8001c12 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_CAN_MspInit+0x84>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_CAN_MspInit+0x84>)
 8001bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_CAN_MspInit+0x84>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_CAN_MspInit+0x84>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_CAN_MspInit+0x84>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_CAN_MspInit+0x84>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001bee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c00:	2309      	movs	r3, #9
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0e:	f002 f9d3 	bl	8003fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40006400 	.word	0x40006400
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0b2      	sub	sp, #200	; 0xc8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c3c:	f107 0318 	add.w	r3, r7, #24
 8001c40:	229c      	movs	r2, #156	; 0x9c
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f00e fff2 	bl	8010c2e <memset>
  if(hsd->Instance==SDMMC1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a37      	ldr	r2, [pc, #220]	; (8001d2c <HAL_SD_MspInit+0x108>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d167      	bne.n	8001d24 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001c54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001c58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001c5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 fb42 	bl	80052f0 <HAL_RCCEx_PeriphCLKConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001c72:	f7ff fe2f 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001c76:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <HAL_SD_MspInit+0x10c>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	4a2d      	ldr	r2, [pc, #180]	; (8001d30 <HAL_SD_MspInit+0x10c>)
 8001c7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c82:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_SD_MspInit+0x10c>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_SD_MspInit+0x10c>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <HAL_SD_MspInit+0x10c>)
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9a:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_SD_MspInit+0x10c>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca6:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_SD_MspInit+0x10c>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a21      	ldr	r2, [pc, #132]	; (8001d30 <HAL_SD_MspInit+0x10c>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <HAL_SD_MspInit+0x10c>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4814      	ldr	r0, [pc, #80]	; (8001d34 <HAL_SD_MspInit+0x110>)
 8001ce4:	f002 f968 	bl	8003fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001ce8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d02:	230c      	movs	r3, #12
 8001d04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480a      	ldr	r0, [pc, #40]	; (8001d38 <HAL_SD_MspInit+0x114>)
 8001d10:	f002 f952 	bl	8003fb8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2105      	movs	r1, #5
 8001d18:	2031      	movs	r0, #49	; 0x31
 8001d1a:	f001 feb1 	bl	8003a80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001d1e:	2031      	movs	r0, #49	; 0x31
 8001d20:	f001 feca 	bl	8003ab8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001d24:	bf00      	nop
 8001d26:	37c8      	adds	r7, #200	; 0xc8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	50062400 	.word	0x50062400
 8001d30:	40021000 	.word	0x40021000
 8001d34:	48000c00 	.word	0x48000c00
 8001d38:	48000800 	.word	0x48000800

08001d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08e      	sub	sp, #56	; 0x38
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d4a:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <HAL_InitTick+0xe0>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	4a33      	ldr	r2, [pc, #204]	; (8001e1c <HAL_InitTick+0xe0>)
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	6593      	str	r3, [r2, #88]	; 0x58
 8001d56:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <HAL_InitTick+0xe0>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d62:	f107 0210 	add.w	r2, r7, #16
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 f9cf 	bl	8005110 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d103      	bne.n	8001d84 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d7c:	f003 f99c 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8001d80:	6378      	str	r0, [r7, #52]	; 0x34
 8001d82:	e004      	b.n	8001d8e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d84:	f003 f998 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d90:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <HAL_InitTick+0xe4>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	0c9b      	lsrs	r3, r3, #18
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_InitTick+0xe8>)
 8001d9e:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <HAL_InitTick+0xec>)
 8001da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_InitTick+0xe8>)
 8001da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001da8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001daa:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <HAL_InitTick+0xe8>)
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_InitTick+0xe8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_InitTick+0xe8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_InitTick+0xe8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001dc2:	4818      	ldr	r0, [pc, #96]	; (8001e24 <HAL_InitTick+0xe8>)
 8001dc4:	f006 fd33 	bl	800882e <HAL_TIM_Base_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001dce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d11b      	bne.n	8001e0e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001dd6:	4813      	ldr	r0, [pc, #76]	; (8001e24 <HAL_InitTick+0xe8>)
 8001dd8:	f006 fd8a 	bl	80088f0 <HAL_TIM_Base_Start_IT>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001de2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d111      	bne.n	8001e0e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dea:	2036      	movs	r0, #54	; 0x36
 8001dec:	f001 fe64 	bl	8003ab8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	d808      	bhi.n	8001e08 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001df6:	2200      	movs	r2, #0
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	2036      	movs	r0, #54	; 0x36
 8001dfc:	f001 fe40 	bl	8003a80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_InitTick+0xf0>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e002      	b.n	8001e0e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3738      	adds	r7, #56	; 0x38
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	200007f4 	.word	0x200007f4
 8001e28:	40001000 	.word	0x40001000
 8001e2c:	20000004 	.word	0x20000004

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler+0x4>

08001e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <MemManage_Handler+0x4>

08001e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <DMA1_Channel4_IRQHandler+0x10>)
 8001e62:	f001 ff5a 	bl	8003d1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200002e0 	.word	0x200002e0

08001e70 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <ADC1_IRQHandler+0x10>)
 8001e76:	f000 fd35 	bl	80028e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000278 	.word	0x20000278

08001e84 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <SDMMC1_IRQHandler+0x10>)
 8001e8a:	f005 fa53 	bl	8007334 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000368 	.word	0x20000368

08001e98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <TIM6_DAC_IRQHandler+0x10>)
 8001e9e:	f006 fd97 	bl	80089d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200007f4 	.word	0x200007f4

08001eac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return 1;
 8001eb0:	2301      	movs	r3, #1
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_kill>:

int _kill(int pid, int sig)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ec6:	f00e fd81 	bl	80109cc <__errno>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2216      	movs	r2, #22
 8001ece:	601a      	str	r2, [r3, #0]
  return -1;
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_exit>:

void _exit (int status)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ffe7 	bl	8001ebc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eee:	e7fe      	b.n	8001eee <_exit+0x12>

08001ef0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e00a      	b.n	8001f18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f02:	f3af 8000 	nop.w
 8001f06:	4601      	mov	r1, r0
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	60ba      	str	r2, [r7, #8]
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dbf0      	blt.n	8001f02 <_read+0x12>
  }

  return len;
 8001f20:	687b      	ldr	r3, [r7, #4]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e009      	b.n	8001f50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60ba      	str	r2, [r7, #8]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf1      	blt.n	8001f3c <_write+0x12>
  }
  return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_close>:

int _close(int file)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_isatty>:

int _isatty(int file)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd4:	4a14      	ldr	r2, [pc, #80]	; (8002028 <_sbrk+0x5c>)
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <_sbrk+0x60>)
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <_sbrk+0x64>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <_sbrk+0x68>)
 8001fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d207      	bcs.n	800200c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ffc:	f00e fce6 	bl	80109cc <__errno>
 8002000:	4603      	mov	r3, r0
 8002002:	220c      	movs	r2, #12
 8002004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800200a:	e009      	b.n	8002020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <_sbrk+0x64>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <_sbrk+0x64>)
 800201c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200a0000 	.word	0x200a0000
 800202c:	00000800 	.word	0x00000800
 8002030:	20000840 	.word	0x20000840
 8002034:	200026c8 	.word	0x200026c8

08002038 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <SystemInit+0x20>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <SystemInit+0x20>)
 8002044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800205c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002094 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002060:	f7ff ffea 	bl	8002038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <LoopForever+0x6>)
  ldr r1, =_edata
 8002066:	490d      	ldr	r1, [pc, #52]	; (800209c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002068:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <LoopForever+0xe>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800207c:	4c0a      	ldr	r4, [pc, #40]	; (80020a8 <LoopForever+0x16>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800208a:	f00e fd9b 	bl	8010bc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800208e:	f7fe ff99 	bl	8000fc4 <main>

08002092 <LoopForever>:

LoopForever:
    b LoopForever
 8002092:	e7fe      	b.n	8002092 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002094:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800209c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80020a0:	08015b44 	.word	0x08015b44
  ldr r2, =_sbss
 80020a4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80020a8:	200026c4 	.word	0x200026c4

080020ac <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <CAN1_RX0_IRQHandler>

080020ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b8:	2003      	movs	r0, #3
 80020ba:	f001 fcd6 	bl	8003a6a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020be:	200f      	movs	r0, #15
 80020c0:	f7ff fe3c 	bl	8001d3c <HAL_InitTick>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	71fb      	strb	r3, [r7, #7]
 80020ce:	e001      	b.n	80020d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020d0:	f7ff fc60 	bl	8001994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020d4:	79fb      	ldrb	r3, [r7, #7]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008
 8002104:	20000844 	.word	0x20000844

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000844 	.word	0x20000844

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008

08002168 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	609a      	str	r2, [r3, #8]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	609a      	str	r2, [r3, #8]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3360      	adds	r3, #96	; 0x60
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <LL_ADC_SetOffset+0x44>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	4313      	orrs	r3, r2
 8002200:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002208:	bf00      	nop
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	03fff000 	.word	0x03fff000

08002218 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3360      	adds	r3, #96	; 0x60
 8002226:	461a      	mov	r2, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3360      	adds	r3, #96	; 0x60
 8002254:	461a      	mov	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	431a      	orrs	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800226e:	bf00      	nop
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	615a      	str	r2, [r3, #20]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b087      	sub	sp, #28
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3330      	adds	r3, #48	; 0x30
 80022d6:	461a      	mov	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	4413      	add	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	211f      	movs	r1, #31
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	f003 011f 	and.w	r1, r3, #31
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	431a      	orrs	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002312:	bf00      	nop
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3314      	adds	r3, #20
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	0e5b      	lsrs	r3, r3, #25
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	4413      	add	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	0d1b      	lsrs	r3, r3, #20
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2107      	movs	r1, #7
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	401a      	ands	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	0d1b      	lsrs	r3, r3, #20
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0318 	and.w	r3, r3, #24
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023c0:	40d9      	lsrs	r1, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	400b      	ands	r3, r1
 80023c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ca:	431a      	orrs	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	0007ffff 	.word	0x0007ffff

080023e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6093      	str	r3, [r2, #8]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800241c:	d101      	bne.n	8002422 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002444:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800246c:	d101      	bne.n	8002472 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <LL_ADC_IsEnabled+0x18>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <LL_ADC_IsEnabled+0x1a>
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e2:	f043 0204 	orr.w	r2, r3, #4
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b04      	cmp	r3, #4
 8002508:	d101      	bne.n	800250e <LL_ADC_REG_IsConversionOngoing+0x18>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b08      	cmp	r3, #8
 800252e:	d101      	bne.n	8002534 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e12f      	b.n	80027be <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fa39 	bl	80019e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff3f 	bl	8002408 <LL_ADC_IsDeepPowerDownEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff25 	bl	80023e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff5a 	bl	8002458 <LL_ADC_IsInternalRegulatorEnabled>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d115      	bne.n	80025d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff3e 	bl	8002430 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025b4:	4b84      	ldr	r3, [pc, #528]	; (80027c8 <HAL_ADC_Init+0x284>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	4a84      	ldr	r2, [pc, #528]	; (80027cc <HAL_ADC_Init+0x288>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	3301      	adds	r3, #1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025c8:	e002      	b.n	80025d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f9      	bne.n	80025ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff3c 	bl	8002458 <LL_ADC_IsInternalRegulatorEnabled>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10d      	bne.n	8002602 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	f043 0210 	orr.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff75 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 800260c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 80c8 	bne.w	80027ac <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 80c4 	bne.w	80027ac <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800262c:	f043 0202 	orr.w	r2, r3, #2
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff35 	bl	80024a8 <LL_ADC_IsEnabled>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002644:	4862      	ldr	r0, [pc, #392]	; (80027d0 <HAL_ADC_Init+0x28c>)
 8002646:	f7ff ff2f 	bl	80024a8 <LL_ADC_IsEnabled>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4619      	mov	r1, r3
 8002656:	485f      	ldr	r0, [pc, #380]	; (80027d4 <HAL_ADC_Init+0x290>)
 8002658:	f7ff fd86 	bl	8002168 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7e5b      	ldrb	r3, [r3, #25]
 8002660:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002666:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800266c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002672:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800267a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d106      	bne.n	8002698 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	3b01      	subs	r3, #1
 8002690:	045b      	lsls	r3, r3, #17
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d009      	beq.n	80026b4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_ADC_Init+0x294>)
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	69b9      	ldr	r1, [r7, #24]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff12 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 80026d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff1f 	bl	800251c <LL_ADC_INJ_IsConversionOngoing>
 80026de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d140      	bne.n	8002768 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d13d      	bne.n	8002768 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	7e1b      	ldrb	r3, [r3, #24]
 80026f4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026f6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026fe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800270e:	f023 0306 	bic.w	r3, r3, #6
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	69b9      	ldr	r1, [r7, #24]
 8002718:	430b      	orrs	r3, r1
 800271a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002722:	2b01      	cmp	r3, #1
 8002724:	d118      	bne.n	8002758 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800273c:	4311      	orrs	r1, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002742:	4311      	orrs	r1, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002748:	430a      	orrs	r2, r1
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	611a      	str	r2, [r3, #16]
 8002756:	e007      	b.n	8002768 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10c      	bne.n	800278a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f023 010f 	bic.w	r1, r3, #15
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	1e5a      	subs	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
 8002788:	e007      	b.n	800279a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 020f 	bic.w	r2, r2, #15
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	659a      	str	r2, [r3, #88]	; 0x58
 80027aa:	e007      	b.n	80027bc <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	f043 0210 	orr.w	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000000 	.word	0x20000000
 80027cc:	053e2d63 	.word	0x053e2d63
 80027d0:	50040000 	.word	0x50040000
 80027d4:	50040300 	.word	0x50040300
 80027d8:	fff0c007 	.word	0xfff0c007

080027dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fe82 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d167      	bne.n	80028c8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Start_DMA+0x2a>
 8002802:	2302      	movs	r3, #2
 8002804:	e063      	b.n	80028ce <HAL_ADC_Start_DMA+0xf2>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fe36 	bl	8003480 <ADC_Enable>
 8002814:	4603      	mov	r3, r0
 8002816:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d14f      	bne.n	80028be <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d006      	beq.n	800284c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	f023 0206 	bic.w	r2, r3, #6
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	65da      	str	r2, [r3, #92]	; 0x5c
 800284a:	e002      	b.n	8002852 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002856:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <HAL_ADC_Start_DMA+0xfc>)
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285e:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <HAL_ADC_Start_DMA+0x100>)
 8002860:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002866:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <HAL_ADC_Start_DMA+0x104>)
 8002868:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	221c      	movs	r2, #28
 8002870:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0210 	orr.w	r2, r2, #16
 8002888:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3340      	adds	r3, #64	; 0x40
 80028a4:	4619      	mov	r1, r3
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f001 f9bb 	bl	8003c24 <HAL_DMA_Start_IT>
 80028ae:	4603      	mov	r3, r0
 80028b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fe09 	bl	80024ce <LL_ADC_REG_StartConversion>
 80028bc:	e006      	b.n	80028cc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80028c6:	e001      	b.n	80028cc <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028c8:	2302      	movs	r3, #2
 80028ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	0800358d 	.word	0x0800358d
 80028dc:	08003665 	.word	0x08003665
 80028e0:	08003681 	.word	0x08003681

080028e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d017      	beq.n	800293a <HAL_ADC_IRQHandler+0x56>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d012      	beq.n	800293a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fee9 	bl	8003704 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2202      	movs	r2, #2
 8002938:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d004      	beq.n	800294e <HAL_ADC_IRQHandler+0x6a>
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05e      	beq.n	8002a16 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d059      	beq.n	8002a16 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fc8e 	bl	80022a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d03e      	beq.n	8002a08 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d135      	bne.n	8002a08 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d12e      	bne.n	8002a08 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fda1 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11a      	bne.n	80029f0 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 020c 	bic.w	r2, r2, #12
 80029c8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d112      	bne.n	8002a08 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	f043 0201 	orr.w	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	659a      	str	r2, [r3, #88]	; 0x58
 80029ee:	e00b      	b.n	8002a08 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f043 0210 	orr.w	r2, r3, #16
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7fe f9a9 	bl	8000d60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	220c      	movs	r2, #12
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x146>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d072      	beq.n	8002b1a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d06d      	beq.n	8002b1a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fc5f 	bl	800231e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a60:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fc1a 	bl	80022a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a6c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d047      	beq.n	8002b0c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_ADC_IRQHandler+0x1b2>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d03f      	beq.n	8002b0c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d13a      	bne.n	8002b0c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d133      	bne.n	8002b0c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d12e      	bne.n	8002b0c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fd32 	bl	800251c <LL_ADC_INJ_IsConversionOngoing>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11a      	bne.n	8002af4 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002acc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d112      	bne.n	8002b0c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	659a      	str	r2, [r3, #88]	; 0x58
 8002af2:	e00b      	b.n	8002b0c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	f043 0210 	orr.w	r2, r3, #16
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	f043 0201 	orr.w	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fdd1 	bl	80036b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2260      	movs	r2, #96	; 0x60
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d011      	beq.n	8002b48 <HAL_ADC_IRQHandler+0x264>
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00c      	beq.n	8002b48 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f890 	bl	8002c60 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d012      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x294>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fdb7 	bl	80036dc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <HAL_ADC_IRQHandler+0x2c4>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00d      	beq.n	8002ba8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fda9 	bl	80036f0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d02a      	beq.n	8002c08 <HAL_ADC_IRQHandler+0x324>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d025      	beq.n	8002c08 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	e008      	b.n	8002bdc <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d10e      	bne.n	8002c00 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	f043 0202 	orr.w	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f83a 	bl	8002c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2210      	movs	r2, #16
 8002c06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d018      	beq.n	8002c44 <HAL_ADC_IRQHandler+0x360>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	f043 0208 	orr.w	r2, r3, #8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c3c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fd42 	bl	80036c8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c44:	bf00      	nop
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b0b6      	sub	sp, #216	; 0xd8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x22>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e3d5      	b.n	8003456 <HAL_ADC_ConfigChannel+0x7ce>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fc1d 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 83ba 	bne.w	8003438 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d824      	bhi.n	8002d16 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	3b02      	subs	r3, #2
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d81b      	bhi.n	8002d0e <HAL_ADC_ConfigChannel+0x86>
 8002cd6:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <HAL_ADC_ConfigChannel+0x54>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cf5 	.word	0x08002cf5
 8002ce4:	08002cfd 	.word	0x08002cfd
 8002ce8:	08002d05 	.word	0x08002d05
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	220c      	movs	r2, #12
 8002cf0:	605a      	str	r2, [r3, #4]
          break;
 8002cf2:	e011      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2212      	movs	r2, #18
 8002cf8:	605a      	str	r2, [r3, #4]
          break;
 8002cfa:	e00d      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2218      	movs	r2, #24
 8002d00:	605a      	str	r2, [r3, #4]
          break;
 8002d02:	e009      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d0a:	605a      	str	r2, [r3, #4]
          break;
 8002d0c:	e004      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2206      	movs	r2, #6
 8002d12:	605a      	str	r2, [r3, #4]
          break;
 8002d14:	e000      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002d16:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	f7ff face 	bl	80022c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fbe1 	bl	80024f6 <LL_ADC_REG_IsConversionOngoing>
 8002d34:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fbed 	bl	800251c <LL_ADC_INJ_IsConversionOngoing>
 8002d42:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 81c1 	bne.w	80030d2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 81bc 	bne.w	80030d2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d62:	d10f      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7ff fae8 	bl	8002344 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fa7c 	bl	800227a <LL_ADC_SetSamplingTimeCommonConfig>
 8002d82:	e00e      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	461a      	mov	r2, r3
 8002d92:	f7ff fad7 	bl	8002344 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fa6c 	bl	800227a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	08db      	lsrs	r3, r3, #3
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d00a      	beq.n	8002dda <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6919      	ldr	r1, [r3, #16]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dd4:	f7ff f9fc 	bl	80021d0 <LL_ADC_SetOffset>
 8002dd8:	e17b      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fa19 	bl	8002218 <LL_ADC_GetOffsetChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10a      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x17e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fa0e 	bl	8002218 <LL_ADC_GetOffsetChannel>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	0e9b      	lsrs	r3, r3, #26
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	e01e      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x1bc>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fa03 	bl	8002218 <LL_ADC_GetOffsetChannel>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002e34:	2320      	movs	r3, #32
 8002e36:	e004      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002e38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1d4>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	e018      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x206>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002e80:	2320      	movs	r3, #32
 8002e82:	e004      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002e84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d106      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff f9d2 	bl	8002244 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f9b6 	bl	8002218 <LL_ADC_GetOffsetChannel>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x244>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2101      	movs	r1, #1
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff f9ab 	bl	8002218 <LL_ADC_GetOffsetChannel>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	f003 021f 	and.w	r2, r3, #31
 8002eca:	e01e      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x282>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f9a0 	bl	8002218 <LL_ADC_GetOffsetChannel>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ef2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002efa:	2320      	movs	r3, #32
 8002efc:	e004      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d105      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x29a>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	0e9b      	lsrs	r3, r3, #26
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	e018      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x2cc>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002f46:	2320      	movs	r3, #32
 8002f48:	e004      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002f4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d106      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff f96f 	bl	8002244 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2102      	movs	r1, #2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff f953 	bl	8002218 <LL_ADC_GetOffsetChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x30a>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2102      	movs	r1, #2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff f948 	bl	8002218 <LL_ADC_GetOffsetChannel>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	e01e      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x348>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2102      	movs	r1, #2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff f93d 	bl	8002218 <LL_ADC_GetOffsetChannel>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002fb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	e004      	b.n	8002fce <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x360>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	0e9b      	lsrs	r3, r3, #26
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	e016      	b.n	8003016 <HAL_ADC_ConfigChannel+0x38e>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ffa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e004      	b.n	8003016 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800300c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003016:	429a      	cmp	r2, r3
 8003018:	d106      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2200      	movs	r2, #0
 8003020:	2102      	movs	r1, #2
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f90e 	bl	8002244 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2103      	movs	r1, #3
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f8f2 	bl	8002218 <LL_ADC_GetOffsetChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x3cc>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2103      	movs	r1, #3
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff f8e7 	bl	8002218 <LL_ADC_GetOffsetChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	0e9b      	lsrs	r3, r3, #26
 800304e:	f003 021f 	and.w	r2, r3, #31
 8003052:	e017      	b.n	8003084 <HAL_ADC_ConfigChannel+0x3fc>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2103      	movs	r1, #3
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f8dc 	bl	8002218 <LL_ADC_GetOffsetChannel>
 8003060:	4603      	mov	r3, r0
 8003062:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800306c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800306e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003076:	2320      	movs	r3, #32
 8003078:	e003      	b.n	8003082 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800307a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <HAL_ADC_ConfigChannel+0x414>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	e011      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x438>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80030aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80030b4:	2320      	movs	r3, #32
 80030b6:	e003      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80030b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d106      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	2103      	movs	r1, #3
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f8b9 	bl	8002244 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff f9e6 	bl	80024a8 <LL_ADC_IsEnabled>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f040 8140 	bne.w	8003364 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	461a      	mov	r2, r3
 80030f2:	f7ff f953 	bl	800239c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	4a8f      	ldr	r2, [pc, #572]	; (8003338 <HAL_ADC_ConfigChannel+0x6b0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	f040 8131 	bne.w	8003364 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10b      	bne.n	800312a <HAL_ADC_ConfigChannel+0x4a2>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	0e9b      	lsrs	r3, r3, #26
 8003118:	3301      	adds	r3, #1
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2b09      	cmp	r3, #9
 8003120:	bf94      	ite	ls
 8003122:	2301      	movls	r3, #1
 8003124:	2300      	movhi	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	e019      	b.n	800315e <HAL_ADC_ConfigChannel+0x4d6>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003138:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800313a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800313c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003142:	2320      	movs	r3, #32
 8003144:	e003      	b.n	800314e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2b09      	cmp	r3, #9
 8003156:	bf94      	ite	ls
 8003158:	2301      	movls	r3, #1
 800315a:	2300      	movhi	r3, #0
 800315c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800315e:	2b00      	cmp	r3, #0
 8003160:	d079      	beq.n	8003256 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316a:	2b00      	cmp	r3, #0
 800316c:	d107      	bne.n	800317e <HAL_ADC_ConfigChannel+0x4f6>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	0e9b      	lsrs	r3, r3, #26
 8003174:	3301      	adds	r3, #1
 8003176:	069b      	lsls	r3, r3, #26
 8003178:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800317c:	e015      	b.n	80031aa <HAL_ADC_ConfigChannel+0x522>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800318c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003196:	2320      	movs	r3, #32
 8003198:	e003      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800319a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	069b      	lsls	r3, r3, #26
 80031a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x542>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	3301      	adds	r3, #1
 80031be:	f003 031f 	and.w	r3, r3, #31
 80031c2:	2101      	movs	r1, #1
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	e017      	b.n	80031fa <HAL_ADC_ConfigChannel+0x572>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80031dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80031e2:	2320      	movs	r3, #32
 80031e4:	e003      	b.n	80031ee <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80031e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	2101      	movs	r1, #1
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	ea42 0103 	orr.w	r1, r2, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x598>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0e9b      	lsrs	r3, r3, #26
 8003210:	3301      	adds	r3, #1
 8003212:	f003 021f 	and.w	r2, r3, #31
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	051b      	lsls	r3, r3, #20
 800321e:	e018      	b.n	8003252 <HAL_ADC_ConfigChannel+0x5ca>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800322e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003238:	2320      	movs	r3, #32
 800323a:	e003      	b.n	8003244 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800323c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	3301      	adds	r3, #1
 8003246:	f003 021f 	and.w	r2, r3, #31
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003252:	430b      	orrs	r3, r1
 8003254:	e081      	b.n	800335a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x5ea>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	0e9b      	lsrs	r3, r3, #26
 8003268:	3301      	adds	r3, #1
 800326a:	069b      	lsls	r3, r3, #26
 800326c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003270:	e015      	b.n	800329e <HAL_ADC_ConfigChannel+0x616>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800328a:	2320      	movs	r3, #32
 800328c:	e003      	b.n	8003296 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	3301      	adds	r3, #1
 8003298:	069b      	lsls	r3, r3, #26
 800329a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_ADC_ConfigChannel+0x636>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	3301      	adds	r3, #1
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	e017      	b.n	80032ee <HAL_ADC_ConfigChannel+0x666>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	61fb      	str	r3, [r7, #28]
  return result;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80032d6:	2320      	movs	r3, #32
 80032d8:	e003      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	ea42 0103 	orr.w	r1, r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10d      	bne.n	800331a <HAL_ADC_ConfigChannel+0x692>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0e9b      	lsrs	r3, r3, #26
 8003304:	3301      	adds	r3, #1
 8003306:	f003 021f 	and.w	r2, r3, #31
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	3b1e      	subs	r3, #30
 8003312:	051b      	lsls	r3, r3, #20
 8003314:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003318:	e01e      	b.n	8003358 <HAL_ADC_ConfigChannel+0x6d0>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	613b      	str	r3, [r7, #16]
  return result;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d104      	bne.n	800333c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003332:	2320      	movs	r3, #32
 8003334:	e006      	b.n	8003344 <HAL_ADC_ConfigChannel+0x6bc>
 8003336:	bf00      	nop
 8003338:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f003 021f 	and.w	r2, r3, #31
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	3b1e      	subs	r3, #30
 8003352:	051b      	lsls	r3, r3, #20
 8003354:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003358:	430b      	orrs	r3, r1
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6892      	ldr	r2, [r2, #8]
 800335e:	4619      	mov	r1, r3
 8003360:	f7fe fff0 	bl	8002344 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_ADC_ConfigChannel+0x7d8>)
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d06c      	beq.n	800344a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003370:	483c      	ldr	r0, [pc, #240]	; (8003464 <HAL_ADC_ConfigChannel+0x7dc>)
 8003372:	f7fe ff1f 	bl	80021b4 <LL_ADC_GetCommonPathInternalCh>
 8003376:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a3a      	ldr	r2, [pc, #232]	; (8003468 <HAL_ADC_ConfigChannel+0x7e0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d127      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003388:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d121      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a35      	ldr	r2, [pc, #212]	; (800346c <HAL_ADC_ConfigChannel+0x7e4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d157      	bne.n	800344a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800339a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800339e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033a2:	4619      	mov	r1, r3
 80033a4:	482f      	ldr	r0, [pc, #188]	; (8003464 <HAL_ADC_ConfigChannel+0x7dc>)
 80033a6:	f7fe fef2 	bl	800218e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033aa:	4b31      	ldr	r3, [pc, #196]	; (8003470 <HAL_ADC_ConfigChannel+0x7e8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	4a30      	ldr	r2, [pc, #192]	; (8003474 <HAL_ADC_ConfigChannel+0x7ec>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033c4:	e002      	b.n	80033cc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f9      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033d2:	e03a      	b.n	800344a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a27      	ldr	r2, [pc, #156]	; (8003478 <HAL_ADC_ConfigChannel+0x7f0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d113      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x77e>
 80033de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10d      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1f      	ldr	r2, [pc, #124]	; (800346c <HAL_ADC_ConfigChannel+0x7e4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d12a      	bne.n	800344a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fc:	4619      	mov	r1, r3
 80033fe:	4819      	ldr	r0, [pc, #100]	; (8003464 <HAL_ADC_ConfigChannel+0x7dc>)
 8003400:	f7fe fec5 	bl	800218e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003404:	e021      	b.n	800344a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1c      	ldr	r2, [pc, #112]	; (800347c <HAL_ADC_ConfigChannel+0x7f4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d11c      	bne.n	800344a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d116      	bne.n	800344a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a12      	ldr	r2, [pc, #72]	; (800346c <HAL_ADC_ConfigChannel+0x7e4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d111      	bne.n	800344a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003426:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800342a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800342e:	4619      	mov	r1, r3
 8003430:	480c      	ldr	r0, [pc, #48]	; (8003464 <HAL_ADC_ConfigChannel+0x7dc>)
 8003432:	f7fe feac 	bl	800218e <LL_ADC_SetCommonPathInternalCh>
 8003436:	e008      	b.n	800344a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003452:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003456:	4618      	mov	r0, r3
 8003458:	37d8      	adds	r7, #216	; 0xd8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	80080000 	.word	0x80080000
 8003464:	50040300 	.word	0x50040300
 8003468:	c7520000 	.word	0xc7520000
 800346c:	50040000 	.word	0x50040000
 8003470:	20000000 	.word	0x20000000
 8003474:	053e2d63 	.word	0x053e2d63
 8003478:	cb840000 	.word	0xcb840000
 800347c:	80000001 	.word	0x80000001

08003480 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff f809 	bl	80024a8 <LL_ADC_IsEnabled>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d169      	bne.n	8003570 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	4b36      	ldr	r3, [pc, #216]	; (800357c <ADC_Enable+0xfc>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	f043 0210 	orr.w	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e055      	b.n	8003572 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe ffd8 	bl	8002480 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80034d0:	482b      	ldr	r0, [pc, #172]	; (8003580 <ADC_Enable+0x100>)
 80034d2:	f7fe fe6f 	bl	80021b4 <LL_ADC_GetCommonPathInternalCh>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034e0:	4b28      	ldr	r3, [pc, #160]	; (8003584 <ADC_Enable+0x104>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	099b      	lsrs	r3, r3, #6
 80034e6:	4a28      	ldr	r2, [pc, #160]	; (8003588 <ADC_Enable+0x108>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	099b      	lsrs	r3, r3, #6
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80034fa:	e002      	b.n	8003502 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	3b01      	subs	r3, #1
 8003500:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f9      	bne.n	80034fc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003508:	f7fe fdfe 	bl	8002108 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800350e:	e028      	b.n	8003562 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fe ffc7 	bl	80024a8 <LL_ADC_IsEnabled>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d104      	bne.n	800352a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe ffab 	bl	8002480 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800352a:	f7fe fded 	bl	8002108 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d914      	bls.n	8003562 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d00d      	beq.n	8003562 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	f043 0210 	orr.w	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	f043 0201 	orr.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e007      	b.n	8003572 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b01      	cmp	r3, #1
 800356e:	d1cf      	bne.n	8003510 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	8000003f 	.word	0x8000003f
 8003580:	50040300 	.word	0x50040300
 8003584:	20000000 	.word	0x20000000
 8003588:	053e2d63 	.word	0x053e2d63

0800358c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d14b      	bne.n	800363e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d021      	beq.n	8003604 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe fe6b 	bl	80022a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d032      	beq.n	8003636 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d12b      	bne.n	8003636 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11f      	bne.n	8003636 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	659a      	str	r2, [r3, #88]	; 0x58
 8003602:	e018      	b.n	8003636 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d111      	bne.n	8003636 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7fd fb92 	bl	8000d60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800363c:	e00e      	b.n	800365c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7ff fb12 	bl	8002c74 <HAL_ADC_ErrorCallback>
}
 8003650:	e004      	b.n	800365c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4798      	blx	r3
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f7ff faea 	bl	8002c4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	f043 0204 	orr.w	r2, r3, #4
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff fae4 	bl	8002c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0ed      	b.n	8003906 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fe fa30 	bl	8001b9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800374c:	f7fe fcdc 	bl	8002108 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003752:	e012      	b.n	800377a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003754:	f7fe fcd8 	bl	8002108 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b0a      	cmp	r3, #10
 8003760:	d90b      	bls.n	800377a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2205      	movs	r2, #5
 8003772:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0c5      	b.n	8003906 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0e5      	beq.n	8003754 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0202 	bic.w	r2, r2, #2
 8003796:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003798:	f7fe fcb6 	bl	8002108 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800379e:	e012      	b.n	80037c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037a0:	f7fe fcb2 	bl	8002108 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b0a      	cmp	r3, #10
 80037ac:	d90b      	bls.n	80037c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2205      	movs	r2, #5
 80037be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e09f      	b.n	8003906 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7e1b      	ldrb	r3, [r3, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d108      	bne.n	80037ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e007      	b.n	80037fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7e5b      	ldrb	r3, [r3, #25]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d108      	bne.n	8003818 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e007      	b.n	8003828 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003826:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	7e9b      	ldrb	r3, [r3, #26]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d108      	bne.n	8003842 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0220 	orr.w	r2, r2, #32
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e007      	b.n	8003852 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0220 	bic.w	r2, r2, #32
 8003850:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7edb      	ldrb	r3, [r3, #27]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d108      	bne.n	800386c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0210 	bic.w	r2, r2, #16
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e007      	b.n	800387c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0210 	orr.w	r2, r2, #16
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7f1b      	ldrb	r3, [r3, #28]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d108      	bne.n	8003896 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e007      	b.n	80038a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0208 	bic.w	r2, r2, #8
 80038a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7f5b      	ldrb	r3, [r3, #29]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d108      	bne.n	80038c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0204 	orr.w	r2, r2, #4
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e007      	b.n	80038d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	ea42 0103 	orr.w	r1, r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	1e5a      	subs	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003920:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800392c:	4013      	ands	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800393c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003942:	4a04      	ldr	r2, [pc, #16]	; (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	60d3      	str	r3, [r2, #12]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <__NVIC_GetPriorityGrouping+0x18>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	f003 0307 	and.w	r3, r3, #7
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db0b      	blt.n	800399e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4907      	ldr	r1, [pc, #28]	; (80039ac <__NVIC_EnableIRQ+0x38>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2001      	movs	r0, #1
 8003996:	fa00 f202 	lsl.w	r2, r0, r2
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000e100 	.word	0xe000e100

080039b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	6039      	str	r1, [r7, #0]
 80039ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	db0a      	blt.n	80039da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	490c      	ldr	r1, [pc, #48]	; (80039fc <__NVIC_SetPriority+0x4c>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	0112      	lsls	r2, r2, #4
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	440b      	add	r3, r1
 80039d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d8:	e00a      	b.n	80039f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4908      	ldr	r1, [pc, #32]	; (8003a00 <__NVIC_SetPriority+0x50>)
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	3b04      	subs	r3, #4
 80039e8:	0112      	lsls	r2, r2, #4
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	440b      	add	r3, r1
 80039ee:	761a      	strb	r2, [r3, #24]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000e100 	.word	0xe000e100
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	; 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f1c3 0307 	rsb	r3, r3, #7
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	bf28      	it	cs
 8003a22:	2304      	movcs	r3, #4
 8003a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d902      	bls.n	8003a34 <NVIC_EncodePriority+0x30>
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3b03      	subs	r3, #3
 8003a32:	e000      	b.n	8003a36 <NVIC_EncodePriority+0x32>
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	401a      	ands	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	43d9      	mvns	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	4313      	orrs	r3, r2
         );
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3724      	adds	r7, #36	; 0x24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff ff4c 	bl	8003910 <__NVIC_SetPriorityGrouping>
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a92:	f7ff ff61 	bl	8003958 <__NVIC_GetPriorityGrouping>
 8003a96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	6978      	ldr	r0, [r7, #20]
 8003a9e:	f7ff ffb1 	bl	8003a04 <NVIC_EncodePriority>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff ff80 	bl	80039b0 <__NVIC_SetPriority>
}
 8003ab0:	bf00      	nop
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff54 	bl	8003974 <__NVIC_EnableIRQ>
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e08d      	b.n	8003c02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_DMA_Init+0x138>)
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d80f      	bhi.n	8003b12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b45      	ldr	r3, [pc, #276]	; (8003c10 <HAL_DMA_Init+0x13c>)
 8003afa:	4413      	add	r3, r2
 8003afc:	4a45      	ldr	r2, [pc, #276]	; (8003c14 <HAL_DMA_Init+0x140>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	009a      	lsls	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a42      	ldr	r2, [pc, #264]	; (8003c18 <HAL_DMA_Init+0x144>)
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8003b10:	e00e      	b.n	8003b30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b40      	ldr	r3, [pc, #256]	; (8003c1c <HAL_DMA_Init+0x148>)
 8003b1a:	4413      	add	r3, r2
 8003b1c:	4a3d      	ldr	r2, [pc, #244]	; (8003c14 <HAL_DMA_Init+0x140>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	009a      	lsls	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a3c      	ldr	r2, [pc, #240]	; (8003c20 <HAL_DMA_Init+0x14c>)
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9b6 	bl	8003ef4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b90:	d102      	bne.n	8003b98 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bac:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d010      	beq.n	8003bd8 <HAL_DMA_Init+0x104>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d80c      	bhi.n	8003bd8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9d6 	bl	8003f70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	e008      	b.n	8003bea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40020407 	.word	0x40020407
 8003c10:	bffdfff8 	.word	0xbffdfff8
 8003c14:	cccccccd 	.word	0xcccccccd
 8003c18:	40020000 	.word	0x40020000
 8003c1c:	bffdfbf8 	.word	0xbffdfbf8
 8003c20:	40020400 	.word	0x40020400

08003c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_DMA_Start_IT+0x20>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e066      	b.n	8003d12 <HAL_DMA_Start_IT+0xee>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d155      	bne.n	8003d04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f8fb 	bl	8003e78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 020e 	orr.w	r2, r2, #14
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e00f      	b.n	8003cbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0204 	bic.w	r2, r2, #4
 8003caa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 020a 	orr.w	r2, r2, #10
 8003cba:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e005      	b.n	8003d10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f003 031c 	and.w	r3, r3, #28
 8003d3a:	2204      	movs	r2, #4
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d026      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x7a>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d021      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d107      	bne.n	8003d6e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0204 	bic.w	r2, r2, #4
 8003d6c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f003 021c 	and.w	r2, r3, #28
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2104      	movs	r1, #4
 8003d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d80:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d071      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003d92:	e06c      	b.n	8003e6e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	f003 031c 	and.w	r3, r3, #28
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d02e      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xec>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d029      	beq.n	8003e06 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 020a 	bic.w	r2, r2, #10
 8003dce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	f003 021c 	and.w	r2, r3, #28
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2102      	movs	r1, #2
 8003de6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d038      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e04:	e033      	b.n	8003e6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f003 031c 	and.w	r3, r3, #28
 8003e0e:	2208      	movs	r2, #8
 8003e10:	409a      	lsls	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d02a      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x156>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d025      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 020e 	bic.w	r2, r2, #14
 8003e32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	f003 021c 	and.w	r2, r3, #28
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	2101      	movs	r1, #1
 8003e42:	fa01 f202 	lsl.w	r2, r1, r2
 8003e46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e6e:	bf00      	nop
 8003e70:	bf00      	nop
}
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e8e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ea0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f003 021c 	and.w	r2, r3, #28
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2101      	movs	r1, #1
 8003eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d108      	bne.n	8003ed8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ed6:	e007      	b.n	8003ee8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d80a      	bhi.n	8003f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	089b      	lsrs	r3, r3, #2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f14:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6493      	str	r3, [r2, #72]	; 0x48
 8003f1c:	e007      	b.n	8003f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	009a      	lsls	r2, r3, #2
 8003f26:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	3b08      	subs	r3, #8
 8003f36:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f44:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f54:	bf00      	nop
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40020407 	.word	0x40020407
 8003f64:	4002081c 	.word	0x4002081c
 8003f68:	cccccccd 	.word	0xcccccccd
 8003f6c:	40020880 	.word	0x40020880

08003f70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f92:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	1000823f 	.word	0x1000823f
 8003fb4:	40020940 	.word	0x40020940

08003fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fc6:	e166      	b.n	8004296 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	2101      	movs	r1, #1
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8158 	beq.w	8004290 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d005      	beq.n	8003ff8 <HAL_GPIO_Init+0x40>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d130      	bne.n	800405a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	2203      	movs	r2, #3
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800402e:	2201      	movs	r2, #1
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4013      	ands	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	091b      	lsrs	r3, r3, #4
 8004044:	f003 0201 	and.w	r2, r3, #1
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	2b03      	cmp	r3, #3
 8004064:	d017      	beq.n	8004096 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	2203      	movs	r2, #3
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43db      	mvns	r3, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d123      	bne.n	80040ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	08da      	lsrs	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3208      	adds	r2, #8
 80040aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	220f      	movs	r2, #15
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	08da      	lsrs	r2, r3, #3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3208      	adds	r2, #8
 80040e4:	6939      	ldr	r1, [r7, #16]
 80040e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	2203      	movs	r2, #3
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4013      	ands	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 0203 	and.w	r2, r3, #3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80b2 	beq.w	8004290 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800412c:	4b61      	ldr	r3, [pc, #388]	; (80042b4 <HAL_GPIO_Init+0x2fc>)
 800412e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004130:	4a60      	ldr	r2, [pc, #384]	; (80042b4 <HAL_GPIO_Init+0x2fc>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6613      	str	r3, [r2, #96]	; 0x60
 8004138:	4b5e      	ldr	r3, [pc, #376]	; (80042b4 <HAL_GPIO_Init+0x2fc>)
 800413a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004144:	4a5c      	ldr	r2, [pc, #368]	; (80042b8 <HAL_GPIO_Init+0x300>)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	089b      	lsrs	r3, r3, #2
 800414a:	3302      	adds	r3, #2
 800414c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	220f      	movs	r2, #15
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800416e:	d02b      	beq.n	80041c8 <HAL_GPIO_Init+0x210>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a52      	ldr	r2, [pc, #328]	; (80042bc <HAL_GPIO_Init+0x304>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d025      	beq.n	80041c4 <HAL_GPIO_Init+0x20c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a51      	ldr	r2, [pc, #324]	; (80042c0 <HAL_GPIO_Init+0x308>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d01f      	beq.n	80041c0 <HAL_GPIO_Init+0x208>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a50      	ldr	r2, [pc, #320]	; (80042c4 <HAL_GPIO_Init+0x30c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d019      	beq.n	80041bc <HAL_GPIO_Init+0x204>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a4f      	ldr	r2, [pc, #316]	; (80042c8 <HAL_GPIO_Init+0x310>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d013      	beq.n	80041b8 <HAL_GPIO_Init+0x200>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a4e      	ldr	r2, [pc, #312]	; (80042cc <HAL_GPIO_Init+0x314>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00d      	beq.n	80041b4 <HAL_GPIO_Init+0x1fc>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a4d      	ldr	r2, [pc, #308]	; (80042d0 <HAL_GPIO_Init+0x318>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <HAL_GPIO_Init+0x1f8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a4c      	ldr	r2, [pc, #304]	; (80042d4 <HAL_GPIO_Init+0x31c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d101      	bne.n	80041ac <HAL_GPIO_Init+0x1f4>
 80041a8:	2307      	movs	r3, #7
 80041aa:	e00e      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041ac:	2308      	movs	r3, #8
 80041ae:	e00c      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041b0:	2306      	movs	r3, #6
 80041b2:	e00a      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041b4:	2305      	movs	r3, #5
 80041b6:	e008      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041b8:	2304      	movs	r3, #4
 80041ba:	e006      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041bc:	2303      	movs	r3, #3
 80041be:	e004      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e002      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_GPIO_Init+0x212>
 80041c8:	2300      	movs	r3, #0
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	f002 0203 	and.w	r2, r2, #3
 80041d0:	0092      	lsls	r2, r2, #2
 80041d2:	4093      	lsls	r3, r2
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041da:	4937      	ldr	r1, [pc, #220]	; (80042b8 <HAL_GPIO_Init+0x300>)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	3302      	adds	r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041e8:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_GPIO_Init+0x320>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800420c:	4a32      	ldr	r2, [pc, #200]	; (80042d8 <HAL_GPIO_Init+0x320>)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004212:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_GPIO_Init+0x320>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	43db      	mvns	r3, r3
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4013      	ands	r3, r2
 8004220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004236:	4a28      	ldr	r2, [pc, #160]	; (80042d8 <HAL_GPIO_Init+0x320>)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800423c:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_GPIO_Init+0x320>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	43db      	mvns	r3, r3
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4013      	ands	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_GPIO_Init+0x320>)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004266:	4b1c      	ldr	r3, [pc, #112]	; (80042d8 <HAL_GPIO_Init+0x320>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	43db      	mvns	r3, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800428a:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <HAL_GPIO_Init+0x320>)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	3301      	adds	r3, #1
 8004294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f47f ae91 	bne.w	8003fc8 <HAL_GPIO_Init+0x10>
  }
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40010000 	.word	0x40010000
 80042bc:	48000400 	.word	0x48000400
 80042c0:	48000800 	.word	0x48000800
 80042c4:	48000c00 	.word	0x48000c00
 80042c8:	48001000 	.word	0x48001000
 80042cc:	48001400 	.word	0x48001400
 80042d0:	48001800 	.word	0x48001800
 80042d4:	48001c00 	.word	0x48001c00
 80042d8:	40010400 	.word	0x40010400

080042dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	887b      	ldrh	r3, [r7, #2]
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	e001      	b.n	80042fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	807b      	strh	r3, [r7, #2]
 8004318:	4613      	mov	r3, r2
 800431a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800431c:	787b      	ldrb	r3, [r7, #1]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004322:	887a      	ldrh	r2, [r7, #2]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004328:	e002      	b.n	8004330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004340:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434c:	d102      	bne.n	8004354 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800434e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004352:	e00b      	b.n	800436c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004354:	4b08      	ldr	r3, [pc, #32]	; (8004378 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004362:	d102      	bne.n	800436a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004368:	e000      	b.n	800436c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800436a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800436c:	4618      	mov	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40007000 	.word	0x40007000

0800437c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d141      	bne.n	800440e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800438a:	4b4b      	ldr	r3, [pc, #300]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004396:	d131      	bne.n	80043fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004398:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800439e:	4a46      	ldr	r2, [pc, #280]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043a8:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043b0:	4a41      	ldr	r2, [pc, #260]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80043b8:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2232      	movs	r2, #50	; 0x32
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	4a3f      	ldr	r2, [pc, #252]	; (80044c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	0c9b      	lsrs	r3, r3, #18
 80043ca:	3301      	adds	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043ce:	e002      	b.n	80043d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043d6:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e2:	d102      	bne.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f2      	bne.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043ea:	4b33      	ldr	r3, [pc, #204]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f6:	d158      	bne.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e057      	b.n	80044ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043fc:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004402:	4a2d      	ldr	r2, [pc, #180]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004408:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800440c:	e04d      	b.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004414:	d141      	bne.n	800449a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004416:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d131      	bne.n	8004488 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004424:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800442a:	4a23      	ldr	r2, [pc, #140]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004430:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004434:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800443c:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004442:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004444:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2232      	movs	r2, #50	; 0x32
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	0c9b      	lsrs	r3, r3, #18
 8004456:	3301      	adds	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800445a:	e002      	b.n	8004462 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3b01      	subs	r3, #1
 8004460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446e:	d102      	bne.n	8004476 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f2      	bne.n	800445c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004476:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004482:	d112      	bne.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e011      	b.n	80044ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448e:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004494:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004498:	e007      	b.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044a2:	4a05      	ldr	r2, [pc, #20]	; (80044b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044a8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40007000 	.word	0x40007000
 80044bc:	20000000 	.word	0x20000000
 80044c0:	431bde83 	.word	0x431bde83

080044c4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80044ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d2:	6053      	str	r3, [r2, #4]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40007000 	.word	0x40007000

080044e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d102      	bne.n	80044f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f000 bc08 	b.w	8004d08 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044f8:	4b96      	ldr	r3, [pc, #600]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004502:	4b94      	ldr	r3, [pc, #592]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80e4 	beq.w	80046e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <HAL_RCC_OscConfig+0x4c>
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b0c      	cmp	r3, #12
 8004524:	f040 808b 	bne.w	800463e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b01      	cmp	r3, #1
 800452c:	f040 8087 	bne.w	800463e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004530:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_OscConfig+0x64>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e3df      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1a      	ldr	r2, [r3, #32]
 800454c:	4b81      	ldr	r3, [pc, #516]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <HAL_RCC_OscConfig+0x7e>
 8004558:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004560:	e005      	b.n	800456e <HAL_RCC_OscConfig+0x8a>
 8004562:	4b7c      	ldr	r3, [pc, #496]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004568:	091b      	lsrs	r3, r3, #4
 800456a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800456e:	4293      	cmp	r3, r2
 8004570:	d223      	bcs.n	80045ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fdfc 	bl	8005174 <RCC_SetFlashLatencyFromMSIRange>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e3c0      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004586:	4b73      	ldr	r3, [pc, #460]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a72      	ldr	r2, [pc, #456]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 800458c:	f043 0308 	orr.w	r3, r3, #8
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	4b70      	ldr	r3, [pc, #448]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	496d      	ldr	r1, [pc, #436]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a4:	4b6b      	ldr	r3, [pc, #428]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	4968      	ldr	r1, [pc, #416]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]
 80045b8:	e025      	b.n	8004606 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ba:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80045c0:	f043 0308 	orr.w	r3, r3, #8
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	4b63      	ldr	r3, [pc, #396]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4960      	ldr	r1, [pc, #384]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045d8:	4b5e      	ldr	r3, [pc, #376]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	495b      	ldr	r1, [pc, #364]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fdbc 	bl	8005174 <RCC_SetFlashLatencyFromMSIRange>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e380      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004606:	f000 fcc1 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 800460a:	4602      	mov	r2, r0
 800460c:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	091b      	lsrs	r3, r3, #4
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	4950      	ldr	r1, [pc, #320]	; (8004758 <HAL_RCC_OscConfig+0x274>)
 8004618:	5ccb      	ldrb	r3, [r1, r3]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	fa22 f303 	lsr.w	r3, r2, r3
 8004622:	4a4e      	ldr	r2, [pc, #312]	; (800475c <HAL_RCC_OscConfig+0x278>)
 8004624:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004626:	4b4e      	ldr	r3, [pc, #312]	; (8004760 <HAL_RCC_OscConfig+0x27c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fd fb86 	bl	8001d3c <HAL_InitTick>
 8004630:	4603      	mov	r3, r0
 8004632:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d052      	beq.n	80046e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	e364      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d032      	beq.n	80046ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004646:	4b43      	ldr	r3, [pc, #268]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a42      	ldr	r2, [pc, #264]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004652:	f7fd fd59 	bl	8002108 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800465a:	f7fd fd55 	bl	8002108 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e34d      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800466c:	4b39      	ldr	r3, [pc, #228]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004678:	4b36      	ldr	r3, [pc, #216]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a35      	ldr	r2, [pc, #212]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 800467e:	f043 0308 	orr.w	r3, r3, #8
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	4b33      	ldr	r3, [pc, #204]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	4930      	ldr	r1, [pc, #192]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004696:	4b2f      	ldr	r3, [pc, #188]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	492b      	ldr	r1, [pc, #172]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	604b      	str	r3, [r1, #4]
 80046aa:	e01a      	b.n	80046e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046ac:	4b29      	ldr	r3, [pc, #164]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a28      	ldr	r2, [pc, #160]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046b8:	f7fd fd26 	bl	8002108 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046c0:	f7fd fd22 	bl	8002108 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e31a      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046d2:	4b20      	ldr	r3, [pc, #128]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x1dc>
 80046de:	e000      	b.n	80046e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d073      	beq.n	80047d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_OscConfig+0x21c>
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	d10e      	bne.n	8004718 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d10b      	bne.n	8004718 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	4b14      	ldr	r3, [pc, #80]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d063      	beq.n	80047d4 <HAL_RCC_OscConfig+0x2f0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d15f      	bne.n	80047d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e2f7      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004720:	d106      	bne.n	8004730 <HAL_RCC_OscConfig+0x24c>
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a0b      	ldr	r2, [pc, #44]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e025      	b.n	800477c <HAL_RCC_OscConfig+0x298>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004738:	d114      	bne.n	8004764 <HAL_RCC_OscConfig+0x280>
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4b03      	ldr	r3, [pc, #12]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a02      	ldr	r2, [pc, #8]	; (8004754 <HAL_RCC_OscConfig+0x270>)
 800474c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e013      	b.n	800477c <HAL_RCC_OscConfig+0x298>
 8004754:	40021000 	.word	0x40021000
 8004758:	0801559c 	.word	0x0801559c
 800475c:	20000000 	.word	0x20000000
 8004760:	20000004 	.word	0x20000004
 8004764:	4ba0      	ldr	r3, [pc, #640]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a9f      	ldr	r2, [pc, #636]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 800476a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b9d      	ldr	r3, [pc, #628]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a9c      	ldr	r2, [pc, #624]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 8004776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd fcc0 	bl	8002108 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fd fcbc 	bl	8002108 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e2b4      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800479e:	4b92      	ldr	r3, [pc, #584]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0x2a8>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd fcac 	bl	8002108 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fd fca8 	bl	8002108 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e2a0      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047c6:	4b88      	ldr	r3, [pc, #544]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2d0>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d060      	beq.n	80048a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_OscConfig+0x310>
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d119      	bne.n	8004822 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d116      	bne.n	8004822 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f4:	4b7c      	ldr	r3, [pc, #496]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_OscConfig+0x328>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e27d      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480c:	4b76      	ldr	r3, [pc, #472]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	061b      	lsls	r3, r3, #24
 800481a:	4973      	ldr	r1, [pc, #460]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004820:	e040      	b.n	80048a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d023      	beq.n	8004872 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800482a:	4b6f      	ldr	r3, [pc, #444]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a6e      	ldr	r2, [pc, #440]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 8004830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fd fc67 	bl	8002108 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483e:	f7fd fc63 	bl	8002108 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e25b      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004850:	4b65      	ldr	r3, [pc, #404]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485c:	4b62      	ldr	r3, [pc, #392]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	061b      	lsls	r3, r3, #24
 800486a:	495f      	ldr	r1, [pc, #380]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 800486c:	4313      	orrs	r3, r2
 800486e:	604b      	str	r3, [r1, #4]
 8004870:	e018      	b.n	80048a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004872:	4b5d      	ldr	r3, [pc, #372]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a5c      	ldr	r2, [pc, #368]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 8004878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487e:	f7fd fc43 	bl	8002108 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004886:	f7fd fc3f 	bl	8002108 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e237      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004898:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f0      	bne.n	8004886 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d03c      	beq.n	800492a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01c      	beq.n	80048f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b8:	4b4b      	ldr	r3, [pc, #300]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80048ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048be:	4a4a      	ldr	r2, [pc, #296]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c8:	f7fd fc1e 	bl	8002108 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d0:	f7fd fc1a 	bl	8002108 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e212      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048e2:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80048e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ef      	beq.n	80048d0 <HAL_RCC_OscConfig+0x3ec>
 80048f0:	e01b      	b.n	800492a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f2:	4b3d      	ldr	r3, [pc, #244]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80048f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f8:	4a3b      	ldr	r2, [pc, #236]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004902:	f7fd fc01 	bl	8002108 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490a:	f7fd fbfd 	bl	8002108 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e1f5      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800491c:	4b32      	ldr	r3, [pc, #200]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 800491e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1ef      	bne.n	800490a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80a6 	beq.w	8004a84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004938:	2300      	movs	r3, #0
 800493a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800493c:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10d      	bne.n	8004964 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004948:	4b27      	ldr	r3, [pc, #156]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494c:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004952:	6593      	str	r3, [r2, #88]	; 0x58
 8004954:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004960:	2301      	movs	r3, #1
 8004962:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004964:	4b21      	ldr	r3, [pc, #132]	; (80049ec <HAL_RCC_OscConfig+0x508>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d118      	bne.n	80049a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004970:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <HAL_RCC_OscConfig+0x508>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_RCC_OscConfig+0x508>)
 8004976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497c:	f7fd fbc4 	bl	8002108 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004984:	f7fd fbc0 	bl	8002108 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e1b8      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <HAL_RCC_OscConfig+0x508>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d108      	bne.n	80049bc <HAL_RCC_OscConfig+0x4d8>
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b0:	4a0d      	ldr	r2, [pc, #52]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049ba:	e029      	b.n	8004a10 <HAL_RCC_OscConfig+0x52c>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b05      	cmp	r3, #5
 80049c2:	d115      	bne.n	80049f0 <HAL_RCC_OscConfig+0x50c>
 80049c4:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80049cc:	f043 0304 	orr.w	r3, r3, #4
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	4a03      	ldr	r2, [pc, #12]	; (80049e8 <HAL_RCC_OscConfig+0x504>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049e4:	e014      	b.n	8004a10 <HAL_RCC_OscConfig+0x52c>
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40007000 	.word	0x40007000
 80049f0:	4b9d      	ldr	r3, [pc, #628]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	4a9c      	ldr	r2, [pc, #624]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a00:	4b99      	ldr	r3, [pc, #612]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a06:	4a98      	ldr	r2, [pc, #608]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004a08:	f023 0304 	bic.w	r3, r3, #4
 8004a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d016      	beq.n	8004a46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fd fb76 	bl	8002108 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fd fb72 	bl	8002108 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e168      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a36:	4b8c      	ldr	r3, [pc, #560]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ed      	beq.n	8004a20 <HAL_RCC_OscConfig+0x53c>
 8004a44:	e015      	b.n	8004a72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a46:	f7fd fb5f 	bl	8002108 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fd fb5b 	bl	8002108 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e151      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a64:	4b80      	ldr	r3, [pc, #512]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1ed      	bne.n	8004a4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a72:	7ffb      	ldrb	r3, [r7, #31]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d105      	bne.n	8004a84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a78:	4b7b      	ldr	r3, [pc, #492]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	4a7a      	ldr	r2, [pc, #488]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d03c      	beq.n	8004b0a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01c      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a98:	4b73      	ldr	r3, [pc, #460]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a9e:	4a72      	ldr	r2, [pc, #456]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fd fb2e 	bl	8002108 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ab0:	f7fd fb2a 	bl	8002108 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e122      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ac2:	4b69      	ldr	r3, [pc, #420]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ef      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x5cc>
 8004ad0:	e01b      	b.n	8004b0a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ad2:	4b65      	ldr	r3, [pc, #404]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad8:	4a63      	ldr	r2, [pc, #396]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae2:	f7fd fb11 	bl	8002108 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aea:	f7fd fb0d 	bl	8002108 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e105      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004afc:	4b5a      	ldr	r3, [pc, #360]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1ef      	bne.n	8004aea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80f9 	beq.w	8004d06 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	f040 80cf 	bne.w	8004cbc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b1e:	4b52      	ldr	r3, [pc, #328]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f003 0203 	and.w	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d12c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d123      	bne.n	8004b8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d11b      	bne.n	8004b8c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d113      	bne.n	8004b8c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	3b01      	subs	r3, #1
 8004b72:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d109      	bne.n	8004b8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	3b01      	subs	r3, #1
 8004b86:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d071      	beq.n	8004c70 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b0c      	cmp	r3, #12
 8004b90:	d068      	beq.n	8004c64 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b92:	4b35      	ldr	r3, [pc, #212]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d105      	bne.n	8004baa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b9e:	4b32      	ldr	r3, [pc, #200]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e0ac      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bae:	4b2e      	ldr	r3, [pc, #184]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a2d      	ldr	r2, [pc, #180]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bb8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bba:	f7fd faa5 	bl	8002108 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc2:	f7fd faa1 	bl	8002108 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e099      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd4:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004be0:	4b21      	ldr	r3, [pc, #132]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	4b21      	ldr	r3, [pc, #132]	; (8004c6c <HAL_RCC_OscConfig+0x788>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004bf0:	3a01      	subs	r2, #1
 8004bf2:	0112      	lsls	r2, r2, #4
 8004bf4:	4311      	orrs	r1, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bfa:	0212      	lsls	r2, r2, #8
 8004bfc:	4311      	orrs	r1, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c02:	0852      	lsrs	r2, r2, #1
 8004c04:	3a01      	subs	r2, #1
 8004c06:	0552      	lsls	r2, r2, #21
 8004c08:	4311      	orrs	r1, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c0e:	0852      	lsrs	r2, r2, #1
 8004c10:	3a01      	subs	r2, #1
 8004c12:	0652      	lsls	r2, r2, #25
 8004c14:	4311      	orrs	r1, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c1a:	06d2      	lsls	r2, r2, #27
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	4912      	ldr	r1, [pc, #72]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c24:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a0f      	ldr	r2, [pc, #60]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c30:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a0c      	ldr	r2, [pc, #48]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c3c:	f7fd fa64 	bl	8002108 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fd fa60 	bl	8002108 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e058      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c56:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <HAL_RCC_OscConfig+0x784>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c62:	e050      	b.n	8004d06 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e04f      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c70:	4b27      	ldr	r3, [pc, #156]	; (8004d10 <HAL_RCC_OscConfig+0x82c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d144      	bne.n	8004d06 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c7c:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_RCC_OscConfig+0x82c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <HAL_RCC_OscConfig+0x82c>)
 8004c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c88:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <HAL_RCC_OscConfig+0x82c>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	4a20      	ldr	r2, [pc, #128]	; (8004d10 <HAL_RCC_OscConfig+0x82c>)
 8004c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c94:	f7fd fa38 	bl	8002108 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9c:	f7fd fa34 	bl	8002108 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e02c      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cae:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <HAL_RCC_OscConfig+0x82c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x7b8>
 8004cba:	e024      	b.n	8004d06 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b0c      	cmp	r3, #12
 8004cc0:	d01f      	beq.n	8004d02 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc2:	4b13      	ldr	r3, [pc, #76]	; (8004d10 <HAL_RCC_OscConfig+0x82c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <HAL_RCC_OscConfig+0x82c>)
 8004cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cce:	f7fd fa1b 	bl	8002108 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd6:	f7fd fa17 	bl	8002108 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e00f      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <HAL_RCC_OscConfig+0x82c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f0      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004cf4:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <HAL_RCC_OscConfig+0x82c>)
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	4905      	ldr	r1, [pc, #20]	; (8004d10 <HAL_RCC_OscConfig+0x82c>)
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <HAL_RCC_OscConfig+0x830>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60cb      	str	r3, [r1, #12]
 8004d00:	e001      	b.n	8004d06 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40021000 	.word	0x40021000
 8004d14:	feeefffc 	.word	0xfeeefffc

08004d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e11d      	b.n	8004f6c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d30:	4b90      	ldr	r3, [pc, #576]	; (8004f74 <HAL_RCC_ClockConfig+0x25c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d910      	bls.n	8004d60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3e:	4b8d      	ldr	r3, [pc, #564]	; (8004f74 <HAL_RCC_ClockConfig+0x25c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f023 020f 	bic.w	r2, r3, #15
 8004d46:	498b      	ldr	r1, [pc, #556]	; (8004f74 <HAL_RCC_ClockConfig+0x25c>)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4e:	4b89      	ldr	r3, [pc, #548]	; (8004f74 <HAL_RCC_ClockConfig+0x25c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e105      	b.n	8004f6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d010      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	4b81      	ldr	r3, [pc, #516]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d908      	bls.n	8004d8e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d7c:	4b7e      	ldr	r3, [pc, #504]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	497b      	ldr	r1, [pc, #492]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d079      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d11e      	bne.n	8004de0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da2:	4b75      	ldr	r3, [pc, #468]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e0dc      	b.n	8004f6c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004db2:	f000 fa39 	bl	8005228 <RCC_GetSysClockFreqFromPLLSource>
 8004db6:	4603      	mov	r3, r0
 8004db8:	4a70      	ldr	r2, [pc, #448]	; (8004f7c <HAL_RCC_ClockConfig+0x264>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d946      	bls.n	8004e4c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004dbe:	4b6e      	ldr	r3, [pc, #440]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d140      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dca:	4b6b      	ldr	r3, [pc, #428]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd2:	4a69      	ldr	r2, [pc, #420]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004dda:	2380      	movs	r3, #128	; 0x80
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e035      	b.n	8004e4c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d107      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de8:	4b63      	ldr	r3, [pc, #396]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d115      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0b9      	b.n	8004f6c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e00:	4b5d      	ldr	r3, [pc, #372]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d109      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0ad      	b.n	8004f6c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e10:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0a5      	b.n	8004f6c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004e20:	f000 f8b4 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4a55      	ldr	r2, [pc, #340]	; (8004f7c <HAL_RCC_ClockConfig+0x264>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d90f      	bls.n	8004e4c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e2c:	4b52      	ldr	r3, [pc, #328]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e38:	4b4f      	ldr	r3, [pc, #316]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e40:	4a4d      	ldr	r2, [pc, #308]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e46:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e4c:	4b4a      	ldr	r3, [pc, #296]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f023 0203 	bic.w	r2, r3, #3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4947      	ldr	r1, [pc, #284]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fd f953 	bl	8002108 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e64:	e00a      	b.n	8004e7c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e66:	f7fd f94f 	bl	8002108 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e077      	b.n	8004f6c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7c:	4b3e      	ldr	r3, [pc, #248]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 020c 	and.w	r2, r3, #12
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d1eb      	bne.n	8004e66 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b80      	cmp	r3, #128	; 0x80
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e94:	4b38      	ldr	r3, [pc, #224]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	4a37      	ldr	r2, [pc, #220]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e9e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	4b31      	ldr	r3, [pc, #196]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d208      	bcs.n	8004ece <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ebc:	4b2e      	ldr	r3, [pc, #184]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	492b      	ldr	r1, [pc, #172]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ece:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <HAL_RCC_ClockConfig+0x25c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d210      	bcs.n	8004efe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004edc:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <HAL_RCC_ClockConfig+0x25c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 020f 	bic.w	r2, r3, #15
 8004ee4:	4923      	ldr	r1, [pc, #140]	; (8004f74 <HAL_RCC_ClockConfig+0x25c>)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eec:	4b21      	ldr	r3, [pc, #132]	; (8004f74 <HAL_RCC_ClockConfig+0x25c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d001      	beq.n	8004efe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e036      	b.n	8004f6c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	4918      	ldr	r1, [pc, #96]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f28:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4910      	ldr	r1, [pc, #64]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f3c:	f000 f826 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 8004f40:	4602      	mov	r2, r0
 8004f42:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <HAL_RCC_ClockConfig+0x260>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	091b      	lsrs	r3, r3, #4
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	490c      	ldr	r1, [pc, #48]	; (8004f80 <HAL_RCC_ClockConfig+0x268>)
 8004f4e:	5ccb      	ldrb	r3, [r1, r3]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	fa22 f303 	lsr.w	r3, r2, r3
 8004f58:	4a0a      	ldr	r2, [pc, #40]	; (8004f84 <HAL_RCC_ClockConfig+0x26c>)
 8004f5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <HAL_RCC_ClockConfig+0x270>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fc feeb 	bl	8001d3c <HAL_InitTick>
 8004f66:	4603      	mov	r3, r0
 8004f68:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40022000 	.word	0x40022000
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	04c4b400 	.word	0x04c4b400
 8004f80:	0801559c 	.word	0x0801559c
 8004f84:	20000000 	.word	0x20000000
 8004f88:	20000004 	.word	0x20000004

08004f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b089      	sub	sp, #36	; 0x24
 8004f90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61fb      	str	r3, [r7, #28]
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9a:	4b3e      	ldr	r3, [pc, #248]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa4:	4b3b      	ldr	r3, [pc, #236]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d121      	bne.n	8004ffe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d11e      	bne.n	8004ffe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fc0:	4b34      	ldr	r3, [pc, #208]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fcc:	4b31      	ldr	r3, [pc, #196]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	e005      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fe8:	4a2b      	ldr	r2, [pc, #172]	; (8005098 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10d      	bne.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ffc:	e00a      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b04      	cmp	r3, #4
 8005002:	d102      	bne.n	800500a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005004:	4b25      	ldr	r3, [pc, #148]	; (800509c <HAL_RCC_GetSysClockFreq+0x110>)
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	e004      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d101      	bne.n	8005014 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005010:	4b22      	ldr	r3, [pc, #136]	; (800509c <HAL_RCC_GetSysClockFreq+0x110>)
 8005012:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b0c      	cmp	r3, #12
 8005018:	d134      	bne.n	8005084 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800501a:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d003      	beq.n	8005032 <HAL_RCC_GetSysClockFreq+0xa6>
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d003      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0xac>
 8005030:	e005      	b.n	800503e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005032:	4b1a      	ldr	r3, [pc, #104]	; (800509c <HAL_RCC_GetSysClockFreq+0x110>)
 8005034:	617b      	str	r3, [r7, #20]
      break;
 8005036:	e005      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005038:	4b18      	ldr	r3, [pc, #96]	; (800509c <HAL_RCC_GetSysClockFreq+0x110>)
 800503a:	617b      	str	r3, [r7, #20]
      break;
 800503c:	e002      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	617b      	str	r3, [r7, #20]
      break;
 8005042:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005044:	4b13      	ldr	r3, [pc, #76]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	3301      	adds	r3, #1
 8005050:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	0a1b      	lsrs	r3, r3, #8
 8005058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	fb03 f202 	mul.w	r2, r3, r2
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <HAL_RCC_GetSysClockFreq+0x108>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	0e5b      	lsrs	r3, r3, #25
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	3301      	adds	r3, #1
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005084:	69bb      	ldr	r3, [r7, #24]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3724      	adds	r7, #36	; 0x24
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000
 8005098:	080155b4 	.word	0x080155b4
 800509c:	00f42400 	.word	0x00f42400

080050a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a4:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050a6:	681b      	ldr	r3, [r3, #0]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000000 	.word	0x20000000

080050b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050bc:	f7ff fff0 	bl	80050a0 <HAL_RCC_GetHCLKFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b06      	ldr	r3, [pc, #24]	; (80050dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4904      	ldr	r1, [pc, #16]	; (80050e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40021000 	.word	0x40021000
 80050e0:	080155ac 	.word	0x080155ac

080050e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050e8:	f7ff ffda 	bl	80050a0 <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b06      	ldr	r3, [pc, #24]	; (8005108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	0adb      	lsrs	r3, r3, #11
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4904      	ldr	r1, [pc, #16]	; (800510c <HAL_RCC_GetPCLK2Freq+0x28>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000
 800510c:	080155ac 	.word	0x080155ac

08005110 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	220f      	movs	r2, #15
 800511e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005120:	4b12      	ldr	r3, [pc, #72]	; (800516c <HAL_RCC_GetClockConfig+0x5c>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0203 	and.w	r2, r3, #3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <HAL_RCC_GetClockConfig+0x5c>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005138:	4b0c      	ldr	r3, [pc, #48]	; (800516c <HAL_RCC_GetClockConfig+0x5c>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005144:	4b09      	ldr	r3, [pc, #36]	; (800516c <HAL_RCC_GetClockConfig+0x5c>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	08db      	lsrs	r3, r3, #3
 800514a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005152:	4b07      	ldr	r3, [pc, #28]	; (8005170 <HAL_RCC_GetClockConfig+0x60>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 020f 	and.w	r2, r3, #15
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	601a      	str	r2, [r3, #0]
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000
 8005170:	40022000 	.word	0x40022000

08005174 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800517c:	2300      	movs	r3, #0
 800517e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005180:	4b27      	ldr	r3, [pc, #156]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800518c:	f7ff f8d6 	bl	800433c <HAL_PWREx_GetVoltageRange>
 8005190:	6178      	str	r0, [r7, #20]
 8005192:	e014      	b.n	80051be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005194:	4b22      	ldr	r3, [pc, #136]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005198:	4a21      	ldr	r2, [pc, #132]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800519a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519e:	6593      	str	r3, [r2, #88]	; 0x58
 80051a0:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051ac:	f7ff f8c6 	bl	800433c <HAL_PWREx_GetVoltageRange>
 80051b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051b2:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b6:	4a1a      	ldr	r2, [pc, #104]	; (8005220 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80051b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c4:	d10b      	bne.n	80051de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b80      	cmp	r3, #128	; 0x80
 80051ca:	d913      	bls.n	80051f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2ba0      	cmp	r3, #160	; 0xa0
 80051d0:	d902      	bls.n	80051d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051d2:	2302      	movs	r3, #2
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	e00d      	b.n	80051f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051d8:	2301      	movs	r3, #1
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	e00a      	b.n	80051f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b7f      	cmp	r3, #127	; 0x7f
 80051e2:	d902      	bls.n	80051ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80051e4:	2302      	movs	r3, #2
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	e004      	b.n	80051f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b70      	cmp	r3, #112	; 0x70
 80051ee:	d101      	bne.n	80051f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051f0:	2301      	movs	r3, #1
 80051f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f023 020f 	bic.w	r2, r3, #15
 80051fc:	4909      	ldr	r1, [pc, #36]	; (8005224 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	429a      	cmp	r2, r3
 8005210:	d001      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000
 8005224:	40022000 	.word	0x40022000

08005228 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800522e:	4b2d      	ldr	r3, [pc, #180]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b03      	cmp	r3, #3
 800523c:	d00b      	beq.n	8005256 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d825      	bhi.n	8005290 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d008      	beq.n	800525c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d11f      	bne.n	8005290 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005250:	4b25      	ldr	r3, [pc, #148]	; (80052e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005252:	613b      	str	r3, [r7, #16]
    break;
 8005254:	e01f      	b.n	8005296 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005256:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005258:	613b      	str	r3, [r7, #16]
    break;
 800525a:	e01c      	b.n	8005296 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800525c:	4b21      	ldr	r3, [pc, #132]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005268:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800526a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	e005      	b.n	8005284 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005284:	4a19      	ldr	r2, [pc, #100]	; (80052ec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528c:	613b      	str	r3, [r7, #16]
    break;
 800528e:	e002      	b.n	8005296 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	613b      	str	r3, [r7, #16]
    break;
 8005294:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005296:	4b13      	ldr	r3, [pc, #76]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	091b      	lsrs	r3, r3, #4
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	3301      	adds	r3, #1
 80052a2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052a4:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	fb03 f202 	mul.w	r2, r3, r2
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ba:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052bc:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	0e5b      	lsrs	r3, r3, #25
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	3301      	adds	r3, #1
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80052d6:	683b      	ldr	r3, [r7, #0]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40021000 	.word	0x40021000
 80052e8:	00f42400 	.word	0x00f42400
 80052ec:	080155b4 	.word	0x080155b4

080052f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052f8:	2300      	movs	r3, #0
 80052fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052fc:	2300      	movs	r3, #0
 80052fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005308:	2b00      	cmp	r3, #0
 800530a:	d040      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005310:	2b80      	cmp	r3, #128	; 0x80
 8005312:	d02a      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005314:	2b80      	cmp	r3, #128	; 0x80
 8005316:	d825      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005318:	2b60      	cmp	r3, #96	; 0x60
 800531a:	d026      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800531c:	2b60      	cmp	r3, #96	; 0x60
 800531e:	d821      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d006      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d81d      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d009      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800532c:	2b20      	cmp	r3, #32
 800532e:	d010      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005330:	e018      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005332:	4b89      	ldr	r3, [pc, #548]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4a88      	ldr	r2, [pc, #544]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800533c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800533e:	e015      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	2100      	movs	r1, #0
 8005346:	4618      	mov	r0, r3
 8005348:	f001 fa82 	bl	8006850 <RCCEx_PLLSAI1_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005350:	e00c      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3320      	adds	r3, #32
 8005356:	2100      	movs	r1, #0
 8005358:	4618      	mov	r0, r3
 800535a:	f001 fb6d 	bl	8006a38 <RCCEx_PLLSAI2_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005362:	e003      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	74fb      	strb	r3, [r7, #19]
      break;
 8005368:	e000      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800536a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800536c:	7cfb      	ldrb	r3, [r7, #19]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10b      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005372:	4b79      	ldr	r3, [pc, #484]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005378:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005380:	4975      	ldr	r1, [pc, #468]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005388:	e001      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538a:	7cfb      	ldrb	r3, [r7, #19]
 800538c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d047      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a2:	d030      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80053a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a8:	d82a      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80053aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ae:	d02a      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80053b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053b4:	d824      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80053b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ba:	d008      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 80053bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c0:	d81e      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80053c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ca:	d010      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80053cc:	e018      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053ce:	4b62      	ldr	r3, [pc, #392]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4a61      	ldr	r2, [pc, #388]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053da:	e015      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	2100      	movs	r1, #0
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 fa34 	bl	8006850 <RCCEx_PLLSAI1_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053ec:	e00c      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3320      	adds	r3, #32
 80053f2:	2100      	movs	r1, #0
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 fb1f 	bl	8006a38 <RCCEx_PLLSAI2_Config>
 80053fa:	4603      	mov	r3, r0
 80053fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053fe:	e003      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	74fb      	strb	r3, [r7, #19]
      break;
 8005404:	e000      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005408:	7cfb      	ldrb	r3, [r7, #19]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10b      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800540e:	4b52      	ldr	r3, [pc, #328]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541c:	494e      	ldr	r1, [pc, #312]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005424:	e001      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005426:	7cfb      	ldrb	r3, [r7, #19]
 8005428:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 809f 	beq.w	8005576 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005438:	2300      	movs	r3, #0
 800543a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800543c:	4b46      	ldr	r3, [pc, #280]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800543e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800544c:	2300      	movs	r3, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005452:	4b41      	ldr	r3, [pc, #260]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	4a40      	ldr	r2, [pc, #256]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545c:	6593      	str	r3, [r2, #88]	; 0x58
 800545e:	4b3e      	ldr	r3, [pc, #248]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800546a:	2301      	movs	r3, #1
 800546c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800546e:	4b3b      	ldr	r3, [pc, #236]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a3a      	ldr	r2, [pc, #232]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005478:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800547a:	f7fc fe45 	bl	8002108 <HAL_GetTick>
 800547e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005480:	e009      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005482:	f7fc fe41 	bl	8002108 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d902      	bls.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	74fb      	strb	r3, [r7, #19]
        break;
 8005494:	e005      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005496:	4b31      	ldr	r3, [pc, #196]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0ef      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80054a2:	7cfb      	ldrb	r3, [r7, #19]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d15b      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054a8:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01f      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d019      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054c6:	4b24      	ldr	r3, [pc, #144]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054d2:	4b21      	ldr	r3, [pc, #132]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d8:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054e2:	4b1d      	ldr	r3, [pc, #116]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e8:	4a1b      	ldr	r2, [pc, #108]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054f2:	4a19      	ldr	r2, [pc, #100]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d016      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fc fe00 	bl	8002108 <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800550a:	e00b      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550c:	f7fc fdfc 	bl	8002108 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d902      	bls.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	74fb      	strb	r3, [r7, #19]
            break;
 8005522:	e006      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0ec      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005532:	7cfb      	ldrb	r3, [r7, #19]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10c      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005538:	4b07      	ldr	r3, [pc, #28]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800553a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005548:	4903      	ldr	r1, [pc, #12]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005550:	e008      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005552:	7cfb      	ldrb	r3, [r7, #19]
 8005554:	74bb      	strb	r3, [r7, #18]
 8005556:	e005      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005558:	40021000 	.word	0x40021000
 800555c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005564:	7c7b      	ldrb	r3, [r7, #17]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d105      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800556a:	4ba0      	ldr	r3, [pc, #640]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556e:	4a9f      	ldr	r2, [pc, #636]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005574:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005582:	4b9a      	ldr	r3, [pc, #616]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	f023 0203 	bic.w	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005590:	4996      	ldr	r1, [pc, #600]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055a4:	4b91      	ldr	r3, [pc, #580]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f023 020c 	bic.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	498e      	ldr	r1, [pc, #568]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055c6:	4b89      	ldr	r3, [pc, #548]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d4:	4985      	ldr	r1, [pc, #532]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055e8:	4b80      	ldr	r3, [pc, #512]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f6:	497d      	ldr	r1, [pc, #500]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800560a:	4b78      	ldr	r3, [pc, #480]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005618:	4974      	ldr	r1, [pc, #464]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800562c:	4b6f      	ldr	r3, [pc, #444]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563a:	496c      	ldr	r1, [pc, #432]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800564e:	4b67      	ldr	r3, [pc, #412]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800565c:	4963      	ldr	r1, [pc, #396]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005670:	4b5e      	ldr	r3, [pc, #376]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800567e:	495b      	ldr	r1, [pc, #364]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005692:	4b56      	ldr	r3, [pc, #344]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a0:	4952      	ldr	r1, [pc, #328]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056b4:	4b4d      	ldr	r3, [pc, #308]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c2:	494a      	ldr	r1, [pc, #296]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d6:	4b45      	ldr	r3, [pc, #276]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e4:	4941      	ldr	r1, [pc, #260]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056f8:	4b3c      	ldr	r3, [pc, #240]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056fe:	f023 0203 	bic.w	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005706:	4939      	ldr	r1, [pc, #228]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d028      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800571a:	4b34      	ldr	r3, [pc, #208]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005720:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005728:	4930      	ldr	r1, [pc, #192]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005738:	d106      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800573a:	4b2c      	ldr	r3, [pc, #176]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	4a2b      	ldr	r2, [pc, #172]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005744:	60d3      	str	r3, [r2, #12]
 8005746:	e011      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005750:	d10c      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3304      	adds	r3, #4
 8005756:	2101      	movs	r1, #1
 8005758:	4618      	mov	r0, r3
 800575a:	f001 f879 	bl	8006850 <RCCEx_PLLSAI1_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005768:	7cfb      	ldrb	r3, [r7, #19]
 800576a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d04d      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800577c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005780:	d108      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005782:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005784:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005788:	4a18      	ldr	r2, [pc, #96]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800578a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800578e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005792:	e012      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005794:	4b15      	ldr	r3, [pc, #84]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800579a:	4a14      	ldr	r2, [pc, #80]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800579c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80057a4:	4b11      	ldr	r3, [pc, #68]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057b2:	490e      	ldr	r1, [pc, #56]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057c2:	d106      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c4:	4b09      	ldr	r3, [pc, #36]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4a08      	ldr	r2, [pc, #32]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ce:	60d3      	str	r3, [r2, #12]
 80057d0:	e020      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057da:	d109      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057dc:	4b03      	ldr	r3, [pc, #12]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4a02      	ldr	r2, [pc, #8]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e6:	60d3      	str	r3, [r2, #12]
 80057e8:	e014      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80057ea:	bf00      	nop
 80057ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057f8:	d10c      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3304      	adds	r3, #4
 80057fe:	2101      	movs	r1, #1
 8005800:	4618      	mov	r0, r3
 8005802:	f001 f825 	bl	8006850 <RCCEx_PLLSAI1_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800580a:	7cfb      	ldrb	r3, [r7, #19]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005810:	7cfb      	ldrb	r3, [r7, #19]
 8005812:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d028      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005820:	4b7a      	ldr	r3, [pc, #488]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005826:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582e:	4977      	ldr	r1, [pc, #476]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800583e:	d106      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005840:	4b72      	ldr	r3, [pc, #456]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	4a71      	ldr	r2, [pc, #452]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800584a:	60d3      	str	r3, [r2, #12]
 800584c:	e011      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005852:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005856:	d10c      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3304      	adds	r3, #4
 800585c:	2101      	movs	r1, #1
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fff6 	bl	8006850 <RCCEx_PLLSAI1_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d01e      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800587e:	4b63      	ldr	r3, [pc, #396]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800588e:	495f      	ldr	r1, [pc, #380]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800589c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058a0:	d10c      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3304      	adds	r3, #4
 80058a6:	2102      	movs	r1, #2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 ffd1 	bl	8006850 <RCCEx_PLLSAI1_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058b2:	7cfb      	ldrb	r3, [r7, #19]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058c8:	4b50      	ldr	r3, [pc, #320]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058ce:	f023 0204 	bic.w	r2, r3, #4
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d8:	494c      	ldr	r1, [pc, #304]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058ec:	4b47      	ldr	r3, [pc, #284]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058f2:	f023 0218 	bic.w	r2, r3, #24
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fc:	4943      	ldr	r1, [pc, #268]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d035      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005910:	4b3e      	ldr	r3, [pc, #248]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a3d      	ldr	r2, [pc, #244]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800591c:	f7fc fbf4 	bl	8002108 <HAL_GetTick>
 8005920:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005922:	e009      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005924:	f7fc fbf0 	bl	8002108 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d902      	bls.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	74fb      	strb	r3, [r7, #19]
        break;
 8005936:	e005      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005938:	4b34      	ldr	r3, [pc, #208]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1ef      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005944:	7cfb      	ldrb	r3, [r7, #19]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d113      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800594a:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800594c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800595a:	492c      	ldr	r1, [pc, #176]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3320      	adds	r3, #32
 8005966:	2102      	movs	r1, #2
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f865 	bl	8006a38 <RCCEx_PLLSAI2_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005972:	7cfb      	ldrb	r3, [r7, #19]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005978:	7cfb      	ldrb	r3, [r7, #19]
 800597a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01e      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005988:	4b20      	ldr	r3, [pc, #128]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800598a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800598e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005998:	491c      	ldr	r1, [pc, #112]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059aa:	d10c      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3320      	adds	r3, #32
 80059b0:	2101      	movs	r1, #1
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 f840 	bl	8006a38 <RCCEx_PLLSAI2_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059bc:	7cfb      	ldrb	r3, [r7, #19]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80059c2:	7cfb      	ldrb	r3, [r7, #19]
 80059c4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d017      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80059d2:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e2:	490a      	ldr	r1, [pc, #40]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059f4:	d105      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80059fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a00:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a02:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40021000 	.word	0x40021000

08005a10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a22:	d13e      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005a24:	4bb6      	ldr	r3, [pc, #728]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a2e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a36:	d028      	beq.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3e:	f200 86f2 	bhi.w	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a48:	d005      	beq.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a50:	d00e      	beq.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005a52:	f000 bee8 	b.w	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a56:	4baa      	ldr	r3, [pc, #680]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	f040 86e2 	bne.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8005a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a6a:	61fb      	str	r3, [r7, #28]
      break;
 8005a6c:	f000 bedd 	b.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005a70:	4ba3      	ldr	r3, [pc, #652]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	f040 86d7 	bne.w	800682e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8005a80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a84:	61fb      	str	r3, [r7, #28]
      break;
 8005a86:	f000 bed2 	b.w	800682e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a8a:	4b9d      	ldr	r3, [pc, #628]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a96:	f040 86cc 	bne.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8005a9a:	4b9a      	ldr	r3, [pc, #616]	; (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005a9c:	61fb      	str	r3, [r7, #28]
      break;
 8005a9e:	f000 bec8 	b.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa2:	4b97      	ldr	r3, [pc, #604]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d036      	beq.n	8005b20 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d840      	bhi.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d020      	beq.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005ac4:	e039      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005ac6:	4b8e      	ldr	r3, [pc, #568]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d116      	bne.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005ad2:	4b8b      	ldr	r3, [pc, #556]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005ade:	4b88      	ldr	r3, [pc, #544]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	091b      	lsrs	r3, r3, #4
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	e005      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005aea:	4b85      	ldr	r3, [pc, #532]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005af0:	0a1b      	lsrs	r3, r3, #8
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	4a84      	ldr	r2, [pc, #528]	; (8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005afc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005afe:	e01f      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61bb      	str	r3, [r7, #24]
      break;
 8005b04:	e01c      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b06:	4b7e      	ldr	r3, [pc, #504]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b12:	d102      	bne.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005b14:	4b7d      	ldr	r3, [pc, #500]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005b16:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005b18:	e012      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61bb      	str	r3, [r7, #24]
      break;
 8005b1e:	e00f      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b20:	4b77      	ldr	r3, [pc, #476]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b2c:	d102      	bne.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005b2e:	4b77      	ldr	r3, [pc, #476]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005b30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005b32:	e005      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
      break;
 8005b38:	e002      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
      break;
 8005b3e:	bf00      	nop
    }

    switch(PeriphClk)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b46:	f000 8604 	beq.w	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b50:	f200 8671 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b5a:	f000 8467 	beq.w	800642c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b64:	f200 8667 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b6e:	f000 852f 	beq.w	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b78:	f200 865d 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b82:	f000 8185 	beq.w	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b8c:	f200 8653 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b96:	f000 80cb 	beq.w	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ba0:	f200 8649 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005baa:	f000 842e 	beq.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb4:	f200 863f 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bbe:	f000 83e2 	beq.w	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bc8:	f200 8635 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd2:	f000 80ad 	beq.w	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bdc:	f200 862b 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be6:	f000 809b 	beq.w	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf0:	f200 8621 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bfa:	f000 8089 	beq.w	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c04:	f200 8617 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c0e:	f000 8552 	beq.w	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c18:	f200 860d 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c22:	f000 84fe 	beq.w	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c2c:	f200 8603 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c36:	f000 849f 	beq.w	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c40:	f200 85f9 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b80      	cmp	r3, #128	; 0x80
 8005c48:	f000 846a 	beq.w	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b80      	cmp	r3, #128	; 0x80
 8005c50:	f200 85f1 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d84c      	bhi.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 85ea 	beq.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	2b1f      	cmp	r3, #31
 8005c68:	f200 85e5 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005c6c:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08006085 	.word	0x08006085
 8005c78:	080060f3 	.word	0x080060f3
 8005c7c:	08006837 	.word	0x08006837
 8005c80:	08006187 	.word	0x08006187
 8005c84:	08006837 	.word	0x08006837
 8005c88:	08006837 	.word	0x08006837
 8005c8c:	08006837 	.word	0x08006837
 8005c90:	080061ff 	.word	0x080061ff
 8005c94:	08006837 	.word	0x08006837
 8005c98:	08006837 	.word	0x08006837
 8005c9c:	08006837 	.word	0x08006837
 8005ca0:	08006837 	.word	0x08006837
 8005ca4:	08006837 	.word	0x08006837
 8005ca8:	08006837 	.word	0x08006837
 8005cac:	08006837 	.word	0x08006837
 8005cb0:	08006283 	.word	0x08006283
 8005cb4:	08006837 	.word	0x08006837
 8005cb8:	08006837 	.word	0x08006837
 8005cbc:	08006837 	.word	0x08006837
 8005cc0:	08006837 	.word	0x08006837
 8005cc4:	08006837 	.word	0x08006837
 8005cc8:	08006837 	.word	0x08006837
 8005ccc:	08006837 	.word	0x08006837
 8005cd0:	08006837 	.word	0x08006837
 8005cd4:	08006837 	.word	0x08006837
 8005cd8:	08006837 	.word	0x08006837
 8005cdc:	08006837 	.word	0x08006837
 8005ce0:	08006837 	.word	0x08006837
 8005ce4:	08006837 	.word	0x08006837
 8005ce8:	08006837 	.word	0x08006837
 8005cec:	08006837 	.word	0x08006837
 8005cf0:	08006305 	.word	0x08006305
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	f000 83e6 	beq.w	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005cfc:	f000 bd9b 	b.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005d00:	40021000 	.word	0x40021000
 8005d04:	0007a120 	.word	0x0007a120
 8005d08:	080155b4 	.word	0x080155b4
 8005d0c:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005d10:	69b9      	ldr	r1, [r7, #24]
 8005d12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005d16:	f000 ff83 	bl	8006c20 <RCCEx_GetSAIxPeriphCLKFreq>
 8005d1a:	61f8      	str	r0, [r7, #28]
      break;
 8005d1c:	f000 bd8e 	b.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005d20:	69b9      	ldr	r1, [r7, #24]
 8005d22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005d26:	f000 ff7b 	bl	8006c20 <RCCEx_GetSAIxPeriphCLKFreq>
 8005d2a:	61f8      	str	r0, [r7, #28]
      break;
 8005d2c:	f000 bd86 	b.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005d30:	4b9a      	ldr	r3, [pc, #616]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005d42:	d015      	beq.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005d4a:	f200 8092 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d54:	d029      	beq.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d5c:	f200 8089 	bhi.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d07b      	beq.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d6c:	d04a      	beq.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8005d6e:	e080      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005d70:	4b8a      	ldr	r3, [pc, #552]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d17d      	bne.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005d7c:	4b87      	ldr	r3, [pc, #540]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8005d88:	4b84      	ldr	r3, [pc, #528]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	e005      	b.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8005d94:	4b81      	ldr	r3, [pc, #516]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	4a7f      	ldr	r2, [pc, #508]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da6:	61fb      	str	r3, [r7, #28]
          break;
 8005da8:	e066      	b.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005daa:	4b7c      	ldr	r3, [pc, #496]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005db6:	d162      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005db8:	4b78      	ldr	r3, [pc, #480]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc4:	d15b      	bne.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005dc6:	4b75      	ldr	r3, [pc, #468]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	fb03 f202 	mul.w	r2, r3, r2
 8005dda:	4b70      	ldr	r3, [pc, #448]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	091b      	lsrs	r3, r3, #4
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	3301      	adds	r3, #1
 8005de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dea:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005dec:	4b6b      	ldr	r3, [pc, #428]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	0d5b      	lsrs	r3, r3, #21
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	3301      	adds	r3, #1
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e00:	61fb      	str	r3, [r7, #28]
          break;
 8005e02:	e03c      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005e04:	4b65      	ldr	r3, [pc, #404]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e10:	d138      	bne.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005e12:	4b62      	ldr	r3, [pc, #392]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e1e:	d131      	bne.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005e20:	4b5e      	ldr	r3, [pc, #376]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	0a1b      	lsrs	r3, r3, #8
 8005e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	fb03 f202 	mul.w	r2, r3, r2
 8005e34:	4b59      	ldr	r3, [pc, #356]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	3301      	adds	r3, #1
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005e46:	4b55      	ldr	r3, [pc, #340]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	0d5b      	lsrs	r3, r3, #21
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	3301      	adds	r3, #1
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5a:	61fb      	str	r3, [r7, #28]
          break;
 8005e5c:	e012      	b.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005e5e:	4b4f      	ldr	r3, [pc, #316]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d10e      	bne.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8005e6c:	4b4d      	ldr	r3, [pc, #308]	; (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005e6e:	61fb      	str	r3, [r7, #28]
          break;
 8005e70:	e00b      	b.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8005e72:	bf00      	nop
 8005e74:	f000 bce2 	b.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e78:	bf00      	nop
 8005e7a:	f000 bcdf 	b.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e7e:	bf00      	nop
 8005e80:	f000 bcdc 	b.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e84:	bf00      	nop
 8005e86:	f000 bcd9 	b.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e8a:	bf00      	nop
        break;
 8005e8c:	f000 bcd6 	b.w	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005e90:	4b42      	ldr	r3, [pc, #264]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e9e:	d13d      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005ea0:	4b3e      	ldr	r3, [pc, #248]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eac:	f040 84c5 	bne.w	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005eb0:	4b3a      	ldr	r3, [pc, #232]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ebc:	f040 84bd 	bne.w	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ec0:	4b36      	ldr	r3, [pc, #216]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	0a1b      	lsrs	r3, r3, #8
 8005ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eca:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	fb03 f202 	mul.w	r2, r3, r2
 8005ed4:	4b31      	ldr	r3, [pc, #196]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	3301      	adds	r3, #1
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005ee6:	4b2d      	ldr	r3, [pc, #180]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	0edb      	lsrs	r3, r3, #27
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005ef8:	4b28      	ldr	r3, [pc, #160]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8005f04:	2311      	movs	r3, #17
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	e001      	b.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8005f0a:	2307      	movs	r3, #7
 8005f0c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f16:	61fb      	str	r3, [r7, #28]
      break;
 8005f18:	f000 bc8f 	b.w	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005f1c:	4b1f      	ldr	r3, [pc, #124]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f22:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f2e:	d016      	beq.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f36:	f200 809b 	bhi.w	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f40:	d032      	beq.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f48:	f200 8092 	bhi.w	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8084 	beq.w	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f5a:	d052      	beq.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8005f5c:	e088      	b.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f5e:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	f040 8084 	bne.w	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8005f78:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	091b      	lsrs	r3, r3, #4
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	e005      	b.n	8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005f84:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f8a:	0a1b      	lsrs	r3, r3, #8
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	4a03      	ldr	r2, [pc, #12]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f96:	61fb      	str	r3, [r7, #28]
          break;
 8005f98:	e06c      	b.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005f9a:	bf00      	nop
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	080155b4 	.word	0x080155b4
 8005fa4:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005fa8:	4ba5      	ldr	r3, [pc, #660]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fb4:	d160      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005fb6:	4ba2      	ldr	r3, [pc, #648]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc2:	d159      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005fc4:	4b9e      	ldr	r3, [pc, #632]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	0a1b      	lsrs	r3, r3, #8
 8005fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fce:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	fb03 f202 	mul.w	r2, r3, r2
 8005fd8:	4b99      	ldr	r3, [pc, #612]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005fea:	4b95      	ldr	r3, [pc, #596]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	0d5b      	lsrs	r3, r3, #21
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffe:	61fb      	str	r3, [r7, #28]
          break;
 8006000:	e03a      	b.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006002:	4b8f      	ldr	r3, [pc, #572]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800600a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800600e:	d135      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006010:	4b8b      	ldr	r3, [pc, #556]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800601c:	d12e      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800601e:	4b88      	ldr	r3, [pc, #544]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	0a1b      	lsrs	r3, r3, #8
 8006024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006028:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	fb03 f202 	mul.w	r2, r3, r2
 8006032:	4b83      	ldr	r3, [pc, #524]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	091b      	lsrs	r3, r3, #4
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	3301      	adds	r3, #1
 800603e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006042:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006044:	4b7e      	ldr	r3, [pc, #504]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	0d5b      	lsrs	r3, r3, #21
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	3301      	adds	r3, #1
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	fbb2 f3f3 	udiv	r3, r2, r3
 8006058:	61fb      	str	r3, [r7, #28]
          break;
 800605a:	e00f      	b.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800605c:	4b78      	ldr	r3, [pc, #480]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800605e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b02      	cmp	r3, #2
 8006068:	d10a      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800606a:	4b76      	ldr	r3, [pc, #472]	; (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800606c:	61fb      	str	r3, [r7, #28]
          break;
 800606e:	e007      	b.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8006070:	bf00      	nop
 8006072:	e3e2      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006074:	bf00      	nop
 8006076:	e3e0      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006078:	bf00      	nop
 800607a:	e3de      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800607c:	bf00      	nop
 800607e:	e3dc      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006080:	bf00      	nop
      break;
 8006082:	e3da      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006084:	4b6e      	ldr	r3, [pc, #440]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b03      	cmp	r3, #3
 8006094:	d827      	bhi.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060ad 	.word	0x080060ad
 80060a0:	080060b5 	.word	0x080060b5
 80060a4:	080060bd 	.word	0x080060bd
 80060a8:	080060d1 	.word	0x080060d1
          frequency = HAL_RCC_GetPCLK2Freq();
 80060ac:	f7ff f81a 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 80060b0:	61f8      	str	r0, [r7, #28]
          break;
 80060b2:	e01d      	b.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 80060b4:	f7fe ff6a 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 80060b8:	61f8      	str	r0, [r7, #28]
          break;
 80060ba:	e019      	b.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060bc:	4b60      	ldr	r3, [pc, #384]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c8:	d10f      	bne.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 80060ca:	4b5f      	ldr	r3, [pc, #380]	; (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80060cc:	61fb      	str	r3, [r7, #28]
          break;
 80060ce:	e00c      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060d0:	4b5b      	ldr	r3, [pc, #364]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d107      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 80060de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e2:	61fb      	str	r3, [r7, #28]
          break;
 80060e4:	e003      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 80060e6:	bf00      	nop
 80060e8:	e3a8      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80060ea:	bf00      	nop
 80060ec:	e3a6      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80060ee:	bf00      	nop
        break;
 80060f0:	e3a4      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80060f2:	4b53      	ldr	r3, [pc, #332]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	f003 030c 	and.w	r3, r3, #12
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d83a      	bhi.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8006104:	a201      	add	r2, pc, #4	; (adr r2, 800610c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006141 	.word	0x08006141
 8006110:	0800617b 	.word	0x0800617b
 8006114:	0800617b 	.word	0x0800617b
 8006118:	0800617b 	.word	0x0800617b
 800611c:	08006149 	.word	0x08006149
 8006120:	0800617b 	.word	0x0800617b
 8006124:	0800617b 	.word	0x0800617b
 8006128:	0800617b 	.word	0x0800617b
 800612c:	08006151 	.word	0x08006151
 8006130:	0800617b 	.word	0x0800617b
 8006134:	0800617b 	.word	0x0800617b
 8006138:	0800617b 	.word	0x0800617b
 800613c:	08006165 	.word	0x08006165
          frequency = HAL_RCC_GetPCLK1Freq();
 8006140:	f7fe ffba 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8006144:	61f8      	str	r0, [r7, #28]
          break;
 8006146:	e01d      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8006148:	f7fe ff20 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 800614c:	61f8      	str	r0, [r7, #28]
          break;
 800614e:	e019      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006150:	4b3b      	ldr	r3, [pc, #236]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615c:	d10f      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 800615e:	4b3a      	ldr	r3, [pc, #232]	; (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006160:	61fb      	str	r3, [r7, #28]
          break;
 8006162:	e00c      	b.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006164:	4b36      	ldr	r3, [pc, #216]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d107      	bne.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8006172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006176:	61fb      	str	r3, [r7, #28]
          break;
 8006178:	e003      	b.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800617a:	bf00      	nop
 800617c:	e35e      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800617e:	bf00      	nop
 8006180:	e35c      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006182:	bf00      	nop
        break;
 8006184:	e35a      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006186:	4b2e      	ldr	r3, [pc, #184]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b30      	cmp	r3, #48	; 0x30
 8006196:	d021      	beq.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b30      	cmp	r3, #48	; 0x30
 800619c:	d829      	bhi.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d011      	beq.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d823      	bhi.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b10      	cmp	r3, #16
 80061b4:	d004      	beq.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 80061b6:	e01c      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061b8:	f7fe ff7e 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 80061bc:	61f8      	str	r0, [r7, #28]
          break;
 80061be:	e01d      	b.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80061c0:	f7fe fee4 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 80061c4:	61f8      	str	r0, [r7, #28]
          break;
 80061c6:	e019      	b.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061c8:	4b1d      	ldr	r3, [pc, #116]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d4:	d10f      	bne.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 80061d6:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80061d8:	61fb      	str	r3, [r7, #28]
          break;
 80061da:	e00c      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80061dc:	4b18      	ldr	r3, [pc, #96]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d107      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80061ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ee:	61fb      	str	r3, [r7, #28]
          break;
 80061f0:	e003      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80061f2:	bf00      	nop
 80061f4:	e322      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80061f6:	bf00      	nop
 80061f8:	e320      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80061fa:	bf00      	nop
        break;
 80061fc:	e31e      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80061fe:	4b10      	ldr	r3, [pc, #64]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006204:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2bc0      	cmp	r3, #192	; 0xc0
 800620e:	d027      	beq.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2bc0      	cmp	r3, #192	; 0xc0
 8006214:	d82f      	bhi.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b80      	cmp	r3, #128	; 0x80
 800621a:	d017      	beq.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b80      	cmp	r3, #128	; 0x80
 8006220:	d829      	bhi.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b40      	cmp	r3, #64	; 0x40
 800622c:	d004      	beq.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 800622e:	e022      	b.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006230:	f7fe ff42 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8006234:	61f8      	str	r0, [r7, #28]
          break;
 8006236:	e023      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8006238:	f7fe fea8 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 800623c:	61f8      	str	r0, [r7, #28]
          break;
 800623e:	e01f      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8006240:	40021000 	.word	0x40021000
 8006244:	02dc6c00 	.word	0x02dc6c00
 8006248:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800624c:	4b9b      	ldr	r3, [pc, #620]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006258:	d10f      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800625a:	4b99      	ldr	r3, [pc, #612]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800625c:	61fb      	str	r3, [r7, #28]
          break;
 800625e:	e00c      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006260:	4b96      	ldr	r3, [pc, #600]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b02      	cmp	r3, #2
 800626c:	d107      	bne.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 800626e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006272:	61fb      	str	r3, [r7, #28]
          break;
 8006274:	e003      	b.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8006276:	bf00      	nop
 8006278:	e2e0      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800627a:	bf00      	nop
 800627c:	e2de      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800627e:	bf00      	nop
        break;
 8006280:	e2dc      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006282:	4b8e      	ldr	r3, [pc, #568]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006294:	d025      	beq.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800629c:	d82c      	bhi.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a4:	d013      	beq.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ac:	d824      	bhi.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d004      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ba:	d004      	beq.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 80062bc:	e01c      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062be:	f7fe fefb 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 80062c2:	61f8      	str	r0, [r7, #28]
          break;
 80062c4:	e01d      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80062c6:	f7fe fe61 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 80062ca:	61f8      	str	r0, [r7, #28]
          break;
 80062cc:	e019      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062ce:	4b7b      	ldr	r3, [pc, #492]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062da:	d10f      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 80062dc:	4b78      	ldr	r3, [pc, #480]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80062de:	61fb      	str	r3, [r7, #28]
          break;
 80062e0:	e00c      	b.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062e2:	4b76      	ldr	r3, [pc, #472]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d107      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 80062f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f4:	61fb      	str	r3, [r7, #28]
          break;
 80062f6:	e003      	b.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80062f8:	bf00      	nop
 80062fa:	e29f      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80062fc:	bf00      	nop
 80062fe:	e29d      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006300:	bf00      	nop
        break;
 8006302:	e29b      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006304:	4b6d      	ldr	r3, [pc, #436]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006316:	d025      	beq.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800631e:	d82c      	bhi.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006326:	d013      	beq.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632e:	d824      	bhi.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d004      	beq.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633c:	d004      	beq.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 800633e:	e01c      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006340:	f7fe feba 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8006344:	61f8      	str	r0, [r7, #28]
          break;
 8006346:	e01d      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8006348:	f7fe fe20 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 800634c:	61f8      	str	r0, [r7, #28]
          break;
 800634e:	e019      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006350:	4b5a      	ldr	r3, [pc, #360]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800635c:	d10f      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 800635e:	4b58      	ldr	r3, [pc, #352]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006360:	61fb      	str	r3, [r7, #28]
          break;
 8006362:	e00c      	b.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006364:	4b55      	ldr	r3, [pc, #340]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b02      	cmp	r3, #2
 8006370:	d107      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8006372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006376:	61fb      	str	r3, [r7, #28]
          break;
 8006378:	e003      	b.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 800637a:	bf00      	nop
 800637c:	e25e      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800637e:	bf00      	nop
 8006380:	e25c      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006382:	bf00      	nop
        break;
 8006384:	e25a      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006386:	4b4d      	ldr	r3, [pc, #308]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006398:	d007      	beq.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063a0:	d12f      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80063a2:	f7fe fdf3 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 80063a6:	61f8      	str	r0, [r7, #28]
          break;
 80063a8:	e02e      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80063aa:	4b44      	ldr	r3, [pc, #272]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063b6:	d126      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 80063b8:	4b40      	ldr	r3, [pc, #256]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d020      	beq.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80063c4:	4b3d      	ldr	r3, [pc, #244]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	0a1b      	lsrs	r3, r3, #8
 80063ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ce:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	fb03 f202 	mul.w	r2, r3, r2
 80063d8:	4b38      	ldr	r3, [pc, #224]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	091b      	lsrs	r3, r3, #4
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	3301      	adds	r3, #1
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80063ea:	4b34      	ldr	r3, [pc, #208]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	0e5b      	lsrs	r3, r3, #25
 80063f0:	f003 0303 	and.w	r3, r3, #3
 80063f4:	3301      	adds	r3, #1
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fe:	61fb      	str	r3, [r7, #28]
          break;
 8006400:	e001      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8006402:	bf00      	nop
 8006404:	e21a      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006406:	bf00      	nop
        break;
 8006408:	e218      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800640a:	4b2c      	ldr	r3, [pc, #176]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800640c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d103      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 800641c:	f7fe fe62 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8006420:	61f8      	str	r0, [r7, #28]
        break;
 8006422:	e20b      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006424:	f7fe fdb2 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 8006428:	61f8      	str	r0, [r7, #28]
        break;
 800642a:	e207      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800642c:	4b23      	ldr	r3, [pc, #140]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800642e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006432:	f003 0318 	and.w	r3, r3, #24
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b10      	cmp	r3, #16
 800643c:	d010      	beq.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b10      	cmp	r3, #16
 8006442:	d834      	bhi.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b08      	cmp	r3, #8
 800644e:	d024      	beq.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8006450:	e02d      	b.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006452:	69b9      	ldr	r1, [r7, #24]
 8006454:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006458:	f000 fbe2 	bl	8006c20 <RCCEx_GetSAIxPeriphCLKFreq>
 800645c:	61f8      	str	r0, [r7, #28]
          break;
 800645e:	e02b      	b.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006460:	4b16      	ldr	r3, [pc, #88]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b02      	cmp	r3, #2
 800646a:	d122      	bne.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800646c:	4b13      	ldr	r3, [pc, #76]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8006478:	4b10      	ldr	r3, [pc, #64]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	e005      	b.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006484:	4b0d      	ldr	r3, [pc, #52]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800648a:	0a1b      	lsrs	r3, r3, #8
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	4a0c      	ldr	r2, [pc, #48]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006496:	61fb      	str	r3, [r7, #28]
          break;
 8006498:	e00b      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800649a:	4b08      	ldr	r3, [pc, #32]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a6:	d106      	bne.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80064aa:	61fb      	str	r3, [r7, #28]
          break;
 80064ac:	e003      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 80064ae:	bf00      	nop
 80064b0:	e1c4      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80064b2:	bf00      	nop
 80064b4:	e1c2      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80064b6:	bf00      	nop
        break;
 80064b8:	e1c0      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 80064ba:	bf00      	nop
 80064bc:	40021000 	.word	0x40021000
 80064c0:	00f42400 	.word	0x00f42400
 80064c4:	080155b4 	.word	0x080155b4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80064c8:	4b96      	ldr	r3, [pc, #600]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064da:	d013      	beq.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e2:	d819      	bhi.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d004      	beq.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f0:	d004      	beq.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 80064f2:	e011      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064f4:	f7fe fde0 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 80064f8:	61f8      	str	r0, [r7, #28]
          break;
 80064fa:	e010      	b.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80064fc:	f7fe fd46 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 8006500:	61f8      	str	r0, [r7, #28]
          break;
 8006502:	e00c      	b.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006504:	4b87      	ldr	r3, [pc, #540]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006510:	d104      	bne.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8006512:	4b85      	ldr	r3, [pc, #532]	; (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006514:	61fb      	str	r3, [r7, #28]
          break;
 8006516:	e001      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8006518:	bf00      	nop
 800651a:	e18f      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800651c:	bf00      	nop
        break;
 800651e:	e18d      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006520:	4b80      	ldr	r3, [pc, #512]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006526:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006532:	d013      	beq.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800653a:	d819      	bhi.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d004      	beq.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006548:	d004      	beq.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800654a:	e011      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 800654c:	f7fe fdb4 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8006550:	61f8      	str	r0, [r7, #28]
          break;
 8006552:	e010      	b.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8006554:	f7fe fd1a 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 8006558:	61f8      	str	r0, [r7, #28]
          break;
 800655a:	e00c      	b.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800655c:	4b71      	ldr	r3, [pc, #452]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006568:	d104      	bne.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800656a:	4b6f      	ldr	r3, [pc, #444]	; (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800656c:	61fb      	str	r3, [r7, #28]
          break;
 800656e:	e001      	b.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8006570:	bf00      	nop
 8006572:	e163      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006574:	bf00      	nop
        break;
 8006576:	e161      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006578:	4b6a      	ldr	r3, [pc, #424]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800658a:	d013      	beq.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006592:	d819      	bhi.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a0:	d004      	beq.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 80065a2:	e011      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065a4:	f7fe fd88 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 80065a8:	61f8      	str	r0, [r7, #28]
          break;
 80065aa:	e010      	b.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 80065ac:	f7fe fcee 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 80065b0:	61f8      	str	r0, [r7, #28]
          break;
 80065b2:	e00c      	b.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065b4:	4b5b      	ldr	r3, [pc, #364]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c0:	d104      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 80065c2:	4b59      	ldr	r3, [pc, #356]	; (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80065c4:	61fb      	str	r3, [r7, #28]
          break;
 80065c6:	e001      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 80065c8:	bf00      	nop
 80065ca:	e137      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80065cc:	bf00      	nop
        break;
 80065ce:	e135      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80065d0:	4b54      	ldr	r3, [pc, #336]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80065d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d011      	beq.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d818      	bhi.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d004      	beq.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 80065f4:	e011      	b.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065f6:	f7fe fd5f 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 80065fa:	61f8      	str	r0, [r7, #28]
          break;
 80065fc:	e010      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 80065fe:	f7fe fcc5 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 8006602:	61f8      	str	r0, [r7, #28]
          break;
 8006604:	e00c      	b.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006606:	4b47      	ldr	r3, [pc, #284]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800660e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006612:	d104      	bne.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8006614:	4b44      	ldr	r3, [pc, #272]	; (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006616:	61fb      	str	r3, [r7, #28]
          break;
 8006618:	e001      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 800661a:	bf00      	nop
 800661c:	e10e      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800661e:	bf00      	nop
        break;
 8006620:	e10c      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006622:	4b40      	ldr	r3, [pc, #256]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006628:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006634:	d02c      	beq.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800663c:	d833      	bhi.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006644:	d01a      	beq.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800664c:	d82b      	bhi.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d004      	beq.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800665a:	d004      	beq.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 800665c:	e023      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 800665e:	f7fe fd2b 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8006662:	61f8      	str	r0, [r7, #28]
          break;
 8006664:	e026      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006666:	4b2f      	ldr	r3, [pc, #188]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b02      	cmp	r3, #2
 8006672:	d11a      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8006674:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006678:	61fb      	str	r3, [r7, #28]
          break;
 800667a:	e016      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800667c:	4b29      	ldr	r3, [pc, #164]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006688:	d111      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800668a:	4b27      	ldr	r3, [pc, #156]	; (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800668c:	61fb      	str	r3, [r7, #28]
          break;
 800668e:	e00e      	b.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006690:	4b24      	ldr	r3, [pc, #144]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b02      	cmp	r3, #2
 800669c:	d109      	bne.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 800669e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a2:	61fb      	str	r3, [r7, #28]
          break;
 80066a4:	e005      	b.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 80066a6:	bf00      	nop
 80066a8:	e0c8      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80066aa:	bf00      	nop
 80066ac:	e0c6      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80066ae:	bf00      	nop
 80066b0:	e0c4      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80066b2:	bf00      	nop
        break;
 80066b4:	e0c2      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80066b6:	4b1b      	ldr	r3, [pc, #108]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066c8:	d030      	beq.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066d0:	d837      	bhi.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066d8:	d01a      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066e0:	d82f      	bhi.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ee:	d004      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 80066f0:	e027      	b.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066f2:	f7fe fce1 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 80066f6:	61f8      	str	r0, [r7, #28]
          break;
 80066f8:	e02a      	b.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80066fa:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80066fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b02      	cmp	r3, #2
 8006706:	d11e      	bne.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8006708:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800670c:	61fb      	str	r3, [r7, #28]
          break;
 800670e:	e01a      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006710:	4b04      	ldr	r3, [pc, #16]	; (8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671c:	d115      	bne.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 800671e:	4b02      	ldr	r3, [pc, #8]	; (8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006720:	61fb      	str	r3, [r7, #28]
          break;
 8006722:	e012      	b.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006724:	40021000 	.word	0x40021000
 8006728:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800672c:	4b46      	ldr	r3, [pc, #280]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b02      	cmp	r3, #2
 8006738:	d109      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 800673a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800673e:	61fb      	str	r3, [r7, #28]
          break;
 8006740:	e005      	b.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8006742:	bf00      	nop
 8006744:	e07a      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006746:	bf00      	nop
 8006748:	e078      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800674a:	bf00      	nop
 800674c:	e076      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800674e:	bf00      	nop
        break;
 8006750:	e074      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006752:	4b3d      	ldr	r3, [pc, #244]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006758:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006764:	d02c      	beq.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800676c:	d855      	bhi.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800677a:	d004      	beq.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 800677c:	e04d      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 800677e:	f7fe fc05 	bl	8004f8c <HAL_RCC_GetSysClockFreq>
 8006782:	61f8      	str	r0, [r7, #28]
          break;
 8006784:	e04e      	b.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006786:	4b30      	ldr	r3, [pc, #192]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b02      	cmp	r3, #2
 8006790:	d145      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006792:	4b2d      	ldr	r3, [pc, #180]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 800679e:	4b2a      	ldr	r3, [pc, #168]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	091b      	lsrs	r3, r3, #4
 80067a4:	f003 030f 	and.w	r3, r3, #15
 80067a8:	e005      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80067aa:	4b27      	ldr	r3, [pc, #156]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80067ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067b0:	0a1b      	lsrs	r3, r3, #8
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	4a25      	ldr	r2, [pc, #148]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 80067b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067bc:	61fb      	str	r3, [r7, #28]
          break;
 80067be:	e02e      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80067c0:	4b21      	ldr	r3, [pc, #132]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067cc:	d129      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80067ce:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067da:	d122      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80067dc:	4b1a      	ldr	r3, [pc, #104]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	0a1b      	lsrs	r3, r3, #8
 80067e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	fb03 f202 	mul.w	r2, r3, r2
 80067f0:	4b15      	ldr	r3, [pc, #84]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	3301      	adds	r3, #1
 80067fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006800:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006802:	4b11      	ldr	r3, [pc, #68]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	0d5b      	lsrs	r3, r3, #21
 8006808:	f003 0303 	and.w	r3, r3, #3
 800680c:	3301      	adds	r3, #1
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	fbb2 f3f3 	udiv	r3, r2, r3
 8006816:	61fb      	str	r3, [r7, #28]
          break;
 8006818:	e003      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 800681a:	bf00      	nop
 800681c:	e00e      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800681e:	bf00      	nop
 8006820:	e00c      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006822:	bf00      	nop
        break;
 8006824:	e00a      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006826:	bf00      	nop
 8006828:	e008      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800682a:	bf00      	nop
 800682c:	e006      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800682e:	bf00      	nop
 8006830:	e004      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006832:	bf00      	nop
 8006834:	e002      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800683a:	bf00      	nop
    }
  }

  return(frequency);
 800683c:	69fb      	ldr	r3, [r7, #28]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40021000 	.word	0x40021000
 800684c:	080155b4 	.word	0x080155b4

08006850 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800685e:	4b72      	ldr	r3, [pc, #456]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00e      	beq.n	8006888 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800686a:	4b6f      	ldr	r3, [pc, #444]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f003 0203 	and.w	r2, r3, #3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	d103      	bne.n	8006882 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
       ||
 800687e:	2b00      	cmp	r3, #0
 8006880:	d142      	bne.n	8006908 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	73fb      	strb	r3, [r7, #15]
 8006886:	e03f      	b.n	8006908 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b03      	cmp	r3, #3
 800688e:	d018      	beq.n	80068c2 <RCCEx_PLLSAI1_Config+0x72>
 8006890:	2b03      	cmp	r3, #3
 8006892:	d825      	bhi.n	80068e0 <RCCEx_PLLSAI1_Config+0x90>
 8006894:	2b01      	cmp	r3, #1
 8006896:	d002      	beq.n	800689e <RCCEx_PLLSAI1_Config+0x4e>
 8006898:	2b02      	cmp	r3, #2
 800689a:	d009      	beq.n	80068b0 <RCCEx_PLLSAI1_Config+0x60>
 800689c:	e020      	b.n	80068e0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800689e:	4b62      	ldr	r3, [pc, #392]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d11d      	bne.n	80068e6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ae:	e01a      	b.n	80068e6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068b0:	4b5d      	ldr	r3, [pc, #372]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d116      	bne.n	80068ea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068c0:	e013      	b.n	80068ea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068c2:	4b59      	ldr	r3, [pc, #356]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10f      	bne.n	80068ee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068ce:	4b56      	ldr	r3, [pc, #344]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068de:	e006      	b.n	80068ee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	73fb      	strb	r3, [r7, #15]
      break;
 80068e4:	e004      	b.n	80068f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80068e6:	bf00      	nop
 80068e8:	e002      	b.n	80068f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80068ea:	bf00      	nop
 80068ec:	e000      	b.n	80068f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80068ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d108      	bne.n	8006908 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80068f6:	4b4c      	ldr	r3, [pc, #304]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f023 0203 	bic.w	r2, r3, #3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4949      	ldr	r1, [pc, #292]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006904:	4313      	orrs	r3, r2
 8006906:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f040 8086 	bne.w	8006a1c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006910:	4b45      	ldr	r3, [pc, #276]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a44      	ldr	r2, [pc, #272]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006916:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800691a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800691c:	f7fb fbf4 	bl	8002108 <HAL_GetTick>
 8006920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006922:	e009      	b.n	8006938 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006924:	f7fb fbf0 	bl	8002108 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d902      	bls.n	8006938 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	73fb      	strb	r3, [r7, #15]
        break;
 8006936:	e005      	b.n	8006944 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006938:	4b3b      	ldr	r3, [pc, #236]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1ef      	bne.n	8006924 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d168      	bne.n	8006a1c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d113      	bne.n	8006978 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006950:	4b35      	ldr	r3, [pc, #212]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	4b35      	ldr	r3, [pc, #212]	; (8006a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006956:	4013      	ands	r3, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6892      	ldr	r2, [r2, #8]
 800695c:	0211      	lsls	r1, r2, #8
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68d2      	ldr	r2, [r2, #12]
 8006962:	06d2      	lsls	r2, r2, #27
 8006964:	4311      	orrs	r1, r2
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6852      	ldr	r2, [r2, #4]
 800696a:	3a01      	subs	r2, #1
 800696c:	0112      	lsls	r2, r2, #4
 800696e:	430a      	orrs	r2, r1
 8006970:	492d      	ldr	r1, [pc, #180]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006972:	4313      	orrs	r3, r2
 8006974:	610b      	str	r3, [r1, #16]
 8006976:	e02d      	b.n	80069d4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d115      	bne.n	80069aa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800697e:	4b2a      	ldr	r3, [pc, #168]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006980:	691a      	ldr	r2, [r3, #16]
 8006982:	4b2b      	ldr	r3, [pc, #172]	; (8006a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006984:	4013      	ands	r3, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6892      	ldr	r2, [r2, #8]
 800698a:	0211      	lsls	r1, r2, #8
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6912      	ldr	r2, [r2, #16]
 8006990:	0852      	lsrs	r2, r2, #1
 8006992:	3a01      	subs	r2, #1
 8006994:	0552      	lsls	r2, r2, #21
 8006996:	4311      	orrs	r1, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6852      	ldr	r2, [r2, #4]
 800699c:	3a01      	subs	r2, #1
 800699e:	0112      	lsls	r2, r2, #4
 80069a0:	430a      	orrs	r2, r1
 80069a2:	4921      	ldr	r1, [pc, #132]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	610b      	str	r3, [r1, #16]
 80069a8:	e014      	b.n	80069d4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069aa:	4b1f      	ldr	r3, [pc, #124]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	4b21      	ldr	r3, [pc, #132]	; (8006a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6892      	ldr	r2, [r2, #8]
 80069b6:	0211      	lsls	r1, r2, #8
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6952      	ldr	r2, [r2, #20]
 80069bc:	0852      	lsrs	r2, r2, #1
 80069be:	3a01      	subs	r2, #1
 80069c0:	0652      	lsls	r2, r2, #25
 80069c2:	4311      	orrs	r1, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6852      	ldr	r2, [r2, #4]
 80069c8:	3a01      	subs	r2, #1
 80069ca:	0112      	lsls	r2, r2, #4
 80069cc:	430a      	orrs	r2, r1
 80069ce:	4916      	ldr	r1, [pc, #88]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80069d4:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e0:	f7fb fb92 	bl	8002108 <HAL_GetTick>
 80069e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069e6:	e009      	b.n	80069fc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069e8:	f7fb fb8e 	bl	8002108 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d902      	bls.n	80069fc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	73fb      	strb	r3, [r7, #15]
          break;
 80069fa:	e005      	b.n	8006a08 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ef      	beq.n	80069e8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	4904      	ldr	r1, [pc, #16]	; (8006a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	07ff800f 	.word	0x07ff800f
 8006a30:	ff9f800f 	.word	0xff9f800f
 8006a34:	f9ff800f 	.word	0xf9ff800f

08006a38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a46:	4b72      	ldr	r3, [pc, #456]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00e      	beq.n	8006a70 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006a52:	4b6f      	ldr	r3, [pc, #444]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f003 0203 	and.w	r2, r3, #3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d103      	bne.n	8006a6a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
       ||
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d142      	bne.n	8006af0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	73fb      	strb	r3, [r7, #15]
 8006a6e:	e03f      	b.n	8006af0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d018      	beq.n	8006aaa <RCCEx_PLLSAI2_Config+0x72>
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d825      	bhi.n	8006ac8 <RCCEx_PLLSAI2_Config+0x90>
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d002      	beq.n	8006a86 <RCCEx_PLLSAI2_Config+0x4e>
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d009      	beq.n	8006a98 <RCCEx_PLLSAI2_Config+0x60>
 8006a84:	e020      	b.n	8006ac8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a86:	4b62      	ldr	r3, [pc, #392]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d11d      	bne.n	8006ace <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a96:	e01a      	b.n	8006ace <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a98:	4b5d      	ldr	r3, [pc, #372]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d116      	bne.n	8006ad2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006aa8:	e013      	b.n	8006ad2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006aaa:	4b59      	ldr	r3, [pc, #356]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10f      	bne.n	8006ad6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ab6:	4b56      	ldr	r3, [pc, #344]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ac6:	e006      	b.n	8006ad6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	73fb      	strb	r3, [r7, #15]
      break;
 8006acc:	e004      	b.n	8006ad8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ace:	bf00      	nop
 8006ad0:	e002      	b.n	8006ad8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ad2:	bf00      	nop
 8006ad4:	e000      	b.n	8006ad8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ad6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d108      	bne.n	8006af0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006ade:	4b4c      	ldr	r3, [pc, #304]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f023 0203 	bic.w	r2, r3, #3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4949      	ldr	r1, [pc, #292]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f040 8086 	bne.w	8006c04 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006af8:	4b45      	ldr	r3, [pc, #276]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a44      	ldr	r2, [pc, #272]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b04:	f7fb fb00 	bl	8002108 <HAL_GetTick>
 8006b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b0a:	e009      	b.n	8006b20 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b0c:	f7fb fafc 	bl	8002108 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d902      	bls.n	8006b20 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b1e:	e005      	b.n	8006b2c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b20:	4b3b      	ldr	r3, [pc, #236]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1ef      	bne.n	8006b0c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d168      	bne.n	8006c04 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d113      	bne.n	8006b60 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b38:	4b35      	ldr	r3, [pc, #212]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b3a:	695a      	ldr	r2, [r3, #20]
 8006b3c:	4b35      	ldr	r3, [pc, #212]	; (8006c14 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6892      	ldr	r2, [r2, #8]
 8006b44:	0211      	lsls	r1, r2, #8
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	68d2      	ldr	r2, [r2, #12]
 8006b4a:	06d2      	lsls	r2, r2, #27
 8006b4c:	4311      	orrs	r1, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6852      	ldr	r2, [r2, #4]
 8006b52:	3a01      	subs	r2, #1
 8006b54:	0112      	lsls	r2, r2, #4
 8006b56:	430a      	orrs	r2, r1
 8006b58:	492d      	ldr	r1, [pc, #180]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	614b      	str	r3, [r1, #20]
 8006b5e:	e02d      	b.n	8006bbc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d115      	bne.n	8006b92 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b66:	4b2a      	ldr	r3, [pc, #168]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	4b2b      	ldr	r3, [pc, #172]	; (8006c18 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6892      	ldr	r2, [r2, #8]
 8006b72:	0211      	lsls	r1, r2, #8
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6912      	ldr	r2, [r2, #16]
 8006b78:	0852      	lsrs	r2, r2, #1
 8006b7a:	3a01      	subs	r2, #1
 8006b7c:	0552      	lsls	r2, r2, #21
 8006b7e:	4311      	orrs	r1, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6852      	ldr	r2, [r2, #4]
 8006b84:	3a01      	subs	r2, #1
 8006b86:	0112      	lsls	r2, r2, #4
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	4921      	ldr	r1, [pc, #132]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	614b      	str	r3, [r1, #20]
 8006b90:	e014      	b.n	8006bbc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b92:	4b1f      	ldr	r3, [pc, #124]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b94:	695a      	ldr	r2, [r3, #20]
 8006b96:	4b21      	ldr	r3, [pc, #132]	; (8006c1c <RCCEx_PLLSAI2_Config+0x1e4>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6892      	ldr	r2, [r2, #8]
 8006b9e:	0211      	lsls	r1, r2, #8
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6952      	ldr	r2, [r2, #20]
 8006ba4:	0852      	lsrs	r2, r2, #1
 8006ba6:	3a01      	subs	r2, #1
 8006ba8:	0652      	lsls	r2, r2, #25
 8006baa:	4311      	orrs	r1, r2
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6852      	ldr	r2, [r2, #4]
 8006bb0:	3a01      	subs	r2, #1
 8006bb2:	0112      	lsls	r2, r2, #4
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	4916      	ldr	r1, [pc, #88]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006bbc:	4b14      	ldr	r3, [pc, #80]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a13      	ldr	r2, [pc, #76]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc8:	f7fb fa9e 	bl	8002108 <HAL_GetTick>
 8006bcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006bce:	e009      	b.n	8006be4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bd0:	f7fb fa9a 	bl	8002108 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d902      	bls.n	8006be4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	73fb      	strb	r3, [r7, #15]
          break;
 8006be2:	e005      	b.n	8006bf0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006be4:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0ef      	beq.n	8006bd0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bf8:	695a      	ldr	r2, [r3, #20]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	4904      	ldr	r1, [pc, #16]	; (8006c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40021000 	.word	0x40021000
 8006c14:	07ff800f 	.word	0x07ff800f
 8006c18:	ff9f800f 	.word	0xff9f800f
 8006c1c:	f9ff800f 	.word	0xf9ff800f

08006c20 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b089      	sub	sp, #36	; 0x24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c3c:	d10b      	bne.n	8006c56 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006c3e:	4b7e      	ldr	r3, [pc, #504]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006c40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c44:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006c48:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2b60      	cmp	r3, #96	; 0x60
 8006c4e:	d112      	bne.n	8006c76 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006c50:	4b7a      	ldr	r3, [pc, #488]	; (8006e3c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	e00f      	b.n	8006c76 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5c:	d10b      	bne.n	8006c76 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006c5e:	4b76      	ldr	r3, [pc, #472]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c68:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c70:	d101      	bne.n	8006c76 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006c72:	4b72      	ldr	r3, [pc, #456]	; (8006e3c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006c74:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f040 80d6 	bne.w	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	d003      	beq.n	8006c90 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c8e:	d13b      	bne.n	8006d08 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006c90:	4b69      	ldr	r3, [pc, #420]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c9c:	f040 80c4 	bne.w	8006e28 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006ca0:	4b65      	ldr	r3, [pc, #404]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80bd 	beq.w	8006e28 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006cae:	4b62      	ldr	r3, [pc, #392]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	3301      	adds	r3, #1
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006cc2:	4b5d      	ldr	r3, [pc, #372]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ccc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006cce:	4b5a      	ldr	r3, [pc, #360]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	0edb      	lsrs	r3, r3, #27
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006ce0:	4b55      	ldr	r3, [pc, #340]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006cec:	2311      	movs	r3, #17
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	e001      	b.n	8006cf6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006cf2:	2307      	movs	r3, #7
 8006cf4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	fb03 f202 	mul.w	r2, r3, r2
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d04:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006d06:	e08f      	b.n	8006e28 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d13a      	bne.n	8006d84 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006d0e:	4b4a      	ldr	r3, [pc, #296]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d1a:	f040 8086 	bne.w	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006d1e:	4b46      	ldr	r3, [pc, #280]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d07f      	beq.n	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006d2a:	4b43      	ldr	r3, [pc, #268]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	091b      	lsrs	r3, r3, #4
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	3301      	adds	r3, #1
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006d3e:	4b3e      	ldr	r3, [pc, #248]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	0a1b      	lsrs	r3, r3, #8
 8006d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d48:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006d4a:	4b3b      	ldr	r3, [pc, #236]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	0edb      	lsrs	r3, r3, #27
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006d5c:	4b36      	ldr	r3, [pc, #216]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006d68:	2311      	movs	r3, #17
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	e001      	b.n	8006d72 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006d6e:	2307      	movs	r3, #7
 8006d70:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	fb03 f202 	mul.w	r2, r3, r2
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	e052      	b.n	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	2b80      	cmp	r3, #128	; 0x80
 8006d88:	d003      	beq.n	8006d92 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d90:	d109      	bne.n	8006da6 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d92:	4b29      	ldr	r3, [pc, #164]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d9e:	d144      	bne.n	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006da0:	4b27      	ldr	r3, [pc, #156]	; (8006e40 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006da2:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006da4:	e041      	b.n	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d003      	beq.n	8006db4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db2:	d13a      	bne.n	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006db4:	4b20      	ldr	r3, [pc, #128]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dc0:	d133      	bne.n	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006dc2:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d02d      	beq.n	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006dce:	4b1a      	ldr	r3, [pc, #104]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	091b      	lsrs	r3, r3, #4
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	3301      	adds	r3, #1
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dec:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006dee:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	0edb      	lsrs	r3, r3, #27
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006e00:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006e0c:	2311      	movs	r3, #17
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e001      	b.n	8006e16 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006e12:	2307      	movs	r3, #7
 8006e14:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	fb03 f202 	mul.w	r2, r3, r2
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	e000      	b.n	8006e2a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006e28:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8006e2a:	69fb      	ldr	r3, [r7, #28]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3724      	adds	r7, #36	; 0x24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	001fff68 	.word	0x001fff68
 8006e40:	00f42400 	.word	0x00f42400

08006e44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08a      	sub	sp, #40	; 0x28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e078      	b.n	8006f48 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d105      	bne.n	8006e6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7fa fedb 	bl	8001c24 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2203      	movs	r2, #3
 8006e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f86a 	bl	8006f50 <HAL_SD_InitCard>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e060      	b.n	8006f48 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006e86:	f107 0308 	add.w	r3, r7, #8
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fdb5 	bl	80079fc <HAL_SD_GetCardStatus>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e055      	b.n	8006f48 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006e9c:	7e3b      	ldrb	r3, [r7, #24]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006ea2:	7e7b      	ldrb	r3, [r7, #25]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d10a      	bne.n	8006ec6 <HAL_SD_Init+0x82>
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d102      	bne.n	8006ebc <HAL_SD_Init+0x78>
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ec2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ec4:	e00b      	b.n	8006ede <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d104      	bne.n	8006ed8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ed4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ed6:	e002      	b.n	8006ede <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fe6b 	bl	8007bc0 <HAL_SD_ConfigWideBusOperation>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e029      	b.n	8006f48 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006ef4:	f7fb f908 	bl	8002108 <HAL_GetTick>
 8006ef8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006efa:	e014      	b.n	8006f26 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006efc:	f7fb f904 	bl	8002108 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f0a:	d10c      	bne.n	8006f26 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e010      	b.n	8006f48 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 ff5e 	bl	8007de8 <HAL_SD_GetCardState>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d1e4      	bne.n	8006efc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3728      	adds	r7, #40	; 0x28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f50:	b5b0      	push	{r4, r5, r7, lr}
 8006f52:	b08e      	sub	sp, #56	; 0x38
 8006f54:	af04      	add	r7, sp, #16
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006f64:	2300      	movs	r3, #0
 8006f66:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006f68:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006f6c:	f7fe fd50 	bl	8005a10 <HAL_RCCEx_GetPeriphCLKFreq>
 8006f70:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d109      	bne.n	8006f8c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f86:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e079      	b.n	8007080 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	4a3d      	ldr	r2, [pc, #244]	; (8007088 <HAL_SD_InitCard+0x138>)
 8006f92:	fba2 2303 	umull	r2, r3, r2, r3
 8006f96:	091b      	lsrs	r3, r3, #4
 8006f98:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d107      	bne.n	8006fb8 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0210 	orr.w	r2, r2, #16
 8006fb6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681d      	ldr	r5, [r3, #0]
 8006fbc:	466c      	mov	r4, sp
 8006fbe:	f107 0314 	add.w	r3, r7, #20
 8006fc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006fc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006fca:	f107 0308 	add.w	r3, r7, #8
 8006fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f001 fefd 	bl	8008dd0 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 ff40 	bl	8008e60 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006fec:	4a27      	ldr	r2, [pc, #156]	; (800708c <HAL_SD_InitCard+0x13c>)
 8006fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fb f892 	bl	8002120 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 ffd3 	bl	8007fa8 <SD_PowerON>
 8007002:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00b      	beq.n	8007022 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	431a      	orrs	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e02e      	b.n	8007080 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 ff00 	bl	8007e28 <SD_InitCard>
 8007028:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00b      	beq.n	8007048 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e01b      	b.n	8007080 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007050:	4618      	mov	r0, r3
 8007052:	f001 ff9b 	bl	8008f8c <SDMMC_CmdBlockLength>
 8007056:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00f      	beq.n	800707e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a0b      	ldr	r2, [pc, #44]	; (8007090 <HAL_SD_InitCard+0x140>)
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3728      	adds	r7, #40	; 0x28
 8007084:	46bd      	mov	sp, r7
 8007086:	bdb0      	pop	{r4, r5, r7, pc}
 8007088:	014f8b59 	.word	0x014f8b59
 800708c:	00012110 	.word	0x00012110
 8007090:	1fe00fff 	.word	0x1fe00fff

08007094 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b08c      	sub	sp, #48	; 0x30
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d107      	bne.n	80070bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e08d      	b.n	80071d8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	f040 8086 	bne.w	80071d6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80070d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	441a      	add	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	429a      	cmp	r2, r3
 80070dc:	d907      	bls.n	80070ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e074      	b.n	80071d8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2203      	movs	r2, #3
 80070f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	025a      	lsls	r2, r3, #9
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d002      	beq.n	800711a <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	025b      	lsls	r3, r3, #9
 8007118:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800711a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800711e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	025b      	lsls	r3, r3, #9
 8007124:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007126:	2390      	movs	r3, #144	; 0x90
 8007128:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800712a:	2302      	movs	r3, #2
 800712c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800712e:	2300      	movs	r3, #0
 8007130:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8007132:	2300      	movs	r3, #0
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f107 0210 	add.w	r2, r7, #16
 800713e:	4611      	mov	r1, r2
 8007140:	4618      	mov	r0, r3
 8007142:	f001 fef7 	bl	8008f34 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007154:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2201      	movs	r2, #1
 8007164:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d90a      	bls.n	8007182 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2282      	movs	r2, #130	; 0x82
 8007170:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007178:	4618      	mov	r0, r3
 800717a:	f001 ff4d 	bl	8009018 <SDMMC_CmdReadMultiBlock>
 800717e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007180:	e009      	b.n	8007196 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2281      	movs	r2, #129	; 0x81
 8007186:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800718e:	4618      	mov	r0, r3
 8007190:	f001 ff1f 	bl	8008fd2 <SDMMC_CmdReadSingleBlock>
 8007194:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d012      	beq.n	80071c2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a0f      	ldr	r2, [pc, #60]	; (80071e0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	431a      	orrs	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e00a      	b.n	80071d8 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80071d0:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	e000      	b.n	80071d8 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80071d6:	2302      	movs	r3, #2
  }
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3730      	adds	r7, #48	; 0x30
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	1fe00fff 	.word	0x1fe00fff

080071e4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08c      	sub	sp, #48	; 0x30
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d107      	bne.n	800720c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e08d      	b.n	8007328 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	f040 8086 	bne.w	8007326 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	429a      	cmp	r2, r3
 800722c:	d907      	bls.n	800723e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e074      	b.n	8007328 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2203      	movs	r2, #3
 8007242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2200      	movs	r2, #0
 800724c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	025a      	lsls	r2, r3, #9
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007260:	2b01      	cmp	r3, #1
 8007262:	d002      	beq.n	800726a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	025b      	lsls	r3, r3, #9
 8007268:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800726a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800726e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	025b      	lsls	r3, r3, #9
 8007274:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007276:	2390      	movs	r3, #144	; 0x90
 8007278:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800727e:	2300      	movs	r3, #0
 8007280:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007282:	2300      	movs	r3, #0
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f107 0210 	add.w	r2, r7, #16
 800728e:	4611      	mov	r1, r2
 8007290:	4618      	mov	r0, r3
 8007292:	f001 fe4f 	bl	8008f34 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072a4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2201      	movs	r2, #1
 80072b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d90a      	bls.n	80072d2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	22a0      	movs	r2, #160	; 0xa0
 80072c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 feeb 	bl	80090a4 <SDMMC_CmdWriteMultiBlock>
 80072ce:	62f8      	str	r0, [r7, #44]	; 0x2c
 80072d0:	e009      	b.n	80072e6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2290      	movs	r2, #144	; 0x90
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 febd 	bl	800905e <SDMMC_CmdWriteSingleBlock>
 80072e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d012      	beq.n	8007312 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a0f      	ldr	r2, [pc, #60]	; (8007330 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80072f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	431a      	orrs	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e00a      	b.n	8007328 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007320:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	e000      	b.n	8007328 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007326:	2302      	movs	r3, #2
  }
}
 8007328:	4618      	mov	r0, r3
 800732a:	3730      	adds	r7, #48	; 0x30
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	1fe00fff 	.word	0x1fe00fff

08007334 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_SD_IRQHandler+0x2e>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f001 f98e 	bl	800867c <SD_Read_IT>
 8007360:	e199      	b.n	8007696 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80ae 	beq.w	80074ce <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800737a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800738a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800738e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800739e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ae:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f003 0308 	and.w	r3, r3, #8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d038      	beq.n	800742c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d104      	bne.n	80073ce <HAL_SD_IRQHandler+0x9a>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d011      	beq.n	80073f2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 fe8a 	bl	80090ec <SDMMC_CmdStopTransfer>
 80073d8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d008      	beq.n	80073f2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f957 	bl	80076a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a90      	ldr	r2, [pc, #576]	; (8007638 <HAL_SD_IRQHandler+0x304>)
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d104      	bne.n	800741c <HAL_SD_IRQHandler+0xe8>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f002 fb59 	bl	8009ad4 <HAL_SD_RxCpltCallback>
 8007422:	e138      	b.n	8007696 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f002 fb4b 	bl	8009ac0 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800742a:	e134      	b.n	8007696 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 812f 	beq.w	8007696 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2200      	movs	r2, #0
 800743e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2200      	movs	r2, #0
 8007446:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2200      	movs	r2, #0
 800744e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d104      	bne.n	8007464 <HAL_SD_IRQHandler+0x130>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f003 0320 	and.w	r3, r3, #32
 8007460:	2b00      	cmp	r3, #0
 8007462:	d011      	beq.n	8007488 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4618      	mov	r0, r3
 800746a:	f001 fe3f 	bl	80090ec <SDMMC_CmdStopTransfer>
 800746e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d008      	beq.n	8007488 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f90c 	bl	80076a0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f003 0310 	and.w	r3, r3, #16
 800749c:	2b00      	cmp	r3, #0
 800749e:	d104      	bne.n	80074aa <HAL_SD_IRQHandler+0x176>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f002 fb08 	bl	8009ac0 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <HAL_SD_IRQHandler+0x192>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 80e8 	beq.w	8007696 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f002 fb04 	bl	8009ad4 <HAL_SD_RxCpltCallback>
}
 80074cc:	e0e3      	b.n	8007696 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <HAL_SD_IRQHandler+0x1ba>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 f919 	bl	800871e <SD_Write_IT>
 80074ec:	e0d3      	b.n	8007696 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 809f 	beq.w	800763c <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	f043 0202 	orr.w	r2, r3, #2
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	f043 0208 	orr.w	r2, r3, #8
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007538:	f003 0320 	and.w	r3, r3, #32
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	f043 0220 	orr.w	r2, r3, #32
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	f043 0210 	orr.w	r2, r3, #16
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a33      	ldr	r2, [pc, #204]	; (8007638 <HAL_SD_IRQHandler+0x304>)
 800756c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800757c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68da      	ldr	r2, [r3, #12]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800758c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800759c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075ac:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fd9a 	bl	80090ec <SDMMC_CmdStopTransfer>
 80075b8:	4602      	mov	r2, r0
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075d2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075dc:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00a      	beq.n	80075fe <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f852 	bl	80076a0 <HAL_SD_ErrorCallback>
}
 80075fc:	e04b      	b.n	8007696 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007604:	2b00      	cmp	r3, #0
 8007606:	d046      	beq.n	8007696 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760c:	2b00      	cmp	r3, #0
 800760e:	d042      	beq.n	8007696 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800761e:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2200      	movs	r2, #0
 8007626:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f835 	bl	80076a0 <HAL_SD_ErrorCallback>
}
 8007636:	e02e      	b.n	8007696 <HAL_SD_IRQHandler+0x362>
 8007638:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d025      	beq.n	8007696 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10c      	bne.n	800767c <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f8d4 	bl	800881a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8007672:	e010      	b.n	8007696 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 f8bc 	bl	80087f2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800767a:	e00c      	b.n	8007696 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 f8bd 	bl	8008806 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800768c:	e003      	b.n	8007696 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 f8a5 	bl	80087de <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8007694:	e7ff      	b.n	8007696 <HAL_SD_IRQHandler+0x362>
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop

080076a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076c2:	0f9b      	lsrs	r3, r3, #30
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ce:	0e9b      	lsrs	r3, r3, #26
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 030f 	and.w	r3, r3, #15
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e0:	0e1b      	lsrs	r3, r3, #24
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076f2:	0c1b      	lsrs	r3, r3, #16
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076fe:	0a1b      	lsrs	r3, r3, #8
 8007700:	b2da      	uxtb	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770a:	b2da      	uxtb	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007714:	0d1b      	lsrs	r3, r3, #20
 8007716:	b29a      	uxth	r2, r3
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007720:	0c1b      	lsrs	r3, r3, #16
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 030f 	and.w	r3, r3, #15
 8007728:	b2da      	uxtb	r2, r3
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007732:	0bdb      	lsrs	r3, r3, #15
 8007734:	b2db      	uxtb	r3, r3
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	b2da      	uxtb	r2, r3
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007744:	0b9b      	lsrs	r3, r3, #14
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	b2da      	uxtb	r2, r3
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007756:	0b5b      	lsrs	r3, r3, #13
 8007758:	b2db      	uxtb	r3, r3
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	b2da      	uxtb	r2, r3
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007768:	0b1b      	lsrs	r3, r3, #12
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	b2da      	uxtb	r2, r3
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2200      	movs	r2, #0
 800777a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007780:	2b00      	cmp	r3, #0
 8007782:	d163      	bne.n	800784c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007788:	009a      	lsls	r2, r3, #2
 800778a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800778e:	4013      	ands	r3, r2
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007794:	0f92      	lsrs	r2, r2, #30
 8007796:	431a      	orrs	r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077a0:	0edb      	lsrs	r3, r3, #27
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f003 0307 	and.w	r3, r3, #7
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077b2:	0e1b      	lsrs	r3, r3, #24
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c4:	0d5b      	lsrs	r3, r3, #21
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077d6:	0c9b      	lsrs	r3, r3, #18
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	f003 0307 	and.w	r3, r3, #7
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077e8:	0bdb      	lsrs	r3, r3, #15
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	7e1b      	ldrb	r3, [r3, #24]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f003 0307 	and.w	r3, r3, #7
 800780a:	3302      	adds	r3, #2
 800780c:	2201      	movs	r2, #1
 800780e:	fa02 f303 	lsl.w	r3, r2, r3
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007816:	fb03 f202 	mul.w	r2, r3, r2
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	7a1b      	ldrb	r3, [r3, #8]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	2201      	movs	r2, #1
 800782a:	409a      	lsls	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007838:	0a52      	lsrs	r2, r2, #9
 800783a:	fb03 f202 	mul.w	r2, r3, r2
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007848:	659a      	str	r2, [r3, #88]	; 0x58
 800784a:	e031      	b.n	80078b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007850:	2b01      	cmp	r3, #1
 8007852:	d11d      	bne.n	8007890 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007858:	041b      	lsls	r3, r3, #16
 800785a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007862:	0c1b      	lsrs	r3, r3, #16
 8007864:	431a      	orrs	r2, r3
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	3301      	adds	r3, #1
 8007870:	029a      	lsls	r2, r3, #10
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007884:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	659a      	str	r2, [r3, #88]	; 0x58
 800788e:	e00f      	b.n	80078b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a58      	ldr	r2, [pc, #352]	; (80079f8 <HAL_SD_GetCardCSD+0x344>)
 8007896:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e09d      	b.n	80079ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b4:	0b9b      	lsrs	r3, r3, #14
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078c6:	09db      	lsrs	r3, r3, #7
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e8:	0fdb      	lsrs	r3, r3, #31
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f4:	0f5b      	lsrs	r3, r3, #29
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0303 	and.w	r3, r3, #3
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007906:	0e9b      	lsrs	r3, r3, #26
 8007908:	b2db      	uxtb	r3, r3
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	b2da      	uxtb	r2, r3
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007918:	0d9b      	lsrs	r3, r3, #22
 800791a:	b2db      	uxtb	r3, r3
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	b2da      	uxtb	r2, r3
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792a:	0d5b      	lsrs	r3, r3, #21
 800792c:	b2db      	uxtb	r3, r3
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	b2da      	uxtb	r2, r3
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007946:	0c1b      	lsrs	r3, r3, #16
 8007948:	b2db      	uxtb	r3, r3
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	b2da      	uxtb	r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800795a:	0bdb      	lsrs	r3, r3, #15
 800795c:	b2db      	uxtb	r3, r3
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	b2da      	uxtb	r2, r3
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800796e:	0b9b      	lsrs	r3, r3, #14
 8007970:	b2db      	uxtb	r3, r3
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	b2da      	uxtb	r2, r3
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007982:	0b5b      	lsrs	r3, r3, #13
 8007984:	b2db      	uxtb	r3, r3
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	b2da      	uxtb	r2, r3
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007996:	0b1b      	lsrs	r3, r3, #12
 8007998:	b2db      	uxtb	r3, r3
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079aa:	0a9b      	lsrs	r3, r3, #10
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	f003 0303 	and.w	r3, r3, #3
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079be:	0a1b      	lsrs	r3, r3, #8
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d2:	085b      	lsrs	r3, r3, #1
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	1fe00fff 	.word	0x1fe00fff

080079fc <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b094      	sub	sp, #80	; 0x50
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fbd4 	bl	80081c0 <SD_SendSDStatus>
 8007a18:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d011      	beq.n	8007a44 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a4f      	ldr	r2, [pc, #316]	; (8007b64 <HAL_SD_GetCardStatus+0x168>)
 8007a26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007a42:	e070      	b.n	8007b26 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	099b      	lsrs	r3, r3, #6
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	095b      	lsrs	r3, r3, #5
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	0a1b      	lsrs	r3, r3, #8
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	0e1b      	lsrs	r3, r3, #24
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	4313      	orrs	r3, r2
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	061a      	lsls	r2, r3, #24
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a8a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	0a1b      	lsrs	r3, r3, #8
 8007a90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007a94:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	0e1b      	lsrs	r3, r3, #24
 8007a9a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	0a1b      	lsrs	r3, r3, #8
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	0d1b      	lsrs	r3, r3, #20
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 030f 	and.w	r3, r3, #15
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	0c1b      	lsrs	r3, r3, #16
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	0a9b      	lsrs	r3, r3, #10
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	0a1b      	lsrs	r3, r3, #8
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	f003 0303 	and.w	r3, r3, #3
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	091b      	lsrs	r3, r3, #4
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	f003 030f 	and.w	r3, r3, #15
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	0e1b      	lsrs	r3, r3, #24
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f001 fa2c 	bl	8008f8c <SDMMC_CmdBlockLength>
 8007b34:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00d      	beq.n	8007b58 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a08      	ldr	r2, [pc, #32]	; (8007b64 <HAL_SD_GetCardStatus+0x168>)
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007b58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3750      	adds	r7, #80	; 0x50
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	1fe00fff 	.word	0x1fe00fff

08007b68 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007bc0:	b5b0      	push	{r4, r5, r7, lr}
 8007bc2:	b090      	sub	sp, #64	; 0x40
 8007bc4:	af04      	add	r7, sp, #16
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2203      	movs	r2, #3
 8007bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d02e      	beq.n	8007c3e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be6:	d106      	bne.n	8007bf6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8007bf4:	e029      	b.n	8007c4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bfc:	d10a      	bne.n	8007c14 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fbd6 	bl	80083b0 <SD_WideBus_Enable>
 8007c04:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	639a      	str	r2, [r3, #56]	; 0x38
 8007c12:	e01a      	b.n	8007c4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10a      	bne.n	8007c30 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fc13 	bl	8008446 <SD_WideBus_Disable>
 8007c20:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8007c2e:	e00c      	b.n	8007c4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8007c3c:	e005      	b.n	8007c4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d007      	beq.n	8007c62 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a60      	ldr	r2, [pc, #384]	; (8007dd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007c58:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007c60:	e097      	b.n	8007d92 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007c62:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007c66:	f7fd fed3 	bl	8005a10 <HAL_RCCEx_GetPeriphCLKFreq>
 8007c6a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 8086 	beq.w	8007d80 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695a      	ldr	r2, [r3, #20]
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	4952      	ldr	r1, [pc, #328]	; (8007ddc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007c92:	fba1 1303 	umull	r1, r3, r1, r3
 8007c96:	0e1b      	lsrs	r3, r3, #24
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d303      	bcc.n	8007ca4 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	61fb      	str	r3, [r7, #28]
 8007ca2:	e05a      	b.n	8007d5a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cac:	d103      	bne.n	8007cb6 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	61fb      	str	r3, [r7, #28]
 8007cb4:	e051      	b.n	8007d5a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cbe:	d126      	bne.n	8007d0e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10e      	bne.n	8007ce6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	4a45      	ldr	r2, [pc, #276]	; (8007de0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d906      	bls.n	8007cde <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	4a42      	ldr	r2, [pc, #264]	; (8007ddc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd8:	0e5b      	lsrs	r3, r3, #25
 8007cda:	61fb      	str	r3, [r7, #28]
 8007cdc:	e03d      	b.n	8007d5a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	e039      	b.n	8007d5a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf2:	4a3b      	ldr	r2, [pc, #236]	; (8007de0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d906      	bls.n	8007d06 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	4a38      	ldr	r2, [pc, #224]	; (8007ddc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007d00:	0e5b      	lsrs	r3, r3, #25
 8007d02:	61fb      	str	r3, [r7, #28]
 8007d04:	e029      	b.n	8007d5a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	e025      	b.n	8007d5a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10e      	bne.n	8007d34 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	4a32      	ldr	r2, [pc, #200]	; (8007de4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d906      	bls.n	8007d2c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	4a2e      	ldr	r2, [pc, #184]	; (8007ddc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007d22:	fba2 2303 	umull	r2, r3, r2, r3
 8007d26:	0e1b      	lsrs	r3, r3, #24
 8007d28:	61fb      	str	r3, [r7, #28]
 8007d2a:	e016      	b.n	8007d5a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	e012      	b.n	8007d5a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d40:	4a28      	ldr	r2, [pc, #160]	; (8007de4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d906      	bls.n	8007d54 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	4a24      	ldr	r2, [pc, #144]	; (8007ddc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4e:	0e1b      	lsrs	r3, r3, #24
 8007d50:	61fb      	str	r3, [r7, #28]
 8007d52:	e002      	b.n	8007d5a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681d      	ldr	r5, [r3, #0]
 8007d64:	466c      	mov	r4, sp
 8007d66:	f107 0318 	add.w	r3, r7, #24
 8007d6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d72:	f107 030c 	add.w	r3, r7, #12
 8007d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f001 f829 	bl	8008dd0 <SDMMC_Init>
 8007d7e:	e008      	b.n	8007d92 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f001 f8f6 	bl	8008f8c <SDMMC_CmdBlockLength>
 8007da0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00c      	beq.n	8007dc2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a0a      	ldr	r2, [pc, #40]	; (8007dd8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	431a      	orrs	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3730      	adds	r7, #48	; 0x30
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	1fe00fff 	.word	0x1fe00fff
 8007ddc:	55e63b89 	.word	0x55e63b89
 8007de0:	02faf080 	.word	0x02faf080
 8007de4:	017d7840 	.word	0x017d7840

08007de8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007df4:	f107 030c 	add.w	r3, r7, #12
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fab0 	bl	8008360 <SD_SendStatus>
 8007e00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	0a5b      	lsrs	r3, r3, #9
 8007e18:	f003 030f 	and.w	r3, r3, #15
 8007e1c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007e1e:	693b      	ldr	r3, [r7, #16]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e28:	b5b0      	push	{r4, r5, r7, lr}
 8007e2a:	b090      	sub	sp, #64	; 0x40
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007e30:	2301      	movs	r3, #1
 8007e32:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f001 f823 	bl	8008e84 <SDMMC_GetPowerState>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007e48:	e0a9      	b.n	8007f9e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d02e      	beq.n	8007eb0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 fa68 	bl	800932c <SDMMC_CmdSendCID>
 8007e5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <SD_InitCard+0x40>
    {
      return errorstate;
 8007e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e66:	e09a      	b.n	8007f9e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f001 f84d 	bl	8008f0e <SDMMC_GetResponse>
 8007e74:	4602      	mov	r2, r0
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2104      	movs	r1, #4
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 f844 	bl	8008f0e <SDMMC_GetResponse>
 8007e86:	4602      	mov	r2, r0
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2108      	movs	r1, #8
 8007e92:	4618      	mov	r0, r3
 8007e94:	f001 f83b 	bl	8008f0e <SDMMC_GetResponse>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	210c      	movs	r1, #12
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 f832 	bl	8008f0e <SDMMC_GetResponse>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d00d      	beq.n	8007ed4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f107 020e 	add.w	r2, r7, #14
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f001 fa71 	bl	80093aa <SDMMC_CmdSetRelAdd>
 8007ec8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <SD_InitCard+0xac>
    {
      return errorstate;
 8007ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed2:	e064      	b.n	8007f9e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d036      	beq.n	8007f4a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007edc:	89fb      	ldrh	r3, [r7, #14]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eec:	041b      	lsls	r3, r3, #16
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	f001 fa3a 	bl	800936a <SDMMC_CmdSendCSD>
 8007ef6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <SD_InitCard+0xda>
    {
      return errorstate;
 8007efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f00:	e04d      	b.n	8007f9e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2100      	movs	r1, #0
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 f800 	bl	8008f0e <SDMMC_GetResponse>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2104      	movs	r1, #4
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fff7 	bl	8008f0e <SDMMC_GetResponse>
 8007f20:	4602      	mov	r2, r0
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2108      	movs	r1, #8
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 ffee 	bl	8008f0e <SDMMC_GetResponse>
 8007f32:	4602      	mov	r2, r0
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	210c      	movs	r1, #12
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 ffe5 	bl	8008f0e <SDMMC_GetResponse>
 8007f44:	4602      	mov	r2, r0
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2104      	movs	r1, #4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 ffdc 	bl	8008f0e <SDMMC_GetResponse>
 8007f56:	4603      	mov	r3, r0
 8007f58:	0d1a      	lsrs	r2, r3, #20
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007f5e:	f107 0310 	add.w	r3, r7, #16
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff fba5 	bl	80076b4 <HAL_SD_GetCardCSD>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f74:	e013      	b.n	8007f9e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6819      	ldr	r1, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7e:	041b      	lsls	r3, r3, #16
 8007f80:	2200      	movs	r2, #0
 8007f82:	461c      	mov	r4, r3
 8007f84:	4615      	mov	r5, r2
 8007f86:	4622      	mov	r2, r4
 8007f88:	462b      	mov	r3, r5
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	f001 f8e4 	bl	8009158 <SDMMC_CmdSelDesel>
 8007f90:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <SD_InitCard+0x174>
  {
    return errorstate;
 8007f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9a:	e000      	b.n	8007f9e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3740      	adds	r7, #64	; 0x40
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007fa8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61fb      	str	r3, [r7, #28]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8007fbc:	f7fa f8a4 	bl	8002108 <HAL_GetTick>
 8007fc0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 f8ea 	bl	80091a0 <SDMMC_CmdGoIdleState>
 8007fcc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <SD_PowerON+0x30>
  {
    return errorstate;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	e0ed      	b.n	80081b4 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f001 f8fd 	bl	80091dc <SDMMC_CmdOperCond>
 8007fe2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00d      	beq.n	8008006 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 f8d3 	bl	80091a0 <SDMMC_CmdGoIdleState>
 8007ffa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <SD_PowerON+0x64>
    {
      return errorstate;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	e0d6      	b.n	80081b4 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	2b01      	cmp	r3, #1
 8008012:	d137      	bne.n	8008084 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2100      	movs	r1, #0
 800801a:	4618      	mov	r0, r3
 800801c:	f001 f8fe 	bl	800921c <SDMMC_CmdAppCommand>
 8008020:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d02d      	beq.n	8008084 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008028:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800802c:	e0c2      	b.n	80081b4 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2100      	movs	r1, #0
 8008034:	4618      	mov	r0, r3
 8008036:	f001 f8f1 	bl	800921c <SDMMC_CmdAppCommand>
 800803a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <SD_PowerON+0x9e>
    {
      return errorstate;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	e0b6      	b.n	80081b4 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	495c      	ldr	r1, [pc, #368]	; (80081bc <SD_PowerON+0x214>)
 800804c:	4618      	mov	r0, r3
 800804e:	f001 f908 	bl	8009262 <SDMMC_CmdAppOperCommand>
 8008052:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800805a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800805e:	e0a9      	b.n	80081b4 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2100      	movs	r1, #0
 8008066:	4618      	mov	r0, r3
 8008068:	f000 ff51 	bl	8008f0e <SDMMC_GetResponse>
 800806c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	0fdb      	lsrs	r3, r3, #31
 8008072:	2b01      	cmp	r3, #1
 8008074:	d101      	bne.n	800807a <SD_PowerON+0xd2>
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <SD_PowerON+0xd4>
 800807a:	2300      	movs	r3, #0
 800807c:	61bb      	str	r3, [r7, #24]

    count++;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800808a:	4293      	cmp	r3, r2
 800808c:	d802      	bhi.n	8008094 <SD_PowerON+0xec>
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0cc      	beq.n	800802e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800809a:	4293      	cmp	r3, r2
 800809c:	d902      	bls.n	80080a4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800809e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080a2:	e087      	b.n	80081b4 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d07e      	beq.n	80081ac <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d17a      	bne.n	80081b2 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d075      	beq.n	80081b2 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080cc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f042 0208 	orr.w	r2, r2, #8
 80080dc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 f9c8 	bl	8009478 <SDMMC_CmdVoltageSwitch>
 80080e8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00c      	beq.n	800810a <SD_PowerON+0x162>
        {
          return errorstate;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	e05f      	b.n	80081b4 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80080f4:	f7fa f808 	bl	8002108 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008102:	d102      	bne.n	800810a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008108:	e054      	b.n	80081b4 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008118:	d1ec      	bne.n	80080f4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008122:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800812e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008132:	d002      	beq.n	800813a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008134:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008138:	e03c      	b.n	80081b4 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800813a:	2001      	movs	r0, #1
 800813c:	f000 fb44 	bl	80087c8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0204 	orr.w	r2, r2, #4
 800814e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008150:	e00a      	b.n	8008168 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008152:	f7f9 ffd9 	bl	8002108 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008160:	d102      	bne.n	8008168 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008162:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008166:	e025      	b.n	80081b4 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008176:	d1ec      	bne.n	8008152 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008180:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800818c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008190:	d102      	bne.n	8008198 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008192:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008196:	e00d      	b.n	80081b4 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2213      	movs	r2, #19
 800819e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081a8:	639a      	str	r2, [r3, #56]	; 0x38
 80081aa:	e002      	b.n	80081b2 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3720      	adds	r7, #32
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	c1100000 	.word	0xc1100000

080081c0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08c      	sub	sp, #48	; 0x30
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081ca:	f7f9 ff9d 	bl	8002108 <HAL_GetTick>
 80081ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2100      	movs	r1, #0
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fe97 	bl	8008f0e <SDMMC_GetResponse>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081ea:	d102      	bne.n	80081f2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80081ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081f0:	e0b0      	b.n	8008354 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2140      	movs	r1, #64	; 0x40
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fec7 	bl	8008f8c <SDMMC_CmdBlockLength>
 80081fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	e0a0      	b.n	8008354 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800821a:	041b      	lsls	r3, r3, #16
 800821c:	4619      	mov	r1, r3
 800821e:	4610      	mov	r0, r2
 8008220:	f000 fffc 	bl	800921c <SDMMC_CmdAppCommand>
 8008224:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	e08d      	b.n	8008354 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800823c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800823e:	2340      	movs	r3, #64	; 0x40
 8008240:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008242:	2360      	movs	r3, #96	; 0x60
 8008244:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008246:	2302      	movs	r3, #2
 8008248:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800824a:	2300      	movs	r3, #0
 800824c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800824e:	2301      	movs	r3, #1
 8008250:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f107 0208 	add.w	r2, r7, #8
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fe69 	bl	8008f34 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f001 f8e4 	bl	8009434 <SDMMC_CmdStatusRegister>
 800826c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d02b      	beq.n	80082cc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	e069      	b.n	8008354 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d013      	beq.n	80082b6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800828e:	2300      	movs	r3, #0
 8008290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008292:	e00d      	b.n	80082b0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	f000 fdc3 	bl	8008e24 <SDMMC_ReadFIFO>
 800829e:	4602      	mov	r2, r0
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	601a      	str	r2, [r3, #0]
        pData++;
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	3304      	adds	r3, #4
 80082a8:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	3301      	adds	r3, #1
 80082ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	2b07      	cmp	r3, #7
 80082b4:	d9ee      	bls.n	8008294 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082b6:	f7f9 ff27 	bl	8002108 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082c4:	d102      	bne.n	80082cc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80082c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082ca:	e043      	b.n	8008354 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0d2      	beq.n	8008280 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80082e8:	2308      	movs	r3, #8
 80082ea:	e033      	b.n	8008354 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80082fa:	2302      	movs	r3, #2
 80082fc:	e02a      	b.n	8008354 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d017      	beq.n	800833c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800830c:	2320      	movs	r3, #32
 800830e:	e021      	b.n	8008354 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4618      	mov	r0, r3
 8008316:	f000 fd85 	bl	8008e24 <SDMMC_ReadFIFO>
 800831a:	4602      	mov	r2, r0
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	601a      	str	r2, [r3, #0]
    pData++;
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	3304      	adds	r3, #4
 8008324:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008326:	f7f9 feef 	bl	8002108 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008334:	d102      	bne.n	800833c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008336:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800833a:	e00b      	b.n	8008354 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e2      	bne.n	8008310 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a03      	ldr	r2, [pc, #12]	; (800835c <SD_SendSDStatus+0x19c>)
 8008350:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3730      	adds	r7, #48	; 0x30
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	18000f3a 	.word	0x18000f3a

08008360 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008370:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008374:	e018      	b.n	80083a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800837e:	041b      	lsls	r3, r3, #16
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f001 f833 	bl	80093ee <SDMMC_CmdSendStatus>
 8008388:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	e009      	b.n	80083a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2100      	movs	r1, #0
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fdb7 	bl	8008f0e <SDMMC_GetResponse>
 80083a0:	4602      	mov	r2, r0
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	2300      	movs	r3, #0
 80083be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2100      	movs	r1, #0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fda1 	bl	8008f0e <SDMMC_GetResponse>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083d6:	d102      	bne.n	80083de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80083d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083dc:	e02f      	b.n	800843e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80083de:	f107 030c 	add.w	r3, r7, #12
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f879 	bl	80084dc <SD_FindSCR>
 80083ea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	e023      	b.n	800843e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d01c      	beq.n	800843a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008408:	041b      	lsls	r3, r3, #16
 800840a:	4619      	mov	r1, r3
 800840c:	4610      	mov	r0, r2
 800840e:	f000 ff05 	bl	800921c <SDMMC_CmdAppCommand>
 8008412:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	e00f      	b.n	800843e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2102      	movs	r1, #2
 8008424:	4618      	mov	r0, r3
 8008426:	f000 ff3c 	bl	80092a2 <SDMMC_CmdBusWidth>
 800842a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	e003      	b.n	800843e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008436:	2300      	movs	r3, #0
 8008438:	e001      	b.n	800843e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800843a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800843e:	4618      	mov	r0, r3
 8008440:	3718      	adds	r7, #24
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b086      	sub	sp, #24
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	2300      	movs	r3, #0
 8008454:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2100      	movs	r1, #0
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fd56 	bl	8008f0e <SDMMC_GetResponse>
 8008462:	4603      	mov	r3, r0
 8008464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800846c:	d102      	bne.n	8008474 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800846e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008472:	e02f      	b.n	80084d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008474:	f107 030c 	add.w	r3, r7, #12
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f82e 	bl	80084dc <SD_FindSCR>
 8008480:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	e023      	b.n	80084d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d01c      	beq.n	80084d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800849e:	041b      	lsls	r3, r3, #16
 80084a0:	4619      	mov	r1, r3
 80084a2:	4610      	mov	r0, r2
 80084a4:	f000 feba 	bl	800921c <SDMMC_CmdAppCommand>
 80084a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	e00f      	b.n	80084d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2100      	movs	r1, #0
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fef1 	bl	80092a2 <SDMMC_CmdBusWidth>
 80084c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	e003      	b.n	80084d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80084cc:	2300      	movs	r3, #0
 80084ce:	e001      	b.n	80084d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08e      	sub	sp, #56	; 0x38
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084e6:	f7f9 fe0f 	bl	8002108 <HAL_GetTick>
 80084ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80084f0:	2300      	movs	r3, #0
 80084f2:	60bb      	str	r3, [r7, #8]
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2108      	movs	r1, #8
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fd42 	bl	8008f8c <SDMMC_CmdBlockLength>
 8008508:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	e0ad      	b.n	8008670 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800851c:	041b      	lsls	r3, r3, #16
 800851e:	4619      	mov	r1, r3
 8008520:	4610      	mov	r0, r2
 8008522:	f000 fe7b 	bl	800921c <SDMMC_CmdAppCommand>
 8008526:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <SD_FindSCR+0x56>
  {
    return errorstate;
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	e09e      	b.n	8008670 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008536:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008538:	2308      	movs	r3, #8
 800853a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800853c:	2330      	movs	r3, #48	; 0x30
 800853e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008540:	2302      	movs	r3, #2
 8008542:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008544:	2300      	movs	r3, #0
 8008546:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008548:	2301      	movs	r3, #1
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f107 0210 	add.w	r2, r7, #16
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fcec 	bl	8008f34 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fec1 	bl	80092e8 <SDMMC_CmdSendSCR>
 8008566:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	2b00      	cmp	r3, #0
 800856c:	d027      	beq.n	80085be <SD_FindSCR+0xe2>
  {
    return errorstate;
 800856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008570:	e07e      	b.n	8008670 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d113      	bne.n	80085a8 <SD_FindSCR+0xcc>
 8008580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008582:	2b00      	cmp	r3, #0
 8008584:	d110      	bne.n	80085a8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fc4a 	bl	8008e24 <SDMMC_ReadFIFO>
 8008590:	4603      	mov	r3, r0
 8008592:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f000 fc43 	bl	8008e24 <SDMMC_ReadFIFO>
 800859e:	4603      	mov	r3, r0
 80085a0:	60fb      	str	r3, [r7, #12]
      index++;
 80085a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a4:	3301      	adds	r3, #1
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80085a8:	f7f9 fdae 	bl	8002108 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085b6:	d102      	bne.n	80085be <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80085b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085bc:	e058      	b.n	8008670 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085c4:	f240 532a 	movw	r3, #1322	; 0x52a
 80085c8:	4013      	ands	r3, r2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0d1      	beq.n	8008572 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d4:	f003 0308 	and.w	r3, r3, #8
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d005      	beq.n	80085e8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2208      	movs	r2, #8
 80085e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80085e4:	2308      	movs	r3, #8
 80085e6:	e043      	b.n	8008670 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d005      	beq.n	8008602 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2202      	movs	r2, #2
 80085fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80085fe:	2302      	movs	r3, #2
 8008600:	e036      	b.n	8008670 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008608:	f003 0320 	and.w	r3, r3, #32
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2220      	movs	r2, #32
 8008616:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008618:	2320      	movs	r3, #32
 800861a:	e029      	b.n	8008670 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a15      	ldr	r2, [pc, #84]	; (8008678 <SD_FindSCR+0x19c>)
 8008622:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	061a      	lsls	r2, r3, #24
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	021b      	lsls	r3, r3, #8
 800862c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008630:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	0a1b      	lsrs	r3, r3, #8
 8008636:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800863a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	0e1b      	lsrs	r3, r3, #24
 8008640:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	601a      	str	r2, [r3, #0]
    scr++;
 8008646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008648:	3304      	adds	r3, #4
 800864a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	061a      	lsls	r2, r3, #24
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008658:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	0a1b      	lsrs	r3, r3, #8
 800865e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008662:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	0e1b      	lsrs	r3, r3, #24
 8008668:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3738      	adds	r7, #56	; 0x38
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	18000f3a 	.word	0x18000f3a

0800867c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d03f      	beq.n	8008716 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008696:	2300      	movs	r3, #0
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	e033      	b.n	8008704 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 fbbf 	bl	8008e24 <SDMMC_ReadFIFO>
 80086a6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3301      	adds	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3301      	adds	r3, #1
 80086ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	0e1b      	lsrs	r3, r3, #24
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	3301      	adds	r3, #1
 80086f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	3301      	adds	r3, #1
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2b07      	cmp	r3, #7
 8008708:	d9c8      	bls.n	800869c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008716:	bf00      	nop
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b086      	sub	sp, #24
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d043      	beq.n	80087c0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008738:	2300      	movs	r3, #0
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e037      	b.n	80087ae <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	3b01      	subs	r3, #1
 800874e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	021a      	lsls	r2, r3, #8
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	4313      	orrs	r3, r2
 800875a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3301      	adds	r3, #1
 8008760:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	3b01      	subs	r3, #1
 8008766:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	041a      	lsls	r2, r3, #16
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	4313      	orrs	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3301      	adds	r3, #1
 8008778:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	3b01      	subs	r3, #1
 800877e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	061a      	lsls	r2, r3, #24
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4313      	orrs	r3, r2
 800878a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	3b01      	subs	r3, #1
 8008796:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f107 0208 	add.w	r2, r7, #8
 80087a0:	4611      	mov	r1, r2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 fb4b 	bl	8008e3e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	3301      	adds	r3, #1
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2b07      	cmp	r3, #7
 80087b2:	d9c4      	bls.n	800873e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80087c0:	bf00      	nop
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e049      	b.n	80088d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d106      	bne.n	800885a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f841 	bl	80088dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2202      	movs	r2, #2
 800885e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	3304      	adds	r3, #4
 800886a:	4619      	mov	r1, r3
 800886c:	4610      	mov	r0, r2
 800886e:	f000 f9f7 	bl	8008c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b01      	cmp	r3, #1
 8008902:	d001      	beq.n	8008908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e04f      	b.n	80089a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2202      	movs	r2, #2
 800890c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68da      	ldr	r2, [r3, #12]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f042 0201 	orr.w	r2, r2, #1
 800891e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a23      	ldr	r2, [pc, #140]	; (80089b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d01d      	beq.n	8008966 <HAL_TIM_Base_Start_IT+0x76>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008932:	d018      	beq.n	8008966 <HAL_TIM_Base_Start_IT+0x76>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a1f      	ldr	r2, [pc, #124]	; (80089b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d013      	beq.n	8008966 <HAL_TIM_Base_Start_IT+0x76>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1e      	ldr	r2, [pc, #120]	; (80089bc <HAL_TIM_Base_Start_IT+0xcc>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00e      	beq.n	8008966 <HAL_TIM_Base_Start_IT+0x76>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a1c      	ldr	r2, [pc, #112]	; (80089c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d009      	beq.n	8008966 <HAL_TIM_Base_Start_IT+0x76>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a1b      	ldr	r2, [pc, #108]	; (80089c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d004      	beq.n	8008966 <HAL_TIM_Base_Start_IT+0x76>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a19      	ldr	r2, [pc, #100]	; (80089c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d115      	bne.n	8008992 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	4b17      	ldr	r3, [pc, #92]	; (80089cc <HAL_TIM_Base_Start_IT+0xdc>)
 800896e:	4013      	ands	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b06      	cmp	r3, #6
 8008976:	d015      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0xb4>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800897e:	d011      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f042 0201 	orr.w	r2, r2, #1
 800898e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008990:	e008      	b.n	80089a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f042 0201 	orr.w	r2, r2, #1
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	e000      	b.n	80089a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	40012c00 	.word	0x40012c00
 80089b8:	40000400 	.word	0x40000400
 80089bc:	40000800 	.word	0x40000800
 80089c0:	40000c00 	.word	0x40000c00
 80089c4:	40013400 	.word	0x40013400
 80089c8:	40014000 	.word	0x40014000
 80089cc:	00010007 	.word	0x00010007

080089d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d122      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d11b      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f06f 0202 	mvn.w	r2, #2
 80089fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	f003 0303 	and.w	r3, r3, #3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f905 	bl	8008c22 <HAL_TIM_IC_CaptureCallback>
 8008a18:	e005      	b.n	8008a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f8f7 	bl	8008c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f908 	bl	8008c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f003 0304 	and.w	r3, r3, #4
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d122      	bne.n	8008a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d11b      	bne.n	8008a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0204 	mvn.w	r2, #4
 8008a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2202      	movs	r2, #2
 8008a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f8db 	bl	8008c22 <HAL_TIM_IC_CaptureCallback>
 8008a6c:	e005      	b.n	8008a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f8cd 	bl	8008c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f8de 	bl	8008c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0308 	and.w	r3, r3, #8
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d122      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f003 0308 	and.w	r3, r3, #8
 8008a98:	2b08      	cmp	r3, #8
 8008a9a:	d11b      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0208 	mvn.w	r2, #8
 8008aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f8b1 	bl	8008c22 <HAL_TIM_IC_CaptureCallback>
 8008ac0:	e005      	b.n	8008ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f8a3 	bl	8008c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f8b4 	bl	8008c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	f003 0310 	and.w	r3, r3, #16
 8008ade:	2b10      	cmp	r3, #16
 8008ae0:	d122      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f003 0310 	and.w	r3, r3, #16
 8008aec:	2b10      	cmp	r3, #16
 8008aee:	d11b      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0210 	mvn.w	r2, #16
 8008af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2208      	movs	r2, #8
 8008afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f887 	bl	8008c22 <HAL_TIM_IC_CaptureCallback>
 8008b14:	e005      	b.n	8008b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f879 	bl	8008c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f88a 	bl	8008c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d10e      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d107      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0201 	mvn.w	r2, #1
 8008b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7f8 feae 	bl	80018b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5e:	2b80      	cmp	r3, #128	; 0x80
 8008b60:	d10e      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b6c:	2b80      	cmp	r3, #128	; 0x80
 8008b6e:	d107      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f914 	bl	8008da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b8e:	d10e      	bne.n	8008bae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9a:	2b80      	cmp	r3, #128	; 0x80
 8008b9c:	d107      	bne.n	8008bae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f907 	bl	8008dbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb8:	2b40      	cmp	r3, #64	; 0x40
 8008bba:	d10e      	bne.n	8008bda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc6:	2b40      	cmp	r3, #64	; 0x40
 8008bc8:	d107      	bne.n	8008bda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f838 	bl	8008c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	f003 0320 	and.w	r3, r3, #32
 8008be4:	2b20      	cmp	r3, #32
 8008be6:	d10e      	bne.n	8008c06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b20      	cmp	r3, #32
 8008bf4:	d107      	bne.n	8008c06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f06f 0220 	mvn.w	r2, #32
 8008bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f8c7 	bl	8008d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c06:	bf00      	nop
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c3e:	bf00      	nop
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a40      	ldr	r2, [pc, #256]	; (8008d74 <TIM_Base_SetConfig+0x114>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d013      	beq.n	8008ca0 <TIM_Base_SetConfig+0x40>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7e:	d00f      	beq.n	8008ca0 <TIM_Base_SetConfig+0x40>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a3d      	ldr	r2, [pc, #244]	; (8008d78 <TIM_Base_SetConfig+0x118>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d00b      	beq.n	8008ca0 <TIM_Base_SetConfig+0x40>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a3c      	ldr	r2, [pc, #240]	; (8008d7c <TIM_Base_SetConfig+0x11c>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d007      	beq.n	8008ca0 <TIM_Base_SetConfig+0x40>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a3b      	ldr	r2, [pc, #236]	; (8008d80 <TIM_Base_SetConfig+0x120>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d003      	beq.n	8008ca0 <TIM_Base_SetConfig+0x40>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a3a      	ldr	r2, [pc, #232]	; (8008d84 <TIM_Base_SetConfig+0x124>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d108      	bne.n	8008cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a2f      	ldr	r2, [pc, #188]	; (8008d74 <TIM_Base_SetConfig+0x114>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d01f      	beq.n	8008cfa <TIM_Base_SetConfig+0x9a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cc0:	d01b      	beq.n	8008cfa <TIM_Base_SetConfig+0x9a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a2c      	ldr	r2, [pc, #176]	; (8008d78 <TIM_Base_SetConfig+0x118>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d017      	beq.n	8008cfa <TIM_Base_SetConfig+0x9a>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a2b      	ldr	r2, [pc, #172]	; (8008d7c <TIM_Base_SetConfig+0x11c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d013      	beq.n	8008cfa <TIM_Base_SetConfig+0x9a>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a2a      	ldr	r2, [pc, #168]	; (8008d80 <TIM_Base_SetConfig+0x120>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d00f      	beq.n	8008cfa <TIM_Base_SetConfig+0x9a>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a29      	ldr	r2, [pc, #164]	; (8008d84 <TIM_Base_SetConfig+0x124>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d00b      	beq.n	8008cfa <TIM_Base_SetConfig+0x9a>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a28      	ldr	r2, [pc, #160]	; (8008d88 <TIM_Base_SetConfig+0x128>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d007      	beq.n	8008cfa <TIM_Base_SetConfig+0x9a>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a27      	ldr	r2, [pc, #156]	; (8008d8c <TIM_Base_SetConfig+0x12c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d003      	beq.n	8008cfa <TIM_Base_SetConfig+0x9a>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a26      	ldr	r2, [pc, #152]	; (8008d90 <TIM_Base_SetConfig+0x130>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d108      	bne.n	8008d0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	689a      	ldr	r2, [r3, #8]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a10      	ldr	r2, [pc, #64]	; (8008d74 <TIM_Base_SetConfig+0x114>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d00f      	beq.n	8008d58 <TIM_Base_SetConfig+0xf8>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a12      	ldr	r2, [pc, #72]	; (8008d84 <TIM_Base_SetConfig+0x124>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00b      	beq.n	8008d58 <TIM_Base_SetConfig+0xf8>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a11      	ldr	r2, [pc, #68]	; (8008d88 <TIM_Base_SetConfig+0x128>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d007      	beq.n	8008d58 <TIM_Base_SetConfig+0xf8>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a10      	ldr	r2, [pc, #64]	; (8008d8c <TIM_Base_SetConfig+0x12c>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d003      	beq.n	8008d58 <TIM_Base_SetConfig+0xf8>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a0f      	ldr	r2, [pc, #60]	; (8008d90 <TIM_Base_SetConfig+0x130>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d103      	bne.n	8008d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	691a      	ldr	r2, [r3, #16]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	615a      	str	r2, [r3, #20]
}
 8008d66:	bf00      	nop
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	40012c00 	.word	0x40012c00
 8008d78:	40000400 	.word	0x40000400
 8008d7c:	40000800 	.word	0x40000800
 8008d80:	40000c00 	.word	0x40000c00
 8008d84:	40013400 	.word	0x40013400
 8008d88:	40014000 	.word	0x40014000
 8008d8c:	40014400 	.word	0x40014400
 8008d90:	40014800 	.word	0x40014800

08008d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	f107 001c 	add.w	r0, r7, #28
 8008dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008de6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008de8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008dea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8008dee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8008df2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8008df6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <SDMMC_Init+0x50>)
 8008e04:	4013      	ands	r3, r2
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	b004      	add	sp, #16
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	ffc02c00 	.word	0xffc02c00

08008e24 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f043 0203 	orr.w	r2, r3, #3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008e74:	2002      	movs	r0, #2
 8008e76:	f7f9 f953 	bl	8002120 <HAL_Delay>

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0303 	and.w	r3, r3, #3
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ebe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008ec4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008eca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <SDMMC_SendCommand+0x50>)
 8008ed8:	4013      	ands	r3, r2
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	431a      	orrs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	fffee0c0 	.word	0xfffee0c0

08008ef4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	b2db      	uxtb	r3, r3
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b085      	sub	sp, #20
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3314      	adds	r3, #20
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	4413      	add	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f5a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008f60:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008f66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0

}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008f9a:	2310      	movs	r3, #16
 8008f9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fae:	f107 0308 	add.w	r3, r7, #8
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff ff73 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fbe:	2110      	movs	r1, #16
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fa7b 	bl	80094bc <SDMMC_GetCmdResp1>
 8008fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fc8:	69fb      	ldr	r3, [r7, #28]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3720      	adds	r7, #32
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b088      	sub	sp, #32
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008fe0:	2311      	movs	r3, #17
 8008fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fea:	2300      	movs	r3, #0
 8008fec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ff2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ff4:	f107 0308 	add.w	r3, r7, #8
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff ff50 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009000:	f241 3288 	movw	r2, #5000	; 0x1388
 8009004:	2111      	movs	r1, #17
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa58 	bl	80094bc <SDMMC_GetCmdResp1>
 800900c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800900e:	69fb      	ldr	r3, [r7, #28]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3720      	adds	r7, #32
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009026:	2312      	movs	r3, #18
 8009028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800902a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800902e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009030:	2300      	movs	r3, #0
 8009032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009038:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800903a:	f107 0308 	add.w	r3, r7, #8
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff ff2d 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009046:	f241 3288 	movw	r2, #5000	; 0x1388
 800904a:	2112      	movs	r1, #18
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fa35 	bl	80094bc <SDMMC_GetCmdResp1>
 8009052:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009054:	69fb      	ldr	r3, [r7, #28]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3720      	adds	r7, #32
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b088      	sub	sp, #32
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800906c:	2318      	movs	r3, #24
 800906e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800907a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800907e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009080:	f107 0308 	add.w	r3, r7, #8
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff ff0a 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800908c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009090:	2118      	movs	r1, #24
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa12 	bl	80094bc <SDMMC_GetCmdResp1>
 8009098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800909a:	69fb      	ldr	r3, [r7, #28]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3720      	adds	r7, #32
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80090b2:	2319      	movs	r3, #25
 80090b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090c6:	f107 0308 	add.w	r3, r7, #8
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7ff fee7 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80090d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d6:	2119      	movs	r1, #25
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f9ef 	bl	80094bc <SDMMC_GetCmdResp1>
 80090de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090e0:	69fb      	ldr	r3, [r7, #28]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3720      	adds	r7, #32
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80090f8:	230c      	movs	r3, #12
 80090fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800910a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009124:	f107 0308 	add.w	r3, r7, #8
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7ff feb8 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009130:	4a08      	ldr	r2, [pc, #32]	; (8009154 <SDMMC_CmdStopTransfer+0x68>)
 8009132:	210c      	movs	r1, #12
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f9c1 	bl	80094bc <SDMMC_GetCmdResp1>
 800913a:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009148:	69fb      	ldr	r3, [r7, #28]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	05f5e100 	.word	0x05f5e100

08009158 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08a      	sub	sp, #40	; 0x28
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009168:	2307      	movs	r3, #7
 800916a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800916c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009170:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009172:	2300      	movs	r3, #0
 8009174:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800917a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800917c:	f107 0310 	add.w	r3, r7, #16
 8009180:	4619      	mov	r1, r3
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f7ff fe8c 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009188:	f241 3288 	movw	r2, #5000	; 0x1388
 800918c:	2107      	movs	r1, #7
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 f994 	bl	80094bc <SDMMC_GetCmdResp1>
 8009194:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009198:	4618      	mov	r0, r3
 800919a:	3728      	adds	r7, #40	; 0x28
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80091b0:	2300      	movs	r3, #0
 80091b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091b4:	2300      	movs	r3, #0
 80091b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091be:	f107 0308 	add.w	r3, r7, #8
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff fe6b 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fbb8 	bl	8009940 <SDMMC_GetCmdError>
 80091d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091d2:	69fb      	ldr	r3, [r7, #28]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80091e4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80091e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80091ea:	2308      	movs	r3, #8
 80091ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091f4:	2300      	movs	r3, #0
 80091f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091fe:	f107 0308 	add.w	r3, r7, #8
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff fe4b 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fb4a 	bl	80098a4 <SDMMC_GetCmdResp7>
 8009210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009212:	69fb      	ldr	r3, [r7, #28]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3720      	adds	r7, #32
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800922a:	2337      	movs	r3, #55	; 0x37
 800922c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800922e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009234:	2300      	movs	r3, #0
 8009236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800923c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800923e:	f107 0308 	add.w	r3, r7, #8
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff fe2b 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800924a:	f241 3288 	movw	r2, #5000	; 0x1388
 800924e:	2137      	movs	r1, #55	; 0x37
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f933 	bl	80094bc <SDMMC_GetCmdResp1>
 8009256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009258:	69fb      	ldr	r3, [r7, #28]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3720      	adds	r7, #32
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b088      	sub	sp, #32
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009270:	2329      	movs	r3, #41	; 0x29
 8009272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800927a:	2300      	movs	r3, #0
 800927c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800927e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009282:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009284:	f107 0308 	add.w	r3, r7, #8
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff fe08 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fa4f 	bl	8009734 <SDMMC_GetCmdResp3>
 8009296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009298:	69fb      	ldr	r3, [r7, #28]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b088      	sub	sp, #32
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80092b0:	2306      	movs	r3, #6
 80092b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092ba:	2300      	movs	r3, #0
 80092bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092c4:	f107 0308 	add.w	r3, r7, #8
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff fde8 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80092d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d4:	2106      	movs	r1, #6
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f8f0 	bl	80094bc <SDMMC_GetCmdResp1>
 80092dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092de:	69fb      	ldr	r3, [r7, #28]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3720      	adds	r7, #32
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80092f4:	2333      	movs	r3, #51	; 0x33
 80092f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff fdc6 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009314:	f241 3288 	movw	r2, #5000	; 0x1388
 8009318:	2133      	movs	r1, #51	; 0x33
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f8ce 	bl	80094bc <SDMMC_GetCmdResp1>
 8009320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009322:	69fb      	ldr	r3, [r7, #28]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009338:	2302      	movs	r3, #2
 800933a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800933c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800934a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800934c:	f107 0308 	add.w	r3, r7, #8
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff fda4 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f9a1 	bl	80096a0 <SDMMC_GetCmdResp2>
 800935e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009360:	69fb      	ldr	r3, [r7, #28]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3720      	adds	r7, #32
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b088      	sub	sp, #32
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009378:	2309      	movs	r3, #9
 800937a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800937c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800938a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800938c:	f107 0308 	add.w	r3, r7, #8
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff fd84 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f981 	bl	80096a0 <SDMMC_GetCmdResp2>
 800939e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a0:	69fb      	ldr	r3, [r7, #28]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b088      	sub	sp, #32
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80093b8:	2303      	movs	r3, #3
 80093ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093c2:	2300      	movs	r3, #0
 80093c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093cc:	f107 0308 	add.w	r3, r7, #8
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff fd64 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	2103      	movs	r1, #3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f9e9 	bl	80097b4 <SDMMC_GetCmdResp6>
 80093e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093e4:	69fb      	ldr	r3, [r7, #28]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3720      	adds	r7, #32
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b088      	sub	sp, #32
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80093fc:	230d      	movs	r3, #13
 80093fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009406:	2300      	movs	r3, #0
 8009408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800940a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800940e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7ff fd42 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800941c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009420:	210d      	movs	r1, #13
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f84a 	bl	80094bc <SDMMC_GetCmdResp1>
 8009428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800942a:	69fb      	ldr	r3, [r7, #28]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3720      	adds	r7, #32
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009440:	230d      	movs	r3, #13
 8009442:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800944a:	2300      	movs	r3, #0
 800944c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800944e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009452:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009454:	f107 0308 	add.w	r3, r7, #8
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff fd20 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009460:	f241 3288 	movw	r2, #5000	; 0x1388
 8009464:	210d      	movs	r1, #13
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f828 	bl	80094bc <SDMMC_GetCmdResp1>
 800946c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800946e:	69fb      	ldr	r3, [r7, #28]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3720      	adds	r7, #32
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009480:	2300      	movs	r3, #0
 8009482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009484:	230b      	movs	r3, #11
 8009486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800948c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009496:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009498:	f107 0308 	add.w	r3, r7, #8
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fcfe 	bl	8008ea0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80094a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a8:	210b      	movs	r1, #11
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f806 	bl	80094bc <SDMMC_GetCmdResp1>
 80094b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094b2:	69fb      	ldr	r3, [r7, #28]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3720      	adds	r7, #32
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	460b      	mov	r3, r1
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094ca:	4b70      	ldr	r3, [pc, #448]	; (800968c <SDMMC_GetCmdResp1+0x1d0>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a70      	ldr	r2, [pc, #448]	; (8009690 <SDMMC_GetCmdResp1+0x1d4>)
 80094d0:	fba2 2303 	umull	r2, r3, r2, r3
 80094d4:	0a5a      	lsrs	r2, r3, #9
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	fb02 f303 	mul.w	r3, r2, r3
 80094dc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	1e5a      	subs	r2, r3, #1
 80094e2:	61fa      	str	r2, [r7, #28]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d102      	bne.n	80094ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094ec:	e0c9      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f2:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	4b67      	ldr	r3, [pc, #412]	; (8009694 <SDMMC_GetCmdResp1+0x1d8>)
 80094f8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0ef      	beq.n	80094de <SDMMC_GetCmdResp1+0x22>
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1ea      	bne.n	80094de <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b00      	cmp	r3, #0
 8009512:	d004      	beq.n	800951e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2204      	movs	r2, #4
 8009518:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800951a:	2304      	movs	r3, #4
 800951c:	e0b1      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d004      	beq.n	8009534 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2201      	movs	r2, #1
 800952e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009530:	2301      	movs	r3, #1
 8009532:	e0a6      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4a58      	ldr	r2, [pc, #352]	; (8009698 <SDMMC_GetCmdResp1+0x1dc>)
 8009538:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f7ff fcda 	bl	8008ef4 <SDMMC_GetCommandResponse>
 8009540:	4603      	mov	r3, r0
 8009542:	461a      	mov	r2, r3
 8009544:	7afb      	ldrb	r3, [r7, #11]
 8009546:	4293      	cmp	r3, r2
 8009548:	d001      	beq.n	800954e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800954a:	2301      	movs	r3, #1
 800954c:	e099      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800954e:	2100      	movs	r1, #0
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f7ff fcdc 	bl	8008f0e <SDMMC_GetResponse>
 8009556:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	4b50      	ldr	r3, [pc, #320]	; (800969c <SDMMC_GetCmdResp1+0x1e0>)
 800955c:	4013      	ands	r3, r2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009562:	2300      	movs	r3, #0
 8009564:	e08d      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	da02      	bge.n	8009572 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800956c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009570:	e087      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800957c:	2340      	movs	r3, #64	; 0x40
 800957e:	e080      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800958a:	2380      	movs	r3, #128	; 0x80
 800958c:	e079      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800959c:	e071      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80095a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095ac:	e069      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80095b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095bc:	e061      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80095c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095cc:	e059      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095dc:	e051      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095ec:	e049      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80095f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095fc:	e041      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800960c:	e039      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800961c:	e031      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009628:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800962c:	e029      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009638:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800963c:	e021      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009648:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800964c:	e019      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009658:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800965c:	e011      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800966c:	e009      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f003 0308 	and.w	r3, r3, #8
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009678:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800967c:	e001      	b.n	8009682 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800967e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009682:	4618      	mov	r0, r3
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	20000000 	.word	0x20000000
 8009690:	10624dd3 	.word	0x10624dd3
 8009694:	00200045 	.word	0x00200045
 8009698:	002000c5 	.word	0x002000c5
 800969c:	fdffe008 	.word	0xfdffe008

080096a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096a8:	4b1f      	ldr	r3, [pc, #124]	; (8009728 <SDMMC_GetCmdResp2+0x88>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a1f      	ldr	r2, [pc, #124]	; (800972c <SDMMC_GetCmdResp2+0x8c>)
 80096ae:	fba2 2303 	umull	r2, r3, r2, r3
 80096b2:	0a5b      	lsrs	r3, r3, #9
 80096b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096b8:	fb02 f303 	mul.w	r3, r2, r3
 80096bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	1e5a      	subs	r2, r3, #1
 80096c2:	60fa      	str	r2, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d102      	bne.n	80096ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096cc:	e026      	b.n	800971c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0ef      	beq.n	80096be <SDMMC_GetCmdResp2+0x1e>
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1ea      	bne.n	80096be <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d004      	beq.n	80096fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2204      	movs	r2, #4
 80096f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096fa:	2304      	movs	r3, #4
 80096fc:	e00e      	b.n	800971c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	d004      	beq.n	8009714 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009710:	2301      	movs	r3, #1
 8009712:	e003      	b.n	800971c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a06      	ldr	r2, [pc, #24]	; (8009730 <SDMMC_GetCmdResp2+0x90>)
 8009718:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	20000000 	.word	0x20000000
 800972c:	10624dd3 	.word	0x10624dd3
 8009730:	002000c5 	.word	0x002000c5

08009734 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800973c:	4b1a      	ldr	r3, [pc, #104]	; (80097a8 <SDMMC_GetCmdResp3+0x74>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a1a      	ldr	r2, [pc, #104]	; (80097ac <SDMMC_GetCmdResp3+0x78>)
 8009742:	fba2 2303 	umull	r2, r3, r2, r3
 8009746:	0a5b      	lsrs	r3, r3, #9
 8009748:	f241 3288 	movw	r2, #5000	; 0x1388
 800974c:	fb02 f303 	mul.w	r3, r2, r3
 8009750:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	1e5a      	subs	r2, r3, #1
 8009756:	60fa      	str	r2, [r7, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800975c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009760:	e01b      	b.n	800979a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0ef      	beq.n	8009752 <SDMMC_GetCmdResp3+0x1e>
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1ea      	bne.n	8009752 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009780:	f003 0304 	and.w	r3, r3, #4
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2204      	movs	r2, #4
 800978c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800978e:	2304      	movs	r3, #4
 8009790:	e003      	b.n	800979a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a06      	ldr	r2, [pc, #24]	; (80097b0 <SDMMC_GetCmdResp3+0x7c>)
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	20000000 	.word	0x20000000
 80097ac:	10624dd3 	.word	0x10624dd3
 80097b0:	002000c5 	.word	0x002000c5

080097b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	460b      	mov	r3, r1
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097c2:	4b35      	ldr	r3, [pc, #212]	; (8009898 <SDMMC_GetCmdResp6+0xe4>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a35      	ldr	r2, [pc, #212]	; (800989c <SDMMC_GetCmdResp6+0xe8>)
 80097c8:	fba2 2303 	umull	r2, r3, r2, r3
 80097cc:	0a5b      	lsrs	r3, r3, #9
 80097ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80097d2:	fb02 f303 	mul.w	r3, r2, r3
 80097d6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	1e5a      	subs	r2, r3, #1
 80097dc:	61fa      	str	r2, [r7, #28]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d102      	bne.n	80097e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097e6:	e052      	b.n	800988e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d0ef      	beq.n	80097d8 <SDMMC_GetCmdResp6+0x24>
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1ea      	bne.n	80097d8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009806:	f003 0304 	and.w	r3, r3, #4
 800980a:	2b00      	cmp	r3, #0
 800980c:	d004      	beq.n	8009818 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2204      	movs	r2, #4
 8009812:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009814:	2304      	movs	r3, #4
 8009816:	e03a      	b.n	800988e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981c:	f003 0301 	and.w	r3, r3, #1
 8009820:	2b00      	cmp	r3, #0
 8009822:	d004      	beq.n	800982e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2201      	movs	r2, #1
 8009828:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800982a:	2301      	movs	r3, #1
 800982c:	e02f      	b.n	800988e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f7ff fb60 	bl	8008ef4 <SDMMC_GetCommandResponse>
 8009834:	4603      	mov	r3, r0
 8009836:	461a      	mov	r2, r3
 8009838:	7afb      	ldrb	r3, [r7, #11]
 800983a:	4293      	cmp	r3, r2
 800983c:	d001      	beq.n	8009842 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800983e:	2301      	movs	r3, #1
 8009840:	e025      	b.n	800988e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	4a16      	ldr	r2, [pc, #88]	; (80098a0 <SDMMC_GetCmdResp6+0xec>)
 8009846:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009848:	2100      	movs	r1, #0
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f7ff fb5f 	bl	8008f0e <SDMMC_GetResponse>
 8009850:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d106      	bne.n	800986a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	0c1b      	lsrs	r3, r3, #16
 8009860:	b29a      	uxth	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009866:	2300      	movs	r3, #0
 8009868:	e011      	b.n	800988e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009878:	e009      	b.n	800988e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009888:	e001      	b.n	800988e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800988a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800988e:	4618      	mov	r0, r3
 8009890:	3720      	adds	r7, #32
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20000000 	.word	0x20000000
 800989c:	10624dd3 	.word	0x10624dd3
 80098a0:	002000c5 	.word	0x002000c5

080098a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098ac:	4b22      	ldr	r3, [pc, #136]	; (8009938 <SDMMC_GetCmdResp7+0x94>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a22      	ldr	r2, [pc, #136]	; (800993c <SDMMC_GetCmdResp7+0x98>)
 80098b2:	fba2 2303 	umull	r2, r3, r2, r3
 80098b6:	0a5b      	lsrs	r3, r3, #9
 80098b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80098bc:	fb02 f303 	mul.w	r3, r2, r3
 80098c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	1e5a      	subs	r2, r3, #1
 80098c6:	60fa      	str	r2, [r7, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d102      	bne.n	80098d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098d0:	e02c      	b.n	800992c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0ef      	beq.n	80098c2 <SDMMC_GetCmdResp7+0x1e>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1ea      	bne.n	80098c2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f0:	f003 0304 	and.w	r3, r3, #4
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d004      	beq.n	8009902 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2204      	movs	r2, #4
 80098fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098fe:	2304      	movs	r3, #4
 8009900:	e014      	b.n	800992c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d004      	beq.n	8009918 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009914:	2301      	movs	r3, #1
 8009916:	e009      	b.n	800992c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2240      	movs	r2, #64	; 0x40
 8009928:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800992a:	2300      	movs	r3, #0

}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	20000000 	.word	0x20000000
 800993c:	10624dd3 	.word	0x10624dd3

08009940 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009948:	4b11      	ldr	r3, [pc, #68]	; (8009990 <SDMMC_GetCmdError+0x50>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a11      	ldr	r2, [pc, #68]	; (8009994 <SDMMC_GetCmdError+0x54>)
 800994e:	fba2 2303 	umull	r2, r3, r2, r3
 8009952:	0a5b      	lsrs	r3, r3, #9
 8009954:	f241 3288 	movw	r2, #5000	; 0x1388
 8009958:	fb02 f303 	mul.w	r3, r2, r3
 800995c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	1e5a      	subs	r2, r3, #1
 8009962:	60fa      	str	r2, [r7, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d102      	bne.n	800996e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800996c:	e009      	b.n	8009982 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009976:	2b00      	cmp	r3, #0
 8009978:	d0f1      	beq.n	800995e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a06      	ldr	r2, [pc, #24]	; (8009998 <SDMMC_GetCmdError+0x58>)
 800997e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	20000000 	.word	0x20000000
 8009994:	10624dd3 	.word	0x10624dd3
 8009998:	002000c5 	.word	0x002000c5

0800999c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80099a0:	4904      	ldr	r1, [pc, #16]	; (80099b4 <MX_FATFS_Init+0x18>)
 80099a2:	4805      	ldr	r0, [pc, #20]	; (80099b8 <MX_FATFS_Init+0x1c>)
 80099a4:	f003 f8e8 	bl	800cb78 <FATFS_LinkDriver>
 80099a8:	4603      	mov	r3, r0
 80099aa:	461a      	mov	r2, r3
 80099ac:	4b03      	ldr	r3, [pc, #12]	; (80099bc <MX_FATFS_Init+0x20>)
 80099ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80099b0:	bf00      	nop
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	2000084c 	.word	0x2000084c
 80099b8:	080155e4 	.word	0x080155e4
 80099bc:	20000848 	.word	0x20000848

080099c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80099c0:	b480      	push	{r7}
 80099c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80099c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80099da:	f000 f885 	bl	8009ae8 <BSP_SD_IsDetected>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d001      	beq.n	80099e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80099e4:	2302      	movs	r3, #2
 80099e6:	e012      	b.n	8009a0e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80099e8:	480b      	ldr	r0, [pc, #44]	; (8009a18 <BSP_SD_Init+0x48>)
 80099ea:	f7fd fa2b 	bl	8006e44 <HAL_SD_Init>
 80099ee:	4603      	mov	r3, r0
 80099f0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80099f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80099fc:	4806      	ldr	r0, [pc, #24]	; (8009a18 <BSP_SD_Init+0x48>)
 80099fe:	f7fe f8df 	bl	8007bc0 <HAL_SD_ConfigWideBusOperation>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20000368 	.word	0x20000368

08009a1c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	68f9      	ldr	r1, [r7, #12]
 8009a32:	4806      	ldr	r0, [pc, #24]	; (8009a4c <BSP_SD_ReadBlocks_DMA+0x30>)
 8009a34:	f7fd fb2e 	bl	8007094 <HAL_SD_ReadBlocks_DMA>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3718      	adds	r7, #24
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	20000368 	.word	0x20000368

08009a50 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	68f9      	ldr	r1, [r7, #12]
 8009a66:	4806      	ldr	r0, [pc, #24]	; (8009a80 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009a68:	f7fd fbbc 	bl	80071e4 <HAL_SD_WriteBlocks_DMA>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	20000368 	.word	0x20000368

08009a84 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009a88:	4805      	ldr	r0, [pc, #20]	; (8009aa0 <BSP_SD_GetCardState+0x1c>)
 8009a8a:	f7fe f9ad 	bl	8007de8 <HAL_SD_GetCardState>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	bf14      	ite	ne
 8009a94:	2301      	movne	r3, #1
 8009a96:	2300      	moveq	r3, #0
 8009a98:	b2db      	uxtb	r3, r3
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20000368 	.word	0x20000368

08009aa4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4803      	ldr	r0, [pc, #12]	; (8009abc <BSP_SD_GetCardInfo+0x18>)
 8009ab0:	f7fe f85a 	bl	8007b68 <HAL_SD_GetCardInfo>
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000368 	.word	0x20000368

08009ac0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009ac8:	f000 f9aa 	bl	8009e20 <BSP_SD_WriteCpltCallback>
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009adc:	f000 f9b2 	bl	8009e44 <BSP_SD_ReadCpltCallback>
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009aee:	2301      	movs	r3, #1
 8009af0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009af2:	f000 f80b 	bl	8009b0c <BSP_PlatformIsDetected>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009afc:	2300      	movs	r3, #0
 8009afe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	b2db      	uxtb	r3, r3
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009b12:	2301      	movs	r3, #1
 8009b14:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009b16:	2120      	movs	r1, #32
 8009b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b1c:	f7fa fbde 	bl	80042dc <HAL_GPIO_ReadPin>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009b26:	2300      	movs	r3, #0
 8009b28:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8009b3c:	f003 f920 	bl	800cd80 <osKernelGetTickCount>
 8009b40:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8009b42:	e006      	b.n	8009b52 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b44:	f7ff ff9e 	bl	8009a84 <BSP_SD_GetCardState>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e009      	b.n	8009b66 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8009b52:	f003 f915 	bl	800cd80 <osKernelGetTickCount>
 8009b56:	4602      	mov	r2, r0
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d8f0      	bhi.n	8009b44 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009b62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009b7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <SD_CheckStatus+0x38>)
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b80:	f7ff ff80 	bl	8009a84 <BSP_SD_GetCardState>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d107      	bne.n	8009b9a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009b8a:	4b07      	ldr	r3, [pc, #28]	; (8009ba8 <SD_CheckStatus+0x38>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	f023 0301 	bic.w	r3, r3, #1
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	4b04      	ldr	r3, [pc, #16]	; (8009ba8 <SD_CheckStatus+0x38>)
 8009b98:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009b9a:	4b03      	ldr	r3, [pc, #12]	; (8009ba8 <SD_CheckStatus+0x38>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b2db      	uxtb	r3, r3
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	20000009 	.word	0x20000009

08009bac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009bb6:	4b1c      	ldr	r3, [pc, #112]	; (8009c28 <SD_initialize+0x7c>)
 8009bb8:	2201      	movs	r2, #1
 8009bba:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8009bbc:	f003 f898 	bl	800ccf0 <osKernelGetState>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d129      	bne.n	8009c1a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8009bc6:	f7ff ff03 	bl	80099d0 <BSP_SD_Init>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d107      	bne.n	8009be0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009bd0:	79fb      	ldrb	r3, [r7, #7]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7ff ffcc 	bl	8009b70 <SD_CheckStatus>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	461a      	mov	r2, r3
 8009bdc:	4b12      	ldr	r3, [pc, #72]	; (8009c28 <SD_initialize+0x7c>)
 8009bde:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009be0:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <SD_initialize+0x7c>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d017      	beq.n	8009c1a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8009bea:	4b10      	ldr	r3, [pc, #64]	; (8009c2c <SD_initialize+0x80>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d107      	bne.n	8009c02 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2102      	movs	r1, #2
 8009bf6:	200a      	movs	r0, #10
 8009bf8:	f003 fc3e 	bl	800d478 <osMessageQueueNew>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	4a0b      	ldr	r2, [pc, #44]	; (8009c2c <SD_initialize+0x80>)
 8009c00:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8009c02:	4b0a      	ldr	r3, [pc, #40]	; (8009c2c <SD_initialize+0x80>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d107      	bne.n	8009c1a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8009c0a:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <SD_initialize+0x7c>)
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	f043 0301 	orr.w	r3, r3, #1
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	4b04      	ldr	r3, [pc, #16]	; (8009c28 <SD_initialize+0x7c>)
 8009c18:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8009c1a:	4b03      	ldr	r3, [pc, #12]	; (8009c28 <SD_initialize+0x7c>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	b2db      	uxtb	r3, r3
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	20000009 	.word	0x20000009
 8009c2c:	20000cb4 	.word	0x20000cb4

08009c30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009c3a:	79fb      	ldrb	r3, [r7, #7]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7ff ff97 	bl	8009b70 <SD_CheckStatus>
 8009c42:	4603      	mov	r3, r0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b088      	sub	sp, #32
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60b9      	str	r1, [r7, #8]
 8009c54:	607a      	str	r2, [r7, #4]
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009c60:	f247 5030 	movw	r0, #30000	; 0x7530
 8009c64:	f7ff ff66 	bl	8009b34 <SD_CheckStatusWithTimeout>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	da01      	bge.n	8009c72 <SD_read+0x26>
  {
    return res;
 8009c6e:	7ffb      	ldrb	r3, [r7, #31]
 8009c70:	e02f      	b.n	8009cd2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	68b8      	ldr	r0, [r7, #8]
 8009c78:	f7ff fed0 	bl	8009a1c <BSP_SD_ReadBlocks_DMA>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8009c80:	7fbb      	ldrb	r3, [r7, #30]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d124      	bne.n	8009cd0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009c86:	4b15      	ldr	r3, [pc, #84]	; (8009cdc <SD_read+0x90>)
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	f107 0112 	add.w	r1, r7, #18
 8009c8e:	f247 5330 	movw	r3, #30000	; 0x7530
 8009c92:	2200      	movs	r2, #0
 8009c94:	f003 fcc4 	bl	800d620 <osMessageQueueGet>
 8009c98:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d117      	bne.n	8009cd0 <SD_read+0x84>
 8009ca0:	8a7b      	ldrh	r3, [r7, #18]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d114      	bne.n	8009cd0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8009ca6:	f003 f86b 	bl	800cd80 <osKernelGetTickCount>
 8009caa:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009cac:	e007      	b.n	8009cbe <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009cae:	f7ff fee9 	bl	8009a84 <BSP_SD_GetCardState>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d102      	bne.n	8009cbe <SD_read+0x72>
              {
                res = RES_OK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009cbc:	e008      	b.n	8009cd0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009cbe:	f003 f85f 	bl	800cd80 <osKernelGetTickCount>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	f247 522f 	movw	r2, #29999	; 0x752f
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d9ee      	bls.n	8009cae <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009cd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3720      	adds	r7, #32
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000cb4 	.word	0x20000cb4

08009ce0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60b9      	str	r1, [r7, #8]
 8009ce8:	607a      	str	r2, [r7, #4]
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	4603      	mov	r3, r0
 8009cee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009cf4:	f247 5030 	movw	r0, #30000	; 0x7530
 8009cf8:	f7ff ff1c 	bl	8009b34 <SD_CheckStatusWithTimeout>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	da01      	bge.n	8009d06 <SD_write+0x26>
  {
    return res;
 8009d02:	7ffb      	ldrb	r3, [r7, #31]
 8009d04:	e02d      	b.n	8009d62 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	6879      	ldr	r1, [r7, #4]
 8009d0a:	68b8      	ldr	r0, [r7, #8]
 8009d0c:	f7ff fea0 	bl	8009a50 <BSP_SD_WriteBlocks_DMA>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d124      	bne.n	8009d60 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009d16:	4b15      	ldr	r3, [pc, #84]	; (8009d6c <SD_write+0x8c>)
 8009d18:	6818      	ldr	r0, [r3, #0]
 8009d1a:	f107 0112 	add.w	r1, r7, #18
 8009d1e:	f247 5330 	movw	r3, #30000	; 0x7530
 8009d22:	2200      	movs	r2, #0
 8009d24:	f003 fc7c 	bl	800d620 <osMessageQueueGet>
 8009d28:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d117      	bne.n	8009d60 <SD_write+0x80>
 8009d30:	8a7b      	ldrh	r3, [r7, #18]
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d114      	bne.n	8009d60 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8009d36:	f003 f823 	bl	800cd80 <osKernelGetTickCount>
 8009d3a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009d3c:	e007      	b.n	8009d4e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d3e:	f7ff fea1 	bl	8009a84 <BSP_SD_GetCardState>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d102      	bne.n	8009d4e <SD_write+0x6e>
          {
            res = RES_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	77fb      	strb	r3, [r7, #31]
            break;
 8009d4c:	e008      	b.n	8009d60 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009d4e:	f003 f817 	bl	800cd80 <osKernelGetTickCount>
 8009d52:	4602      	mov	r2, r0
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d9ee      	bls.n	8009d3e <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3720      	adds	r7, #32
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20000cb4 	.word	0x20000cb4

08009d70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08c      	sub	sp, #48	; 0x30
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	603a      	str	r2, [r7, #0]
 8009d7a:	71fb      	strb	r3, [r7, #7]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d86:	4b25      	ldr	r3, [pc, #148]	; (8009e1c <SD_ioctl+0xac>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	f003 0301 	and.w	r3, r3, #1
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d001      	beq.n	8009d98 <SD_ioctl+0x28>
 8009d94:	2303      	movs	r3, #3
 8009d96:	e03c      	b.n	8009e12 <SD_ioctl+0xa2>

  switch (cmd)
 8009d98:	79bb      	ldrb	r3, [r7, #6]
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	d834      	bhi.n	8009e08 <SD_ioctl+0x98>
 8009d9e:	a201      	add	r2, pc, #4	; (adr r2, 8009da4 <SD_ioctl+0x34>)
 8009da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da4:	08009db5 	.word	0x08009db5
 8009da8:	08009dbd 	.word	0x08009dbd
 8009dac:	08009dd5 	.word	0x08009dd5
 8009db0:	08009def 	.word	0x08009def
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009dba:	e028      	b.n	8009e0e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009dbc:	f107 0308 	add.w	r3, r7, #8
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff fe6f 	bl	8009aa4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009dc6:	6a3a      	ldr	r2, [r7, #32]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009dd2:	e01c      	b.n	8009e0e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009dd4:	f107 0308 	add.w	r3, r7, #8
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fe63 	bl	8009aa4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009dec:	e00f      	b.n	8009e0e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009dee:	f107 0308 	add.w	r3, r7, #8
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff fe56 	bl	8009aa4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	0a5a      	lsrs	r2, r3, #9
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e06:	e002      	b.n	8009e0e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009e08:	2304      	movs	r3, #4
 8009e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3730      	adds	r7, #48	; 0x30
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20000009 	.word	0x20000009

08009e20 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8009e26:	2302      	movs	r3, #2
 8009e28:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009e2a:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <BSP_SD_WriteCpltCallback+0x20>)
 8009e2c:	6818      	ldr	r0, [r3, #0]
 8009e2e:	1db9      	adds	r1, r7, #6
 8009e30:	2300      	movs	r3, #0
 8009e32:	2200      	movs	r2, #0
 8009e34:	f003 fb94 	bl	800d560 <osMessageQueuePut>
#endif
}
 8009e38:	bf00      	nop
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20000cb4 	.word	0x20000cb4

08009e44 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009e4e:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <BSP_SD_ReadCpltCallback+0x20>)
 8009e50:	6818      	ldr	r0, [r3, #0]
 8009e52:	1db9      	adds	r1, r7, #6
 8009e54:	2300      	movs	r3, #0
 8009e56:	2200      	movs	r2, #0
 8009e58:	f003 fb82 	bl	800d560 <osMessageQueuePut>
#endif
}
 8009e5c:	bf00      	nop
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	20000cb4 	.word	0x20000cb4

08009e68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	4a08      	ldr	r2, [pc, #32]	; (8009e98 <disk_status+0x30>)
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	79fa      	ldrb	r2, [r7, #7]
 8009e80:	4905      	ldr	r1, [pc, #20]	; (8009e98 <disk_status+0x30>)
 8009e82:	440a      	add	r2, r1
 8009e84:	7a12      	ldrb	r2, [r2, #8]
 8009e86:	4610      	mov	r0, r2
 8009e88:	4798      	blx	r3
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000ce0 	.word	0x20000ce0

08009e9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009eaa:	79fb      	ldrb	r3, [r7, #7]
 8009eac:	4a0d      	ldr	r2, [pc, #52]	; (8009ee4 <disk_initialize+0x48>)
 8009eae:	5cd3      	ldrb	r3, [r2, r3]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d111      	bne.n	8009ed8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009eb4:	79fb      	ldrb	r3, [r7, #7]
 8009eb6:	4a0b      	ldr	r2, [pc, #44]	; (8009ee4 <disk_initialize+0x48>)
 8009eb8:	2101      	movs	r1, #1
 8009eba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
 8009ebe:	4a09      	ldr	r2, [pc, #36]	; (8009ee4 <disk_initialize+0x48>)
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	79fa      	ldrb	r2, [r7, #7]
 8009eca:	4906      	ldr	r1, [pc, #24]	; (8009ee4 <disk_initialize+0x48>)
 8009ecc:	440a      	add	r2, r1
 8009ece:	7a12      	ldrb	r2, [r2, #8]
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	4798      	blx	r3
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000ce0 	.word	0x20000ce0

08009ee8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009ee8:	b590      	push	{r4, r7, lr}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	607a      	str	r2, [r7, #4]
 8009ef2:	603b      	str	r3, [r7, #0]
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	4a0a      	ldr	r2, [pc, #40]	; (8009f24 <disk_read+0x3c>)
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	689c      	ldr	r4, [r3, #8]
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	4a07      	ldr	r2, [pc, #28]	; (8009f24 <disk_read+0x3c>)
 8009f08:	4413      	add	r3, r2
 8009f0a:	7a18      	ldrb	r0, [r3, #8]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	68b9      	ldr	r1, [r7, #8]
 8009f12:	47a0      	blx	r4
 8009f14:	4603      	mov	r3, r0
 8009f16:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	371c      	adds	r7, #28
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd90      	pop	{r4, r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20000ce0 	.word	0x20000ce0

08009f28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009f28:	b590      	push	{r4, r7, lr}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60b9      	str	r1, [r7, #8]
 8009f30:	607a      	str	r2, [r7, #4]
 8009f32:	603b      	str	r3, [r7, #0]
 8009f34:	4603      	mov	r3, r0
 8009f36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	4a0a      	ldr	r2, [pc, #40]	; (8009f64 <disk_write+0x3c>)
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	68dc      	ldr	r4, [r3, #12]
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
 8009f46:	4a07      	ldr	r2, [pc, #28]	; (8009f64 <disk_write+0x3c>)
 8009f48:	4413      	add	r3, r2
 8009f4a:	7a18      	ldrb	r0, [r3, #8]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	68b9      	ldr	r1, [r7, #8]
 8009f52:	47a0      	blx	r4
 8009f54:	4603      	mov	r3, r0
 8009f56:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	371c      	adds	r7, #28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd90      	pop	{r4, r7, pc}
 8009f62:	bf00      	nop
 8009f64:	20000ce0 	.word	0x20000ce0

08009f68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	603a      	str	r2, [r7, #0]
 8009f72:	71fb      	strb	r3, [r7, #7]
 8009f74:	460b      	mov	r3, r1
 8009f76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	4a09      	ldr	r2, [pc, #36]	; (8009fa0 <disk_ioctl+0x38>)
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	79fa      	ldrb	r2, [r7, #7]
 8009f86:	4906      	ldr	r1, [pc, #24]	; (8009fa0 <disk_ioctl+0x38>)
 8009f88:	440a      	add	r2, r1
 8009f8a:	7a10      	ldrb	r0, [r2, #8]
 8009f8c:	79b9      	ldrb	r1, [r7, #6]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	4798      	blx	r3
 8009f92:	4603      	mov	r3, r0
 8009f94:	73fb      	strb	r3, [r7, #15]
  return res;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	20000ce0 	.word	0x20000ce0

08009fa4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009fb4:	89fb      	ldrh	r3, [r7, #14]
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	b21a      	sxth	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b21b      	sxth	r3, r3
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	b21b      	sxth	r3, r3
 8009fc4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009fc6:	89fb      	ldrh	r3, [r7, #14]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	3303      	adds	r3, #3
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	021b      	lsls	r3, r3, #8
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	3202      	adds	r2, #2
 8009fec:	7812      	ldrb	r2, [r2, #0]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	021b      	lsls	r3, r3, #8
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	3201      	adds	r2, #1
 8009ffa:	7812      	ldrb	r2, [r2, #0]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	021b      	lsls	r3, r3, #8
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	7812      	ldrb	r2, [r2, #0]
 800a008:	4313      	orrs	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a00c:	68fb      	ldr	r3, [r7, #12]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a01a:	b480      	push	{r7}
 800a01c:	b083      	sub	sp, #12
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	460b      	mov	r3, r1
 800a024:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	887a      	ldrh	r2, [r7, #2]
 800a02e:	b2d2      	uxtb	r2, r2
 800a030:	701a      	strb	r2, [r3, #0]
 800a032:	887b      	ldrh	r3, [r7, #2]
 800a034:	0a1b      	lsrs	r3, r3, #8
 800a036:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	607a      	str	r2, [r7, #4]
 800a03e:	887a      	ldrh	r2, [r7, #2]
 800a040:	b2d2      	uxtb	r2, r2
 800a042:	701a      	strb	r2, [r3, #0]
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	b2d2      	uxtb	r2, r2
 800a064:	701a      	strb	r2, [r3, #0]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	0a1b      	lsrs	r3, r3, #8
 800a06a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	607a      	str	r2, [r7, #4]
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	b2d2      	uxtb	r2, r2
 800a076:	701a      	strb	r2, [r3, #0]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	0a1b      	lsrs	r3, r3, #8
 800a07c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	b2d2      	uxtb	r2, r2
 800a088:	701a      	strb	r2, [r3, #0]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	0a1b      	lsrs	r3, r3, #8
 800a08e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	607a      	str	r2, [r7, #4]
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	b2d2      	uxtb	r2, r2
 800a09a:	701a      	strb	r2, [r3, #0]
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00d      	beq.n	800a0de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	1c53      	adds	r3, r2, #1
 800a0c6:	613b      	str	r3, [r7, #16]
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	1c59      	adds	r1, r3, #1
 800a0cc:	6179      	str	r1, [r7, #20]
 800a0ce:	7812      	ldrb	r2, [r2, #0]
 800a0d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	607b      	str	r3, [r7, #4]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1f1      	bne.n	800a0c2 <mem_cpy+0x1a>
	}
}
 800a0de:	bf00      	nop
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a0ea:	b480      	push	{r7}
 800a0ec:	b087      	sub	sp, #28
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	617a      	str	r2, [r7, #20]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	b2d2      	uxtb	r2, r2
 800a104:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3b01      	subs	r3, #1
 800a10a:	607b      	str	r3, [r7, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1f3      	bne.n	800a0fa <mem_set+0x10>
}
 800a112:	bf00      	nop
 800a114:	bf00      	nop
 800a116:	371c      	adds	r7, #28
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a120:	b480      	push	{r7}
 800a122:	b089      	sub	sp, #36	; 0x24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	61fb      	str	r3, [r7, #28]
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	61fa      	str	r2, [r7, #28]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	4619      	mov	r1, r3
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	61ba      	str	r2, [r7, #24]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	1acb      	subs	r3, r1, r3
 800a14c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	3b01      	subs	r3, #1
 800a152:	607b      	str	r3, [r7, #4]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <mem_cmp+0x40>
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d0eb      	beq.n	800a138 <mem_cmp+0x18>

	return r;
 800a160:	697b      	ldr	r3, [r7, #20]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3724      	adds	r7, #36	; 0x24
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a16e:	b480      	push	{r7}
 800a170:	b083      	sub	sp, #12
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a178:	e002      	b.n	800a180 <chk_chr+0x12>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3301      	adds	r3, #1
 800a17e:	607b      	str	r3, [r7, #4]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d005      	beq.n	800a194 <chk_chr+0x26>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	4293      	cmp	r3, r2
 800a192:	d1f2      	bne.n	800a17a <chk_chr+0xc>
	return *str;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	781b      	ldrb	r3, [r3, #0]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d009      	beq.n	800a1c6 <lock_fs+0x22>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f002 fd12 	bl	800cbe0 <ff_req_grant>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <lock_fs+0x22>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e000      	b.n	800a1c8 <lock_fs+0x24>
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00d      	beq.n	800a1fe <unlock_fs+0x2e>
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	2b0c      	cmp	r3, #12
 800a1e6:	d00a      	beq.n	800a1fe <unlock_fs+0x2e>
 800a1e8:	78fb      	ldrb	r3, [r7, #3]
 800a1ea:	2b0b      	cmp	r3, #11
 800a1ec:	d007      	beq.n	800a1fe <unlock_fs+0x2e>
 800a1ee:	78fb      	ldrb	r3, [r7, #3]
 800a1f0:	2b0f      	cmp	r3, #15
 800a1f2:	d004      	beq.n	800a1fe <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f002 fd06 	bl	800cc0a <ff_rel_grant>
	}
}
 800a1fe:	bf00      	nop
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a212:	2300      	movs	r3, #0
 800a214:	60bb      	str	r3, [r7, #8]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	60fb      	str	r3, [r7, #12]
 800a21a:	e029      	b.n	800a270 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a21c:	4a27      	ldr	r2, [pc, #156]	; (800a2bc <chk_lock+0xb4>)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	011b      	lsls	r3, r3, #4
 800a222:	4413      	add	r3, r2
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d01d      	beq.n	800a266 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a22a:	4a24      	ldr	r2, [pc, #144]	; (800a2bc <chk_lock+0xb4>)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	4413      	add	r3, r2
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d116      	bne.n	800a26a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a23c:	4a1f      	ldr	r2, [pc, #124]	; (800a2bc <chk_lock+0xb4>)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	011b      	lsls	r3, r3, #4
 800a242:	4413      	add	r3, r2
 800a244:	3304      	adds	r3, #4
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d10c      	bne.n	800a26a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a250:	4a1a      	ldr	r2, [pc, #104]	; (800a2bc <chk_lock+0xb4>)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	011b      	lsls	r3, r3, #4
 800a256:	4413      	add	r3, r2
 800a258:	3308      	adds	r3, #8
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a260:	429a      	cmp	r2, r3
 800a262:	d102      	bne.n	800a26a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a264:	e007      	b.n	800a276 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a266:	2301      	movs	r3, #1
 800a268:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3301      	adds	r3, #1
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d9d2      	bls.n	800a21c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d109      	bne.n	800a290 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d102      	bne.n	800a288 <chk_lock+0x80>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b02      	cmp	r3, #2
 800a286:	d101      	bne.n	800a28c <chk_lock+0x84>
 800a288:	2300      	movs	r3, #0
 800a28a:	e010      	b.n	800a2ae <chk_lock+0xa6>
 800a28c:	2312      	movs	r3, #18
 800a28e:	e00e      	b.n	800a2ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d108      	bne.n	800a2a8 <chk_lock+0xa0>
 800a296:	4a09      	ldr	r2, [pc, #36]	; (800a2bc <chk_lock+0xb4>)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	011b      	lsls	r3, r3, #4
 800a29c:	4413      	add	r3, r2
 800a29e:	330c      	adds	r3, #12
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a6:	d101      	bne.n	800a2ac <chk_lock+0xa4>
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	e000      	b.n	800a2ae <chk_lock+0xa6>
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	20000cc0 	.word	0x20000cc0

0800a2c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	607b      	str	r3, [r7, #4]
 800a2ca:	e002      	b.n	800a2d2 <enq_lock+0x12>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	607b      	str	r3, [r7, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d806      	bhi.n	800a2e6 <enq_lock+0x26>
 800a2d8:	4a09      	ldr	r2, [pc, #36]	; (800a300 <enq_lock+0x40>)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	011b      	lsls	r3, r3, #4
 800a2de:	4413      	add	r3, r2
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1f2      	bne.n	800a2cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	bf14      	ite	ne
 800a2ec:	2301      	movne	r3, #1
 800a2ee:	2300      	moveq	r3, #0
 800a2f0:	b2db      	uxtb	r3, r3
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	20000cc0 	.word	0x20000cc0

0800a304 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a30e:	2300      	movs	r3, #0
 800a310:	60fb      	str	r3, [r7, #12]
 800a312:	e01f      	b.n	800a354 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a314:	4a41      	ldr	r2, [pc, #260]	; (800a41c <inc_lock+0x118>)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	011b      	lsls	r3, r3, #4
 800a31a:	4413      	add	r3, r2
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	429a      	cmp	r2, r3
 800a324:	d113      	bne.n	800a34e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a326:	4a3d      	ldr	r2, [pc, #244]	; (800a41c <inc_lock+0x118>)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	4413      	add	r3, r2
 800a32e:	3304      	adds	r3, #4
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a336:	429a      	cmp	r2, r3
 800a338:	d109      	bne.n	800a34e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a33a:	4a38      	ldr	r2, [pc, #224]	; (800a41c <inc_lock+0x118>)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	011b      	lsls	r3, r3, #4
 800a340:	4413      	add	r3, r2
 800a342:	3308      	adds	r3, #8
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d006      	beq.n	800a35c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d9dc      	bls.n	800a314 <inc_lock+0x10>
 800a35a:	e000      	b.n	800a35e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a35c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b02      	cmp	r3, #2
 800a362:	d132      	bne.n	800a3ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a364:	2300      	movs	r3, #0
 800a366:	60fb      	str	r3, [r7, #12]
 800a368:	e002      	b.n	800a370 <inc_lock+0x6c>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3301      	adds	r3, #1
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d806      	bhi.n	800a384 <inc_lock+0x80>
 800a376:	4a29      	ldr	r2, [pc, #164]	; (800a41c <inc_lock+0x118>)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	4413      	add	r3, r2
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1f2      	bne.n	800a36a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b02      	cmp	r3, #2
 800a388:	d101      	bne.n	800a38e <inc_lock+0x8a>
 800a38a:	2300      	movs	r3, #0
 800a38c:	e040      	b.n	800a410 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	4922      	ldr	r1, [pc, #136]	; (800a41c <inc_lock+0x118>)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	011b      	lsls	r3, r3, #4
 800a398:	440b      	add	r3, r1
 800a39a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	689a      	ldr	r2, [r3, #8]
 800a3a0:	491e      	ldr	r1, [pc, #120]	; (800a41c <inc_lock+0x118>)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	011b      	lsls	r3, r3, #4
 800a3a6:	440b      	add	r3, r1
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	695a      	ldr	r2, [r3, #20]
 800a3b0:	491a      	ldr	r1, [pc, #104]	; (800a41c <inc_lock+0x118>)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	440b      	add	r3, r1
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a3bc:	4a17      	ldr	r2, [pc, #92]	; (800a41c <inc_lock+0x118>)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	4413      	add	r3, r2
 800a3c4:	330c      	adds	r3, #12
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d009      	beq.n	800a3e4 <inc_lock+0xe0>
 800a3d0:	4a12      	ldr	r2, [pc, #72]	; (800a41c <inc_lock+0x118>)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	011b      	lsls	r3, r3, #4
 800a3d6:	4413      	add	r3, r2
 800a3d8:	330c      	adds	r3, #12
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <inc_lock+0xe0>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e015      	b.n	800a410 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d108      	bne.n	800a3fc <inc_lock+0xf8>
 800a3ea:	4a0c      	ldr	r2, [pc, #48]	; (800a41c <inc_lock+0x118>)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	011b      	lsls	r3, r3, #4
 800a3f0:	4413      	add	r3, r2
 800a3f2:	330c      	adds	r3, #12
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	e001      	b.n	800a400 <inc_lock+0xfc>
 800a3fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a400:	4906      	ldr	r1, [pc, #24]	; (800a41c <inc_lock+0x118>)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	011b      	lsls	r3, r3, #4
 800a406:	440b      	add	r3, r1
 800a408:	330c      	adds	r3, #12
 800a40a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	3301      	adds	r3, #1
}
 800a410:	4618      	mov	r0, r3
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	20000cc0 	.word	0x20000cc0

0800a420 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	607b      	str	r3, [r7, #4]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d825      	bhi.n	800a480 <dec_lock+0x60>
		n = Files[i].ctr;
 800a434:	4a17      	ldr	r2, [pc, #92]	; (800a494 <dec_lock+0x74>)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	011b      	lsls	r3, r3, #4
 800a43a:	4413      	add	r3, r2
 800a43c:	330c      	adds	r3, #12
 800a43e:	881b      	ldrh	r3, [r3, #0]
 800a440:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a442:	89fb      	ldrh	r3, [r7, #14]
 800a444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a448:	d101      	bne.n	800a44e <dec_lock+0x2e>
 800a44a:	2300      	movs	r3, #0
 800a44c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a44e:	89fb      	ldrh	r3, [r7, #14]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <dec_lock+0x3a>
 800a454:	89fb      	ldrh	r3, [r7, #14]
 800a456:	3b01      	subs	r3, #1
 800a458:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a45a:	4a0e      	ldr	r2, [pc, #56]	; (800a494 <dec_lock+0x74>)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	011b      	lsls	r3, r3, #4
 800a460:	4413      	add	r3, r2
 800a462:	330c      	adds	r3, #12
 800a464:	89fa      	ldrh	r2, [r7, #14]
 800a466:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a468:	89fb      	ldrh	r3, [r7, #14]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d105      	bne.n	800a47a <dec_lock+0x5a>
 800a46e:	4a09      	ldr	r2, [pc, #36]	; (800a494 <dec_lock+0x74>)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	011b      	lsls	r3, r3, #4
 800a474:	4413      	add	r3, r2
 800a476:	2200      	movs	r2, #0
 800a478:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	737b      	strb	r3, [r7, #13]
 800a47e:	e001      	b.n	800a484 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a480:	2302      	movs	r3, #2
 800a482:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a484:	7b7b      	ldrb	r3, [r7, #13]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20000cc0 	.word	0x20000cc0

0800a498 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	e010      	b.n	800a4c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a4a6:	4a0d      	ldr	r2, [pc, #52]	; (800a4dc <clear_lock+0x44>)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	011b      	lsls	r3, r3, #4
 800a4ac:	4413      	add	r3, r2
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d105      	bne.n	800a4c2 <clear_lock+0x2a>
 800a4b6:	4a09      	ldr	r2, [pc, #36]	; (800a4dc <clear_lock+0x44>)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	4413      	add	r3, r2
 800a4be:	2200      	movs	r2, #0
 800a4c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d9eb      	bls.n	800a4a6 <clear_lock+0xe>
	}
}
 800a4ce:	bf00      	nop
 800a4d0:	bf00      	nop
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	20000cc0 	.word	0x20000cc0

0800a4e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	78db      	ldrb	r3, [r3, #3]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d034      	beq.n	800a55e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	7858      	ldrb	r0, [r3, #1]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a504:	2301      	movs	r3, #1
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	f7ff fd0e 	bl	8009f28 <disk_write>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d002      	beq.n	800a518 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a512:	2301      	movs	r3, #1
 800a514:	73fb      	strb	r3, [r7, #15]
 800a516:	e022      	b.n	800a55e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	1ad2      	subs	r2, r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d217      	bcs.n	800a55e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	789b      	ldrb	r3, [r3, #2]
 800a532:	613b      	str	r3, [r7, #16]
 800a534:	e010      	b.n	800a558 <sync_window+0x78>
					wsect += fs->fsize;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	69db      	ldr	r3, [r3, #28]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	4413      	add	r3, r2
 800a53e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	7858      	ldrb	r0, [r3, #1]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a54a:	2301      	movs	r3, #1
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	f7ff fceb 	bl	8009f28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	3b01      	subs	r3, #1
 800a556:	613b      	str	r3, [r7, #16]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d8eb      	bhi.n	800a536 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57a:	683a      	ldr	r2, [r7, #0]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d01b      	beq.n	800a5b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff ffad 	bl	800a4e0 <sync_window>
 800a586:	4603      	mov	r3, r0
 800a588:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d113      	bne.n	800a5b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	7858      	ldrb	r0, [r3, #1]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a59a:	2301      	movs	r3, #1
 800a59c:	683a      	ldr	r2, [r7, #0]
 800a59e:	f7ff fca3 	bl	8009ee8 <disk_read>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d004      	beq.n	800a5b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a5a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	683a      	ldr	r2, [r7, #0]
 800a5b6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff ff87 	bl	800a4e0 <sync_window>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d158      	bne.n	800a68e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b03      	cmp	r3, #3
 800a5e2:	d148      	bne.n	800a676 <sync_fs+0xb2>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	791b      	ldrb	r3, [r3, #4]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d144      	bne.n	800a676 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3334      	adds	r3, #52	; 0x34
 800a5f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff fd77 	bl	800a0ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	3334      	adds	r3, #52	; 0x34
 800a600:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a604:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fd06 	bl	800a01a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	3334      	adds	r3, #52	; 0x34
 800a612:	4921      	ldr	r1, [pc, #132]	; (800a698 <sync_fs+0xd4>)
 800a614:	4618      	mov	r0, r3
 800a616:	f7ff fd1b 	bl	800a050 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	3334      	adds	r3, #52	; 0x34
 800a61e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a622:	491e      	ldr	r1, [pc, #120]	; (800a69c <sync_fs+0xd8>)
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff fd13 	bl	800a050 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	3334      	adds	r3, #52	; 0x34
 800a62e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	4619      	mov	r1, r3
 800a638:	4610      	mov	r0, r2
 800a63a:	f7ff fd09 	bl	800a050 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	3334      	adds	r3, #52	; 0x34
 800a642:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	4619      	mov	r1, r3
 800a64c:	4610      	mov	r0, r2
 800a64e:	f7ff fcff 	bl	800a050 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	1c5a      	adds	r2, r3, #1
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	7858      	ldrb	r0, [r3, #1]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a66a:	2301      	movs	r3, #1
 800a66c:	f7ff fc5c 	bl	8009f28 <disk_write>
			fs->fsi_flag = 0;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	2200      	movs	r2, #0
 800a67c:	2100      	movs	r1, #0
 800a67e:	4618      	mov	r0, r3
 800a680:	f7ff fc72 	bl	8009f68 <disk_ioctl>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <sync_fs+0xca>
 800a68a:	2301      	movs	r3, #1
 800a68c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	41615252 	.word	0x41615252
 800a69c:	61417272 	.word	0x61417272

0800a6a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	3b02      	subs	r3, #2
 800a6ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	3b02      	subs	r3, #2
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d301      	bcc.n	800a6c0 <clust2sect+0x20>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e008      	b.n	800a6d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	895b      	ldrh	r3, [r3, #10]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	fb03 f202 	mul.w	r2, r3, r2
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d0:	4413      	add	r3, r2
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b086      	sub	sp, #24
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d904      	bls.n	800a6fe <get_fat+0x20>
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d302      	bcc.n	800a704 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a6fe:	2301      	movs	r3, #1
 800a700:	617b      	str	r3, [r7, #20]
 800a702:	e08f      	b.n	800a824 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a708:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d062      	beq.n	800a7d8 <get_fat+0xfa>
 800a712:	2b03      	cmp	r3, #3
 800a714:	dc7c      	bgt.n	800a810 <get_fat+0x132>
 800a716:	2b01      	cmp	r3, #1
 800a718:	d002      	beq.n	800a720 <get_fat+0x42>
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d042      	beq.n	800a7a4 <get_fat+0xc6>
 800a71e:	e077      	b.n	800a810 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	085b      	lsrs	r3, r3, #1
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	4413      	add	r3, r2
 800a72c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	0a5b      	lsrs	r3, r3, #9
 800a736:	4413      	add	r3, r2
 800a738:	4619      	mov	r1, r3
 800a73a:	6938      	ldr	r0, [r7, #16]
 800a73c:	f7ff ff14 	bl	800a568 <move_window>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d167      	bne.n	800a816 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	1c5a      	adds	r2, r3, #1
 800a74a:	60fa      	str	r2, [r7, #12]
 800a74c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	4413      	add	r3, r2
 800a754:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a758:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	0a5b      	lsrs	r3, r3, #9
 800a762:	4413      	add	r3, r2
 800a764:	4619      	mov	r1, r3
 800a766:	6938      	ldr	r0, [r7, #16]
 800a768:	f7ff fefe 	bl	800a568 <move_window>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d153      	bne.n	800a81a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a778:	693a      	ldr	r2, [r7, #16]
 800a77a:	4413      	add	r3, r2
 800a77c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a780:	021b      	lsls	r3, r3, #8
 800a782:	461a      	mov	r2, r3
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	4313      	orrs	r3, r2
 800a788:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <get_fat+0xbc>
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	091b      	lsrs	r3, r3, #4
 800a798:	e002      	b.n	800a7a0 <get_fat+0xc2>
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7a0:	617b      	str	r3, [r7, #20]
			break;
 800a7a2:	e03f      	b.n	800a824 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	0a1b      	lsrs	r3, r3, #8
 800a7ac:	4413      	add	r3, r2
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6938      	ldr	r0, [r7, #16]
 800a7b2:	f7ff fed9 	bl	800a568 <move_window>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d130      	bne.n	800a81e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a7ca:	4413      	add	r3, r2
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7ff fbe9 	bl	8009fa4 <ld_word>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	617b      	str	r3, [r7, #20]
			break;
 800a7d6:	e025      	b.n	800a824 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	09db      	lsrs	r3, r3, #7
 800a7e0:	4413      	add	r3, r2
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6938      	ldr	r0, [r7, #16]
 800a7e6:	f7ff febf 	bl	800a568 <move_window>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d118      	bne.n	800a822 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a7fe:	4413      	add	r3, r2
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff fbe7 	bl	8009fd4 <ld_dword>
 800a806:	4603      	mov	r3, r0
 800a808:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a80c:	617b      	str	r3, [r7, #20]
			break;
 800a80e:	e009      	b.n	800a824 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a810:	2301      	movs	r3, #1
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	e006      	b.n	800a824 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a816:	bf00      	nop
 800a818:	e004      	b.n	800a824 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a81a:	bf00      	nop
 800a81c:	e002      	b.n	800a824 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a81e:	bf00      	nop
 800a820:	e000      	b.n	800a824 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a822:	bf00      	nop
		}
	}

	return val;
 800a824:	697b      	ldr	r3, [r7, #20]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3718      	adds	r7, #24
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a82e:	b590      	push	{r4, r7, lr}
 800a830:	b089      	sub	sp, #36	; 0x24
 800a832:	af00      	add	r7, sp, #0
 800a834:	60f8      	str	r0, [r7, #12]
 800a836:	60b9      	str	r1, [r7, #8]
 800a838:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a83a:	2302      	movs	r3, #2
 800a83c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b01      	cmp	r3, #1
 800a842:	f240 80d2 	bls.w	800a9ea <put_fat+0x1bc>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	f080 80cc 	bcs.w	800a9ea <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	2b03      	cmp	r3, #3
 800a858:	f000 8096 	beq.w	800a988 <put_fat+0x15a>
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	f300 80cd 	bgt.w	800a9fc <put_fat+0x1ce>
 800a862:	2b01      	cmp	r3, #1
 800a864:	d002      	beq.n	800a86c <put_fat+0x3e>
 800a866:	2b02      	cmp	r3, #2
 800a868:	d06e      	beq.n	800a948 <put_fat+0x11a>
 800a86a:	e0c7      	b.n	800a9fc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	61bb      	str	r3, [r7, #24]
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	085b      	lsrs	r3, r3, #1
 800a874:	69ba      	ldr	r2, [r7, #24]
 800a876:	4413      	add	r3, r2
 800a878:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	0a5b      	lsrs	r3, r3, #9
 800a882:	4413      	add	r3, r2
 800a884:	4619      	mov	r1, r3
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f7ff fe6e 	bl	800a568 <move_window>
 800a88c:	4603      	mov	r3, r0
 800a88e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a890:	7ffb      	ldrb	r3, [r7, #31]
 800a892:	2b00      	cmp	r3, #0
 800a894:	f040 80ab 	bne.w	800a9ee <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	1c59      	adds	r1, r3, #1
 800a8a2:	61b9      	str	r1, [r7, #24]
 800a8a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a8:	4413      	add	r3, r2
 800a8aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00d      	beq.n	800a8d2 <put_fat+0xa4>
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	b25b      	sxtb	r3, r3
 800a8bc:	f003 030f 	and.w	r3, r3, #15
 800a8c0:	b25a      	sxtb	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	011b      	lsls	r3, r3, #4
 800a8c8:	b25b      	sxtb	r3, r3
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	b25b      	sxtb	r3, r3
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	e001      	b.n	800a8d6 <put_fat+0xa8>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	0a5b      	lsrs	r3, r3, #9
 800a8e8:	4413      	add	r3, r2
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f7ff fe3b 	bl	800a568 <move_window>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8f6:	7ffb      	ldrb	r3, [r7, #31]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d17a      	bne.n	800a9f2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a908:	4413      	add	r3, r2
 800a90a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	f003 0301 	and.w	r3, r3, #1
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <put_fat+0xf0>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	091b      	lsrs	r3, r3, #4
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	e00e      	b.n	800a93c <put_fat+0x10e>
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	b25b      	sxtb	r3, r3
 800a924:	f023 030f 	bic.w	r3, r3, #15
 800a928:	b25a      	sxtb	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	0a1b      	lsrs	r3, r3, #8
 800a92e:	b25b      	sxtb	r3, r3
 800a930:	f003 030f 	and.w	r3, r3, #15
 800a934:	b25b      	sxtb	r3, r3
 800a936:	4313      	orrs	r3, r2
 800a938:	b25b      	sxtb	r3, r3
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2201      	movs	r2, #1
 800a944:	70da      	strb	r2, [r3, #3]
			break;
 800a946:	e059      	b.n	800a9fc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	0a1b      	lsrs	r3, r3, #8
 800a950:	4413      	add	r3, r2
 800a952:	4619      	mov	r1, r3
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f7ff fe07 	bl	800a568 <move_window>
 800a95a:	4603      	mov	r3, r0
 800a95c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a95e:	7ffb      	ldrb	r3, [r7, #31]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d148      	bne.n	800a9f6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a972:	4413      	add	r3, r2
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	b292      	uxth	r2, r2
 800a978:	4611      	mov	r1, r2
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7ff fb4d 	bl	800a01a <st_word>
			fs->wflag = 1;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2201      	movs	r2, #1
 800a984:	70da      	strb	r2, [r3, #3]
			break;
 800a986:	e039      	b.n	800a9fc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	09db      	lsrs	r3, r3, #7
 800a990:	4413      	add	r3, r2
 800a992:	4619      	mov	r1, r3
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f7ff fde7 	bl	800a568 <move_window>
 800a99a:	4603      	mov	r3, r0
 800a99c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a99e:	7ffb      	ldrb	r3, [r7, #31]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d12a      	bne.n	800a9fa <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7ff fb0a 	bl	8009fd4 <ld_dword>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a9c6:	4323      	orrs	r3, r4
 800a9c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a9d8:	4413      	add	r3, r2
 800a9da:	6879      	ldr	r1, [r7, #4]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7ff fb37 	bl	800a050 <st_dword>
			fs->wflag = 1;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	70da      	strb	r2, [r3, #3]
			break;
 800a9e8:	e008      	b.n	800a9fc <put_fat+0x1ce>
		}
	}
 800a9ea:	bf00      	nop
 800a9ec:	e006      	b.n	800a9fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a9ee:	bf00      	nop
 800a9f0:	e004      	b.n	800a9fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a9f2:	bf00      	nop
 800a9f4:	e002      	b.n	800a9fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a9f6:	bf00      	nop
 800a9f8:	e000      	b.n	800a9fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a9fa:	bf00      	nop
	return res;
 800a9fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3724      	adds	r7, #36	; 0x24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd90      	pop	{r4, r7, pc}

0800aa06 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b088      	sub	sp, #32
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d904      	bls.n	800aa2c <remove_chain+0x26>
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d301      	bcc.n	800aa30 <remove_chain+0x2a>
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	e04b      	b.n	800aac8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00c      	beq.n	800aa50 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aa36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	69b8      	ldr	r0, [r7, #24]
 800aa3e:	f7ff fef6 	bl	800a82e <put_fat>
 800aa42:	4603      	mov	r3, r0
 800aa44:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aa46:	7ffb      	ldrb	r3, [r7, #31]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <remove_chain+0x4a>
 800aa4c:	7ffb      	ldrb	r3, [r7, #31]
 800aa4e:	e03b      	b.n	800aac8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800aa50:	68b9      	ldr	r1, [r7, #8]
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7ff fe43 	bl	800a6de <get_fat>
 800aa58:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d031      	beq.n	800aac4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d101      	bne.n	800aa6a <remove_chain+0x64>
 800aa66:	2302      	movs	r3, #2
 800aa68:	e02e      	b.n	800aac8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa70:	d101      	bne.n	800aa76 <remove_chain+0x70>
 800aa72:	2301      	movs	r3, #1
 800aa74:	e028      	b.n	800aac8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800aa76:	2200      	movs	r2, #0
 800aa78:	68b9      	ldr	r1, [r7, #8]
 800aa7a:	69b8      	ldr	r0, [r7, #24]
 800aa7c:	f7ff fed7 	bl	800a82e <put_fat>
 800aa80:	4603      	mov	r3, r0
 800aa82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aa84:	7ffb      	ldrb	r3, [r7, #31]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <remove_chain+0x88>
 800aa8a:	7ffb      	ldrb	r3, [r7, #31]
 800aa8c:	e01c      	b.n	800aac8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	695a      	ldr	r2, [r3, #20]
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	3b02      	subs	r3, #2
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d20b      	bcs.n	800aab4 <remove_chain+0xae>
			fs->free_clst++;
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	791b      	ldrb	r3, [r3, #4]
 800aaaa:	f043 0301 	orr.w	r3, r3, #1
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d3c6      	bcc.n	800aa50 <remove_chain+0x4a>
 800aac2:	e000      	b.n	800aac6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aac4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10d      	bne.n	800ab02 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d004      	beq.n	800aafc <create_chain+0x2c>
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	69ba      	ldr	r2, [r7, #24]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d31b      	bcc.n	800ab34 <create_chain+0x64>
 800aafc:	2301      	movs	r3, #1
 800aafe:	61bb      	str	r3, [r7, #24]
 800ab00:	e018      	b.n	800ab34 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fdea 	bl	800a6de <get_fat>
 800ab0a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d801      	bhi.n	800ab16 <create_chain+0x46>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e070      	b.n	800abf8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab1c:	d101      	bne.n	800ab22 <create_chain+0x52>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	e06a      	b.n	800abf8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d201      	bcs.n	800ab30 <create_chain+0x60>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	e063      	b.n	800abf8 <create_chain+0x128>
		scl = clst;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	69fa      	ldr	r2, [r7, #28]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d307      	bcc.n	800ab58 <create_chain+0x88>
				ncl = 2;
 800ab48:	2302      	movs	r3, #2
 800ab4a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d901      	bls.n	800ab58 <create_chain+0x88>
 800ab54:	2300      	movs	r3, #0
 800ab56:	e04f      	b.n	800abf8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ab58:	69f9      	ldr	r1, [r7, #28]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7ff fdbf 	bl	800a6de <get_fat>
 800ab60:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00e      	beq.n	800ab86 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d003      	beq.n	800ab76 <create_chain+0xa6>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab74:	d101      	bne.n	800ab7a <create_chain+0xaa>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	e03e      	b.n	800abf8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ab7a:	69fa      	ldr	r2, [r7, #28]
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d1da      	bne.n	800ab38 <create_chain+0x68>
 800ab82:	2300      	movs	r3, #0
 800ab84:	e038      	b.n	800abf8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ab86:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ab88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab8c:	69f9      	ldr	r1, [r7, #28]
 800ab8e:	6938      	ldr	r0, [r7, #16]
 800ab90:	f7ff fe4d 	bl	800a82e <put_fat>
 800ab94:	4603      	mov	r3, r0
 800ab96:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d109      	bne.n	800abb2 <create_chain+0xe2>
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d006      	beq.n	800abb2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6938      	ldr	r0, [r7, #16]
 800abaa:	f7ff fe40 	bl	800a82e <put_fat>
 800abae:	4603      	mov	r3, r0
 800abb0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d116      	bne.n	800abe6 <create_chain+0x116>
		fs->last_clst = ncl;
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	69fa      	ldr	r2, [r7, #28]
 800abbc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	695a      	ldr	r2, [r3, #20]
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	3b02      	subs	r3, #2
 800abc8:	429a      	cmp	r2, r3
 800abca:	d804      	bhi.n	800abd6 <create_chain+0x106>
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	695b      	ldr	r3, [r3, #20]
 800abd0:	1e5a      	subs	r2, r3, #1
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	791b      	ldrb	r3, [r3, #4]
 800abda:	f043 0301 	orr.w	r3, r3, #1
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	711a      	strb	r2, [r3, #4]
 800abe4:	e007      	b.n	800abf6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800abe6:	7dfb      	ldrb	r3, [r7, #23]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d102      	bne.n	800abf2 <create_chain+0x122>
 800abec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abf0:	e000      	b.n	800abf4 <create_chain+0x124>
 800abf2:	2301      	movs	r3, #1
 800abf4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800abf6:	69fb      	ldr	r3, [r7, #28]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3720      	adds	r7, #32
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac14:	3304      	adds	r3, #4
 800ac16:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	0a5b      	lsrs	r3, r3, #9
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	8952      	ldrh	r2, [r2, #10]
 800ac20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac24:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	1d1a      	adds	r2, r3, #4
 800ac2a:	613a      	str	r2, [r7, #16]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <clmt_clust+0x3a>
 800ac36:	2300      	movs	r3, #0
 800ac38:	e010      	b.n	800ac5c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d307      	bcc.n	800ac52 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	617b      	str	r3, [r7, #20]
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac50:	e7e9      	b.n	800ac26 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ac52:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	4413      	add	r3, r2
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	371c      	adds	r7, #28
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac7e:	d204      	bcs.n	800ac8a <dir_sdi+0x22>
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	f003 031f 	and.w	r3, r3, #31
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <dir_sdi+0x26>
		return FR_INT_ERR;
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	e063      	b.n	800ad56 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d106      	bne.n	800acae <dir_sdi+0x46>
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d902      	bls.n	800acae <dir_sdi+0x46>
		clst = fs->dirbase;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10c      	bne.n	800acce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	095b      	lsrs	r3, r3, #5
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	8912      	ldrh	r2, [r2, #8]
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d301      	bcc.n	800acc4 <dir_sdi+0x5c>
 800acc0:	2302      	movs	r3, #2
 800acc2:	e048      	b.n	800ad56 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	61da      	str	r2, [r3, #28]
 800accc:	e029      	b.n	800ad22 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	895b      	ldrh	r3, [r3, #10]
 800acd2:	025b      	lsls	r3, r3, #9
 800acd4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800acd6:	e019      	b.n	800ad0c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6979      	ldr	r1, [r7, #20]
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff fcfe 	bl	800a6de <get_fat>
 800ace2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acea:	d101      	bne.n	800acf0 <dir_sdi+0x88>
 800acec:	2301      	movs	r3, #1
 800acee:	e032      	b.n	800ad56 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d904      	bls.n	800ad00 <dir_sdi+0x98>
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d301      	bcc.n	800ad04 <dir_sdi+0x9c>
 800ad00:	2302      	movs	r3, #2
 800ad02:	e028      	b.n	800ad56 <dir_sdi+0xee>
			ofs -= csz;
 800ad04:	683a      	ldr	r2, [r7, #0]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d2e1      	bcs.n	800acd8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ad14:	6979      	ldr	r1, [r7, #20]
 800ad16:	6938      	ldr	r0, [r7, #16]
 800ad18:	f7ff fcc2 	bl	800a6a0 <clust2sect>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <dir_sdi+0xcc>
 800ad30:	2302      	movs	r3, #2
 800ad32:	e010      	b.n	800ad56 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	69da      	ldr	r2, [r3, #28]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	0a5b      	lsrs	r3, r3, #9
 800ad3c:	441a      	add	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4e:	441a      	add	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b086      	sub	sp, #24
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	695b      	ldr	r3, [r3, #20]
 800ad72:	3320      	adds	r3, #32
 800ad74:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <dir_next+0x28>
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad84:	d301      	bcc.n	800ad8a <dir_next+0x2c>
 800ad86:	2304      	movs	r3, #4
 800ad88:	e0aa      	b.n	800aee0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f040 8098 	bne.w	800aec6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10b      	bne.n	800adc0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	095b      	lsrs	r3, r3, #5
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	8912      	ldrh	r2, [r2, #8]
 800adb0:	4293      	cmp	r3, r2
 800adb2:	f0c0 8088 	bcc.w	800aec6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	61da      	str	r2, [r3, #28]
 800adbc:	2304      	movs	r3, #4
 800adbe:	e08f      	b.n	800aee0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	0a5b      	lsrs	r3, r3, #9
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	8952      	ldrh	r2, [r2, #10]
 800adc8:	3a01      	subs	r2, #1
 800adca:	4013      	ands	r3, r2
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d17a      	bne.n	800aec6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	4619      	mov	r1, r3
 800add8:	4610      	mov	r0, r2
 800adda:	f7ff fc80 	bl	800a6de <get_fat>
 800adde:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d801      	bhi.n	800adea <dir_next+0x8c>
 800ade6:	2302      	movs	r3, #2
 800ade8:	e07a      	b.n	800aee0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adf0:	d101      	bne.n	800adf6 <dir_next+0x98>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e074      	b.n	800aee0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	697a      	ldr	r2, [r7, #20]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d358      	bcc.n	800aeb2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d104      	bne.n	800ae10 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	61da      	str	r2, [r3, #28]
 800ae0c:	2304      	movs	r3, #4
 800ae0e:	e067      	b.n	800aee0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	4619      	mov	r1, r3
 800ae18:	4610      	mov	r0, r2
 800ae1a:	f7ff fe59 	bl	800aad0 <create_chain>
 800ae1e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <dir_next+0xcc>
 800ae26:	2307      	movs	r3, #7
 800ae28:	e05a      	b.n	800aee0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d101      	bne.n	800ae34 <dir_next+0xd6>
 800ae30:	2302      	movs	r3, #2
 800ae32:	e055      	b.n	800aee0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae3a:	d101      	bne.n	800ae40 <dir_next+0xe2>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e04f      	b.n	800aee0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7ff fb4d 	bl	800a4e0 <sync_window>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d001      	beq.n	800ae50 <dir_next+0xf2>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e047      	b.n	800aee0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3334      	adds	r3, #52	; 0x34
 800ae54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae58:	2100      	movs	r1, #0
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff f945 	bl	800a0ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae60:	2300      	movs	r3, #0
 800ae62:	613b      	str	r3, [r7, #16]
 800ae64:	6979      	ldr	r1, [r7, #20]
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f7ff fc1a 	bl	800a6a0 <clust2sect>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	631a      	str	r2, [r3, #48]	; 0x30
 800ae72:	e012      	b.n	800ae9a <dir_next+0x13c>
						fs->wflag = 1;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2201      	movs	r2, #1
 800ae78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7ff fb30 	bl	800a4e0 <sync_window>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <dir_next+0x12c>
 800ae86:	2301      	movs	r3, #1
 800ae88:	e02a      	b.n	800aee0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	613b      	str	r3, [r7, #16]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae94:	1c5a      	adds	r2, r3, #1
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	631a      	str	r2, [r3, #48]	; 0x30
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	895b      	ldrh	r3, [r3, #10]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d3e6      	bcc.n	800ae74 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	1ad2      	subs	r2, r2, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aeb8:	6979      	ldr	r1, [r7, #20]
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f7ff fbf0 	bl	800a6a0 <clust2sect>
 800aec0:	4602      	mov	r2, r0
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed8:	441a      	add	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aef8:	2100      	movs	r1, #0
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff feb4 	bl	800ac68 <dir_sdi>
 800af00:	4603      	mov	r3, r0
 800af02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af04:	7dfb      	ldrb	r3, [r7, #23]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d12b      	bne.n	800af62 <dir_alloc+0x7a>
		n = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	4619      	mov	r1, r3
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f7ff fb27 	bl	800a568 <move_window>
 800af1a:	4603      	mov	r3, r0
 800af1c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800af1e:	7dfb      	ldrb	r3, [r7, #23]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d11d      	bne.n	800af60 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	2be5      	cmp	r3, #229	; 0xe5
 800af2c:	d004      	beq.n	800af38 <dir_alloc+0x50>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d107      	bne.n	800af48 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	3301      	adds	r3, #1
 800af3c:	613b      	str	r3, [r7, #16]
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	429a      	cmp	r2, r3
 800af44:	d102      	bne.n	800af4c <dir_alloc+0x64>
 800af46:	e00c      	b.n	800af62 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800af48:	2300      	movs	r3, #0
 800af4a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800af4c:	2101      	movs	r1, #1
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff ff05 	bl	800ad5e <dir_next>
 800af54:	4603      	mov	r3, r0
 800af56:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800af58:	7dfb      	ldrb	r3, [r7, #23]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0d7      	beq.n	800af0e <dir_alloc+0x26>
 800af5e:	e000      	b.n	800af62 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800af60:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	2b04      	cmp	r3, #4
 800af66:	d101      	bne.n	800af6c <dir_alloc+0x84>
 800af68:	2307      	movs	r3, #7
 800af6a:	75fb      	strb	r3, [r7, #23]
	return res;
 800af6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	331a      	adds	r3, #26
 800af84:	4618      	mov	r0, r3
 800af86:	f7ff f80d 	bl	8009fa4 <ld_word>
 800af8a:	4603      	mov	r3, r0
 800af8c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b03      	cmp	r3, #3
 800af94:	d109      	bne.n	800afaa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	3314      	adds	r3, #20
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7ff f802 	bl	8009fa4 <ld_word>
 800afa0:	4603      	mov	r3, r0
 800afa2:	041b      	lsls	r3, r3, #16
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800afaa:	68fb      	ldr	r3, [r7, #12]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	331a      	adds	r3, #26
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	b292      	uxth	r2, r2
 800afc8:	4611      	mov	r1, r2
 800afca:	4618      	mov	r0, r3
 800afcc:	f7ff f825 	bl	800a01a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d109      	bne.n	800afec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f103 0214 	add.w	r2, r3, #20
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	0c1b      	lsrs	r3, r3, #16
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	4619      	mov	r1, r3
 800afe6:	4610      	mov	r0, r2
 800afe8:	f7ff f817 	bl	800a01a <st_word>
	}
}
 800afec:	bf00      	nop
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b002:	2100      	movs	r1, #0
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff fe2f 	bl	800ac68 <dir_sdi>
 800b00a:	4603      	mov	r3, r0
 800b00c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d001      	beq.n	800b018 <dir_find+0x24>
 800b014:	7dfb      	ldrb	r3, [r7, #23]
 800b016:	e03e      	b.n	800b096 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	69db      	ldr	r3, [r3, #28]
 800b01c:	4619      	mov	r1, r3
 800b01e:	6938      	ldr	r0, [r7, #16]
 800b020:	f7ff faa2 	bl	800a568 <move_window>
 800b024:	4603      	mov	r3, r0
 800b026:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d12f      	bne.n	800b08e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a1b      	ldr	r3, [r3, #32]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b036:	7bfb      	ldrb	r3, [r7, #15]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d102      	bne.n	800b042 <dir_find+0x4e>
 800b03c:	2304      	movs	r3, #4
 800b03e:	75fb      	strb	r3, [r7, #23]
 800b040:	e028      	b.n	800b094 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	330b      	adds	r3, #11
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	330b      	adds	r3, #11
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	f003 0308 	and.w	r3, r3, #8
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10a      	bne.n	800b07a <dir_find+0x86>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a18      	ldr	r0, [r3, #32]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	3324      	adds	r3, #36	; 0x24
 800b06c:	220b      	movs	r2, #11
 800b06e:	4619      	mov	r1, r3
 800b070:	f7ff f856 	bl	800a120 <mem_cmp>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00b      	beq.n	800b092 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b07a:	2100      	movs	r1, #0
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7ff fe6e 	bl	800ad5e <dir_next>
 800b082:	4603      	mov	r3, r0
 800b084:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b086:	7dfb      	ldrb	r3, [r7, #23]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d0c5      	beq.n	800b018 <dir_find+0x24>
 800b08c:	e002      	b.n	800b094 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b08e:	bf00      	nop
 800b090:	e000      	b.n	800b094 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b092:	bf00      	nop

	return res;
 800b094:	7dfb      	ldrb	r3, [r7, #23]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3718      	adds	r7, #24
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff ff1a 	bl	800aee8 <dir_alloc>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d11c      	bne.n	800b0f8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	69db      	ldr	r3, [r3, #28]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	68b8      	ldr	r0, [r7, #8]
 800b0c6:	f7ff fa4f 	bl	800a568 <move_window>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d111      	bne.n	800b0f8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	2220      	movs	r2, #32
 800b0da:	2100      	movs	r1, #0
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7ff f804 	bl	800a0ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a18      	ldr	r0, [r3, #32]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3324      	adds	r3, #36	; 0x24
 800b0ea:	220b      	movs	r2, #11
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	f7fe ffdb 	bl	800a0a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3324      	adds	r3, #36	; 0x24
 800b118:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b11a:	220b      	movs	r2, #11
 800b11c:	2120      	movs	r1, #32
 800b11e:	68b8      	ldr	r0, [r7, #8]
 800b120:	f7fe ffe3 	bl	800a0ea <mem_set>
	si = i = 0; ni = 8;
 800b124:	2300      	movs	r3, #0
 800b126:	613b      	str	r3, [r7, #16]
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	61fb      	str	r3, [r7, #28]
 800b12c:	2308      	movs	r3, #8
 800b12e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	1c5a      	adds	r2, r3, #1
 800b134:	61fa      	str	r2, [r7, #28]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	4413      	add	r3, r2
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b13e:	7efb      	ldrb	r3, [r7, #27]
 800b140:	2b20      	cmp	r3, #32
 800b142:	d94e      	bls.n	800b1e2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b144:	7efb      	ldrb	r3, [r7, #27]
 800b146:	2b2f      	cmp	r3, #47	; 0x2f
 800b148:	d006      	beq.n	800b158 <create_name+0x54>
 800b14a:	7efb      	ldrb	r3, [r7, #27]
 800b14c:	2b5c      	cmp	r3, #92	; 0x5c
 800b14e:	d110      	bne.n	800b172 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b150:	e002      	b.n	800b158 <create_name+0x54>
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	3301      	adds	r3, #1
 800b156:	61fb      	str	r3, [r7, #28]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	4413      	add	r3, r2
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	2b2f      	cmp	r3, #47	; 0x2f
 800b162:	d0f6      	beq.n	800b152 <create_name+0x4e>
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	4413      	add	r3, r2
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	2b5c      	cmp	r3, #92	; 0x5c
 800b16e:	d0f0      	beq.n	800b152 <create_name+0x4e>
			break;
 800b170:	e038      	b.n	800b1e4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b172:	7efb      	ldrb	r3, [r7, #27]
 800b174:	2b2e      	cmp	r3, #46	; 0x2e
 800b176:	d003      	beq.n	800b180 <create_name+0x7c>
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d30c      	bcc.n	800b19a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	2b0b      	cmp	r3, #11
 800b184:	d002      	beq.n	800b18c <create_name+0x88>
 800b186:	7efb      	ldrb	r3, [r7, #27]
 800b188:	2b2e      	cmp	r3, #46	; 0x2e
 800b18a:	d001      	beq.n	800b190 <create_name+0x8c>
 800b18c:	2306      	movs	r3, #6
 800b18e:	e044      	b.n	800b21a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b190:	2308      	movs	r3, #8
 800b192:	613b      	str	r3, [r7, #16]
 800b194:	230b      	movs	r3, #11
 800b196:	617b      	str	r3, [r7, #20]
			continue;
 800b198:	e022      	b.n	800b1e0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b19a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	da04      	bge.n	800b1ac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b1a2:	7efb      	ldrb	r3, [r7, #27]
 800b1a4:	3b80      	subs	r3, #128	; 0x80
 800b1a6:	4a1f      	ldr	r2, [pc, #124]	; (800b224 <create_name+0x120>)
 800b1a8:	5cd3      	ldrb	r3, [r2, r3]
 800b1aa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b1ac:	7efb      	ldrb	r3, [r7, #27]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	481d      	ldr	r0, [pc, #116]	; (800b228 <create_name+0x124>)
 800b1b2:	f7fe ffdc 	bl	800a16e <chk_chr>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <create_name+0xbc>
 800b1bc:	2306      	movs	r3, #6
 800b1be:	e02c      	b.n	800b21a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b1c0:	7efb      	ldrb	r3, [r7, #27]
 800b1c2:	2b60      	cmp	r3, #96	; 0x60
 800b1c4:	d905      	bls.n	800b1d2 <create_name+0xce>
 800b1c6:	7efb      	ldrb	r3, [r7, #27]
 800b1c8:	2b7a      	cmp	r3, #122	; 0x7a
 800b1ca:	d802      	bhi.n	800b1d2 <create_name+0xce>
 800b1cc:	7efb      	ldrb	r3, [r7, #27]
 800b1ce:	3b20      	subs	r3, #32
 800b1d0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	613a      	str	r2, [r7, #16]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	4413      	add	r3, r2
 800b1dc:	7efa      	ldrb	r2, [r7, #27]
 800b1de:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b1e0:	e7a6      	b.n	800b130 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b1e2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b1e4:	68fa      	ldr	r2, [r7, #12]
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	441a      	add	r2, r3
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <create_name+0xf4>
 800b1f4:	2306      	movs	r3, #6
 800b1f6:	e010      	b.n	800b21a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2be5      	cmp	r3, #229	; 0xe5
 800b1fe:	d102      	bne.n	800b206 <create_name+0x102>
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2205      	movs	r2, #5
 800b204:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b206:	7efb      	ldrb	r3, [r7, #27]
 800b208:	2b20      	cmp	r3, #32
 800b20a:	d801      	bhi.n	800b210 <create_name+0x10c>
 800b20c:	2204      	movs	r2, #4
 800b20e:	e000      	b.n	800b212 <create_name+0x10e>
 800b210:	2200      	movs	r2, #0
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	330b      	adds	r3, #11
 800b216:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b218:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3720      	adds	r7, #32
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	080155f8 	.word	0x080155f8
 800b228:	080154dc 	.word	0x080154dc

0800b22c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b086      	sub	sp, #24
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b240:	e002      	b.n	800b248 <follow_path+0x1c>
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	3301      	adds	r3, #1
 800b246:	603b      	str	r3, [r7, #0]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b2f      	cmp	r3, #47	; 0x2f
 800b24e:	d0f8      	beq.n	800b242 <follow_path+0x16>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	2b5c      	cmp	r3, #92	; 0x5c
 800b256:	d0f4      	beq.n	800b242 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	2200      	movs	r2, #0
 800b25c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	2b1f      	cmp	r3, #31
 800b264:	d80a      	bhi.n	800b27c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2280      	movs	r2, #128	; 0x80
 800b26a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b26e:	2100      	movs	r1, #0
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff fcf9 	bl	800ac68 <dir_sdi>
 800b276:	4603      	mov	r3, r0
 800b278:	75fb      	strb	r3, [r7, #23]
 800b27a:	e043      	b.n	800b304 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b27c:	463b      	mov	r3, r7
 800b27e:	4619      	mov	r1, r3
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7ff ff3f 	bl	800b104 <create_name>
 800b286:	4603      	mov	r3, r0
 800b288:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b28a:	7dfb      	ldrb	r3, [r7, #23]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d134      	bne.n	800b2fa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7ff feaf 	bl	800aff4 <dir_find>
 800b296:	4603      	mov	r3, r0
 800b298:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00a      	beq.n	800b2be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
 800b2aa:	2b04      	cmp	r3, #4
 800b2ac:	d127      	bne.n	800b2fe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b2ae:	7afb      	ldrb	r3, [r7, #11]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d122      	bne.n	800b2fe <follow_path+0xd2>
 800b2b8:	2305      	movs	r3, #5
 800b2ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b2bc:	e01f      	b.n	800b2fe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b2be:	7afb      	ldrb	r3, [r7, #11]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d11c      	bne.n	800b302 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	799b      	ldrb	r3, [r3, #6]
 800b2cc:	f003 0310 	and.w	r3, r3, #16
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d102      	bne.n	800b2da <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b2d4:	2305      	movs	r3, #5
 800b2d6:	75fb      	strb	r3, [r7, #23]
 800b2d8:	e014      	b.n	800b304 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e8:	4413      	add	r3, r2
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f7ff fe42 	bl	800af76 <ld_clust>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b2f8:	e7c0      	b.n	800b27c <follow_path+0x50>
			if (res != FR_OK) break;
 800b2fa:	bf00      	nop
 800b2fc:	e002      	b.n	800b304 <follow_path+0xd8>
				break;
 800b2fe:	bf00      	nop
 800b300:	e000      	b.n	800b304 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b302:	bf00      	nop
			}
		}
	}

	return res;
 800b304:	7dfb      	ldrb	r3, [r7, #23]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3718      	adds	r7, #24
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b30e:	b480      	push	{r7}
 800b310:	b087      	sub	sp, #28
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b31a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d031      	beq.n	800b388 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	617b      	str	r3, [r7, #20]
 800b32a:	e002      	b.n	800b332 <get_ldnumber+0x24>
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	3301      	adds	r3, #1
 800b330:	617b      	str	r3, [r7, #20]
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b20      	cmp	r3, #32
 800b338:	d903      	bls.n	800b342 <get_ldnumber+0x34>
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b3a      	cmp	r3, #58	; 0x3a
 800b340:	d1f4      	bne.n	800b32c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	2b3a      	cmp	r3, #58	; 0x3a
 800b348:	d11c      	bne.n	800b384 <get_ldnumber+0x76>
			tp = *path;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	60fa      	str	r2, [r7, #12]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	3b30      	subs	r3, #48	; 0x30
 800b35a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	2b09      	cmp	r3, #9
 800b360:	d80e      	bhi.n	800b380 <get_ldnumber+0x72>
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	429a      	cmp	r2, r3
 800b368:	d10a      	bne.n	800b380 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d107      	bne.n	800b380 <get_ldnumber+0x72>
					vol = (int)i;
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	3301      	adds	r3, #1
 800b378:	617b      	str	r3, [r7, #20]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	697a      	ldr	r2, [r7, #20]
 800b37e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	e002      	b.n	800b38a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b384:	2300      	movs	r3, #0
 800b386:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b388:	693b      	ldr	r3, [r7, #16]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	371c      	adds	r7, #28
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
	...

0800b398 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	70da      	strb	r2, [r3, #3]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3ae:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7ff f8d8 	bl	800a568 <move_window>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <check_fs+0x2a>
 800b3be:	2304      	movs	r3, #4
 800b3c0:	e038      	b.n	800b434 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3334      	adds	r3, #52	; 0x34
 800b3c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fe fdea 	bl	8009fa4 <ld_word>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d001      	beq.n	800b3e0 <check_fs+0x48>
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e029      	b.n	800b434 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3e6:	2be9      	cmp	r3, #233	; 0xe9
 800b3e8:	d009      	beq.n	800b3fe <check_fs+0x66>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3f0:	2beb      	cmp	r3, #235	; 0xeb
 800b3f2:	d11e      	bne.n	800b432 <check_fs+0x9a>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b3fa:	2b90      	cmp	r3, #144	; 0x90
 800b3fc:	d119      	bne.n	800b432 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	3334      	adds	r3, #52	; 0x34
 800b402:	3336      	adds	r3, #54	; 0x36
 800b404:	4618      	mov	r0, r3
 800b406:	f7fe fde5 	bl	8009fd4 <ld_dword>
 800b40a:	4603      	mov	r3, r0
 800b40c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b410:	4a0a      	ldr	r2, [pc, #40]	; (800b43c <check_fs+0xa4>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d101      	bne.n	800b41a <check_fs+0x82>
 800b416:	2300      	movs	r3, #0
 800b418:	e00c      	b.n	800b434 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	3334      	adds	r3, #52	; 0x34
 800b41e:	3352      	adds	r3, #82	; 0x52
 800b420:	4618      	mov	r0, r3
 800b422:	f7fe fdd7 	bl	8009fd4 <ld_dword>
 800b426:	4603      	mov	r3, r0
 800b428:	4a05      	ldr	r2, [pc, #20]	; (800b440 <check_fs+0xa8>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d101      	bne.n	800b432 <check_fs+0x9a>
 800b42e:	2300      	movs	r3, #0
 800b430:	e000      	b.n	800b434 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b432:	2302      	movs	r3, #2
}
 800b434:	4618      	mov	r0, r3
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	00544146 	.word	0x00544146
 800b440:	33544146 	.word	0x33544146

0800b444 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b096      	sub	sp, #88	; 0x58
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	4613      	mov	r3, r2
 800b450:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f7ff ff58 	bl	800b30e <get_ldnumber>
 800b45e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b462:	2b00      	cmp	r3, #0
 800b464:	da01      	bge.n	800b46a <find_volume+0x26>
 800b466:	230b      	movs	r3, #11
 800b468:	e235      	b.n	800b8d6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b46a:	4aa5      	ldr	r2, [pc, #660]	; (800b700 <find_volume+0x2bc>)
 800b46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b472:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <find_volume+0x3a>
 800b47a:	230c      	movs	r3, #12
 800b47c:	e22b      	b.n	800b8d6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800b47e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b480:	f7fe fe90 	bl	800a1a4 <lock_fs>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <find_volume+0x4a>
 800b48a:	230f      	movs	r3, #15
 800b48c:	e223      	b.n	800b8d6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b492:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b494:	79fb      	ldrb	r3, [r7, #7]
 800b496:	f023 0301 	bic.w	r3, r3, #1
 800b49a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d01a      	beq.n	800b4da <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a6:	785b      	ldrb	r3, [r3, #1]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fe fcdd 	bl	8009e68 <disk_status>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b4b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4b8:	f003 0301 	and.w	r3, r3, #1
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10c      	bne.n	800b4da <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d007      	beq.n	800b4d6 <find_volume+0x92>
 800b4c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4ca:	f003 0304 	and.w	r3, r3, #4
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d001      	beq.n	800b4d6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b4d2:	230a      	movs	r3, #10
 800b4d4:	e1ff      	b.n	800b8d6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	e1fd      	b.n	800b8d6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	2200      	movs	r2, #0
 800b4de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	785b      	ldrb	r3, [r3, #1]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fe fcd5 	bl	8009e9c <disk_initialize>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b4f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b00      	cmp	r3, #0
 800b502:	d001      	beq.n	800b508 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b504:	2303      	movs	r3, #3
 800b506:	e1e6      	b.n	800b8d6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b508:	79fb      	ldrb	r3, [r7, #7]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d007      	beq.n	800b51e <find_volume+0xda>
 800b50e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b512:	f003 0304 	and.w	r3, r3, #4
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b51a:	230a      	movs	r3, #10
 800b51c:	e1db      	b.n	800b8d6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b522:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b526:	f7ff ff37 	bl	800b398 <check_fs>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b530:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b534:	2b02      	cmp	r3, #2
 800b536:	d149      	bne.n	800b5cc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b538:	2300      	movs	r3, #0
 800b53a:	643b      	str	r3, [r7, #64]	; 0x40
 800b53c:	e01e      	b.n	800b57c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b540:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b54c:	4413      	add	r3, r2
 800b54e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	3304      	adds	r3, #4
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d006      	beq.n	800b568 <find_volume+0x124>
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	3308      	adds	r3, #8
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe fd38 	bl	8009fd4 <ld_dword>
 800b564:	4602      	mov	r2, r0
 800b566:	e000      	b.n	800b56a <find_volume+0x126>
 800b568:	2200      	movs	r2, #0
 800b56a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	3358      	adds	r3, #88	; 0x58
 800b570:	443b      	add	r3, r7
 800b572:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b578:	3301      	adds	r3, #1
 800b57a:	643b      	str	r3, [r7, #64]	; 0x40
 800b57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b57e:	2b03      	cmp	r3, #3
 800b580:	d9dd      	bls.n	800b53e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b582:	2300      	movs	r3, #0
 800b584:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d002      	beq.n	800b592 <find_volume+0x14e>
 800b58c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b58e:	3b01      	subs	r3, #1
 800b590:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	3358      	adds	r3, #88	; 0x58
 800b598:	443b      	add	r3, r7
 800b59a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b59e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b5a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d005      	beq.n	800b5b2 <find_volume+0x16e>
 800b5a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b5aa:	f7ff fef5 	bl	800b398 <check_fs>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	e000      	b.n	800b5b4 <find_volume+0x170>
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b5b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d905      	bls.n	800b5cc <find_volume+0x188>
 800b5c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	643b      	str	r3, [r7, #64]	; 0x40
 800b5c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5c8:	2b03      	cmp	r3, #3
 800b5ca:	d9e2      	bls.n	800b592 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b5cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5d0:	2b04      	cmp	r3, #4
 800b5d2:	d101      	bne.n	800b5d8 <find_volume+0x194>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e17e      	b.n	800b8d6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b5d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d901      	bls.n	800b5e4 <find_volume+0x1a0>
 800b5e0:	230d      	movs	r3, #13
 800b5e2:	e178      	b.n	800b8d6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e6:	3334      	adds	r3, #52	; 0x34
 800b5e8:	330b      	adds	r3, #11
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fcda 	bl	8009fa4 <ld_word>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5f6:	d001      	beq.n	800b5fc <find_volume+0x1b8>
 800b5f8:	230d      	movs	r3, #13
 800b5fa:	e16c      	b.n	800b8d6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fe:	3334      	adds	r3, #52	; 0x34
 800b600:	3316      	adds	r3, #22
 800b602:	4618      	mov	r0, r3
 800b604:	f7fe fcce 	bl	8009fa4 <ld_word>
 800b608:	4603      	mov	r3, r0
 800b60a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b60c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d106      	bne.n	800b620 <find_volume+0x1dc>
 800b612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b614:	3334      	adds	r3, #52	; 0x34
 800b616:	3324      	adds	r3, #36	; 0x24
 800b618:	4618      	mov	r0, r3
 800b61a:	f7fe fcdb 	bl	8009fd4 <ld_dword>
 800b61e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b624:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	789b      	ldrb	r3, [r3, #2]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d005      	beq.n	800b644 <find_volume+0x200>
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	789b      	ldrb	r3, [r3, #2]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d001      	beq.n	800b644 <find_volume+0x200>
 800b640:	230d      	movs	r3, #13
 800b642:	e148      	b.n	800b8d6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b646:	789b      	ldrb	r3, [r3, #2]
 800b648:	461a      	mov	r2, r3
 800b64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b64c:	fb02 f303 	mul.w	r3, r2, r3
 800b650:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b658:	b29a      	uxth	r2, r3
 800b65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b660:	895b      	ldrh	r3, [r3, #10]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d008      	beq.n	800b678 <find_volume+0x234>
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	895b      	ldrh	r3, [r3, #10]
 800b66a:	461a      	mov	r2, r3
 800b66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66e:	895b      	ldrh	r3, [r3, #10]
 800b670:	3b01      	subs	r3, #1
 800b672:	4013      	ands	r3, r2
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <find_volume+0x238>
 800b678:	230d      	movs	r3, #13
 800b67a:	e12c      	b.n	800b8d6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67e:	3334      	adds	r3, #52	; 0x34
 800b680:	3311      	adds	r3, #17
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fc8e 	bl	8009fa4 <ld_word>
 800b688:	4603      	mov	r3, r0
 800b68a:	461a      	mov	r2, r3
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b692:	891b      	ldrh	r3, [r3, #8]
 800b694:	f003 030f 	and.w	r3, r3, #15
 800b698:	b29b      	uxth	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <find_volume+0x25e>
 800b69e:	230d      	movs	r3, #13
 800b6a0:	e119      	b.n	800b8d6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a4:	3334      	adds	r3, #52	; 0x34
 800b6a6:	3313      	adds	r3, #19
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7fe fc7b 	bl	8009fa4 <ld_word>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b6b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d106      	bne.n	800b6c6 <find_volume+0x282>
 800b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ba:	3334      	adds	r3, #52	; 0x34
 800b6bc:	3320      	adds	r3, #32
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fe fc88 	bl	8009fd4 <ld_dword>
 800b6c4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	3334      	adds	r3, #52	; 0x34
 800b6ca:	330e      	adds	r3, #14
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fe fc69 	bl	8009fa4 <ld_word>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b6d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d101      	bne.n	800b6e0 <find_volume+0x29c>
 800b6dc:	230d      	movs	r3, #13
 800b6de:	e0fa      	b.n	800b8d6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b6e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6e4:	4413      	add	r3, r2
 800b6e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6e8:	8912      	ldrh	r2, [r2, #8]
 800b6ea:	0912      	lsrs	r2, r2, #4
 800b6ec:	b292      	uxth	r2, r2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b6f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d204      	bcs.n	800b704 <find_volume+0x2c0>
 800b6fa:	230d      	movs	r3, #13
 800b6fc:	e0eb      	b.n	800b8d6 <find_volume+0x492>
 800b6fe:	bf00      	nop
 800b700:	20000cb8 	.word	0x20000cb8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b70c:	8952      	ldrh	r2, [r2, #10]
 800b70e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b712:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <find_volume+0x2da>
 800b71a:	230d      	movs	r3, #13
 800b71c:	e0db      	b.n	800b8d6 <find_volume+0x492>
		fmt = FS_FAT32;
 800b71e:	2303      	movs	r3, #3
 800b720:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d802      	bhi.n	800b734 <find_volume+0x2f0>
 800b72e:	2302      	movs	r3, #2
 800b730:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b736:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d802      	bhi.n	800b744 <find_volume+0x300>
 800b73e:	2301      	movs	r3, #1
 800b740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	1c9a      	adds	r2, r3, #2
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b750:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b752:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b756:	441a      	add	r2, r3
 800b758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b75c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b760:	441a      	add	r2, r3
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b766:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d11e      	bne.n	800b7ac <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	3334      	adds	r3, #52	; 0x34
 800b772:	332a      	adds	r3, #42	; 0x2a
 800b774:	4618      	mov	r0, r3
 800b776:	f7fe fc15 	bl	8009fa4 <ld_word>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d001      	beq.n	800b784 <find_volume+0x340>
 800b780:	230d      	movs	r3, #13
 800b782:	e0a8      	b.n	800b8d6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b786:	891b      	ldrh	r3, [r3, #8]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d001      	beq.n	800b790 <find_volume+0x34c>
 800b78c:	230d      	movs	r3, #13
 800b78e:	e0a2      	b.n	800b8d6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b792:	3334      	adds	r3, #52	; 0x34
 800b794:	332c      	adds	r3, #44	; 0x2c
 800b796:	4618      	mov	r0, r3
 800b798:	f7fe fc1c 	bl	8009fd4 <ld_dword>
 800b79c:	4602      	mov	r2, r0
 800b79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	647b      	str	r3, [r7, #68]	; 0x44
 800b7aa:	e01f      	b.n	800b7ec <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ae:	891b      	ldrh	r3, [r3, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <find_volume+0x374>
 800b7b4:	230d      	movs	r3, #13
 800b7b6:	e08e      	b.n	800b8d6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7be:	441a      	add	r2, r3
 800b7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b7c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d103      	bne.n	800b7d4 <find_volume+0x390>
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	e00a      	b.n	800b7ea <find_volume+0x3a6>
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d6:	699a      	ldr	r2, [r3, #24]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	005b      	lsls	r3, r3, #1
 800b7dc:	4413      	add	r3, r2
 800b7de:	085a      	lsrs	r2, r3, #1
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	f003 0301 	and.w	r3, r3, #1
 800b7e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b7ea:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ee:	69da      	ldr	r2, [r3, #28]
 800b7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b7f6:	0a5b      	lsrs	r3, r3, #9
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d201      	bcs.n	800b800 <find_volume+0x3bc>
 800b7fc:	230d      	movs	r3, #13
 800b7fe:	e06a      	b.n	800b8d6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b806:	615a      	str	r2, [r3, #20]
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	695a      	ldr	r2, [r3, #20]
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b812:	2280      	movs	r2, #128	; 0x80
 800b814:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b816:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d149      	bne.n	800b8b2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b820:	3334      	adds	r3, #52	; 0x34
 800b822:	3330      	adds	r3, #48	; 0x30
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe fbbd 	bl	8009fa4 <ld_word>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d140      	bne.n	800b8b2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b832:	3301      	adds	r3, #1
 800b834:	4619      	mov	r1, r3
 800b836:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b838:	f7fe fe96 	bl	800a568 <move_window>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d137      	bne.n	800b8b2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800b842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b844:	2200      	movs	r2, #0
 800b846:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84a:	3334      	adds	r3, #52	; 0x34
 800b84c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b850:	4618      	mov	r0, r3
 800b852:	f7fe fba7 	bl	8009fa4 <ld_word>
 800b856:	4603      	mov	r3, r0
 800b858:	461a      	mov	r2, r3
 800b85a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b85e:	429a      	cmp	r2, r3
 800b860:	d127      	bne.n	800b8b2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b864:	3334      	adds	r3, #52	; 0x34
 800b866:	4618      	mov	r0, r3
 800b868:	f7fe fbb4 	bl	8009fd4 <ld_dword>
 800b86c:	4603      	mov	r3, r0
 800b86e:	4a1c      	ldr	r2, [pc, #112]	; (800b8e0 <find_volume+0x49c>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d11e      	bne.n	800b8b2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b876:	3334      	adds	r3, #52	; 0x34
 800b878:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fe fba9 	bl	8009fd4 <ld_dword>
 800b882:	4603      	mov	r3, r0
 800b884:	4a17      	ldr	r2, [pc, #92]	; (800b8e4 <find_volume+0x4a0>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d113      	bne.n	800b8b2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88c:	3334      	adds	r3, #52	; 0x34
 800b88e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe fb9e 	bl	8009fd4 <ld_dword>
 800b898:	4602      	mov	r2, r0
 800b89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a0:	3334      	adds	r3, #52	; 0x34
 800b8a2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe fb94 	bl	8009fd4 <ld_dword>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b8b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b8ba:	4b0b      	ldr	r3, [pc, #44]	; (800b8e8 <find_volume+0x4a4>)
 800b8bc:	881b      	ldrh	r3, [r3, #0]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	4b09      	ldr	r3, [pc, #36]	; (800b8e8 <find_volume+0x4a4>)
 800b8c4:	801a      	strh	r2, [r3, #0]
 800b8c6:	4b08      	ldr	r3, [pc, #32]	; (800b8e8 <find_volume+0x4a4>)
 800b8c8:	881a      	ldrh	r2, [r3, #0]
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b8ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8d0:	f7fe fde2 	bl	800a498 <clear_lock>
#endif
	return FR_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3758      	adds	r7, #88	; 0x58
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	41615252 	.word	0x41615252
 800b8e4:	61417272 	.word	0x61417272
 800b8e8:	20000cbc 	.word	0x20000cbc

0800b8ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b8f6:	2309      	movs	r3, #9
 800b8f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d02e      	beq.n	800b95e <validate+0x72>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d02a      	beq.n	800b95e <validate+0x72>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d025      	beq.n	800b95e <validate+0x72>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	889a      	ldrh	r2, [r3, #4]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	88db      	ldrh	r3, [r3, #6]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d11e      	bne.n	800b95e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4618      	mov	r0, r3
 800b926:	f7fe fc3d 	bl	800a1a4 <lock_fs>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d014      	beq.n	800b95a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	785b      	ldrb	r3, [r3, #1]
 800b936:	4618      	mov	r0, r3
 800b938:	f7fe fa96 	bl	8009e68 <disk_status>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f003 0301 	and.w	r3, r3, #1
 800b942:	2b00      	cmp	r3, #0
 800b944:	d102      	bne.n	800b94c <validate+0x60>
				res = FR_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]
 800b94a:	e008      	b.n	800b95e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2100      	movs	r1, #0
 800b952:	4618      	mov	r0, r3
 800b954:	f7fe fc3c 	bl	800a1d0 <unlock_fs>
 800b958:	e001      	b.n	800b95e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b95a:	230f      	movs	r3, #15
 800b95c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <validate+0x7e>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	e000      	b.n	800b96c <validate+0x80>
 800b96a:	2300      	movs	r3, #0
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	6013      	str	r3, [r2, #0]
	return res;
 800b970:	7bfb      	ldrb	r3, [r7, #15]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
	...

0800b97c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	4613      	mov	r3, r2
 800b988:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b98e:	f107 0310 	add.w	r3, r7, #16
 800b992:	4618      	mov	r0, r3
 800b994:	f7ff fcbb 	bl	800b30e <get_ldnumber>
 800b998:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	da01      	bge.n	800b9a4 <f_mount+0x28>
 800b9a0:	230b      	movs	r3, #11
 800b9a2:	e048      	b.n	800ba36 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b9a4:	4a26      	ldr	r2, [pc, #152]	; (800ba40 <f_mount+0xc4>)
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00f      	beq.n	800b9d4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b9b4:	69b8      	ldr	r0, [r7, #24]
 800b9b6:	f7fe fd6f 	bl	800a498 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f001 f902 	bl	800cbc8 <ff_del_syncobj>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <f_mount+0x52>
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	e033      	b.n	800ba36 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00f      	beq.n	800b9fa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	330c      	adds	r3, #12
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	f001 f8d3 	bl	800cb96 <ff_cre_syncobj>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <f_mount+0x7e>
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	e01d      	b.n	800ba36 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	4910      	ldr	r1, [pc, #64]	; (800ba40 <f_mount+0xc4>)
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d002      	beq.n	800ba10 <f_mount+0x94>
 800ba0a:	79fb      	ldrb	r3, [r7, #7]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d001      	beq.n	800ba14 <f_mount+0x98>
 800ba10:	2300      	movs	r3, #0
 800ba12:	e010      	b.n	800ba36 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ba14:	f107 010c 	add.w	r1, r7, #12
 800ba18:	f107 0308 	add.w	r3, r7, #8
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7ff fd10 	bl	800b444 <find_volume>
 800ba24:	4603      	mov	r3, r0
 800ba26:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	7dfa      	ldrb	r2, [r7, #23]
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fe fbce 	bl	800a1d0 <unlock_fs>
 800ba34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3720      	adds	r7, #32
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	20000cb8 	.word	0x20000cb8

0800ba44 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b098      	sub	sp, #96	; 0x60
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d101      	bne.n	800ba5c <f_open+0x18>
 800ba58:	2309      	movs	r3, #9
 800ba5a:	e1b4      	b.n	800bdc6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ba5c:	79fb      	ldrb	r3, [r7, #7]
 800ba5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba62:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ba64:	79fa      	ldrb	r2, [r7, #7]
 800ba66:	f107 0110 	add.w	r1, r7, #16
 800ba6a:	f107 0308 	add.w	r3, r7, #8
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff fce8 	bl	800b444 <find_volume>
 800ba74:	4603      	mov	r3, r0
 800ba76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ba7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f040 8191 	bne.w	800bda6 <f_open+0x362>
		dj.obj.fs = fs;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	f107 0314 	add.w	r3, r7, #20
 800ba8e:	4611      	mov	r1, r2
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7ff fbcb 	bl	800b22c <follow_path>
 800ba96:	4603      	mov	r3, r0
 800ba98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ba9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d11a      	bne.n	800bada <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800baa4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800baa8:	b25b      	sxtb	r3, r3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	da03      	bge.n	800bab6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800baae:	2306      	movs	r3, #6
 800bab0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bab4:	e011      	b.n	800bada <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bab6:	79fb      	ldrb	r3, [r7, #7]
 800bab8:	f023 0301 	bic.w	r3, r3, #1
 800babc:	2b00      	cmp	r3, #0
 800babe:	bf14      	ite	ne
 800bac0:	2301      	movne	r3, #1
 800bac2:	2300      	moveq	r3, #0
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	461a      	mov	r2, r3
 800bac8:	f107 0314 	add.w	r3, r7, #20
 800bacc:	4611      	mov	r1, r2
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe fb9a 	bl	800a208 <chk_lock>
 800bad4:	4603      	mov	r3, r0
 800bad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bada:	79fb      	ldrb	r3, [r7, #7]
 800badc:	f003 031c 	and.w	r3, r3, #28
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d07f      	beq.n	800bbe4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d017      	beq.n	800bb1c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800baec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	d10e      	bne.n	800bb12 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800baf4:	f7fe fbe4 	bl	800a2c0 <enq_lock>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d006      	beq.n	800bb0c <f_open+0xc8>
 800bafe:	f107 0314 	add.w	r3, r7, #20
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff facb 	bl	800b09e <dir_register>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	e000      	b.n	800bb0e <f_open+0xca>
 800bb0c:	2312      	movs	r3, #18
 800bb0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bb12:	79fb      	ldrb	r3, [r7, #7]
 800bb14:	f043 0308 	orr.w	r3, r3, #8
 800bb18:	71fb      	strb	r3, [r7, #7]
 800bb1a:	e010      	b.n	800bb3e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bb1c:	7ebb      	ldrb	r3, [r7, #26]
 800bb1e:	f003 0311 	and.w	r3, r3, #17
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d003      	beq.n	800bb2e <f_open+0xea>
					res = FR_DENIED;
 800bb26:	2307      	movs	r3, #7
 800bb28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bb2c:	e007      	b.n	800bb3e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bb2e:	79fb      	ldrb	r3, [r7, #7]
 800bb30:	f003 0304 	and.w	r3, r3, #4
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <f_open+0xfa>
 800bb38:	2308      	movs	r3, #8
 800bb3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bb3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d168      	bne.n	800bc18 <f_open+0x1d4>
 800bb46:	79fb      	ldrb	r3, [r7, #7]
 800bb48:	f003 0308 	and.w	r3, r3, #8
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d063      	beq.n	800bc18 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bb50:	f7fd ff36 	bl	80099c0 <get_fattime>
 800bb54:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb58:	330e      	adds	r3, #14
 800bb5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fe fa77 	bl	800a050 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb64:	3316      	adds	r3, #22
 800bb66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe fa71 	bl	800a050 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb70:	330b      	adds	r3, #11
 800bb72:	2220      	movs	r2, #32
 800bb74:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7ff f9fa 	bl	800af76 <ld_clust>
 800bb82:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb88:	2200      	movs	r2, #0
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7ff fa12 	bl	800afb4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb92:	331c      	adds	r3, #28
 800bb94:	2100      	movs	r1, #0
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fe fa5a 	bl	800a050 <st_dword>
					fs->wflag = 1;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d037      	beq.n	800bc18 <f_open+0x1d4>
						dw = fs->winsect;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbac:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bbae:	f107 0314 	add.w	r3, r7, #20
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe ff25 	bl	800aa06 <remove_chain>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800bbc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d126      	bne.n	800bc18 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fe fcca 	bl	800a568 <move_window>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bbde:	3a01      	subs	r2, #1
 800bbe0:	611a      	str	r2, [r3, #16]
 800bbe2:	e019      	b.n	800bc18 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bbe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d115      	bne.n	800bc18 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bbec:	7ebb      	ldrb	r3, [r7, #26]
 800bbee:	f003 0310 	and.w	r3, r3, #16
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d003      	beq.n	800bbfe <f_open+0x1ba>
					res = FR_NO_FILE;
 800bbf6:	2304      	movs	r3, #4
 800bbf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bbfc:	e00c      	b.n	800bc18 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bbfe:	79fb      	ldrb	r3, [r7, #7]
 800bc00:	f003 0302 	and.w	r3, r3, #2
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d007      	beq.n	800bc18 <f_open+0x1d4>
 800bc08:	7ebb      	ldrb	r3, [r7, #26]
 800bc0a:	f003 0301 	and.w	r3, r3, #1
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d002      	beq.n	800bc18 <f_open+0x1d4>
						res = FR_DENIED;
 800bc12:	2307      	movs	r3, #7
 800bc14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bc18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d128      	bne.n	800bc72 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bc20:	79fb      	ldrb	r3, [r7, #7]
 800bc22:	f003 0308 	and.w	r3, r3, #8
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bc2a:	79fb      	ldrb	r3, [r7, #7]
 800bc2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc30:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bc3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bc40:	79fb      	ldrb	r3, [r7, #7]
 800bc42:	f023 0301 	bic.w	r3, r3, #1
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	bf14      	ite	ne
 800bc4a:	2301      	movne	r3, #1
 800bc4c:	2300      	moveq	r3, #0
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	461a      	mov	r2, r3
 800bc52:	f107 0314 	add.w	r3, r7, #20
 800bc56:	4611      	mov	r1, r2
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fe fb53 	bl	800a304 <inc_lock>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d102      	bne.n	800bc72 <f_open+0x22e>
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bc72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f040 8095 	bne.w	800bda6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc80:	4611      	mov	r1, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff f977 	bl	800af76 <ld_clust>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc90:	331c      	adds	r3, #28
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fe f99e 	bl	8009fd4 <ld_dword>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	88da      	ldrh	r2, [r3, #6]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	79fa      	ldrb	r2, [r7, #7]
 800bcb6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	3330      	adds	r3, #48	; 0x30
 800bcce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fe fa08 	bl	800a0ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	f003 0320 	and.w	r3, r3, #32
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d060      	beq.n	800bda6 <f_open+0x362>
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d05c      	beq.n	800bda6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	68da      	ldr	r2, [r3, #12]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	895b      	ldrh	r3, [r3, #10]
 800bcf8:	025b      	lsls	r3, r3, #9
 800bcfa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	657b      	str	r3, [r7, #84]	; 0x54
 800bd08:	e016      	b.n	800bd38 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe fce5 	bl	800a6de <get_fat>
 800bd14:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bd16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d802      	bhi.n	800bd22 <f_open+0x2de>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bd22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd28:	d102      	bne.n	800bd30 <f_open+0x2ec>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bd30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	657b      	str	r3, [r7, #84]	; 0x54
 800bd38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d103      	bne.n	800bd48 <f_open+0x304>
 800bd40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d8e0      	bhi.n	800bd0a <f_open+0x2c6>
				}
				fp->clust = clst;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd4c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bd4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d127      	bne.n	800bda6 <f_open+0x362>
 800bd56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d022      	beq.n	800bda6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7fe fc9b 	bl	800a6a0 <clust2sect>
 800bd6a:	6478      	str	r0, [r7, #68]	; 0x44
 800bd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d103      	bne.n	800bd7a <f_open+0x336>
						res = FR_INT_ERR;
 800bd72:	2302      	movs	r3, #2
 800bd74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bd78:	e015      	b.n	800bda6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bd7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd7c:	0a5a      	lsrs	r2, r3, #9
 800bd7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd80:	441a      	add	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	7858      	ldrb	r0, [r3, #1]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6a1a      	ldr	r2, [r3, #32]
 800bd94:	2301      	movs	r3, #1
 800bd96:	f7fe f8a7 	bl	8009ee8 <disk_read>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d002      	beq.n	800bda6 <f_open+0x362>
 800bda0:	2301      	movs	r3, #1
 800bda2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bda6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d002      	beq.n	800bdb4 <f_open+0x370>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800bdba:	4611      	mov	r1, r2
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fe fa07 	bl	800a1d0 <unlock_fs>
 800bdc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3760      	adds	r7, #96	; 0x60
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b08c      	sub	sp, #48	; 0x30
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	60f8      	str	r0, [r7, #12]
 800bdd6:	60b9      	str	r1, [r7, #8]
 800bdd8:	607a      	str	r2, [r7, #4]
 800bdda:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	2200      	movs	r2, #0
 800bde4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f107 0210 	add.w	r2, r7, #16
 800bdec:	4611      	mov	r1, r2
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff fd7c 	bl	800b8ec <validate>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bdfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d107      	bne.n	800be12 <f_write+0x44>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	7d5b      	ldrb	r3, [r3, #21]
 800be06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800be0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d009      	beq.n	800be26 <f_write+0x58>
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800be18:	4611      	mov	r1, r2
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe f9d8 	bl	800a1d0 <unlock_fs>
 800be20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be24:	e173      	b.n	800c10e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	7d1b      	ldrb	r3, [r3, #20]
 800be2a:	f003 0302 	and.w	r3, r3, #2
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <f_write+0x72>
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	2107      	movs	r1, #7
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe f9ca 	bl	800a1d0 <unlock_fs>
 800be3c:	2307      	movs	r3, #7
 800be3e:	e166      	b.n	800c10e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	699a      	ldr	r2, [r3, #24]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	441a      	add	r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	f080 814b 	bcs.w	800c0e8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	699b      	ldr	r3, [r3, #24]
 800be56:	43db      	mvns	r3, r3
 800be58:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800be5a:	e145      	b.n	800c0e8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be64:	2b00      	cmp	r3, #0
 800be66:	f040 8101 	bne.w	800c06c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	0a5b      	lsrs	r3, r3, #9
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	8952      	ldrh	r2, [r2, #10]
 800be74:	3a01      	subs	r2, #1
 800be76:	4013      	ands	r3, r2
 800be78:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d14d      	bne.n	800bf1c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10c      	bne.n	800bea2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800be8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be90:	2b00      	cmp	r3, #0
 800be92:	d11a      	bne.n	800beca <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2100      	movs	r1, #0
 800be98:	4618      	mov	r0, r3
 800be9a:	f7fe fe19 	bl	800aad0 <create_chain>
 800be9e:	62b8      	str	r0, [r7, #40]	; 0x28
 800bea0:	e013      	b.n	800beca <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d007      	beq.n	800beba <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	4619      	mov	r1, r3
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f7fe fea5 	bl	800ac00 <clmt_clust>
 800beb6:	62b8      	str	r0, [r7, #40]	; 0x28
 800beb8:	e007      	b.n	800beca <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	69db      	ldr	r3, [r3, #28]
 800bec0:	4619      	mov	r1, r3
 800bec2:	4610      	mov	r0, r2
 800bec4:	f7fe fe04 	bl	800aad0 <create_chain>
 800bec8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800beca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800becc:	2b00      	cmp	r3, #0
 800bece:	f000 8110 	beq.w	800c0f2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d109      	bne.n	800beec <f_write+0x11e>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2202      	movs	r2, #2
 800bedc:	755a      	strb	r2, [r3, #21]
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	2102      	movs	r1, #2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fe f974 	bl	800a1d0 <unlock_fs>
 800bee8:	2302      	movs	r3, #2
 800beea:	e110      	b.n	800c10e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bef2:	d109      	bne.n	800bf08 <f_write+0x13a>
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2201      	movs	r2, #1
 800bef8:	755a      	strb	r2, [r3, #21]
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	2101      	movs	r1, #1
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fe f966 	bl	800a1d0 <unlock_fs>
 800bf04:	2301      	movs	r3, #1
 800bf06:	e102      	b.n	800c10e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf0c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d102      	bne.n	800bf1c <f_write+0x14e>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf1a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	7d1b      	ldrb	r3, [r3, #20]
 800bf20:	b25b      	sxtb	r3, r3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	da1d      	bge.n	800bf62 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	7858      	ldrb	r0, [r3, #1]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6a1a      	ldr	r2, [r3, #32]
 800bf34:	2301      	movs	r3, #1
 800bf36:	f7fd fff7 	bl	8009f28 <disk_write>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d009      	beq.n	800bf54 <f_write+0x186>
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2201      	movs	r2, #1
 800bf44:	755a      	strb	r2, [r3, #21]
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	2101      	movs	r1, #1
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fe f940 	bl	800a1d0 <unlock_fs>
 800bf50:	2301      	movs	r3, #1
 800bf52:	e0dc      	b.n	800c10e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	7d1b      	ldrb	r3, [r3, #20]
 800bf58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bf62:	693a      	ldr	r2, [r7, #16]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	69db      	ldr	r3, [r3, #28]
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	f7fe fb98 	bl	800a6a0 <clust2sect>
 800bf70:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d109      	bne.n	800bf8c <f_write+0x1be>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	755a      	strb	r2, [r3, #21]
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	2102      	movs	r1, #2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fe f924 	bl	800a1d0 <unlock_fs>
 800bf88:	2302      	movs	r3, #2
 800bf8a:	e0c0      	b.n	800c10e <f_write+0x340>
			sect += csect;
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	4413      	add	r3, r2
 800bf92:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	0a5b      	lsrs	r3, r3, #9
 800bf98:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bf9a:	6a3b      	ldr	r3, [r7, #32]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d041      	beq.n	800c024 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bfa0:	69ba      	ldr	r2, [r7, #24]
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	8952      	ldrh	r2, [r2, #10]
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d905      	bls.n	800bfba <f_write+0x1ec>
					cc = fs->csize - csect;
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	895b      	ldrh	r3, [r3, #10]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	1ad3      	subs	r3, r2, r3
 800bfb8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	7858      	ldrb	r0, [r3, #1]
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	69f9      	ldr	r1, [r7, #28]
 800bfc4:	f7fd ffb0 	bl	8009f28 <disk_write>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d009      	beq.n	800bfe2 <f_write+0x214>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	755a      	strb	r2, [r3, #21]
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe f8f9 	bl	800a1d0 <unlock_fs>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e095      	b.n	800c10e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6a1a      	ldr	r2, [r3, #32]
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	6a3a      	ldr	r2, [r7, #32]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d915      	bls.n	800c01c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6a1a      	ldr	r2, [r3, #32]
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	025b      	lsls	r3, r3, #9
 800c000:	69fa      	ldr	r2, [r7, #28]
 800c002:	4413      	add	r3, r2
 800c004:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c008:	4619      	mov	r1, r3
 800c00a:	f7fe f84d 	bl	800a0a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	7d1b      	ldrb	r3, [r3, #20]
 800c012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c016:	b2da      	uxtb	r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c01c:	6a3b      	ldr	r3, [r7, #32]
 800c01e:	025b      	lsls	r3, r3, #9
 800c020:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c022:	e044      	b.n	800c0ae <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6a1b      	ldr	r3, [r3, #32]
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d01b      	beq.n	800c066 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	699a      	ldr	r2, [r3, #24]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c036:	429a      	cmp	r2, r3
 800c038:	d215      	bcs.n	800c066 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	7858      	ldrb	r0, [r3, #1]
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c044:	2301      	movs	r3, #1
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	f7fd ff4e 	bl	8009ee8 <disk_read>
 800c04c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d009      	beq.n	800c066 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2201      	movs	r2, #1
 800c056:	755a      	strb	r2, [r3, #21]
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	2101      	movs	r1, #1
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7fe f8b7 	bl	800a1d0 <unlock_fs>
 800c062:	2301      	movs	r3, #1
 800c064:	e053      	b.n	800c10e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	699b      	ldr	r3, [r3, #24]
 800c070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c074:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c078:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d901      	bls.n	800c086 <f_write+0x2b8>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c094:	4413      	add	r3, r2
 800c096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c098:	69f9      	ldr	r1, [r7, #28]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fe f804 	bl	800a0a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	7d1b      	ldrb	r3, [r3, #20]
 800c0a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c0a8:	b2da      	uxtb	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c0ae:	69fa      	ldr	r2, [r7, #28]
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	4413      	add	r3, r2
 800c0b4:	61fb      	str	r3, [r7, #28]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	699a      	ldr	r2, [r3, #24]
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	441a      	add	r2, r3
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	619a      	str	r2, [r3, #24]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	68da      	ldr	r2, [r3, #12]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	699b      	ldr	r3, [r3, #24]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	bf38      	it	cc
 800c0ce:	461a      	movcc	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	60da      	str	r2, [r3, #12]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	441a      	add	r2, r3
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	601a      	str	r2, [r3, #0]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f47f aeb6 	bne.w	800be5c <f_write+0x8e>
 800c0f0:	e000      	b.n	800c0f4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c0f2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	7d1b      	ldrb	r3, [r3, #20]
 800c0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0fc:	b2da      	uxtb	r2, r3
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	2100      	movs	r1, #0
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe f862 	bl	800a1d0 <unlock_fs>
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3730      	adds	r7, #48	; 0x30
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b086      	sub	sp, #24
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f107 0208 	add.w	r2, r7, #8
 800c124:	4611      	mov	r1, r2
 800c126:	4618      	mov	r0, r3
 800c128:	f7ff fbe0 	bl	800b8ec <validate>
 800c12c:	4603      	mov	r3, r0
 800c12e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c130:	7dfb      	ldrb	r3, [r7, #23]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d16d      	bne.n	800c212 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	7d1b      	ldrb	r3, [r3, #20]
 800c13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d067      	beq.n	800c212 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7d1b      	ldrb	r3, [r3, #20]
 800c146:	b25b      	sxtb	r3, r3
 800c148:	2b00      	cmp	r3, #0
 800c14a:	da1a      	bge.n	800c182 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	7858      	ldrb	r0, [r3, #1]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a1a      	ldr	r2, [r3, #32]
 800c15a:	2301      	movs	r3, #1
 800c15c:	f7fd fee4 	bl	8009f28 <disk_write>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d006      	beq.n	800c174 <f_sync+0x5e>
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2101      	movs	r1, #1
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7fe f830 	bl	800a1d0 <unlock_fs>
 800c170:	2301      	movs	r3, #1
 800c172:	e055      	b.n	800c220 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	7d1b      	ldrb	r3, [r3, #20]
 800c178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c182:	f7fd fc1d 	bl	80099c0 <get_fattime>
 800c186:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18e:	4619      	mov	r1, r3
 800c190:	4610      	mov	r0, r2
 800c192:	f7fe f9e9 	bl	800a568 <move_window>
 800c196:	4603      	mov	r3, r0
 800c198:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d138      	bne.n	800c212 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	330b      	adds	r3, #11
 800c1aa:	781a      	ldrb	r2, [r3, #0]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	330b      	adds	r3, #11
 800c1b0:	f042 0220 	orr.w	r2, r2, #32
 800c1b4:	b2d2      	uxtb	r2, r2
 800c1b6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6818      	ldr	r0, [r3, #0]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	68f9      	ldr	r1, [r7, #12]
 800c1c4:	f7fe fef6 	bl	800afb4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f103 021c 	add.w	r2, r3, #28
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	f7fd ff3b 	bl	800a050 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	3316      	adds	r3, #22
 800c1de:	6939      	ldr	r1, [r7, #16]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fd ff35 	bl	800a050 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3312      	adds	r3, #18
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fd ff14 	bl	800a01a <st_word>
					fs->wflag = 1;
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fe f9e2 	bl	800a5c4 <sync_fs>
 800c200:	4603      	mov	r3, r0
 800c202:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	7d1b      	ldrb	r3, [r3, #20]
 800c208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	7dfa      	ldrb	r2, [r7, #23]
 800c216:	4611      	mov	r1, r2
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fd ffd9 	bl	800a1d0 <unlock_fs>
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3718      	adds	r7, #24
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7ff ff70 	bl	800c116 <f_sync>
 800c236:	4603      	mov	r3, r0
 800c238:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d11d      	bne.n	800c27c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f107 0208 	add.w	r2, r7, #8
 800c246:	4611      	mov	r1, r2
 800c248:	4618      	mov	r0, r3
 800c24a:	f7ff fb4f 	bl	800b8ec <validate>
 800c24e:	4603      	mov	r3, r0
 800c250:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c252:	7bfb      	ldrb	r3, [r7, #15]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d111      	bne.n	800c27c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	691b      	ldr	r3, [r3, #16]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7fe f8df 	bl	800a420 <dec_lock>
 800c262:	4603      	mov	r3, r0
 800c264:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c266:	7bfb      	ldrb	r3, [r7, #15]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	2100      	movs	r1, #0
 800c276:	4618      	mov	r0, r3
 800c278:	f7fd ffaa 	bl	800a1d0 <unlock_fs>
#endif
		}
	}
	return res;
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
	...

0800c288 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800c288:	b590      	push	{r4, r7, lr}
 800c28a:	b09d      	sub	sp, #116	; 0x74
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	607a      	str	r2, [r7, #4]
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	460b      	mov	r3, r1
 800c296:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800c298:	2301      	movs	r3, #1
 800c29a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800c29c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2a0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800c2a2:	f107 030c 	add.w	r3, r7, #12
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7ff f831 	bl	800b30e <get_ldnumber>
 800c2ac:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	da02      	bge.n	800c2ba <f_mkfs+0x32>
 800c2b4:	230b      	movs	r3, #11
 800c2b6:	f000 bc0d 	b.w	800cad4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800c2ba:	4a94      	ldr	r2, [pc, #592]	; (800c50c <f_mkfs+0x284>)
 800c2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d005      	beq.n	800c2d2 <f_mkfs+0x4a>
 800c2c6:	4a91      	ldr	r2, [pc, #580]	; (800c50c <f_mkfs+0x284>)
 800c2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800c2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800c2de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fd fdda 	bl	8009e9c <disk_initialize>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800c2ee:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <f_mkfs+0x76>
 800c2fa:	2303      	movs	r3, #3
 800c2fc:	e3ea      	b.n	800cad4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800c2fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c302:	f003 0304 	and.w	r3, r3, #4
 800c306:	2b00      	cmp	r3, #0
 800c308:	d001      	beq.n	800c30e <f_mkfs+0x86>
 800c30a:	230a      	movs	r3, #10
 800c30c:	e3e2      	b.n	800cad4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800c30e:	f107 0214 	add.w	r2, r7, #20
 800c312:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c316:	2103      	movs	r1, #3
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fd fe25 	bl	8009f68 <disk_ioctl>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10c      	bne.n	800c33e <f_mkfs+0xb6>
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d009      	beq.n	800c33e <f_mkfs+0xb6>
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c330:	d805      	bhi.n	800c33e <f_mkfs+0xb6>
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	1e5a      	subs	r2, r3, #1
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	4013      	ands	r3, r2
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d001      	beq.n	800c342 <f_mkfs+0xba>
 800c33e:	2301      	movs	r3, #1
 800c340:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800c342:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c346:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <f_mkfs+0xce>
 800c34e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	429a      	cmp	r2, r3
 800c354:	d309      	bcc.n	800c36a <f_mkfs+0xe2>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c35c:	d805      	bhi.n	800c36a <f_mkfs+0xe2>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	1e5a      	subs	r2, r3, #1
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4013      	ands	r3, r2
 800c366:	2b00      	cmp	r3, #0
 800c368:	d001      	beq.n	800c36e <f_mkfs+0xe6>
 800c36a:	2313      	movs	r3, #19
 800c36c:	e3b2      	b.n	800cad4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800c36e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	fbb2 f3f3 	udiv	r3, r2, r3
 800c376:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800c37c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c37e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c382:	fbb2 f3f3 	udiv	r3, r2, r3
 800c386:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800c388:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	fb02 f303 	mul.w	r3, r2, r3
 800c390:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800c392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c394:	2b00      	cmp	r3, #0
 800c396:	d101      	bne.n	800c39c <f_mkfs+0x114>
 800c398:	230e      	movs	r3, #14
 800c39a:	e39b      	b.n	800cad4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800c39c:	f107 0210 	add.w	r2, r7, #16
 800c3a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c3a4:	2101      	movs	r1, #1
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7fd fdde 	bl	8009f68 <disk_ioctl>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <f_mkfs+0x12e>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e38e      	b.n	800cad4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800c3b6:	7afb      	ldrb	r3, [r7, #11]
 800c3b8:	f003 0308 	and.w	r3, r3, #8
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d001      	beq.n	800c3c4 <f_mkfs+0x13c>
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	e000      	b.n	800c3c6 <f_mkfs+0x13e>
 800c3c4:	233f      	movs	r3, #63	; 0x3f
 800c3c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d901      	bls.n	800c3d4 <f_mkfs+0x14c>
 800c3d0:	230e      	movs	r3, #14
 800c3d2:	e37f      	b.n	800cad4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	2b7f      	cmp	r3, #127	; 0x7f
 800c3e0:	d801      	bhi.n	800c3e6 <f_mkfs+0x15e>
 800c3e2:	230e      	movs	r3, #14
 800c3e4:	e376      	b.n	800cad4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b80      	cmp	r3, #128	; 0x80
 800c3ea:	d901      	bls.n	800c3f0 <f_mkfs+0x168>
 800c3ec:	2313      	movs	r3, #19
 800c3ee:	e371      	b.n	800cad4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800c3f0:	7afb      	ldrb	r3, [r7, #11]
 800c3f2:	f003 0302 	and.w	r3, r3, #2
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00d      	beq.n	800c416 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800c3fa:	7afb      	ldrb	r3, [r7, #11]
 800c3fc:	f003 0307 	and.w	r3, r3, #7
 800c400:	2b02      	cmp	r3, #2
 800c402:	d004      	beq.n	800c40e <f_mkfs+0x186>
 800c404:	7afb      	ldrb	r3, [r7, #11]
 800c406:	f003 0301 	and.w	r3, r3, #1
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d103      	bne.n	800c416 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800c40e:	2303      	movs	r3, #3
 800c410:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c414:	e009      	b.n	800c42a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800c416:	7afb      	ldrb	r3, [r7, #11]
 800c418:	f003 0301 	and.w	r3, r3, #1
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <f_mkfs+0x19c>
 800c420:	2313      	movs	r3, #19
 800c422:	e357      	b.n	800cad4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800c424:	2302      	movs	r3, #2
 800c426:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800c42e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c432:	2b03      	cmp	r3, #3
 800c434:	d13c      	bne.n	800c4b0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800c436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d11b      	bne.n	800c474 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	0c5b      	lsrs	r3, r3, #17
 800c440:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800c442:	2300      	movs	r3, #0
 800c444:	64bb      	str	r3, [r7, #72]	; 0x48
 800c446:	2301      	movs	r3, #1
 800c448:	653b      	str	r3, [r7, #80]	; 0x50
 800c44a:	e005      	b.n	800c458 <f_mkfs+0x1d0>
 800c44c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c44e:	3301      	adds	r3, #1
 800c450:	64bb      	str	r3, [r7, #72]	; 0x48
 800c452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	653b      	str	r3, [r7, #80]	; 0x50
 800c458:	4a2d      	ldr	r2, [pc, #180]	; (800c510 <f_mkfs+0x288>)
 800c45a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c45c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d007      	beq.n	800c474 <f_mkfs+0x1ec>
 800c464:	4a2a      	ldr	r2, [pc, #168]	; (800c510 <f_mkfs+0x288>)
 800c466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c46c:	461a      	mov	r2, r3
 800c46e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c470:	4293      	cmp	r3, r2
 800c472:	d2eb      	bcs.n	800c44c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c478:	fbb2 f3f3 	udiv	r3, r2, r3
 800c47c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800c47e:	6a3b      	ldr	r3, [r7, #32]
 800c480:	3302      	adds	r3, #2
 800c482:	009a      	lsls	r2, r3, #2
 800c484:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c486:	4413      	add	r3, r2
 800c488:	1e5a      	subs	r2, r3, #1
 800c48a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c490:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800c492:	2320      	movs	r3, #32
 800c494:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800c496:	2300      	movs	r3, #0
 800c498:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800c49a:	6a3b      	ldr	r3, [r7, #32]
 800c49c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d903      	bls.n	800c4ac <f_mkfs+0x224>
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	4a1b      	ldr	r2, [pc, #108]	; (800c514 <f_mkfs+0x28c>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d952      	bls.n	800c552 <f_mkfs+0x2ca>
 800c4ac:	230e      	movs	r3, #14
 800c4ae:	e311      	b.n	800cad4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800c4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d11b      	bne.n	800c4ee <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	0b1b      	lsrs	r3, r3, #12
 800c4ba:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800c4bc:	2300      	movs	r3, #0
 800c4be:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	653b      	str	r3, [r7, #80]	; 0x50
 800c4c4:	e005      	b.n	800c4d2 <f_mkfs+0x24a>
 800c4c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	653b      	str	r3, [r7, #80]	; 0x50
 800c4d2:	4a11      	ldr	r2, [pc, #68]	; (800c518 <f_mkfs+0x290>)
 800c4d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d007      	beq.n	800c4ee <f_mkfs+0x266>
 800c4de:	4a0e      	ldr	r2, [pc, #56]	; (800c518 <f_mkfs+0x290>)
 800c4e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d2eb      	bcs.n	800c4c6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800c4ee:	693a      	ldr	r2, [r7, #16]
 800c4f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4f6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800c4f8:	6a3b      	ldr	r3, [r7, #32]
 800c4fa:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d90c      	bls.n	800c51c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800c502:	6a3b      	ldr	r3, [r7, #32]
 800c504:	3302      	adds	r3, #2
 800c506:	005b      	lsls	r3, r3, #1
 800c508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c50a:	e012      	b.n	800c532 <f_mkfs+0x2aa>
 800c50c:	20000cb8 	.word	0x20000cb8
 800c510:	08015678 	.word	0x08015678
 800c514:	0ffffff5 	.word	0x0ffffff5
 800c518:	08015688 	.word	0x08015688
				} else {
					fmt = FS_FAT12;
 800c51c:	2301      	movs	r3, #1
 800c51e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800c522:	6a3a      	ldr	r2, [r7, #32]
 800c524:	4613      	mov	r3, r2
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	4413      	add	r3, r2
 800c52a:	3301      	adds	r3, #1
 800c52c:	085b      	lsrs	r3, r3, #1
 800c52e:	3303      	adds	r3, #3
 800c530:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800c532:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c536:	4413      	add	r3, r2
 800c538:	1e5a      	subs	r2, r3, #1
 800c53a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c53c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c540:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800c542:	2301      	movs	r3, #1
 800c544:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800c546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c548:	015a      	lsls	r2, r3, #5
 800c54a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c54c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c550:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800c552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c556:	4413      	add	r3, r2
 800c558:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800c55a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c55c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c55e:	fb03 f202 	mul.w	r2, r3, r2
 800c562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c564:	4413      	add	r3, r2
 800c566:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c568:	4413      	add	r3, r2
 800c56a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	4413      	add	r3, r2
 800c572:	1e5a      	subs	r2, r3, #1
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	425b      	negs	r3, r3
 800c578:	401a      	ands	r2, r3
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800c580:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c584:	2b03      	cmp	r3, #3
 800c586:	d108      	bne.n	800c59a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800c588:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c58a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c58c:	4413      	add	r3, r2
 800c58e:	657b      	str	r3, [r7, #84]	; 0x54
 800c590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c594:	4413      	add	r3, r2
 800c596:	65bb      	str	r3, [r7, #88]	; 0x58
 800c598:	e006      	b.n	800c5a8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800c59a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c59c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c59e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5a4:	4413      	add	r3, r2
 800c5a6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800c5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5aa:	011a      	lsls	r2, r3, #4
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	441a      	add	r2, r3
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	1ad2      	subs	r2, r2, r3
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d901      	bls.n	800c5be <f_mkfs+0x336>
 800c5ba:	230e      	movs	r3, #14
 800c5bc:	e28a      	b.n	800cad4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800c5be:	693a      	ldr	r2, [r7, #16]
 800c5c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5c2:	1ad2      	subs	r2, r2, r3
 800c5c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5c8:	fb01 f303 	mul.w	r3, r1, r3
 800c5cc:	1ad2      	subs	r2, r2, r3
 800c5ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5d0:	1ad2      	subs	r2, r2, r3
 800c5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5d8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800c5da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c5de:	2b03      	cmp	r3, #3
 800c5e0:	d10f      	bne.n	800c602 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d80a      	bhi.n	800c602 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d105      	bne.n	800c5fe <f_mkfs+0x376>
 800c5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5f4:	085b      	lsrs	r3, r3, #1
 800c5f6:	607b      	str	r3, [r7, #4]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d144      	bne.n	800c688 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800c5fe:	230e      	movs	r3, #14
 800c600:	e268      	b.n	800cad4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800c602:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c606:	2b02      	cmp	r3, #2
 800c608:	d133      	bne.n	800c672 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c610:	4293      	cmp	r3, r2
 800c612:	d91e      	bls.n	800c652 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d107      	bne.n	800c62a <f_mkfs+0x3a2>
 800c61a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c61c:	005b      	lsls	r3, r3, #1
 800c61e:	2b40      	cmp	r3, #64	; 0x40
 800c620:	d803      	bhi.n	800c62a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800c622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	607b      	str	r3, [r7, #4]
 800c628:	e033      	b.n	800c692 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800c62a:	7afb      	ldrb	r3, [r7, #11]
 800c62c:	f003 0302 	and.w	r3, r3, #2
 800c630:	2b00      	cmp	r3, #0
 800c632:	d003      	beq.n	800c63c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800c634:	2303      	movs	r3, #3
 800c636:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c63a:	e02a      	b.n	800c692 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d105      	bne.n	800c64e <f_mkfs+0x3c6>
 800c642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c644:	005b      	lsls	r3, r3, #1
 800c646:	607b      	str	r3, [r7, #4]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b80      	cmp	r3, #128	; 0x80
 800c64c:	d91e      	bls.n	800c68c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800c64e:	230e      	movs	r3, #14
 800c650:	e240      	b.n	800cad4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c658:	4293      	cmp	r3, r2
 800c65a:	d80a      	bhi.n	800c672 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d105      	bne.n	800c66e <f_mkfs+0x3e6>
 800c662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	607b      	str	r3, [r7, #4]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2b80      	cmp	r3, #128	; 0x80
 800c66c:	d910      	bls.n	800c690 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800c66e:	230e      	movs	r3, #14
 800c670:	e230      	b.n	800cad4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800c672:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c676:	2b01      	cmp	r3, #1
 800c678:	d10c      	bne.n	800c694 <f_mkfs+0x40c>
 800c67a:	6a3b      	ldr	r3, [r7, #32]
 800c67c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c680:	4293      	cmp	r3, r2
 800c682:	d907      	bls.n	800c694 <f_mkfs+0x40c>
 800c684:	230e      	movs	r3, #14
 800c686:	e225      	b.n	800cad4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800c688:	bf00      	nop
 800c68a:	e6ce      	b.n	800c42a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c68c:	bf00      	nop
 800c68e:	e6cc      	b.n	800c42a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c690:	bf00      	nop
			pau = au;
 800c692:	e6ca      	b.n	800c42a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800c694:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800c696:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c698:	461a      	mov	r2, r3
 800c69a:	2100      	movs	r1, #0
 800c69c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c69e:	f7fd fd24 	bl	800a0ea <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800c6a2:	220b      	movs	r2, #11
 800c6a4:	49b2      	ldr	r1, [pc, #712]	; (800c970 <f_mkfs+0x6e8>)
 800c6a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6a8:	f7fd fcfe 	bl	800a0a8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800c6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ae:	330b      	adds	r3, #11
 800c6b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c6b2:	4611      	mov	r1, r2
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7fd fcb0 	bl	800a01a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	330d      	adds	r3, #13
 800c6be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c6c0:	b2d2      	uxtb	r2, r2
 800c6c2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c6:	330e      	adds	r3, #14
 800c6c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6ca:	b292      	uxth	r2, r2
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fd fca3 	bl	800a01a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d6:	3310      	adds	r3, #16
 800c6d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6da:	b2d2      	uxtb	r2, r2
 800c6dc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	f103 0211 	add.w	r2, r3, #17
 800c6e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c6e8:	2b03      	cmp	r3, #3
 800c6ea:	d002      	beq.n	800c6f2 <f_mkfs+0x46a>
 800c6ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	e000      	b.n	800c6f4 <f_mkfs+0x46c>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	4610      	mov	r0, r2
 800c6f8:	f7fd fc8f 	bl	800a01a <st_word>
		if (sz_vol < 0x10000) {
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c702:	d208      	bcs.n	800c716 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800c704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c706:	3313      	adds	r3, #19
 800c708:	693a      	ldr	r2, [r7, #16]
 800c70a:	b292      	uxth	r2, r2
 800c70c:	4611      	mov	r1, r2
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fd fc83 	bl	800a01a <st_word>
 800c714:	e006      	b.n	800c724 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800c716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c718:	3320      	adds	r3, #32
 800c71a:	693a      	ldr	r2, [r7, #16]
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fd fc96 	bl	800a050 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800c724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c726:	3315      	adds	r3, #21
 800c728:	22f8      	movs	r2, #248	; 0xf8
 800c72a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800c72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72e:	3318      	adds	r3, #24
 800c730:	213f      	movs	r1, #63	; 0x3f
 800c732:	4618      	mov	r0, r3
 800c734:	f7fd fc71 	bl	800a01a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800c738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73a:	331a      	adds	r3, #26
 800c73c:	21ff      	movs	r1, #255	; 0xff
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fd fc6b 	bl	800a01a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800c744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c746:	331c      	adds	r3, #28
 800c748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fd fc80 	bl	800a050 <st_dword>
		if (fmt == FS_FAT32) {
 800c750:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c754:	2b03      	cmp	r3, #3
 800c756:	d131      	bne.n	800c7bc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800c758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800c75e:	f7fd f92f 	bl	80099c0 <get_fattime>
 800c762:	4603      	mov	r3, r0
 800c764:	4619      	mov	r1, r3
 800c766:	4620      	mov	r0, r4
 800c768:	f7fd fc72 	bl	800a050 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	3324      	adds	r3, #36	; 0x24
 800c770:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c772:	4618      	mov	r0, r3
 800c774:	f7fd fc6c 	bl	800a050 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77a:	332c      	adds	r3, #44	; 0x2c
 800c77c:	2102      	movs	r1, #2
 800c77e:	4618      	mov	r0, r3
 800c780:	f7fd fc66 	bl	800a050 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800c784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c786:	3330      	adds	r3, #48	; 0x30
 800c788:	2101      	movs	r1, #1
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fd fc45 	bl	800a01a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	3332      	adds	r3, #50	; 0x32
 800c794:	2106      	movs	r1, #6
 800c796:	4618      	mov	r0, r3
 800c798:	f7fd fc3f 	bl	800a01a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	3340      	adds	r3, #64	; 0x40
 800c7a0:	2280      	movs	r2, #128	; 0x80
 800c7a2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800c7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a6:	3342      	adds	r3, #66	; 0x42
 800c7a8:	2229      	movs	r2, #41	; 0x29
 800c7aa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ae:	3347      	adds	r3, #71	; 0x47
 800c7b0:	2213      	movs	r2, #19
 800c7b2:	4970      	ldr	r1, [pc, #448]	; (800c974 <f_mkfs+0x6ec>)
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fd fc77 	bl	800a0a8 <mem_cpy>
 800c7ba:	e020      	b.n	800c7fe <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7be:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c7c2:	f7fd f8fd 	bl	80099c0 <get_fattime>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f7fd fc40 	bl	800a050 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	3316      	adds	r3, #22
 800c7d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c7d6:	b292      	uxth	r2, r2
 800c7d8:	4611      	mov	r1, r2
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fd fc1d 	bl	800a01a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e2:	3324      	adds	r3, #36	; 0x24
 800c7e4:	2280      	movs	r2, #128	; 0x80
 800c7e6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ea:	3326      	adds	r3, #38	; 0x26
 800c7ec:	2229      	movs	r2, #41	; 0x29
 800c7ee:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f2:	332b      	adds	r3, #43	; 0x2b
 800c7f4:	2213      	movs	r2, #19
 800c7f6:	4960      	ldr	r1, [pc, #384]	; (800c978 <f_mkfs+0x6f0>)
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fd fc55 	bl	800a0a8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c804:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fd fc06 	bl	800a01a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c80e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c812:	2301      	movs	r3, #1
 800c814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c818:	f7fd fb86 	bl	8009f28 <disk_write>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <f_mkfs+0x59e>
 800c822:	2301      	movs	r3, #1
 800c824:	e156      	b.n	800cad4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c826:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c82a:	2b03      	cmp	r3, #3
 800c82c:	d140      	bne.n	800c8b0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c830:	1d9a      	adds	r2, r3, #6
 800c832:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c836:	2301      	movs	r3, #1
 800c838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c83a:	f7fd fb75 	bl	8009f28 <disk_write>
			mem_set(buf, 0, ss);
 800c83e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c840:	461a      	mov	r2, r3
 800c842:	2100      	movs	r1, #0
 800c844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c846:	f7fd fc50 	bl	800a0ea <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c84a:	494c      	ldr	r1, [pc, #304]	; (800c97c <f_mkfs+0x6f4>)
 800c84c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c84e:	f7fd fbff 	bl	800a050 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c854:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c858:	4949      	ldr	r1, [pc, #292]	; (800c980 <f_mkfs+0x6f8>)
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fd fbf8 	bl	800a050 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c862:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c866:	6a3b      	ldr	r3, [r7, #32]
 800c868:	3b01      	subs	r3, #1
 800c86a:	4619      	mov	r1, r3
 800c86c:	4610      	mov	r0, r2
 800c86e:	f7fd fbef 	bl	800a050 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c874:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c878:	2102      	movs	r1, #2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fd fbe8 	bl	800a050 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c882:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c886:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fd fbc5 	bl	800a01a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c892:	1dda      	adds	r2, r3, #7
 800c894:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c898:	2301      	movs	r3, #1
 800c89a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c89c:	f7fd fb44 	bl	8009f28 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a2:	1c5a      	adds	r2, r3, #1
 800c8a4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8ac:	f7fd fb3c 	bl	8009f28 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c8b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8b6:	f7fd fc18 	bl	800a0ea <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c8ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8bc:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c8be:	2300      	movs	r3, #0
 800c8c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8c2:	e04b      	b.n	800c95c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c8c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c8c8:	2b03      	cmp	r3, #3
 800c8ca:	d113      	bne.n	800c8f4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c8cc:	f06f 0107 	mvn.w	r1, #7
 800c8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8d2:	f7fd fbbd 	bl	800a050 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	3304      	adds	r3, #4
 800c8da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fd fbb6 	bl	800a050 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	3308      	adds	r3, #8
 800c8e8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fd fbaf 	bl	800a050 <st_dword>
 800c8f2:	e00b      	b.n	800c90c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c8f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d101      	bne.n	800c900 <f_mkfs+0x678>
 800c8fc:	4b21      	ldr	r3, [pc, #132]	; (800c984 <f_mkfs+0x6fc>)
 800c8fe:	e001      	b.n	800c904 <f_mkfs+0x67c>
 800c900:	f06f 0307 	mvn.w	r3, #7
 800c904:	4619      	mov	r1, r3
 800c906:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c908:	f7fd fba2 	bl	800a050 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c90c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c90e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c910:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c914:	4293      	cmp	r3, r2
 800c916:	bf28      	it	cs
 800c918:	4613      	movcs	r3, r2
 800c91a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c91c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c922:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c924:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c926:	f7fd faff 	bl	8009f28 <disk_write>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <f_mkfs+0x6ac>
 800c930:	2301      	movs	r3, #1
 800c932:	e0cf      	b.n	800cad4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c934:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c936:	461a      	mov	r2, r3
 800c938:	2100      	movs	r1, #0
 800c93a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c93c:	f7fd fbd5 	bl	800a0ea <mem_set>
				sect += n; nsect -= n;
 800c940:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c944:	4413      	add	r3, r2
 800c946:	667b      	str	r3, [r7, #100]	; 0x64
 800c948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c94a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1dc      	bne.n	800c910 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c958:	3301      	adds	r3, #1
 800c95a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c95c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c95e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c960:	429a      	cmp	r2, r3
 800c962:	d3af      	bcc.n	800c8c4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c964:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c968:	2b03      	cmp	r3, #3
 800c96a:	d10d      	bne.n	800c988 <f_mkfs+0x700>
 800c96c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c96e:	e00c      	b.n	800c98a <f_mkfs+0x702>
 800c970:	080154ec 	.word	0x080154ec
 800c974:	080154f8 	.word	0x080154f8
 800c978:	0801550c 	.word	0x0801550c
 800c97c:	41615252 	.word	0x41615252
 800c980:	61417272 	.word	0x61417272
 800c984:	00fffff8 	.word	0x00fffff8
 800c988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c98a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c98c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c990:	4293      	cmp	r3, r2
 800c992:	bf28      	it	cs
 800c994:	4613      	movcs	r3, r2
 800c996:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c998:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c99c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c99e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c9a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9a2:	f7fd fac1 	bl	8009f28 <disk_write>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d001      	beq.n	800c9b0 <f_mkfs+0x728>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e091      	b.n	800cad4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800c9b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c9b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9b4:	4413      	add	r3, r2
 800c9b6:	667b      	str	r3, [r7, #100]	; 0x64
 800c9b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c9ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c9c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1e2      	bne.n	800c98c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c9c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d103      	bne.n	800c9d6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c9ce:	230c      	movs	r3, #12
 800c9d0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c9d4:	e010      	b.n	800c9f8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9dc:	d303      	bcc.n	800c9e6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c9de:	2306      	movs	r3, #6
 800c9e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c9e4:	e008      	b.n	800c9f8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c9e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d101      	bne.n	800c9f2 <f_mkfs+0x76a>
 800c9ee:	2304      	movs	r3, #4
 800c9f0:	e000      	b.n	800c9f4 <f_mkfs+0x76c>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c9f8:	7afb      	ldrb	r3, [r7, #11]
 800c9fa:	f003 0308 	and.w	r3, r3, #8
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d15b      	bne.n	800caba <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800ca02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ca04:	461a      	mov	r2, r3
 800ca06:	2100      	movs	r1, #0
 800ca08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca0a:	f7fd fb6e 	bl	800a0ea <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca14:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fd fafe 	bl	800a01a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ca1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ca24:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	2201      	movs	r2, #1
 800ca32:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	3302      	adds	r3, #2
 800ca38:	2201      	movs	r2, #1
 800ca3a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	3303      	adds	r3, #3
 800ca40:	2200      	movs	r2, #0
 800ca42:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ca44:	69bb      	ldr	r3, [r7, #24]
 800ca46:	3304      	adds	r3, #4
 800ca48:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ca4c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ca4e:	693a      	ldr	r2, [r7, #16]
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	441a      	add	r2, r3
 800ca54:	4b21      	ldr	r3, [pc, #132]	; (800cadc <f_mkfs+0x854>)
 800ca56:	fba3 1302 	umull	r1, r3, r3, r2
 800ca5a:	1ad2      	subs	r2, r2, r3
 800ca5c:	0852      	lsrs	r2, r2, #1
 800ca5e:	4413      	add	r3, r2
 800ca60:	0b5b      	lsrs	r3, r3, #13
 800ca62:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	3305      	adds	r3, #5
 800ca68:	22fe      	movs	r2, #254	; 0xfe
 800ca6a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ca6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca6e:	089b      	lsrs	r3, r3, #2
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	3306      	adds	r3, #6
 800ca76:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800ca7a:	b2d2      	uxtb	r2, r2
 800ca7c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	3307      	adds	r3, #7
 800ca82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca84:	b2d2      	uxtb	r2, r2
 800ca86:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fd fade 	bl	800a050 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	330c      	adds	r3, #12
 800ca98:	693a      	ldr	r2, [r7, #16]
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fd fad7 	bl	800a050 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800caa2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800caa6:	2301      	movs	r3, #1
 800caa8:	2200      	movs	r2, #0
 800caaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800caac:	f7fd fa3c 	bl	8009f28 <disk_write>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d001      	beq.n	800caba <f_mkfs+0x832>
 800cab6:	2301      	movs	r3, #1
 800cab8:	e00c      	b.n	800cad4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800caba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cabe:	2200      	movs	r2, #0
 800cac0:	2100      	movs	r1, #0
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fd fa50 	bl	8009f68 <disk_ioctl>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <f_mkfs+0x84a>
 800cace:	2301      	movs	r3, #1
 800cad0:	e000      	b.n	800cad4 <f_mkfs+0x84c>

	return FR_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3774      	adds	r7, #116	; 0x74
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd90      	pop	{r4, r7, pc}
 800cadc:	0515565b 	.word	0x0515565b

0800cae0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b087      	sub	sp, #28
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	4613      	mov	r3, r2
 800caec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800caee:	2301      	movs	r3, #1
 800caf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800caf6:	4b1f      	ldr	r3, [pc, #124]	; (800cb74 <FATFS_LinkDriverEx+0x94>)
 800caf8:	7a5b      	ldrb	r3, [r3, #9]
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d131      	bne.n	800cb64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb00:	4b1c      	ldr	r3, [pc, #112]	; (800cb74 <FATFS_LinkDriverEx+0x94>)
 800cb02:	7a5b      	ldrb	r3, [r3, #9]
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	461a      	mov	r2, r3
 800cb08:	4b1a      	ldr	r3, [pc, #104]	; (800cb74 <FATFS_LinkDriverEx+0x94>)
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cb0e:	4b19      	ldr	r3, [pc, #100]	; (800cb74 <FATFS_LinkDriverEx+0x94>)
 800cb10:	7a5b      	ldrb	r3, [r3, #9]
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	4a17      	ldr	r2, [pc, #92]	; (800cb74 <FATFS_LinkDriverEx+0x94>)
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb1e:	4b15      	ldr	r3, [pc, #84]	; (800cb74 <FATFS_LinkDriverEx+0x94>)
 800cb20:	7a5b      	ldrb	r3, [r3, #9]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	461a      	mov	r2, r3
 800cb26:	4b13      	ldr	r3, [pc, #76]	; (800cb74 <FATFS_LinkDriverEx+0x94>)
 800cb28:	4413      	add	r3, r2
 800cb2a:	79fa      	ldrb	r2, [r7, #7]
 800cb2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb2e:	4b11      	ldr	r3, [pc, #68]	; (800cb74 <FATFS_LinkDriverEx+0x94>)
 800cb30:	7a5b      	ldrb	r3, [r3, #9]
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	1c5a      	adds	r2, r3, #1
 800cb36:	b2d1      	uxtb	r1, r2
 800cb38:	4a0e      	ldr	r2, [pc, #56]	; (800cb74 <FATFS_LinkDriverEx+0x94>)
 800cb3a:	7251      	strb	r1, [r2, #9]
 800cb3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb3e:	7dbb      	ldrb	r3, [r7, #22]
 800cb40:	3330      	adds	r3, #48	; 0x30
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	223a      	movs	r2, #58	; 0x3a
 800cb4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	3302      	adds	r3, #2
 800cb54:	222f      	movs	r2, #47	; 0x2f
 800cb56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	3303      	adds	r3, #3
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb60:	2300      	movs	r3, #0
 800cb62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb64:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	371c      	adds	r7, #28
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	20000ce0 	.word	0x20000ce0

0800cb78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb82:	2200      	movs	r2, #0
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f7ff ffaa 	bl	800cae0 <FATFS_LinkDriverEx>
 800cb8c:	4603      	mov	r3, r0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b084      	sub	sp, #16
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	6039      	str	r1, [r7, #0]
 800cba0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 800cba2:	2000      	movs	r0, #0
 800cba4:	f000 fa14 	bl	800cfd0 <osMutexNew>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	bf14      	ite	ne
 800cbb6:	2301      	movne	r3, #1
 800cbb8:	2300      	moveq	r3, #0
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	60fb      	str	r3, [r7, #12]

    return ret;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 fb0b 	bl	800d1ec <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800cbd6:	2301      	movs	r3, #1
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 800cbec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 fa73 	bl	800d0dc <osMutexAcquire>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d101      	bne.n	800cc00 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cc00:	68fb      	ldr	r3, [r7, #12]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b082      	sub	sp, #8
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 faad 	bl	800d172 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800cc18:	bf00      	nop
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <__NVIC_SetPriority>:
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	4603      	mov	r3, r0
 800cc28:	6039      	str	r1, [r7, #0]
 800cc2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cc2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	db0a      	blt.n	800cc4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	b2da      	uxtb	r2, r3
 800cc38:	490c      	ldr	r1, [pc, #48]	; (800cc6c <__NVIC_SetPriority+0x4c>)
 800cc3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc3e:	0112      	lsls	r2, r2, #4
 800cc40:	b2d2      	uxtb	r2, r2
 800cc42:	440b      	add	r3, r1
 800cc44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cc48:	e00a      	b.n	800cc60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	b2da      	uxtb	r2, r3
 800cc4e:	4908      	ldr	r1, [pc, #32]	; (800cc70 <__NVIC_SetPriority+0x50>)
 800cc50:	79fb      	ldrb	r3, [r7, #7]
 800cc52:	f003 030f 	and.w	r3, r3, #15
 800cc56:	3b04      	subs	r3, #4
 800cc58:	0112      	lsls	r2, r2, #4
 800cc5a:	b2d2      	uxtb	r2, r2
 800cc5c:	440b      	add	r3, r1
 800cc5e:	761a      	strb	r2, [r3, #24]
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	e000e100 	.word	0xe000e100
 800cc70:	e000ed00 	.word	0xe000ed00

0800cc74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cc74:	b580      	push	{r7, lr}
 800cc76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cc78:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <SysTick_Handler+0x1c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cc7c:	f002 fd44 	bl	800f708 <xTaskGetSchedulerState>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d001      	beq.n	800cc8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cc86:	f003 fc27 	bl	80104d8 <xPortSysTickHandler>
  }
}
 800cc8a:	bf00      	nop
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	e000e010 	.word	0xe000e010

0800cc94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc94:	b580      	push	{r7, lr}
 800cc96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cc98:	2100      	movs	r1, #0
 800cc9a:	f06f 0004 	mvn.w	r0, #4
 800cc9e:	f7ff ffbf 	bl	800cc20 <__NVIC_SetPriority>
#endif
}
 800cca2:	bf00      	nop
 800cca4:	bd80      	pop	{r7, pc}
	...

0800cca8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccae:	f3ef 8305 	mrs	r3, IPSR
 800ccb2:	603b      	str	r3, [r7, #0]
  return(result);
 800ccb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d003      	beq.n	800ccc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ccba:	f06f 0305 	mvn.w	r3, #5
 800ccbe:	607b      	str	r3, [r7, #4]
 800ccc0:	e00c      	b.n	800ccdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ccc2:	4b0a      	ldr	r3, [pc, #40]	; (800ccec <osKernelInitialize+0x44>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d105      	bne.n	800ccd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ccca:	4b08      	ldr	r3, [pc, #32]	; (800ccec <osKernelInitialize+0x44>)
 800cccc:	2201      	movs	r2, #1
 800ccce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	607b      	str	r3, [r7, #4]
 800ccd4:	e002      	b.n	800ccdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ccd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ccdc:	687b      	ldr	r3, [r7, #4]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	370c      	adds	r7, #12
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	20000cec 	.word	0x20000cec

0800ccf0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800ccf6:	f002 fd07 	bl	800f708 <xTaskGetSchedulerState>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d004      	beq.n	800cd0a <osKernelGetState+0x1a>
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d105      	bne.n	800cd10 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800cd04:	2302      	movs	r3, #2
 800cd06:	607b      	str	r3, [r7, #4]
      break;
 800cd08:	e00c      	b.n	800cd24 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	607b      	str	r3, [r7, #4]
      break;
 800cd0e:	e009      	b.n	800cd24 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800cd10:	4b07      	ldr	r3, [pc, #28]	; (800cd30 <osKernelGetState+0x40>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d102      	bne.n	800cd1e <osKernelGetState+0x2e>
        state = osKernelReady;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800cd1c:	e001      	b.n	800cd22 <osKernelGetState+0x32>
        state = osKernelInactive;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	607b      	str	r3, [r7, #4]
      break;
 800cd22:	bf00      	nop
  }

  return (state);
 800cd24:	687b      	ldr	r3, [r7, #4]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	20000cec 	.word	0x20000cec

0800cd34 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd3a:	f3ef 8305 	mrs	r3, IPSR
 800cd3e:	603b      	str	r3, [r7, #0]
  return(result);
 800cd40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d003      	beq.n	800cd4e <osKernelStart+0x1a>
    stat = osErrorISR;
 800cd46:	f06f 0305 	mvn.w	r3, #5
 800cd4a:	607b      	str	r3, [r7, #4]
 800cd4c:	e010      	b.n	800cd70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cd4e:	4b0b      	ldr	r3, [pc, #44]	; (800cd7c <osKernelStart+0x48>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d109      	bne.n	800cd6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cd56:	f7ff ff9d 	bl	800cc94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd5a:	4b08      	ldr	r3, [pc, #32]	; (800cd7c <osKernelStart+0x48>)
 800cd5c:	2202      	movs	r2, #2
 800cd5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd60:	f002 f854 	bl	800ee0c <vTaskStartScheduler>
      stat = osOK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	607b      	str	r3, [r7, #4]
 800cd68:	e002      	b.n	800cd70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cd6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cd70:	687b      	ldr	r3, [r7, #4]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20000cec 	.word	0x20000cec

0800cd80 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd86:	f3ef 8305 	mrs	r3, IPSR
 800cd8a:	603b      	str	r3, [r7, #0]
  return(result);
 800cd8c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d003      	beq.n	800cd9a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800cd92:	f002 f967 	bl	800f064 <xTaskGetTickCountFromISR>
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	e002      	b.n	800cda0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800cd9a:	f002 f953 	bl	800f044 <xTaskGetTickCount>
 800cd9e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800cda0:	687b      	ldr	r3, [r7, #4]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
	...

0800cdac <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 800cdb2:	4b06      	ldr	r3, [pc, #24]	; (800cdcc <OS_Tick_GetCount+0x20>)
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 800cdb8:	4b04      	ldr	r3, [pc, #16]	; (800cdcc <OS_Tick_GetCount+0x20>)
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	1ad3      	subs	r3, r2, r3
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	e000e010 	.word	0xe000e010

0800cdd0 <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 800cdd0:	b480      	push	{r7}
 800cdd2:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 800cdd4:	4b04      	ldr	r3, [pc, #16]	; (800cde8 <OS_Tick_GetOverflow+0x18>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	0c1b      	lsrs	r3, r3, #16
 800cdda:	f003 0301 	and.w	r3, r3, #1
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr
 800cde8:	e000e010 	.word	0xe000e010

0800cdec <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 800cdec:	b480      	push	{r7}
 800cdee:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 800cdf0:	4b03      	ldr	r3, [pc, #12]	; (800ce00 <OS_Tick_GetInterval+0x14>)
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	3301      	adds	r3, #1
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr
 800ce00:	e000e010 	.word	0xe000e010

0800ce04 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce0a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce0e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce10:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d105      	bne.n	800ce22 <osKernelGetSysTimerCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce16:	f3ef 8311 	mrs	r3, BASEPRI
 800ce1a:	607b      	str	r3, [r7, #4]
  return(result);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <osKernelGetSysTimerCount+0x22>
 800ce22:	2301      	movs	r3, #1
 800ce24:	e000      	b.n	800ce28 <osKernelGetSysTimerCount+0x24>
 800ce26:	2300      	movs	r3, #0
 800ce28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce2a:	b672      	cpsid	i
}
 800ce2c:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 800ce2e:	f002 f909 	bl	800f044 <xTaskGetTickCount>
 800ce32:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 800ce34:	f7ff ffba 	bl	800cdac <OS_Tick_GetCount>
 800ce38:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 800ce3a:	f7ff ffc9 	bl	800cdd0 <OS_Tick_GetOverflow>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d005      	beq.n	800ce50 <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 800ce44:	f7ff ffb2 	bl	800cdac <OS_Tick_GetCount>
 800ce48:	6138      	str	r0, [r7, #16]
    ticks++;
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 800ce50:	f7ff ffcc 	bl	800cdec <OS_Tick_GetInterval>
 800ce54:	4602      	mov	r2, r0
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	fb02 f303 	mul.w	r3, r2, r3
 800ce5c:	693a      	ldr	r2, [r7, #16]
 800ce5e:	4413      	add	r3, r2
 800ce60:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d101      	bne.n	800ce6c <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 800ce68:	b662      	cpsie	i
}
 800ce6a:	bf00      	nop
    __enable_irq();
  }

  return (val);
 800ce6c:	693b      	ldr	r3, [r7, #16]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3718      	adds	r7, #24
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b08e      	sub	sp, #56	; 0x38
 800ce7a:	af04      	add	r7, sp, #16
 800ce7c:	60f8      	str	r0, [r7, #12]
 800ce7e:	60b9      	str	r1, [r7, #8]
 800ce80:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ce82:	2300      	movs	r3, #0
 800ce84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce86:	f3ef 8305 	mrs	r3, IPSR
 800ce8a:	617b      	str	r3, [r7, #20]
  return(result);
 800ce8c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d17e      	bne.n	800cf90 <osThreadNew+0x11a>
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d07b      	beq.n	800cf90 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ce98:	2380      	movs	r3, #128	; 0x80
 800ce9a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ce9c:	2318      	movs	r3, #24
 800ce9e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cea0:	2300      	movs	r3, #0
 800cea2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cea8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d045      	beq.n	800cf3c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d002      	beq.n	800cebe <osThreadNew+0x48>
        name = attr->name;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	699b      	ldr	r3, [r3, #24]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	699b      	ldr	r3, [r3, #24]
 800ceca:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d008      	beq.n	800cee4 <osThreadNew+0x6e>
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	2b38      	cmp	r3, #56	; 0x38
 800ced6:	d805      	bhi.n	800cee4 <osThreadNew+0x6e>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d001      	beq.n	800cee8 <osThreadNew+0x72>
        return (NULL);
 800cee4:	2300      	movs	r3, #0
 800cee6:	e054      	b.n	800cf92 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	695b      	ldr	r3, [r3, #20]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d003      	beq.n	800cef8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	695b      	ldr	r3, [r3, #20]
 800cef4:	089b      	lsrs	r3, r3, #2
 800cef6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00e      	beq.n	800cf1e <osThreadNew+0xa8>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	2bbb      	cmp	r3, #187	; 0xbb
 800cf06:	d90a      	bls.n	800cf1e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d006      	beq.n	800cf1e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	695b      	ldr	r3, [r3, #20]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <osThreadNew+0xa8>
        mem = 1;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	61bb      	str	r3, [r7, #24]
 800cf1c:	e010      	b.n	800cf40 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10c      	bne.n	800cf40 <osThreadNew+0xca>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d108      	bne.n	800cf40 <osThreadNew+0xca>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d104      	bne.n	800cf40 <osThreadNew+0xca>
          mem = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	61bb      	str	r3, [r7, #24]
 800cf3a:	e001      	b.n	800cf40 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d110      	bne.n	800cf68 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cf4e:	9202      	str	r2, [sp, #8]
 800cf50:	9301      	str	r3, [sp, #4]
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	6a3a      	ldr	r2, [r7, #32]
 800cf5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f001 fd69 	bl	800ea34 <xTaskCreateStatic>
 800cf62:	4603      	mov	r3, r0
 800cf64:	613b      	str	r3, [r7, #16]
 800cf66:	e013      	b.n	800cf90 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d110      	bne.n	800cf90 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cf6e:	6a3b      	ldr	r3, [r7, #32]
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	f107 0310 	add.w	r3, r7, #16
 800cf76:	9301      	str	r3, [sp, #4]
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f001 fdb4 	bl	800eaee <xTaskCreate>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d001      	beq.n	800cf90 <osThreadNew+0x11a>
            hTask = NULL;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cf90:	693b      	ldr	r3, [r7, #16]
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3728      	adds	r7, #40	; 0x28
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b084      	sub	sp, #16
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfa2:	f3ef 8305 	mrs	r3, IPSR
 800cfa6:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfa8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <osDelay+0x1c>
    stat = osErrorISR;
 800cfae:	f06f 0305 	mvn.w	r3, #5
 800cfb2:	60fb      	str	r3, [r7, #12]
 800cfb4:	e007      	b.n	800cfc6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f001 feef 	bl	800eda4 <vTaskDelay>
    }
  }

  return (stat);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b088      	sub	sp, #32
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfdc:	f3ef 8305 	mrs	r3, IPSR
 800cfe0:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfe2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d174      	bne.n	800d0d2 <osMutexNew+0x102>
    if (attr != NULL) {
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d003      	beq.n	800cff6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	61bb      	str	r3, [r7, #24]
 800cff4:	e001      	b.n	800cffa <osMutexNew+0x2a>
    } else {
      type = 0U;
 800cff6:	2300      	movs	r3, #0
 800cff8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	f003 0301 	and.w	r3, r3, #1
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <osMutexNew+0x3a>
      rmtx = 1U;
 800d004:	2301      	movs	r3, #1
 800d006:	617b      	str	r3, [r7, #20]
 800d008:	e001      	b.n	800d00e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d00a:	2300      	movs	r3, #0
 800d00c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	f003 0308 	and.w	r3, r3, #8
 800d014:	2b00      	cmp	r3, #0
 800d016:	d15c      	bne.n	800d0d2 <osMutexNew+0x102>
      mem = -1;
 800d018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d01c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d015      	beq.n	800d050 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d006      	beq.n	800d03a <osMutexNew+0x6a>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	2b4f      	cmp	r3, #79	; 0x4f
 800d032:	d902      	bls.n	800d03a <osMutexNew+0x6a>
          mem = 1;
 800d034:	2301      	movs	r3, #1
 800d036:	613b      	str	r3, [r7, #16]
 800d038:	e00c      	b.n	800d054 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d108      	bne.n	800d054 <osMutexNew+0x84>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d104      	bne.n	800d054 <osMutexNew+0x84>
            mem = 0;
 800d04a:	2300      	movs	r3, #0
 800d04c:	613b      	str	r3, [r7, #16]
 800d04e:	e001      	b.n	800d054 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	2b01      	cmp	r3, #1
 800d058:	d112      	bne.n	800d080 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d007      	beq.n	800d070 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	4619      	mov	r1, r3
 800d066:	2004      	movs	r0, #4
 800d068:	f000 fd8f 	bl	800db8a <xQueueCreateMutexStatic>
 800d06c:	61f8      	str	r0, [r7, #28]
 800d06e:	e016      	b.n	800d09e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	4619      	mov	r1, r3
 800d076:	2001      	movs	r0, #1
 800d078:	f000 fd87 	bl	800db8a <xQueueCreateMutexStatic>
 800d07c:	61f8      	str	r0, [r7, #28]
 800d07e:	e00e      	b.n	800d09e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10b      	bne.n	800d09e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d004      	beq.n	800d096 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d08c:	2004      	movs	r0, #4
 800d08e:	f000 fd64 	bl	800db5a <xQueueCreateMutex>
 800d092:	61f8      	str	r0, [r7, #28]
 800d094:	e003      	b.n	800d09e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d096:	2001      	movs	r0, #1
 800d098:	f000 fd5f 	bl	800db5a <xQueueCreateMutex>
 800d09c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d00c      	beq.n	800d0be <osMutexNew+0xee>
        if (attr != NULL) {
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d003      	beq.n	800d0b2 <osMutexNew+0xe2>
          name = attr->name;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	e001      	b.n	800d0b6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d0b6:	68f9      	ldr	r1, [r7, #12]
 800d0b8:	69f8      	ldr	r0, [r7, #28]
 800d0ba:	f001 fc33 	bl	800e924 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d006      	beq.n	800d0d2 <osMutexNew+0x102>
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d003      	beq.n	800d0d2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	f043 0301 	orr.w	r3, r3, #1
 800d0d0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d0d2:	69fb      	ldr	r3, [r7, #28]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3720      	adds	r7, #32
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b086      	sub	sp, #24
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f023 0301 	bic.w	r3, r3, #1
 800d0ec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f003 0301 	and.w	r3, r3, #1
 800d0f4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0fa:	f3ef 8305 	mrs	r3, IPSR
 800d0fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800d100:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d102:	2b00      	cmp	r3, #0
 800d104:	d003      	beq.n	800d10e <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d106:	f06f 0305 	mvn.w	r3, #5
 800d10a:	617b      	str	r3, [r7, #20]
 800d10c:	e02c      	b.n	800d168 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d103      	bne.n	800d11c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d114:	f06f 0303 	mvn.w	r3, #3
 800d118:	617b      	str	r3, [r7, #20]
 800d11a:	e025      	b.n	800d168 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d011      	beq.n	800d146 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6938      	ldr	r0, [r7, #16]
 800d126:	f000 fd7f 	bl	800dc28 <xQueueTakeMutexRecursive>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d01b      	beq.n	800d168 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d003      	beq.n	800d13e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d136:	f06f 0301 	mvn.w	r3, #1
 800d13a:	617b      	str	r3, [r7, #20]
 800d13c:	e014      	b.n	800d168 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d13e:	f06f 0302 	mvn.w	r3, #2
 800d142:	617b      	str	r3, [r7, #20]
 800d144:	e010      	b.n	800d168 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d146:	6839      	ldr	r1, [r7, #0]
 800d148:	6938      	ldr	r0, [r7, #16]
 800d14a:	f001 f913 	bl	800e374 <xQueueSemaphoreTake>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b01      	cmp	r3, #1
 800d152:	d009      	beq.n	800d168 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d003      	beq.n	800d162 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d15a:	f06f 0301 	mvn.w	r3, #1
 800d15e:	617b      	str	r3, [r7, #20]
 800d160:	e002      	b.n	800d168 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d162:	f06f 0302 	mvn.w	r3, #2
 800d166:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d168:	697b      	ldr	r3, [r7, #20]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3718      	adds	r7, #24
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d172:	b580      	push	{r7, lr}
 800d174:	b086      	sub	sp, #24
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f023 0301 	bic.w	r3, r3, #1
 800d180:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f003 0301 	and.w	r3, r3, #1
 800d188:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d18e:	f3ef 8305 	mrs	r3, IPSR
 800d192:	60bb      	str	r3, [r7, #8]
  return(result);
 800d194:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d196:	2b00      	cmp	r3, #0
 800d198:	d003      	beq.n	800d1a2 <osMutexRelease+0x30>
    stat = osErrorISR;
 800d19a:	f06f 0305 	mvn.w	r3, #5
 800d19e:	617b      	str	r3, [r7, #20]
 800d1a0:	e01f      	b.n	800d1e2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d103      	bne.n	800d1b0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d1a8:	f06f 0303 	mvn.w	r3, #3
 800d1ac:	617b      	str	r3, [r7, #20]
 800d1ae:	e018      	b.n	800d1e2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d009      	beq.n	800d1ca <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d1b6:	6938      	ldr	r0, [r7, #16]
 800d1b8:	f000 fd02 	bl	800dbc0 <xQueueGiveMutexRecursive>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d00f      	beq.n	800d1e2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d1c2:	f06f 0302 	mvn.w	r3, #2
 800d1c6:	617b      	str	r3, [r7, #20]
 800d1c8:	e00b      	b.n	800d1e2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	6938      	ldr	r0, [r7, #16]
 800d1d2:	f000 fdc9 	bl	800dd68 <xQueueGenericSend>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d002      	beq.n	800d1e2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d1dc:	f06f 0302 	mvn.w	r3, #2
 800d1e0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d1e2:	697b      	ldr	r3, [r7, #20]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3718      	adds	r7, #24
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f023 0301 	bic.w	r3, r3, #1
 800d1fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1fc:	f3ef 8305 	mrs	r3, IPSR
 800d200:	60fb      	str	r3, [r7, #12]
  return(result);
 800d202:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800d204:	2b00      	cmp	r3, #0
 800d206:	d003      	beq.n	800d210 <osMutexDelete+0x24>
    stat = osErrorISR;
 800d208:	f06f 0305 	mvn.w	r3, #5
 800d20c:	617b      	str	r3, [r7, #20]
 800d20e:	e00e      	b.n	800d22e <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d103      	bne.n	800d21e <osMutexDelete+0x32>
    stat = osErrorParameter;
 800d216:	f06f 0303 	mvn.w	r3, #3
 800d21a:	617b      	str	r3, [r7, #20]
 800d21c:	e007      	b.n	800d22e <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800d21e:	6938      	ldr	r0, [r7, #16]
 800d220:	f001 fbaa 	bl	800e978 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800d224:	2300      	movs	r3, #0
 800d226:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 800d228:	6938      	ldr	r0, [r7, #16]
 800d22a:	f001 fa2f 	bl	800e68c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d22e:	697b      	ldr	r3, [r7, #20]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3718      	adds	r7, #24
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <osSemaphoreNew>:
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d238:	b580      	push	{r7, lr}
 800d23a:	b08a      	sub	sp, #40	; 0x28
 800d23c:	af02      	add	r7, sp, #8
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d244:	2300      	movs	r3, #0
 800d246:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d248:	f3ef 8305 	mrs	r3, IPSR
 800d24c:	613b      	str	r3, [r7, #16]
  return(result);
 800d24e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d250:	2b00      	cmp	r3, #0
 800d252:	d175      	bne.n	800d340 <osSemaphoreNew+0x108>
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d072      	beq.n	800d340 <osSemaphoreNew+0x108>
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d86e      	bhi.n	800d340 <osSemaphoreNew+0x108>
    mem = -1;
 800d262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d266:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d015      	beq.n	800d29a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d006      	beq.n	800d284 <osSemaphoreNew+0x4c>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	2b4f      	cmp	r3, #79	; 0x4f
 800d27c:	d902      	bls.n	800d284 <osSemaphoreNew+0x4c>
        mem = 1;
 800d27e:	2301      	movs	r3, #1
 800d280:	61bb      	str	r3, [r7, #24]
 800d282:	e00c      	b.n	800d29e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d108      	bne.n	800d29e <osSemaphoreNew+0x66>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	68db      	ldr	r3, [r3, #12]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d104      	bne.n	800d29e <osSemaphoreNew+0x66>
          mem = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	61bb      	str	r3, [r7, #24]
 800d298:	e001      	b.n	800d29e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2a4:	d04c      	beq.n	800d340 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d128      	bne.n	800d2fe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d10a      	bne.n	800d2c8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	2203      	movs	r2, #3
 800d2b8:	9200      	str	r2, [sp, #0]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	2100      	movs	r1, #0
 800d2be:	2001      	movs	r0, #1
 800d2c0:	f000 fb5c 	bl	800d97c <xQueueGenericCreateStatic>
 800d2c4:	61f8      	str	r0, [r7, #28]
 800d2c6:	e005      	b.n	800d2d4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d2c8:	2203      	movs	r2, #3
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	2001      	movs	r0, #1
 800d2ce:	f000 fbcd 	bl	800da6c <xQueueGenericCreate>
 800d2d2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d022      	beq.n	800d320 <osSemaphoreNew+0xe8>
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d01f      	beq.n	800d320 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	2100      	movs	r1, #0
 800d2e6:	69f8      	ldr	r0, [r7, #28]
 800d2e8:	f000 fd3e 	bl	800dd68 <xQueueGenericSend>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d016      	beq.n	800d320 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d2f2:	69f8      	ldr	r0, [r7, #28]
 800d2f4:	f001 f9ca 	bl	800e68c <vQueueDelete>
            hSemaphore = NULL;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	61fb      	str	r3, [r7, #28]
 800d2fc:	e010      	b.n	800d320 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d108      	bne.n	800d316 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	461a      	mov	r2, r3
 800d30a:	68b9      	ldr	r1, [r7, #8]
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f000 fcc1 	bl	800dc94 <xQueueCreateCountingSemaphoreStatic>
 800d312:	61f8      	str	r0, [r7, #28]
 800d314:	e004      	b.n	800d320 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d316:	68b9      	ldr	r1, [r7, #8]
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f000 fcf2 	bl	800dd02 <xQueueCreateCountingSemaphore>
 800d31e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d320:	69fb      	ldr	r3, [r7, #28]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00c      	beq.n	800d340 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d003      	beq.n	800d334 <osSemaphoreNew+0xfc>
          name = attr->name;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	617b      	str	r3, [r7, #20]
 800d332:	e001      	b.n	800d338 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d334:	2300      	movs	r3, #0
 800d336:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d338:	6979      	ldr	r1, [r7, #20]
 800d33a:	69f8      	ldr	r0, [r7, #28]
 800d33c:	f001 faf2 	bl	800e924 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d340:	69fb      	ldr	r3, [r7, #28]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3720      	adds	r7, #32
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
	...

0800d34c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d35a:	2300      	movs	r3, #0
 800d35c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d103      	bne.n	800d36c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d364:	f06f 0303 	mvn.w	r3, #3
 800d368:	617b      	str	r3, [r7, #20]
 800d36a:	e039      	b.n	800d3e0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d36c:	f3ef 8305 	mrs	r3, IPSR
 800d370:	60fb      	str	r3, [r7, #12]
  return(result);
 800d372:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d374:	2b00      	cmp	r3, #0
 800d376:	d022      	beq.n	800d3be <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d37e:	f06f 0303 	mvn.w	r3, #3
 800d382:	617b      	str	r3, [r7, #20]
 800d384:	e02c      	b.n	800d3e0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d386:	2300      	movs	r3, #0
 800d388:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d38a:	f107 0308 	add.w	r3, r7, #8
 800d38e:	461a      	mov	r2, r3
 800d390:	2100      	movs	r1, #0
 800d392:	6938      	ldr	r0, [r7, #16]
 800d394:	f001 f8fa 	bl	800e58c <xQueueReceiveFromISR>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d003      	beq.n	800d3a6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d39e:	f06f 0302 	mvn.w	r3, #2
 800d3a2:	617b      	str	r3, [r7, #20]
 800d3a4:	e01c      	b.n	800d3e0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d019      	beq.n	800d3e0 <osSemaphoreAcquire+0x94>
 800d3ac:	4b0f      	ldr	r3, [pc, #60]	; (800d3ec <osSemaphoreAcquire+0xa0>)
 800d3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	e010      	b.n	800d3e0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d3be:	6839      	ldr	r1, [r7, #0]
 800d3c0:	6938      	ldr	r0, [r7, #16]
 800d3c2:	f000 ffd7 	bl	800e374 <xQueueSemaphoreTake>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d009      	beq.n	800d3e0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d003      	beq.n	800d3da <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d3d2:	f06f 0301 	mvn.w	r3, #1
 800d3d6:	617b      	str	r3, [r7, #20]
 800d3d8:	e002      	b.n	800d3e0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d3da:	f06f 0302 	mvn.w	r3, #2
 800d3de:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d3e0:	697b      	ldr	r3, [r7, #20]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3718      	adds	r7, #24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	e000ed04 	.word	0xe000ed04

0800d3f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d103      	bne.n	800d40e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d406:	f06f 0303 	mvn.w	r3, #3
 800d40a:	617b      	str	r3, [r7, #20]
 800d40c:	e02c      	b.n	800d468 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d40e:	f3ef 8305 	mrs	r3, IPSR
 800d412:	60fb      	str	r3, [r7, #12]
  return(result);
 800d414:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d416:	2b00      	cmp	r3, #0
 800d418:	d01a      	beq.n	800d450 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d41a:	2300      	movs	r3, #0
 800d41c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d41e:	f107 0308 	add.w	r3, r7, #8
 800d422:	4619      	mov	r1, r3
 800d424:	6938      	ldr	r0, [r7, #16]
 800d426:	f000 fe38 	bl	800e09a <xQueueGiveFromISR>
 800d42a:	4603      	mov	r3, r0
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d003      	beq.n	800d438 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d430:	f06f 0302 	mvn.w	r3, #2
 800d434:	617b      	str	r3, [r7, #20]
 800d436:	e017      	b.n	800d468 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d014      	beq.n	800d468 <osSemaphoreRelease+0x78>
 800d43e:	4b0d      	ldr	r3, [pc, #52]	; (800d474 <osSemaphoreRelease+0x84>)
 800d440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	e00b      	b.n	800d468 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d450:	2300      	movs	r3, #0
 800d452:	2200      	movs	r2, #0
 800d454:	2100      	movs	r1, #0
 800d456:	6938      	ldr	r0, [r7, #16]
 800d458:	f000 fc86 	bl	800dd68 <xQueueGenericSend>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d002      	beq.n	800d468 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d462:	f06f 0302 	mvn.w	r3, #2
 800d466:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d468:	697b      	ldr	r3, [r7, #20]
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3718      	adds	r7, #24
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	e000ed04 	.word	0xe000ed04

0800d478 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d478:	b580      	push	{r7, lr}
 800d47a:	b08a      	sub	sp, #40	; 0x28
 800d47c:	af02      	add	r7, sp, #8
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d484:	2300      	movs	r3, #0
 800d486:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d488:	f3ef 8305 	mrs	r3, IPSR
 800d48c:	613b      	str	r3, [r7, #16]
  return(result);
 800d48e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d490:	2b00      	cmp	r3, #0
 800d492:	d15f      	bne.n	800d554 <osMessageQueueNew+0xdc>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d05c      	beq.n	800d554 <osMessageQueueNew+0xdc>
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d059      	beq.n	800d554 <osMessageQueueNew+0xdc>
    mem = -1;
 800d4a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d029      	beq.n	800d500 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d012      	beq.n	800d4da <osMessageQueueNew+0x62>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	2b4f      	cmp	r3, #79	; 0x4f
 800d4ba:	d90e      	bls.n	800d4da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00a      	beq.n	800d4da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	695a      	ldr	r2, [r3, #20]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	68b9      	ldr	r1, [r7, #8]
 800d4cc:	fb01 f303 	mul.w	r3, r1, r3
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d302      	bcc.n	800d4da <osMessageQueueNew+0x62>
        mem = 1;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	61bb      	str	r3, [r7, #24]
 800d4d8:	e014      	b.n	800d504 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d110      	bne.n	800d504 <osMessageQueueNew+0x8c>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10c      	bne.n	800d504 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d108      	bne.n	800d504 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d104      	bne.n	800d504 <osMessageQueueNew+0x8c>
          mem = 0;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	61bb      	str	r3, [r7, #24]
 800d4fe:	e001      	b.n	800d504 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d500:	2300      	movs	r3, #0
 800d502:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d10b      	bne.n	800d522 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	691a      	ldr	r2, [r3, #16]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	2100      	movs	r1, #0
 800d514:	9100      	str	r1, [sp, #0]
 800d516:	68b9      	ldr	r1, [r7, #8]
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 fa2f 	bl	800d97c <xQueueGenericCreateStatic>
 800d51e:	61f8      	str	r0, [r7, #28]
 800d520:	e008      	b.n	800d534 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d105      	bne.n	800d534 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d528:	2200      	movs	r2, #0
 800d52a:	68b9      	ldr	r1, [r7, #8]
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f000 fa9d 	bl	800da6c <xQueueGenericCreate>
 800d532:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00c      	beq.n	800d554 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d003      	beq.n	800d548 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	617b      	str	r3, [r7, #20]
 800d546:	e001      	b.n	800d54c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d548:	2300      	movs	r3, #0
 800d54a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d54c:	6979      	ldr	r1, [r7, #20]
 800d54e:	69f8      	ldr	r0, [r7, #28]
 800d550:	f001 f9e8 	bl	800e924 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d554:	69fb      	ldr	r3, [r7, #28]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3720      	adds	r7, #32
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
	...

0800d560 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d560:	b580      	push	{r7, lr}
 800d562:	b088      	sub	sp, #32
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	603b      	str	r3, [r7, #0]
 800d56c:	4613      	mov	r3, r2
 800d56e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d574:	2300      	movs	r3, #0
 800d576:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d578:	f3ef 8305 	mrs	r3, IPSR
 800d57c:	617b      	str	r3, [r7, #20]
  return(result);
 800d57e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d580:	2b00      	cmp	r3, #0
 800d582:	d028      	beq.n	800d5d6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d005      	beq.n	800d596 <osMessageQueuePut+0x36>
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <osMessageQueuePut+0x36>
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d003      	beq.n	800d59e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d596:	f06f 0303 	mvn.w	r3, #3
 800d59a:	61fb      	str	r3, [r7, #28]
 800d59c:	e038      	b.n	800d610 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d5a2:	f107 0210 	add.w	r2, r7, #16
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	68b9      	ldr	r1, [r7, #8]
 800d5aa:	69b8      	ldr	r0, [r7, #24]
 800d5ac:	f000 fcda 	bl	800df64 <xQueueGenericSendFromISR>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d003      	beq.n	800d5be <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d5b6:	f06f 0302 	mvn.w	r3, #2
 800d5ba:	61fb      	str	r3, [r7, #28]
 800d5bc:	e028      	b.n	800d610 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d025      	beq.n	800d610 <osMessageQueuePut+0xb0>
 800d5c4:	4b15      	ldr	r3, [pc, #84]	; (800d61c <osMessageQueuePut+0xbc>)
 800d5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5ca:	601a      	str	r2, [r3, #0]
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	e01c      	b.n	800d610 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d002      	beq.n	800d5e2 <osMessageQueuePut+0x82>
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d103      	bne.n	800d5ea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d5e2:	f06f 0303 	mvn.w	r3, #3
 800d5e6:	61fb      	str	r3, [r7, #28]
 800d5e8:	e012      	b.n	800d610 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	683a      	ldr	r2, [r7, #0]
 800d5ee:	68b9      	ldr	r1, [r7, #8]
 800d5f0:	69b8      	ldr	r0, [r7, #24]
 800d5f2:	f000 fbb9 	bl	800dd68 <xQueueGenericSend>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d009      	beq.n	800d610 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d003      	beq.n	800d60a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d602:	f06f 0301 	mvn.w	r3, #1
 800d606:	61fb      	str	r3, [r7, #28]
 800d608:	e002      	b.n	800d610 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d60a:	f06f 0302 	mvn.w	r3, #2
 800d60e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d610:	69fb      	ldr	r3, [r7, #28]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3720      	adds	r7, #32
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	e000ed04 	.word	0xe000ed04

0800d620 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d620:	b580      	push	{r7, lr}
 800d622:	b088      	sub	sp, #32
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
 800d62c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d632:	2300      	movs	r3, #0
 800d634:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d636:	f3ef 8305 	mrs	r3, IPSR
 800d63a:	617b      	str	r3, [r7, #20]
  return(result);
 800d63c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d028      	beq.n	800d694 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d005      	beq.n	800d654 <osMessageQueueGet+0x34>
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d002      	beq.n	800d654 <osMessageQueueGet+0x34>
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d003      	beq.n	800d65c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d654:	f06f 0303 	mvn.w	r3, #3
 800d658:	61fb      	str	r3, [r7, #28]
 800d65a:	e037      	b.n	800d6cc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d65c:	2300      	movs	r3, #0
 800d65e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d660:	f107 0310 	add.w	r3, r7, #16
 800d664:	461a      	mov	r2, r3
 800d666:	68b9      	ldr	r1, [r7, #8]
 800d668:	69b8      	ldr	r0, [r7, #24]
 800d66a:	f000 ff8f 	bl	800e58c <xQueueReceiveFromISR>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b01      	cmp	r3, #1
 800d672:	d003      	beq.n	800d67c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d674:	f06f 0302 	mvn.w	r3, #2
 800d678:	61fb      	str	r3, [r7, #28]
 800d67a:	e027      	b.n	800d6cc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d024      	beq.n	800d6cc <osMessageQueueGet+0xac>
 800d682:	4b15      	ldr	r3, [pc, #84]	; (800d6d8 <osMessageQueueGet+0xb8>)
 800d684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d688:	601a      	str	r2, [r3, #0]
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	e01b      	b.n	800d6cc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d002      	beq.n	800d6a0 <osMessageQueueGet+0x80>
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d103      	bne.n	800d6a8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d6a0:	f06f 0303 	mvn.w	r3, #3
 800d6a4:	61fb      	str	r3, [r7, #28]
 800d6a6:	e011      	b.n	800d6cc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	68b9      	ldr	r1, [r7, #8]
 800d6ac:	69b8      	ldr	r0, [r7, #24]
 800d6ae:	f000 fd81 	bl	800e1b4 <xQueueReceive>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d009      	beq.n	800d6cc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d6be:	f06f 0301 	mvn.w	r3, #1
 800d6c2:	61fb      	str	r3, [r7, #28]
 800d6c4:	e002      	b.n	800d6cc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d6c6:	f06f 0302 	mvn.w	r3, #2
 800d6ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d6cc:	69fb      	ldr	r3, [r7, #28]
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3720      	adds	r7, #32
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	e000ed04 	.word	0xe000ed04

0800d6dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	4a07      	ldr	r2, [pc, #28]	; (800d708 <vApplicationGetIdleTaskMemory+0x2c>)
 800d6ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	4a06      	ldr	r2, [pc, #24]	; (800d70c <vApplicationGetIdleTaskMemory+0x30>)
 800d6f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2280      	movs	r2, #128	; 0x80
 800d6f8:	601a      	str	r2, [r3, #0]
}
 800d6fa:	bf00      	nop
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	20000cf0 	.word	0x20000cf0
 800d70c:	20000dac 	.word	0x20000dac

0800d710 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	4a07      	ldr	r2, [pc, #28]	; (800d73c <vApplicationGetTimerTaskMemory+0x2c>)
 800d720:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	4a06      	ldr	r2, [pc, #24]	; (800d740 <vApplicationGetTimerTaskMemory+0x30>)
 800d726:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d72e:	601a      	str	r2, [r3, #0]
}
 800d730:	bf00      	nop
 800d732:	3714      	adds	r7, #20
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr
 800d73c:	20000fac 	.word	0x20000fac
 800d740:	20001068 	.word	0x20001068

0800d744 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f103 0208 	add.w	r2, r3, #8
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d75c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f103 0208 	add.w	r2, r3, #8
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f103 0208 	add.w	r2, r3, #8
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d792:	bf00      	nop
 800d794:	370c      	adds	r7, #12
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr

0800d79e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d79e:	b480      	push	{r7}
 800d7a0:	b085      	sub	sp, #20
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
 800d7a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	689a      	ldr	r2, [r3, #8]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	683a      	ldr	r2, [r7, #0]
 800d7c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	683a      	ldr	r2, [r7, #0]
 800d7c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	1c5a      	adds	r2, r3, #1
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	601a      	str	r2, [r3, #0]
}
 800d7da:	bf00      	nop
 800d7dc:	3714      	adds	r7, #20
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr

0800d7e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7e6:	b480      	push	{r7}
 800d7e8:	b085      	sub	sp, #20
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
 800d7ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7fc:	d103      	bne.n	800d806 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	e00c      	b.n	800d820 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	3308      	adds	r3, #8
 800d80a:	60fb      	str	r3, [r7, #12]
 800d80c:	e002      	b.n	800d814 <vListInsert+0x2e>
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	60fb      	str	r3, [r7, #12]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68ba      	ldr	r2, [r7, #8]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d2f6      	bcs.n	800d80e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	685a      	ldr	r2, [r3, #4]
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	683a      	ldr	r2, [r7, #0]
 800d82e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	683a      	ldr	r2, [r7, #0]
 800d83a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	1c5a      	adds	r2, r3, #1
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	601a      	str	r2, [r3, #0]
}
 800d84c:	bf00      	nop
 800d84e:	3714      	adds	r7, #20
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	691b      	ldr	r3, [r3, #16]
 800d864:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	6892      	ldr	r2, [r2, #8]
 800d86e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	6852      	ldr	r2, [r2, #4]
 800d878:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	429a      	cmp	r2, r3
 800d882:	d103      	bne.n	800d88c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	689a      	ldr	r2, [r3, #8]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	1e5a      	subs	r2, r3, #1
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10a      	bne.n	800d8d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d8d2:	bf00      	nop
 800d8d4:	e7fe      	b.n	800d8d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d8d6:	f002 fd6d 	bl	80103b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e2:	68f9      	ldr	r1, [r7, #12]
 800d8e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d8e6:	fb01 f303 	mul.w	r3, r1, r3
 800d8ea:	441a      	add	r2, r3
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d906:	3b01      	subs	r3, #1
 800d908:	68f9      	ldr	r1, [r7, #12]
 800d90a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d90c:	fb01 f303 	mul.w	r3, r1, r3
 800d910:	441a      	add	r2, r3
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	22ff      	movs	r2, #255	; 0xff
 800d91a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	22ff      	movs	r2, #255	; 0xff
 800d922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d114      	bne.n	800d956 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	691b      	ldr	r3, [r3, #16]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d01a      	beq.n	800d96a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	3310      	adds	r3, #16
 800d938:	4618      	mov	r0, r3
 800d93a:	f001 fd13 	bl	800f364 <xTaskRemoveFromEventList>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	d012      	beq.n	800d96a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d944:	4b0c      	ldr	r3, [pc, #48]	; (800d978 <xQueueGenericReset+0xcc>)
 800d946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d94a:	601a      	str	r2, [r3, #0]
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	f3bf 8f6f 	isb	sy
 800d954:	e009      	b.n	800d96a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	3310      	adds	r3, #16
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7ff fef2 	bl	800d744 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	3324      	adds	r3, #36	; 0x24
 800d964:	4618      	mov	r0, r3
 800d966:	f7ff feed 	bl	800d744 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d96a:	f002 fd53 	bl	8010414 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d96e:	2301      	movs	r3, #1
}
 800d970:	4618      	mov	r0, r3
 800d972:	3710      	adds	r7, #16
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	e000ed04 	.word	0xe000ed04

0800d97c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b08e      	sub	sp, #56	; 0x38
 800d980:	af02      	add	r7, sp, #8
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
 800d988:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d10a      	bne.n	800d9a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d9a2:	bf00      	nop
 800d9a4:	e7fe      	b.n	800d9a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10a      	bne.n	800d9c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b0:	f383 8811 	msr	BASEPRI, r3
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d9be:	bf00      	nop
 800d9c0:	e7fe      	b.n	800d9c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d002      	beq.n	800d9ce <xQueueGenericCreateStatic+0x52>
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d001      	beq.n	800d9d2 <xQueueGenericCreateStatic+0x56>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e000      	b.n	800d9d4 <xQueueGenericCreateStatic+0x58>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10a      	bne.n	800d9ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9dc:	f383 8811 	msr	BASEPRI, r3
 800d9e0:	f3bf 8f6f 	isb	sy
 800d9e4:	f3bf 8f4f 	dsb	sy
 800d9e8:	623b      	str	r3, [r7, #32]
}
 800d9ea:	bf00      	nop
 800d9ec:	e7fe      	b.n	800d9ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d102      	bne.n	800d9fa <xQueueGenericCreateStatic+0x7e>
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d101      	bne.n	800d9fe <xQueueGenericCreateStatic+0x82>
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	e000      	b.n	800da00 <xQueueGenericCreateStatic+0x84>
 800d9fe:	2300      	movs	r3, #0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d10a      	bne.n	800da1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800da04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	61fb      	str	r3, [r7, #28]
}
 800da16:	bf00      	nop
 800da18:	e7fe      	b.n	800da18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da1a:	2350      	movs	r3, #80	; 0x50
 800da1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	2b50      	cmp	r3, #80	; 0x50
 800da22:	d00a      	beq.n	800da3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	61bb      	str	r3, [r7, #24]
}
 800da36:	bf00      	nop
 800da38:	e7fe      	b.n	800da38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800da40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00d      	beq.n	800da62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da48:	2201      	movs	r2, #1
 800da4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800da52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	4613      	mov	r3, r2
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	68b9      	ldr	r1, [r7, #8]
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f000 f83f 	bl	800dae0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800da64:	4618      	mov	r0, r3
 800da66:	3730      	adds	r7, #48	; 0x30
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b08a      	sub	sp, #40	; 0x28
 800da70:	af02      	add	r7, sp, #8
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	4613      	mov	r3, r2
 800da78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10a      	bne.n	800da96 <xQueueGenericCreate+0x2a>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	613b      	str	r3, [r7, #16]
}
 800da92:	bf00      	nop
 800da94:	e7fe      	b.n	800da94 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	68ba      	ldr	r2, [r7, #8]
 800da9a:	fb02 f303 	mul.w	r3, r2, r3
 800da9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	3350      	adds	r3, #80	; 0x50
 800daa4:	4618      	mov	r0, r3
 800daa6:	f002 fda7 	bl	80105f8 <pvPortMalloc>
 800daaa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d011      	beq.n	800dad6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	3350      	adds	r3, #80	; 0x50
 800daba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dac4:	79fa      	ldrb	r2, [r7, #7]
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	4613      	mov	r3, r2
 800dacc:	697a      	ldr	r2, [r7, #20]
 800dace:	68b9      	ldr	r1, [r7, #8]
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f000 f805 	bl	800dae0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dad6:	69bb      	ldr	r3, [r7, #24]
	}
 800dad8:	4618      	mov	r0, r3
 800dada:	3720      	adds	r7, #32
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
 800daec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d103      	bne.n	800dafc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	69ba      	ldr	r2, [r7, #24]
 800daf8:	601a      	str	r2, [r3, #0]
 800dafa:	e002      	b.n	800db02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db0e:	2101      	movs	r1, #1
 800db10:	69b8      	ldr	r0, [r7, #24]
 800db12:	f7ff fecb 	bl	800d8ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	78fa      	ldrb	r2, [r7, #3]
 800db1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800db1e:	bf00      	nop
 800db20:	3710      	adds	r7, #16
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}

0800db26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800db26:	b580      	push	{r7, lr}
 800db28:	b082      	sub	sp, #8
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d00e      	beq.n	800db52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db46:	2300      	movs	r3, #0
 800db48:	2200      	movs	r2, #0
 800db4a:	2100      	movs	r1, #0
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 f90b 	bl	800dd68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800db52:	bf00      	nop
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b086      	sub	sp, #24
 800db5e:	af00      	add	r7, sp, #0
 800db60:	4603      	mov	r3, r0
 800db62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800db64:	2301      	movs	r3, #1
 800db66:	617b      	str	r3, [r7, #20]
 800db68:	2300      	movs	r3, #0
 800db6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800db6c:	79fb      	ldrb	r3, [r7, #7]
 800db6e:	461a      	mov	r2, r3
 800db70:	6939      	ldr	r1, [r7, #16]
 800db72:	6978      	ldr	r0, [r7, #20]
 800db74:	f7ff ff7a 	bl	800da6c <xQueueGenericCreate>
 800db78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f7ff ffd3 	bl	800db26 <prvInitialiseMutex>

		return xNewQueue;
 800db80:	68fb      	ldr	r3, [r7, #12]
	}
 800db82:	4618      	mov	r0, r3
 800db84:	3718      	adds	r7, #24
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b088      	sub	sp, #32
 800db8e:	af02      	add	r7, sp, #8
 800db90:	4603      	mov	r3, r0
 800db92:	6039      	str	r1, [r7, #0]
 800db94:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800db96:	2301      	movs	r3, #1
 800db98:	617b      	str	r3, [r7, #20]
 800db9a:	2300      	movs	r3, #0
 800db9c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800db9e:	79fb      	ldrb	r3, [r7, #7]
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	2200      	movs	r2, #0
 800dba6:	6939      	ldr	r1, [r7, #16]
 800dba8:	6978      	ldr	r0, [r7, #20]
 800dbaa:	f7ff fee7 	bl	800d97c <xQueueGenericCreateStatic>
 800dbae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f7ff ffb8 	bl	800db26 <prvInitialiseMutex>

		return xNewQueue;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
	}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3718      	adds	r7, #24
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800dbc0:	b590      	push	{r4, r7, lr}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d10a      	bne.n	800dbe8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800dbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd6:	f383 8811 	msr	BASEPRI, r3
 800dbda:	f3bf 8f6f 	isb	sy
 800dbde:	f3bf 8f4f 	dsb	sy
 800dbe2:	60fb      	str	r3, [r7, #12]
}
 800dbe4:	bf00      	nop
 800dbe6:	e7fe      	b.n	800dbe6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	689c      	ldr	r4, [r3, #8]
 800dbec:	f001 fd7c 	bl	800f6e8 <xTaskGetCurrentTaskHandle>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	429c      	cmp	r4, r3
 800dbf4:	d111      	bne.n	800dc1a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	1e5a      	subs	r2, r3, #1
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d105      	bne.n	800dc14 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dc08:	2300      	movs	r3, #0
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	6938      	ldr	r0, [r7, #16]
 800dc10:	f000 f8aa 	bl	800dd68 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dc14:	2301      	movs	r3, #1
 800dc16:	617b      	str	r3, [r7, #20]
 800dc18:	e001      	b.n	800dc1e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800dc1e:	697b      	ldr	r3, [r7, #20]
	}
 800dc20:	4618      	mov	r0, r3
 800dc22:	371c      	adds	r7, #28
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd90      	pop	{r4, r7, pc}

0800dc28 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800dc28:	b590      	push	{r4, r7, lr}
 800dc2a:	b087      	sub	sp, #28
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d10a      	bne.n	800dc52 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800dc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc40:	f383 8811 	msr	BASEPRI, r3
 800dc44:	f3bf 8f6f 	isb	sy
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	60fb      	str	r3, [r7, #12]
}
 800dc4e:	bf00      	nop
 800dc50:	e7fe      	b.n	800dc50 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	689c      	ldr	r4, [r3, #8]
 800dc56:	f001 fd47 	bl	800f6e8 <xTaskGetCurrentTaskHandle>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	429c      	cmp	r4, r3
 800dc5e:	d107      	bne.n	800dc70 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	1c5a      	adds	r2, r3, #1
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	617b      	str	r3, [r7, #20]
 800dc6e:	e00c      	b.n	800dc8a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800dc70:	6839      	ldr	r1, [r7, #0]
 800dc72:	6938      	ldr	r0, [r7, #16]
 800dc74:	f000 fb7e 	bl	800e374 <xQueueSemaphoreTake>
 800dc78:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d004      	beq.n	800dc8a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	1c5a      	adds	r2, r3, #1
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800dc8a:	697b      	ldr	r3, [r7, #20]
	}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	371c      	adds	r7, #28
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd90      	pop	{r4, r7, pc}

0800dc94 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b08a      	sub	sp, #40	; 0x28
 800dc98:	af02      	add	r7, sp, #8
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10a      	bne.n	800dcbc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800dca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcaa:	f383 8811 	msr	BASEPRI, r3
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	f3bf 8f4f 	dsb	sy
 800dcb6:	61bb      	str	r3, [r7, #24]
}
 800dcb8:	bf00      	nop
 800dcba:	e7fe      	b.n	800dcba <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dcbc:	68ba      	ldr	r2, [r7, #8]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d90a      	bls.n	800dcda <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800dcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	617b      	str	r3, [r7, #20]
}
 800dcd6:	bf00      	nop
 800dcd8:	e7fe      	b.n	800dcd8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dcda:	2302      	movs	r3, #2
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	2100      	movs	r1, #0
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f7ff fe49 	bl	800d97c <xQueueGenericCreateStatic>
 800dcea:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	68ba      	ldr	r2, [r7, #8]
 800dcf6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dcf8:	69fb      	ldr	r3, [r7, #28]
	}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3720      	adds	r7, #32
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b086      	sub	sp, #24
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10a      	bne.n	800dd28 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	613b      	str	r3, [r7, #16]
}
 800dd24:	bf00      	nop
 800dd26:	e7fe      	b.n	800dd26 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dd28:	683a      	ldr	r2, [r7, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d90a      	bls.n	800dd46 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	60fb      	str	r3, [r7, #12]
}
 800dd42:	bf00      	nop
 800dd44:	e7fe      	b.n	800dd44 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dd46:	2202      	movs	r2, #2
 800dd48:	2100      	movs	r1, #0
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7ff fe8e 	bl	800da6c <xQueueGenericCreate>
 800dd50:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dd5e:	697b      	ldr	r3, [r7, #20]
	}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3718      	adds	r7, #24
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b08e      	sub	sp, #56	; 0x38
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
 800dd74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dd76:	2300      	movs	r3, #0
 800dd78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d10a      	bne.n	800dd9a <xQueueGenericSend+0x32>
	__asm volatile
 800dd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd88:	f383 8811 	msr	BASEPRI, r3
 800dd8c:	f3bf 8f6f 	isb	sy
 800dd90:	f3bf 8f4f 	dsb	sy
 800dd94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dd96:	bf00      	nop
 800dd98:	e7fe      	b.n	800dd98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d103      	bne.n	800dda8 <xQueueGenericSend+0x40>
 800dda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d101      	bne.n	800ddac <xQueueGenericSend+0x44>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e000      	b.n	800ddae <xQueueGenericSend+0x46>
 800ddac:	2300      	movs	r3, #0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10a      	bne.n	800ddc8 <xQueueGenericSend+0x60>
	__asm volatile
 800ddb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb6:	f383 8811 	msr	BASEPRI, r3
 800ddba:	f3bf 8f6f 	isb	sy
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ddc4:	bf00      	nop
 800ddc6:	e7fe      	b.n	800ddc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	2b02      	cmp	r3, #2
 800ddcc:	d103      	bne.n	800ddd6 <xQueueGenericSend+0x6e>
 800ddce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d101      	bne.n	800ddda <xQueueGenericSend+0x72>
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e000      	b.n	800dddc <xQueueGenericSend+0x74>
 800ddda:	2300      	movs	r3, #0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10a      	bne.n	800ddf6 <xQueueGenericSend+0x8e>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	623b      	str	r3, [r7, #32]
}
 800ddf2:	bf00      	nop
 800ddf4:	e7fe      	b.n	800ddf4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddf6:	f001 fc87 	bl	800f708 <xTaskGetSchedulerState>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d102      	bne.n	800de06 <xQueueGenericSend+0x9e>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d101      	bne.n	800de0a <xQueueGenericSend+0xa2>
 800de06:	2301      	movs	r3, #1
 800de08:	e000      	b.n	800de0c <xQueueGenericSend+0xa4>
 800de0a:	2300      	movs	r3, #0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d10a      	bne.n	800de26 <xQueueGenericSend+0xbe>
	__asm volatile
 800de10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de14:	f383 8811 	msr	BASEPRI, r3
 800de18:	f3bf 8f6f 	isb	sy
 800de1c:	f3bf 8f4f 	dsb	sy
 800de20:	61fb      	str	r3, [r7, #28]
}
 800de22:	bf00      	nop
 800de24:	e7fe      	b.n	800de24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de26:	f002 fac5 	bl	80103b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de32:	429a      	cmp	r2, r3
 800de34:	d302      	bcc.n	800de3c <xQueueGenericSend+0xd4>
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	2b02      	cmp	r3, #2
 800de3a:	d129      	bne.n	800de90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de3c:	683a      	ldr	r2, [r7, #0]
 800de3e:	68b9      	ldr	r1, [r7, #8]
 800de40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de42:	f000 fc5e 	bl	800e702 <prvCopyDataToQueue>
 800de46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d010      	beq.n	800de72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de52:	3324      	adds	r3, #36	; 0x24
 800de54:	4618      	mov	r0, r3
 800de56:	f001 fa85 	bl	800f364 <xTaskRemoveFromEventList>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d013      	beq.n	800de88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800de60:	4b3f      	ldr	r3, [pc, #252]	; (800df60 <xQueueGenericSend+0x1f8>)
 800de62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de66:	601a      	str	r2, [r3, #0]
 800de68:	f3bf 8f4f 	dsb	sy
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	e00a      	b.n	800de88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800de72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de74:	2b00      	cmp	r3, #0
 800de76:	d007      	beq.n	800de88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800de78:	4b39      	ldr	r3, [pc, #228]	; (800df60 <xQueueGenericSend+0x1f8>)
 800de7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de7e:	601a      	str	r2, [r3, #0]
 800de80:	f3bf 8f4f 	dsb	sy
 800de84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800de88:	f002 fac4 	bl	8010414 <vPortExitCritical>
				return pdPASS;
 800de8c:	2301      	movs	r3, #1
 800de8e:	e063      	b.n	800df58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d103      	bne.n	800de9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de96:	f002 fabd 	bl	8010414 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	e05c      	b.n	800df58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d106      	bne.n	800deb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dea4:	f107 0314 	add.w	r3, r7, #20
 800dea8:	4618      	mov	r0, r3
 800deaa:	f001 fabf 	bl	800f42c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800deae:	2301      	movs	r3, #1
 800deb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800deb2:	f002 faaf 	bl	8010414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800deb6:	f001 f819 	bl	800eeec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800deba:	f002 fa7b 	bl	80103b4 <vPortEnterCritical>
 800debe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dec4:	b25b      	sxtb	r3, r3
 800dec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800deca:	d103      	bne.n	800ded4 <xQueueGenericSend+0x16c>
 800decc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dece:	2200      	movs	r2, #0
 800ded0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ded4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800deda:	b25b      	sxtb	r3, r3
 800dedc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dee0:	d103      	bne.n	800deea <xQueueGenericSend+0x182>
 800dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800deea:	f002 fa93 	bl	8010414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800deee:	1d3a      	adds	r2, r7, #4
 800def0:	f107 0314 	add.w	r3, r7, #20
 800def4:	4611      	mov	r1, r2
 800def6:	4618      	mov	r0, r3
 800def8:	f001 faae 	bl	800f458 <xTaskCheckForTimeOut>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d124      	bne.n	800df4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800df02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df04:	f000 fcf5 	bl	800e8f2 <prvIsQueueFull>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d018      	beq.n	800df40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800df0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df10:	3310      	adds	r3, #16
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	4611      	mov	r1, r2
 800df16:	4618      	mov	r0, r3
 800df18:	f001 f9d4 	bl	800f2c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800df1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df1e:	f000 fc80 	bl	800e822 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800df22:	f000 fff1 	bl	800ef08 <xTaskResumeAll>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f47f af7c 	bne.w	800de26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800df2e:	4b0c      	ldr	r3, [pc, #48]	; (800df60 <xQueueGenericSend+0x1f8>)
 800df30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df34:	601a      	str	r2, [r3, #0]
 800df36:	f3bf 8f4f 	dsb	sy
 800df3a:	f3bf 8f6f 	isb	sy
 800df3e:	e772      	b.n	800de26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800df40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df42:	f000 fc6e 	bl	800e822 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df46:	f000 ffdf 	bl	800ef08 <xTaskResumeAll>
 800df4a:	e76c      	b.n	800de26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800df4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df4e:	f000 fc68 	bl	800e822 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df52:	f000 ffd9 	bl	800ef08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800df56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3738      	adds	r7, #56	; 0x38
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	e000ed04 	.word	0xe000ed04

0800df64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b090      	sub	sp, #64	; 0x40
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
 800df70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800df76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d10a      	bne.n	800df92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800df7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df80:	f383 8811 	msr	BASEPRI, r3
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800df8e:	bf00      	nop
 800df90:	e7fe      	b.n	800df90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d103      	bne.n	800dfa0 <xQueueGenericSendFromISR+0x3c>
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d101      	bne.n	800dfa4 <xQueueGenericSendFromISR+0x40>
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e000      	b.n	800dfa6 <xQueueGenericSendFromISR+0x42>
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d10a      	bne.n	800dfc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfae:	f383 8811 	msr	BASEPRI, r3
 800dfb2:	f3bf 8f6f 	isb	sy
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dfbc:	bf00      	nop
 800dfbe:	e7fe      	b.n	800dfbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2b02      	cmp	r3, #2
 800dfc4:	d103      	bne.n	800dfce <xQueueGenericSendFromISR+0x6a>
 800dfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d101      	bne.n	800dfd2 <xQueueGenericSendFromISR+0x6e>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e000      	b.n	800dfd4 <xQueueGenericSendFromISR+0x70>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10a      	bne.n	800dfee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800dfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	f3bf 8f6f 	isb	sy
 800dfe4:	f3bf 8f4f 	dsb	sy
 800dfe8:	623b      	str	r3, [r7, #32]
}
 800dfea:	bf00      	nop
 800dfec:	e7fe      	b.n	800dfec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dfee:	f002 fac3 	bl	8010578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dff2:	f3ef 8211 	mrs	r2, BASEPRI
 800dff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffa:	f383 8811 	msr	BASEPRI, r3
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f3bf 8f4f 	dsb	sy
 800e006:	61fa      	str	r2, [r7, #28]
 800e008:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e00a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e00c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e016:	429a      	cmp	r2, r3
 800e018:	d302      	bcc.n	800e020 <xQueueGenericSendFromISR+0xbc>
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d12f      	bne.n	800e080 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e02e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	68b9      	ldr	r1, [r7, #8]
 800e034:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e036:	f000 fb64 	bl	800e702 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e03a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e03e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e042:	d112      	bne.n	800e06a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d016      	beq.n	800e07a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04e:	3324      	adds	r3, #36	; 0x24
 800e050:	4618      	mov	r0, r3
 800e052:	f001 f987 	bl	800f364 <xTaskRemoveFromEventList>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d00e      	beq.n	800e07a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00b      	beq.n	800e07a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	601a      	str	r2, [r3, #0]
 800e068:	e007      	b.n	800e07a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e06a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e06e:	3301      	adds	r3, #1
 800e070:	b2db      	uxtb	r3, r3
 800e072:	b25a      	sxtb	r2, r3
 800e074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e07a:	2301      	movs	r3, #1
 800e07c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e07e:	e001      	b.n	800e084 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e080:	2300      	movs	r3, #0
 800e082:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e086:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e08e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e092:	4618      	mov	r0, r3
 800e094:	3740      	adds	r7, #64	; 0x40
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b08e      	sub	sp, #56	; 0x38
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10a      	bne.n	800e0c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	623b      	str	r3, [r7, #32]
}
 800e0c0:	bf00      	nop
 800e0c2:	e7fe      	b.n	800e0c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d00a      	beq.n	800e0e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800e0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d0:	f383 8811 	msr	BASEPRI, r3
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	61fb      	str	r3, [r7, #28]
}
 800e0de:	bf00      	nop
 800e0e0:	e7fe      	b.n	800e0e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d103      	bne.n	800e0f2 <xQueueGiveFromISR+0x58>
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d101      	bne.n	800e0f6 <xQueueGiveFromISR+0x5c>
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e000      	b.n	800e0f8 <xQueueGiveFromISR+0x5e>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d10a      	bne.n	800e112 <xQueueGiveFromISR+0x78>
	__asm volatile
 800e0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e100:	f383 8811 	msr	BASEPRI, r3
 800e104:	f3bf 8f6f 	isb	sy
 800e108:	f3bf 8f4f 	dsb	sy
 800e10c:	61bb      	str	r3, [r7, #24]
}
 800e10e:	bf00      	nop
 800e110:	e7fe      	b.n	800e110 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e112:	f002 fa31 	bl	8010578 <vPortValidateInterruptPriority>
	__asm volatile
 800e116:	f3ef 8211 	mrs	r2, BASEPRI
 800e11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11e:	f383 8811 	msr	BASEPRI, r3
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	617a      	str	r2, [r7, #20]
 800e12c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e12e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e130:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e136:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e13c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e13e:	429a      	cmp	r2, r3
 800e140:	d22b      	bcs.n	800e19a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14e:	1c5a      	adds	r2, r3, #1
 800e150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e152:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e154:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e15c:	d112      	bne.n	800e184 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e162:	2b00      	cmp	r3, #0
 800e164:	d016      	beq.n	800e194 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e168:	3324      	adds	r3, #36	; 0x24
 800e16a:	4618      	mov	r0, r3
 800e16c:	f001 f8fa 	bl	800f364 <xTaskRemoveFromEventList>
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00e      	beq.n	800e194 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d00b      	beq.n	800e194 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2201      	movs	r2, #1
 800e180:	601a      	str	r2, [r3, #0]
 800e182:	e007      	b.n	800e194 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e188:	3301      	adds	r3, #1
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	b25a      	sxtb	r2, r3
 800e18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e194:	2301      	movs	r3, #1
 800e196:	637b      	str	r3, [r7, #52]	; 0x34
 800e198:	e001      	b.n	800e19e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	637b      	str	r3, [r7, #52]	; 0x34
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f383 8811 	msr	BASEPRI, r3
}
 800e1a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3738      	adds	r7, #56	; 0x38
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08c      	sub	sp, #48	; 0x30
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10a      	bne.n	800e1e4 <xQueueReceive+0x30>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	623b      	str	r3, [r7, #32]
}
 800e1e0:	bf00      	nop
 800e1e2:	e7fe      	b.n	800e1e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d103      	bne.n	800e1f2 <xQueueReceive+0x3e>
 800e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d101      	bne.n	800e1f6 <xQueueReceive+0x42>
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e000      	b.n	800e1f8 <xQueueReceive+0x44>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d10a      	bne.n	800e212 <xQueueReceive+0x5e>
	__asm volatile
 800e1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e200:	f383 8811 	msr	BASEPRI, r3
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	61fb      	str	r3, [r7, #28]
}
 800e20e:	bf00      	nop
 800e210:	e7fe      	b.n	800e210 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e212:	f001 fa79 	bl	800f708 <xTaskGetSchedulerState>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d102      	bne.n	800e222 <xQueueReceive+0x6e>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d101      	bne.n	800e226 <xQueueReceive+0x72>
 800e222:	2301      	movs	r3, #1
 800e224:	e000      	b.n	800e228 <xQueueReceive+0x74>
 800e226:	2300      	movs	r3, #0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10a      	bne.n	800e242 <xQueueReceive+0x8e>
	__asm volatile
 800e22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e230:	f383 8811 	msr	BASEPRI, r3
 800e234:	f3bf 8f6f 	isb	sy
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	61bb      	str	r3, [r7, #24]
}
 800e23e:	bf00      	nop
 800e240:	e7fe      	b.n	800e240 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e242:	f002 f8b7 	bl	80103b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e24a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d01f      	beq.n	800e292 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e252:	68b9      	ldr	r1, [r7, #8]
 800e254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e256:	f000 fabe 	bl	800e7d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	1e5a      	subs	r2, r3, #1
 800e25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e260:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e264:	691b      	ldr	r3, [r3, #16]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00f      	beq.n	800e28a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26c:	3310      	adds	r3, #16
 800e26e:	4618      	mov	r0, r3
 800e270:	f001 f878 	bl	800f364 <xTaskRemoveFromEventList>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d007      	beq.n	800e28a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e27a:	4b3d      	ldr	r3, [pc, #244]	; (800e370 <xQueueReceive+0x1bc>)
 800e27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	f3bf 8f4f 	dsb	sy
 800e286:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e28a:	f002 f8c3 	bl	8010414 <vPortExitCritical>
				return pdPASS;
 800e28e:	2301      	movs	r3, #1
 800e290:	e069      	b.n	800e366 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d103      	bne.n	800e2a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e298:	f002 f8bc 	bl	8010414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e29c:	2300      	movs	r3, #0
 800e29e:	e062      	b.n	800e366 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d106      	bne.n	800e2b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2a6:	f107 0310 	add.w	r3, r7, #16
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f001 f8be 	bl	800f42c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2b4:	f002 f8ae 	bl	8010414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2b8:	f000 fe18 	bl	800eeec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2bc:	f002 f87a 	bl	80103b4 <vPortEnterCritical>
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2c6:	b25b      	sxtb	r3, r3
 800e2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2cc:	d103      	bne.n	800e2d6 <xQueueReceive+0x122>
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2dc:	b25b      	sxtb	r3, r3
 800e2de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2e2:	d103      	bne.n	800e2ec <xQueueReceive+0x138>
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2ec:	f002 f892 	bl	8010414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2f0:	1d3a      	adds	r2, r7, #4
 800e2f2:	f107 0310 	add.w	r3, r7, #16
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f001 f8ad 	bl	800f458 <xTaskCheckForTimeOut>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d123      	bne.n	800e34c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e306:	f000 fade 	bl	800e8c6 <prvIsQueueEmpty>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d017      	beq.n	800e340 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e312:	3324      	adds	r3, #36	; 0x24
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	4611      	mov	r1, r2
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 ffd3 	bl	800f2c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e320:	f000 fa7f 	bl	800e822 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e324:	f000 fdf0 	bl	800ef08 <xTaskResumeAll>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d189      	bne.n	800e242 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e32e:	4b10      	ldr	r3, [pc, #64]	; (800e370 <xQueueReceive+0x1bc>)
 800e330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e334:	601a      	str	r2, [r3, #0]
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	e780      	b.n	800e242 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e342:	f000 fa6e 	bl	800e822 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e346:	f000 fddf 	bl	800ef08 <xTaskResumeAll>
 800e34a:	e77a      	b.n	800e242 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e34c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e34e:	f000 fa68 	bl	800e822 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e352:	f000 fdd9 	bl	800ef08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e358:	f000 fab5 	bl	800e8c6 <prvIsQueueEmpty>
 800e35c:	4603      	mov	r3, r0
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f43f af6f 	beq.w	800e242 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e364:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e366:	4618      	mov	r0, r3
 800e368:	3730      	adds	r7, #48	; 0x30
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	e000ed04 	.word	0xe000ed04

0800e374 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b08e      	sub	sp, #56	; 0x38
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e37e:	2300      	movs	r3, #0
 800e380:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e386:	2300      	movs	r3, #0
 800e388:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10a      	bne.n	800e3a6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	623b      	str	r3, [r7, #32]
}
 800e3a2:	bf00      	nop
 800e3a4:	e7fe      	b.n	800e3a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00a      	beq.n	800e3c4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	61fb      	str	r3, [r7, #28]
}
 800e3c0:	bf00      	nop
 800e3c2:	e7fe      	b.n	800e3c2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3c4:	f001 f9a0 	bl	800f708 <xTaskGetSchedulerState>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d102      	bne.n	800e3d4 <xQueueSemaphoreTake+0x60>
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <xQueueSemaphoreTake+0x64>
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e000      	b.n	800e3da <xQueueSemaphoreTake+0x66>
 800e3d8:	2300      	movs	r3, #0
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d10a      	bne.n	800e3f4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	61bb      	str	r3, [r7, #24]
}
 800e3f0:	bf00      	nop
 800e3f2:	e7fe      	b.n	800e3f2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3f4:	f001 ffde 	bl	80103b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e400:	2b00      	cmp	r3, #0
 800e402:	d024      	beq.n	800e44e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e406:	1e5a      	subs	r2, r3, #1
 800e408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d104      	bne.n	800e41e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e414:	f001 faee 	bl	800f9f4 <pvTaskIncrementMutexHeldCount>
 800e418:	4602      	mov	r2, r0
 800e41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00f      	beq.n	800e446 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e428:	3310      	adds	r3, #16
 800e42a:	4618      	mov	r0, r3
 800e42c:	f000 ff9a 	bl	800f364 <xTaskRemoveFromEventList>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d007      	beq.n	800e446 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e436:	4b54      	ldr	r3, [pc, #336]	; (800e588 <xQueueSemaphoreTake+0x214>)
 800e438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e43c:	601a      	str	r2, [r3, #0]
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e446:	f001 ffe5 	bl	8010414 <vPortExitCritical>
				return pdPASS;
 800e44a:	2301      	movs	r3, #1
 800e44c:	e097      	b.n	800e57e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d111      	bne.n	800e478 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00a      	beq.n	800e470 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45e:	f383 8811 	msr	BASEPRI, r3
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	f3bf 8f4f 	dsb	sy
 800e46a:	617b      	str	r3, [r7, #20]
}
 800e46c:	bf00      	nop
 800e46e:	e7fe      	b.n	800e46e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e470:	f001 ffd0 	bl	8010414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e474:	2300      	movs	r3, #0
 800e476:	e082      	b.n	800e57e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d106      	bne.n	800e48c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e47e:	f107 030c 	add.w	r3, r7, #12
 800e482:	4618      	mov	r0, r3
 800e484:	f000 ffd2 	bl	800f42c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e488:	2301      	movs	r3, #1
 800e48a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e48c:	f001 ffc2 	bl	8010414 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e490:	f000 fd2c 	bl	800eeec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e494:	f001 ff8e 	bl	80103b4 <vPortEnterCritical>
 800e498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e49e:	b25b      	sxtb	r3, r3
 800e4a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4a4:	d103      	bne.n	800e4ae <xQueueSemaphoreTake+0x13a>
 800e4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4b4:	b25b      	sxtb	r3, r3
 800e4b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4ba:	d103      	bne.n	800e4c4 <xQueueSemaphoreTake+0x150>
 800e4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e4c4:	f001 ffa6 	bl	8010414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e4c8:	463a      	mov	r2, r7
 800e4ca:	f107 030c 	add.w	r3, r7, #12
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f000 ffc1 	bl	800f458 <xTaskCheckForTimeOut>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d132      	bne.n	800e542 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4de:	f000 f9f2 	bl	800e8c6 <prvIsQueueEmpty>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d026      	beq.n	800e536 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d109      	bne.n	800e504 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e4f0:	f001 ff60 	bl	80103b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f001 f923 	bl	800f744 <xTaskPriorityInherit>
 800e4fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e500:	f001 ff88 	bl	8010414 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e506:	3324      	adds	r3, #36	; 0x24
 800e508:	683a      	ldr	r2, [r7, #0]
 800e50a:	4611      	mov	r1, r2
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 fed9 	bl	800f2c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e514:	f000 f985 	bl	800e822 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e518:	f000 fcf6 	bl	800ef08 <xTaskResumeAll>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f47f af68 	bne.w	800e3f4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e524:	4b18      	ldr	r3, [pc, #96]	; (800e588 <xQueueSemaphoreTake+0x214>)
 800e526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e52a:	601a      	str	r2, [r3, #0]
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	f3bf 8f6f 	isb	sy
 800e534:	e75e      	b.n	800e3f4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e538:	f000 f973 	bl	800e822 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e53c:	f000 fce4 	bl	800ef08 <xTaskResumeAll>
 800e540:	e758      	b.n	800e3f4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e544:	f000 f96d 	bl	800e822 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e548:	f000 fcde 	bl	800ef08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e54c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e54e:	f000 f9ba 	bl	800e8c6 <prvIsQueueEmpty>
 800e552:	4603      	mov	r3, r0
 800e554:	2b00      	cmp	r3, #0
 800e556:	f43f af4d 	beq.w	800e3f4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00d      	beq.n	800e57c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e560:	f001 ff28 	bl	80103b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e566:	f000 f8b4 	bl	800e6d2 <prvGetDisinheritPriorityAfterTimeout>
 800e56a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	689b      	ldr	r3, [r3, #8]
 800e570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e572:	4618      	mov	r0, r3
 800e574:	f001 f9bc 	bl	800f8f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e578:	f001 ff4c 	bl	8010414 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e57c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3738      	adds	r7, #56	; 0x38
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	e000ed04 	.word	0xe000ed04

0800e58c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b08e      	sub	sp, #56	; 0x38
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d10a      	bne.n	800e5b8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a6:	f383 8811 	msr	BASEPRI, r3
 800e5aa:	f3bf 8f6f 	isb	sy
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	623b      	str	r3, [r7, #32]
}
 800e5b4:	bf00      	nop
 800e5b6:	e7fe      	b.n	800e5b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d103      	bne.n	800e5c6 <xQueueReceiveFromISR+0x3a>
 800e5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d101      	bne.n	800e5ca <xQueueReceiveFromISR+0x3e>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e000      	b.n	800e5cc <xQueueReceiveFromISR+0x40>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10a      	bne.n	800e5e6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d4:	f383 8811 	msr	BASEPRI, r3
 800e5d8:	f3bf 8f6f 	isb	sy
 800e5dc:	f3bf 8f4f 	dsb	sy
 800e5e0:	61fb      	str	r3, [r7, #28]
}
 800e5e2:	bf00      	nop
 800e5e4:	e7fe      	b.n	800e5e4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e5e6:	f001 ffc7 	bl	8010578 <vPortValidateInterruptPriority>
	__asm volatile
 800e5ea:	f3ef 8211 	mrs	r2, BASEPRI
 800e5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f2:	f383 8811 	msr	BASEPRI, r3
 800e5f6:	f3bf 8f6f 	isb	sy
 800e5fa:	f3bf 8f4f 	dsb	sy
 800e5fe:	61ba      	str	r2, [r7, #24]
 800e600:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e602:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e604:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d02f      	beq.n	800e672 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e61c:	68b9      	ldr	r1, [r7, #8]
 800e61e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e620:	f000 f8d9 	bl	800e7d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e626:	1e5a      	subs	r2, r3, #1
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e62c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e634:	d112      	bne.n	800e65c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d016      	beq.n	800e66c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e640:	3310      	adds	r3, #16
 800e642:	4618      	mov	r0, r3
 800e644:	f000 fe8e 	bl	800f364 <xTaskRemoveFromEventList>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00e      	beq.n	800e66c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00b      	beq.n	800e66c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2201      	movs	r2, #1
 800e658:	601a      	str	r2, [r3, #0]
 800e65a:	e007      	b.n	800e66c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e65c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e660:	3301      	adds	r3, #1
 800e662:	b2db      	uxtb	r3, r3
 800e664:	b25a      	sxtb	r2, r3
 800e666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e66c:	2301      	movs	r3, #1
 800e66e:	637b      	str	r3, [r7, #52]	; 0x34
 800e670:	e001      	b.n	800e676 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e672:	2300      	movs	r3, #0
 800e674:	637b      	str	r3, [r7, #52]	; 0x34
 800e676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e678:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	f383 8811 	msr	BASEPRI, r3
}
 800e680:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e684:	4618      	mov	r0, r3
 800e686:	3738      	adds	r7, #56	; 0x38
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b084      	sub	sp, #16
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d10a      	bne.n	800e6b4 <vQueueDelete+0x28>
	__asm volatile
 800e69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a2:	f383 8811 	msr	BASEPRI, r3
 800e6a6:	f3bf 8f6f 	isb	sy
 800e6aa:	f3bf 8f4f 	dsb	sy
 800e6ae:	60bb      	str	r3, [r7, #8]
}
 800e6b0:	bf00      	nop
 800e6b2:	e7fe      	b.n	800e6b2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e6b4:	68f8      	ldr	r0, [r7, #12]
 800e6b6:	f000 f95f 	bl	800e978 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d102      	bne.n	800e6ca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e6c4:	68f8      	ldr	r0, [r7, #12]
 800e6c6:	f002 f863 	bl	8010790 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e6ca:	bf00      	nop
 800e6cc:	3710      	adds	r7, #16
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}

0800e6d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e6d2:	b480      	push	{r7}
 800e6d4:	b085      	sub	sp, #20
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d006      	beq.n	800e6f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e6ec:	60fb      	str	r3, [r7, #12]
 800e6ee:	e001      	b.n	800e6f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
	}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3714      	adds	r7, #20
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e702:	b580      	push	{r7, lr}
 800e704:	b086      	sub	sp, #24
 800e706:	af00      	add	r7, sp, #0
 800e708:	60f8      	str	r0, [r7, #12]
 800e70a:	60b9      	str	r1, [r7, #8]
 800e70c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e70e:	2300      	movs	r3, #0
 800e710:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e716:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10d      	bne.n	800e73c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d14d      	bne.n	800e7c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	4618      	mov	r0, r3
 800e72e:	f001 f871 	bl	800f814 <xTaskPriorityDisinherit>
 800e732:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2200      	movs	r2, #0
 800e738:	609a      	str	r2, [r3, #8]
 800e73a:	e043      	b.n	800e7c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d119      	bne.n	800e776 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	6858      	ldr	r0, [r3, #4]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e74a:	461a      	mov	r2, r3
 800e74c:	68b9      	ldr	r1, [r7, #8]
 800e74e:	f002 fa60 	bl	8010c12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	685a      	ldr	r2, [r3, #4]
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e75a:	441a      	add	r2, r3
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	685a      	ldr	r2, [r3, #4]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d32b      	bcc.n	800e7c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	605a      	str	r2, [r3, #4]
 800e774:	e026      	b.n	800e7c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	68d8      	ldr	r0, [r3, #12]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e77e:	461a      	mov	r2, r3
 800e780:	68b9      	ldr	r1, [r7, #8]
 800e782:	f002 fa46 	bl	8010c12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	68da      	ldr	r2, [r3, #12]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e78e:	425b      	negs	r3, r3
 800e790:	441a      	add	r2, r3
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	68da      	ldr	r2, [r3, #12]
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d207      	bcs.n	800e7b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	689a      	ldr	r2, [r3, #8]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7aa:	425b      	negs	r3, r3
 800e7ac:	441a      	add	r2, r3
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d105      	bne.n	800e7c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d002      	beq.n	800e7c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	3b01      	subs	r3, #1
 800e7c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	1c5a      	adds	r2, r3, #1
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e7cc:	697b      	ldr	r3, [r7, #20]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3718      	adds	r7, #24
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e7d6:	b580      	push	{r7, lr}
 800e7d8:	b082      	sub	sp, #8
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
 800e7de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d018      	beq.n	800e81a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	68da      	ldr	r2, [r3, #12]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7f0:	441a      	add	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	68da      	ldr	r2, [r3, #12]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	689b      	ldr	r3, [r3, #8]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d303      	bcc.n	800e80a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	68d9      	ldr	r1, [r3, #12]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e812:	461a      	mov	r2, r3
 800e814:	6838      	ldr	r0, [r7, #0]
 800e816:	f002 f9fc 	bl	8010c12 <memcpy>
	}
}
 800e81a:	bf00      	nop
 800e81c:	3708      	adds	r7, #8
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b084      	sub	sp, #16
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e82a:	f001 fdc3 	bl	80103b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e834:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e836:	e011      	b.n	800e85c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d012      	beq.n	800e866 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	3324      	adds	r3, #36	; 0x24
 800e844:	4618      	mov	r0, r3
 800e846:	f000 fd8d 	bl	800f364 <xTaskRemoveFromEventList>
 800e84a:	4603      	mov	r3, r0
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d001      	beq.n	800e854 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e850:	f000 fe64 	bl	800f51c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e854:	7bfb      	ldrb	r3, [r7, #15]
 800e856:	3b01      	subs	r3, #1
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e85c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e860:	2b00      	cmp	r3, #0
 800e862:	dce9      	bgt.n	800e838 <prvUnlockQueue+0x16>
 800e864:	e000      	b.n	800e868 <prvUnlockQueue+0x46>
					break;
 800e866:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	22ff      	movs	r2, #255	; 0xff
 800e86c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e870:	f001 fdd0 	bl	8010414 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e874:	f001 fd9e 	bl	80103b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e87e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e880:	e011      	b.n	800e8a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d012      	beq.n	800e8b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	3310      	adds	r3, #16
 800e88e:	4618      	mov	r0, r3
 800e890:	f000 fd68 	bl	800f364 <xTaskRemoveFromEventList>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d001      	beq.n	800e89e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e89a:	f000 fe3f 	bl	800f51c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e89e:	7bbb      	ldrb	r3, [r7, #14]
 800e8a0:	3b01      	subs	r3, #1
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	dce9      	bgt.n	800e882 <prvUnlockQueue+0x60>
 800e8ae:	e000      	b.n	800e8b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e8b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	22ff      	movs	r2, #255	; 0xff
 800e8b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e8ba:	f001 fdab 	bl	8010414 <vPortExitCritical>
}
 800e8be:	bf00      	nop
 800e8c0:	3710      	adds	r7, #16
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b084      	sub	sp, #16
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e8ce:	f001 fd71 	bl	80103b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d102      	bne.n	800e8e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	60fb      	str	r3, [r7, #12]
 800e8de:	e001      	b.n	800e8e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e8e4:	f001 fd96 	bl	8010414 <vPortExitCritical>

	return xReturn;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b084      	sub	sp, #16
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e8fa:	f001 fd5b 	bl	80103b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e906:	429a      	cmp	r2, r3
 800e908:	d102      	bne.n	800e910 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e90a:	2301      	movs	r3, #1
 800e90c:	60fb      	str	r3, [r7, #12]
 800e90e:	e001      	b.n	800e914 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e910:	2300      	movs	r3, #0
 800e912:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e914:	f001 fd7e 	bl	8010414 <vPortExitCritical>

	return xReturn;
 800e918:	68fb      	ldr	r3, [r7, #12]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3710      	adds	r7, #16
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
	...

0800e924 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e924:	b480      	push	{r7}
 800e926:	b085      	sub	sp, #20
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e92e:	2300      	movs	r3, #0
 800e930:	60fb      	str	r3, [r7, #12]
 800e932:	e014      	b.n	800e95e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e934:	4a0f      	ldr	r2, [pc, #60]	; (800e974 <vQueueAddToRegistry+0x50>)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d10b      	bne.n	800e958 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e940:	490c      	ldr	r1, [pc, #48]	; (800e974 <vQueueAddToRegistry+0x50>)
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	683a      	ldr	r2, [r7, #0]
 800e946:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e94a:	4a0a      	ldr	r2, [pc, #40]	; (800e974 <vQueueAddToRegistry+0x50>)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	00db      	lsls	r3, r3, #3
 800e950:	4413      	add	r3, r2
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e956:	e006      	b.n	800e966 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	3301      	adds	r3, #1
 800e95c:	60fb      	str	r3, [r7, #12]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2b07      	cmp	r3, #7
 800e962:	d9e7      	bls.n	800e934 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e964:	bf00      	nop
 800e966:	bf00      	nop
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	20001468 	.word	0x20001468

0800e978 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e978:	b480      	push	{r7}
 800e97a:	b085      	sub	sp, #20
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e980:	2300      	movs	r3, #0
 800e982:	60fb      	str	r3, [r7, #12]
 800e984:	e016      	b.n	800e9b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e986:	4a10      	ldr	r2, [pc, #64]	; (800e9c8 <vQueueUnregisterQueue+0x50>)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	00db      	lsls	r3, r3, #3
 800e98c:	4413      	add	r3, r2
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	429a      	cmp	r2, r3
 800e994:	d10b      	bne.n	800e9ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e996:	4a0c      	ldr	r2, [pc, #48]	; (800e9c8 <vQueueUnregisterQueue+0x50>)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2100      	movs	r1, #0
 800e99c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e9a0:	4a09      	ldr	r2, [pc, #36]	; (800e9c8 <vQueueUnregisterQueue+0x50>)
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	00db      	lsls	r3, r3, #3
 800e9a6:	4413      	add	r3, r2
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	605a      	str	r2, [r3, #4]
				break;
 800e9ac:	e006      	b.n	800e9bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	60fb      	str	r3, [r7, #12]
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2b07      	cmp	r3, #7
 800e9b8:	d9e5      	bls.n	800e986 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e9ba:	bf00      	nop
 800e9bc:	bf00      	nop
 800e9be:	3714      	adds	r7, #20
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr
 800e9c8:	20001468 	.word	0x20001468

0800e9cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e9dc:	f001 fcea 	bl	80103b4 <vPortEnterCritical>
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9e6:	b25b      	sxtb	r3, r3
 800e9e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9ec:	d103      	bne.n	800e9f6 <vQueueWaitForMessageRestricted+0x2a>
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9fc:	b25b      	sxtb	r3, r3
 800e9fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea02:	d103      	bne.n	800ea0c <vQueueWaitForMessageRestricted+0x40>
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea0c:	f001 fd02 	bl	8010414 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d106      	bne.n	800ea26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	3324      	adds	r3, #36	; 0x24
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	68b9      	ldr	r1, [r7, #8]
 800ea20:	4618      	mov	r0, r3
 800ea22:	f000 fc73 	bl	800f30c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ea26:	6978      	ldr	r0, [r7, #20]
 800ea28:	f7ff fefb 	bl	800e822 <prvUnlockQueue>
	}
 800ea2c:	bf00      	nop
 800ea2e:	3718      	adds	r7, #24
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b08e      	sub	sp, #56	; 0x38
 800ea38:	af04      	add	r7, sp, #16
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	607a      	str	r2, [r7, #4]
 800ea40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ea42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d10a      	bne.n	800ea5e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ea48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4c:	f383 8811 	msr	BASEPRI, r3
 800ea50:	f3bf 8f6f 	isb	sy
 800ea54:	f3bf 8f4f 	dsb	sy
 800ea58:	623b      	str	r3, [r7, #32]
}
 800ea5a:	bf00      	nop
 800ea5c:	e7fe      	b.n	800ea5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ea5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d10a      	bne.n	800ea7a <xTaskCreateStatic+0x46>
	__asm volatile
 800ea64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea68:	f383 8811 	msr	BASEPRI, r3
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f3bf 8f4f 	dsb	sy
 800ea74:	61fb      	str	r3, [r7, #28]
}
 800ea76:	bf00      	nop
 800ea78:	e7fe      	b.n	800ea78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ea7a:	23bc      	movs	r3, #188	; 0xbc
 800ea7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	2bbc      	cmp	r3, #188	; 0xbc
 800ea82:	d00a      	beq.n	800ea9a <xTaskCreateStatic+0x66>
	__asm volatile
 800ea84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea88:	f383 8811 	msr	BASEPRI, r3
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	f3bf 8f4f 	dsb	sy
 800ea94:	61bb      	str	r3, [r7, #24]
}
 800ea96:	bf00      	nop
 800ea98:	e7fe      	b.n	800ea98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ea9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ea9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d01e      	beq.n	800eae0 <xTaskCreateStatic+0xac>
 800eaa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d01b      	beq.n	800eae0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaaa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eab0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab4:	2202      	movs	r2, #2
 800eab6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eaba:	2300      	movs	r3, #0
 800eabc:	9303      	str	r3, [sp, #12]
 800eabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac0:	9302      	str	r3, [sp, #8]
 800eac2:	f107 0314 	add.w	r3, r7, #20
 800eac6:	9301      	str	r3, [sp, #4]
 800eac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	68b9      	ldr	r1, [r7, #8]
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f000 f850 	bl	800eb78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ead8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eada:	f000 f8f3 	bl	800ecc4 <prvAddNewTaskToReadyList>
 800eade:	e001      	b.n	800eae4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800eae0:	2300      	movs	r3, #0
 800eae2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eae4:	697b      	ldr	r3, [r7, #20]
	}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3728      	adds	r7, #40	; 0x28
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}

0800eaee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b08c      	sub	sp, #48	; 0x30
 800eaf2:	af04      	add	r7, sp, #16
 800eaf4:	60f8      	str	r0, [r7, #12]
 800eaf6:	60b9      	str	r1, [r7, #8]
 800eaf8:	603b      	str	r3, [r7, #0]
 800eafa:	4613      	mov	r3, r2
 800eafc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eafe:	88fb      	ldrh	r3, [r7, #6]
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	4618      	mov	r0, r3
 800eb04:	f001 fd78 	bl	80105f8 <pvPortMalloc>
 800eb08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d00e      	beq.n	800eb2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eb10:	20bc      	movs	r0, #188	; 0xbc
 800eb12:	f001 fd71 	bl	80105f8 <pvPortMalloc>
 800eb16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d003      	beq.n	800eb26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eb1e:	69fb      	ldr	r3, [r7, #28]
 800eb20:	697a      	ldr	r2, [r7, #20]
 800eb22:	631a      	str	r2, [r3, #48]	; 0x30
 800eb24:	e005      	b.n	800eb32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eb26:	6978      	ldr	r0, [r7, #20]
 800eb28:	f001 fe32 	bl	8010790 <vPortFree>
 800eb2c:	e001      	b.n	800eb32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d017      	beq.n	800eb68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eb38:	69fb      	ldr	r3, [r7, #28]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eb40:	88fa      	ldrh	r2, [r7, #6]
 800eb42:	2300      	movs	r3, #0
 800eb44:	9303      	str	r3, [sp, #12]
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	9302      	str	r3, [sp, #8]
 800eb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb4c:	9301      	str	r3, [sp, #4]
 800eb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	68b9      	ldr	r1, [r7, #8]
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f000 f80e 	bl	800eb78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb5c:	69f8      	ldr	r0, [r7, #28]
 800eb5e:	f000 f8b1 	bl	800ecc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eb62:	2301      	movs	r3, #1
 800eb64:	61bb      	str	r3, [r7, #24]
 800eb66:	e002      	b.n	800eb6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eb6e:	69bb      	ldr	r3, [r7, #24]
	}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3720      	adds	r7, #32
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b088      	sub	sp, #32
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
 800eb84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	009b      	lsls	r3, r3, #2
 800eb8e:	461a      	mov	r2, r3
 800eb90:	21a5      	movs	r1, #165	; 0xa5
 800eb92:	f002 f84c 	bl	8010c2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eba0:	3b01      	subs	r3, #1
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	4413      	add	r3, r2
 800eba6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eba8:	69bb      	ldr	r3, [r7, #24]
 800ebaa:	f023 0307 	bic.w	r3, r3, #7
 800ebae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	f003 0307 	and.w	r3, r3, #7
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00a      	beq.n	800ebd0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ebba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbe:	f383 8811 	msr	BASEPRI, r3
 800ebc2:	f3bf 8f6f 	isb	sy
 800ebc6:	f3bf 8f4f 	dsb	sy
 800ebca:	617b      	str	r3, [r7, #20]
}
 800ebcc:	bf00      	nop
 800ebce:	e7fe      	b.n	800ebce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d01f      	beq.n	800ec16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	61fb      	str	r3, [r7, #28]
 800ebda:	e012      	b.n	800ec02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ebdc:	68ba      	ldr	r2, [r7, #8]
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	7819      	ldrb	r1, [r3, #0]
 800ebe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	4413      	add	r3, r2
 800ebea:	3334      	adds	r3, #52	; 0x34
 800ebec:	460a      	mov	r2, r1
 800ebee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ebf0:	68ba      	ldr	r2, [r7, #8]
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d006      	beq.n	800ec0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	61fb      	str	r3, [r7, #28]
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	2b0f      	cmp	r3, #15
 800ec06:	d9e9      	bls.n	800ebdc <prvInitialiseNewTask+0x64>
 800ec08:	e000      	b.n	800ec0c <prvInitialiseNewTask+0x94>
			{
				break;
 800ec0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ec0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0e:	2200      	movs	r2, #0
 800ec10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec14:	e003      	b.n	800ec1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ec16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec20:	2b37      	cmp	r3, #55	; 0x37
 800ec22:	d901      	bls.n	800ec28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec24:	2337      	movs	r3, #55	; 0x37
 800ec26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ec28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ec34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec36:	2200      	movs	r2, #0
 800ec38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	3304      	adds	r3, #4
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7fe fda0 	bl	800d784 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec46:	3318      	adds	r3, #24
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fe fd9b 	bl	800d784 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ec64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec66:	2200      	movs	r2, #0
 800ec68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ec74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec76:	3354      	adds	r3, #84	; 0x54
 800ec78:	2260      	movs	r2, #96	; 0x60
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f001 ffd6 	bl	8010c2e <memset>
 800ec82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec84:	4a0c      	ldr	r2, [pc, #48]	; (800ecb8 <prvInitialiseNewTask+0x140>)
 800ec86:	659a      	str	r2, [r3, #88]	; 0x58
 800ec88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8a:	4a0c      	ldr	r2, [pc, #48]	; (800ecbc <prvInitialiseNewTask+0x144>)
 800ec8c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec90:	4a0b      	ldr	r2, [pc, #44]	; (800ecc0 <prvInitialiseNewTask+0x148>)
 800ec92:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ec94:	683a      	ldr	r2, [r7, #0]
 800ec96:	68f9      	ldr	r1, [r7, #12]
 800ec98:	69b8      	ldr	r0, [r7, #24]
 800ec9a:	f001 fa61 	bl	8010160 <pxPortInitialiseStack>
 800ec9e:	4602      	mov	r2, r0
 800eca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d002      	beq.n	800ecb0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ecaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecb0:	bf00      	nop
 800ecb2:	3720      	adds	r7, #32
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	080156b8 	.word	0x080156b8
 800ecbc:	080156d8 	.word	0x080156d8
 800ecc0:	08015698 	.word	0x08015698

0800ecc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eccc:	f001 fb72 	bl	80103b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ecd0:	4b2d      	ldr	r3, [pc, #180]	; (800ed88 <prvAddNewTaskToReadyList+0xc4>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	4a2c      	ldr	r2, [pc, #176]	; (800ed88 <prvAddNewTaskToReadyList+0xc4>)
 800ecd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ecda:	4b2c      	ldr	r3, [pc, #176]	; (800ed8c <prvAddNewTaskToReadyList+0xc8>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d109      	bne.n	800ecf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ece2:	4a2a      	ldr	r2, [pc, #168]	; (800ed8c <prvAddNewTaskToReadyList+0xc8>)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ece8:	4b27      	ldr	r3, [pc, #156]	; (800ed88 <prvAddNewTaskToReadyList+0xc4>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d110      	bne.n	800ed12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ecf0:	f000 fc38 	bl	800f564 <prvInitialiseTaskLists>
 800ecf4:	e00d      	b.n	800ed12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ecf6:	4b26      	ldr	r3, [pc, #152]	; (800ed90 <prvAddNewTaskToReadyList+0xcc>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d109      	bne.n	800ed12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ecfe:	4b23      	ldr	r3, [pc, #140]	; (800ed8c <prvAddNewTaskToReadyList+0xc8>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d802      	bhi.n	800ed12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ed0c:	4a1f      	ldr	r2, [pc, #124]	; (800ed8c <prvAddNewTaskToReadyList+0xc8>)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ed12:	4b20      	ldr	r3, [pc, #128]	; (800ed94 <prvAddNewTaskToReadyList+0xd0>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	3301      	adds	r3, #1
 800ed18:	4a1e      	ldr	r2, [pc, #120]	; (800ed94 <prvAddNewTaskToReadyList+0xd0>)
 800ed1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ed1c:	4b1d      	ldr	r3, [pc, #116]	; (800ed94 <prvAddNewTaskToReadyList+0xd0>)
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed28:	4b1b      	ldr	r3, [pc, #108]	; (800ed98 <prvAddNewTaskToReadyList+0xd4>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d903      	bls.n	800ed38 <prvAddNewTaskToReadyList+0x74>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed34:	4a18      	ldr	r2, [pc, #96]	; (800ed98 <prvAddNewTaskToReadyList+0xd4>)
 800ed36:	6013      	str	r3, [r2, #0]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	4413      	add	r3, r2
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	4a15      	ldr	r2, [pc, #84]	; (800ed9c <prvAddNewTaskToReadyList+0xd8>)
 800ed46:	441a      	add	r2, r3
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	4610      	mov	r0, r2
 800ed50:	f7fe fd25 	bl	800d79e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed54:	f001 fb5e 	bl	8010414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed58:	4b0d      	ldr	r3, [pc, #52]	; (800ed90 <prvAddNewTaskToReadyList+0xcc>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d00e      	beq.n	800ed7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed60:	4b0a      	ldr	r3, [pc, #40]	; (800ed8c <prvAddNewTaskToReadyList+0xc8>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d207      	bcs.n	800ed7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ed6e:	4b0c      	ldr	r3, [pc, #48]	; (800eda0 <prvAddNewTaskToReadyList+0xdc>)
 800ed70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed74:	601a      	str	r2, [r3, #0]
 800ed76:	f3bf 8f4f 	dsb	sy
 800ed7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed7e:	bf00      	nop
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	2000197c 	.word	0x2000197c
 800ed8c:	200014a8 	.word	0x200014a8
 800ed90:	20001988 	.word	0x20001988
 800ed94:	20001998 	.word	0x20001998
 800ed98:	20001984 	.word	0x20001984
 800ed9c:	200014ac 	.word	0x200014ac
 800eda0:	e000ed04 	.word	0xe000ed04

0800eda4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800edac:	2300      	movs	r3, #0
 800edae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d017      	beq.n	800ede6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800edb6:	4b13      	ldr	r3, [pc, #76]	; (800ee04 <vTaskDelay+0x60>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d00a      	beq.n	800edd4 <vTaskDelay+0x30>
	__asm volatile
 800edbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc2:	f383 8811 	msr	BASEPRI, r3
 800edc6:	f3bf 8f6f 	isb	sy
 800edca:	f3bf 8f4f 	dsb	sy
 800edce:	60bb      	str	r3, [r7, #8]
}
 800edd0:	bf00      	nop
 800edd2:	e7fe      	b.n	800edd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800edd4:	f000 f88a 	bl	800eeec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800edd8:	2100      	movs	r1, #0
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 fe1e 	bl	800fa1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ede0:	f000 f892 	bl	800ef08 <xTaskResumeAll>
 800ede4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d107      	bne.n	800edfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800edec:	4b06      	ldr	r3, [pc, #24]	; (800ee08 <vTaskDelay+0x64>)
 800edee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edf2:	601a      	str	r2, [r3, #0]
 800edf4:	f3bf 8f4f 	dsb	sy
 800edf8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800edfc:	bf00      	nop
 800edfe:	3710      	adds	r7, #16
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	200019a4 	.word	0x200019a4
 800ee08:	e000ed04 	.word	0xe000ed04

0800ee0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b08a      	sub	sp, #40	; 0x28
 800ee10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ee12:	2300      	movs	r3, #0
 800ee14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ee16:	2300      	movs	r3, #0
 800ee18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ee1a:	463a      	mov	r2, r7
 800ee1c:	1d39      	adds	r1, r7, #4
 800ee1e:	f107 0308 	add.w	r3, r7, #8
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fe fc5a 	bl	800d6dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ee28:	6839      	ldr	r1, [r7, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	68ba      	ldr	r2, [r7, #8]
 800ee2e:	9202      	str	r2, [sp, #8]
 800ee30:	9301      	str	r3, [sp, #4]
 800ee32:	2300      	movs	r3, #0
 800ee34:	9300      	str	r3, [sp, #0]
 800ee36:	2300      	movs	r3, #0
 800ee38:	460a      	mov	r2, r1
 800ee3a:	4924      	ldr	r1, [pc, #144]	; (800eecc <vTaskStartScheduler+0xc0>)
 800ee3c:	4824      	ldr	r0, [pc, #144]	; (800eed0 <vTaskStartScheduler+0xc4>)
 800ee3e:	f7ff fdf9 	bl	800ea34 <xTaskCreateStatic>
 800ee42:	4603      	mov	r3, r0
 800ee44:	4a23      	ldr	r2, [pc, #140]	; (800eed4 <vTaskStartScheduler+0xc8>)
 800ee46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ee48:	4b22      	ldr	r3, [pc, #136]	; (800eed4 <vTaskStartScheduler+0xc8>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d002      	beq.n	800ee56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ee50:	2301      	movs	r3, #1
 800ee52:	617b      	str	r3, [r7, #20]
 800ee54:	e001      	b.n	800ee5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ee56:	2300      	movs	r3, #0
 800ee58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d102      	bne.n	800ee66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ee60:	f000 fe30 	bl	800fac4 <xTimerCreateTimerTask>
 800ee64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d11b      	bne.n	800eea4 <vTaskStartScheduler+0x98>
	__asm volatile
 800ee6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee70:	f383 8811 	msr	BASEPRI, r3
 800ee74:	f3bf 8f6f 	isb	sy
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	613b      	str	r3, [r7, #16]
}
 800ee7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ee80:	4b15      	ldr	r3, [pc, #84]	; (800eed8 <vTaskStartScheduler+0xcc>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	3354      	adds	r3, #84	; 0x54
 800ee86:	4a15      	ldr	r2, [pc, #84]	; (800eedc <vTaskStartScheduler+0xd0>)
 800ee88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ee8a:	4b15      	ldr	r3, [pc, #84]	; (800eee0 <vTaskStartScheduler+0xd4>)
 800ee8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ee92:	4b14      	ldr	r3, [pc, #80]	; (800eee4 <vTaskStartScheduler+0xd8>)
 800ee94:	2201      	movs	r2, #1
 800ee96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ee98:	4b13      	ldr	r3, [pc, #76]	; (800eee8 <vTaskStartScheduler+0xdc>)
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ee9e:	f001 f9e7 	bl	8010270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eea2:	e00e      	b.n	800eec2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeaa:	d10a      	bne.n	800eec2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800eeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb0:	f383 8811 	msr	BASEPRI, r3
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	60fb      	str	r3, [r7, #12]
}
 800eebe:	bf00      	nop
 800eec0:	e7fe      	b.n	800eec0 <vTaskStartScheduler+0xb4>
}
 800eec2:	bf00      	nop
 800eec4:	3718      	adds	r7, #24
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	08015520 	.word	0x08015520
 800eed0:	0800f535 	.word	0x0800f535
 800eed4:	200019a0 	.word	0x200019a0
 800eed8:	200014a8 	.word	0x200014a8
 800eedc:	20000010 	.word	0x20000010
 800eee0:	2000199c 	.word	0x2000199c
 800eee4:	20001988 	.word	0x20001988
 800eee8:	20001980 	.word	0x20001980

0800eeec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eeec:	b480      	push	{r7}
 800eeee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eef0:	4b04      	ldr	r3, [pc, #16]	; (800ef04 <vTaskSuspendAll+0x18>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	3301      	adds	r3, #1
 800eef6:	4a03      	ldr	r2, [pc, #12]	; (800ef04 <vTaskSuspendAll+0x18>)
 800eef8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800eefa:	bf00      	nop
 800eefc:	46bd      	mov	sp, r7
 800eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef02:	4770      	bx	lr
 800ef04:	200019a4 	.word	0x200019a4

0800ef08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ef12:	2300      	movs	r3, #0
 800ef14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ef16:	4b42      	ldr	r3, [pc, #264]	; (800f020 <xTaskResumeAll+0x118>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d10a      	bne.n	800ef34 <xTaskResumeAll+0x2c>
	__asm volatile
 800ef1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	603b      	str	r3, [r7, #0]
}
 800ef30:	bf00      	nop
 800ef32:	e7fe      	b.n	800ef32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ef34:	f001 fa3e 	bl	80103b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ef38:	4b39      	ldr	r3, [pc, #228]	; (800f020 <xTaskResumeAll+0x118>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	3b01      	subs	r3, #1
 800ef3e:	4a38      	ldr	r2, [pc, #224]	; (800f020 <xTaskResumeAll+0x118>)
 800ef40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef42:	4b37      	ldr	r3, [pc, #220]	; (800f020 <xTaskResumeAll+0x118>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d162      	bne.n	800f010 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef4a:	4b36      	ldr	r3, [pc, #216]	; (800f024 <xTaskResumeAll+0x11c>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d05e      	beq.n	800f010 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef52:	e02f      	b.n	800efb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef54:	4b34      	ldr	r3, [pc, #208]	; (800f028 <xTaskResumeAll+0x120>)
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	3318      	adds	r3, #24
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7fe fc79 	bl	800d858 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	3304      	adds	r3, #4
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fe fc74 	bl	800d858 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef74:	4b2d      	ldr	r3, [pc, #180]	; (800f02c <xTaskResumeAll+0x124>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d903      	bls.n	800ef84 <xTaskResumeAll+0x7c>
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef80:	4a2a      	ldr	r2, [pc, #168]	; (800f02c <xTaskResumeAll+0x124>)
 800ef82:	6013      	str	r3, [r2, #0]
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef88:	4613      	mov	r3, r2
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	4413      	add	r3, r2
 800ef8e:	009b      	lsls	r3, r3, #2
 800ef90:	4a27      	ldr	r2, [pc, #156]	; (800f030 <xTaskResumeAll+0x128>)
 800ef92:	441a      	add	r2, r3
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	3304      	adds	r3, #4
 800ef98:	4619      	mov	r1, r3
 800ef9a:	4610      	mov	r0, r2
 800ef9c:	f7fe fbff 	bl	800d79e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efa4:	4b23      	ldr	r3, [pc, #140]	; (800f034 <xTaskResumeAll+0x12c>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efaa:	429a      	cmp	r2, r3
 800efac:	d302      	bcc.n	800efb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800efae:	4b22      	ldr	r3, [pc, #136]	; (800f038 <xTaskResumeAll+0x130>)
 800efb0:	2201      	movs	r2, #1
 800efb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800efb4:	4b1c      	ldr	r3, [pc, #112]	; (800f028 <xTaskResumeAll+0x120>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1cb      	bne.n	800ef54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d001      	beq.n	800efc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800efc2:	f000 fb71 	bl	800f6a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800efc6:	4b1d      	ldr	r3, [pc, #116]	; (800f03c <xTaskResumeAll+0x134>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d010      	beq.n	800eff4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800efd2:	f000 f859 	bl	800f088 <xTaskIncrementTick>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d002      	beq.n	800efe2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800efdc:	4b16      	ldr	r3, [pc, #88]	; (800f038 <xTaskResumeAll+0x130>)
 800efde:	2201      	movs	r2, #1
 800efe0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	3b01      	subs	r3, #1
 800efe6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1f1      	bne.n	800efd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800efee:	4b13      	ldr	r3, [pc, #76]	; (800f03c <xTaskResumeAll+0x134>)
 800eff0:	2200      	movs	r2, #0
 800eff2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eff4:	4b10      	ldr	r3, [pc, #64]	; (800f038 <xTaskResumeAll+0x130>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d009      	beq.n	800f010 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800effc:	2301      	movs	r3, #1
 800effe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f000:	4b0f      	ldr	r3, [pc, #60]	; (800f040 <xTaskResumeAll+0x138>)
 800f002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f006:	601a      	str	r2, [r3, #0]
 800f008:	f3bf 8f4f 	dsb	sy
 800f00c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f010:	f001 fa00 	bl	8010414 <vPortExitCritical>

	return xAlreadyYielded;
 800f014:	68bb      	ldr	r3, [r7, #8]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	200019a4 	.word	0x200019a4
 800f024:	2000197c 	.word	0x2000197c
 800f028:	2000193c 	.word	0x2000193c
 800f02c:	20001984 	.word	0x20001984
 800f030:	200014ac 	.word	0x200014ac
 800f034:	200014a8 	.word	0x200014a8
 800f038:	20001990 	.word	0x20001990
 800f03c:	2000198c 	.word	0x2000198c
 800f040:	e000ed04 	.word	0xe000ed04

0800f044 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f04a:	4b05      	ldr	r3, [pc, #20]	; (800f060 <xTaskGetTickCount+0x1c>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f050:	687b      	ldr	r3, [r7, #4]
}
 800f052:	4618      	mov	r0, r3
 800f054:	370c      	adds	r7, #12
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	20001980 	.word	0x20001980

0800f064 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f06a:	f001 fa85 	bl	8010578 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f06e:	2300      	movs	r3, #0
 800f070:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f072:	4b04      	ldr	r3, [pc, #16]	; (800f084 <xTaskGetTickCountFromISR+0x20>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f078:	683b      	ldr	r3, [r7, #0]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3708      	adds	r7, #8
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	20001980 	.word	0x20001980

0800f088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b086      	sub	sp, #24
 800f08c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f08e:	2300      	movs	r3, #0
 800f090:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f092:	4b4f      	ldr	r3, [pc, #316]	; (800f1d0 <xTaskIncrementTick+0x148>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	f040 808f 	bne.w	800f1ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f09c:	4b4d      	ldr	r3, [pc, #308]	; (800f1d4 <xTaskIncrementTick+0x14c>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f0a4:	4a4b      	ldr	r2, [pc, #300]	; (800f1d4 <xTaskIncrementTick+0x14c>)
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d120      	bne.n	800f0f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f0b0:	4b49      	ldr	r3, [pc, #292]	; (800f1d8 <xTaskIncrementTick+0x150>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00a      	beq.n	800f0d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800f0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0be:	f383 8811 	msr	BASEPRI, r3
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	603b      	str	r3, [r7, #0]
}
 800f0cc:	bf00      	nop
 800f0ce:	e7fe      	b.n	800f0ce <xTaskIncrementTick+0x46>
 800f0d0:	4b41      	ldr	r3, [pc, #260]	; (800f1d8 <xTaskIncrementTick+0x150>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	60fb      	str	r3, [r7, #12]
 800f0d6:	4b41      	ldr	r3, [pc, #260]	; (800f1dc <xTaskIncrementTick+0x154>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4a3f      	ldr	r2, [pc, #252]	; (800f1d8 <xTaskIncrementTick+0x150>)
 800f0dc:	6013      	str	r3, [r2, #0]
 800f0de:	4a3f      	ldr	r2, [pc, #252]	; (800f1dc <xTaskIncrementTick+0x154>)
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	6013      	str	r3, [r2, #0]
 800f0e4:	4b3e      	ldr	r3, [pc, #248]	; (800f1e0 <xTaskIncrementTick+0x158>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	4a3d      	ldr	r2, [pc, #244]	; (800f1e0 <xTaskIncrementTick+0x158>)
 800f0ec:	6013      	str	r3, [r2, #0]
 800f0ee:	f000 fadb 	bl	800f6a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f0f2:	4b3c      	ldr	r3, [pc, #240]	; (800f1e4 <xTaskIncrementTick+0x15c>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	693a      	ldr	r2, [r7, #16]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d349      	bcc.n	800f190 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0fc:	4b36      	ldr	r3, [pc, #216]	; (800f1d8 <xTaskIncrementTick+0x150>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d104      	bne.n	800f110 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f106:	4b37      	ldr	r3, [pc, #220]	; (800f1e4 <xTaskIncrementTick+0x15c>)
 800f108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f10c:	601a      	str	r2, [r3, #0]
					break;
 800f10e:	e03f      	b.n	800f190 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f110:	4b31      	ldr	r3, [pc, #196]	; (800f1d8 <xTaskIncrementTick+0x150>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f120:	693a      	ldr	r2, [r7, #16]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	429a      	cmp	r2, r3
 800f126:	d203      	bcs.n	800f130 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f128:	4a2e      	ldr	r2, [pc, #184]	; (800f1e4 <xTaskIncrementTick+0x15c>)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f12e:	e02f      	b.n	800f190 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	3304      	adds	r3, #4
 800f134:	4618      	mov	r0, r3
 800f136:	f7fe fb8f 	bl	800d858 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d004      	beq.n	800f14c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	3318      	adds	r3, #24
 800f146:	4618      	mov	r0, r3
 800f148:	f7fe fb86 	bl	800d858 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f150:	4b25      	ldr	r3, [pc, #148]	; (800f1e8 <xTaskIncrementTick+0x160>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	429a      	cmp	r2, r3
 800f156:	d903      	bls.n	800f160 <xTaskIncrementTick+0xd8>
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f15c:	4a22      	ldr	r2, [pc, #136]	; (800f1e8 <xTaskIncrementTick+0x160>)
 800f15e:	6013      	str	r3, [r2, #0]
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f164:	4613      	mov	r3, r2
 800f166:	009b      	lsls	r3, r3, #2
 800f168:	4413      	add	r3, r2
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	4a1f      	ldr	r2, [pc, #124]	; (800f1ec <xTaskIncrementTick+0x164>)
 800f16e:	441a      	add	r2, r3
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	3304      	adds	r3, #4
 800f174:	4619      	mov	r1, r3
 800f176:	4610      	mov	r0, r2
 800f178:	f7fe fb11 	bl	800d79e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f180:	4b1b      	ldr	r3, [pc, #108]	; (800f1f0 <xTaskIncrementTick+0x168>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f186:	429a      	cmp	r2, r3
 800f188:	d3b8      	bcc.n	800f0fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f18a:	2301      	movs	r3, #1
 800f18c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f18e:	e7b5      	b.n	800f0fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f190:	4b17      	ldr	r3, [pc, #92]	; (800f1f0 <xTaskIncrementTick+0x168>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f196:	4915      	ldr	r1, [pc, #84]	; (800f1ec <xTaskIncrementTick+0x164>)
 800f198:	4613      	mov	r3, r2
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	4413      	add	r3, r2
 800f19e:	009b      	lsls	r3, r3, #2
 800f1a0:	440b      	add	r3, r1
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d901      	bls.n	800f1ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f1ac:	4b11      	ldr	r3, [pc, #68]	; (800f1f4 <xTaskIncrementTick+0x16c>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d007      	beq.n	800f1c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	617b      	str	r3, [r7, #20]
 800f1b8:	e004      	b.n	800f1c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f1ba:	4b0f      	ldr	r3, [pc, #60]	; (800f1f8 <xTaskIncrementTick+0x170>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	4a0d      	ldr	r2, [pc, #52]	; (800f1f8 <xTaskIncrementTick+0x170>)
 800f1c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f1c4:	697b      	ldr	r3, [r7, #20]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3718      	adds	r7, #24
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	200019a4 	.word	0x200019a4
 800f1d4:	20001980 	.word	0x20001980
 800f1d8:	20001934 	.word	0x20001934
 800f1dc:	20001938 	.word	0x20001938
 800f1e0:	20001994 	.word	0x20001994
 800f1e4:	2000199c 	.word	0x2000199c
 800f1e8:	20001984 	.word	0x20001984
 800f1ec:	200014ac 	.word	0x200014ac
 800f1f0:	200014a8 	.word	0x200014a8
 800f1f4:	20001990 	.word	0x20001990
 800f1f8:	2000198c 	.word	0x2000198c

0800f1fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b085      	sub	sp, #20
 800f200:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f202:	4b2a      	ldr	r3, [pc, #168]	; (800f2ac <vTaskSwitchContext+0xb0>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d003      	beq.n	800f212 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f20a:	4b29      	ldr	r3, [pc, #164]	; (800f2b0 <vTaskSwitchContext+0xb4>)
 800f20c:	2201      	movs	r2, #1
 800f20e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f210:	e046      	b.n	800f2a0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f212:	4b27      	ldr	r3, [pc, #156]	; (800f2b0 <vTaskSwitchContext+0xb4>)
 800f214:	2200      	movs	r2, #0
 800f216:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f218:	4b26      	ldr	r3, [pc, #152]	; (800f2b4 <vTaskSwitchContext+0xb8>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	60fb      	str	r3, [r7, #12]
 800f21e:	e010      	b.n	800f242 <vTaskSwitchContext+0x46>
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d10a      	bne.n	800f23c <vTaskSwitchContext+0x40>
	__asm volatile
 800f226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22a:	f383 8811 	msr	BASEPRI, r3
 800f22e:	f3bf 8f6f 	isb	sy
 800f232:	f3bf 8f4f 	dsb	sy
 800f236:	607b      	str	r3, [r7, #4]
}
 800f238:	bf00      	nop
 800f23a:	e7fe      	b.n	800f23a <vTaskSwitchContext+0x3e>
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	3b01      	subs	r3, #1
 800f240:	60fb      	str	r3, [r7, #12]
 800f242:	491d      	ldr	r1, [pc, #116]	; (800f2b8 <vTaskSwitchContext+0xbc>)
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	4613      	mov	r3, r2
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	4413      	add	r3, r2
 800f24c:	009b      	lsls	r3, r3, #2
 800f24e:	440b      	add	r3, r1
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d0e4      	beq.n	800f220 <vTaskSwitchContext+0x24>
 800f256:	68fa      	ldr	r2, [r7, #12]
 800f258:	4613      	mov	r3, r2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4413      	add	r3, r2
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	4a15      	ldr	r2, [pc, #84]	; (800f2b8 <vTaskSwitchContext+0xbc>)
 800f262:	4413      	add	r3, r2
 800f264:	60bb      	str	r3, [r7, #8]
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	685b      	ldr	r3, [r3, #4]
 800f26a:	685a      	ldr	r2, [r3, #4]
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	605a      	str	r2, [r3, #4]
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	685a      	ldr	r2, [r3, #4]
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	3308      	adds	r3, #8
 800f278:	429a      	cmp	r2, r3
 800f27a:	d104      	bne.n	800f286 <vTaskSwitchContext+0x8a>
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	685a      	ldr	r2, [r3, #4]
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	605a      	str	r2, [r3, #4]
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	4a0b      	ldr	r2, [pc, #44]	; (800f2bc <vTaskSwitchContext+0xc0>)
 800f28e:	6013      	str	r3, [r2, #0]
 800f290:	4a08      	ldr	r2, [pc, #32]	; (800f2b4 <vTaskSwitchContext+0xb8>)
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f296:	4b09      	ldr	r3, [pc, #36]	; (800f2bc <vTaskSwitchContext+0xc0>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	3354      	adds	r3, #84	; 0x54
 800f29c:	4a08      	ldr	r2, [pc, #32]	; (800f2c0 <vTaskSwitchContext+0xc4>)
 800f29e:	6013      	str	r3, [r2, #0]
}
 800f2a0:	bf00      	nop
 800f2a2:	3714      	adds	r7, #20
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr
 800f2ac:	200019a4 	.word	0x200019a4
 800f2b0:	20001990 	.word	0x20001990
 800f2b4:	20001984 	.word	0x20001984
 800f2b8:	200014ac 	.word	0x200014ac
 800f2bc:	200014a8 	.word	0x200014a8
 800f2c0:	20000010 	.word	0x20000010

0800f2c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d10a      	bne.n	800f2ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d8:	f383 8811 	msr	BASEPRI, r3
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f3bf 8f4f 	dsb	sy
 800f2e4:	60fb      	str	r3, [r7, #12]
}
 800f2e6:	bf00      	nop
 800f2e8:	e7fe      	b.n	800f2e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2ea:	4b07      	ldr	r3, [pc, #28]	; (800f308 <vTaskPlaceOnEventList+0x44>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	3318      	adds	r3, #24
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7fe fa77 	bl	800d7e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f2f8:	2101      	movs	r1, #1
 800f2fa:	6838      	ldr	r0, [r7, #0]
 800f2fc:	f000 fb8e 	bl	800fa1c <prvAddCurrentTaskToDelayedList>
}
 800f300:	bf00      	nop
 800f302:	3710      	adds	r7, #16
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	200014a8 	.word	0x200014a8

0800f30c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b086      	sub	sp, #24
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d10a      	bne.n	800f334 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f322:	f383 8811 	msr	BASEPRI, r3
 800f326:	f3bf 8f6f 	isb	sy
 800f32a:	f3bf 8f4f 	dsb	sy
 800f32e:	617b      	str	r3, [r7, #20]
}
 800f330:	bf00      	nop
 800f332:	e7fe      	b.n	800f332 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f334:	4b0a      	ldr	r3, [pc, #40]	; (800f360 <vTaskPlaceOnEventListRestricted+0x54>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	3318      	adds	r3, #24
 800f33a:	4619      	mov	r1, r3
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	f7fe fa2e 	bl	800d79e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d002      	beq.n	800f34e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f34c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f34e:	6879      	ldr	r1, [r7, #4]
 800f350:	68b8      	ldr	r0, [r7, #8]
 800f352:	f000 fb63 	bl	800fa1c <prvAddCurrentTaskToDelayedList>
	}
 800f356:	bf00      	nop
 800f358:	3718      	adds	r7, #24
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	200014a8 	.word	0x200014a8

0800f364 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d10a      	bne.n	800f390 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37e:	f383 8811 	msr	BASEPRI, r3
 800f382:	f3bf 8f6f 	isb	sy
 800f386:	f3bf 8f4f 	dsb	sy
 800f38a:	60fb      	str	r3, [r7, #12]
}
 800f38c:	bf00      	nop
 800f38e:	e7fe      	b.n	800f38e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	3318      	adds	r3, #24
 800f394:	4618      	mov	r0, r3
 800f396:	f7fe fa5f 	bl	800d858 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f39a:	4b1e      	ldr	r3, [pc, #120]	; (800f414 <xTaskRemoveFromEventList+0xb0>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d11d      	bne.n	800f3de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	3304      	adds	r3, #4
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fe fa56 	bl	800d858 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3b0:	4b19      	ldr	r3, [pc, #100]	; (800f418 <xTaskRemoveFromEventList+0xb4>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d903      	bls.n	800f3c0 <xTaskRemoveFromEventList+0x5c>
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3bc:	4a16      	ldr	r2, [pc, #88]	; (800f418 <xTaskRemoveFromEventList+0xb4>)
 800f3be:	6013      	str	r3, [r2, #0]
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	4413      	add	r3, r2
 800f3ca:	009b      	lsls	r3, r3, #2
 800f3cc:	4a13      	ldr	r2, [pc, #76]	; (800f41c <xTaskRemoveFromEventList+0xb8>)
 800f3ce:	441a      	add	r2, r3
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	3304      	adds	r3, #4
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	4610      	mov	r0, r2
 800f3d8:	f7fe f9e1 	bl	800d79e <vListInsertEnd>
 800f3dc:	e005      	b.n	800f3ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	3318      	adds	r3, #24
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	480e      	ldr	r0, [pc, #56]	; (800f420 <xTaskRemoveFromEventList+0xbc>)
 800f3e6:	f7fe f9da 	bl	800d79e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3ee:	4b0d      	ldr	r3, [pc, #52]	; (800f424 <xTaskRemoveFromEventList+0xc0>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d905      	bls.n	800f404 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f3fc:	4b0a      	ldr	r3, [pc, #40]	; (800f428 <xTaskRemoveFromEventList+0xc4>)
 800f3fe:	2201      	movs	r2, #1
 800f400:	601a      	str	r2, [r3, #0]
 800f402:	e001      	b.n	800f408 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f404:	2300      	movs	r3, #0
 800f406:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f408:	697b      	ldr	r3, [r7, #20]
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3718      	adds	r7, #24
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	200019a4 	.word	0x200019a4
 800f418:	20001984 	.word	0x20001984
 800f41c:	200014ac 	.word	0x200014ac
 800f420:	2000193c 	.word	0x2000193c
 800f424:	200014a8 	.word	0x200014a8
 800f428:	20001990 	.word	0x20001990

0800f42c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f434:	4b06      	ldr	r3, [pc, #24]	; (800f450 <vTaskInternalSetTimeOutState+0x24>)
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f43c:	4b05      	ldr	r3, [pc, #20]	; (800f454 <vTaskInternalSetTimeOutState+0x28>)
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	605a      	str	r2, [r3, #4]
}
 800f444:	bf00      	nop
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr
 800f450:	20001994 	.word	0x20001994
 800f454:	20001980 	.word	0x20001980

0800f458 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b088      	sub	sp, #32
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d10a      	bne.n	800f47e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46c:	f383 8811 	msr	BASEPRI, r3
 800f470:	f3bf 8f6f 	isb	sy
 800f474:	f3bf 8f4f 	dsb	sy
 800f478:	613b      	str	r3, [r7, #16]
}
 800f47a:	bf00      	nop
 800f47c:	e7fe      	b.n	800f47c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d10a      	bne.n	800f49a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f488:	f383 8811 	msr	BASEPRI, r3
 800f48c:	f3bf 8f6f 	isb	sy
 800f490:	f3bf 8f4f 	dsb	sy
 800f494:	60fb      	str	r3, [r7, #12]
}
 800f496:	bf00      	nop
 800f498:	e7fe      	b.n	800f498 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f49a:	f000 ff8b 	bl	80103b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f49e:	4b1d      	ldr	r3, [pc, #116]	; (800f514 <xTaskCheckForTimeOut+0xbc>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	69ba      	ldr	r2, [r7, #24]
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4b6:	d102      	bne.n	800f4be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	61fb      	str	r3, [r7, #28]
 800f4bc:	e023      	b.n	800f506 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	4b15      	ldr	r3, [pc, #84]	; (800f518 <xTaskCheckForTimeOut+0xc0>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d007      	beq.n	800f4da <xTaskCheckForTimeOut+0x82>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	69ba      	ldr	r2, [r7, #24]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d302      	bcc.n	800f4da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	61fb      	str	r3, [r7, #28]
 800f4d8:	e015      	b.n	800f506 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	697a      	ldr	r2, [r7, #20]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d20b      	bcs.n	800f4fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	1ad2      	subs	r2, r2, r3
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f7ff ff9b 	bl	800f42c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	61fb      	str	r3, [r7, #28]
 800f4fa:	e004      	b.n	800f506 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	2200      	movs	r2, #0
 800f500:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f502:	2301      	movs	r3, #1
 800f504:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f506:	f000 ff85 	bl	8010414 <vPortExitCritical>

	return xReturn;
 800f50a:	69fb      	ldr	r3, [r7, #28]
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3720      	adds	r7, #32
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}
 800f514:	20001980 	.word	0x20001980
 800f518:	20001994 	.word	0x20001994

0800f51c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f51c:	b480      	push	{r7}
 800f51e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f520:	4b03      	ldr	r3, [pc, #12]	; (800f530 <vTaskMissedYield+0x14>)
 800f522:	2201      	movs	r2, #1
 800f524:	601a      	str	r2, [r3, #0]
}
 800f526:	bf00      	nop
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr
 800f530:	20001990 	.word	0x20001990

0800f534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f53c:	f000 f852 	bl	800f5e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f540:	4b06      	ldr	r3, [pc, #24]	; (800f55c <prvIdleTask+0x28>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d9f9      	bls.n	800f53c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f548:	4b05      	ldr	r3, [pc, #20]	; (800f560 <prvIdleTask+0x2c>)
 800f54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f558:	e7f0      	b.n	800f53c <prvIdleTask+0x8>
 800f55a:	bf00      	nop
 800f55c:	200014ac 	.word	0x200014ac
 800f560:	e000ed04 	.word	0xe000ed04

0800f564 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f56a:	2300      	movs	r3, #0
 800f56c:	607b      	str	r3, [r7, #4]
 800f56e:	e00c      	b.n	800f58a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	4613      	mov	r3, r2
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	4413      	add	r3, r2
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	4a12      	ldr	r2, [pc, #72]	; (800f5c4 <prvInitialiseTaskLists+0x60>)
 800f57c:	4413      	add	r3, r2
 800f57e:	4618      	mov	r0, r3
 800f580:	f7fe f8e0 	bl	800d744 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	3301      	adds	r3, #1
 800f588:	607b      	str	r3, [r7, #4]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2b37      	cmp	r3, #55	; 0x37
 800f58e:	d9ef      	bls.n	800f570 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f590:	480d      	ldr	r0, [pc, #52]	; (800f5c8 <prvInitialiseTaskLists+0x64>)
 800f592:	f7fe f8d7 	bl	800d744 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f596:	480d      	ldr	r0, [pc, #52]	; (800f5cc <prvInitialiseTaskLists+0x68>)
 800f598:	f7fe f8d4 	bl	800d744 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f59c:	480c      	ldr	r0, [pc, #48]	; (800f5d0 <prvInitialiseTaskLists+0x6c>)
 800f59e:	f7fe f8d1 	bl	800d744 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f5a2:	480c      	ldr	r0, [pc, #48]	; (800f5d4 <prvInitialiseTaskLists+0x70>)
 800f5a4:	f7fe f8ce 	bl	800d744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f5a8:	480b      	ldr	r0, [pc, #44]	; (800f5d8 <prvInitialiseTaskLists+0x74>)
 800f5aa:	f7fe f8cb 	bl	800d744 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f5ae:	4b0b      	ldr	r3, [pc, #44]	; (800f5dc <prvInitialiseTaskLists+0x78>)
 800f5b0:	4a05      	ldr	r2, [pc, #20]	; (800f5c8 <prvInitialiseTaskLists+0x64>)
 800f5b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f5b4:	4b0a      	ldr	r3, [pc, #40]	; (800f5e0 <prvInitialiseTaskLists+0x7c>)
 800f5b6:	4a05      	ldr	r2, [pc, #20]	; (800f5cc <prvInitialiseTaskLists+0x68>)
 800f5b8:	601a      	str	r2, [r3, #0]
}
 800f5ba:	bf00      	nop
 800f5bc:	3708      	adds	r7, #8
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	200014ac 	.word	0x200014ac
 800f5c8:	2000190c 	.word	0x2000190c
 800f5cc:	20001920 	.word	0x20001920
 800f5d0:	2000193c 	.word	0x2000193c
 800f5d4:	20001950 	.word	0x20001950
 800f5d8:	20001968 	.word	0x20001968
 800f5dc:	20001934 	.word	0x20001934
 800f5e0:	20001938 	.word	0x20001938

0800f5e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5ea:	e019      	b.n	800f620 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f5ec:	f000 fee2 	bl	80103b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5f0:	4b10      	ldr	r3, [pc, #64]	; (800f634 <prvCheckTasksWaitingTermination+0x50>)
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	3304      	adds	r3, #4
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fe f92b 	bl	800d858 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f602:	4b0d      	ldr	r3, [pc, #52]	; (800f638 <prvCheckTasksWaitingTermination+0x54>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	3b01      	subs	r3, #1
 800f608:	4a0b      	ldr	r2, [pc, #44]	; (800f638 <prvCheckTasksWaitingTermination+0x54>)
 800f60a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f60c:	4b0b      	ldr	r3, [pc, #44]	; (800f63c <prvCheckTasksWaitingTermination+0x58>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	3b01      	subs	r3, #1
 800f612:	4a0a      	ldr	r2, [pc, #40]	; (800f63c <prvCheckTasksWaitingTermination+0x58>)
 800f614:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f616:	f000 fefd 	bl	8010414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 f810 	bl	800f640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f620:	4b06      	ldr	r3, [pc, #24]	; (800f63c <prvCheckTasksWaitingTermination+0x58>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d1e1      	bne.n	800f5ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f628:	bf00      	nop
 800f62a:	bf00      	nop
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	20001950 	.word	0x20001950
 800f638:	2000197c 	.word	0x2000197c
 800f63c:	20001964 	.word	0x20001964

0800f640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	3354      	adds	r3, #84	; 0x54
 800f64c:	4618      	mov	r0, r3
 800f64e:	f002 fa13 	bl	8011a78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d108      	bne.n	800f66e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f660:	4618      	mov	r0, r3
 800f662:	f001 f895 	bl	8010790 <vPortFree>
				vPortFree( pxTCB );
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f001 f892 	bl	8010790 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f66c:	e018      	b.n	800f6a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f674:	2b01      	cmp	r3, #1
 800f676:	d103      	bne.n	800f680 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f001 f889 	bl	8010790 <vPortFree>
	}
 800f67e:	e00f      	b.n	800f6a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f686:	2b02      	cmp	r3, #2
 800f688:	d00a      	beq.n	800f6a0 <prvDeleteTCB+0x60>
	__asm volatile
 800f68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68e:	f383 8811 	msr	BASEPRI, r3
 800f692:	f3bf 8f6f 	isb	sy
 800f696:	f3bf 8f4f 	dsb	sy
 800f69a:	60fb      	str	r3, [r7, #12]
}
 800f69c:	bf00      	nop
 800f69e:	e7fe      	b.n	800f69e <prvDeleteTCB+0x5e>
	}
 800f6a0:	bf00      	nop
 800f6a2:	3710      	adds	r7, #16
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b083      	sub	sp, #12
 800f6ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6ae:	4b0c      	ldr	r3, [pc, #48]	; (800f6e0 <prvResetNextTaskUnblockTime+0x38>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d104      	bne.n	800f6c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f6b8:	4b0a      	ldr	r3, [pc, #40]	; (800f6e4 <prvResetNextTaskUnblockTime+0x3c>)
 800f6ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f6c0:	e008      	b.n	800f6d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6c2:	4b07      	ldr	r3, [pc, #28]	; (800f6e0 <prvResetNextTaskUnblockTime+0x38>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	4a04      	ldr	r2, [pc, #16]	; (800f6e4 <prvResetNextTaskUnblockTime+0x3c>)
 800f6d2:	6013      	str	r3, [r2, #0]
}
 800f6d4:	bf00      	nop
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	20001934 	.word	0x20001934
 800f6e4:	2000199c 	.word	0x2000199c

0800f6e8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f6ee:	4b05      	ldr	r3, [pc, #20]	; (800f704 <xTaskGetCurrentTaskHandle+0x1c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f6f4:	687b      	ldr	r3, [r7, #4]
	}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	370c      	adds	r7, #12
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr
 800f702:	bf00      	nop
 800f704:	200014a8 	.word	0x200014a8

0800f708 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f70e:	4b0b      	ldr	r3, [pc, #44]	; (800f73c <xTaskGetSchedulerState+0x34>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d102      	bne.n	800f71c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f716:	2301      	movs	r3, #1
 800f718:	607b      	str	r3, [r7, #4]
 800f71a:	e008      	b.n	800f72e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f71c:	4b08      	ldr	r3, [pc, #32]	; (800f740 <xTaskGetSchedulerState+0x38>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d102      	bne.n	800f72a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f724:	2302      	movs	r3, #2
 800f726:	607b      	str	r3, [r7, #4]
 800f728:	e001      	b.n	800f72e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f72a:	2300      	movs	r3, #0
 800f72c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f72e:	687b      	ldr	r3, [r7, #4]
	}
 800f730:	4618      	mov	r0, r3
 800f732:	370c      	adds	r7, #12
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr
 800f73c:	20001988 	.word	0x20001988
 800f740:	200019a4 	.word	0x200019a4

0800f744 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f750:	2300      	movs	r3, #0
 800f752:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d051      	beq.n	800f7fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f75e:	4b2a      	ldr	r3, [pc, #168]	; (800f808 <xTaskPriorityInherit+0xc4>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f764:	429a      	cmp	r2, r3
 800f766:	d241      	bcs.n	800f7ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	699b      	ldr	r3, [r3, #24]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	db06      	blt.n	800f77e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f770:	4b25      	ldr	r3, [pc, #148]	; (800f808 <xTaskPriorityInherit+0xc4>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f776:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	6959      	ldr	r1, [r3, #20]
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f786:	4613      	mov	r3, r2
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	4413      	add	r3, r2
 800f78c:	009b      	lsls	r3, r3, #2
 800f78e:	4a1f      	ldr	r2, [pc, #124]	; (800f80c <xTaskPriorityInherit+0xc8>)
 800f790:	4413      	add	r3, r2
 800f792:	4299      	cmp	r1, r3
 800f794:	d122      	bne.n	800f7dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	3304      	adds	r3, #4
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7fe f85c 	bl	800d858 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f7a0:	4b19      	ldr	r3, [pc, #100]	; (800f808 <xTaskPriorityInherit+0xc4>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7ae:	4b18      	ldr	r3, [pc, #96]	; (800f810 <xTaskPriorityInherit+0xcc>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d903      	bls.n	800f7be <xTaskPriorityInherit+0x7a>
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ba:	4a15      	ldr	r2, [pc, #84]	; (800f810 <xTaskPriorityInherit+0xcc>)
 800f7bc:	6013      	str	r3, [r2, #0]
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	009b      	lsls	r3, r3, #2
 800f7c6:	4413      	add	r3, r2
 800f7c8:	009b      	lsls	r3, r3, #2
 800f7ca:	4a10      	ldr	r2, [pc, #64]	; (800f80c <xTaskPriorityInherit+0xc8>)
 800f7cc:	441a      	add	r2, r3
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	4610      	mov	r0, r2
 800f7d6:	f7fd ffe2 	bl	800d79e <vListInsertEnd>
 800f7da:	e004      	b.n	800f7e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f7dc:	4b0a      	ldr	r3, [pc, #40]	; (800f808 <xTaskPriorityInherit+0xc4>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	60fb      	str	r3, [r7, #12]
 800f7ea:	e008      	b.n	800f7fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7f0:	4b05      	ldr	r3, [pc, #20]	; (800f808 <xTaskPriorityInherit+0xc4>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d201      	bcs.n	800f7fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
	}
 800f800:	4618      	mov	r0, r3
 800f802:	3710      	adds	r7, #16
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}
 800f808:	200014a8 	.word	0x200014a8
 800f80c:	200014ac 	.word	0x200014ac
 800f810:	20001984 	.word	0x20001984

0800f814 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f814:	b580      	push	{r7, lr}
 800f816:	b086      	sub	sp, #24
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f820:	2300      	movs	r3, #0
 800f822:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d056      	beq.n	800f8d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f82a:	4b2e      	ldr	r3, [pc, #184]	; (800f8e4 <xTaskPriorityDisinherit+0xd0>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	693a      	ldr	r2, [r7, #16]
 800f830:	429a      	cmp	r2, r3
 800f832:	d00a      	beq.n	800f84a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f838:	f383 8811 	msr	BASEPRI, r3
 800f83c:	f3bf 8f6f 	isb	sy
 800f840:	f3bf 8f4f 	dsb	sy
 800f844:	60fb      	str	r3, [r7, #12]
}
 800f846:	bf00      	nop
 800f848:	e7fe      	b.n	800f848 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d10a      	bne.n	800f868 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f856:	f383 8811 	msr	BASEPRI, r3
 800f85a:	f3bf 8f6f 	isb	sy
 800f85e:	f3bf 8f4f 	dsb	sy
 800f862:	60bb      	str	r3, [r7, #8]
}
 800f864:	bf00      	nop
 800f866:	e7fe      	b.n	800f866 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f86c:	1e5a      	subs	r2, r3, #1
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d02c      	beq.n	800f8d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f882:	2b00      	cmp	r3, #0
 800f884:	d128      	bne.n	800f8d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	3304      	adds	r3, #4
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fd ffe4 	bl	800d858 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f89c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a8:	4b0f      	ldr	r3, [pc, #60]	; (800f8e8 <xTaskPriorityDisinherit+0xd4>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d903      	bls.n	800f8b8 <xTaskPriorityDisinherit+0xa4>
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b4:	4a0c      	ldr	r2, [pc, #48]	; (800f8e8 <xTaskPriorityDisinherit+0xd4>)
 800f8b6:	6013      	str	r3, [r2, #0]
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8bc:	4613      	mov	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4413      	add	r3, r2
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	4a09      	ldr	r2, [pc, #36]	; (800f8ec <xTaskPriorityDisinherit+0xd8>)
 800f8c6:	441a      	add	r2, r3
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	3304      	adds	r3, #4
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	4610      	mov	r0, r2
 800f8d0:	f7fd ff65 	bl	800d79e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8d8:	697b      	ldr	r3, [r7, #20]
	}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3718      	adds	r7, #24
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	200014a8 	.word	0x200014a8
 800f8e8:	20001984 	.word	0x20001984
 800f8ec:	200014ac 	.word	0x200014ac

0800f8f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b088      	sub	sp, #32
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f8fe:	2301      	movs	r3, #1
 800f900:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d06a      	beq.n	800f9de <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f908:	69bb      	ldr	r3, [r7, #24]
 800f90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d10a      	bne.n	800f926 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f914:	f383 8811 	msr	BASEPRI, r3
 800f918:	f3bf 8f6f 	isb	sy
 800f91c:	f3bf 8f4f 	dsb	sy
 800f920:	60fb      	str	r3, [r7, #12]
}
 800f922:	bf00      	nop
 800f924:	e7fe      	b.n	800f924 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f926:	69bb      	ldr	r3, [r7, #24]
 800f928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f92a:	683a      	ldr	r2, [r7, #0]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d902      	bls.n	800f936 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	61fb      	str	r3, [r7, #28]
 800f934:	e002      	b.n	800f93c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f936:	69bb      	ldr	r3, [r7, #24]
 800f938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f93a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f93c:	69bb      	ldr	r3, [r7, #24]
 800f93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f940:	69fa      	ldr	r2, [r7, #28]
 800f942:	429a      	cmp	r2, r3
 800f944:	d04b      	beq.n	800f9de <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f946:	69bb      	ldr	r3, [r7, #24]
 800f948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f94a:	697a      	ldr	r2, [r7, #20]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d146      	bne.n	800f9de <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f950:	4b25      	ldr	r3, [pc, #148]	; (800f9e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	69ba      	ldr	r2, [r7, #24]
 800f956:	429a      	cmp	r2, r3
 800f958:	d10a      	bne.n	800f970 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95e:	f383 8811 	msr	BASEPRI, r3
 800f962:	f3bf 8f6f 	isb	sy
 800f966:	f3bf 8f4f 	dsb	sy
 800f96a:	60bb      	str	r3, [r7, #8]
}
 800f96c:	bf00      	nop
 800f96e:	e7fe      	b.n	800f96e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f970:	69bb      	ldr	r3, [r7, #24]
 800f972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f974:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f976:	69bb      	ldr	r3, [r7, #24]
 800f978:	69fa      	ldr	r2, [r7, #28]
 800f97a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f97c:	69bb      	ldr	r3, [r7, #24]
 800f97e:	699b      	ldr	r3, [r3, #24]
 800f980:	2b00      	cmp	r3, #0
 800f982:	db04      	blt.n	800f98e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f98e:	69bb      	ldr	r3, [r7, #24]
 800f990:	6959      	ldr	r1, [r3, #20]
 800f992:	693a      	ldr	r2, [r7, #16]
 800f994:	4613      	mov	r3, r2
 800f996:	009b      	lsls	r3, r3, #2
 800f998:	4413      	add	r3, r2
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4a13      	ldr	r2, [pc, #76]	; (800f9ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f99e:	4413      	add	r3, r2
 800f9a0:	4299      	cmp	r1, r3
 800f9a2:	d11c      	bne.n	800f9de <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f9a4:	69bb      	ldr	r3, [r7, #24]
 800f9a6:	3304      	adds	r3, #4
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fd ff55 	bl	800d858 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9b2:	4b0f      	ldr	r3, [pc, #60]	; (800f9f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d903      	bls.n	800f9c2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9be:	4a0c      	ldr	r2, [pc, #48]	; (800f9f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f9c0:	6013      	str	r3, [r2, #0]
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	4413      	add	r3, r2
 800f9cc:	009b      	lsls	r3, r3, #2
 800f9ce:	4a07      	ldr	r2, [pc, #28]	; (800f9ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f9d0:	441a      	add	r2, r3
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	3304      	adds	r3, #4
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	4610      	mov	r0, r2
 800f9da:	f7fd fee0 	bl	800d79e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9de:	bf00      	nop
 800f9e0:	3720      	adds	r7, #32
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	200014a8 	.word	0x200014a8
 800f9ec:	200014ac 	.word	0x200014ac
 800f9f0:	20001984 	.word	0x20001984

0800f9f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f9f4:	b480      	push	{r7}
 800f9f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f9f8:	4b07      	ldr	r3, [pc, #28]	; (800fa18 <pvTaskIncrementMutexHeldCount+0x24>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d004      	beq.n	800fa0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fa00:	4b05      	ldr	r3, [pc, #20]	; (800fa18 <pvTaskIncrementMutexHeldCount+0x24>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa06:	3201      	adds	r2, #1
 800fa08:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800fa0a:	4b03      	ldr	r3, [pc, #12]	; (800fa18 <pvTaskIncrementMutexHeldCount+0x24>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
	}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr
 800fa18:	200014a8 	.word	0x200014a8

0800fa1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fa26:	4b21      	ldr	r3, [pc, #132]	; (800faac <prvAddCurrentTaskToDelayedList+0x90>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa2c:	4b20      	ldr	r3, [pc, #128]	; (800fab0 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	3304      	adds	r3, #4
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fd ff10 	bl	800d858 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa3e:	d10a      	bne.n	800fa56 <prvAddCurrentTaskToDelayedList+0x3a>
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d007      	beq.n	800fa56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa46:	4b1a      	ldr	r3, [pc, #104]	; (800fab0 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	3304      	adds	r3, #4
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4819      	ldr	r0, [pc, #100]	; (800fab4 <prvAddCurrentTaskToDelayedList+0x98>)
 800fa50:	f7fd fea5 	bl	800d79e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fa54:	e026      	b.n	800faa4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fa5e:	4b14      	ldr	r3, [pc, #80]	; (800fab0 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	68ba      	ldr	r2, [r7, #8]
 800fa64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fa66:	68ba      	ldr	r2, [r7, #8]
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d209      	bcs.n	800fa82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa6e:	4b12      	ldr	r3, [pc, #72]	; (800fab8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	4b0f      	ldr	r3, [pc, #60]	; (800fab0 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	3304      	adds	r3, #4
 800fa78:	4619      	mov	r1, r3
 800fa7a:	4610      	mov	r0, r2
 800fa7c:	f7fd feb3 	bl	800d7e6 <vListInsert>
}
 800fa80:	e010      	b.n	800faa4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa82:	4b0e      	ldr	r3, [pc, #56]	; (800fabc <prvAddCurrentTaskToDelayedList+0xa0>)
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	4b0a      	ldr	r3, [pc, #40]	; (800fab0 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	3304      	adds	r3, #4
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	4610      	mov	r0, r2
 800fa90:	f7fd fea9 	bl	800d7e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fa94:	4b0a      	ldr	r3, [pc, #40]	; (800fac0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d202      	bcs.n	800faa4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fa9e:	4a08      	ldr	r2, [pc, #32]	; (800fac0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	6013      	str	r3, [r2, #0]
}
 800faa4:	bf00      	nop
 800faa6:	3710      	adds	r7, #16
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	20001980 	.word	0x20001980
 800fab0:	200014a8 	.word	0x200014a8
 800fab4:	20001968 	.word	0x20001968
 800fab8:	20001938 	.word	0x20001938
 800fabc:	20001934 	.word	0x20001934
 800fac0:	2000199c 	.word	0x2000199c

0800fac4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b08a      	sub	sp, #40	; 0x28
 800fac8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800faca:	2300      	movs	r3, #0
 800facc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800face:	f000 fb07 	bl	80100e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fad2:	4b1c      	ldr	r3, [pc, #112]	; (800fb44 <xTimerCreateTimerTask+0x80>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d021      	beq.n	800fb1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fada:	2300      	movs	r3, #0
 800fadc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fade:	2300      	movs	r3, #0
 800fae0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fae2:	1d3a      	adds	r2, r7, #4
 800fae4:	f107 0108 	add.w	r1, r7, #8
 800fae8:	f107 030c 	add.w	r3, r7, #12
 800faec:	4618      	mov	r0, r3
 800faee:	f7fd fe0f 	bl	800d710 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800faf2:	6879      	ldr	r1, [r7, #4]
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	68fa      	ldr	r2, [r7, #12]
 800faf8:	9202      	str	r2, [sp, #8]
 800fafa:	9301      	str	r3, [sp, #4]
 800fafc:	2302      	movs	r3, #2
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	2300      	movs	r3, #0
 800fb02:	460a      	mov	r2, r1
 800fb04:	4910      	ldr	r1, [pc, #64]	; (800fb48 <xTimerCreateTimerTask+0x84>)
 800fb06:	4811      	ldr	r0, [pc, #68]	; (800fb4c <xTimerCreateTimerTask+0x88>)
 800fb08:	f7fe ff94 	bl	800ea34 <xTaskCreateStatic>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	4a10      	ldr	r2, [pc, #64]	; (800fb50 <xTimerCreateTimerTask+0x8c>)
 800fb10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fb12:	4b0f      	ldr	r3, [pc, #60]	; (800fb50 <xTimerCreateTimerTask+0x8c>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d001      	beq.n	800fb1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d10a      	bne.n	800fb3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb28:	f383 8811 	msr	BASEPRI, r3
 800fb2c:	f3bf 8f6f 	isb	sy
 800fb30:	f3bf 8f4f 	dsb	sy
 800fb34:	613b      	str	r3, [r7, #16]
}
 800fb36:	bf00      	nop
 800fb38:	e7fe      	b.n	800fb38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fb3a:	697b      	ldr	r3, [r7, #20]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3718      	adds	r7, #24
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	200019d8 	.word	0x200019d8
 800fb48:	08015528 	.word	0x08015528
 800fb4c:	0800fc89 	.word	0x0800fc89
 800fb50:	200019dc 	.word	0x200019dc

0800fb54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b08a      	sub	sp, #40	; 0x28
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
 800fb60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fb62:	2300      	movs	r3, #0
 800fb64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d10a      	bne.n	800fb82 <xTimerGenericCommand+0x2e>
	__asm volatile
 800fb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb70:	f383 8811 	msr	BASEPRI, r3
 800fb74:	f3bf 8f6f 	isb	sy
 800fb78:	f3bf 8f4f 	dsb	sy
 800fb7c:	623b      	str	r3, [r7, #32]
}
 800fb7e:	bf00      	nop
 800fb80:	e7fe      	b.n	800fb80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fb82:	4b1a      	ldr	r3, [pc, #104]	; (800fbec <xTimerGenericCommand+0x98>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d02a      	beq.n	800fbe0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	2b05      	cmp	r3, #5
 800fb9a:	dc18      	bgt.n	800fbce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fb9c:	f7ff fdb4 	bl	800f708 <xTaskGetSchedulerState>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b02      	cmp	r3, #2
 800fba4:	d109      	bne.n	800fbba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fba6:	4b11      	ldr	r3, [pc, #68]	; (800fbec <xTimerGenericCommand+0x98>)
 800fba8:	6818      	ldr	r0, [r3, #0]
 800fbaa:	f107 0110 	add.w	r1, r7, #16
 800fbae:	2300      	movs	r3, #0
 800fbb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbb2:	f7fe f8d9 	bl	800dd68 <xQueueGenericSend>
 800fbb6:	6278      	str	r0, [r7, #36]	; 0x24
 800fbb8:	e012      	b.n	800fbe0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fbba:	4b0c      	ldr	r3, [pc, #48]	; (800fbec <xTimerGenericCommand+0x98>)
 800fbbc:	6818      	ldr	r0, [r3, #0]
 800fbbe:	f107 0110 	add.w	r1, r7, #16
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f7fe f8cf 	bl	800dd68 <xQueueGenericSend>
 800fbca:	6278      	str	r0, [r7, #36]	; 0x24
 800fbcc:	e008      	b.n	800fbe0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fbce:	4b07      	ldr	r3, [pc, #28]	; (800fbec <xTimerGenericCommand+0x98>)
 800fbd0:	6818      	ldr	r0, [r3, #0]
 800fbd2:	f107 0110 	add.w	r1, r7, #16
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	683a      	ldr	r2, [r7, #0]
 800fbda:	f7fe f9c3 	bl	800df64 <xQueueGenericSendFromISR>
 800fbde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3728      	adds	r7, #40	; 0x28
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	200019d8 	.word	0x200019d8

0800fbf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b088      	sub	sp, #32
 800fbf4:	af02      	add	r7, sp, #8
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbfa:	4b22      	ldr	r3, [pc, #136]	; (800fc84 <prvProcessExpiredTimer+0x94>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	68db      	ldr	r3, [r3, #12]
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	3304      	adds	r3, #4
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7fd fe25 	bl	800d858 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc14:	f003 0304 	and.w	r3, r3, #4
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d022      	beq.n	800fc62 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	699a      	ldr	r2, [r3, #24]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	18d1      	adds	r1, r2, r3
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	683a      	ldr	r2, [r7, #0]
 800fc28:	6978      	ldr	r0, [r7, #20]
 800fc2a:	f000 f8d1 	bl	800fdd0 <prvInsertTimerInActiveList>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d01f      	beq.n	800fc74 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc34:	2300      	movs	r3, #0
 800fc36:	9300      	str	r3, [sp, #0]
 800fc38:	2300      	movs	r3, #0
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	2100      	movs	r1, #0
 800fc3e:	6978      	ldr	r0, [r7, #20]
 800fc40:	f7ff ff88 	bl	800fb54 <xTimerGenericCommand>
 800fc44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d113      	bne.n	800fc74 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc50:	f383 8811 	msr	BASEPRI, r3
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	f3bf 8f4f 	dsb	sy
 800fc5c:	60fb      	str	r3, [r7, #12]
}
 800fc5e:	bf00      	nop
 800fc60:	e7fe      	b.n	800fc60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc68:	f023 0301 	bic.w	r3, r3, #1
 800fc6c:	b2da      	uxtb	r2, r3
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	6a1b      	ldr	r3, [r3, #32]
 800fc78:	6978      	ldr	r0, [r7, #20]
 800fc7a:	4798      	blx	r3
}
 800fc7c:	bf00      	nop
 800fc7e:	3718      	adds	r7, #24
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	200019d0 	.word	0x200019d0

0800fc88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b084      	sub	sp, #16
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc90:	f107 0308 	add.w	r3, r7, #8
 800fc94:	4618      	mov	r0, r3
 800fc96:	f000 f857 	bl	800fd48 <prvGetNextExpireTime>
 800fc9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	4619      	mov	r1, r3
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	f000 f803 	bl	800fcac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fca6:	f000 f8d5 	bl	800fe54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fcaa:	e7f1      	b.n	800fc90 <prvTimerTask+0x8>

0800fcac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b084      	sub	sp, #16
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fcb6:	f7ff f919 	bl	800eeec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fcba:	f107 0308 	add.w	r3, r7, #8
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f000 f866 	bl	800fd90 <prvSampleTimeNow>
 800fcc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d130      	bne.n	800fd2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d10a      	bne.n	800fce8 <prvProcessTimerOrBlockTask+0x3c>
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d806      	bhi.n	800fce8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fcda:	f7ff f915 	bl	800ef08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fcde:	68f9      	ldr	r1, [r7, #12]
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7ff ff85 	bl	800fbf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fce6:	e024      	b.n	800fd32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d008      	beq.n	800fd00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fcee:	4b13      	ldr	r3, [pc, #76]	; (800fd3c <prvProcessTimerOrBlockTask+0x90>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d101      	bne.n	800fcfc <prvProcessTimerOrBlockTask+0x50>
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	e000      	b.n	800fcfe <prvProcessTimerOrBlockTask+0x52>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fd00:	4b0f      	ldr	r3, [pc, #60]	; (800fd40 <prvProcessTimerOrBlockTask+0x94>)
 800fd02:	6818      	ldr	r0, [r3, #0]
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	1ad3      	subs	r3, r2, r3
 800fd0a:	683a      	ldr	r2, [r7, #0]
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	f7fe fe5d 	bl	800e9cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fd12:	f7ff f8f9 	bl	800ef08 <xTaskResumeAll>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d10a      	bne.n	800fd32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fd1c:	4b09      	ldr	r3, [pc, #36]	; (800fd44 <prvProcessTimerOrBlockTask+0x98>)
 800fd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd22:	601a      	str	r2, [r3, #0]
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	f3bf 8f6f 	isb	sy
}
 800fd2c:	e001      	b.n	800fd32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fd2e:	f7ff f8eb 	bl	800ef08 <xTaskResumeAll>
}
 800fd32:	bf00      	nop
 800fd34:	3710      	adds	r7, #16
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	200019d4 	.word	0x200019d4
 800fd40:	200019d8 	.word	0x200019d8
 800fd44:	e000ed04 	.word	0xe000ed04

0800fd48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b085      	sub	sp, #20
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fd50:	4b0e      	ldr	r3, [pc, #56]	; (800fd8c <prvGetNextExpireTime+0x44>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d101      	bne.n	800fd5e <prvGetNextExpireTime+0x16>
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	e000      	b.n	800fd60 <prvGetNextExpireTime+0x18>
 800fd5e:	2200      	movs	r2, #0
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d105      	bne.n	800fd78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd6c:	4b07      	ldr	r3, [pc, #28]	; (800fd8c <prvGetNextExpireTime+0x44>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	60fb      	str	r3, [r7, #12]
 800fd76:	e001      	b.n	800fd7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fd78:	2300      	movs	r3, #0
 800fd7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3714      	adds	r7, #20
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr
 800fd8a:	bf00      	nop
 800fd8c:	200019d0 	.word	0x200019d0

0800fd90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b084      	sub	sp, #16
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fd98:	f7ff f954 	bl	800f044 <xTaskGetTickCount>
 800fd9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fd9e:	4b0b      	ldr	r3, [pc, #44]	; (800fdcc <prvSampleTimeNow+0x3c>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	68fa      	ldr	r2, [r7, #12]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d205      	bcs.n	800fdb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fda8:	f000 f936 	bl	8010018 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2201      	movs	r2, #1
 800fdb0:	601a      	str	r2, [r3, #0]
 800fdb2:	e002      	b.n	800fdba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fdba:	4a04      	ldr	r2, [pc, #16]	; (800fdcc <prvSampleTimeNow+0x3c>)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	200019e0 	.word	0x200019e0

0800fdd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
 800fddc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fdde:	2300      	movs	r3, #0
 800fde0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	68ba      	ldr	r2, [r7, #8]
 800fde6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	68fa      	ldr	r2, [r7, #12]
 800fdec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fdee:	68ba      	ldr	r2, [r7, #8]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d812      	bhi.n	800fe1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	1ad2      	subs	r2, r2, r3
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	699b      	ldr	r3, [r3, #24]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d302      	bcc.n	800fe0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fe04:	2301      	movs	r3, #1
 800fe06:	617b      	str	r3, [r7, #20]
 800fe08:	e01b      	b.n	800fe42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fe0a:	4b10      	ldr	r3, [pc, #64]	; (800fe4c <prvInsertTimerInActiveList+0x7c>)
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	3304      	adds	r3, #4
 800fe12:	4619      	mov	r1, r3
 800fe14:	4610      	mov	r0, r2
 800fe16:	f7fd fce6 	bl	800d7e6 <vListInsert>
 800fe1a:	e012      	b.n	800fe42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d206      	bcs.n	800fe32 <prvInsertTimerInActiveList+0x62>
 800fe24:	68ba      	ldr	r2, [r7, #8]
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d302      	bcc.n	800fe32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	617b      	str	r3, [r7, #20]
 800fe30:	e007      	b.n	800fe42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fe32:	4b07      	ldr	r3, [pc, #28]	; (800fe50 <prvInsertTimerInActiveList+0x80>)
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	3304      	adds	r3, #4
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	4610      	mov	r0, r2
 800fe3e:	f7fd fcd2 	bl	800d7e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fe42:	697b      	ldr	r3, [r7, #20]
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3718      	adds	r7, #24
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	200019d4 	.word	0x200019d4
 800fe50:	200019d0 	.word	0x200019d0

0800fe54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b08e      	sub	sp, #56	; 0x38
 800fe58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe5a:	e0ca      	b.n	800fff2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	da18      	bge.n	800fe94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fe62:	1d3b      	adds	r3, r7, #4
 800fe64:	3304      	adds	r3, #4
 800fe66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fe68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d10a      	bne.n	800fe84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fe6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe72:	f383 8811 	msr	BASEPRI, r3
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	61fb      	str	r3, [r7, #28]
}
 800fe80:	bf00      	nop
 800fe82:	e7fe      	b.n	800fe82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fe84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe8a:	6850      	ldr	r0, [r2, #4]
 800fe8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe8e:	6892      	ldr	r2, [r2, #8]
 800fe90:	4611      	mov	r1, r2
 800fe92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	f2c0 80aa 	blt.w	800fff0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea2:	695b      	ldr	r3, [r3, #20]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d004      	beq.n	800feb2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feaa:	3304      	adds	r3, #4
 800feac:	4618      	mov	r0, r3
 800feae:	f7fd fcd3 	bl	800d858 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800feb2:	463b      	mov	r3, r7
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7ff ff6b 	bl	800fd90 <prvSampleTimeNow>
 800feba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2b09      	cmp	r3, #9
 800fec0:	f200 8097 	bhi.w	800fff2 <prvProcessReceivedCommands+0x19e>
 800fec4:	a201      	add	r2, pc, #4	; (adr r2, 800fecc <prvProcessReceivedCommands+0x78>)
 800fec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feca:	bf00      	nop
 800fecc:	0800fef5 	.word	0x0800fef5
 800fed0:	0800fef5 	.word	0x0800fef5
 800fed4:	0800fef5 	.word	0x0800fef5
 800fed8:	0800ff69 	.word	0x0800ff69
 800fedc:	0800ff7d 	.word	0x0800ff7d
 800fee0:	0800ffc7 	.word	0x0800ffc7
 800fee4:	0800fef5 	.word	0x0800fef5
 800fee8:	0800fef5 	.word	0x0800fef5
 800feec:	0800ff69 	.word	0x0800ff69
 800fef0:	0800ff7d 	.word	0x0800ff7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fefa:	f043 0301 	orr.w	r3, r3, #1
 800fefe:	b2da      	uxtb	r2, r3
 800ff00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ff06:	68ba      	ldr	r2, [r7, #8]
 800ff08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff0a:	699b      	ldr	r3, [r3, #24]
 800ff0c:	18d1      	adds	r1, r2, r3
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff14:	f7ff ff5c 	bl	800fdd0 <prvInsertTimerInActiveList>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d069      	beq.n	800fff2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff20:	6a1b      	ldr	r3, [r3, #32]
 800ff22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff2c:	f003 0304 	and.w	r3, r3, #4
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d05e      	beq.n	800fff2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ff34:	68ba      	ldr	r2, [r7, #8]
 800ff36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff38:	699b      	ldr	r3, [r3, #24]
 800ff3a:	441a      	add	r2, r3
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	9300      	str	r3, [sp, #0]
 800ff40:	2300      	movs	r3, #0
 800ff42:	2100      	movs	r1, #0
 800ff44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff46:	f7ff fe05 	bl	800fb54 <xTimerGenericCommand>
 800ff4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ff4c:	6a3b      	ldr	r3, [r7, #32]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d14f      	bne.n	800fff2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ff52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff56:	f383 8811 	msr	BASEPRI, r3
 800ff5a:	f3bf 8f6f 	isb	sy
 800ff5e:	f3bf 8f4f 	dsb	sy
 800ff62:	61bb      	str	r3, [r7, #24]
}
 800ff64:	bf00      	nop
 800ff66:	e7fe      	b.n	800ff66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff6e:	f023 0301 	bic.w	r3, r3, #1
 800ff72:	b2da      	uxtb	r2, r3
 800ff74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ff7a:	e03a      	b.n	800fff2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff82:	f043 0301 	orr.w	r3, r3, #1
 800ff86:	b2da      	uxtb	r2, r3
 800ff88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ff8e:	68ba      	ldr	r2, [r7, #8]
 800ff90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ff94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff96:	699b      	ldr	r3, [r3, #24]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d10a      	bne.n	800ffb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ff9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa0:	f383 8811 	msr	BASEPRI, r3
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	f3bf 8f4f 	dsb	sy
 800ffac:	617b      	str	r3, [r7, #20]
}
 800ffae:	bf00      	nop
 800ffb0:	e7fe      	b.n	800ffb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ffb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb4:	699a      	ldr	r2, [r3, #24]
 800ffb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb8:	18d1      	adds	r1, r2, r3
 800ffba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffc0:	f7ff ff06 	bl	800fdd0 <prvInsertTimerInActiveList>
					break;
 800ffc4:	e015      	b.n	800fff2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ffc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffcc:	f003 0302 	and.w	r3, r3, #2
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d103      	bne.n	800ffdc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ffd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffd6:	f000 fbdb 	bl	8010790 <vPortFree>
 800ffda:	e00a      	b.n	800fff2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ffdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffe2:	f023 0301 	bic.w	r3, r3, #1
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ffee:	e000      	b.n	800fff2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fff0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fff2:	4b08      	ldr	r3, [pc, #32]	; (8010014 <prvProcessReceivedCommands+0x1c0>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	1d39      	adds	r1, r7, #4
 800fff8:	2200      	movs	r2, #0
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fe f8da 	bl	800e1b4 <xQueueReceive>
 8010000:	4603      	mov	r3, r0
 8010002:	2b00      	cmp	r3, #0
 8010004:	f47f af2a 	bne.w	800fe5c <prvProcessReceivedCommands+0x8>
	}
}
 8010008:	bf00      	nop
 801000a:	bf00      	nop
 801000c:	3730      	adds	r7, #48	; 0x30
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	200019d8 	.word	0x200019d8

08010018 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b088      	sub	sp, #32
 801001c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801001e:	e048      	b.n	80100b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010020:	4b2d      	ldr	r3, [pc, #180]	; (80100d8 <prvSwitchTimerLists+0xc0>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	68db      	ldr	r3, [r3, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801002a:	4b2b      	ldr	r3, [pc, #172]	; (80100d8 <prvSwitchTimerLists+0xc0>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	3304      	adds	r3, #4
 8010038:	4618      	mov	r0, r3
 801003a:	f7fd fc0d 	bl	800d858 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6a1b      	ldr	r3, [r3, #32]
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801004c:	f003 0304 	and.w	r3, r3, #4
 8010050:	2b00      	cmp	r3, #0
 8010052:	d02e      	beq.n	80100b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	699b      	ldr	r3, [r3, #24]
 8010058:	693a      	ldr	r2, [r7, #16]
 801005a:	4413      	add	r3, r2
 801005c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801005e:	68ba      	ldr	r2, [r7, #8]
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	429a      	cmp	r2, r3
 8010064:	d90e      	bls.n	8010084 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	68ba      	ldr	r2, [r7, #8]
 801006a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	68fa      	ldr	r2, [r7, #12]
 8010070:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010072:	4b19      	ldr	r3, [pc, #100]	; (80100d8 <prvSwitchTimerLists+0xc0>)
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	3304      	adds	r3, #4
 801007a:	4619      	mov	r1, r3
 801007c:	4610      	mov	r0, r2
 801007e:	f7fd fbb2 	bl	800d7e6 <vListInsert>
 8010082:	e016      	b.n	80100b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010084:	2300      	movs	r3, #0
 8010086:	9300      	str	r3, [sp, #0]
 8010088:	2300      	movs	r3, #0
 801008a:	693a      	ldr	r2, [r7, #16]
 801008c:	2100      	movs	r1, #0
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f7ff fd60 	bl	800fb54 <xTimerGenericCommand>
 8010094:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d10a      	bne.n	80100b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801009c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a0:	f383 8811 	msr	BASEPRI, r3
 80100a4:	f3bf 8f6f 	isb	sy
 80100a8:	f3bf 8f4f 	dsb	sy
 80100ac:	603b      	str	r3, [r7, #0]
}
 80100ae:	bf00      	nop
 80100b0:	e7fe      	b.n	80100b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80100b2:	4b09      	ldr	r3, [pc, #36]	; (80100d8 <prvSwitchTimerLists+0xc0>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d1b1      	bne.n	8010020 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80100bc:	4b06      	ldr	r3, [pc, #24]	; (80100d8 <prvSwitchTimerLists+0xc0>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80100c2:	4b06      	ldr	r3, [pc, #24]	; (80100dc <prvSwitchTimerLists+0xc4>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4a04      	ldr	r2, [pc, #16]	; (80100d8 <prvSwitchTimerLists+0xc0>)
 80100c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80100ca:	4a04      	ldr	r2, [pc, #16]	; (80100dc <prvSwitchTimerLists+0xc4>)
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	6013      	str	r3, [r2, #0]
}
 80100d0:	bf00      	nop
 80100d2:	3718      	adds	r7, #24
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	200019d0 	.word	0x200019d0
 80100dc:	200019d4 	.word	0x200019d4

080100e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80100e6:	f000 f965 	bl	80103b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80100ea:	4b15      	ldr	r3, [pc, #84]	; (8010140 <prvCheckForValidListAndQueue+0x60>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d120      	bne.n	8010134 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80100f2:	4814      	ldr	r0, [pc, #80]	; (8010144 <prvCheckForValidListAndQueue+0x64>)
 80100f4:	f7fd fb26 	bl	800d744 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80100f8:	4813      	ldr	r0, [pc, #76]	; (8010148 <prvCheckForValidListAndQueue+0x68>)
 80100fa:	f7fd fb23 	bl	800d744 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80100fe:	4b13      	ldr	r3, [pc, #76]	; (801014c <prvCheckForValidListAndQueue+0x6c>)
 8010100:	4a10      	ldr	r2, [pc, #64]	; (8010144 <prvCheckForValidListAndQueue+0x64>)
 8010102:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010104:	4b12      	ldr	r3, [pc, #72]	; (8010150 <prvCheckForValidListAndQueue+0x70>)
 8010106:	4a10      	ldr	r2, [pc, #64]	; (8010148 <prvCheckForValidListAndQueue+0x68>)
 8010108:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801010a:	2300      	movs	r3, #0
 801010c:	9300      	str	r3, [sp, #0]
 801010e:	4b11      	ldr	r3, [pc, #68]	; (8010154 <prvCheckForValidListAndQueue+0x74>)
 8010110:	4a11      	ldr	r2, [pc, #68]	; (8010158 <prvCheckForValidListAndQueue+0x78>)
 8010112:	2110      	movs	r1, #16
 8010114:	200a      	movs	r0, #10
 8010116:	f7fd fc31 	bl	800d97c <xQueueGenericCreateStatic>
 801011a:	4603      	mov	r3, r0
 801011c:	4a08      	ldr	r2, [pc, #32]	; (8010140 <prvCheckForValidListAndQueue+0x60>)
 801011e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010120:	4b07      	ldr	r3, [pc, #28]	; (8010140 <prvCheckForValidListAndQueue+0x60>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d005      	beq.n	8010134 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010128:	4b05      	ldr	r3, [pc, #20]	; (8010140 <prvCheckForValidListAndQueue+0x60>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	490b      	ldr	r1, [pc, #44]	; (801015c <prvCheckForValidListAndQueue+0x7c>)
 801012e:	4618      	mov	r0, r3
 8010130:	f7fe fbf8 	bl	800e924 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010134:	f000 f96e 	bl	8010414 <vPortExitCritical>
}
 8010138:	bf00      	nop
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	200019d8 	.word	0x200019d8
 8010144:	200019a8 	.word	0x200019a8
 8010148:	200019bc 	.word	0x200019bc
 801014c:	200019d0 	.word	0x200019d0
 8010150:	200019d4 	.word	0x200019d4
 8010154:	20001a84 	.word	0x20001a84
 8010158:	200019e4 	.word	0x200019e4
 801015c:	08015530 	.word	0x08015530

08010160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010160:	b480      	push	{r7}
 8010162:	b085      	sub	sp, #20
 8010164:	af00      	add	r7, sp, #0
 8010166:	60f8      	str	r0, [r7, #12]
 8010168:	60b9      	str	r1, [r7, #8]
 801016a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	3b04      	subs	r3, #4
 8010170:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	3b04      	subs	r3, #4
 801017e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	f023 0201 	bic.w	r2, r3, #1
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	3b04      	subs	r3, #4
 801018e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010190:	4a0c      	ldr	r2, [pc, #48]	; (80101c4 <pxPortInitialiseStack+0x64>)
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	3b14      	subs	r3, #20
 801019a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801019c:	687a      	ldr	r2, [r7, #4]
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	3b04      	subs	r3, #4
 80101a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f06f 0202 	mvn.w	r2, #2
 80101ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	3b20      	subs	r3, #32
 80101b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80101b6:	68fb      	ldr	r3, [r7, #12]
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3714      	adds	r7, #20
 80101bc:	46bd      	mov	sp, r7
 80101be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c2:	4770      	bx	lr
 80101c4:	080101c9 	.word	0x080101c9

080101c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80101c8:	b480      	push	{r7}
 80101ca:	b085      	sub	sp, #20
 80101cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80101ce:	2300      	movs	r3, #0
 80101d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80101d2:	4b12      	ldr	r3, [pc, #72]	; (801021c <prvTaskExitError+0x54>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101da:	d00a      	beq.n	80101f2 <prvTaskExitError+0x2a>
	__asm volatile
 80101dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e0:	f383 8811 	msr	BASEPRI, r3
 80101e4:	f3bf 8f6f 	isb	sy
 80101e8:	f3bf 8f4f 	dsb	sy
 80101ec:	60fb      	str	r3, [r7, #12]
}
 80101ee:	bf00      	nop
 80101f0:	e7fe      	b.n	80101f0 <prvTaskExitError+0x28>
	__asm volatile
 80101f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f6:	f383 8811 	msr	BASEPRI, r3
 80101fa:	f3bf 8f6f 	isb	sy
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	60bb      	str	r3, [r7, #8]
}
 8010204:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010206:	bf00      	nop
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d0fc      	beq.n	8010208 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801020e:	bf00      	nop
 8010210:	bf00      	nop
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr
 801021c:	2000000c 	.word	0x2000000c

08010220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010220:	4b07      	ldr	r3, [pc, #28]	; (8010240 <pxCurrentTCBConst2>)
 8010222:	6819      	ldr	r1, [r3, #0]
 8010224:	6808      	ldr	r0, [r1, #0]
 8010226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801022a:	f380 8809 	msr	PSP, r0
 801022e:	f3bf 8f6f 	isb	sy
 8010232:	f04f 0000 	mov.w	r0, #0
 8010236:	f380 8811 	msr	BASEPRI, r0
 801023a:	4770      	bx	lr
 801023c:	f3af 8000 	nop.w

08010240 <pxCurrentTCBConst2>:
 8010240:	200014a8 	.word	0x200014a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010244:	bf00      	nop
 8010246:	bf00      	nop

08010248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010248:	4808      	ldr	r0, [pc, #32]	; (801026c <prvPortStartFirstTask+0x24>)
 801024a:	6800      	ldr	r0, [r0, #0]
 801024c:	6800      	ldr	r0, [r0, #0]
 801024e:	f380 8808 	msr	MSP, r0
 8010252:	f04f 0000 	mov.w	r0, #0
 8010256:	f380 8814 	msr	CONTROL, r0
 801025a:	b662      	cpsie	i
 801025c:	b661      	cpsie	f
 801025e:	f3bf 8f4f 	dsb	sy
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	df00      	svc	0
 8010268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801026a:	bf00      	nop
 801026c:	e000ed08 	.word	0xe000ed08

08010270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b086      	sub	sp, #24
 8010274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010276:	4b46      	ldr	r3, [pc, #280]	; (8010390 <xPortStartScheduler+0x120>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4a46      	ldr	r2, [pc, #280]	; (8010394 <xPortStartScheduler+0x124>)
 801027c:	4293      	cmp	r3, r2
 801027e:	d10a      	bne.n	8010296 <xPortStartScheduler+0x26>
	__asm volatile
 8010280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010284:	f383 8811 	msr	BASEPRI, r3
 8010288:	f3bf 8f6f 	isb	sy
 801028c:	f3bf 8f4f 	dsb	sy
 8010290:	613b      	str	r3, [r7, #16]
}
 8010292:	bf00      	nop
 8010294:	e7fe      	b.n	8010294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010296:	4b3e      	ldr	r3, [pc, #248]	; (8010390 <xPortStartScheduler+0x120>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4a3f      	ldr	r2, [pc, #252]	; (8010398 <xPortStartScheduler+0x128>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d10a      	bne.n	80102b6 <xPortStartScheduler+0x46>
	__asm volatile
 80102a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a4:	f383 8811 	msr	BASEPRI, r3
 80102a8:	f3bf 8f6f 	isb	sy
 80102ac:	f3bf 8f4f 	dsb	sy
 80102b0:	60fb      	str	r3, [r7, #12]
}
 80102b2:	bf00      	nop
 80102b4:	e7fe      	b.n	80102b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80102b6:	4b39      	ldr	r3, [pc, #228]	; (801039c <xPortStartScheduler+0x12c>)
 80102b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	22ff      	movs	r2, #255	; 0xff
 80102c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80102d0:	78fb      	ldrb	r3, [r7, #3]
 80102d2:	b2db      	uxtb	r3, r3
 80102d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80102d8:	b2da      	uxtb	r2, r3
 80102da:	4b31      	ldr	r3, [pc, #196]	; (80103a0 <xPortStartScheduler+0x130>)
 80102dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80102de:	4b31      	ldr	r3, [pc, #196]	; (80103a4 <xPortStartScheduler+0x134>)
 80102e0:	2207      	movs	r2, #7
 80102e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102e4:	e009      	b.n	80102fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80102e6:	4b2f      	ldr	r3, [pc, #188]	; (80103a4 <xPortStartScheduler+0x134>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	3b01      	subs	r3, #1
 80102ec:	4a2d      	ldr	r2, [pc, #180]	; (80103a4 <xPortStartScheduler+0x134>)
 80102ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80102f0:	78fb      	ldrb	r3, [r7, #3]
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	005b      	lsls	r3, r3, #1
 80102f6:	b2db      	uxtb	r3, r3
 80102f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102fa:	78fb      	ldrb	r3, [r7, #3]
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010302:	2b80      	cmp	r3, #128	; 0x80
 8010304:	d0ef      	beq.n	80102e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010306:	4b27      	ldr	r3, [pc, #156]	; (80103a4 <xPortStartScheduler+0x134>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	f1c3 0307 	rsb	r3, r3, #7
 801030e:	2b04      	cmp	r3, #4
 8010310:	d00a      	beq.n	8010328 <xPortStartScheduler+0xb8>
	__asm volatile
 8010312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010316:	f383 8811 	msr	BASEPRI, r3
 801031a:	f3bf 8f6f 	isb	sy
 801031e:	f3bf 8f4f 	dsb	sy
 8010322:	60bb      	str	r3, [r7, #8]
}
 8010324:	bf00      	nop
 8010326:	e7fe      	b.n	8010326 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010328:	4b1e      	ldr	r3, [pc, #120]	; (80103a4 <xPortStartScheduler+0x134>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	021b      	lsls	r3, r3, #8
 801032e:	4a1d      	ldr	r2, [pc, #116]	; (80103a4 <xPortStartScheduler+0x134>)
 8010330:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010332:	4b1c      	ldr	r3, [pc, #112]	; (80103a4 <xPortStartScheduler+0x134>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801033a:	4a1a      	ldr	r2, [pc, #104]	; (80103a4 <xPortStartScheduler+0x134>)
 801033c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	b2da      	uxtb	r2, r3
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010346:	4b18      	ldr	r3, [pc, #96]	; (80103a8 <xPortStartScheduler+0x138>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4a17      	ldr	r2, [pc, #92]	; (80103a8 <xPortStartScheduler+0x138>)
 801034c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010352:	4b15      	ldr	r3, [pc, #84]	; (80103a8 <xPortStartScheduler+0x138>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4a14      	ldr	r2, [pc, #80]	; (80103a8 <xPortStartScheduler+0x138>)
 8010358:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801035c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801035e:	f000 f8dd 	bl	801051c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010362:	4b12      	ldr	r3, [pc, #72]	; (80103ac <xPortStartScheduler+0x13c>)
 8010364:	2200      	movs	r2, #0
 8010366:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010368:	f000 f8fc 	bl	8010564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801036c:	4b10      	ldr	r3, [pc, #64]	; (80103b0 <xPortStartScheduler+0x140>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a0f      	ldr	r2, [pc, #60]	; (80103b0 <xPortStartScheduler+0x140>)
 8010372:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010376:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010378:	f7ff ff66 	bl	8010248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801037c:	f7fe ff3e 	bl	800f1fc <vTaskSwitchContext>
	prvTaskExitError();
 8010380:	f7ff ff22 	bl	80101c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010384:	2300      	movs	r3, #0
}
 8010386:	4618      	mov	r0, r3
 8010388:	3718      	adds	r7, #24
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	e000ed00 	.word	0xe000ed00
 8010394:	410fc271 	.word	0x410fc271
 8010398:	410fc270 	.word	0x410fc270
 801039c:	e000e400 	.word	0xe000e400
 80103a0:	20001ad4 	.word	0x20001ad4
 80103a4:	20001ad8 	.word	0x20001ad8
 80103a8:	e000ed20 	.word	0xe000ed20
 80103ac:	2000000c 	.word	0x2000000c
 80103b0:	e000ef34 	.word	0xe000ef34

080103b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
	__asm volatile
 80103ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103be:	f383 8811 	msr	BASEPRI, r3
 80103c2:	f3bf 8f6f 	isb	sy
 80103c6:	f3bf 8f4f 	dsb	sy
 80103ca:	607b      	str	r3, [r7, #4]
}
 80103cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80103ce:	4b0f      	ldr	r3, [pc, #60]	; (801040c <vPortEnterCritical+0x58>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	3301      	adds	r3, #1
 80103d4:	4a0d      	ldr	r2, [pc, #52]	; (801040c <vPortEnterCritical+0x58>)
 80103d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80103d8:	4b0c      	ldr	r3, [pc, #48]	; (801040c <vPortEnterCritical+0x58>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2b01      	cmp	r3, #1
 80103de:	d10f      	bne.n	8010400 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80103e0:	4b0b      	ldr	r3, [pc, #44]	; (8010410 <vPortEnterCritical+0x5c>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d00a      	beq.n	8010400 <vPortEnterCritical+0x4c>
	__asm volatile
 80103ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ee:	f383 8811 	msr	BASEPRI, r3
 80103f2:	f3bf 8f6f 	isb	sy
 80103f6:	f3bf 8f4f 	dsb	sy
 80103fa:	603b      	str	r3, [r7, #0]
}
 80103fc:	bf00      	nop
 80103fe:	e7fe      	b.n	80103fe <vPortEnterCritical+0x4a>
	}
}
 8010400:	bf00      	nop
 8010402:	370c      	adds	r7, #12
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr
 801040c:	2000000c 	.word	0x2000000c
 8010410:	e000ed04 	.word	0xe000ed04

08010414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801041a:	4b12      	ldr	r3, [pc, #72]	; (8010464 <vPortExitCritical+0x50>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d10a      	bne.n	8010438 <vPortExitCritical+0x24>
	__asm volatile
 8010422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010426:	f383 8811 	msr	BASEPRI, r3
 801042a:	f3bf 8f6f 	isb	sy
 801042e:	f3bf 8f4f 	dsb	sy
 8010432:	607b      	str	r3, [r7, #4]
}
 8010434:	bf00      	nop
 8010436:	e7fe      	b.n	8010436 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010438:	4b0a      	ldr	r3, [pc, #40]	; (8010464 <vPortExitCritical+0x50>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	3b01      	subs	r3, #1
 801043e:	4a09      	ldr	r2, [pc, #36]	; (8010464 <vPortExitCritical+0x50>)
 8010440:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010442:	4b08      	ldr	r3, [pc, #32]	; (8010464 <vPortExitCritical+0x50>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d105      	bne.n	8010456 <vPortExitCritical+0x42>
 801044a:	2300      	movs	r3, #0
 801044c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	f383 8811 	msr	BASEPRI, r3
}
 8010454:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010456:	bf00      	nop
 8010458:	370c      	adds	r7, #12
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr
 8010462:	bf00      	nop
 8010464:	2000000c 	.word	0x2000000c
	...

08010470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010470:	f3ef 8009 	mrs	r0, PSP
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	4b15      	ldr	r3, [pc, #84]	; (80104d0 <pxCurrentTCBConst>)
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	f01e 0f10 	tst.w	lr, #16
 8010480:	bf08      	it	eq
 8010482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801048a:	6010      	str	r0, [r2, #0]
 801048c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010494:	f380 8811 	msr	BASEPRI, r0
 8010498:	f3bf 8f4f 	dsb	sy
 801049c:	f3bf 8f6f 	isb	sy
 80104a0:	f7fe feac 	bl	800f1fc <vTaskSwitchContext>
 80104a4:	f04f 0000 	mov.w	r0, #0
 80104a8:	f380 8811 	msr	BASEPRI, r0
 80104ac:	bc09      	pop	{r0, r3}
 80104ae:	6819      	ldr	r1, [r3, #0]
 80104b0:	6808      	ldr	r0, [r1, #0]
 80104b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b6:	f01e 0f10 	tst.w	lr, #16
 80104ba:	bf08      	it	eq
 80104bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80104c0:	f380 8809 	msr	PSP, r0
 80104c4:	f3bf 8f6f 	isb	sy
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop
 80104cc:	f3af 8000 	nop.w

080104d0 <pxCurrentTCBConst>:
 80104d0:	200014a8 	.word	0x200014a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80104d4:	bf00      	nop
 80104d6:	bf00      	nop

080104d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
	__asm volatile
 80104de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e2:	f383 8811 	msr	BASEPRI, r3
 80104e6:	f3bf 8f6f 	isb	sy
 80104ea:	f3bf 8f4f 	dsb	sy
 80104ee:	607b      	str	r3, [r7, #4]
}
 80104f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80104f2:	f7fe fdc9 	bl	800f088 <xTaskIncrementTick>
 80104f6:	4603      	mov	r3, r0
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d003      	beq.n	8010504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80104fc:	4b06      	ldr	r3, [pc, #24]	; (8010518 <xPortSysTickHandler+0x40>)
 80104fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010502:	601a      	str	r2, [r3, #0]
 8010504:	2300      	movs	r3, #0
 8010506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	f383 8811 	msr	BASEPRI, r3
}
 801050e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010510:	bf00      	nop
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	e000ed04 	.word	0xe000ed04

0801051c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801051c:	b480      	push	{r7}
 801051e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010520:	4b0b      	ldr	r3, [pc, #44]	; (8010550 <vPortSetupTimerInterrupt+0x34>)
 8010522:	2200      	movs	r2, #0
 8010524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010526:	4b0b      	ldr	r3, [pc, #44]	; (8010554 <vPortSetupTimerInterrupt+0x38>)
 8010528:	2200      	movs	r2, #0
 801052a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801052c:	4b0a      	ldr	r3, [pc, #40]	; (8010558 <vPortSetupTimerInterrupt+0x3c>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	4a0a      	ldr	r2, [pc, #40]	; (801055c <vPortSetupTimerInterrupt+0x40>)
 8010532:	fba2 2303 	umull	r2, r3, r2, r3
 8010536:	099b      	lsrs	r3, r3, #6
 8010538:	4a09      	ldr	r2, [pc, #36]	; (8010560 <vPortSetupTimerInterrupt+0x44>)
 801053a:	3b01      	subs	r3, #1
 801053c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801053e:	4b04      	ldr	r3, [pc, #16]	; (8010550 <vPortSetupTimerInterrupt+0x34>)
 8010540:	2207      	movs	r2, #7
 8010542:	601a      	str	r2, [r3, #0]
}
 8010544:	bf00      	nop
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop
 8010550:	e000e010 	.word	0xe000e010
 8010554:	e000e018 	.word	0xe000e018
 8010558:	20000000 	.word	0x20000000
 801055c:	10624dd3 	.word	0x10624dd3
 8010560:	e000e014 	.word	0xe000e014

08010564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010574 <vPortEnableVFP+0x10>
 8010568:	6801      	ldr	r1, [r0, #0]
 801056a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801056e:	6001      	str	r1, [r0, #0]
 8010570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010572:	bf00      	nop
 8010574:	e000ed88 	.word	0xe000ed88

08010578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801057e:	f3ef 8305 	mrs	r3, IPSR
 8010582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2b0f      	cmp	r3, #15
 8010588:	d914      	bls.n	80105b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801058a:	4a17      	ldr	r2, [pc, #92]	; (80105e8 <vPortValidateInterruptPriority+0x70>)
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	4413      	add	r3, r2
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010594:	4b15      	ldr	r3, [pc, #84]	; (80105ec <vPortValidateInterruptPriority+0x74>)
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	7afa      	ldrb	r2, [r7, #11]
 801059a:	429a      	cmp	r2, r3
 801059c:	d20a      	bcs.n	80105b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801059e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a2:	f383 8811 	msr	BASEPRI, r3
 80105a6:	f3bf 8f6f 	isb	sy
 80105aa:	f3bf 8f4f 	dsb	sy
 80105ae:	607b      	str	r3, [r7, #4]
}
 80105b0:	bf00      	nop
 80105b2:	e7fe      	b.n	80105b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80105b4:	4b0e      	ldr	r3, [pc, #56]	; (80105f0 <vPortValidateInterruptPriority+0x78>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80105bc:	4b0d      	ldr	r3, [pc, #52]	; (80105f4 <vPortValidateInterruptPriority+0x7c>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d90a      	bls.n	80105da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80105c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c8:	f383 8811 	msr	BASEPRI, r3
 80105cc:	f3bf 8f6f 	isb	sy
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	603b      	str	r3, [r7, #0]
}
 80105d6:	bf00      	nop
 80105d8:	e7fe      	b.n	80105d8 <vPortValidateInterruptPriority+0x60>
	}
 80105da:	bf00      	nop
 80105dc:	3714      	adds	r7, #20
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr
 80105e6:	bf00      	nop
 80105e8:	e000e3f0 	.word	0xe000e3f0
 80105ec:	20001ad4 	.word	0x20001ad4
 80105f0:	e000ed0c 	.word	0xe000ed0c
 80105f4:	20001ad8 	.word	0x20001ad8

080105f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b08a      	sub	sp, #40	; 0x28
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010600:	2300      	movs	r3, #0
 8010602:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010604:	f7fe fc72 	bl	800eeec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010608:	4b5b      	ldr	r3, [pc, #364]	; (8010778 <pvPortMalloc+0x180>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d101      	bne.n	8010614 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010610:	f000 f920 	bl	8010854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010614:	4b59      	ldr	r3, [pc, #356]	; (801077c <pvPortMalloc+0x184>)
 8010616:	681a      	ldr	r2, [r3, #0]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	4013      	ands	r3, r2
 801061c:	2b00      	cmp	r3, #0
 801061e:	f040 8093 	bne.w	8010748 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d01d      	beq.n	8010664 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010628:	2208      	movs	r2, #8
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	4413      	add	r3, r2
 801062e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f003 0307 	and.w	r3, r3, #7
 8010636:	2b00      	cmp	r3, #0
 8010638:	d014      	beq.n	8010664 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f023 0307 	bic.w	r3, r3, #7
 8010640:	3308      	adds	r3, #8
 8010642:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f003 0307 	and.w	r3, r3, #7
 801064a:	2b00      	cmp	r3, #0
 801064c:	d00a      	beq.n	8010664 <pvPortMalloc+0x6c>
	__asm volatile
 801064e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010652:	f383 8811 	msr	BASEPRI, r3
 8010656:	f3bf 8f6f 	isb	sy
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	617b      	str	r3, [r7, #20]
}
 8010660:	bf00      	nop
 8010662:	e7fe      	b.n	8010662 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d06e      	beq.n	8010748 <pvPortMalloc+0x150>
 801066a:	4b45      	ldr	r3, [pc, #276]	; (8010780 <pvPortMalloc+0x188>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	429a      	cmp	r2, r3
 8010672:	d869      	bhi.n	8010748 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010674:	4b43      	ldr	r3, [pc, #268]	; (8010784 <pvPortMalloc+0x18c>)
 8010676:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010678:	4b42      	ldr	r3, [pc, #264]	; (8010784 <pvPortMalloc+0x18c>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801067e:	e004      	b.n	801068a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010682:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	429a      	cmp	r2, r3
 8010692:	d903      	bls.n	801069c <pvPortMalloc+0xa4>
 8010694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d1f1      	bne.n	8010680 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801069c:	4b36      	ldr	r3, [pc, #216]	; (8010778 <pvPortMalloc+0x180>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d050      	beq.n	8010748 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80106a6:	6a3b      	ldr	r3, [r7, #32]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	2208      	movs	r2, #8
 80106ac:	4413      	add	r3, r2
 80106ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	681a      	ldr	r2, [r3, #0]
 80106b4:	6a3b      	ldr	r3, [r7, #32]
 80106b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80106b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ba:	685a      	ldr	r2, [r3, #4]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	1ad2      	subs	r2, r2, r3
 80106c0:	2308      	movs	r3, #8
 80106c2:	005b      	lsls	r3, r3, #1
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d91f      	bls.n	8010708 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80106c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4413      	add	r3, r2
 80106ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	f003 0307 	and.w	r3, r3, #7
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00a      	beq.n	80106f0 <pvPortMalloc+0xf8>
	__asm volatile
 80106da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106de:	f383 8811 	msr	BASEPRI, r3
 80106e2:	f3bf 8f6f 	isb	sy
 80106e6:	f3bf 8f4f 	dsb	sy
 80106ea:	613b      	str	r3, [r7, #16]
}
 80106ec:	bf00      	nop
 80106ee:	e7fe      	b.n	80106ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80106f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f2:	685a      	ldr	r2, [r3, #4]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	1ad2      	subs	r2, r2, r3
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80106fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fe:	687a      	ldr	r2, [r7, #4]
 8010700:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010702:	69b8      	ldr	r0, [r7, #24]
 8010704:	f000 f908 	bl	8010918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010708:	4b1d      	ldr	r3, [pc, #116]	; (8010780 <pvPortMalloc+0x188>)
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	1ad3      	subs	r3, r2, r3
 8010712:	4a1b      	ldr	r2, [pc, #108]	; (8010780 <pvPortMalloc+0x188>)
 8010714:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010716:	4b1a      	ldr	r3, [pc, #104]	; (8010780 <pvPortMalloc+0x188>)
 8010718:	681a      	ldr	r2, [r3, #0]
 801071a:	4b1b      	ldr	r3, [pc, #108]	; (8010788 <pvPortMalloc+0x190>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	429a      	cmp	r2, r3
 8010720:	d203      	bcs.n	801072a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010722:	4b17      	ldr	r3, [pc, #92]	; (8010780 <pvPortMalloc+0x188>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4a18      	ldr	r2, [pc, #96]	; (8010788 <pvPortMalloc+0x190>)
 8010728:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072c:	685a      	ldr	r2, [r3, #4]
 801072e:	4b13      	ldr	r3, [pc, #76]	; (801077c <pvPortMalloc+0x184>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	431a      	orrs	r2, r3
 8010734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010736:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073a:	2200      	movs	r2, #0
 801073c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801073e:	4b13      	ldr	r3, [pc, #76]	; (801078c <pvPortMalloc+0x194>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	3301      	adds	r3, #1
 8010744:	4a11      	ldr	r2, [pc, #68]	; (801078c <pvPortMalloc+0x194>)
 8010746:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010748:	f7fe fbde 	bl	800ef08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801074c:	69fb      	ldr	r3, [r7, #28]
 801074e:	f003 0307 	and.w	r3, r3, #7
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00a      	beq.n	801076c <pvPortMalloc+0x174>
	__asm volatile
 8010756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075a:	f383 8811 	msr	BASEPRI, r3
 801075e:	f3bf 8f6f 	isb	sy
 8010762:	f3bf 8f4f 	dsb	sy
 8010766:	60fb      	str	r3, [r7, #12]
}
 8010768:	bf00      	nop
 801076a:	e7fe      	b.n	801076a <pvPortMalloc+0x172>
	return pvReturn;
 801076c:	69fb      	ldr	r3, [r7, #28]
}
 801076e:	4618      	mov	r0, r3
 8010770:	3728      	adds	r7, #40	; 0x28
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	2000269c 	.word	0x2000269c
 801077c:	200026b0 	.word	0x200026b0
 8010780:	200026a0 	.word	0x200026a0
 8010784:	20002694 	.word	0x20002694
 8010788:	200026a4 	.word	0x200026a4
 801078c:	200026a8 	.word	0x200026a8

08010790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b086      	sub	sp, #24
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d04d      	beq.n	801083e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80107a2:	2308      	movs	r3, #8
 80107a4:	425b      	negs	r3, r3
 80107a6:	697a      	ldr	r2, [r7, #20]
 80107a8:	4413      	add	r3, r2
 80107aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	685a      	ldr	r2, [r3, #4]
 80107b4:	4b24      	ldr	r3, [pc, #144]	; (8010848 <vPortFree+0xb8>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	4013      	ands	r3, r2
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d10a      	bne.n	80107d4 <vPortFree+0x44>
	__asm volatile
 80107be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c2:	f383 8811 	msr	BASEPRI, r3
 80107c6:	f3bf 8f6f 	isb	sy
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	60fb      	str	r3, [r7, #12]
}
 80107d0:	bf00      	nop
 80107d2:	e7fe      	b.n	80107d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d00a      	beq.n	80107f2 <vPortFree+0x62>
	__asm volatile
 80107dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e0:	f383 8811 	msr	BASEPRI, r3
 80107e4:	f3bf 8f6f 	isb	sy
 80107e8:	f3bf 8f4f 	dsb	sy
 80107ec:	60bb      	str	r3, [r7, #8]
}
 80107ee:	bf00      	nop
 80107f0:	e7fe      	b.n	80107f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	685a      	ldr	r2, [r3, #4]
 80107f6:	4b14      	ldr	r3, [pc, #80]	; (8010848 <vPortFree+0xb8>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4013      	ands	r3, r2
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d01e      	beq.n	801083e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d11a      	bne.n	801083e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	685a      	ldr	r2, [r3, #4]
 801080c:	4b0e      	ldr	r3, [pc, #56]	; (8010848 <vPortFree+0xb8>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	43db      	mvns	r3, r3
 8010812:	401a      	ands	r2, r3
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010818:	f7fe fb68 	bl	800eeec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	685a      	ldr	r2, [r3, #4]
 8010820:	4b0a      	ldr	r3, [pc, #40]	; (801084c <vPortFree+0xbc>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4413      	add	r3, r2
 8010826:	4a09      	ldr	r2, [pc, #36]	; (801084c <vPortFree+0xbc>)
 8010828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801082a:	6938      	ldr	r0, [r7, #16]
 801082c:	f000 f874 	bl	8010918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010830:	4b07      	ldr	r3, [pc, #28]	; (8010850 <vPortFree+0xc0>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	3301      	adds	r3, #1
 8010836:	4a06      	ldr	r2, [pc, #24]	; (8010850 <vPortFree+0xc0>)
 8010838:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801083a:	f7fe fb65 	bl	800ef08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801083e:	bf00      	nop
 8010840:	3718      	adds	r7, #24
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	200026b0 	.word	0x200026b0
 801084c:	200026a0 	.word	0x200026a0
 8010850:	200026ac 	.word	0x200026ac

08010854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010854:	b480      	push	{r7}
 8010856:	b085      	sub	sp, #20
 8010858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801085a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801085e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010860:	4b27      	ldr	r3, [pc, #156]	; (8010900 <prvHeapInit+0xac>)
 8010862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f003 0307 	and.w	r3, r3, #7
 801086a:	2b00      	cmp	r3, #0
 801086c:	d00c      	beq.n	8010888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	3307      	adds	r3, #7
 8010872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	f023 0307 	bic.w	r3, r3, #7
 801087a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801087c:	68ba      	ldr	r2, [r7, #8]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	4a1f      	ldr	r2, [pc, #124]	; (8010900 <prvHeapInit+0xac>)
 8010884:	4413      	add	r3, r2
 8010886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801088c:	4a1d      	ldr	r2, [pc, #116]	; (8010904 <prvHeapInit+0xb0>)
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010892:	4b1c      	ldr	r3, [pc, #112]	; (8010904 <prvHeapInit+0xb0>)
 8010894:	2200      	movs	r2, #0
 8010896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	68ba      	ldr	r2, [r7, #8]
 801089c:	4413      	add	r3, r2
 801089e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80108a0:	2208      	movs	r2, #8
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	1a9b      	subs	r3, r3, r2
 80108a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f023 0307 	bic.w	r3, r3, #7
 80108ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	4a15      	ldr	r2, [pc, #84]	; (8010908 <prvHeapInit+0xb4>)
 80108b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80108b6:	4b14      	ldr	r3, [pc, #80]	; (8010908 <prvHeapInit+0xb4>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	2200      	movs	r2, #0
 80108bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80108be:	4b12      	ldr	r3, [pc, #72]	; (8010908 <prvHeapInit+0xb4>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	2200      	movs	r2, #0
 80108c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	1ad2      	subs	r2, r2, r3
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80108d4:	4b0c      	ldr	r3, [pc, #48]	; (8010908 <prvHeapInit+0xb4>)
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	4a0a      	ldr	r2, [pc, #40]	; (801090c <prvHeapInit+0xb8>)
 80108e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	4a09      	ldr	r2, [pc, #36]	; (8010910 <prvHeapInit+0xbc>)
 80108ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80108ec:	4b09      	ldr	r3, [pc, #36]	; (8010914 <prvHeapInit+0xc0>)
 80108ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80108f2:	601a      	str	r2, [r3, #0]
}
 80108f4:	bf00      	nop
 80108f6:	3714      	adds	r7, #20
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr
 8010900:	20001adc 	.word	0x20001adc
 8010904:	20002694 	.word	0x20002694
 8010908:	2000269c 	.word	0x2000269c
 801090c:	200026a4 	.word	0x200026a4
 8010910:	200026a0 	.word	0x200026a0
 8010914:	200026b0 	.word	0x200026b0

08010918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010918:	b480      	push	{r7}
 801091a:	b085      	sub	sp, #20
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010920:	4b28      	ldr	r3, [pc, #160]	; (80109c4 <prvInsertBlockIntoFreeList+0xac>)
 8010922:	60fb      	str	r3, [r7, #12]
 8010924:	e002      	b.n	801092c <prvInsertBlockIntoFreeList+0x14>
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	60fb      	str	r3, [r7, #12]
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	687a      	ldr	r2, [r7, #4]
 8010932:	429a      	cmp	r2, r3
 8010934:	d8f7      	bhi.n	8010926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	68ba      	ldr	r2, [r7, #8]
 8010940:	4413      	add	r3, r2
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	429a      	cmp	r2, r3
 8010946:	d108      	bne.n	801095a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	685a      	ldr	r2, [r3, #4]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	441a      	add	r2, r3
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	68ba      	ldr	r2, [r7, #8]
 8010964:	441a      	add	r2, r3
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	429a      	cmp	r2, r3
 801096c:	d118      	bne.n	80109a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681a      	ldr	r2, [r3, #0]
 8010972:	4b15      	ldr	r3, [pc, #84]	; (80109c8 <prvInsertBlockIntoFreeList+0xb0>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	429a      	cmp	r2, r3
 8010978:	d00d      	beq.n	8010996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	685a      	ldr	r2, [r3, #4]
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	441a      	add	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	601a      	str	r2, [r3, #0]
 8010994:	e008      	b.n	80109a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010996:	4b0c      	ldr	r3, [pc, #48]	; (80109c8 <prvInsertBlockIntoFreeList+0xb0>)
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	601a      	str	r2, [r3, #0]
 801099e:	e003      	b.n	80109a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80109a8:	68fa      	ldr	r2, [r7, #12]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d002      	beq.n	80109b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109b6:	bf00      	nop
 80109b8:	3714      	adds	r7, #20
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	20002694 	.word	0x20002694
 80109c8:	2000269c 	.word	0x2000269c

080109cc <__errno>:
 80109cc:	4b01      	ldr	r3, [pc, #4]	; (80109d4 <__errno+0x8>)
 80109ce:	6818      	ldr	r0, [r3, #0]
 80109d0:	4770      	bx	lr
 80109d2:	bf00      	nop
 80109d4:	20000010 	.word	0x20000010

080109d8 <std>:
 80109d8:	2300      	movs	r3, #0
 80109da:	b510      	push	{r4, lr}
 80109dc:	4604      	mov	r4, r0
 80109de:	e9c0 3300 	strd	r3, r3, [r0]
 80109e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109e6:	6083      	str	r3, [r0, #8]
 80109e8:	8181      	strh	r1, [r0, #12]
 80109ea:	6643      	str	r3, [r0, #100]	; 0x64
 80109ec:	81c2      	strh	r2, [r0, #14]
 80109ee:	6183      	str	r3, [r0, #24]
 80109f0:	4619      	mov	r1, r3
 80109f2:	2208      	movs	r2, #8
 80109f4:	305c      	adds	r0, #92	; 0x5c
 80109f6:	f000 f91a 	bl	8010c2e <memset>
 80109fa:	4b05      	ldr	r3, [pc, #20]	; (8010a10 <std+0x38>)
 80109fc:	6263      	str	r3, [r4, #36]	; 0x24
 80109fe:	4b05      	ldr	r3, [pc, #20]	; (8010a14 <std+0x3c>)
 8010a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a02:	4b05      	ldr	r3, [pc, #20]	; (8010a18 <std+0x40>)
 8010a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a06:	4b05      	ldr	r3, [pc, #20]	; (8010a1c <std+0x44>)
 8010a08:	6224      	str	r4, [r4, #32]
 8010a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8010a0c:	bd10      	pop	{r4, pc}
 8010a0e:	bf00      	nop
 8010a10:	08011c05 	.word	0x08011c05
 8010a14:	08011c27 	.word	0x08011c27
 8010a18:	08011c5f 	.word	0x08011c5f
 8010a1c:	08011c83 	.word	0x08011c83

08010a20 <_cleanup_r>:
 8010a20:	4901      	ldr	r1, [pc, #4]	; (8010a28 <_cleanup_r+0x8>)
 8010a22:	f000 b8af 	b.w	8010b84 <_fwalk_reent>
 8010a26:	bf00      	nop
 8010a28:	08013831 	.word	0x08013831

08010a2c <__sfmoreglue>:
 8010a2c:	b570      	push	{r4, r5, r6, lr}
 8010a2e:	2268      	movs	r2, #104	; 0x68
 8010a30:	1e4d      	subs	r5, r1, #1
 8010a32:	4355      	muls	r5, r2
 8010a34:	460e      	mov	r6, r1
 8010a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a3a:	f000 f921 	bl	8010c80 <_malloc_r>
 8010a3e:	4604      	mov	r4, r0
 8010a40:	b140      	cbz	r0, 8010a54 <__sfmoreglue+0x28>
 8010a42:	2100      	movs	r1, #0
 8010a44:	e9c0 1600 	strd	r1, r6, [r0]
 8010a48:	300c      	adds	r0, #12
 8010a4a:	60a0      	str	r0, [r4, #8]
 8010a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010a50:	f000 f8ed 	bl	8010c2e <memset>
 8010a54:	4620      	mov	r0, r4
 8010a56:	bd70      	pop	{r4, r5, r6, pc}

08010a58 <__sfp_lock_acquire>:
 8010a58:	4801      	ldr	r0, [pc, #4]	; (8010a60 <__sfp_lock_acquire+0x8>)
 8010a5a:	f000 b8d8 	b.w	8010c0e <__retarget_lock_acquire_recursive>
 8010a5e:	bf00      	nop
 8010a60:	200026b5 	.word	0x200026b5

08010a64 <__sfp_lock_release>:
 8010a64:	4801      	ldr	r0, [pc, #4]	; (8010a6c <__sfp_lock_release+0x8>)
 8010a66:	f000 b8d3 	b.w	8010c10 <__retarget_lock_release_recursive>
 8010a6a:	bf00      	nop
 8010a6c:	200026b5 	.word	0x200026b5

08010a70 <__sinit_lock_acquire>:
 8010a70:	4801      	ldr	r0, [pc, #4]	; (8010a78 <__sinit_lock_acquire+0x8>)
 8010a72:	f000 b8cc 	b.w	8010c0e <__retarget_lock_acquire_recursive>
 8010a76:	bf00      	nop
 8010a78:	200026b6 	.word	0x200026b6

08010a7c <__sinit_lock_release>:
 8010a7c:	4801      	ldr	r0, [pc, #4]	; (8010a84 <__sinit_lock_release+0x8>)
 8010a7e:	f000 b8c7 	b.w	8010c10 <__retarget_lock_release_recursive>
 8010a82:	bf00      	nop
 8010a84:	200026b6 	.word	0x200026b6

08010a88 <__sinit>:
 8010a88:	b510      	push	{r4, lr}
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	f7ff fff0 	bl	8010a70 <__sinit_lock_acquire>
 8010a90:	69a3      	ldr	r3, [r4, #24]
 8010a92:	b11b      	cbz	r3, 8010a9c <__sinit+0x14>
 8010a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a98:	f7ff bff0 	b.w	8010a7c <__sinit_lock_release>
 8010a9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010aa0:	6523      	str	r3, [r4, #80]	; 0x50
 8010aa2:	4b13      	ldr	r3, [pc, #76]	; (8010af0 <__sinit+0x68>)
 8010aa4:	4a13      	ldr	r2, [pc, #76]	; (8010af4 <__sinit+0x6c>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8010aaa:	42a3      	cmp	r3, r4
 8010aac:	bf04      	itt	eq
 8010aae:	2301      	moveq	r3, #1
 8010ab0:	61a3      	streq	r3, [r4, #24]
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f000 f820 	bl	8010af8 <__sfp>
 8010ab8:	6060      	str	r0, [r4, #4]
 8010aba:	4620      	mov	r0, r4
 8010abc:	f000 f81c 	bl	8010af8 <__sfp>
 8010ac0:	60a0      	str	r0, [r4, #8]
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f000 f818 	bl	8010af8 <__sfp>
 8010ac8:	2200      	movs	r2, #0
 8010aca:	60e0      	str	r0, [r4, #12]
 8010acc:	2104      	movs	r1, #4
 8010ace:	6860      	ldr	r0, [r4, #4]
 8010ad0:	f7ff ff82 	bl	80109d8 <std>
 8010ad4:	68a0      	ldr	r0, [r4, #8]
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	2109      	movs	r1, #9
 8010ada:	f7ff ff7d 	bl	80109d8 <std>
 8010ade:	68e0      	ldr	r0, [r4, #12]
 8010ae0:	2202      	movs	r2, #2
 8010ae2:	2112      	movs	r1, #18
 8010ae4:	f7ff ff78 	bl	80109d8 <std>
 8010ae8:	2301      	movs	r3, #1
 8010aea:	61a3      	str	r3, [r4, #24]
 8010aec:	e7d2      	b.n	8010a94 <__sinit+0xc>
 8010aee:	bf00      	nop
 8010af0:	080156f8 	.word	0x080156f8
 8010af4:	08010a21 	.word	0x08010a21

08010af8 <__sfp>:
 8010af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010afa:	4607      	mov	r7, r0
 8010afc:	f7ff ffac 	bl	8010a58 <__sfp_lock_acquire>
 8010b00:	4b1e      	ldr	r3, [pc, #120]	; (8010b7c <__sfp+0x84>)
 8010b02:	681e      	ldr	r6, [r3, #0]
 8010b04:	69b3      	ldr	r3, [r6, #24]
 8010b06:	b913      	cbnz	r3, 8010b0e <__sfp+0x16>
 8010b08:	4630      	mov	r0, r6
 8010b0a:	f7ff ffbd 	bl	8010a88 <__sinit>
 8010b0e:	3648      	adds	r6, #72	; 0x48
 8010b10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b14:	3b01      	subs	r3, #1
 8010b16:	d503      	bpl.n	8010b20 <__sfp+0x28>
 8010b18:	6833      	ldr	r3, [r6, #0]
 8010b1a:	b30b      	cbz	r3, 8010b60 <__sfp+0x68>
 8010b1c:	6836      	ldr	r6, [r6, #0]
 8010b1e:	e7f7      	b.n	8010b10 <__sfp+0x18>
 8010b20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b24:	b9d5      	cbnz	r5, 8010b5c <__sfp+0x64>
 8010b26:	4b16      	ldr	r3, [pc, #88]	; (8010b80 <__sfp+0x88>)
 8010b28:	60e3      	str	r3, [r4, #12]
 8010b2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b2e:	6665      	str	r5, [r4, #100]	; 0x64
 8010b30:	f000 f86c 	bl	8010c0c <__retarget_lock_init_recursive>
 8010b34:	f7ff ff96 	bl	8010a64 <__sfp_lock_release>
 8010b38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b40:	6025      	str	r5, [r4, #0]
 8010b42:	61a5      	str	r5, [r4, #24]
 8010b44:	2208      	movs	r2, #8
 8010b46:	4629      	mov	r1, r5
 8010b48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010b4c:	f000 f86f 	bl	8010c2e <memset>
 8010b50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010b54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010b58:	4620      	mov	r0, r4
 8010b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b5c:	3468      	adds	r4, #104	; 0x68
 8010b5e:	e7d9      	b.n	8010b14 <__sfp+0x1c>
 8010b60:	2104      	movs	r1, #4
 8010b62:	4638      	mov	r0, r7
 8010b64:	f7ff ff62 	bl	8010a2c <__sfmoreglue>
 8010b68:	4604      	mov	r4, r0
 8010b6a:	6030      	str	r0, [r6, #0]
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	d1d5      	bne.n	8010b1c <__sfp+0x24>
 8010b70:	f7ff ff78 	bl	8010a64 <__sfp_lock_release>
 8010b74:	230c      	movs	r3, #12
 8010b76:	603b      	str	r3, [r7, #0]
 8010b78:	e7ee      	b.n	8010b58 <__sfp+0x60>
 8010b7a:	bf00      	nop
 8010b7c:	080156f8 	.word	0x080156f8
 8010b80:	ffff0001 	.word	0xffff0001

08010b84 <_fwalk_reent>:
 8010b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b88:	4606      	mov	r6, r0
 8010b8a:	4688      	mov	r8, r1
 8010b8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010b90:	2700      	movs	r7, #0
 8010b92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010b96:	f1b9 0901 	subs.w	r9, r9, #1
 8010b9a:	d505      	bpl.n	8010ba8 <_fwalk_reent+0x24>
 8010b9c:	6824      	ldr	r4, [r4, #0]
 8010b9e:	2c00      	cmp	r4, #0
 8010ba0:	d1f7      	bne.n	8010b92 <_fwalk_reent+0xe>
 8010ba2:	4638      	mov	r0, r7
 8010ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ba8:	89ab      	ldrh	r3, [r5, #12]
 8010baa:	2b01      	cmp	r3, #1
 8010bac:	d907      	bls.n	8010bbe <_fwalk_reent+0x3a>
 8010bae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	d003      	beq.n	8010bbe <_fwalk_reent+0x3a>
 8010bb6:	4629      	mov	r1, r5
 8010bb8:	4630      	mov	r0, r6
 8010bba:	47c0      	blx	r8
 8010bbc:	4307      	orrs	r7, r0
 8010bbe:	3568      	adds	r5, #104	; 0x68
 8010bc0:	e7e9      	b.n	8010b96 <_fwalk_reent+0x12>
	...

08010bc4 <__libc_init_array>:
 8010bc4:	b570      	push	{r4, r5, r6, lr}
 8010bc6:	4d0d      	ldr	r5, [pc, #52]	; (8010bfc <__libc_init_array+0x38>)
 8010bc8:	4c0d      	ldr	r4, [pc, #52]	; (8010c00 <__libc_init_array+0x3c>)
 8010bca:	1b64      	subs	r4, r4, r5
 8010bcc:	10a4      	asrs	r4, r4, #2
 8010bce:	2600      	movs	r6, #0
 8010bd0:	42a6      	cmp	r6, r4
 8010bd2:	d109      	bne.n	8010be8 <__libc_init_array+0x24>
 8010bd4:	4d0b      	ldr	r5, [pc, #44]	; (8010c04 <__libc_init_array+0x40>)
 8010bd6:	4c0c      	ldr	r4, [pc, #48]	; (8010c08 <__libc_init_array+0x44>)
 8010bd8:	f004 fc3c 	bl	8015454 <_init>
 8010bdc:	1b64      	subs	r4, r4, r5
 8010bde:	10a4      	asrs	r4, r4, #2
 8010be0:	2600      	movs	r6, #0
 8010be2:	42a6      	cmp	r6, r4
 8010be4:	d105      	bne.n	8010bf2 <__libc_init_array+0x2e>
 8010be6:	bd70      	pop	{r4, r5, r6, pc}
 8010be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bec:	4798      	blx	r3
 8010bee:	3601      	adds	r6, #1
 8010bf0:	e7ee      	b.n	8010bd0 <__libc_init_array+0xc>
 8010bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bf6:	4798      	blx	r3
 8010bf8:	3601      	adds	r6, #1
 8010bfa:	e7f2      	b.n	8010be2 <__libc_init_array+0x1e>
 8010bfc:	08015b3c 	.word	0x08015b3c
 8010c00:	08015b3c 	.word	0x08015b3c
 8010c04:	08015b3c 	.word	0x08015b3c
 8010c08:	08015b40 	.word	0x08015b40

08010c0c <__retarget_lock_init_recursive>:
 8010c0c:	4770      	bx	lr

08010c0e <__retarget_lock_acquire_recursive>:
 8010c0e:	4770      	bx	lr

08010c10 <__retarget_lock_release_recursive>:
 8010c10:	4770      	bx	lr

08010c12 <memcpy>:
 8010c12:	440a      	add	r2, r1
 8010c14:	4291      	cmp	r1, r2
 8010c16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010c1a:	d100      	bne.n	8010c1e <memcpy+0xc>
 8010c1c:	4770      	bx	lr
 8010c1e:	b510      	push	{r4, lr}
 8010c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c28:	4291      	cmp	r1, r2
 8010c2a:	d1f9      	bne.n	8010c20 <memcpy+0xe>
 8010c2c:	bd10      	pop	{r4, pc}

08010c2e <memset>:
 8010c2e:	4402      	add	r2, r0
 8010c30:	4603      	mov	r3, r0
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d100      	bne.n	8010c38 <memset+0xa>
 8010c36:	4770      	bx	lr
 8010c38:	f803 1b01 	strb.w	r1, [r3], #1
 8010c3c:	e7f9      	b.n	8010c32 <memset+0x4>
	...

08010c40 <sbrk_aligned>:
 8010c40:	b570      	push	{r4, r5, r6, lr}
 8010c42:	4e0e      	ldr	r6, [pc, #56]	; (8010c7c <sbrk_aligned+0x3c>)
 8010c44:	460c      	mov	r4, r1
 8010c46:	6831      	ldr	r1, [r6, #0]
 8010c48:	4605      	mov	r5, r0
 8010c4a:	b911      	cbnz	r1, 8010c52 <sbrk_aligned+0x12>
 8010c4c:	f000 ff70 	bl	8011b30 <_sbrk_r>
 8010c50:	6030      	str	r0, [r6, #0]
 8010c52:	4621      	mov	r1, r4
 8010c54:	4628      	mov	r0, r5
 8010c56:	f000 ff6b 	bl	8011b30 <_sbrk_r>
 8010c5a:	1c43      	adds	r3, r0, #1
 8010c5c:	d00a      	beq.n	8010c74 <sbrk_aligned+0x34>
 8010c5e:	1cc4      	adds	r4, r0, #3
 8010c60:	f024 0403 	bic.w	r4, r4, #3
 8010c64:	42a0      	cmp	r0, r4
 8010c66:	d007      	beq.n	8010c78 <sbrk_aligned+0x38>
 8010c68:	1a21      	subs	r1, r4, r0
 8010c6a:	4628      	mov	r0, r5
 8010c6c:	f000 ff60 	bl	8011b30 <_sbrk_r>
 8010c70:	3001      	adds	r0, #1
 8010c72:	d101      	bne.n	8010c78 <sbrk_aligned+0x38>
 8010c74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010c78:	4620      	mov	r0, r4
 8010c7a:	bd70      	pop	{r4, r5, r6, pc}
 8010c7c:	200026bc 	.word	0x200026bc

08010c80 <_malloc_r>:
 8010c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c84:	1ccd      	adds	r5, r1, #3
 8010c86:	f025 0503 	bic.w	r5, r5, #3
 8010c8a:	3508      	adds	r5, #8
 8010c8c:	2d0c      	cmp	r5, #12
 8010c8e:	bf38      	it	cc
 8010c90:	250c      	movcc	r5, #12
 8010c92:	2d00      	cmp	r5, #0
 8010c94:	4607      	mov	r7, r0
 8010c96:	db01      	blt.n	8010c9c <_malloc_r+0x1c>
 8010c98:	42a9      	cmp	r1, r5
 8010c9a:	d905      	bls.n	8010ca8 <_malloc_r+0x28>
 8010c9c:	230c      	movs	r3, #12
 8010c9e:	603b      	str	r3, [r7, #0]
 8010ca0:	2600      	movs	r6, #0
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ca8:	4e2e      	ldr	r6, [pc, #184]	; (8010d64 <_malloc_r+0xe4>)
 8010caa:	f003 f99d 	bl	8013fe8 <__malloc_lock>
 8010cae:	6833      	ldr	r3, [r6, #0]
 8010cb0:	461c      	mov	r4, r3
 8010cb2:	bb34      	cbnz	r4, 8010d02 <_malloc_r+0x82>
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	4638      	mov	r0, r7
 8010cb8:	f7ff ffc2 	bl	8010c40 <sbrk_aligned>
 8010cbc:	1c43      	adds	r3, r0, #1
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	d14d      	bne.n	8010d5e <_malloc_r+0xde>
 8010cc2:	6834      	ldr	r4, [r6, #0]
 8010cc4:	4626      	mov	r6, r4
 8010cc6:	2e00      	cmp	r6, #0
 8010cc8:	d140      	bne.n	8010d4c <_malloc_r+0xcc>
 8010cca:	6823      	ldr	r3, [r4, #0]
 8010ccc:	4631      	mov	r1, r6
 8010cce:	4638      	mov	r0, r7
 8010cd0:	eb04 0803 	add.w	r8, r4, r3
 8010cd4:	f000 ff2c 	bl	8011b30 <_sbrk_r>
 8010cd8:	4580      	cmp	r8, r0
 8010cda:	d13a      	bne.n	8010d52 <_malloc_r+0xd2>
 8010cdc:	6821      	ldr	r1, [r4, #0]
 8010cde:	3503      	adds	r5, #3
 8010ce0:	1a6d      	subs	r5, r5, r1
 8010ce2:	f025 0503 	bic.w	r5, r5, #3
 8010ce6:	3508      	adds	r5, #8
 8010ce8:	2d0c      	cmp	r5, #12
 8010cea:	bf38      	it	cc
 8010cec:	250c      	movcc	r5, #12
 8010cee:	4629      	mov	r1, r5
 8010cf0:	4638      	mov	r0, r7
 8010cf2:	f7ff ffa5 	bl	8010c40 <sbrk_aligned>
 8010cf6:	3001      	adds	r0, #1
 8010cf8:	d02b      	beq.n	8010d52 <_malloc_r+0xd2>
 8010cfa:	6823      	ldr	r3, [r4, #0]
 8010cfc:	442b      	add	r3, r5
 8010cfe:	6023      	str	r3, [r4, #0]
 8010d00:	e00e      	b.n	8010d20 <_malloc_r+0xa0>
 8010d02:	6822      	ldr	r2, [r4, #0]
 8010d04:	1b52      	subs	r2, r2, r5
 8010d06:	d41e      	bmi.n	8010d46 <_malloc_r+0xc6>
 8010d08:	2a0b      	cmp	r2, #11
 8010d0a:	d916      	bls.n	8010d3a <_malloc_r+0xba>
 8010d0c:	1961      	adds	r1, r4, r5
 8010d0e:	42a3      	cmp	r3, r4
 8010d10:	6025      	str	r5, [r4, #0]
 8010d12:	bf18      	it	ne
 8010d14:	6059      	strne	r1, [r3, #4]
 8010d16:	6863      	ldr	r3, [r4, #4]
 8010d18:	bf08      	it	eq
 8010d1a:	6031      	streq	r1, [r6, #0]
 8010d1c:	5162      	str	r2, [r4, r5]
 8010d1e:	604b      	str	r3, [r1, #4]
 8010d20:	4638      	mov	r0, r7
 8010d22:	f104 060b 	add.w	r6, r4, #11
 8010d26:	f003 f965 	bl	8013ff4 <__malloc_unlock>
 8010d2a:	f026 0607 	bic.w	r6, r6, #7
 8010d2e:	1d23      	adds	r3, r4, #4
 8010d30:	1af2      	subs	r2, r6, r3
 8010d32:	d0b6      	beq.n	8010ca2 <_malloc_r+0x22>
 8010d34:	1b9b      	subs	r3, r3, r6
 8010d36:	50a3      	str	r3, [r4, r2]
 8010d38:	e7b3      	b.n	8010ca2 <_malloc_r+0x22>
 8010d3a:	6862      	ldr	r2, [r4, #4]
 8010d3c:	42a3      	cmp	r3, r4
 8010d3e:	bf0c      	ite	eq
 8010d40:	6032      	streq	r2, [r6, #0]
 8010d42:	605a      	strne	r2, [r3, #4]
 8010d44:	e7ec      	b.n	8010d20 <_malloc_r+0xa0>
 8010d46:	4623      	mov	r3, r4
 8010d48:	6864      	ldr	r4, [r4, #4]
 8010d4a:	e7b2      	b.n	8010cb2 <_malloc_r+0x32>
 8010d4c:	4634      	mov	r4, r6
 8010d4e:	6876      	ldr	r6, [r6, #4]
 8010d50:	e7b9      	b.n	8010cc6 <_malloc_r+0x46>
 8010d52:	230c      	movs	r3, #12
 8010d54:	603b      	str	r3, [r7, #0]
 8010d56:	4638      	mov	r0, r7
 8010d58:	f003 f94c 	bl	8013ff4 <__malloc_unlock>
 8010d5c:	e7a1      	b.n	8010ca2 <_malloc_r+0x22>
 8010d5e:	6025      	str	r5, [r4, #0]
 8010d60:	e7de      	b.n	8010d20 <_malloc_r+0xa0>
 8010d62:	bf00      	nop
 8010d64:	200026b8 	.word	0x200026b8

08010d68 <__cvt>:
 8010d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d6c:	ec55 4b10 	vmov	r4, r5, d0
 8010d70:	2d00      	cmp	r5, #0
 8010d72:	460e      	mov	r6, r1
 8010d74:	4619      	mov	r1, r3
 8010d76:	462b      	mov	r3, r5
 8010d78:	bfbb      	ittet	lt
 8010d7a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010d7e:	461d      	movlt	r5, r3
 8010d80:	2300      	movge	r3, #0
 8010d82:	232d      	movlt	r3, #45	; 0x2d
 8010d84:	700b      	strb	r3, [r1, #0]
 8010d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010d8c:	4691      	mov	r9, r2
 8010d8e:	f023 0820 	bic.w	r8, r3, #32
 8010d92:	bfbc      	itt	lt
 8010d94:	4622      	movlt	r2, r4
 8010d96:	4614      	movlt	r4, r2
 8010d98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d9c:	d005      	beq.n	8010daa <__cvt+0x42>
 8010d9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010da2:	d100      	bne.n	8010da6 <__cvt+0x3e>
 8010da4:	3601      	adds	r6, #1
 8010da6:	2102      	movs	r1, #2
 8010da8:	e000      	b.n	8010dac <__cvt+0x44>
 8010daa:	2103      	movs	r1, #3
 8010dac:	ab03      	add	r3, sp, #12
 8010dae:	9301      	str	r3, [sp, #4]
 8010db0:	ab02      	add	r3, sp, #8
 8010db2:	9300      	str	r3, [sp, #0]
 8010db4:	ec45 4b10 	vmov	d0, r4, r5
 8010db8:	4653      	mov	r3, sl
 8010dba:	4632      	mov	r2, r6
 8010dbc:	f001 fec4 	bl	8012b48 <_dtoa_r>
 8010dc0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010dc4:	4607      	mov	r7, r0
 8010dc6:	d102      	bne.n	8010dce <__cvt+0x66>
 8010dc8:	f019 0f01 	tst.w	r9, #1
 8010dcc:	d022      	beq.n	8010e14 <__cvt+0xac>
 8010dce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010dd2:	eb07 0906 	add.w	r9, r7, r6
 8010dd6:	d110      	bne.n	8010dfa <__cvt+0x92>
 8010dd8:	783b      	ldrb	r3, [r7, #0]
 8010dda:	2b30      	cmp	r3, #48	; 0x30
 8010ddc:	d10a      	bne.n	8010df4 <__cvt+0x8c>
 8010dde:	2200      	movs	r2, #0
 8010de0:	2300      	movs	r3, #0
 8010de2:	4620      	mov	r0, r4
 8010de4:	4629      	mov	r1, r5
 8010de6:	f7ef fe87 	bl	8000af8 <__aeabi_dcmpeq>
 8010dea:	b918      	cbnz	r0, 8010df4 <__cvt+0x8c>
 8010dec:	f1c6 0601 	rsb	r6, r6, #1
 8010df0:	f8ca 6000 	str.w	r6, [sl]
 8010df4:	f8da 3000 	ldr.w	r3, [sl]
 8010df8:	4499      	add	r9, r3
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	4620      	mov	r0, r4
 8010e00:	4629      	mov	r1, r5
 8010e02:	f7ef fe79 	bl	8000af8 <__aeabi_dcmpeq>
 8010e06:	b108      	cbz	r0, 8010e0c <__cvt+0xa4>
 8010e08:	f8cd 900c 	str.w	r9, [sp, #12]
 8010e0c:	2230      	movs	r2, #48	; 0x30
 8010e0e:	9b03      	ldr	r3, [sp, #12]
 8010e10:	454b      	cmp	r3, r9
 8010e12:	d307      	bcc.n	8010e24 <__cvt+0xbc>
 8010e14:	9b03      	ldr	r3, [sp, #12]
 8010e16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e18:	1bdb      	subs	r3, r3, r7
 8010e1a:	4638      	mov	r0, r7
 8010e1c:	6013      	str	r3, [r2, #0]
 8010e1e:	b004      	add	sp, #16
 8010e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e24:	1c59      	adds	r1, r3, #1
 8010e26:	9103      	str	r1, [sp, #12]
 8010e28:	701a      	strb	r2, [r3, #0]
 8010e2a:	e7f0      	b.n	8010e0e <__cvt+0xa6>

08010e2c <__exponent>:
 8010e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e2e:	4603      	mov	r3, r0
 8010e30:	2900      	cmp	r1, #0
 8010e32:	bfb8      	it	lt
 8010e34:	4249      	neglt	r1, r1
 8010e36:	f803 2b02 	strb.w	r2, [r3], #2
 8010e3a:	bfb4      	ite	lt
 8010e3c:	222d      	movlt	r2, #45	; 0x2d
 8010e3e:	222b      	movge	r2, #43	; 0x2b
 8010e40:	2909      	cmp	r1, #9
 8010e42:	7042      	strb	r2, [r0, #1]
 8010e44:	dd2a      	ble.n	8010e9c <__exponent+0x70>
 8010e46:	f10d 0407 	add.w	r4, sp, #7
 8010e4a:	46a4      	mov	ip, r4
 8010e4c:	270a      	movs	r7, #10
 8010e4e:	46a6      	mov	lr, r4
 8010e50:	460a      	mov	r2, r1
 8010e52:	fb91 f6f7 	sdiv	r6, r1, r7
 8010e56:	fb07 1516 	mls	r5, r7, r6, r1
 8010e5a:	3530      	adds	r5, #48	; 0x30
 8010e5c:	2a63      	cmp	r2, #99	; 0x63
 8010e5e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010e62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010e66:	4631      	mov	r1, r6
 8010e68:	dcf1      	bgt.n	8010e4e <__exponent+0x22>
 8010e6a:	3130      	adds	r1, #48	; 0x30
 8010e6c:	f1ae 0502 	sub.w	r5, lr, #2
 8010e70:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010e74:	1c44      	adds	r4, r0, #1
 8010e76:	4629      	mov	r1, r5
 8010e78:	4561      	cmp	r1, ip
 8010e7a:	d30a      	bcc.n	8010e92 <__exponent+0x66>
 8010e7c:	f10d 0209 	add.w	r2, sp, #9
 8010e80:	eba2 020e 	sub.w	r2, r2, lr
 8010e84:	4565      	cmp	r5, ip
 8010e86:	bf88      	it	hi
 8010e88:	2200      	movhi	r2, #0
 8010e8a:	4413      	add	r3, r2
 8010e8c:	1a18      	subs	r0, r3, r0
 8010e8e:	b003      	add	sp, #12
 8010e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e96:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010e9a:	e7ed      	b.n	8010e78 <__exponent+0x4c>
 8010e9c:	2330      	movs	r3, #48	; 0x30
 8010e9e:	3130      	adds	r1, #48	; 0x30
 8010ea0:	7083      	strb	r3, [r0, #2]
 8010ea2:	70c1      	strb	r1, [r0, #3]
 8010ea4:	1d03      	adds	r3, r0, #4
 8010ea6:	e7f1      	b.n	8010e8c <__exponent+0x60>

08010ea8 <_printf_float>:
 8010ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eac:	ed2d 8b02 	vpush	{d8}
 8010eb0:	b08d      	sub	sp, #52	; 0x34
 8010eb2:	460c      	mov	r4, r1
 8010eb4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010eb8:	4616      	mov	r6, r2
 8010eba:	461f      	mov	r7, r3
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	f003 f863 	bl	8013f88 <_localeconv_r>
 8010ec2:	f8d0 a000 	ldr.w	sl, [r0]
 8010ec6:	4650      	mov	r0, sl
 8010ec8:	f7ef f99a 	bl	8000200 <strlen>
 8010ecc:	2300      	movs	r3, #0
 8010ece:	930a      	str	r3, [sp, #40]	; 0x28
 8010ed0:	6823      	ldr	r3, [r4, #0]
 8010ed2:	9305      	str	r3, [sp, #20]
 8010ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8010ed8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010edc:	3307      	adds	r3, #7
 8010ede:	f023 0307 	bic.w	r3, r3, #7
 8010ee2:	f103 0208 	add.w	r2, r3, #8
 8010ee6:	f8c8 2000 	str.w	r2, [r8]
 8010eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010ef2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010ef6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010efa:	9307      	str	r3, [sp, #28]
 8010efc:	f8cd 8018 	str.w	r8, [sp, #24]
 8010f00:	ee08 0a10 	vmov	s16, r0
 8010f04:	4b9f      	ldr	r3, [pc, #636]	; (8011184 <_printf_float+0x2dc>)
 8010f06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f0e:	f7ef fe25 	bl	8000b5c <__aeabi_dcmpun>
 8010f12:	bb88      	cbnz	r0, 8010f78 <_printf_float+0xd0>
 8010f14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f18:	4b9a      	ldr	r3, [pc, #616]	; (8011184 <_printf_float+0x2dc>)
 8010f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f1e:	f7ef fdff 	bl	8000b20 <__aeabi_dcmple>
 8010f22:	bb48      	cbnz	r0, 8010f78 <_printf_float+0xd0>
 8010f24:	2200      	movs	r2, #0
 8010f26:	2300      	movs	r3, #0
 8010f28:	4640      	mov	r0, r8
 8010f2a:	4649      	mov	r1, r9
 8010f2c:	f7ef fdee 	bl	8000b0c <__aeabi_dcmplt>
 8010f30:	b110      	cbz	r0, 8010f38 <_printf_float+0x90>
 8010f32:	232d      	movs	r3, #45	; 0x2d
 8010f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f38:	4b93      	ldr	r3, [pc, #588]	; (8011188 <_printf_float+0x2e0>)
 8010f3a:	4894      	ldr	r0, [pc, #592]	; (801118c <_printf_float+0x2e4>)
 8010f3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010f40:	bf94      	ite	ls
 8010f42:	4698      	movls	r8, r3
 8010f44:	4680      	movhi	r8, r0
 8010f46:	2303      	movs	r3, #3
 8010f48:	6123      	str	r3, [r4, #16]
 8010f4a:	9b05      	ldr	r3, [sp, #20]
 8010f4c:	f023 0204 	bic.w	r2, r3, #4
 8010f50:	6022      	str	r2, [r4, #0]
 8010f52:	f04f 0900 	mov.w	r9, #0
 8010f56:	9700      	str	r7, [sp, #0]
 8010f58:	4633      	mov	r3, r6
 8010f5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8010f5c:	4621      	mov	r1, r4
 8010f5e:	4628      	mov	r0, r5
 8010f60:	f000 f9d8 	bl	8011314 <_printf_common>
 8010f64:	3001      	adds	r0, #1
 8010f66:	f040 8090 	bne.w	801108a <_printf_float+0x1e2>
 8010f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f6e:	b00d      	add	sp, #52	; 0x34
 8010f70:	ecbd 8b02 	vpop	{d8}
 8010f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f78:	4642      	mov	r2, r8
 8010f7a:	464b      	mov	r3, r9
 8010f7c:	4640      	mov	r0, r8
 8010f7e:	4649      	mov	r1, r9
 8010f80:	f7ef fdec 	bl	8000b5c <__aeabi_dcmpun>
 8010f84:	b140      	cbz	r0, 8010f98 <_printf_float+0xf0>
 8010f86:	464b      	mov	r3, r9
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	bfbc      	itt	lt
 8010f8c:	232d      	movlt	r3, #45	; 0x2d
 8010f8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010f92:	487f      	ldr	r0, [pc, #508]	; (8011190 <_printf_float+0x2e8>)
 8010f94:	4b7f      	ldr	r3, [pc, #508]	; (8011194 <_printf_float+0x2ec>)
 8010f96:	e7d1      	b.n	8010f3c <_printf_float+0x94>
 8010f98:	6863      	ldr	r3, [r4, #4]
 8010f9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010f9e:	9206      	str	r2, [sp, #24]
 8010fa0:	1c5a      	adds	r2, r3, #1
 8010fa2:	d13f      	bne.n	8011024 <_printf_float+0x17c>
 8010fa4:	2306      	movs	r3, #6
 8010fa6:	6063      	str	r3, [r4, #4]
 8010fa8:	9b05      	ldr	r3, [sp, #20]
 8010faa:	6861      	ldr	r1, [r4, #4]
 8010fac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	9303      	str	r3, [sp, #12]
 8010fb4:	ab0a      	add	r3, sp, #40	; 0x28
 8010fb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010fba:	ab09      	add	r3, sp, #36	; 0x24
 8010fbc:	ec49 8b10 	vmov	d0, r8, r9
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	6022      	str	r2, [r4, #0]
 8010fc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010fc8:	4628      	mov	r0, r5
 8010fca:	f7ff fecd 	bl	8010d68 <__cvt>
 8010fce:	9b06      	ldr	r3, [sp, #24]
 8010fd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010fd2:	2b47      	cmp	r3, #71	; 0x47
 8010fd4:	4680      	mov	r8, r0
 8010fd6:	d108      	bne.n	8010fea <_printf_float+0x142>
 8010fd8:	1cc8      	adds	r0, r1, #3
 8010fda:	db02      	blt.n	8010fe2 <_printf_float+0x13a>
 8010fdc:	6863      	ldr	r3, [r4, #4]
 8010fde:	4299      	cmp	r1, r3
 8010fe0:	dd41      	ble.n	8011066 <_printf_float+0x1be>
 8010fe2:	f1ab 0b02 	sub.w	fp, fp, #2
 8010fe6:	fa5f fb8b 	uxtb.w	fp, fp
 8010fea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010fee:	d820      	bhi.n	8011032 <_printf_float+0x18a>
 8010ff0:	3901      	subs	r1, #1
 8010ff2:	465a      	mov	r2, fp
 8010ff4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010ff8:	9109      	str	r1, [sp, #36]	; 0x24
 8010ffa:	f7ff ff17 	bl	8010e2c <__exponent>
 8010ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011000:	1813      	adds	r3, r2, r0
 8011002:	2a01      	cmp	r2, #1
 8011004:	4681      	mov	r9, r0
 8011006:	6123      	str	r3, [r4, #16]
 8011008:	dc02      	bgt.n	8011010 <_printf_float+0x168>
 801100a:	6822      	ldr	r2, [r4, #0]
 801100c:	07d2      	lsls	r2, r2, #31
 801100e:	d501      	bpl.n	8011014 <_printf_float+0x16c>
 8011010:	3301      	adds	r3, #1
 8011012:	6123      	str	r3, [r4, #16]
 8011014:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011018:	2b00      	cmp	r3, #0
 801101a:	d09c      	beq.n	8010f56 <_printf_float+0xae>
 801101c:	232d      	movs	r3, #45	; 0x2d
 801101e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011022:	e798      	b.n	8010f56 <_printf_float+0xae>
 8011024:	9a06      	ldr	r2, [sp, #24]
 8011026:	2a47      	cmp	r2, #71	; 0x47
 8011028:	d1be      	bne.n	8010fa8 <_printf_float+0x100>
 801102a:	2b00      	cmp	r3, #0
 801102c:	d1bc      	bne.n	8010fa8 <_printf_float+0x100>
 801102e:	2301      	movs	r3, #1
 8011030:	e7b9      	b.n	8010fa6 <_printf_float+0xfe>
 8011032:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011036:	d118      	bne.n	801106a <_printf_float+0x1c2>
 8011038:	2900      	cmp	r1, #0
 801103a:	6863      	ldr	r3, [r4, #4]
 801103c:	dd0b      	ble.n	8011056 <_printf_float+0x1ae>
 801103e:	6121      	str	r1, [r4, #16]
 8011040:	b913      	cbnz	r3, 8011048 <_printf_float+0x1a0>
 8011042:	6822      	ldr	r2, [r4, #0]
 8011044:	07d0      	lsls	r0, r2, #31
 8011046:	d502      	bpl.n	801104e <_printf_float+0x1a6>
 8011048:	3301      	adds	r3, #1
 801104a:	440b      	add	r3, r1
 801104c:	6123      	str	r3, [r4, #16]
 801104e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011050:	f04f 0900 	mov.w	r9, #0
 8011054:	e7de      	b.n	8011014 <_printf_float+0x16c>
 8011056:	b913      	cbnz	r3, 801105e <_printf_float+0x1b6>
 8011058:	6822      	ldr	r2, [r4, #0]
 801105a:	07d2      	lsls	r2, r2, #31
 801105c:	d501      	bpl.n	8011062 <_printf_float+0x1ba>
 801105e:	3302      	adds	r3, #2
 8011060:	e7f4      	b.n	801104c <_printf_float+0x1a4>
 8011062:	2301      	movs	r3, #1
 8011064:	e7f2      	b.n	801104c <_printf_float+0x1a4>
 8011066:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801106a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801106c:	4299      	cmp	r1, r3
 801106e:	db05      	blt.n	801107c <_printf_float+0x1d4>
 8011070:	6823      	ldr	r3, [r4, #0]
 8011072:	6121      	str	r1, [r4, #16]
 8011074:	07d8      	lsls	r0, r3, #31
 8011076:	d5ea      	bpl.n	801104e <_printf_float+0x1a6>
 8011078:	1c4b      	adds	r3, r1, #1
 801107a:	e7e7      	b.n	801104c <_printf_float+0x1a4>
 801107c:	2900      	cmp	r1, #0
 801107e:	bfd4      	ite	le
 8011080:	f1c1 0202 	rsble	r2, r1, #2
 8011084:	2201      	movgt	r2, #1
 8011086:	4413      	add	r3, r2
 8011088:	e7e0      	b.n	801104c <_printf_float+0x1a4>
 801108a:	6823      	ldr	r3, [r4, #0]
 801108c:	055a      	lsls	r2, r3, #21
 801108e:	d407      	bmi.n	80110a0 <_printf_float+0x1f8>
 8011090:	6923      	ldr	r3, [r4, #16]
 8011092:	4642      	mov	r2, r8
 8011094:	4631      	mov	r1, r6
 8011096:	4628      	mov	r0, r5
 8011098:	47b8      	blx	r7
 801109a:	3001      	adds	r0, #1
 801109c:	d12c      	bne.n	80110f8 <_printf_float+0x250>
 801109e:	e764      	b.n	8010f6a <_printf_float+0xc2>
 80110a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80110a4:	f240 80e0 	bls.w	8011268 <_printf_float+0x3c0>
 80110a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80110ac:	2200      	movs	r2, #0
 80110ae:	2300      	movs	r3, #0
 80110b0:	f7ef fd22 	bl	8000af8 <__aeabi_dcmpeq>
 80110b4:	2800      	cmp	r0, #0
 80110b6:	d034      	beq.n	8011122 <_printf_float+0x27a>
 80110b8:	4a37      	ldr	r2, [pc, #220]	; (8011198 <_printf_float+0x2f0>)
 80110ba:	2301      	movs	r3, #1
 80110bc:	4631      	mov	r1, r6
 80110be:	4628      	mov	r0, r5
 80110c0:	47b8      	blx	r7
 80110c2:	3001      	adds	r0, #1
 80110c4:	f43f af51 	beq.w	8010f6a <_printf_float+0xc2>
 80110c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110cc:	429a      	cmp	r2, r3
 80110ce:	db02      	blt.n	80110d6 <_printf_float+0x22e>
 80110d0:	6823      	ldr	r3, [r4, #0]
 80110d2:	07d8      	lsls	r0, r3, #31
 80110d4:	d510      	bpl.n	80110f8 <_printf_float+0x250>
 80110d6:	ee18 3a10 	vmov	r3, s16
 80110da:	4652      	mov	r2, sl
 80110dc:	4631      	mov	r1, r6
 80110de:	4628      	mov	r0, r5
 80110e0:	47b8      	blx	r7
 80110e2:	3001      	adds	r0, #1
 80110e4:	f43f af41 	beq.w	8010f6a <_printf_float+0xc2>
 80110e8:	f04f 0800 	mov.w	r8, #0
 80110ec:	f104 091a 	add.w	r9, r4, #26
 80110f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110f2:	3b01      	subs	r3, #1
 80110f4:	4543      	cmp	r3, r8
 80110f6:	dc09      	bgt.n	801110c <_printf_float+0x264>
 80110f8:	6823      	ldr	r3, [r4, #0]
 80110fa:	079b      	lsls	r3, r3, #30
 80110fc:	f100 8105 	bmi.w	801130a <_printf_float+0x462>
 8011100:	68e0      	ldr	r0, [r4, #12]
 8011102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011104:	4298      	cmp	r0, r3
 8011106:	bfb8      	it	lt
 8011108:	4618      	movlt	r0, r3
 801110a:	e730      	b.n	8010f6e <_printf_float+0xc6>
 801110c:	2301      	movs	r3, #1
 801110e:	464a      	mov	r2, r9
 8011110:	4631      	mov	r1, r6
 8011112:	4628      	mov	r0, r5
 8011114:	47b8      	blx	r7
 8011116:	3001      	adds	r0, #1
 8011118:	f43f af27 	beq.w	8010f6a <_printf_float+0xc2>
 801111c:	f108 0801 	add.w	r8, r8, #1
 8011120:	e7e6      	b.n	80110f0 <_printf_float+0x248>
 8011122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011124:	2b00      	cmp	r3, #0
 8011126:	dc39      	bgt.n	801119c <_printf_float+0x2f4>
 8011128:	4a1b      	ldr	r2, [pc, #108]	; (8011198 <_printf_float+0x2f0>)
 801112a:	2301      	movs	r3, #1
 801112c:	4631      	mov	r1, r6
 801112e:	4628      	mov	r0, r5
 8011130:	47b8      	blx	r7
 8011132:	3001      	adds	r0, #1
 8011134:	f43f af19 	beq.w	8010f6a <_printf_float+0xc2>
 8011138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801113c:	4313      	orrs	r3, r2
 801113e:	d102      	bne.n	8011146 <_printf_float+0x29e>
 8011140:	6823      	ldr	r3, [r4, #0]
 8011142:	07d9      	lsls	r1, r3, #31
 8011144:	d5d8      	bpl.n	80110f8 <_printf_float+0x250>
 8011146:	ee18 3a10 	vmov	r3, s16
 801114a:	4652      	mov	r2, sl
 801114c:	4631      	mov	r1, r6
 801114e:	4628      	mov	r0, r5
 8011150:	47b8      	blx	r7
 8011152:	3001      	adds	r0, #1
 8011154:	f43f af09 	beq.w	8010f6a <_printf_float+0xc2>
 8011158:	f04f 0900 	mov.w	r9, #0
 801115c:	f104 0a1a 	add.w	sl, r4, #26
 8011160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011162:	425b      	negs	r3, r3
 8011164:	454b      	cmp	r3, r9
 8011166:	dc01      	bgt.n	801116c <_printf_float+0x2c4>
 8011168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801116a:	e792      	b.n	8011092 <_printf_float+0x1ea>
 801116c:	2301      	movs	r3, #1
 801116e:	4652      	mov	r2, sl
 8011170:	4631      	mov	r1, r6
 8011172:	4628      	mov	r0, r5
 8011174:	47b8      	blx	r7
 8011176:	3001      	adds	r0, #1
 8011178:	f43f aef7 	beq.w	8010f6a <_printf_float+0xc2>
 801117c:	f109 0901 	add.w	r9, r9, #1
 8011180:	e7ee      	b.n	8011160 <_printf_float+0x2b8>
 8011182:	bf00      	nop
 8011184:	7fefffff 	.word	0x7fefffff
 8011188:	080156fc 	.word	0x080156fc
 801118c:	08015700 	.word	0x08015700
 8011190:	08015708 	.word	0x08015708
 8011194:	08015704 	.word	0x08015704
 8011198:	0801570c 	.word	0x0801570c
 801119c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801119e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80111a0:	429a      	cmp	r2, r3
 80111a2:	bfa8      	it	ge
 80111a4:	461a      	movge	r2, r3
 80111a6:	2a00      	cmp	r2, #0
 80111a8:	4691      	mov	r9, r2
 80111aa:	dc37      	bgt.n	801121c <_printf_float+0x374>
 80111ac:	f04f 0b00 	mov.w	fp, #0
 80111b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111b4:	f104 021a 	add.w	r2, r4, #26
 80111b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80111ba:	9305      	str	r3, [sp, #20]
 80111bc:	eba3 0309 	sub.w	r3, r3, r9
 80111c0:	455b      	cmp	r3, fp
 80111c2:	dc33      	bgt.n	801122c <_printf_float+0x384>
 80111c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80111c8:	429a      	cmp	r2, r3
 80111ca:	db3b      	blt.n	8011244 <_printf_float+0x39c>
 80111cc:	6823      	ldr	r3, [r4, #0]
 80111ce:	07da      	lsls	r2, r3, #31
 80111d0:	d438      	bmi.n	8011244 <_printf_float+0x39c>
 80111d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111d4:	9a05      	ldr	r2, [sp, #20]
 80111d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111d8:	1a9a      	subs	r2, r3, r2
 80111da:	eba3 0901 	sub.w	r9, r3, r1
 80111de:	4591      	cmp	r9, r2
 80111e0:	bfa8      	it	ge
 80111e2:	4691      	movge	r9, r2
 80111e4:	f1b9 0f00 	cmp.w	r9, #0
 80111e8:	dc35      	bgt.n	8011256 <_printf_float+0x3ae>
 80111ea:	f04f 0800 	mov.w	r8, #0
 80111ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111f2:	f104 0a1a 	add.w	sl, r4, #26
 80111f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80111fa:	1a9b      	subs	r3, r3, r2
 80111fc:	eba3 0309 	sub.w	r3, r3, r9
 8011200:	4543      	cmp	r3, r8
 8011202:	f77f af79 	ble.w	80110f8 <_printf_float+0x250>
 8011206:	2301      	movs	r3, #1
 8011208:	4652      	mov	r2, sl
 801120a:	4631      	mov	r1, r6
 801120c:	4628      	mov	r0, r5
 801120e:	47b8      	blx	r7
 8011210:	3001      	adds	r0, #1
 8011212:	f43f aeaa 	beq.w	8010f6a <_printf_float+0xc2>
 8011216:	f108 0801 	add.w	r8, r8, #1
 801121a:	e7ec      	b.n	80111f6 <_printf_float+0x34e>
 801121c:	4613      	mov	r3, r2
 801121e:	4631      	mov	r1, r6
 8011220:	4642      	mov	r2, r8
 8011222:	4628      	mov	r0, r5
 8011224:	47b8      	blx	r7
 8011226:	3001      	adds	r0, #1
 8011228:	d1c0      	bne.n	80111ac <_printf_float+0x304>
 801122a:	e69e      	b.n	8010f6a <_printf_float+0xc2>
 801122c:	2301      	movs	r3, #1
 801122e:	4631      	mov	r1, r6
 8011230:	4628      	mov	r0, r5
 8011232:	9205      	str	r2, [sp, #20]
 8011234:	47b8      	blx	r7
 8011236:	3001      	adds	r0, #1
 8011238:	f43f ae97 	beq.w	8010f6a <_printf_float+0xc2>
 801123c:	9a05      	ldr	r2, [sp, #20]
 801123e:	f10b 0b01 	add.w	fp, fp, #1
 8011242:	e7b9      	b.n	80111b8 <_printf_float+0x310>
 8011244:	ee18 3a10 	vmov	r3, s16
 8011248:	4652      	mov	r2, sl
 801124a:	4631      	mov	r1, r6
 801124c:	4628      	mov	r0, r5
 801124e:	47b8      	blx	r7
 8011250:	3001      	adds	r0, #1
 8011252:	d1be      	bne.n	80111d2 <_printf_float+0x32a>
 8011254:	e689      	b.n	8010f6a <_printf_float+0xc2>
 8011256:	9a05      	ldr	r2, [sp, #20]
 8011258:	464b      	mov	r3, r9
 801125a:	4442      	add	r2, r8
 801125c:	4631      	mov	r1, r6
 801125e:	4628      	mov	r0, r5
 8011260:	47b8      	blx	r7
 8011262:	3001      	adds	r0, #1
 8011264:	d1c1      	bne.n	80111ea <_printf_float+0x342>
 8011266:	e680      	b.n	8010f6a <_printf_float+0xc2>
 8011268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801126a:	2a01      	cmp	r2, #1
 801126c:	dc01      	bgt.n	8011272 <_printf_float+0x3ca>
 801126e:	07db      	lsls	r3, r3, #31
 8011270:	d538      	bpl.n	80112e4 <_printf_float+0x43c>
 8011272:	2301      	movs	r3, #1
 8011274:	4642      	mov	r2, r8
 8011276:	4631      	mov	r1, r6
 8011278:	4628      	mov	r0, r5
 801127a:	47b8      	blx	r7
 801127c:	3001      	adds	r0, #1
 801127e:	f43f ae74 	beq.w	8010f6a <_printf_float+0xc2>
 8011282:	ee18 3a10 	vmov	r3, s16
 8011286:	4652      	mov	r2, sl
 8011288:	4631      	mov	r1, r6
 801128a:	4628      	mov	r0, r5
 801128c:	47b8      	blx	r7
 801128e:	3001      	adds	r0, #1
 8011290:	f43f ae6b 	beq.w	8010f6a <_printf_float+0xc2>
 8011294:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011298:	2200      	movs	r2, #0
 801129a:	2300      	movs	r3, #0
 801129c:	f7ef fc2c 	bl	8000af8 <__aeabi_dcmpeq>
 80112a0:	b9d8      	cbnz	r0, 80112da <_printf_float+0x432>
 80112a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112a4:	f108 0201 	add.w	r2, r8, #1
 80112a8:	3b01      	subs	r3, #1
 80112aa:	4631      	mov	r1, r6
 80112ac:	4628      	mov	r0, r5
 80112ae:	47b8      	blx	r7
 80112b0:	3001      	adds	r0, #1
 80112b2:	d10e      	bne.n	80112d2 <_printf_float+0x42a>
 80112b4:	e659      	b.n	8010f6a <_printf_float+0xc2>
 80112b6:	2301      	movs	r3, #1
 80112b8:	4652      	mov	r2, sl
 80112ba:	4631      	mov	r1, r6
 80112bc:	4628      	mov	r0, r5
 80112be:	47b8      	blx	r7
 80112c0:	3001      	adds	r0, #1
 80112c2:	f43f ae52 	beq.w	8010f6a <_printf_float+0xc2>
 80112c6:	f108 0801 	add.w	r8, r8, #1
 80112ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112cc:	3b01      	subs	r3, #1
 80112ce:	4543      	cmp	r3, r8
 80112d0:	dcf1      	bgt.n	80112b6 <_printf_float+0x40e>
 80112d2:	464b      	mov	r3, r9
 80112d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80112d8:	e6dc      	b.n	8011094 <_printf_float+0x1ec>
 80112da:	f04f 0800 	mov.w	r8, #0
 80112de:	f104 0a1a 	add.w	sl, r4, #26
 80112e2:	e7f2      	b.n	80112ca <_printf_float+0x422>
 80112e4:	2301      	movs	r3, #1
 80112e6:	4642      	mov	r2, r8
 80112e8:	e7df      	b.n	80112aa <_printf_float+0x402>
 80112ea:	2301      	movs	r3, #1
 80112ec:	464a      	mov	r2, r9
 80112ee:	4631      	mov	r1, r6
 80112f0:	4628      	mov	r0, r5
 80112f2:	47b8      	blx	r7
 80112f4:	3001      	adds	r0, #1
 80112f6:	f43f ae38 	beq.w	8010f6a <_printf_float+0xc2>
 80112fa:	f108 0801 	add.w	r8, r8, #1
 80112fe:	68e3      	ldr	r3, [r4, #12]
 8011300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011302:	1a5b      	subs	r3, r3, r1
 8011304:	4543      	cmp	r3, r8
 8011306:	dcf0      	bgt.n	80112ea <_printf_float+0x442>
 8011308:	e6fa      	b.n	8011100 <_printf_float+0x258>
 801130a:	f04f 0800 	mov.w	r8, #0
 801130e:	f104 0919 	add.w	r9, r4, #25
 8011312:	e7f4      	b.n	80112fe <_printf_float+0x456>

08011314 <_printf_common>:
 8011314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011318:	4616      	mov	r6, r2
 801131a:	4699      	mov	r9, r3
 801131c:	688a      	ldr	r2, [r1, #8]
 801131e:	690b      	ldr	r3, [r1, #16]
 8011320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011324:	4293      	cmp	r3, r2
 8011326:	bfb8      	it	lt
 8011328:	4613      	movlt	r3, r2
 801132a:	6033      	str	r3, [r6, #0]
 801132c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011330:	4607      	mov	r7, r0
 8011332:	460c      	mov	r4, r1
 8011334:	b10a      	cbz	r2, 801133a <_printf_common+0x26>
 8011336:	3301      	adds	r3, #1
 8011338:	6033      	str	r3, [r6, #0]
 801133a:	6823      	ldr	r3, [r4, #0]
 801133c:	0699      	lsls	r1, r3, #26
 801133e:	bf42      	ittt	mi
 8011340:	6833      	ldrmi	r3, [r6, #0]
 8011342:	3302      	addmi	r3, #2
 8011344:	6033      	strmi	r3, [r6, #0]
 8011346:	6825      	ldr	r5, [r4, #0]
 8011348:	f015 0506 	ands.w	r5, r5, #6
 801134c:	d106      	bne.n	801135c <_printf_common+0x48>
 801134e:	f104 0a19 	add.w	sl, r4, #25
 8011352:	68e3      	ldr	r3, [r4, #12]
 8011354:	6832      	ldr	r2, [r6, #0]
 8011356:	1a9b      	subs	r3, r3, r2
 8011358:	42ab      	cmp	r3, r5
 801135a:	dc26      	bgt.n	80113aa <_printf_common+0x96>
 801135c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011360:	1e13      	subs	r3, r2, #0
 8011362:	6822      	ldr	r2, [r4, #0]
 8011364:	bf18      	it	ne
 8011366:	2301      	movne	r3, #1
 8011368:	0692      	lsls	r2, r2, #26
 801136a:	d42b      	bmi.n	80113c4 <_printf_common+0xb0>
 801136c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011370:	4649      	mov	r1, r9
 8011372:	4638      	mov	r0, r7
 8011374:	47c0      	blx	r8
 8011376:	3001      	adds	r0, #1
 8011378:	d01e      	beq.n	80113b8 <_printf_common+0xa4>
 801137a:	6823      	ldr	r3, [r4, #0]
 801137c:	68e5      	ldr	r5, [r4, #12]
 801137e:	6832      	ldr	r2, [r6, #0]
 8011380:	f003 0306 	and.w	r3, r3, #6
 8011384:	2b04      	cmp	r3, #4
 8011386:	bf08      	it	eq
 8011388:	1aad      	subeq	r5, r5, r2
 801138a:	68a3      	ldr	r3, [r4, #8]
 801138c:	6922      	ldr	r2, [r4, #16]
 801138e:	bf0c      	ite	eq
 8011390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011394:	2500      	movne	r5, #0
 8011396:	4293      	cmp	r3, r2
 8011398:	bfc4      	itt	gt
 801139a:	1a9b      	subgt	r3, r3, r2
 801139c:	18ed      	addgt	r5, r5, r3
 801139e:	2600      	movs	r6, #0
 80113a0:	341a      	adds	r4, #26
 80113a2:	42b5      	cmp	r5, r6
 80113a4:	d11a      	bne.n	80113dc <_printf_common+0xc8>
 80113a6:	2000      	movs	r0, #0
 80113a8:	e008      	b.n	80113bc <_printf_common+0xa8>
 80113aa:	2301      	movs	r3, #1
 80113ac:	4652      	mov	r2, sl
 80113ae:	4649      	mov	r1, r9
 80113b0:	4638      	mov	r0, r7
 80113b2:	47c0      	blx	r8
 80113b4:	3001      	adds	r0, #1
 80113b6:	d103      	bne.n	80113c0 <_printf_common+0xac>
 80113b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113c0:	3501      	adds	r5, #1
 80113c2:	e7c6      	b.n	8011352 <_printf_common+0x3e>
 80113c4:	18e1      	adds	r1, r4, r3
 80113c6:	1c5a      	adds	r2, r3, #1
 80113c8:	2030      	movs	r0, #48	; 0x30
 80113ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80113ce:	4422      	add	r2, r4
 80113d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80113d8:	3302      	adds	r3, #2
 80113da:	e7c7      	b.n	801136c <_printf_common+0x58>
 80113dc:	2301      	movs	r3, #1
 80113de:	4622      	mov	r2, r4
 80113e0:	4649      	mov	r1, r9
 80113e2:	4638      	mov	r0, r7
 80113e4:	47c0      	blx	r8
 80113e6:	3001      	adds	r0, #1
 80113e8:	d0e6      	beq.n	80113b8 <_printf_common+0xa4>
 80113ea:	3601      	adds	r6, #1
 80113ec:	e7d9      	b.n	80113a2 <_printf_common+0x8e>
	...

080113f0 <_printf_i>:
 80113f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113f4:	7e0f      	ldrb	r7, [r1, #24]
 80113f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80113f8:	2f78      	cmp	r7, #120	; 0x78
 80113fa:	4691      	mov	r9, r2
 80113fc:	4680      	mov	r8, r0
 80113fe:	460c      	mov	r4, r1
 8011400:	469a      	mov	sl, r3
 8011402:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011406:	d807      	bhi.n	8011418 <_printf_i+0x28>
 8011408:	2f62      	cmp	r7, #98	; 0x62
 801140a:	d80a      	bhi.n	8011422 <_printf_i+0x32>
 801140c:	2f00      	cmp	r7, #0
 801140e:	f000 80d8 	beq.w	80115c2 <_printf_i+0x1d2>
 8011412:	2f58      	cmp	r7, #88	; 0x58
 8011414:	f000 80a3 	beq.w	801155e <_printf_i+0x16e>
 8011418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801141c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011420:	e03a      	b.n	8011498 <_printf_i+0xa8>
 8011422:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011426:	2b15      	cmp	r3, #21
 8011428:	d8f6      	bhi.n	8011418 <_printf_i+0x28>
 801142a:	a101      	add	r1, pc, #4	; (adr r1, 8011430 <_printf_i+0x40>)
 801142c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011430:	08011489 	.word	0x08011489
 8011434:	0801149d 	.word	0x0801149d
 8011438:	08011419 	.word	0x08011419
 801143c:	08011419 	.word	0x08011419
 8011440:	08011419 	.word	0x08011419
 8011444:	08011419 	.word	0x08011419
 8011448:	0801149d 	.word	0x0801149d
 801144c:	08011419 	.word	0x08011419
 8011450:	08011419 	.word	0x08011419
 8011454:	08011419 	.word	0x08011419
 8011458:	08011419 	.word	0x08011419
 801145c:	080115a9 	.word	0x080115a9
 8011460:	080114cd 	.word	0x080114cd
 8011464:	0801158b 	.word	0x0801158b
 8011468:	08011419 	.word	0x08011419
 801146c:	08011419 	.word	0x08011419
 8011470:	080115cb 	.word	0x080115cb
 8011474:	08011419 	.word	0x08011419
 8011478:	080114cd 	.word	0x080114cd
 801147c:	08011419 	.word	0x08011419
 8011480:	08011419 	.word	0x08011419
 8011484:	08011593 	.word	0x08011593
 8011488:	682b      	ldr	r3, [r5, #0]
 801148a:	1d1a      	adds	r2, r3, #4
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	602a      	str	r2, [r5, #0]
 8011490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011498:	2301      	movs	r3, #1
 801149a:	e0a3      	b.n	80115e4 <_printf_i+0x1f4>
 801149c:	6820      	ldr	r0, [r4, #0]
 801149e:	6829      	ldr	r1, [r5, #0]
 80114a0:	0606      	lsls	r6, r0, #24
 80114a2:	f101 0304 	add.w	r3, r1, #4
 80114a6:	d50a      	bpl.n	80114be <_printf_i+0xce>
 80114a8:	680e      	ldr	r6, [r1, #0]
 80114aa:	602b      	str	r3, [r5, #0]
 80114ac:	2e00      	cmp	r6, #0
 80114ae:	da03      	bge.n	80114b8 <_printf_i+0xc8>
 80114b0:	232d      	movs	r3, #45	; 0x2d
 80114b2:	4276      	negs	r6, r6
 80114b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114b8:	485e      	ldr	r0, [pc, #376]	; (8011634 <_printf_i+0x244>)
 80114ba:	230a      	movs	r3, #10
 80114bc:	e019      	b.n	80114f2 <_printf_i+0x102>
 80114be:	680e      	ldr	r6, [r1, #0]
 80114c0:	602b      	str	r3, [r5, #0]
 80114c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80114c6:	bf18      	it	ne
 80114c8:	b236      	sxthne	r6, r6
 80114ca:	e7ef      	b.n	80114ac <_printf_i+0xbc>
 80114cc:	682b      	ldr	r3, [r5, #0]
 80114ce:	6820      	ldr	r0, [r4, #0]
 80114d0:	1d19      	adds	r1, r3, #4
 80114d2:	6029      	str	r1, [r5, #0]
 80114d4:	0601      	lsls	r1, r0, #24
 80114d6:	d501      	bpl.n	80114dc <_printf_i+0xec>
 80114d8:	681e      	ldr	r6, [r3, #0]
 80114da:	e002      	b.n	80114e2 <_printf_i+0xf2>
 80114dc:	0646      	lsls	r6, r0, #25
 80114de:	d5fb      	bpl.n	80114d8 <_printf_i+0xe8>
 80114e0:	881e      	ldrh	r6, [r3, #0]
 80114e2:	4854      	ldr	r0, [pc, #336]	; (8011634 <_printf_i+0x244>)
 80114e4:	2f6f      	cmp	r7, #111	; 0x6f
 80114e6:	bf0c      	ite	eq
 80114e8:	2308      	moveq	r3, #8
 80114ea:	230a      	movne	r3, #10
 80114ec:	2100      	movs	r1, #0
 80114ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80114f2:	6865      	ldr	r5, [r4, #4]
 80114f4:	60a5      	str	r5, [r4, #8]
 80114f6:	2d00      	cmp	r5, #0
 80114f8:	bfa2      	ittt	ge
 80114fa:	6821      	ldrge	r1, [r4, #0]
 80114fc:	f021 0104 	bicge.w	r1, r1, #4
 8011500:	6021      	strge	r1, [r4, #0]
 8011502:	b90e      	cbnz	r6, 8011508 <_printf_i+0x118>
 8011504:	2d00      	cmp	r5, #0
 8011506:	d04d      	beq.n	80115a4 <_printf_i+0x1b4>
 8011508:	4615      	mov	r5, r2
 801150a:	fbb6 f1f3 	udiv	r1, r6, r3
 801150e:	fb03 6711 	mls	r7, r3, r1, r6
 8011512:	5dc7      	ldrb	r7, [r0, r7]
 8011514:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011518:	4637      	mov	r7, r6
 801151a:	42bb      	cmp	r3, r7
 801151c:	460e      	mov	r6, r1
 801151e:	d9f4      	bls.n	801150a <_printf_i+0x11a>
 8011520:	2b08      	cmp	r3, #8
 8011522:	d10b      	bne.n	801153c <_printf_i+0x14c>
 8011524:	6823      	ldr	r3, [r4, #0]
 8011526:	07de      	lsls	r6, r3, #31
 8011528:	d508      	bpl.n	801153c <_printf_i+0x14c>
 801152a:	6923      	ldr	r3, [r4, #16]
 801152c:	6861      	ldr	r1, [r4, #4]
 801152e:	4299      	cmp	r1, r3
 8011530:	bfde      	ittt	le
 8011532:	2330      	movle	r3, #48	; 0x30
 8011534:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011538:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801153c:	1b52      	subs	r2, r2, r5
 801153e:	6122      	str	r2, [r4, #16]
 8011540:	f8cd a000 	str.w	sl, [sp]
 8011544:	464b      	mov	r3, r9
 8011546:	aa03      	add	r2, sp, #12
 8011548:	4621      	mov	r1, r4
 801154a:	4640      	mov	r0, r8
 801154c:	f7ff fee2 	bl	8011314 <_printf_common>
 8011550:	3001      	adds	r0, #1
 8011552:	d14c      	bne.n	80115ee <_printf_i+0x1fe>
 8011554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011558:	b004      	add	sp, #16
 801155a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801155e:	4835      	ldr	r0, [pc, #212]	; (8011634 <_printf_i+0x244>)
 8011560:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011564:	6829      	ldr	r1, [r5, #0]
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	f851 6b04 	ldr.w	r6, [r1], #4
 801156c:	6029      	str	r1, [r5, #0]
 801156e:	061d      	lsls	r5, r3, #24
 8011570:	d514      	bpl.n	801159c <_printf_i+0x1ac>
 8011572:	07df      	lsls	r7, r3, #31
 8011574:	bf44      	itt	mi
 8011576:	f043 0320 	orrmi.w	r3, r3, #32
 801157a:	6023      	strmi	r3, [r4, #0]
 801157c:	b91e      	cbnz	r6, 8011586 <_printf_i+0x196>
 801157e:	6823      	ldr	r3, [r4, #0]
 8011580:	f023 0320 	bic.w	r3, r3, #32
 8011584:	6023      	str	r3, [r4, #0]
 8011586:	2310      	movs	r3, #16
 8011588:	e7b0      	b.n	80114ec <_printf_i+0xfc>
 801158a:	6823      	ldr	r3, [r4, #0]
 801158c:	f043 0320 	orr.w	r3, r3, #32
 8011590:	6023      	str	r3, [r4, #0]
 8011592:	2378      	movs	r3, #120	; 0x78
 8011594:	4828      	ldr	r0, [pc, #160]	; (8011638 <_printf_i+0x248>)
 8011596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801159a:	e7e3      	b.n	8011564 <_printf_i+0x174>
 801159c:	0659      	lsls	r1, r3, #25
 801159e:	bf48      	it	mi
 80115a0:	b2b6      	uxthmi	r6, r6
 80115a2:	e7e6      	b.n	8011572 <_printf_i+0x182>
 80115a4:	4615      	mov	r5, r2
 80115a6:	e7bb      	b.n	8011520 <_printf_i+0x130>
 80115a8:	682b      	ldr	r3, [r5, #0]
 80115aa:	6826      	ldr	r6, [r4, #0]
 80115ac:	6961      	ldr	r1, [r4, #20]
 80115ae:	1d18      	adds	r0, r3, #4
 80115b0:	6028      	str	r0, [r5, #0]
 80115b2:	0635      	lsls	r5, r6, #24
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	d501      	bpl.n	80115bc <_printf_i+0x1cc>
 80115b8:	6019      	str	r1, [r3, #0]
 80115ba:	e002      	b.n	80115c2 <_printf_i+0x1d2>
 80115bc:	0670      	lsls	r0, r6, #25
 80115be:	d5fb      	bpl.n	80115b8 <_printf_i+0x1c8>
 80115c0:	8019      	strh	r1, [r3, #0]
 80115c2:	2300      	movs	r3, #0
 80115c4:	6123      	str	r3, [r4, #16]
 80115c6:	4615      	mov	r5, r2
 80115c8:	e7ba      	b.n	8011540 <_printf_i+0x150>
 80115ca:	682b      	ldr	r3, [r5, #0]
 80115cc:	1d1a      	adds	r2, r3, #4
 80115ce:	602a      	str	r2, [r5, #0]
 80115d0:	681d      	ldr	r5, [r3, #0]
 80115d2:	6862      	ldr	r2, [r4, #4]
 80115d4:	2100      	movs	r1, #0
 80115d6:	4628      	mov	r0, r5
 80115d8:	f7ee fe1a 	bl	8000210 <memchr>
 80115dc:	b108      	cbz	r0, 80115e2 <_printf_i+0x1f2>
 80115de:	1b40      	subs	r0, r0, r5
 80115e0:	6060      	str	r0, [r4, #4]
 80115e2:	6863      	ldr	r3, [r4, #4]
 80115e4:	6123      	str	r3, [r4, #16]
 80115e6:	2300      	movs	r3, #0
 80115e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115ec:	e7a8      	b.n	8011540 <_printf_i+0x150>
 80115ee:	6923      	ldr	r3, [r4, #16]
 80115f0:	462a      	mov	r2, r5
 80115f2:	4649      	mov	r1, r9
 80115f4:	4640      	mov	r0, r8
 80115f6:	47d0      	blx	sl
 80115f8:	3001      	adds	r0, #1
 80115fa:	d0ab      	beq.n	8011554 <_printf_i+0x164>
 80115fc:	6823      	ldr	r3, [r4, #0]
 80115fe:	079b      	lsls	r3, r3, #30
 8011600:	d413      	bmi.n	801162a <_printf_i+0x23a>
 8011602:	68e0      	ldr	r0, [r4, #12]
 8011604:	9b03      	ldr	r3, [sp, #12]
 8011606:	4298      	cmp	r0, r3
 8011608:	bfb8      	it	lt
 801160a:	4618      	movlt	r0, r3
 801160c:	e7a4      	b.n	8011558 <_printf_i+0x168>
 801160e:	2301      	movs	r3, #1
 8011610:	4632      	mov	r2, r6
 8011612:	4649      	mov	r1, r9
 8011614:	4640      	mov	r0, r8
 8011616:	47d0      	blx	sl
 8011618:	3001      	adds	r0, #1
 801161a:	d09b      	beq.n	8011554 <_printf_i+0x164>
 801161c:	3501      	adds	r5, #1
 801161e:	68e3      	ldr	r3, [r4, #12]
 8011620:	9903      	ldr	r1, [sp, #12]
 8011622:	1a5b      	subs	r3, r3, r1
 8011624:	42ab      	cmp	r3, r5
 8011626:	dcf2      	bgt.n	801160e <_printf_i+0x21e>
 8011628:	e7eb      	b.n	8011602 <_printf_i+0x212>
 801162a:	2500      	movs	r5, #0
 801162c:	f104 0619 	add.w	r6, r4, #25
 8011630:	e7f5      	b.n	801161e <_printf_i+0x22e>
 8011632:	bf00      	nop
 8011634:	0801570e 	.word	0x0801570e
 8011638:	0801571f 	.word	0x0801571f

0801163c <_scanf_float>:
 801163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011640:	b087      	sub	sp, #28
 8011642:	4617      	mov	r7, r2
 8011644:	9303      	str	r3, [sp, #12]
 8011646:	688b      	ldr	r3, [r1, #8]
 8011648:	1e5a      	subs	r2, r3, #1
 801164a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801164e:	bf83      	ittte	hi
 8011650:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011654:	195b      	addhi	r3, r3, r5
 8011656:	9302      	strhi	r3, [sp, #8]
 8011658:	2300      	movls	r3, #0
 801165a:	bf86      	itte	hi
 801165c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011660:	608b      	strhi	r3, [r1, #8]
 8011662:	9302      	strls	r3, [sp, #8]
 8011664:	680b      	ldr	r3, [r1, #0]
 8011666:	468b      	mov	fp, r1
 8011668:	2500      	movs	r5, #0
 801166a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801166e:	f84b 3b1c 	str.w	r3, [fp], #28
 8011672:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011676:	4680      	mov	r8, r0
 8011678:	460c      	mov	r4, r1
 801167a:	465e      	mov	r6, fp
 801167c:	46aa      	mov	sl, r5
 801167e:	46a9      	mov	r9, r5
 8011680:	9501      	str	r5, [sp, #4]
 8011682:	68a2      	ldr	r2, [r4, #8]
 8011684:	b152      	cbz	r2, 801169c <_scanf_float+0x60>
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	781b      	ldrb	r3, [r3, #0]
 801168a:	2b4e      	cmp	r3, #78	; 0x4e
 801168c:	d864      	bhi.n	8011758 <_scanf_float+0x11c>
 801168e:	2b40      	cmp	r3, #64	; 0x40
 8011690:	d83c      	bhi.n	801170c <_scanf_float+0xd0>
 8011692:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011696:	b2c8      	uxtb	r0, r1
 8011698:	280e      	cmp	r0, #14
 801169a:	d93a      	bls.n	8011712 <_scanf_float+0xd6>
 801169c:	f1b9 0f00 	cmp.w	r9, #0
 80116a0:	d003      	beq.n	80116aa <_scanf_float+0x6e>
 80116a2:	6823      	ldr	r3, [r4, #0]
 80116a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80116a8:	6023      	str	r3, [r4, #0]
 80116aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80116ae:	f1ba 0f01 	cmp.w	sl, #1
 80116b2:	f200 8113 	bhi.w	80118dc <_scanf_float+0x2a0>
 80116b6:	455e      	cmp	r6, fp
 80116b8:	f200 8105 	bhi.w	80118c6 <_scanf_float+0x28a>
 80116bc:	2501      	movs	r5, #1
 80116be:	4628      	mov	r0, r5
 80116c0:	b007      	add	sp, #28
 80116c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80116ca:	2a0d      	cmp	r2, #13
 80116cc:	d8e6      	bhi.n	801169c <_scanf_float+0x60>
 80116ce:	a101      	add	r1, pc, #4	; (adr r1, 80116d4 <_scanf_float+0x98>)
 80116d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80116d4:	08011813 	.word	0x08011813
 80116d8:	0801169d 	.word	0x0801169d
 80116dc:	0801169d 	.word	0x0801169d
 80116e0:	0801169d 	.word	0x0801169d
 80116e4:	08011873 	.word	0x08011873
 80116e8:	0801184b 	.word	0x0801184b
 80116ec:	0801169d 	.word	0x0801169d
 80116f0:	0801169d 	.word	0x0801169d
 80116f4:	08011821 	.word	0x08011821
 80116f8:	0801169d 	.word	0x0801169d
 80116fc:	0801169d 	.word	0x0801169d
 8011700:	0801169d 	.word	0x0801169d
 8011704:	0801169d 	.word	0x0801169d
 8011708:	080117d9 	.word	0x080117d9
 801170c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011710:	e7db      	b.n	80116ca <_scanf_float+0x8e>
 8011712:	290e      	cmp	r1, #14
 8011714:	d8c2      	bhi.n	801169c <_scanf_float+0x60>
 8011716:	a001      	add	r0, pc, #4	; (adr r0, 801171c <_scanf_float+0xe0>)
 8011718:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801171c:	080117cb 	.word	0x080117cb
 8011720:	0801169d 	.word	0x0801169d
 8011724:	080117cb 	.word	0x080117cb
 8011728:	0801185f 	.word	0x0801185f
 801172c:	0801169d 	.word	0x0801169d
 8011730:	08011779 	.word	0x08011779
 8011734:	080117b5 	.word	0x080117b5
 8011738:	080117b5 	.word	0x080117b5
 801173c:	080117b5 	.word	0x080117b5
 8011740:	080117b5 	.word	0x080117b5
 8011744:	080117b5 	.word	0x080117b5
 8011748:	080117b5 	.word	0x080117b5
 801174c:	080117b5 	.word	0x080117b5
 8011750:	080117b5 	.word	0x080117b5
 8011754:	080117b5 	.word	0x080117b5
 8011758:	2b6e      	cmp	r3, #110	; 0x6e
 801175a:	d809      	bhi.n	8011770 <_scanf_float+0x134>
 801175c:	2b60      	cmp	r3, #96	; 0x60
 801175e:	d8b2      	bhi.n	80116c6 <_scanf_float+0x8a>
 8011760:	2b54      	cmp	r3, #84	; 0x54
 8011762:	d077      	beq.n	8011854 <_scanf_float+0x218>
 8011764:	2b59      	cmp	r3, #89	; 0x59
 8011766:	d199      	bne.n	801169c <_scanf_float+0x60>
 8011768:	2d07      	cmp	r5, #7
 801176a:	d197      	bne.n	801169c <_scanf_float+0x60>
 801176c:	2508      	movs	r5, #8
 801176e:	e029      	b.n	80117c4 <_scanf_float+0x188>
 8011770:	2b74      	cmp	r3, #116	; 0x74
 8011772:	d06f      	beq.n	8011854 <_scanf_float+0x218>
 8011774:	2b79      	cmp	r3, #121	; 0x79
 8011776:	e7f6      	b.n	8011766 <_scanf_float+0x12a>
 8011778:	6821      	ldr	r1, [r4, #0]
 801177a:	05c8      	lsls	r0, r1, #23
 801177c:	d51a      	bpl.n	80117b4 <_scanf_float+0x178>
 801177e:	9b02      	ldr	r3, [sp, #8]
 8011780:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011784:	6021      	str	r1, [r4, #0]
 8011786:	f109 0901 	add.w	r9, r9, #1
 801178a:	b11b      	cbz	r3, 8011794 <_scanf_float+0x158>
 801178c:	3b01      	subs	r3, #1
 801178e:	3201      	adds	r2, #1
 8011790:	9302      	str	r3, [sp, #8]
 8011792:	60a2      	str	r2, [r4, #8]
 8011794:	68a3      	ldr	r3, [r4, #8]
 8011796:	3b01      	subs	r3, #1
 8011798:	60a3      	str	r3, [r4, #8]
 801179a:	6923      	ldr	r3, [r4, #16]
 801179c:	3301      	adds	r3, #1
 801179e:	6123      	str	r3, [r4, #16]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3b01      	subs	r3, #1
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	607b      	str	r3, [r7, #4]
 80117a8:	f340 8084 	ble.w	80118b4 <_scanf_float+0x278>
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	3301      	adds	r3, #1
 80117b0:	603b      	str	r3, [r7, #0]
 80117b2:	e766      	b.n	8011682 <_scanf_float+0x46>
 80117b4:	eb1a 0f05 	cmn.w	sl, r5
 80117b8:	f47f af70 	bne.w	801169c <_scanf_float+0x60>
 80117bc:	6822      	ldr	r2, [r4, #0]
 80117be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80117c2:	6022      	str	r2, [r4, #0]
 80117c4:	f806 3b01 	strb.w	r3, [r6], #1
 80117c8:	e7e4      	b.n	8011794 <_scanf_float+0x158>
 80117ca:	6822      	ldr	r2, [r4, #0]
 80117cc:	0610      	lsls	r0, r2, #24
 80117ce:	f57f af65 	bpl.w	801169c <_scanf_float+0x60>
 80117d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80117d6:	e7f4      	b.n	80117c2 <_scanf_float+0x186>
 80117d8:	f1ba 0f00 	cmp.w	sl, #0
 80117dc:	d10e      	bne.n	80117fc <_scanf_float+0x1c0>
 80117de:	f1b9 0f00 	cmp.w	r9, #0
 80117e2:	d10e      	bne.n	8011802 <_scanf_float+0x1c6>
 80117e4:	6822      	ldr	r2, [r4, #0]
 80117e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80117ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80117ee:	d108      	bne.n	8011802 <_scanf_float+0x1c6>
 80117f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80117f4:	6022      	str	r2, [r4, #0]
 80117f6:	f04f 0a01 	mov.w	sl, #1
 80117fa:	e7e3      	b.n	80117c4 <_scanf_float+0x188>
 80117fc:	f1ba 0f02 	cmp.w	sl, #2
 8011800:	d055      	beq.n	80118ae <_scanf_float+0x272>
 8011802:	2d01      	cmp	r5, #1
 8011804:	d002      	beq.n	801180c <_scanf_float+0x1d0>
 8011806:	2d04      	cmp	r5, #4
 8011808:	f47f af48 	bne.w	801169c <_scanf_float+0x60>
 801180c:	3501      	adds	r5, #1
 801180e:	b2ed      	uxtb	r5, r5
 8011810:	e7d8      	b.n	80117c4 <_scanf_float+0x188>
 8011812:	f1ba 0f01 	cmp.w	sl, #1
 8011816:	f47f af41 	bne.w	801169c <_scanf_float+0x60>
 801181a:	f04f 0a02 	mov.w	sl, #2
 801181e:	e7d1      	b.n	80117c4 <_scanf_float+0x188>
 8011820:	b97d      	cbnz	r5, 8011842 <_scanf_float+0x206>
 8011822:	f1b9 0f00 	cmp.w	r9, #0
 8011826:	f47f af3c 	bne.w	80116a2 <_scanf_float+0x66>
 801182a:	6822      	ldr	r2, [r4, #0]
 801182c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011830:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011834:	f47f af39 	bne.w	80116aa <_scanf_float+0x6e>
 8011838:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801183c:	6022      	str	r2, [r4, #0]
 801183e:	2501      	movs	r5, #1
 8011840:	e7c0      	b.n	80117c4 <_scanf_float+0x188>
 8011842:	2d03      	cmp	r5, #3
 8011844:	d0e2      	beq.n	801180c <_scanf_float+0x1d0>
 8011846:	2d05      	cmp	r5, #5
 8011848:	e7de      	b.n	8011808 <_scanf_float+0x1cc>
 801184a:	2d02      	cmp	r5, #2
 801184c:	f47f af26 	bne.w	801169c <_scanf_float+0x60>
 8011850:	2503      	movs	r5, #3
 8011852:	e7b7      	b.n	80117c4 <_scanf_float+0x188>
 8011854:	2d06      	cmp	r5, #6
 8011856:	f47f af21 	bne.w	801169c <_scanf_float+0x60>
 801185a:	2507      	movs	r5, #7
 801185c:	e7b2      	b.n	80117c4 <_scanf_float+0x188>
 801185e:	6822      	ldr	r2, [r4, #0]
 8011860:	0591      	lsls	r1, r2, #22
 8011862:	f57f af1b 	bpl.w	801169c <_scanf_float+0x60>
 8011866:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801186a:	6022      	str	r2, [r4, #0]
 801186c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011870:	e7a8      	b.n	80117c4 <_scanf_float+0x188>
 8011872:	6822      	ldr	r2, [r4, #0]
 8011874:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011878:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801187c:	d006      	beq.n	801188c <_scanf_float+0x250>
 801187e:	0550      	lsls	r0, r2, #21
 8011880:	f57f af0c 	bpl.w	801169c <_scanf_float+0x60>
 8011884:	f1b9 0f00 	cmp.w	r9, #0
 8011888:	f43f af0f 	beq.w	80116aa <_scanf_float+0x6e>
 801188c:	0591      	lsls	r1, r2, #22
 801188e:	bf58      	it	pl
 8011890:	9901      	ldrpl	r1, [sp, #4]
 8011892:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011896:	bf58      	it	pl
 8011898:	eba9 0101 	subpl.w	r1, r9, r1
 801189c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80118a0:	bf58      	it	pl
 80118a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80118a6:	6022      	str	r2, [r4, #0]
 80118a8:	f04f 0900 	mov.w	r9, #0
 80118ac:	e78a      	b.n	80117c4 <_scanf_float+0x188>
 80118ae:	f04f 0a03 	mov.w	sl, #3
 80118b2:	e787      	b.n	80117c4 <_scanf_float+0x188>
 80118b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80118b8:	4639      	mov	r1, r7
 80118ba:	4640      	mov	r0, r8
 80118bc:	4798      	blx	r3
 80118be:	2800      	cmp	r0, #0
 80118c0:	f43f aedf 	beq.w	8011682 <_scanf_float+0x46>
 80118c4:	e6ea      	b.n	801169c <_scanf_float+0x60>
 80118c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80118ce:	463a      	mov	r2, r7
 80118d0:	4640      	mov	r0, r8
 80118d2:	4798      	blx	r3
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	3b01      	subs	r3, #1
 80118d8:	6123      	str	r3, [r4, #16]
 80118da:	e6ec      	b.n	80116b6 <_scanf_float+0x7a>
 80118dc:	1e6b      	subs	r3, r5, #1
 80118de:	2b06      	cmp	r3, #6
 80118e0:	d825      	bhi.n	801192e <_scanf_float+0x2f2>
 80118e2:	2d02      	cmp	r5, #2
 80118e4:	d836      	bhi.n	8011954 <_scanf_float+0x318>
 80118e6:	455e      	cmp	r6, fp
 80118e8:	f67f aee8 	bls.w	80116bc <_scanf_float+0x80>
 80118ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80118f4:	463a      	mov	r2, r7
 80118f6:	4640      	mov	r0, r8
 80118f8:	4798      	blx	r3
 80118fa:	6923      	ldr	r3, [r4, #16]
 80118fc:	3b01      	subs	r3, #1
 80118fe:	6123      	str	r3, [r4, #16]
 8011900:	e7f1      	b.n	80118e6 <_scanf_float+0x2aa>
 8011902:	9802      	ldr	r0, [sp, #8]
 8011904:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011908:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801190c:	9002      	str	r0, [sp, #8]
 801190e:	463a      	mov	r2, r7
 8011910:	4640      	mov	r0, r8
 8011912:	4798      	blx	r3
 8011914:	6923      	ldr	r3, [r4, #16]
 8011916:	3b01      	subs	r3, #1
 8011918:	6123      	str	r3, [r4, #16]
 801191a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801191e:	fa5f fa8a 	uxtb.w	sl, sl
 8011922:	f1ba 0f02 	cmp.w	sl, #2
 8011926:	d1ec      	bne.n	8011902 <_scanf_float+0x2c6>
 8011928:	3d03      	subs	r5, #3
 801192a:	b2ed      	uxtb	r5, r5
 801192c:	1b76      	subs	r6, r6, r5
 801192e:	6823      	ldr	r3, [r4, #0]
 8011930:	05da      	lsls	r2, r3, #23
 8011932:	d52f      	bpl.n	8011994 <_scanf_float+0x358>
 8011934:	055b      	lsls	r3, r3, #21
 8011936:	d510      	bpl.n	801195a <_scanf_float+0x31e>
 8011938:	455e      	cmp	r6, fp
 801193a:	f67f aebf 	bls.w	80116bc <_scanf_float+0x80>
 801193e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011942:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011946:	463a      	mov	r2, r7
 8011948:	4640      	mov	r0, r8
 801194a:	4798      	blx	r3
 801194c:	6923      	ldr	r3, [r4, #16]
 801194e:	3b01      	subs	r3, #1
 8011950:	6123      	str	r3, [r4, #16]
 8011952:	e7f1      	b.n	8011938 <_scanf_float+0x2fc>
 8011954:	46aa      	mov	sl, r5
 8011956:	9602      	str	r6, [sp, #8]
 8011958:	e7df      	b.n	801191a <_scanf_float+0x2de>
 801195a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801195e:	6923      	ldr	r3, [r4, #16]
 8011960:	2965      	cmp	r1, #101	; 0x65
 8011962:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8011966:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801196a:	6123      	str	r3, [r4, #16]
 801196c:	d00c      	beq.n	8011988 <_scanf_float+0x34c>
 801196e:	2945      	cmp	r1, #69	; 0x45
 8011970:	d00a      	beq.n	8011988 <_scanf_float+0x34c>
 8011972:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011976:	463a      	mov	r2, r7
 8011978:	4640      	mov	r0, r8
 801197a:	4798      	blx	r3
 801197c:	6923      	ldr	r3, [r4, #16]
 801197e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011982:	3b01      	subs	r3, #1
 8011984:	1eb5      	subs	r5, r6, #2
 8011986:	6123      	str	r3, [r4, #16]
 8011988:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801198c:	463a      	mov	r2, r7
 801198e:	4640      	mov	r0, r8
 8011990:	4798      	blx	r3
 8011992:	462e      	mov	r6, r5
 8011994:	6825      	ldr	r5, [r4, #0]
 8011996:	f015 0510 	ands.w	r5, r5, #16
 801199a:	d159      	bne.n	8011a50 <_scanf_float+0x414>
 801199c:	7035      	strb	r5, [r6, #0]
 801199e:	6823      	ldr	r3, [r4, #0]
 80119a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80119a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80119a8:	d11b      	bne.n	80119e2 <_scanf_float+0x3a6>
 80119aa:	9b01      	ldr	r3, [sp, #4]
 80119ac:	454b      	cmp	r3, r9
 80119ae:	eba3 0209 	sub.w	r2, r3, r9
 80119b2:	d123      	bne.n	80119fc <_scanf_float+0x3c0>
 80119b4:	2200      	movs	r2, #0
 80119b6:	4659      	mov	r1, fp
 80119b8:	4640      	mov	r0, r8
 80119ba:	f000 ff8b 	bl	80128d4 <_strtod_r>
 80119be:	6822      	ldr	r2, [r4, #0]
 80119c0:	9b03      	ldr	r3, [sp, #12]
 80119c2:	f012 0f02 	tst.w	r2, #2
 80119c6:	ec57 6b10 	vmov	r6, r7, d0
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	d021      	beq.n	8011a12 <_scanf_float+0x3d6>
 80119ce:	9903      	ldr	r1, [sp, #12]
 80119d0:	1d1a      	adds	r2, r3, #4
 80119d2:	600a      	str	r2, [r1, #0]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	e9c3 6700 	strd	r6, r7, [r3]
 80119da:	68e3      	ldr	r3, [r4, #12]
 80119dc:	3301      	adds	r3, #1
 80119de:	60e3      	str	r3, [r4, #12]
 80119e0:	e66d      	b.n	80116be <_scanf_float+0x82>
 80119e2:	9b04      	ldr	r3, [sp, #16]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d0e5      	beq.n	80119b4 <_scanf_float+0x378>
 80119e8:	9905      	ldr	r1, [sp, #20]
 80119ea:	230a      	movs	r3, #10
 80119ec:	462a      	mov	r2, r5
 80119ee:	3101      	adds	r1, #1
 80119f0:	4640      	mov	r0, r8
 80119f2:	f000 fff7 	bl	80129e4 <_strtol_r>
 80119f6:	9b04      	ldr	r3, [sp, #16]
 80119f8:	9e05      	ldr	r6, [sp, #20]
 80119fa:	1ac2      	subs	r2, r0, r3
 80119fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011a00:	429e      	cmp	r6, r3
 8011a02:	bf28      	it	cs
 8011a04:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011a08:	4912      	ldr	r1, [pc, #72]	; (8011a54 <_scanf_float+0x418>)
 8011a0a:	4630      	mov	r0, r6
 8011a0c:	f000 f8da 	bl	8011bc4 <siprintf>
 8011a10:	e7d0      	b.n	80119b4 <_scanf_float+0x378>
 8011a12:	9903      	ldr	r1, [sp, #12]
 8011a14:	f012 0f04 	tst.w	r2, #4
 8011a18:	f103 0204 	add.w	r2, r3, #4
 8011a1c:	600a      	str	r2, [r1, #0]
 8011a1e:	d1d9      	bne.n	80119d4 <_scanf_float+0x398>
 8011a20:	f8d3 8000 	ldr.w	r8, [r3]
 8011a24:	ee10 2a10 	vmov	r2, s0
 8011a28:	ee10 0a10 	vmov	r0, s0
 8011a2c:	463b      	mov	r3, r7
 8011a2e:	4639      	mov	r1, r7
 8011a30:	f7ef f894 	bl	8000b5c <__aeabi_dcmpun>
 8011a34:	b128      	cbz	r0, 8011a42 <_scanf_float+0x406>
 8011a36:	4808      	ldr	r0, [pc, #32]	; (8011a58 <_scanf_float+0x41c>)
 8011a38:	f000 f88a 	bl	8011b50 <nanf>
 8011a3c:	ed88 0a00 	vstr	s0, [r8]
 8011a40:	e7cb      	b.n	80119da <_scanf_float+0x39e>
 8011a42:	4630      	mov	r0, r6
 8011a44:	4639      	mov	r1, r7
 8011a46:	f7ef f8e7 	bl	8000c18 <__aeabi_d2f>
 8011a4a:	f8c8 0000 	str.w	r0, [r8]
 8011a4e:	e7c4      	b.n	80119da <_scanf_float+0x39e>
 8011a50:	2500      	movs	r5, #0
 8011a52:	e634      	b.n	80116be <_scanf_float+0x82>
 8011a54:	08015730 	.word	0x08015730
 8011a58:	08015b38 	.word	0x08015b38

08011a5c <cleanup_glue>:
 8011a5c:	b538      	push	{r3, r4, r5, lr}
 8011a5e:	460c      	mov	r4, r1
 8011a60:	6809      	ldr	r1, [r1, #0]
 8011a62:	4605      	mov	r5, r0
 8011a64:	b109      	cbz	r1, 8011a6a <cleanup_glue+0xe>
 8011a66:	f7ff fff9 	bl	8011a5c <cleanup_glue>
 8011a6a:	4621      	mov	r1, r4
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a72:	f002 bf9d 	b.w	80149b0 <_free_r>
	...

08011a78 <_reclaim_reent>:
 8011a78:	4b2c      	ldr	r3, [pc, #176]	; (8011b2c <_reclaim_reent+0xb4>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	4283      	cmp	r3, r0
 8011a7e:	b570      	push	{r4, r5, r6, lr}
 8011a80:	4604      	mov	r4, r0
 8011a82:	d051      	beq.n	8011b28 <_reclaim_reent+0xb0>
 8011a84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011a86:	b143      	cbz	r3, 8011a9a <_reclaim_reent+0x22>
 8011a88:	68db      	ldr	r3, [r3, #12]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d14a      	bne.n	8011b24 <_reclaim_reent+0xac>
 8011a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a90:	6819      	ldr	r1, [r3, #0]
 8011a92:	b111      	cbz	r1, 8011a9a <_reclaim_reent+0x22>
 8011a94:	4620      	mov	r0, r4
 8011a96:	f002 ff8b 	bl	80149b0 <_free_r>
 8011a9a:	6961      	ldr	r1, [r4, #20]
 8011a9c:	b111      	cbz	r1, 8011aa4 <_reclaim_reent+0x2c>
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f002 ff86 	bl	80149b0 <_free_r>
 8011aa4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011aa6:	b111      	cbz	r1, 8011aae <_reclaim_reent+0x36>
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f002 ff81 	bl	80149b0 <_free_r>
 8011aae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011ab0:	b111      	cbz	r1, 8011ab8 <_reclaim_reent+0x40>
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	f002 ff7c 	bl	80149b0 <_free_r>
 8011ab8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011aba:	b111      	cbz	r1, 8011ac2 <_reclaim_reent+0x4a>
 8011abc:	4620      	mov	r0, r4
 8011abe:	f002 ff77 	bl	80149b0 <_free_r>
 8011ac2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011ac4:	b111      	cbz	r1, 8011acc <_reclaim_reent+0x54>
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	f002 ff72 	bl	80149b0 <_free_r>
 8011acc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011ace:	b111      	cbz	r1, 8011ad6 <_reclaim_reent+0x5e>
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f002 ff6d 	bl	80149b0 <_free_r>
 8011ad6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011ad8:	b111      	cbz	r1, 8011ae0 <_reclaim_reent+0x68>
 8011ada:	4620      	mov	r0, r4
 8011adc:	f002 ff68 	bl	80149b0 <_free_r>
 8011ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ae2:	b111      	cbz	r1, 8011aea <_reclaim_reent+0x72>
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	f002 ff63 	bl	80149b0 <_free_r>
 8011aea:	69a3      	ldr	r3, [r4, #24]
 8011aec:	b1e3      	cbz	r3, 8011b28 <_reclaim_reent+0xb0>
 8011aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011af0:	4620      	mov	r0, r4
 8011af2:	4798      	blx	r3
 8011af4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011af6:	b1b9      	cbz	r1, 8011b28 <_reclaim_reent+0xb0>
 8011af8:	4620      	mov	r0, r4
 8011afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011afe:	f7ff bfad 	b.w	8011a5c <cleanup_glue>
 8011b02:	5949      	ldr	r1, [r1, r5]
 8011b04:	b941      	cbnz	r1, 8011b18 <_reclaim_reent+0xa0>
 8011b06:	3504      	adds	r5, #4
 8011b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b0a:	2d80      	cmp	r5, #128	; 0x80
 8011b0c:	68d9      	ldr	r1, [r3, #12]
 8011b0e:	d1f8      	bne.n	8011b02 <_reclaim_reent+0x8a>
 8011b10:	4620      	mov	r0, r4
 8011b12:	f002 ff4d 	bl	80149b0 <_free_r>
 8011b16:	e7ba      	b.n	8011a8e <_reclaim_reent+0x16>
 8011b18:	680e      	ldr	r6, [r1, #0]
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	f002 ff48 	bl	80149b0 <_free_r>
 8011b20:	4631      	mov	r1, r6
 8011b22:	e7ef      	b.n	8011b04 <_reclaim_reent+0x8c>
 8011b24:	2500      	movs	r5, #0
 8011b26:	e7ef      	b.n	8011b08 <_reclaim_reent+0x90>
 8011b28:	bd70      	pop	{r4, r5, r6, pc}
 8011b2a:	bf00      	nop
 8011b2c:	20000010 	.word	0x20000010

08011b30 <_sbrk_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	4d06      	ldr	r5, [pc, #24]	; (8011b4c <_sbrk_r+0x1c>)
 8011b34:	2300      	movs	r3, #0
 8011b36:	4604      	mov	r4, r0
 8011b38:	4608      	mov	r0, r1
 8011b3a:	602b      	str	r3, [r5, #0]
 8011b3c:	f7f0 fa46 	bl	8001fcc <_sbrk>
 8011b40:	1c43      	adds	r3, r0, #1
 8011b42:	d102      	bne.n	8011b4a <_sbrk_r+0x1a>
 8011b44:	682b      	ldr	r3, [r5, #0]
 8011b46:	b103      	cbz	r3, 8011b4a <_sbrk_r+0x1a>
 8011b48:	6023      	str	r3, [r4, #0]
 8011b4a:	bd38      	pop	{r3, r4, r5, pc}
 8011b4c:	200026c0 	.word	0x200026c0

08011b50 <nanf>:
 8011b50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011b58 <nanf+0x8>
 8011b54:	4770      	bx	lr
 8011b56:	bf00      	nop
 8011b58:	7fc00000 	.word	0x7fc00000

08011b5c <sniprintf>:
 8011b5c:	b40c      	push	{r2, r3}
 8011b5e:	b530      	push	{r4, r5, lr}
 8011b60:	4b17      	ldr	r3, [pc, #92]	; (8011bc0 <sniprintf+0x64>)
 8011b62:	1e0c      	subs	r4, r1, #0
 8011b64:	681d      	ldr	r5, [r3, #0]
 8011b66:	b09d      	sub	sp, #116	; 0x74
 8011b68:	da08      	bge.n	8011b7c <sniprintf+0x20>
 8011b6a:	238b      	movs	r3, #139	; 0x8b
 8011b6c:	602b      	str	r3, [r5, #0]
 8011b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b72:	b01d      	add	sp, #116	; 0x74
 8011b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b78:	b002      	add	sp, #8
 8011b7a:	4770      	bx	lr
 8011b7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011b80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011b84:	bf14      	ite	ne
 8011b86:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011b8a:	4623      	moveq	r3, r4
 8011b8c:	9304      	str	r3, [sp, #16]
 8011b8e:	9307      	str	r3, [sp, #28]
 8011b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b94:	9002      	str	r0, [sp, #8]
 8011b96:	9006      	str	r0, [sp, #24]
 8011b98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011b9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011b9e:	ab21      	add	r3, sp, #132	; 0x84
 8011ba0:	a902      	add	r1, sp, #8
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	9301      	str	r3, [sp, #4]
 8011ba6:	f002 ffab 	bl	8014b00 <_svfiprintf_r>
 8011baa:	1c43      	adds	r3, r0, #1
 8011bac:	bfbc      	itt	lt
 8011bae:	238b      	movlt	r3, #139	; 0x8b
 8011bb0:	602b      	strlt	r3, [r5, #0]
 8011bb2:	2c00      	cmp	r4, #0
 8011bb4:	d0dd      	beq.n	8011b72 <sniprintf+0x16>
 8011bb6:	9b02      	ldr	r3, [sp, #8]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	701a      	strb	r2, [r3, #0]
 8011bbc:	e7d9      	b.n	8011b72 <sniprintf+0x16>
 8011bbe:	bf00      	nop
 8011bc0:	20000010 	.word	0x20000010

08011bc4 <siprintf>:
 8011bc4:	b40e      	push	{r1, r2, r3}
 8011bc6:	b500      	push	{lr}
 8011bc8:	b09c      	sub	sp, #112	; 0x70
 8011bca:	ab1d      	add	r3, sp, #116	; 0x74
 8011bcc:	9002      	str	r0, [sp, #8]
 8011bce:	9006      	str	r0, [sp, #24]
 8011bd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011bd4:	4809      	ldr	r0, [pc, #36]	; (8011bfc <siprintf+0x38>)
 8011bd6:	9107      	str	r1, [sp, #28]
 8011bd8:	9104      	str	r1, [sp, #16]
 8011bda:	4909      	ldr	r1, [pc, #36]	; (8011c00 <siprintf+0x3c>)
 8011bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011be0:	9105      	str	r1, [sp, #20]
 8011be2:	6800      	ldr	r0, [r0, #0]
 8011be4:	9301      	str	r3, [sp, #4]
 8011be6:	a902      	add	r1, sp, #8
 8011be8:	f002 ff8a 	bl	8014b00 <_svfiprintf_r>
 8011bec:	9b02      	ldr	r3, [sp, #8]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	701a      	strb	r2, [r3, #0]
 8011bf2:	b01c      	add	sp, #112	; 0x70
 8011bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bf8:	b003      	add	sp, #12
 8011bfa:	4770      	bx	lr
 8011bfc:	20000010 	.word	0x20000010
 8011c00:	ffff0208 	.word	0xffff0208

08011c04 <__sread>:
 8011c04:	b510      	push	{r4, lr}
 8011c06:	460c      	mov	r4, r1
 8011c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c0c:	f003 f878 	bl	8014d00 <_read_r>
 8011c10:	2800      	cmp	r0, #0
 8011c12:	bfab      	itete	ge
 8011c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c16:	89a3      	ldrhlt	r3, [r4, #12]
 8011c18:	181b      	addge	r3, r3, r0
 8011c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c1e:	bfac      	ite	ge
 8011c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c22:	81a3      	strhlt	r3, [r4, #12]
 8011c24:	bd10      	pop	{r4, pc}

08011c26 <__swrite>:
 8011c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c2a:	461f      	mov	r7, r3
 8011c2c:	898b      	ldrh	r3, [r1, #12]
 8011c2e:	05db      	lsls	r3, r3, #23
 8011c30:	4605      	mov	r5, r0
 8011c32:	460c      	mov	r4, r1
 8011c34:	4616      	mov	r6, r2
 8011c36:	d505      	bpl.n	8011c44 <__swrite+0x1e>
 8011c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c3c:	2302      	movs	r3, #2
 8011c3e:	2200      	movs	r2, #0
 8011c40:	f002 f9a6 	bl	8013f90 <_lseek_r>
 8011c44:	89a3      	ldrh	r3, [r4, #12]
 8011c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c4e:	81a3      	strh	r3, [r4, #12]
 8011c50:	4632      	mov	r2, r6
 8011c52:	463b      	mov	r3, r7
 8011c54:	4628      	mov	r0, r5
 8011c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5a:	f000 bec5 	b.w	80129e8 <_write_r>

08011c5e <__sseek>:
 8011c5e:	b510      	push	{r4, lr}
 8011c60:	460c      	mov	r4, r1
 8011c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c66:	f002 f993 	bl	8013f90 <_lseek_r>
 8011c6a:	1c43      	adds	r3, r0, #1
 8011c6c:	89a3      	ldrh	r3, [r4, #12]
 8011c6e:	bf15      	itete	ne
 8011c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c7a:	81a3      	strheq	r3, [r4, #12]
 8011c7c:	bf18      	it	ne
 8011c7e:	81a3      	strhne	r3, [r4, #12]
 8011c80:	bd10      	pop	{r4, pc}

08011c82 <__sclose>:
 8011c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c86:	f000 bec1 	b.w	8012a0c <_close_r>

08011c8a <sulp>:
 8011c8a:	b570      	push	{r4, r5, r6, lr}
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	460d      	mov	r5, r1
 8011c90:	ec45 4b10 	vmov	d0, r4, r5
 8011c94:	4616      	mov	r6, r2
 8011c96:	f002 fd25 	bl	80146e4 <__ulp>
 8011c9a:	ec51 0b10 	vmov	r0, r1, d0
 8011c9e:	b17e      	cbz	r6, 8011cc0 <sulp+0x36>
 8011ca0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011ca4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	dd09      	ble.n	8011cc0 <sulp+0x36>
 8011cac:	051b      	lsls	r3, r3, #20
 8011cae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011cb2:	2400      	movs	r4, #0
 8011cb4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011cb8:	4622      	mov	r2, r4
 8011cba:	462b      	mov	r3, r5
 8011cbc:	f7ee fcb4 	bl	8000628 <__aeabi_dmul>
 8011cc0:	bd70      	pop	{r4, r5, r6, pc}
 8011cc2:	0000      	movs	r0, r0
 8011cc4:	0000      	movs	r0, r0
	...

08011cc8 <_strtod_l>:
 8011cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ccc:	ed2d 8b02 	vpush	{d8}
 8011cd0:	b09d      	sub	sp, #116	; 0x74
 8011cd2:	461f      	mov	r7, r3
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	9318      	str	r3, [sp, #96]	; 0x60
 8011cd8:	4ba2      	ldr	r3, [pc, #648]	; (8011f64 <_strtod_l+0x29c>)
 8011cda:	9213      	str	r2, [sp, #76]	; 0x4c
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	9305      	str	r3, [sp, #20]
 8011ce0:	4604      	mov	r4, r0
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	4688      	mov	r8, r1
 8011ce6:	f7ee fa8b 	bl	8000200 <strlen>
 8011cea:	f04f 0a00 	mov.w	sl, #0
 8011cee:	4605      	mov	r5, r0
 8011cf0:	f04f 0b00 	mov.w	fp, #0
 8011cf4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011cfa:	781a      	ldrb	r2, [r3, #0]
 8011cfc:	2a2b      	cmp	r2, #43	; 0x2b
 8011cfe:	d04e      	beq.n	8011d9e <_strtod_l+0xd6>
 8011d00:	d83b      	bhi.n	8011d7a <_strtod_l+0xb2>
 8011d02:	2a0d      	cmp	r2, #13
 8011d04:	d834      	bhi.n	8011d70 <_strtod_l+0xa8>
 8011d06:	2a08      	cmp	r2, #8
 8011d08:	d834      	bhi.n	8011d74 <_strtod_l+0xac>
 8011d0a:	2a00      	cmp	r2, #0
 8011d0c:	d03e      	beq.n	8011d8c <_strtod_l+0xc4>
 8011d0e:	2300      	movs	r3, #0
 8011d10:	930a      	str	r3, [sp, #40]	; 0x28
 8011d12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011d14:	7833      	ldrb	r3, [r6, #0]
 8011d16:	2b30      	cmp	r3, #48	; 0x30
 8011d18:	f040 80b0 	bne.w	8011e7c <_strtod_l+0x1b4>
 8011d1c:	7873      	ldrb	r3, [r6, #1]
 8011d1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011d22:	2b58      	cmp	r3, #88	; 0x58
 8011d24:	d168      	bne.n	8011df8 <_strtod_l+0x130>
 8011d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d28:	9301      	str	r3, [sp, #4]
 8011d2a:	ab18      	add	r3, sp, #96	; 0x60
 8011d2c:	9702      	str	r7, [sp, #8]
 8011d2e:	9300      	str	r3, [sp, #0]
 8011d30:	4a8d      	ldr	r2, [pc, #564]	; (8011f68 <_strtod_l+0x2a0>)
 8011d32:	ab19      	add	r3, sp, #100	; 0x64
 8011d34:	a917      	add	r1, sp, #92	; 0x5c
 8011d36:	4620      	mov	r0, r4
 8011d38:	f001 fe1e 	bl	8013978 <__gethex>
 8011d3c:	f010 0707 	ands.w	r7, r0, #7
 8011d40:	4605      	mov	r5, r0
 8011d42:	d005      	beq.n	8011d50 <_strtod_l+0x88>
 8011d44:	2f06      	cmp	r7, #6
 8011d46:	d12c      	bne.n	8011da2 <_strtod_l+0xda>
 8011d48:	3601      	adds	r6, #1
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	9617      	str	r6, [sp, #92]	; 0x5c
 8011d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8011d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f040 8590 	bne.w	8012878 <_strtod_l+0xbb0>
 8011d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d5a:	b1eb      	cbz	r3, 8011d98 <_strtod_l+0xd0>
 8011d5c:	4652      	mov	r2, sl
 8011d5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011d62:	ec43 2b10 	vmov	d0, r2, r3
 8011d66:	b01d      	add	sp, #116	; 0x74
 8011d68:	ecbd 8b02 	vpop	{d8}
 8011d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d70:	2a20      	cmp	r2, #32
 8011d72:	d1cc      	bne.n	8011d0e <_strtod_l+0x46>
 8011d74:	3301      	adds	r3, #1
 8011d76:	9317      	str	r3, [sp, #92]	; 0x5c
 8011d78:	e7be      	b.n	8011cf8 <_strtod_l+0x30>
 8011d7a:	2a2d      	cmp	r2, #45	; 0x2d
 8011d7c:	d1c7      	bne.n	8011d0e <_strtod_l+0x46>
 8011d7e:	2201      	movs	r2, #1
 8011d80:	920a      	str	r2, [sp, #40]	; 0x28
 8011d82:	1c5a      	adds	r2, r3, #1
 8011d84:	9217      	str	r2, [sp, #92]	; 0x5c
 8011d86:	785b      	ldrb	r3, [r3, #1]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d1c2      	bne.n	8011d12 <_strtod_l+0x4a>
 8011d8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	f040 856e 	bne.w	8012874 <_strtod_l+0xbac>
 8011d98:	4652      	mov	r2, sl
 8011d9a:	465b      	mov	r3, fp
 8011d9c:	e7e1      	b.n	8011d62 <_strtod_l+0x9a>
 8011d9e:	2200      	movs	r2, #0
 8011da0:	e7ee      	b.n	8011d80 <_strtod_l+0xb8>
 8011da2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011da4:	b13a      	cbz	r2, 8011db6 <_strtod_l+0xee>
 8011da6:	2135      	movs	r1, #53	; 0x35
 8011da8:	a81a      	add	r0, sp, #104	; 0x68
 8011daa:	f002 fda6 	bl	80148fa <__copybits>
 8011dae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011db0:	4620      	mov	r0, r4
 8011db2:	f002 f965 	bl	8014080 <_Bfree>
 8011db6:	3f01      	subs	r7, #1
 8011db8:	2f04      	cmp	r7, #4
 8011dba:	d806      	bhi.n	8011dca <_strtod_l+0x102>
 8011dbc:	e8df f007 	tbb	[pc, r7]
 8011dc0:	1714030a 	.word	0x1714030a
 8011dc4:	0a          	.byte	0x0a
 8011dc5:	00          	.byte	0x00
 8011dc6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011dca:	0728      	lsls	r0, r5, #28
 8011dcc:	d5c0      	bpl.n	8011d50 <_strtod_l+0x88>
 8011dce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011dd2:	e7bd      	b.n	8011d50 <_strtod_l+0x88>
 8011dd4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011dd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011dda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011dde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011de2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011de6:	e7f0      	b.n	8011dca <_strtod_l+0x102>
 8011de8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8011f6c <_strtod_l+0x2a4>
 8011dec:	e7ed      	b.n	8011dca <_strtod_l+0x102>
 8011dee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011df2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011df6:	e7e8      	b.n	8011dca <_strtod_l+0x102>
 8011df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011dfa:	1c5a      	adds	r2, r3, #1
 8011dfc:	9217      	str	r2, [sp, #92]	; 0x5c
 8011dfe:	785b      	ldrb	r3, [r3, #1]
 8011e00:	2b30      	cmp	r3, #48	; 0x30
 8011e02:	d0f9      	beq.n	8011df8 <_strtod_l+0x130>
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d0a3      	beq.n	8011d50 <_strtod_l+0x88>
 8011e08:	2301      	movs	r3, #1
 8011e0a:	f04f 0900 	mov.w	r9, #0
 8011e0e:	9304      	str	r3, [sp, #16]
 8011e10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011e12:	9308      	str	r3, [sp, #32]
 8011e14:	f8cd 901c 	str.w	r9, [sp, #28]
 8011e18:	464f      	mov	r7, r9
 8011e1a:	220a      	movs	r2, #10
 8011e1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011e1e:	7806      	ldrb	r6, [r0, #0]
 8011e20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011e24:	b2d9      	uxtb	r1, r3
 8011e26:	2909      	cmp	r1, #9
 8011e28:	d92a      	bls.n	8011e80 <_strtod_l+0x1b8>
 8011e2a:	9905      	ldr	r1, [sp, #20]
 8011e2c:	462a      	mov	r2, r5
 8011e2e:	f002 ff83 	bl	8014d38 <strncmp>
 8011e32:	b398      	cbz	r0, 8011e9c <_strtod_l+0x1d4>
 8011e34:	2000      	movs	r0, #0
 8011e36:	4632      	mov	r2, r6
 8011e38:	463d      	mov	r5, r7
 8011e3a:	9005      	str	r0, [sp, #20]
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	2a65      	cmp	r2, #101	; 0x65
 8011e40:	d001      	beq.n	8011e46 <_strtod_l+0x17e>
 8011e42:	2a45      	cmp	r2, #69	; 0x45
 8011e44:	d118      	bne.n	8011e78 <_strtod_l+0x1b0>
 8011e46:	b91d      	cbnz	r5, 8011e50 <_strtod_l+0x188>
 8011e48:	9a04      	ldr	r2, [sp, #16]
 8011e4a:	4302      	orrs	r2, r0
 8011e4c:	d09e      	beq.n	8011d8c <_strtod_l+0xc4>
 8011e4e:	2500      	movs	r5, #0
 8011e50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8011e54:	f108 0201 	add.w	r2, r8, #1
 8011e58:	9217      	str	r2, [sp, #92]	; 0x5c
 8011e5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011e5e:	2a2b      	cmp	r2, #43	; 0x2b
 8011e60:	d075      	beq.n	8011f4e <_strtod_l+0x286>
 8011e62:	2a2d      	cmp	r2, #45	; 0x2d
 8011e64:	d07b      	beq.n	8011f5e <_strtod_l+0x296>
 8011e66:	f04f 0c00 	mov.w	ip, #0
 8011e6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011e6e:	2909      	cmp	r1, #9
 8011e70:	f240 8082 	bls.w	8011f78 <_strtod_l+0x2b0>
 8011e74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011e78:	2600      	movs	r6, #0
 8011e7a:	e09d      	b.n	8011fb8 <_strtod_l+0x2f0>
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	e7c4      	b.n	8011e0a <_strtod_l+0x142>
 8011e80:	2f08      	cmp	r7, #8
 8011e82:	bfd8      	it	le
 8011e84:	9907      	ldrle	r1, [sp, #28]
 8011e86:	f100 0001 	add.w	r0, r0, #1
 8011e8a:	bfda      	itte	le
 8011e8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011e90:	9307      	strle	r3, [sp, #28]
 8011e92:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011e96:	3701      	adds	r7, #1
 8011e98:	9017      	str	r0, [sp, #92]	; 0x5c
 8011e9a:	e7bf      	b.n	8011e1c <_strtod_l+0x154>
 8011e9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011e9e:	195a      	adds	r2, r3, r5
 8011ea0:	9217      	str	r2, [sp, #92]	; 0x5c
 8011ea2:	5d5a      	ldrb	r2, [r3, r5]
 8011ea4:	2f00      	cmp	r7, #0
 8011ea6:	d037      	beq.n	8011f18 <_strtod_l+0x250>
 8011ea8:	9005      	str	r0, [sp, #20]
 8011eaa:	463d      	mov	r5, r7
 8011eac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011eb0:	2b09      	cmp	r3, #9
 8011eb2:	d912      	bls.n	8011eda <_strtod_l+0x212>
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	e7c2      	b.n	8011e3e <_strtod_l+0x176>
 8011eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011eba:	1c5a      	adds	r2, r3, #1
 8011ebc:	9217      	str	r2, [sp, #92]	; 0x5c
 8011ebe:	785a      	ldrb	r2, [r3, #1]
 8011ec0:	3001      	adds	r0, #1
 8011ec2:	2a30      	cmp	r2, #48	; 0x30
 8011ec4:	d0f8      	beq.n	8011eb8 <_strtod_l+0x1f0>
 8011ec6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011eca:	2b08      	cmp	r3, #8
 8011ecc:	f200 84d9 	bhi.w	8012882 <_strtod_l+0xbba>
 8011ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ed2:	9005      	str	r0, [sp, #20]
 8011ed4:	2000      	movs	r0, #0
 8011ed6:	9308      	str	r3, [sp, #32]
 8011ed8:	4605      	mov	r5, r0
 8011eda:	3a30      	subs	r2, #48	; 0x30
 8011edc:	f100 0301 	add.w	r3, r0, #1
 8011ee0:	d014      	beq.n	8011f0c <_strtod_l+0x244>
 8011ee2:	9905      	ldr	r1, [sp, #20]
 8011ee4:	4419      	add	r1, r3
 8011ee6:	9105      	str	r1, [sp, #20]
 8011ee8:	462b      	mov	r3, r5
 8011eea:	eb00 0e05 	add.w	lr, r0, r5
 8011eee:	210a      	movs	r1, #10
 8011ef0:	4573      	cmp	r3, lr
 8011ef2:	d113      	bne.n	8011f1c <_strtod_l+0x254>
 8011ef4:	182b      	adds	r3, r5, r0
 8011ef6:	2b08      	cmp	r3, #8
 8011ef8:	f105 0501 	add.w	r5, r5, #1
 8011efc:	4405      	add	r5, r0
 8011efe:	dc1c      	bgt.n	8011f3a <_strtod_l+0x272>
 8011f00:	9907      	ldr	r1, [sp, #28]
 8011f02:	230a      	movs	r3, #10
 8011f04:	fb03 2301 	mla	r3, r3, r1, r2
 8011f08:	9307      	str	r3, [sp, #28]
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011f0e:	1c51      	adds	r1, r2, #1
 8011f10:	9117      	str	r1, [sp, #92]	; 0x5c
 8011f12:	7852      	ldrb	r2, [r2, #1]
 8011f14:	4618      	mov	r0, r3
 8011f16:	e7c9      	b.n	8011eac <_strtod_l+0x1e4>
 8011f18:	4638      	mov	r0, r7
 8011f1a:	e7d2      	b.n	8011ec2 <_strtod_l+0x1fa>
 8011f1c:	2b08      	cmp	r3, #8
 8011f1e:	dc04      	bgt.n	8011f2a <_strtod_l+0x262>
 8011f20:	9e07      	ldr	r6, [sp, #28]
 8011f22:	434e      	muls	r6, r1
 8011f24:	9607      	str	r6, [sp, #28]
 8011f26:	3301      	adds	r3, #1
 8011f28:	e7e2      	b.n	8011ef0 <_strtod_l+0x228>
 8011f2a:	f103 0c01 	add.w	ip, r3, #1
 8011f2e:	f1bc 0f10 	cmp.w	ip, #16
 8011f32:	bfd8      	it	le
 8011f34:	fb01 f909 	mulle.w	r9, r1, r9
 8011f38:	e7f5      	b.n	8011f26 <_strtod_l+0x25e>
 8011f3a:	2d10      	cmp	r5, #16
 8011f3c:	bfdc      	itt	le
 8011f3e:	230a      	movle	r3, #10
 8011f40:	fb03 2909 	mlale	r9, r3, r9, r2
 8011f44:	e7e1      	b.n	8011f0a <_strtod_l+0x242>
 8011f46:	2300      	movs	r3, #0
 8011f48:	9305      	str	r3, [sp, #20]
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	e77c      	b.n	8011e48 <_strtod_l+0x180>
 8011f4e:	f04f 0c00 	mov.w	ip, #0
 8011f52:	f108 0202 	add.w	r2, r8, #2
 8011f56:	9217      	str	r2, [sp, #92]	; 0x5c
 8011f58:	f898 2002 	ldrb.w	r2, [r8, #2]
 8011f5c:	e785      	b.n	8011e6a <_strtod_l+0x1a2>
 8011f5e:	f04f 0c01 	mov.w	ip, #1
 8011f62:	e7f6      	b.n	8011f52 <_strtod_l+0x28a>
 8011f64:	08015980 	.word	0x08015980
 8011f68:	08015738 	.word	0x08015738
 8011f6c:	7ff00000 	.word	0x7ff00000
 8011f70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011f72:	1c51      	adds	r1, r2, #1
 8011f74:	9117      	str	r1, [sp, #92]	; 0x5c
 8011f76:	7852      	ldrb	r2, [r2, #1]
 8011f78:	2a30      	cmp	r2, #48	; 0x30
 8011f7a:	d0f9      	beq.n	8011f70 <_strtod_l+0x2a8>
 8011f7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011f80:	2908      	cmp	r1, #8
 8011f82:	f63f af79 	bhi.w	8011e78 <_strtod_l+0x1b0>
 8011f86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011f8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011f8c:	9206      	str	r2, [sp, #24]
 8011f8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011f90:	1c51      	adds	r1, r2, #1
 8011f92:	9117      	str	r1, [sp, #92]	; 0x5c
 8011f94:	7852      	ldrb	r2, [r2, #1]
 8011f96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8011f9a:	2e09      	cmp	r6, #9
 8011f9c:	d937      	bls.n	801200e <_strtod_l+0x346>
 8011f9e:	9e06      	ldr	r6, [sp, #24]
 8011fa0:	1b89      	subs	r1, r1, r6
 8011fa2:	2908      	cmp	r1, #8
 8011fa4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011fa8:	dc02      	bgt.n	8011fb0 <_strtod_l+0x2e8>
 8011faa:	4576      	cmp	r6, lr
 8011fac:	bfa8      	it	ge
 8011fae:	4676      	movge	r6, lr
 8011fb0:	f1bc 0f00 	cmp.w	ip, #0
 8011fb4:	d000      	beq.n	8011fb8 <_strtod_l+0x2f0>
 8011fb6:	4276      	negs	r6, r6
 8011fb8:	2d00      	cmp	r5, #0
 8011fba:	d14d      	bne.n	8012058 <_strtod_l+0x390>
 8011fbc:	9904      	ldr	r1, [sp, #16]
 8011fbe:	4301      	orrs	r1, r0
 8011fc0:	f47f aec6 	bne.w	8011d50 <_strtod_l+0x88>
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	f47f aee1 	bne.w	8011d8c <_strtod_l+0xc4>
 8011fca:	2a69      	cmp	r2, #105	; 0x69
 8011fcc:	d027      	beq.n	801201e <_strtod_l+0x356>
 8011fce:	dc24      	bgt.n	801201a <_strtod_l+0x352>
 8011fd0:	2a49      	cmp	r2, #73	; 0x49
 8011fd2:	d024      	beq.n	801201e <_strtod_l+0x356>
 8011fd4:	2a4e      	cmp	r2, #78	; 0x4e
 8011fd6:	f47f aed9 	bne.w	8011d8c <_strtod_l+0xc4>
 8011fda:	499f      	ldr	r1, [pc, #636]	; (8012258 <_strtod_l+0x590>)
 8011fdc:	a817      	add	r0, sp, #92	; 0x5c
 8011fde:	f001 ff23 	bl	8013e28 <__match>
 8011fe2:	2800      	cmp	r0, #0
 8011fe4:	f43f aed2 	beq.w	8011d8c <_strtod_l+0xc4>
 8011fe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	2b28      	cmp	r3, #40	; 0x28
 8011fee:	d12d      	bne.n	801204c <_strtod_l+0x384>
 8011ff0:	499a      	ldr	r1, [pc, #616]	; (801225c <_strtod_l+0x594>)
 8011ff2:	aa1a      	add	r2, sp, #104	; 0x68
 8011ff4:	a817      	add	r0, sp, #92	; 0x5c
 8011ff6:	f001 ff2b 	bl	8013e50 <__hexnan>
 8011ffa:	2805      	cmp	r0, #5
 8011ffc:	d126      	bne.n	801204c <_strtod_l+0x384>
 8011ffe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012000:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012004:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012008:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801200c:	e6a0      	b.n	8011d50 <_strtod_l+0x88>
 801200e:	210a      	movs	r1, #10
 8012010:	fb01 2e0e 	mla	lr, r1, lr, r2
 8012014:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012018:	e7b9      	b.n	8011f8e <_strtod_l+0x2c6>
 801201a:	2a6e      	cmp	r2, #110	; 0x6e
 801201c:	e7db      	b.n	8011fd6 <_strtod_l+0x30e>
 801201e:	4990      	ldr	r1, [pc, #576]	; (8012260 <_strtod_l+0x598>)
 8012020:	a817      	add	r0, sp, #92	; 0x5c
 8012022:	f001 ff01 	bl	8013e28 <__match>
 8012026:	2800      	cmp	r0, #0
 8012028:	f43f aeb0 	beq.w	8011d8c <_strtod_l+0xc4>
 801202c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801202e:	498d      	ldr	r1, [pc, #564]	; (8012264 <_strtod_l+0x59c>)
 8012030:	3b01      	subs	r3, #1
 8012032:	a817      	add	r0, sp, #92	; 0x5c
 8012034:	9317      	str	r3, [sp, #92]	; 0x5c
 8012036:	f001 fef7 	bl	8013e28 <__match>
 801203a:	b910      	cbnz	r0, 8012042 <_strtod_l+0x37a>
 801203c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801203e:	3301      	adds	r3, #1
 8012040:	9317      	str	r3, [sp, #92]	; 0x5c
 8012042:	f8df b230 	ldr.w	fp, [pc, #560]	; 8012274 <_strtod_l+0x5ac>
 8012046:	f04f 0a00 	mov.w	sl, #0
 801204a:	e681      	b.n	8011d50 <_strtod_l+0x88>
 801204c:	4886      	ldr	r0, [pc, #536]	; (8012268 <_strtod_l+0x5a0>)
 801204e:	f002 fe6b 	bl	8014d28 <nan>
 8012052:	ec5b ab10 	vmov	sl, fp, d0
 8012056:	e67b      	b.n	8011d50 <_strtod_l+0x88>
 8012058:	9b05      	ldr	r3, [sp, #20]
 801205a:	9807      	ldr	r0, [sp, #28]
 801205c:	1af3      	subs	r3, r6, r3
 801205e:	2f00      	cmp	r7, #0
 8012060:	bf08      	it	eq
 8012062:	462f      	moveq	r7, r5
 8012064:	2d10      	cmp	r5, #16
 8012066:	9306      	str	r3, [sp, #24]
 8012068:	46a8      	mov	r8, r5
 801206a:	bfa8      	it	ge
 801206c:	f04f 0810 	movge.w	r8, #16
 8012070:	f7ee fa60 	bl	8000534 <__aeabi_ui2d>
 8012074:	2d09      	cmp	r5, #9
 8012076:	4682      	mov	sl, r0
 8012078:	468b      	mov	fp, r1
 801207a:	dd13      	ble.n	80120a4 <_strtod_l+0x3dc>
 801207c:	4b7b      	ldr	r3, [pc, #492]	; (801226c <_strtod_l+0x5a4>)
 801207e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012082:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012086:	f7ee facf 	bl	8000628 <__aeabi_dmul>
 801208a:	4682      	mov	sl, r0
 801208c:	4648      	mov	r0, r9
 801208e:	468b      	mov	fp, r1
 8012090:	f7ee fa50 	bl	8000534 <__aeabi_ui2d>
 8012094:	4602      	mov	r2, r0
 8012096:	460b      	mov	r3, r1
 8012098:	4650      	mov	r0, sl
 801209a:	4659      	mov	r1, fp
 801209c:	f7ee f90e 	bl	80002bc <__adddf3>
 80120a0:	4682      	mov	sl, r0
 80120a2:	468b      	mov	fp, r1
 80120a4:	2d0f      	cmp	r5, #15
 80120a6:	dc38      	bgt.n	801211a <_strtod_l+0x452>
 80120a8:	9b06      	ldr	r3, [sp, #24]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	f43f ae50 	beq.w	8011d50 <_strtod_l+0x88>
 80120b0:	dd24      	ble.n	80120fc <_strtod_l+0x434>
 80120b2:	2b16      	cmp	r3, #22
 80120b4:	dc0b      	bgt.n	80120ce <_strtod_l+0x406>
 80120b6:	496d      	ldr	r1, [pc, #436]	; (801226c <_strtod_l+0x5a4>)
 80120b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80120bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120c0:	4652      	mov	r2, sl
 80120c2:	465b      	mov	r3, fp
 80120c4:	f7ee fab0 	bl	8000628 <__aeabi_dmul>
 80120c8:	4682      	mov	sl, r0
 80120ca:	468b      	mov	fp, r1
 80120cc:	e640      	b.n	8011d50 <_strtod_l+0x88>
 80120ce:	9a06      	ldr	r2, [sp, #24]
 80120d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80120d4:	4293      	cmp	r3, r2
 80120d6:	db20      	blt.n	801211a <_strtod_l+0x452>
 80120d8:	4c64      	ldr	r4, [pc, #400]	; (801226c <_strtod_l+0x5a4>)
 80120da:	f1c5 050f 	rsb	r5, r5, #15
 80120de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80120e2:	4652      	mov	r2, sl
 80120e4:	465b      	mov	r3, fp
 80120e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120ea:	f7ee fa9d 	bl	8000628 <__aeabi_dmul>
 80120ee:	9b06      	ldr	r3, [sp, #24]
 80120f0:	1b5d      	subs	r5, r3, r5
 80120f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80120f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80120fa:	e7e3      	b.n	80120c4 <_strtod_l+0x3fc>
 80120fc:	9b06      	ldr	r3, [sp, #24]
 80120fe:	3316      	adds	r3, #22
 8012100:	db0b      	blt.n	801211a <_strtod_l+0x452>
 8012102:	9b05      	ldr	r3, [sp, #20]
 8012104:	1b9e      	subs	r6, r3, r6
 8012106:	4b59      	ldr	r3, [pc, #356]	; (801226c <_strtod_l+0x5a4>)
 8012108:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801210c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012110:	4650      	mov	r0, sl
 8012112:	4659      	mov	r1, fp
 8012114:	f7ee fbb2 	bl	800087c <__aeabi_ddiv>
 8012118:	e7d6      	b.n	80120c8 <_strtod_l+0x400>
 801211a:	9b06      	ldr	r3, [sp, #24]
 801211c:	eba5 0808 	sub.w	r8, r5, r8
 8012120:	4498      	add	r8, r3
 8012122:	f1b8 0f00 	cmp.w	r8, #0
 8012126:	dd74      	ble.n	8012212 <_strtod_l+0x54a>
 8012128:	f018 030f 	ands.w	r3, r8, #15
 801212c:	d00a      	beq.n	8012144 <_strtod_l+0x47c>
 801212e:	494f      	ldr	r1, [pc, #316]	; (801226c <_strtod_l+0x5a4>)
 8012130:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012134:	4652      	mov	r2, sl
 8012136:	465b      	mov	r3, fp
 8012138:	e9d1 0100 	ldrd	r0, r1, [r1]
 801213c:	f7ee fa74 	bl	8000628 <__aeabi_dmul>
 8012140:	4682      	mov	sl, r0
 8012142:	468b      	mov	fp, r1
 8012144:	f038 080f 	bics.w	r8, r8, #15
 8012148:	d04f      	beq.n	80121ea <_strtod_l+0x522>
 801214a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801214e:	dd22      	ble.n	8012196 <_strtod_l+0x4ce>
 8012150:	2500      	movs	r5, #0
 8012152:	462e      	mov	r6, r5
 8012154:	9507      	str	r5, [sp, #28]
 8012156:	9505      	str	r5, [sp, #20]
 8012158:	2322      	movs	r3, #34	; 0x22
 801215a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8012274 <_strtod_l+0x5ac>
 801215e:	6023      	str	r3, [r4, #0]
 8012160:	f04f 0a00 	mov.w	sl, #0
 8012164:	9b07      	ldr	r3, [sp, #28]
 8012166:	2b00      	cmp	r3, #0
 8012168:	f43f adf2 	beq.w	8011d50 <_strtod_l+0x88>
 801216c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801216e:	4620      	mov	r0, r4
 8012170:	f001 ff86 	bl	8014080 <_Bfree>
 8012174:	9905      	ldr	r1, [sp, #20]
 8012176:	4620      	mov	r0, r4
 8012178:	f001 ff82 	bl	8014080 <_Bfree>
 801217c:	4631      	mov	r1, r6
 801217e:	4620      	mov	r0, r4
 8012180:	f001 ff7e 	bl	8014080 <_Bfree>
 8012184:	9907      	ldr	r1, [sp, #28]
 8012186:	4620      	mov	r0, r4
 8012188:	f001 ff7a 	bl	8014080 <_Bfree>
 801218c:	4629      	mov	r1, r5
 801218e:	4620      	mov	r0, r4
 8012190:	f001 ff76 	bl	8014080 <_Bfree>
 8012194:	e5dc      	b.n	8011d50 <_strtod_l+0x88>
 8012196:	4b36      	ldr	r3, [pc, #216]	; (8012270 <_strtod_l+0x5a8>)
 8012198:	9304      	str	r3, [sp, #16]
 801219a:	2300      	movs	r3, #0
 801219c:	ea4f 1828 	mov.w	r8, r8, asr #4
 80121a0:	4650      	mov	r0, sl
 80121a2:	4659      	mov	r1, fp
 80121a4:	4699      	mov	r9, r3
 80121a6:	f1b8 0f01 	cmp.w	r8, #1
 80121aa:	dc21      	bgt.n	80121f0 <_strtod_l+0x528>
 80121ac:	b10b      	cbz	r3, 80121b2 <_strtod_l+0x4ea>
 80121ae:	4682      	mov	sl, r0
 80121b0:	468b      	mov	fp, r1
 80121b2:	4b2f      	ldr	r3, [pc, #188]	; (8012270 <_strtod_l+0x5a8>)
 80121b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80121b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80121bc:	4652      	mov	r2, sl
 80121be:	465b      	mov	r3, fp
 80121c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80121c4:	f7ee fa30 	bl	8000628 <__aeabi_dmul>
 80121c8:	4b2a      	ldr	r3, [pc, #168]	; (8012274 <_strtod_l+0x5ac>)
 80121ca:	460a      	mov	r2, r1
 80121cc:	400b      	ands	r3, r1
 80121ce:	492a      	ldr	r1, [pc, #168]	; (8012278 <_strtod_l+0x5b0>)
 80121d0:	428b      	cmp	r3, r1
 80121d2:	4682      	mov	sl, r0
 80121d4:	d8bc      	bhi.n	8012150 <_strtod_l+0x488>
 80121d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80121da:	428b      	cmp	r3, r1
 80121dc:	bf86      	itte	hi
 80121de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801227c <_strtod_l+0x5b4>
 80121e2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80121e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80121ea:	2300      	movs	r3, #0
 80121ec:	9304      	str	r3, [sp, #16]
 80121ee:	e084      	b.n	80122fa <_strtod_l+0x632>
 80121f0:	f018 0f01 	tst.w	r8, #1
 80121f4:	d005      	beq.n	8012202 <_strtod_l+0x53a>
 80121f6:	9b04      	ldr	r3, [sp, #16]
 80121f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fc:	f7ee fa14 	bl	8000628 <__aeabi_dmul>
 8012200:	2301      	movs	r3, #1
 8012202:	9a04      	ldr	r2, [sp, #16]
 8012204:	3208      	adds	r2, #8
 8012206:	f109 0901 	add.w	r9, r9, #1
 801220a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801220e:	9204      	str	r2, [sp, #16]
 8012210:	e7c9      	b.n	80121a6 <_strtod_l+0x4de>
 8012212:	d0ea      	beq.n	80121ea <_strtod_l+0x522>
 8012214:	f1c8 0800 	rsb	r8, r8, #0
 8012218:	f018 020f 	ands.w	r2, r8, #15
 801221c:	d00a      	beq.n	8012234 <_strtod_l+0x56c>
 801221e:	4b13      	ldr	r3, [pc, #76]	; (801226c <_strtod_l+0x5a4>)
 8012220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012224:	4650      	mov	r0, sl
 8012226:	4659      	mov	r1, fp
 8012228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801222c:	f7ee fb26 	bl	800087c <__aeabi_ddiv>
 8012230:	4682      	mov	sl, r0
 8012232:	468b      	mov	fp, r1
 8012234:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012238:	d0d7      	beq.n	80121ea <_strtod_l+0x522>
 801223a:	f1b8 0f1f 	cmp.w	r8, #31
 801223e:	dd1f      	ble.n	8012280 <_strtod_l+0x5b8>
 8012240:	2500      	movs	r5, #0
 8012242:	462e      	mov	r6, r5
 8012244:	9507      	str	r5, [sp, #28]
 8012246:	9505      	str	r5, [sp, #20]
 8012248:	2322      	movs	r3, #34	; 0x22
 801224a:	f04f 0a00 	mov.w	sl, #0
 801224e:	f04f 0b00 	mov.w	fp, #0
 8012252:	6023      	str	r3, [r4, #0]
 8012254:	e786      	b.n	8012164 <_strtod_l+0x49c>
 8012256:	bf00      	nop
 8012258:	08015709 	.word	0x08015709
 801225c:	0801574c 	.word	0x0801574c
 8012260:	08015701 	.word	0x08015701
 8012264:	0801588c 	.word	0x0801588c
 8012268:	08015b38 	.word	0x08015b38
 801226c:	08015a18 	.word	0x08015a18
 8012270:	080159f0 	.word	0x080159f0
 8012274:	7ff00000 	.word	0x7ff00000
 8012278:	7ca00000 	.word	0x7ca00000
 801227c:	7fefffff 	.word	0x7fefffff
 8012280:	f018 0310 	ands.w	r3, r8, #16
 8012284:	bf18      	it	ne
 8012286:	236a      	movne	r3, #106	; 0x6a
 8012288:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8012638 <_strtod_l+0x970>
 801228c:	9304      	str	r3, [sp, #16]
 801228e:	4650      	mov	r0, sl
 8012290:	4659      	mov	r1, fp
 8012292:	2300      	movs	r3, #0
 8012294:	f018 0f01 	tst.w	r8, #1
 8012298:	d004      	beq.n	80122a4 <_strtod_l+0x5dc>
 801229a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801229e:	f7ee f9c3 	bl	8000628 <__aeabi_dmul>
 80122a2:	2301      	movs	r3, #1
 80122a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80122a8:	f109 0908 	add.w	r9, r9, #8
 80122ac:	d1f2      	bne.n	8012294 <_strtod_l+0x5cc>
 80122ae:	b10b      	cbz	r3, 80122b4 <_strtod_l+0x5ec>
 80122b0:	4682      	mov	sl, r0
 80122b2:	468b      	mov	fp, r1
 80122b4:	9b04      	ldr	r3, [sp, #16]
 80122b6:	b1c3      	cbz	r3, 80122ea <_strtod_l+0x622>
 80122b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80122bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	4659      	mov	r1, fp
 80122c4:	dd11      	ble.n	80122ea <_strtod_l+0x622>
 80122c6:	2b1f      	cmp	r3, #31
 80122c8:	f340 8124 	ble.w	8012514 <_strtod_l+0x84c>
 80122cc:	2b34      	cmp	r3, #52	; 0x34
 80122ce:	bfde      	ittt	le
 80122d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80122d4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80122d8:	fa03 f202 	lslle.w	r2, r3, r2
 80122dc:	f04f 0a00 	mov.w	sl, #0
 80122e0:	bfcc      	ite	gt
 80122e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80122e6:	ea02 0b01 	andle.w	fp, r2, r1
 80122ea:	2200      	movs	r2, #0
 80122ec:	2300      	movs	r3, #0
 80122ee:	4650      	mov	r0, sl
 80122f0:	4659      	mov	r1, fp
 80122f2:	f7ee fc01 	bl	8000af8 <__aeabi_dcmpeq>
 80122f6:	2800      	cmp	r0, #0
 80122f8:	d1a2      	bne.n	8012240 <_strtod_l+0x578>
 80122fa:	9b07      	ldr	r3, [sp, #28]
 80122fc:	9300      	str	r3, [sp, #0]
 80122fe:	9908      	ldr	r1, [sp, #32]
 8012300:	462b      	mov	r3, r5
 8012302:	463a      	mov	r2, r7
 8012304:	4620      	mov	r0, r4
 8012306:	f001 ff23 	bl	8014150 <__s2b>
 801230a:	9007      	str	r0, [sp, #28]
 801230c:	2800      	cmp	r0, #0
 801230e:	f43f af1f 	beq.w	8012150 <_strtod_l+0x488>
 8012312:	9b05      	ldr	r3, [sp, #20]
 8012314:	1b9e      	subs	r6, r3, r6
 8012316:	9b06      	ldr	r3, [sp, #24]
 8012318:	2b00      	cmp	r3, #0
 801231a:	bfb4      	ite	lt
 801231c:	4633      	movlt	r3, r6
 801231e:	2300      	movge	r3, #0
 8012320:	930c      	str	r3, [sp, #48]	; 0x30
 8012322:	9b06      	ldr	r3, [sp, #24]
 8012324:	2500      	movs	r5, #0
 8012326:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801232a:	9312      	str	r3, [sp, #72]	; 0x48
 801232c:	462e      	mov	r6, r5
 801232e:	9b07      	ldr	r3, [sp, #28]
 8012330:	4620      	mov	r0, r4
 8012332:	6859      	ldr	r1, [r3, #4]
 8012334:	f001 fe64 	bl	8014000 <_Balloc>
 8012338:	9005      	str	r0, [sp, #20]
 801233a:	2800      	cmp	r0, #0
 801233c:	f43f af0c 	beq.w	8012158 <_strtod_l+0x490>
 8012340:	9b07      	ldr	r3, [sp, #28]
 8012342:	691a      	ldr	r2, [r3, #16]
 8012344:	3202      	adds	r2, #2
 8012346:	f103 010c 	add.w	r1, r3, #12
 801234a:	0092      	lsls	r2, r2, #2
 801234c:	300c      	adds	r0, #12
 801234e:	f7fe fc60 	bl	8010c12 <memcpy>
 8012352:	ec4b ab10 	vmov	d0, sl, fp
 8012356:	aa1a      	add	r2, sp, #104	; 0x68
 8012358:	a919      	add	r1, sp, #100	; 0x64
 801235a:	4620      	mov	r0, r4
 801235c:	f002 fa3e 	bl	80147dc <__d2b>
 8012360:	ec4b ab18 	vmov	d8, sl, fp
 8012364:	9018      	str	r0, [sp, #96]	; 0x60
 8012366:	2800      	cmp	r0, #0
 8012368:	f43f aef6 	beq.w	8012158 <_strtod_l+0x490>
 801236c:	2101      	movs	r1, #1
 801236e:	4620      	mov	r0, r4
 8012370:	f001 ff88 	bl	8014284 <__i2b>
 8012374:	4606      	mov	r6, r0
 8012376:	2800      	cmp	r0, #0
 8012378:	f43f aeee 	beq.w	8012158 <_strtod_l+0x490>
 801237c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801237e:	9904      	ldr	r1, [sp, #16]
 8012380:	2b00      	cmp	r3, #0
 8012382:	bfab      	itete	ge
 8012384:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8012386:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8012388:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801238a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801238e:	bfac      	ite	ge
 8012390:	eb03 0902 	addge.w	r9, r3, r2
 8012394:	1ad7      	sublt	r7, r2, r3
 8012396:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012398:	eba3 0801 	sub.w	r8, r3, r1
 801239c:	4490      	add	r8, r2
 801239e:	4ba1      	ldr	r3, [pc, #644]	; (8012624 <_strtod_l+0x95c>)
 80123a0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80123a4:	4598      	cmp	r8, r3
 80123a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80123aa:	f280 80c7 	bge.w	801253c <_strtod_l+0x874>
 80123ae:	eba3 0308 	sub.w	r3, r3, r8
 80123b2:	2b1f      	cmp	r3, #31
 80123b4:	eba2 0203 	sub.w	r2, r2, r3
 80123b8:	f04f 0101 	mov.w	r1, #1
 80123bc:	f300 80b1 	bgt.w	8012522 <_strtod_l+0x85a>
 80123c0:	fa01 f303 	lsl.w	r3, r1, r3
 80123c4:	930d      	str	r3, [sp, #52]	; 0x34
 80123c6:	2300      	movs	r3, #0
 80123c8:	9308      	str	r3, [sp, #32]
 80123ca:	eb09 0802 	add.w	r8, r9, r2
 80123ce:	9b04      	ldr	r3, [sp, #16]
 80123d0:	45c1      	cmp	r9, r8
 80123d2:	4417      	add	r7, r2
 80123d4:	441f      	add	r7, r3
 80123d6:	464b      	mov	r3, r9
 80123d8:	bfa8      	it	ge
 80123da:	4643      	movge	r3, r8
 80123dc:	42bb      	cmp	r3, r7
 80123de:	bfa8      	it	ge
 80123e0:	463b      	movge	r3, r7
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	bfc2      	ittt	gt
 80123e6:	eba8 0803 	subgt.w	r8, r8, r3
 80123ea:	1aff      	subgt	r7, r7, r3
 80123ec:	eba9 0903 	subgt.w	r9, r9, r3
 80123f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	dd17      	ble.n	8012426 <_strtod_l+0x75e>
 80123f6:	4631      	mov	r1, r6
 80123f8:	461a      	mov	r2, r3
 80123fa:	4620      	mov	r0, r4
 80123fc:	f002 f802 	bl	8014404 <__pow5mult>
 8012400:	4606      	mov	r6, r0
 8012402:	2800      	cmp	r0, #0
 8012404:	f43f aea8 	beq.w	8012158 <_strtod_l+0x490>
 8012408:	4601      	mov	r1, r0
 801240a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801240c:	4620      	mov	r0, r4
 801240e:	f001 ff4f 	bl	80142b0 <__multiply>
 8012412:	900b      	str	r0, [sp, #44]	; 0x2c
 8012414:	2800      	cmp	r0, #0
 8012416:	f43f ae9f 	beq.w	8012158 <_strtod_l+0x490>
 801241a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801241c:	4620      	mov	r0, r4
 801241e:	f001 fe2f 	bl	8014080 <_Bfree>
 8012422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012424:	9318      	str	r3, [sp, #96]	; 0x60
 8012426:	f1b8 0f00 	cmp.w	r8, #0
 801242a:	f300 808c 	bgt.w	8012546 <_strtod_l+0x87e>
 801242e:	9b06      	ldr	r3, [sp, #24]
 8012430:	2b00      	cmp	r3, #0
 8012432:	dd08      	ble.n	8012446 <_strtod_l+0x77e>
 8012434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012436:	9905      	ldr	r1, [sp, #20]
 8012438:	4620      	mov	r0, r4
 801243a:	f001 ffe3 	bl	8014404 <__pow5mult>
 801243e:	9005      	str	r0, [sp, #20]
 8012440:	2800      	cmp	r0, #0
 8012442:	f43f ae89 	beq.w	8012158 <_strtod_l+0x490>
 8012446:	2f00      	cmp	r7, #0
 8012448:	dd08      	ble.n	801245c <_strtod_l+0x794>
 801244a:	9905      	ldr	r1, [sp, #20]
 801244c:	463a      	mov	r2, r7
 801244e:	4620      	mov	r0, r4
 8012450:	f002 f832 	bl	80144b8 <__lshift>
 8012454:	9005      	str	r0, [sp, #20]
 8012456:	2800      	cmp	r0, #0
 8012458:	f43f ae7e 	beq.w	8012158 <_strtod_l+0x490>
 801245c:	f1b9 0f00 	cmp.w	r9, #0
 8012460:	dd08      	ble.n	8012474 <_strtod_l+0x7ac>
 8012462:	4631      	mov	r1, r6
 8012464:	464a      	mov	r2, r9
 8012466:	4620      	mov	r0, r4
 8012468:	f002 f826 	bl	80144b8 <__lshift>
 801246c:	4606      	mov	r6, r0
 801246e:	2800      	cmp	r0, #0
 8012470:	f43f ae72 	beq.w	8012158 <_strtod_l+0x490>
 8012474:	9a05      	ldr	r2, [sp, #20]
 8012476:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012478:	4620      	mov	r0, r4
 801247a:	f002 f8a9 	bl	80145d0 <__mdiff>
 801247e:	4605      	mov	r5, r0
 8012480:	2800      	cmp	r0, #0
 8012482:	f43f ae69 	beq.w	8012158 <_strtod_l+0x490>
 8012486:	68c3      	ldr	r3, [r0, #12]
 8012488:	930b      	str	r3, [sp, #44]	; 0x2c
 801248a:	2300      	movs	r3, #0
 801248c:	60c3      	str	r3, [r0, #12]
 801248e:	4631      	mov	r1, r6
 8012490:	f002 f882 	bl	8014598 <__mcmp>
 8012494:	2800      	cmp	r0, #0
 8012496:	da60      	bge.n	801255a <_strtod_l+0x892>
 8012498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801249a:	ea53 030a 	orrs.w	r3, r3, sl
 801249e:	f040 8082 	bne.w	80125a6 <_strtod_l+0x8de>
 80124a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d17d      	bne.n	80125a6 <_strtod_l+0x8de>
 80124aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80124ae:	0d1b      	lsrs	r3, r3, #20
 80124b0:	051b      	lsls	r3, r3, #20
 80124b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80124b6:	d976      	bls.n	80125a6 <_strtod_l+0x8de>
 80124b8:	696b      	ldr	r3, [r5, #20]
 80124ba:	b913      	cbnz	r3, 80124c2 <_strtod_l+0x7fa>
 80124bc:	692b      	ldr	r3, [r5, #16]
 80124be:	2b01      	cmp	r3, #1
 80124c0:	dd71      	ble.n	80125a6 <_strtod_l+0x8de>
 80124c2:	4629      	mov	r1, r5
 80124c4:	2201      	movs	r2, #1
 80124c6:	4620      	mov	r0, r4
 80124c8:	f001 fff6 	bl	80144b8 <__lshift>
 80124cc:	4631      	mov	r1, r6
 80124ce:	4605      	mov	r5, r0
 80124d0:	f002 f862 	bl	8014598 <__mcmp>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	dd66      	ble.n	80125a6 <_strtod_l+0x8de>
 80124d8:	9904      	ldr	r1, [sp, #16]
 80124da:	4a53      	ldr	r2, [pc, #332]	; (8012628 <_strtod_l+0x960>)
 80124dc:	465b      	mov	r3, fp
 80124de:	2900      	cmp	r1, #0
 80124e0:	f000 8081 	beq.w	80125e6 <_strtod_l+0x91e>
 80124e4:	ea02 010b 	and.w	r1, r2, fp
 80124e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80124ec:	dc7b      	bgt.n	80125e6 <_strtod_l+0x91e>
 80124ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80124f2:	f77f aea9 	ble.w	8012248 <_strtod_l+0x580>
 80124f6:	4b4d      	ldr	r3, [pc, #308]	; (801262c <_strtod_l+0x964>)
 80124f8:	4650      	mov	r0, sl
 80124fa:	4659      	mov	r1, fp
 80124fc:	2200      	movs	r2, #0
 80124fe:	f7ee f893 	bl	8000628 <__aeabi_dmul>
 8012502:	460b      	mov	r3, r1
 8012504:	4303      	orrs	r3, r0
 8012506:	bf08      	it	eq
 8012508:	2322      	moveq	r3, #34	; 0x22
 801250a:	4682      	mov	sl, r0
 801250c:	468b      	mov	fp, r1
 801250e:	bf08      	it	eq
 8012510:	6023      	streq	r3, [r4, #0]
 8012512:	e62b      	b.n	801216c <_strtod_l+0x4a4>
 8012514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012518:	fa02 f303 	lsl.w	r3, r2, r3
 801251c:	ea03 0a0a 	and.w	sl, r3, sl
 8012520:	e6e3      	b.n	80122ea <_strtod_l+0x622>
 8012522:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012526:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801252a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801252e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8012532:	fa01 f308 	lsl.w	r3, r1, r8
 8012536:	9308      	str	r3, [sp, #32]
 8012538:	910d      	str	r1, [sp, #52]	; 0x34
 801253a:	e746      	b.n	80123ca <_strtod_l+0x702>
 801253c:	2300      	movs	r3, #0
 801253e:	9308      	str	r3, [sp, #32]
 8012540:	2301      	movs	r3, #1
 8012542:	930d      	str	r3, [sp, #52]	; 0x34
 8012544:	e741      	b.n	80123ca <_strtod_l+0x702>
 8012546:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012548:	4642      	mov	r2, r8
 801254a:	4620      	mov	r0, r4
 801254c:	f001 ffb4 	bl	80144b8 <__lshift>
 8012550:	9018      	str	r0, [sp, #96]	; 0x60
 8012552:	2800      	cmp	r0, #0
 8012554:	f47f af6b 	bne.w	801242e <_strtod_l+0x766>
 8012558:	e5fe      	b.n	8012158 <_strtod_l+0x490>
 801255a:	465f      	mov	r7, fp
 801255c:	d16e      	bne.n	801263c <_strtod_l+0x974>
 801255e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012560:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012564:	b342      	cbz	r2, 80125b8 <_strtod_l+0x8f0>
 8012566:	4a32      	ldr	r2, [pc, #200]	; (8012630 <_strtod_l+0x968>)
 8012568:	4293      	cmp	r3, r2
 801256a:	d128      	bne.n	80125be <_strtod_l+0x8f6>
 801256c:	9b04      	ldr	r3, [sp, #16]
 801256e:	4651      	mov	r1, sl
 8012570:	b1eb      	cbz	r3, 80125ae <_strtod_l+0x8e6>
 8012572:	4b2d      	ldr	r3, [pc, #180]	; (8012628 <_strtod_l+0x960>)
 8012574:	403b      	ands	r3, r7
 8012576:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801257a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801257e:	d819      	bhi.n	80125b4 <_strtod_l+0x8ec>
 8012580:	0d1b      	lsrs	r3, r3, #20
 8012582:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012586:	fa02 f303 	lsl.w	r3, r2, r3
 801258a:	4299      	cmp	r1, r3
 801258c:	d117      	bne.n	80125be <_strtod_l+0x8f6>
 801258e:	4b29      	ldr	r3, [pc, #164]	; (8012634 <_strtod_l+0x96c>)
 8012590:	429f      	cmp	r7, r3
 8012592:	d102      	bne.n	801259a <_strtod_l+0x8d2>
 8012594:	3101      	adds	r1, #1
 8012596:	f43f addf 	beq.w	8012158 <_strtod_l+0x490>
 801259a:	4b23      	ldr	r3, [pc, #140]	; (8012628 <_strtod_l+0x960>)
 801259c:	403b      	ands	r3, r7
 801259e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80125a2:	f04f 0a00 	mov.w	sl, #0
 80125a6:	9b04      	ldr	r3, [sp, #16]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d1a4      	bne.n	80124f6 <_strtod_l+0x82e>
 80125ac:	e5de      	b.n	801216c <_strtod_l+0x4a4>
 80125ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125b2:	e7ea      	b.n	801258a <_strtod_l+0x8c2>
 80125b4:	4613      	mov	r3, r2
 80125b6:	e7e8      	b.n	801258a <_strtod_l+0x8c2>
 80125b8:	ea53 030a 	orrs.w	r3, r3, sl
 80125bc:	d08c      	beq.n	80124d8 <_strtod_l+0x810>
 80125be:	9b08      	ldr	r3, [sp, #32]
 80125c0:	b1db      	cbz	r3, 80125fa <_strtod_l+0x932>
 80125c2:	423b      	tst	r3, r7
 80125c4:	d0ef      	beq.n	80125a6 <_strtod_l+0x8de>
 80125c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125c8:	9a04      	ldr	r2, [sp, #16]
 80125ca:	4650      	mov	r0, sl
 80125cc:	4659      	mov	r1, fp
 80125ce:	b1c3      	cbz	r3, 8012602 <_strtod_l+0x93a>
 80125d0:	f7ff fb5b 	bl	8011c8a <sulp>
 80125d4:	4602      	mov	r2, r0
 80125d6:	460b      	mov	r3, r1
 80125d8:	ec51 0b18 	vmov	r0, r1, d8
 80125dc:	f7ed fe6e 	bl	80002bc <__adddf3>
 80125e0:	4682      	mov	sl, r0
 80125e2:	468b      	mov	fp, r1
 80125e4:	e7df      	b.n	80125a6 <_strtod_l+0x8de>
 80125e6:	4013      	ands	r3, r2
 80125e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80125ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80125f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80125f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80125f8:	e7d5      	b.n	80125a6 <_strtod_l+0x8de>
 80125fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125fc:	ea13 0f0a 	tst.w	r3, sl
 8012600:	e7e0      	b.n	80125c4 <_strtod_l+0x8fc>
 8012602:	f7ff fb42 	bl	8011c8a <sulp>
 8012606:	4602      	mov	r2, r0
 8012608:	460b      	mov	r3, r1
 801260a:	ec51 0b18 	vmov	r0, r1, d8
 801260e:	f7ed fe53 	bl	80002b8 <__aeabi_dsub>
 8012612:	2200      	movs	r2, #0
 8012614:	2300      	movs	r3, #0
 8012616:	4682      	mov	sl, r0
 8012618:	468b      	mov	fp, r1
 801261a:	f7ee fa6d 	bl	8000af8 <__aeabi_dcmpeq>
 801261e:	2800      	cmp	r0, #0
 8012620:	d0c1      	beq.n	80125a6 <_strtod_l+0x8de>
 8012622:	e611      	b.n	8012248 <_strtod_l+0x580>
 8012624:	fffffc02 	.word	0xfffffc02
 8012628:	7ff00000 	.word	0x7ff00000
 801262c:	39500000 	.word	0x39500000
 8012630:	000fffff 	.word	0x000fffff
 8012634:	7fefffff 	.word	0x7fefffff
 8012638:	08015760 	.word	0x08015760
 801263c:	4631      	mov	r1, r6
 801263e:	4628      	mov	r0, r5
 8012640:	f002 f928 	bl	8014894 <__ratio>
 8012644:	ec59 8b10 	vmov	r8, r9, d0
 8012648:	ee10 0a10 	vmov	r0, s0
 801264c:	2200      	movs	r2, #0
 801264e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012652:	4649      	mov	r1, r9
 8012654:	f7ee fa64 	bl	8000b20 <__aeabi_dcmple>
 8012658:	2800      	cmp	r0, #0
 801265a:	d07a      	beq.n	8012752 <_strtod_l+0xa8a>
 801265c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801265e:	2b00      	cmp	r3, #0
 8012660:	d04a      	beq.n	80126f8 <_strtod_l+0xa30>
 8012662:	4b95      	ldr	r3, [pc, #596]	; (80128b8 <_strtod_l+0xbf0>)
 8012664:	2200      	movs	r2, #0
 8012666:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801266a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80128b8 <_strtod_l+0xbf0>
 801266e:	f04f 0800 	mov.w	r8, #0
 8012672:	4b92      	ldr	r3, [pc, #584]	; (80128bc <_strtod_l+0xbf4>)
 8012674:	403b      	ands	r3, r7
 8012676:	930d      	str	r3, [sp, #52]	; 0x34
 8012678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801267a:	4b91      	ldr	r3, [pc, #580]	; (80128c0 <_strtod_l+0xbf8>)
 801267c:	429a      	cmp	r2, r3
 801267e:	f040 80b0 	bne.w	80127e2 <_strtod_l+0xb1a>
 8012682:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012686:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801268a:	ec4b ab10 	vmov	d0, sl, fp
 801268e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012692:	f002 f827 	bl	80146e4 <__ulp>
 8012696:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801269a:	ec53 2b10 	vmov	r2, r3, d0
 801269e:	f7ed ffc3 	bl	8000628 <__aeabi_dmul>
 80126a2:	4652      	mov	r2, sl
 80126a4:	465b      	mov	r3, fp
 80126a6:	f7ed fe09 	bl	80002bc <__adddf3>
 80126aa:	460b      	mov	r3, r1
 80126ac:	4983      	ldr	r1, [pc, #524]	; (80128bc <_strtod_l+0xbf4>)
 80126ae:	4a85      	ldr	r2, [pc, #532]	; (80128c4 <_strtod_l+0xbfc>)
 80126b0:	4019      	ands	r1, r3
 80126b2:	4291      	cmp	r1, r2
 80126b4:	4682      	mov	sl, r0
 80126b6:	d960      	bls.n	801277a <_strtod_l+0xab2>
 80126b8:	ee18 3a90 	vmov	r3, s17
 80126bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80126c0:	4293      	cmp	r3, r2
 80126c2:	d104      	bne.n	80126ce <_strtod_l+0xa06>
 80126c4:	ee18 3a10 	vmov	r3, s16
 80126c8:	3301      	adds	r3, #1
 80126ca:	f43f ad45 	beq.w	8012158 <_strtod_l+0x490>
 80126ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 80128d0 <_strtod_l+0xc08>
 80126d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80126d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80126d8:	4620      	mov	r0, r4
 80126da:	f001 fcd1 	bl	8014080 <_Bfree>
 80126de:	9905      	ldr	r1, [sp, #20]
 80126e0:	4620      	mov	r0, r4
 80126e2:	f001 fccd 	bl	8014080 <_Bfree>
 80126e6:	4631      	mov	r1, r6
 80126e8:	4620      	mov	r0, r4
 80126ea:	f001 fcc9 	bl	8014080 <_Bfree>
 80126ee:	4629      	mov	r1, r5
 80126f0:	4620      	mov	r0, r4
 80126f2:	f001 fcc5 	bl	8014080 <_Bfree>
 80126f6:	e61a      	b.n	801232e <_strtod_l+0x666>
 80126f8:	f1ba 0f00 	cmp.w	sl, #0
 80126fc:	d11b      	bne.n	8012736 <_strtod_l+0xa6e>
 80126fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012702:	b9f3      	cbnz	r3, 8012742 <_strtod_l+0xa7a>
 8012704:	4b6c      	ldr	r3, [pc, #432]	; (80128b8 <_strtod_l+0xbf0>)
 8012706:	2200      	movs	r2, #0
 8012708:	4640      	mov	r0, r8
 801270a:	4649      	mov	r1, r9
 801270c:	f7ee f9fe 	bl	8000b0c <__aeabi_dcmplt>
 8012710:	b9d0      	cbnz	r0, 8012748 <_strtod_l+0xa80>
 8012712:	4640      	mov	r0, r8
 8012714:	4649      	mov	r1, r9
 8012716:	4b6c      	ldr	r3, [pc, #432]	; (80128c8 <_strtod_l+0xc00>)
 8012718:	2200      	movs	r2, #0
 801271a:	f7ed ff85 	bl	8000628 <__aeabi_dmul>
 801271e:	4680      	mov	r8, r0
 8012720:	4689      	mov	r9, r1
 8012722:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012726:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801272a:	9315      	str	r3, [sp, #84]	; 0x54
 801272c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012730:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012734:	e79d      	b.n	8012672 <_strtod_l+0x9aa>
 8012736:	f1ba 0f01 	cmp.w	sl, #1
 801273a:	d102      	bne.n	8012742 <_strtod_l+0xa7a>
 801273c:	2f00      	cmp	r7, #0
 801273e:	f43f ad83 	beq.w	8012248 <_strtod_l+0x580>
 8012742:	4b62      	ldr	r3, [pc, #392]	; (80128cc <_strtod_l+0xc04>)
 8012744:	2200      	movs	r2, #0
 8012746:	e78e      	b.n	8012666 <_strtod_l+0x99e>
 8012748:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80128c8 <_strtod_l+0xc00>
 801274c:	f04f 0800 	mov.w	r8, #0
 8012750:	e7e7      	b.n	8012722 <_strtod_l+0xa5a>
 8012752:	4b5d      	ldr	r3, [pc, #372]	; (80128c8 <_strtod_l+0xc00>)
 8012754:	4640      	mov	r0, r8
 8012756:	4649      	mov	r1, r9
 8012758:	2200      	movs	r2, #0
 801275a:	f7ed ff65 	bl	8000628 <__aeabi_dmul>
 801275e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012760:	4680      	mov	r8, r0
 8012762:	4689      	mov	r9, r1
 8012764:	b933      	cbnz	r3, 8012774 <_strtod_l+0xaac>
 8012766:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801276a:	900e      	str	r0, [sp, #56]	; 0x38
 801276c:	930f      	str	r3, [sp, #60]	; 0x3c
 801276e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012772:	e7dd      	b.n	8012730 <_strtod_l+0xa68>
 8012774:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8012778:	e7f9      	b.n	801276e <_strtod_l+0xaa6>
 801277a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801277e:	9b04      	ldr	r3, [sp, #16]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d1a8      	bne.n	80126d6 <_strtod_l+0xa0e>
 8012784:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801278a:	0d1b      	lsrs	r3, r3, #20
 801278c:	051b      	lsls	r3, r3, #20
 801278e:	429a      	cmp	r2, r3
 8012790:	d1a1      	bne.n	80126d6 <_strtod_l+0xa0e>
 8012792:	4640      	mov	r0, r8
 8012794:	4649      	mov	r1, r9
 8012796:	f7ee fa8f 	bl	8000cb8 <__aeabi_d2lz>
 801279a:	f7ed ff17 	bl	80005cc <__aeabi_l2d>
 801279e:	4602      	mov	r2, r0
 80127a0:	460b      	mov	r3, r1
 80127a2:	4640      	mov	r0, r8
 80127a4:	4649      	mov	r1, r9
 80127a6:	f7ed fd87 	bl	80002b8 <__aeabi_dsub>
 80127aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80127ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80127b0:	ea43 030a 	orr.w	r3, r3, sl
 80127b4:	4313      	orrs	r3, r2
 80127b6:	4680      	mov	r8, r0
 80127b8:	4689      	mov	r9, r1
 80127ba:	d055      	beq.n	8012868 <_strtod_l+0xba0>
 80127bc:	a336      	add	r3, pc, #216	; (adr r3, 8012898 <_strtod_l+0xbd0>)
 80127be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c2:	f7ee f9a3 	bl	8000b0c <__aeabi_dcmplt>
 80127c6:	2800      	cmp	r0, #0
 80127c8:	f47f acd0 	bne.w	801216c <_strtod_l+0x4a4>
 80127cc:	a334      	add	r3, pc, #208	; (adr r3, 80128a0 <_strtod_l+0xbd8>)
 80127ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d2:	4640      	mov	r0, r8
 80127d4:	4649      	mov	r1, r9
 80127d6:	f7ee f9b7 	bl	8000b48 <__aeabi_dcmpgt>
 80127da:	2800      	cmp	r0, #0
 80127dc:	f43f af7b 	beq.w	80126d6 <_strtod_l+0xa0e>
 80127e0:	e4c4      	b.n	801216c <_strtod_l+0x4a4>
 80127e2:	9b04      	ldr	r3, [sp, #16]
 80127e4:	b333      	cbz	r3, 8012834 <_strtod_l+0xb6c>
 80127e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80127ec:	d822      	bhi.n	8012834 <_strtod_l+0xb6c>
 80127ee:	a32e      	add	r3, pc, #184	; (adr r3, 80128a8 <_strtod_l+0xbe0>)
 80127f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f4:	4640      	mov	r0, r8
 80127f6:	4649      	mov	r1, r9
 80127f8:	f7ee f992 	bl	8000b20 <__aeabi_dcmple>
 80127fc:	b1a0      	cbz	r0, 8012828 <_strtod_l+0xb60>
 80127fe:	4649      	mov	r1, r9
 8012800:	4640      	mov	r0, r8
 8012802:	f7ee f9e9 	bl	8000bd8 <__aeabi_d2uiz>
 8012806:	2801      	cmp	r0, #1
 8012808:	bf38      	it	cc
 801280a:	2001      	movcc	r0, #1
 801280c:	f7ed fe92 	bl	8000534 <__aeabi_ui2d>
 8012810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012812:	4680      	mov	r8, r0
 8012814:	4689      	mov	r9, r1
 8012816:	bb23      	cbnz	r3, 8012862 <_strtod_l+0xb9a>
 8012818:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801281c:	9010      	str	r0, [sp, #64]	; 0x40
 801281e:	9311      	str	r3, [sp, #68]	; 0x44
 8012820:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012824:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801282a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801282c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012830:	1a9b      	subs	r3, r3, r2
 8012832:	9309      	str	r3, [sp, #36]	; 0x24
 8012834:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012838:	eeb0 0a48 	vmov.f32	s0, s16
 801283c:	eef0 0a68 	vmov.f32	s1, s17
 8012840:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012844:	f001 ff4e 	bl	80146e4 <__ulp>
 8012848:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801284c:	ec53 2b10 	vmov	r2, r3, d0
 8012850:	f7ed feea 	bl	8000628 <__aeabi_dmul>
 8012854:	ec53 2b18 	vmov	r2, r3, d8
 8012858:	f7ed fd30 	bl	80002bc <__adddf3>
 801285c:	4682      	mov	sl, r0
 801285e:	468b      	mov	fp, r1
 8012860:	e78d      	b.n	801277e <_strtod_l+0xab6>
 8012862:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8012866:	e7db      	b.n	8012820 <_strtod_l+0xb58>
 8012868:	a311      	add	r3, pc, #68	; (adr r3, 80128b0 <_strtod_l+0xbe8>)
 801286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286e:	f7ee f94d 	bl	8000b0c <__aeabi_dcmplt>
 8012872:	e7b2      	b.n	80127da <_strtod_l+0xb12>
 8012874:	2300      	movs	r3, #0
 8012876:	930a      	str	r3, [sp, #40]	; 0x28
 8012878:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801287a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801287c:	6013      	str	r3, [r2, #0]
 801287e:	f7ff ba6b 	b.w	8011d58 <_strtod_l+0x90>
 8012882:	2a65      	cmp	r2, #101	; 0x65
 8012884:	f43f ab5f 	beq.w	8011f46 <_strtod_l+0x27e>
 8012888:	2a45      	cmp	r2, #69	; 0x45
 801288a:	f43f ab5c 	beq.w	8011f46 <_strtod_l+0x27e>
 801288e:	2301      	movs	r3, #1
 8012890:	f7ff bb94 	b.w	8011fbc <_strtod_l+0x2f4>
 8012894:	f3af 8000 	nop.w
 8012898:	94a03595 	.word	0x94a03595
 801289c:	3fdfffff 	.word	0x3fdfffff
 80128a0:	35afe535 	.word	0x35afe535
 80128a4:	3fe00000 	.word	0x3fe00000
 80128a8:	ffc00000 	.word	0xffc00000
 80128ac:	41dfffff 	.word	0x41dfffff
 80128b0:	94a03595 	.word	0x94a03595
 80128b4:	3fcfffff 	.word	0x3fcfffff
 80128b8:	3ff00000 	.word	0x3ff00000
 80128bc:	7ff00000 	.word	0x7ff00000
 80128c0:	7fe00000 	.word	0x7fe00000
 80128c4:	7c9fffff 	.word	0x7c9fffff
 80128c8:	3fe00000 	.word	0x3fe00000
 80128cc:	bff00000 	.word	0xbff00000
 80128d0:	7fefffff 	.word	0x7fefffff

080128d4 <_strtod_r>:
 80128d4:	4b01      	ldr	r3, [pc, #4]	; (80128dc <_strtod_r+0x8>)
 80128d6:	f7ff b9f7 	b.w	8011cc8 <_strtod_l>
 80128da:	bf00      	nop
 80128dc:	20000078 	.word	0x20000078

080128e0 <_strtol_l.constprop.0>:
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128e6:	d001      	beq.n	80128ec <_strtol_l.constprop.0+0xc>
 80128e8:	2b24      	cmp	r3, #36	; 0x24
 80128ea:	d906      	bls.n	80128fa <_strtol_l.constprop.0+0x1a>
 80128ec:	f7fe f86e 	bl	80109cc <__errno>
 80128f0:	2316      	movs	r3, #22
 80128f2:	6003      	str	r3, [r0, #0]
 80128f4:	2000      	movs	r0, #0
 80128f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80129e0 <_strtol_l.constprop.0+0x100>
 80128fe:	460d      	mov	r5, r1
 8012900:	462e      	mov	r6, r5
 8012902:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012906:	f814 700c 	ldrb.w	r7, [r4, ip]
 801290a:	f017 0708 	ands.w	r7, r7, #8
 801290e:	d1f7      	bne.n	8012900 <_strtol_l.constprop.0+0x20>
 8012910:	2c2d      	cmp	r4, #45	; 0x2d
 8012912:	d132      	bne.n	801297a <_strtol_l.constprop.0+0x9a>
 8012914:	782c      	ldrb	r4, [r5, #0]
 8012916:	2701      	movs	r7, #1
 8012918:	1cb5      	adds	r5, r6, #2
 801291a:	2b00      	cmp	r3, #0
 801291c:	d05b      	beq.n	80129d6 <_strtol_l.constprop.0+0xf6>
 801291e:	2b10      	cmp	r3, #16
 8012920:	d109      	bne.n	8012936 <_strtol_l.constprop.0+0x56>
 8012922:	2c30      	cmp	r4, #48	; 0x30
 8012924:	d107      	bne.n	8012936 <_strtol_l.constprop.0+0x56>
 8012926:	782c      	ldrb	r4, [r5, #0]
 8012928:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801292c:	2c58      	cmp	r4, #88	; 0x58
 801292e:	d14d      	bne.n	80129cc <_strtol_l.constprop.0+0xec>
 8012930:	786c      	ldrb	r4, [r5, #1]
 8012932:	2310      	movs	r3, #16
 8012934:	3502      	adds	r5, #2
 8012936:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801293a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801293e:	f04f 0c00 	mov.w	ip, #0
 8012942:	fbb8 f9f3 	udiv	r9, r8, r3
 8012946:	4666      	mov	r6, ip
 8012948:	fb03 8a19 	mls	sl, r3, r9, r8
 801294c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012950:	f1be 0f09 	cmp.w	lr, #9
 8012954:	d816      	bhi.n	8012984 <_strtol_l.constprop.0+0xa4>
 8012956:	4674      	mov	r4, lr
 8012958:	42a3      	cmp	r3, r4
 801295a:	dd24      	ble.n	80129a6 <_strtol_l.constprop.0+0xc6>
 801295c:	f1bc 0f00 	cmp.w	ip, #0
 8012960:	db1e      	blt.n	80129a0 <_strtol_l.constprop.0+0xc0>
 8012962:	45b1      	cmp	r9, r6
 8012964:	d31c      	bcc.n	80129a0 <_strtol_l.constprop.0+0xc0>
 8012966:	d101      	bne.n	801296c <_strtol_l.constprop.0+0x8c>
 8012968:	45a2      	cmp	sl, r4
 801296a:	db19      	blt.n	80129a0 <_strtol_l.constprop.0+0xc0>
 801296c:	fb06 4603 	mla	r6, r6, r3, r4
 8012970:	f04f 0c01 	mov.w	ip, #1
 8012974:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012978:	e7e8      	b.n	801294c <_strtol_l.constprop.0+0x6c>
 801297a:	2c2b      	cmp	r4, #43	; 0x2b
 801297c:	bf04      	itt	eq
 801297e:	782c      	ldrbeq	r4, [r5, #0]
 8012980:	1cb5      	addeq	r5, r6, #2
 8012982:	e7ca      	b.n	801291a <_strtol_l.constprop.0+0x3a>
 8012984:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012988:	f1be 0f19 	cmp.w	lr, #25
 801298c:	d801      	bhi.n	8012992 <_strtol_l.constprop.0+0xb2>
 801298e:	3c37      	subs	r4, #55	; 0x37
 8012990:	e7e2      	b.n	8012958 <_strtol_l.constprop.0+0x78>
 8012992:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012996:	f1be 0f19 	cmp.w	lr, #25
 801299a:	d804      	bhi.n	80129a6 <_strtol_l.constprop.0+0xc6>
 801299c:	3c57      	subs	r4, #87	; 0x57
 801299e:	e7db      	b.n	8012958 <_strtol_l.constprop.0+0x78>
 80129a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80129a4:	e7e6      	b.n	8012974 <_strtol_l.constprop.0+0x94>
 80129a6:	f1bc 0f00 	cmp.w	ip, #0
 80129aa:	da05      	bge.n	80129b8 <_strtol_l.constprop.0+0xd8>
 80129ac:	2322      	movs	r3, #34	; 0x22
 80129ae:	6003      	str	r3, [r0, #0]
 80129b0:	4646      	mov	r6, r8
 80129b2:	b942      	cbnz	r2, 80129c6 <_strtol_l.constprop.0+0xe6>
 80129b4:	4630      	mov	r0, r6
 80129b6:	e79e      	b.n	80128f6 <_strtol_l.constprop.0+0x16>
 80129b8:	b107      	cbz	r7, 80129bc <_strtol_l.constprop.0+0xdc>
 80129ba:	4276      	negs	r6, r6
 80129bc:	2a00      	cmp	r2, #0
 80129be:	d0f9      	beq.n	80129b4 <_strtol_l.constprop.0+0xd4>
 80129c0:	f1bc 0f00 	cmp.w	ip, #0
 80129c4:	d000      	beq.n	80129c8 <_strtol_l.constprop.0+0xe8>
 80129c6:	1e69      	subs	r1, r5, #1
 80129c8:	6011      	str	r1, [r2, #0]
 80129ca:	e7f3      	b.n	80129b4 <_strtol_l.constprop.0+0xd4>
 80129cc:	2430      	movs	r4, #48	; 0x30
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d1b1      	bne.n	8012936 <_strtol_l.constprop.0+0x56>
 80129d2:	2308      	movs	r3, #8
 80129d4:	e7af      	b.n	8012936 <_strtol_l.constprop.0+0x56>
 80129d6:	2c30      	cmp	r4, #48	; 0x30
 80129d8:	d0a5      	beq.n	8012926 <_strtol_l.constprop.0+0x46>
 80129da:	230a      	movs	r3, #10
 80129dc:	e7ab      	b.n	8012936 <_strtol_l.constprop.0+0x56>
 80129de:	bf00      	nop
 80129e0:	08015789 	.word	0x08015789

080129e4 <_strtol_r>:
 80129e4:	f7ff bf7c 	b.w	80128e0 <_strtol_l.constprop.0>

080129e8 <_write_r>:
 80129e8:	b538      	push	{r3, r4, r5, lr}
 80129ea:	4d07      	ldr	r5, [pc, #28]	; (8012a08 <_write_r+0x20>)
 80129ec:	4604      	mov	r4, r0
 80129ee:	4608      	mov	r0, r1
 80129f0:	4611      	mov	r1, r2
 80129f2:	2200      	movs	r2, #0
 80129f4:	602a      	str	r2, [r5, #0]
 80129f6:	461a      	mov	r2, r3
 80129f8:	f7ef fa97 	bl	8001f2a <_write>
 80129fc:	1c43      	adds	r3, r0, #1
 80129fe:	d102      	bne.n	8012a06 <_write_r+0x1e>
 8012a00:	682b      	ldr	r3, [r5, #0]
 8012a02:	b103      	cbz	r3, 8012a06 <_write_r+0x1e>
 8012a04:	6023      	str	r3, [r4, #0]
 8012a06:	bd38      	pop	{r3, r4, r5, pc}
 8012a08:	200026c0 	.word	0x200026c0

08012a0c <_close_r>:
 8012a0c:	b538      	push	{r3, r4, r5, lr}
 8012a0e:	4d06      	ldr	r5, [pc, #24]	; (8012a28 <_close_r+0x1c>)
 8012a10:	2300      	movs	r3, #0
 8012a12:	4604      	mov	r4, r0
 8012a14:	4608      	mov	r0, r1
 8012a16:	602b      	str	r3, [r5, #0]
 8012a18:	f7ef faa3 	bl	8001f62 <_close>
 8012a1c:	1c43      	adds	r3, r0, #1
 8012a1e:	d102      	bne.n	8012a26 <_close_r+0x1a>
 8012a20:	682b      	ldr	r3, [r5, #0]
 8012a22:	b103      	cbz	r3, 8012a26 <_close_r+0x1a>
 8012a24:	6023      	str	r3, [r4, #0]
 8012a26:	bd38      	pop	{r3, r4, r5, pc}
 8012a28:	200026c0 	.word	0x200026c0

08012a2c <quorem>:
 8012a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a30:	6903      	ldr	r3, [r0, #16]
 8012a32:	690c      	ldr	r4, [r1, #16]
 8012a34:	42a3      	cmp	r3, r4
 8012a36:	4607      	mov	r7, r0
 8012a38:	f2c0 8081 	blt.w	8012b3e <quorem+0x112>
 8012a3c:	3c01      	subs	r4, #1
 8012a3e:	f101 0814 	add.w	r8, r1, #20
 8012a42:	f100 0514 	add.w	r5, r0, #20
 8012a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a4a:	9301      	str	r3, [sp, #4]
 8012a4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012a50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a54:	3301      	adds	r3, #1
 8012a56:	429a      	cmp	r2, r3
 8012a58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012a5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012a60:	fbb2 f6f3 	udiv	r6, r2, r3
 8012a64:	d331      	bcc.n	8012aca <quorem+0x9e>
 8012a66:	f04f 0e00 	mov.w	lr, #0
 8012a6a:	4640      	mov	r0, r8
 8012a6c:	46ac      	mov	ip, r5
 8012a6e:	46f2      	mov	sl, lr
 8012a70:	f850 2b04 	ldr.w	r2, [r0], #4
 8012a74:	b293      	uxth	r3, r2
 8012a76:	fb06 e303 	mla	r3, r6, r3, lr
 8012a7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	ebaa 0303 	sub.w	r3, sl, r3
 8012a84:	f8dc a000 	ldr.w	sl, [ip]
 8012a88:	0c12      	lsrs	r2, r2, #16
 8012a8a:	fa13 f38a 	uxtah	r3, r3, sl
 8012a8e:	fb06 e202 	mla	r2, r6, r2, lr
 8012a92:	9300      	str	r3, [sp, #0]
 8012a94:	9b00      	ldr	r3, [sp, #0]
 8012a96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012a9a:	b292      	uxth	r2, r2
 8012a9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012aa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012aa4:	f8bd 3000 	ldrh.w	r3, [sp]
 8012aa8:	4581      	cmp	r9, r0
 8012aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012aae:	f84c 3b04 	str.w	r3, [ip], #4
 8012ab2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012ab6:	d2db      	bcs.n	8012a70 <quorem+0x44>
 8012ab8:	f855 300b 	ldr.w	r3, [r5, fp]
 8012abc:	b92b      	cbnz	r3, 8012aca <quorem+0x9e>
 8012abe:	9b01      	ldr	r3, [sp, #4]
 8012ac0:	3b04      	subs	r3, #4
 8012ac2:	429d      	cmp	r5, r3
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	d32e      	bcc.n	8012b26 <quorem+0xfa>
 8012ac8:	613c      	str	r4, [r7, #16]
 8012aca:	4638      	mov	r0, r7
 8012acc:	f001 fd64 	bl	8014598 <__mcmp>
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	db24      	blt.n	8012b1e <quorem+0xf2>
 8012ad4:	3601      	adds	r6, #1
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	f04f 0c00 	mov.w	ip, #0
 8012adc:	f858 2b04 	ldr.w	r2, [r8], #4
 8012ae0:	f8d0 e000 	ldr.w	lr, [r0]
 8012ae4:	b293      	uxth	r3, r2
 8012ae6:	ebac 0303 	sub.w	r3, ip, r3
 8012aea:	0c12      	lsrs	r2, r2, #16
 8012aec:	fa13 f38e 	uxtah	r3, r3, lr
 8012af0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012af8:	b29b      	uxth	r3, r3
 8012afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012afe:	45c1      	cmp	r9, r8
 8012b00:	f840 3b04 	str.w	r3, [r0], #4
 8012b04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012b08:	d2e8      	bcs.n	8012adc <quorem+0xb0>
 8012b0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b12:	b922      	cbnz	r2, 8012b1e <quorem+0xf2>
 8012b14:	3b04      	subs	r3, #4
 8012b16:	429d      	cmp	r5, r3
 8012b18:	461a      	mov	r2, r3
 8012b1a:	d30a      	bcc.n	8012b32 <quorem+0x106>
 8012b1c:	613c      	str	r4, [r7, #16]
 8012b1e:	4630      	mov	r0, r6
 8012b20:	b003      	add	sp, #12
 8012b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b26:	6812      	ldr	r2, [r2, #0]
 8012b28:	3b04      	subs	r3, #4
 8012b2a:	2a00      	cmp	r2, #0
 8012b2c:	d1cc      	bne.n	8012ac8 <quorem+0x9c>
 8012b2e:	3c01      	subs	r4, #1
 8012b30:	e7c7      	b.n	8012ac2 <quorem+0x96>
 8012b32:	6812      	ldr	r2, [r2, #0]
 8012b34:	3b04      	subs	r3, #4
 8012b36:	2a00      	cmp	r2, #0
 8012b38:	d1f0      	bne.n	8012b1c <quorem+0xf0>
 8012b3a:	3c01      	subs	r4, #1
 8012b3c:	e7eb      	b.n	8012b16 <quorem+0xea>
 8012b3e:	2000      	movs	r0, #0
 8012b40:	e7ee      	b.n	8012b20 <quorem+0xf4>
 8012b42:	0000      	movs	r0, r0
 8012b44:	0000      	movs	r0, r0
	...

08012b48 <_dtoa_r>:
 8012b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b4c:	ed2d 8b04 	vpush	{d8-d9}
 8012b50:	ec57 6b10 	vmov	r6, r7, d0
 8012b54:	b093      	sub	sp, #76	; 0x4c
 8012b56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012b58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012b5c:	9106      	str	r1, [sp, #24]
 8012b5e:	ee10 aa10 	vmov	sl, s0
 8012b62:	4604      	mov	r4, r0
 8012b64:	9209      	str	r2, [sp, #36]	; 0x24
 8012b66:	930c      	str	r3, [sp, #48]	; 0x30
 8012b68:	46bb      	mov	fp, r7
 8012b6a:	b975      	cbnz	r5, 8012b8a <_dtoa_r+0x42>
 8012b6c:	2010      	movs	r0, #16
 8012b6e:	f001 fa21 	bl	8013fb4 <malloc>
 8012b72:	4602      	mov	r2, r0
 8012b74:	6260      	str	r0, [r4, #36]	; 0x24
 8012b76:	b920      	cbnz	r0, 8012b82 <_dtoa_r+0x3a>
 8012b78:	4ba7      	ldr	r3, [pc, #668]	; (8012e18 <_dtoa_r+0x2d0>)
 8012b7a:	21ea      	movs	r1, #234	; 0xea
 8012b7c:	48a7      	ldr	r0, [pc, #668]	; (8012e1c <_dtoa_r+0x2d4>)
 8012b7e:	f002 f8fd 	bl	8014d7c <__assert_func>
 8012b82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012b86:	6005      	str	r5, [r0, #0]
 8012b88:	60c5      	str	r5, [r0, #12]
 8012b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b8c:	6819      	ldr	r1, [r3, #0]
 8012b8e:	b151      	cbz	r1, 8012ba6 <_dtoa_r+0x5e>
 8012b90:	685a      	ldr	r2, [r3, #4]
 8012b92:	604a      	str	r2, [r1, #4]
 8012b94:	2301      	movs	r3, #1
 8012b96:	4093      	lsls	r3, r2
 8012b98:	608b      	str	r3, [r1, #8]
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	f001 fa70 	bl	8014080 <_Bfree>
 8012ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	601a      	str	r2, [r3, #0]
 8012ba6:	1e3b      	subs	r3, r7, #0
 8012ba8:	bfaa      	itet	ge
 8012baa:	2300      	movge	r3, #0
 8012bac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012bb0:	f8c8 3000 	strge.w	r3, [r8]
 8012bb4:	4b9a      	ldr	r3, [pc, #616]	; (8012e20 <_dtoa_r+0x2d8>)
 8012bb6:	bfbc      	itt	lt
 8012bb8:	2201      	movlt	r2, #1
 8012bba:	f8c8 2000 	strlt.w	r2, [r8]
 8012bbe:	ea33 030b 	bics.w	r3, r3, fp
 8012bc2:	d11b      	bne.n	8012bfc <_dtoa_r+0xb4>
 8012bc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012bc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8012bca:	6013      	str	r3, [r2, #0]
 8012bcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012bd0:	4333      	orrs	r3, r6
 8012bd2:	f000 8592 	beq.w	80136fa <_dtoa_r+0xbb2>
 8012bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bd8:	b963      	cbnz	r3, 8012bf4 <_dtoa_r+0xac>
 8012bda:	4b92      	ldr	r3, [pc, #584]	; (8012e24 <_dtoa_r+0x2dc>)
 8012bdc:	e022      	b.n	8012c24 <_dtoa_r+0xdc>
 8012bde:	4b92      	ldr	r3, [pc, #584]	; (8012e28 <_dtoa_r+0x2e0>)
 8012be0:	9301      	str	r3, [sp, #4]
 8012be2:	3308      	adds	r3, #8
 8012be4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012be6:	6013      	str	r3, [r2, #0]
 8012be8:	9801      	ldr	r0, [sp, #4]
 8012bea:	b013      	add	sp, #76	; 0x4c
 8012bec:	ecbd 8b04 	vpop	{d8-d9}
 8012bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bf4:	4b8b      	ldr	r3, [pc, #556]	; (8012e24 <_dtoa_r+0x2dc>)
 8012bf6:	9301      	str	r3, [sp, #4]
 8012bf8:	3303      	adds	r3, #3
 8012bfa:	e7f3      	b.n	8012be4 <_dtoa_r+0x9c>
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	2300      	movs	r3, #0
 8012c00:	4650      	mov	r0, sl
 8012c02:	4659      	mov	r1, fp
 8012c04:	f7ed ff78 	bl	8000af8 <__aeabi_dcmpeq>
 8012c08:	ec4b ab19 	vmov	d9, sl, fp
 8012c0c:	4680      	mov	r8, r0
 8012c0e:	b158      	cbz	r0, 8012c28 <_dtoa_r+0xe0>
 8012c10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c12:	2301      	movs	r3, #1
 8012c14:	6013      	str	r3, [r2, #0]
 8012c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	f000 856b 	beq.w	80136f4 <_dtoa_r+0xbac>
 8012c1e:	4883      	ldr	r0, [pc, #524]	; (8012e2c <_dtoa_r+0x2e4>)
 8012c20:	6018      	str	r0, [r3, #0]
 8012c22:	1e43      	subs	r3, r0, #1
 8012c24:	9301      	str	r3, [sp, #4]
 8012c26:	e7df      	b.n	8012be8 <_dtoa_r+0xa0>
 8012c28:	ec4b ab10 	vmov	d0, sl, fp
 8012c2c:	aa10      	add	r2, sp, #64	; 0x40
 8012c2e:	a911      	add	r1, sp, #68	; 0x44
 8012c30:	4620      	mov	r0, r4
 8012c32:	f001 fdd3 	bl	80147dc <__d2b>
 8012c36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012c3a:	ee08 0a10 	vmov	s16, r0
 8012c3e:	2d00      	cmp	r5, #0
 8012c40:	f000 8084 	beq.w	8012d4c <_dtoa_r+0x204>
 8012c44:	ee19 3a90 	vmov	r3, s19
 8012c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012c50:	4656      	mov	r6, sl
 8012c52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012c5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012c5e:	4b74      	ldr	r3, [pc, #464]	; (8012e30 <_dtoa_r+0x2e8>)
 8012c60:	2200      	movs	r2, #0
 8012c62:	4630      	mov	r0, r6
 8012c64:	4639      	mov	r1, r7
 8012c66:	f7ed fb27 	bl	80002b8 <__aeabi_dsub>
 8012c6a:	a365      	add	r3, pc, #404	; (adr r3, 8012e00 <_dtoa_r+0x2b8>)
 8012c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c70:	f7ed fcda 	bl	8000628 <__aeabi_dmul>
 8012c74:	a364      	add	r3, pc, #400	; (adr r3, 8012e08 <_dtoa_r+0x2c0>)
 8012c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c7a:	f7ed fb1f 	bl	80002bc <__adddf3>
 8012c7e:	4606      	mov	r6, r0
 8012c80:	4628      	mov	r0, r5
 8012c82:	460f      	mov	r7, r1
 8012c84:	f7ed fc66 	bl	8000554 <__aeabi_i2d>
 8012c88:	a361      	add	r3, pc, #388	; (adr r3, 8012e10 <_dtoa_r+0x2c8>)
 8012c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8e:	f7ed fccb 	bl	8000628 <__aeabi_dmul>
 8012c92:	4602      	mov	r2, r0
 8012c94:	460b      	mov	r3, r1
 8012c96:	4630      	mov	r0, r6
 8012c98:	4639      	mov	r1, r7
 8012c9a:	f7ed fb0f 	bl	80002bc <__adddf3>
 8012c9e:	4606      	mov	r6, r0
 8012ca0:	460f      	mov	r7, r1
 8012ca2:	f7ed ff71 	bl	8000b88 <__aeabi_d2iz>
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	9000      	str	r0, [sp, #0]
 8012caa:	2300      	movs	r3, #0
 8012cac:	4630      	mov	r0, r6
 8012cae:	4639      	mov	r1, r7
 8012cb0:	f7ed ff2c 	bl	8000b0c <__aeabi_dcmplt>
 8012cb4:	b150      	cbz	r0, 8012ccc <_dtoa_r+0x184>
 8012cb6:	9800      	ldr	r0, [sp, #0]
 8012cb8:	f7ed fc4c 	bl	8000554 <__aeabi_i2d>
 8012cbc:	4632      	mov	r2, r6
 8012cbe:	463b      	mov	r3, r7
 8012cc0:	f7ed ff1a 	bl	8000af8 <__aeabi_dcmpeq>
 8012cc4:	b910      	cbnz	r0, 8012ccc <_dtoa_r+0x184>
 8012cc6:	9b00      	ldr	r3, [sp, #0]
 8012cc8:	3b01      	subs	r3, #1
 8012cca:	9300      	str	r3, [sp, #0]
 8012ccc:	9b00      	ldr	r3, [sp, #0]
 8012cce:	2b16      	cmp	r3, #22
 8012cd0:	d85a      	bhi.n	8012d88 <_dtoa_r+0x240>
 8012cd2:	9a00      	ldr	r2, [sp, #0]
 8012cd4:	4b57      	ldr	r3, [pc, #348]	; (8012e34 <_dtoa_r+0x2ec>)
 8012cd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cde:	ec51 0b19 	vmov	r0, r1, d9
 8012ce2:	f7ed ff13 	bl	8000b0c <__aeabi_dcmplt>
 8012ce6:	2800      	cmp	r0, #0
 8012ce8:	d050      	beq.n	8012d8c <_dtoa_r+0x244>
 8012cea:	9b00      	ldr	r3, [sp, #0]
 8012cec:	3b01      	subs	r3, #1
 8012cee:	9300      	str	r3, [sp, #0]
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8012cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012cf6:	1b5d      	subs	r5, r3, r5
 8012cf8:	1e6b      	subs	r3, r5, #1
 8012cfa:	9305      	str	r3, [sp, #20]
 8012cfc:	bf45      	ittet	mi
 8012cfe:	f1c5 0301 	rsbmi	r3, r5, #1
 8012d02:	9304      	strmi	r3, [sp, #16]
 8012d04:	2300      	movpl	r3, #0
 8012d06:	2300      	movmi	r3, #0
 8012d08:	bf4c      	ite	mi
 8012d0a:	9305      	strmi	r3, [sp, #20]
 8012d0c:	9304      	strpl	r3, [sp, #16]
 8012d0e:	9b00      	ldr	r3, [sp, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	db3d      	blt.n	8012d90 <_dtoa_r+0x248>
 8012d14:	9b05      	ldr	r3, [sp, #20]
 8012d16:	9a00      	ldr	r2, [sp, #0]
 8012d18:	920a      	str	r2, [sp, #40]	; 0x28
 8012d1a:	4413      	add	r3, r2
 8012d1c:	9305      	str	r3, [sp, #20]
 8012d1e:	2300      	movs	r3, #0
 8012d20:	9307      	str	r3, [sp, #28]
 8012d22:	9b06      	ldr	r3, [sp, #24]
 8012d24:	2b09      	cmp	r3, #9
 8012d26:	f200 8089 	bhi.w	8012e3c <_dtoa_r+0x2f4>
 8012d2a:	2b05      	cmp	r3, #5
 8012d2c:	bfc4      	itt	gt
 8012d2e:	3b04      	subgt	r3, #4
 8012d30:	9306      	strgt	r3, [sp, #24]
 8012d32:	9b06      	ldr	r3, [sp, #24]
 8012d34:	f1a3 0302 	sub.w	r3, r3, #2
 8012d38:	bfcc      	ite	gt
 8012d3a:	2500      	movgt	r5, #0
 8012d3c:	2501      	movle	r5, #1
 8012d3e:	2b03      	cmp	r3, #3
 8012d40:	f200 8087 	bhi.w	8012e52 <_dtoa_r+0x30a>
 8012d44:	e8df f003 	tbb	[pc, r3]
 8012d48:	59383a2d 	.word	0x59383a2d
 8012d4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012d50:	441d      	add	r5, r3
 8012d52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012d56:	2b20      	cmp	r3, #32
 8012d58:	bfc1      	itttt	gt
 8012d5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012d5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012d62:	fa0b f303 	lslgt.w	r3, fp, r3
 8012d66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012d6a:	bfda      	itte	le
 8012d6c:	f1c3 0320 	rsble	r3, r3, #32
 8012d70:	fa06 f003 	lslle.w	r0, r6, r3
 8012d74:	4318      	orrgt	r0, r3
 8012d76:	f7ed fbdd 	bl	8000534 <__aeabi_ui2d>
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	4606      	mov	r6, r0
 8012d7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012d82:	3d01      	subs	r5, #1
 8012d84:	930e      	str	r3, [sp, #56]	; 0x38
 8012d86:	e76a      	b.n	8012c5e <_dtoa_r+0x116>
 8012d88:	2301      	movs	r3, #1
 8012d8a:	e7b2      	b.n	8012cf2 <_dtoa_r+0x1aa>
 8012d8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8012d8e:	e7b1      	b.n	8012cf4 <_dtoa_r+0x1ac>
 8012d90:	9b04      	ldr	r3, [sp, #16]
 8012d92:	9a00      	ldr	r2, [sp, #0]
 8012d94:	1a9b      	subs	r3, r3, r2
 8012d96:	9304      	str	r3, [sp, #16]
 8012d98:	4253      	negs	r3, r2
 8012d9a:	9307      	str	r3, [sp, #28]
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8012da0:	e7bf      	b.n	8012d22 <_dtoa_r+0x1da>
 8012da2:	2300      	movs	r3, #0
 8012da4:	9308      	str	r3, [sp, #32]
 8012da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	dc55      	bgt.n	8012e58 <_dtoa_r+0x310>
 8012dac:	2301      	movs	r3, #1
 8012dae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012db2:	461a      	mov	r2, r3
 8012db4:	9209      	str	r2, [sp, #36]	; 0x24
 8012db6:	e00c      	b.n	8012dd2 <_dtoa_r+0x28a>
 8012db8:	2301      	movs	r3, #1
 8012dba:	e7f3      	b.n	8012da4 <_dtoa_r+0x25c>
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dc0:	9308      	str	r3, [sp, #32]
 8012dc2:	9b00      	ldr	r3, [sp, #0]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	9302      	str	r3, [sp, #8]
 8012dc8:	3301      	adds	r3, #1
 8012dca:	2b01      	cmp	r3, #1
 8012dcc:	9303      	str	r3, [sp, #12]
 8012dce:	bfb8      	it	lt
 8012dd0:	2301      	movlt	r3, #1
 8012dd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	6042      	str	r2, [r0, #4]
 8012dd8:	2204      	movs	r2, #4
 8012dda:	f102 0614 	add.w	r6, r2, #20
 8012dde:	429e      	cmp	r6, r3
 8012de0:	6841      	ldr	r1, [r0, #4]
 8012de2:	d93d      	bls.n	8012e60 <_dtoa_r+0x318>
 8012de4:	4620      	mov	r0, r4
 8012de6:	f001 f90b 	bl	8014000 <_Balloc>
 8012dea:	9001      	str	r0, [sp, #4]
 8012dec:	2800      	cmp	r0, #0
 8012dee:	d13b      	bne.n	8012e68 <_dtoa_r+0x320>
 8012df0:	4b11      	ldr	r3, [pc, #68]	; (8012e38 <_dtoa_r+0x2f0>)
 8012df2:	4602      	mov	r2, r0
 8012df4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012df8:	e6c0      	b.n	8012b7c <_dtoa_r+0x34>
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	e7df      	b.n	8012dbe <_dtoa_r+0x276>
 8012dfe:	bf00      	nop
 8012e00:	636f4361 	.word	0x636f4361
 8012e04:	3fd287a7 	.word	0x3fd287a7
 8012e08:	8b60c8b3 	.word	0x8b60c8b3
 8012e0c:	3fc68a28 	.word	0x3fc68a28
 8012e10:	509f79fb 	.word	0x509f79fb
 8012e14:	3fd34413 	.word	0x3fd34413
 8012e18:	08015896 	.word	0x08015896
 8012e1c:	080158ad 	.word	0x080158ad
 8012e20:	7ff00000 	.word	0x7ff00000
 8012e24:	08015892 	.word	0x08015892
 8012e28:	08015889 	.word	0x08015889
 8012e2c:	0801570d 	.word	0x0801570d
 8012e30:	3ff80000 	.word	0x3ff80000
 8012e34:	08015a18 	.word	0x08015a18
 8012e38:	08015908 	.word	0x08015908
 8012e3c:	2501      	movs	r5, #1
 8012e3e:	2300      	movs	r3, #0
 8012e40:	9306      	str	r3, [sp, #24]
 8012e42:	9508      	str	r5, [sp, #32]
 8012e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	2312      	movs	r3, #18
 8012e50:	e7b0      	b.n	8012db4 <_dtoa_r+0x26c>
 8012e52:	2301      	movs	r3, #1
 8012e54:	9308      	str	r3, [sp, #32]
 8012e56:	e7f5      	b.n	8012e44 <_dtoa_r+0x2fc>
 8012e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012e5e:	e7b8      	b.n	8012dd2 <_dtoa_r+0x28a>
 8012e60:	3101      	adds	r1, #1
 8012e62:	6041      	str	r1, [r0, #4]
 8012e64:	0052      	lsls	r2, r2, #1
 8012e66:	e7b8      	b.n	8012dda <_dtoa_r+0x292>
 8012e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e6a:	9a01      	ldr	r2, [sp, #4]
 8012e6c:	601a      	str	r2, [r3, #0]
 8012e6e:	9b03      	ldr	r3, [sp, #12]
 8012e70:	2b0e      	cmp	r3, #14
 8012e72:	f200 809d 	bhi.w	8012fb0 <_dtoa_r+0x468>
 8012e76:	2d00      	cmp	r5, #0
 8012e78:	f000 809a 	beq.w	8012fb0 <_dtoa_r+0x468>
 8012e7c:	9b00      	ldr	r3, [sp, #0]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	dd32      	ble.n	8012ee8 <_dtoa_r+0x3a0>
 8012e82:	4ab7      	ldr	r2, [pc, #732]	; (8013160 <_dtoa_r+0x618>)
 8012e84:	f003 030f 	and.w	r3, r3, #15
 8012e88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e90:	9b00      	ldr	r3, [sp, #0]
 8012e92:	05d8      	lsls	r0, r3, #23
 8012e94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012e98:	d516      	bpl.n	8012ec8 <_dtoa_r+0x380>
 8012e9a:	4bb2      	ldr	r3, [pc, #712]	; (8013164 <_dtoa_r+0x61c>)
 8012e9c:	ec51 0b19 	vmov	r0, r1, d9
 8012ea0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012ea4:	f7ed fcea 	bl	800087c <__aeabi_ddiv>
 8012ea8:	f007 070f 	and.w	r7, r7, #15
 8012eac:	4682      	mov	sl, r0
 8012eae:	468b      	mov	fp, r1
 8012eb0:	2503      	movs	r5, #3
 8012eb2:	4eac      	ldr	r6, [pc, #688]	; (8013164 <_dtoa_r+0x61c>)
 8012eb4:	b957      	cbnz	r7, 8012ecc <_dtoa_r+0x384>
 8012eb6:	4642      	mov	r2, r8
 8012eb8:	464b      	mov	r3, r9
 8012eba:	4650      	mov	r0, sl
 8012ebc:	4659      	mov	r1, fp
 8012ebe:	f7ed fcdd 	bl	800087c <__aeabi_ddiv>
 8012ec2:	4682      	mov	sl, r0
 8012ec4:	468b      	mov	fp, r1
 8012ec6:	e028      	b.n	8012f1a <_dtoa_r+0x3d2>
 8012ec8:	2502      	movs	r5, #2
 8012eca:	e7f2      	b.n	8012eb2 <_dtoa_r+0x36a>
 8012ecc:	07f9      	lsls	r1, r7, #31
 8012ece:	d508      	bpl.n	8012ee2 <_dtoa_r+0x39a>
 8012ed0:	4640      	mov	r0, r8
 8012ed2:	4649      	mov	r1, r9
 8012ed4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012ed8:	f7ed fba6 	bl	8000628 <__aeabi_dmul>
 8012edc:	3501      	adds	r5, #1
 8012ede:	4680      	mov	r8, r0
 8012ee0:	4689      	mov	r9, r1
 8012ee2:	107f      	asrs	r7, r7, #1
 8012ee4:	3608      	adds	r6, #8
 8012ee6:	e7e5      	b.n	8012eb4 <_dtoa_r+0x36c>
 8012ee8:	f000 809b 	beq.w	8013022 <_dtoa_r+0x4da>
 8012eec:	9b00      	ldr	r3, [sp, #0]
 8012eee:	4f9d      	ldr	r7, [pc, #628]	; (8013164 <_dtoa_r+0x61c>)
 8012ef0:	425e      	negs	r6, r3
 8012ef2:	4b9b      	ldr	r3, [pc, #620]	; (8013160 <_dtoa_r+0x618>)
 8012ef4:	f006 020f 	and.w	r2, r6, #15
 8012ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f00:	ec51 0b19 	vmov	r0, r1, d9
 8012f04:	f7ed fb90 	bl	8000628 <__aeabi_dmul>
 8012f08:	1136      	asrs	r6, r6, #4
 8012f0a:	4682      	mov	sl, r0
 8012f0c:	468b      	mov	fp, r1
 8012f0e:	2300      	movs	r3, #0
 8012f10:	2502      	movs	r5, #2
 8012f12:	2e00      	cmp	r6, #0
 8012f14:	d17a      	bne.n	801300c <_dtoa_r+0x4c4>
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d1d3      	bne.n	8012ec2 <_dtoa_r+0x37a>
 8012f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	f000 8082 	beq.w	8013026 <_dtoa_r+0x4de>
 8012f22:	4b91      	ldr	r3, [pc, #580]	; (8013168 <_dtoa_r+0x620>)
 8012f24:	2200      	movs	r2, #0
 8012f26:	4650      	mov	r0, sl
 8012f28:	4659      	mov	r1, fp
 8012f2a:	f7ed fdef 	bl	8000b0c <__aeabi_dcmplt>
 8012f2e:	2800      	cmp	r0, #0
 8012f30:	d079      	beq.n	8013026 <_dtoa_r+0x4de>
 8012f32:	9b03      	ldr	r3, [sp, #12]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d076      	beq.n	8013026 <_dtoa_r+0x4de>
 8012f38:	9b02      	ldr	r3, [sp, #8]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	dd36      	ble.n	8012fac <_dtoa_r+0x464>
 8012f3e:	9b00      	ldr	r3, [sp, #0]
 8012f40:	4650      	mov	r0, sl
 8012f42:	4659      	mov	r1, fp
 8012f44:	1e5f      	subs	r7, r3, #1
 8012f46:	2200      	movs	r2, #0
 8012f48:	4b88      	ldr	r3, [pc, #544]	; (801316c <_dtoa_r+0x624>)
 8012f4a:	f7ed fb6d 	bl	8000628 <__aeabi_dmul>
 8012f4e:	9e02      	ldr	r6, [sp, #8]
 8012f50:	4682      	mov	sl, r0
 8012f52:	468b      	mov	fp, r1
 8012f54:	3501      	adds	r5, #1
 8012f56:	4628      	mov	r0, r5
 8012f58:	f7ed fafc 	bl	8000554 <__aeabi_i2d>
 8012f5c:	4652      	mov	r2, sl
 8012f5e:	465b      	mov	r3, fp
 8012f60:	f7ed fb62 	bl	8000628 <__aeabi_dmul>
 8012f64:	4b82      	ldr	r3, [pc, #520]	; (8013170 <_dtoa_r+0x628>)
 8012f66:	2200      	movs	r2, #0
 8012f68:	f7ed f9a8 	bl	80002bc <__adddf3>
 8012f6c:	46d0      	mov	r8, sl
 8012f6e:	46d9      	mov	r9, fp
 8012f70:	4682      	mov	sl, r0
 8012f72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012f76:	2e00      	cmp	r6, #0
 8012f78:	d158      	bne.n	801302c <_dtoa_r+0x4e4>
 8012f7a:	4b7e      	ldr	r3, [pc, #504]	; (8013174 <_dtoa_r+0x62c>)
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	4640      	mov	r0, r8
 8012f80:	4649      	mov	r1, r9
 8012f82:	f7ed f999 	bl	80002b8 <__aeabi_dsub>
 8012f86:	4652      	mov	r2, sl
 8012f88:	465b      	mov	r3, fp
 8012f8a:	4680      	mov	r8, r0
 8012f8c:	4689      	mov	r9, r1
 8012f8e:	f7ed fddb 	bl	8000b48 <__aeabi_dcmpgt>
 8012f92:	2800      	cmp	r0, #0
 8012f94:	f040 8295 	bne.w	80134c2 <_dtoa_r+0x97a>
 8012f98:	4652      	mov	r2, sl
 8012f9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012f9e:	4640      	mov	r0, r8
 8012fa0:	4649      	mov	r1, r9
 8012fa2:	f7ed fdb3 	bl	8000b0c <__aeabi_dcmplt>
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	f040 8289 	bne.w	80134be <_dtoa_r+0x976>
 8012fac:	ec5b ab19 	vmov	sl, fp, d9
 8012fb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	f2c0 8148 	blt.w	8013248 <_dtoa_r+0x700>
 8012fb8:	9a00      	ldr	r2, [sp, #0]
 8012fba:	2a0e      	cmp	r2, #14
 8012fbc:	f300 8144 	bgt.w	8013248 <_dtoa_r+0x700>
 8012fc0:	4b67      	ldr	r3, [pc, #412]	; (8013160 <_dtoa_r+0x618>)
 8012fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012fc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	f280 80d5 	bge.w	801317c <_dtoa_r+0x634>
 8012fd2:	9b03      	ldr	r3, [sp, #12]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	f300 80d1 	bgt.w	801317c <_dtoa_r+0x634>
 8012fda:	f040 826f 	bne.w	80134bc <_dtoa_r+0x974>
 8012fde:	4b65      	ldr	r3, [pc, #404]	; (8013174 <_dtoa_r+0x62c>)
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	4640      	mov	r0, r8
 8012fe4:	4649      	mov	r1, r9
 8012fe6:	f7ed fb1f 	bl	8000628 <__aeabi_dmul>
 8012fea:	4652      	mov	r2, sl
 8012fec:	465b      	mov	r3, fp
 8012fee:	f7ed fda1 	bl	8000b34 <__aeabi_dcmpge>
 8012ff2:	9e03      	ldr	r6, [sp, #12]
 8012ff4:	4637      	mov	r7, r6
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	f040 8245 	bne.w	8013486 <_dtoa_r+0x93e>
 8012ffc:	9d01      	ldr	r5, [sp, #4]
 8012ffe:	2331      	movs	r3, #49	; 0x31
 8013000:	f805 3b01 	strb.w	r3, [r5], #1
 8013004:	9b00      	ldr	r3, [sp, #0]
 8013006:	3301      	adds	r3, #1
 8013008:	9300      	str	r3, [sp, #0]
 801300a:	e240      	b.n	801348e <_dtoa_r+0x946>
 801300c:	07f2      	lsls	r2, r6, #31
 801300e:	d505      	bpl.n	801301c <_dtoa_r+0x4d4>
 8013010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013014:	f7ed fb08 	bl	8000628 <__aeabi_dmul>
 8013018:	3501      	adds	r5, #1
 801301a:	2301      	movs	r3, #1
 801301c:	1076      	asrs	r6, r6, #1
 801301e:	3708      	adds	r7, #8
 8013020:	e777      	b.n	8012f12 <_dtoa_r+0x3ca>
 8013022:	2502      	movs	r5, #2
 8013024:	e779      	b.n	8012f1a <_dtoa_r+0x3d2>
 8013026:	9f00      	ldr	r7, [sp, #0]
 8013028:	9e03      	ldr	r6, [sp, #12]
 801302a:	e794      	b.n	8012f56 <_dtoa_r+0x40e>
 801302c:	9901      	ldr	r1, [sp, #4]
 801302e:	4b4c      	ldr	r3, [pc, #304]	; (8013160 <_dtoa_r+0x618>)
 8013030:	4431      	add	r1, r6
 8013032:	910d      	str	r1, [sp, #52]	; 0x34
 8013034:	9908      	ldr	r1, [sp, #32]
 8013036:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801303a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801303e:	2900      	cmp	r1, #0
 8013040:	d043      	beq.n	80130ca <_dtoa_r+0x582>
 8013042:	494d      	ldr	r1, [pc, #308]	; (8013178 <_dtoa_r+0x630>)
 8013044:	2000      	movs	r0, #0
 8013046:	f7ed fc19 	bl	800087c <__aeabi_ddiv>
 801304a:	4652      	mov	r2, sl
 801304c:	465b      	mov	r3, fp
 801304e:	f7ed f933 	bl	80002b8 <__aeabi_dsub>
 8013052:	9d01      	ldr	r5, [sp, #4]
 8013054:	4682      	mov	sl, r0
 8013056:	468b      	mov	fp, r1
 8013058:	4649      	mov	r1, r9
 801305a:	4640      	mov	r0, r8
 801305c:	f7ed fd94 	bl	8000b88 <__aeabi_d2iz>
 8013060:	4606      	mov	r6, r0
 8013062:	f7ed fa77 	bl	8000554 <__aeabi_i2d>
 8013066:	4602      	mov	r2, r0
 8013068:	460b      	mov	r3, r1
 801306a:	4640      	mov	r0, r8
 801306c:	4649      	mov	r1, r9
 801306e:	f7ed f923 	bl	80002b8 <__aeabi_dsub>
 8013072:	3630      	adds	r6, #48	; 0x30
 8013074:	f805 6b01 	strb.w	r6, [r5], #1
 8013078:	4652      	mov	r2, sl
 801307a:	465b      	mov	r3, fp
 801307c:	4680      	mov	r8, r0
 801307e:	4689      	mov	r9, r1
 8013080:	f7ed fd44 	bl	8000b0c <__aeabi_dcmplt>
 8013084:	2800      	cmp	r0, #0
 8013086:	d163      	bne.n	8013150 <_dtoa_r+0x608>
 8013088:	4642      	mov	r2, r8
 801308a:	464b      	mov	r3, r9
 801308c:	4936      	ldr	r1, [pc, #216]	; (8013168 <_dtoa_r+0x620>)
 801308e:	2000      	movs	r0, #0
 8013090:	f7ed f912 	bl	80002b8 <__aeabi_dsub>
 8013094:	4652      	mov	r2, sl
 8013096:	465b      	mov	r3, fp
 8013098:	f7ed fd38 	bl	8000b0c <__aeabi_dcmplt>
 801309c:	2800      	cmp	r0, #0
 801309e:	f040 80b5 	bne.w	801320c <_dtoa_r+0x6c4>
 80130a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130a4:	429d      	cmp	r5, r3
 80130a6:	d081      	beq.n	8012fac <_dtoa_r+0x464>
 80130a8:	4b30      	ldr	r3, [pc, #192]	; (801316c <_dtoa_r+0x624>)
 80130aa:	2200      	movs	r2, #0
 80130ac:	4650      	mov	r0, sl
 80130ae:	4659      	mov	r1, fp
 80130b0:	f7ed faba 	bl	8000628 <__aeabi_dmul>
 80130b4:	4b2d      	ldr	r3, [pc, #180]	; (801316c <_dtoa_r+0x624>)
 80130b6:	4682      	mov	sl, r0
 80130b8:	468b      	mov	fp, r1
 80130ba:	4640      	mov	r0, r8
 80130bc:	4649      	mov	r1, r9
 80130be:	2200      	movs	r2, #0
 80130c0:	f7ed fab2 	bl	8000628 <__aeabi_dmul>
 80130c4:	4680      	mov	r8, r0
 80130c6:	4689      	mov	r9, r1
 80130c8:	e7c6      	b.n	8013058 <_dtoa_r+0x510>
 80130ca:	4650      	mov	r0, sl
 80130cc:	4659      	mov	r1, fp
 80130ce:	f7ed faab 	bl	8000628 <__aeabi_dmul>
 80130d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130d4:	9d01      	ldr	r5, [sp, #4]
 80130d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80130d8:	4682      	mov	sl, r0
 80130da:	468b      	mov	fp, r1
 80130dc:	4649      	mov	r1, r9
 80130de:	4640      	mov	r0, r8
 80130e0:	f7ed fd52 	bl	8000b88 <__aeabi_d2iz>
 80130e4:	4606      	mov	r6, r0
 80130e6:	f7ed fa35 	bl	8000554 <__aeabi_i2d>
 80130ea:	3630      	adds	r6, #48	; 0x30
 80130ec:	4602      	mov	r2, r0
 80130ee:	460b      	mov	r3, r1
 80130f0:	4640      	mov	r0, r8
 80130f2:	4649      	mov	r1, r9
 80130f4:	f7ed f8e0 	bl	80002b8 <__aeabi_dsub>
 80130f8:	f805 6b01 	strb.w	r6, [r5], #1
 80130fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130fe:	429d      	cmp	r5, r3
 8013100:	4680      	mov	r8, r0
 8013102:	4689      	mov	r9, r1
 8013104:	f04f 0200 	mov.w	r2, #0
 8013108:	d124      	bne.n	8013154 <_dtoa_r+0x60c>
 801310a:	4b1b      	ldr	r3, [pc, #108]	; (8013178 <_dtoa_r+0x630>)
 801310c:	4650      	mov	r0, sl
 801310e:	4659      	mov	r1, fp
 8013110:	f7ed f8d4 	bl	80002bc <__adddf3>
 8013114:	4602      	mov	r2, r0
 8013116:	460b      	mov	r3, r1
 8013118:	4640      	mov	r0, r8
 801311a:	4649      	mov	r1, r9
 801311c:	f7ed fd14 	bl	8000b48 <__aeabi_dcmpgt>
 8013120:	2800      	cmp	r0, #0
 8013122:	d173      	bne.n	801320c <_dtoa_r+0x6c4>
 8013124:	4652      	mov	r2, sl
 8013126:	465b      	mov	r3, fp
 8013128:	4913      	ldr	r1, [pc, #76]	; (8013178 <_dtoa_r+0x630>)
 801312a:	2000      	movs	r0, #0
 801312c:	f7ed f8c4 	bl	80002b8 <__aeabi_dsub>
 8013130:	4602      	mov	r2, r0
 8013132:	460b      	mov	r3, r1
 8013134:	4640      	mov	r0, r8
 8013136:	4649      	mov	r1, r9
 8013138:	f7ed fce8 	bl	8000b0c <__aeabi_dcmplt>
 801313c:	2800      	cmp	r0, #0
 801313e:	f43f af35 	beq.w	8012fac <_dtoa_r+0x464>
 8013142:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013144:	1e6b      	subs	r3, r5, #1
 8013146:	930f      	str	r3, [sp, #60]	; 0x3c
 8013148:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801314c:	2b30      	cmp	r3, #48	; 0x30
 801314e:	d0f8      	beq.n	8013142 <_dtoa_r+0x5fa>
 8013150:	9700      	str	r7, [sp, #0]
 8013152:	e049      	b.n	80131e8 <_dtoa_r+0x6a0>
 8013154:	4b05      	ldr	r3, [pc, #20]	; (801316c <_dtoa_r+0x624>)
 8013156:	f7ed fa67 	bl	8000628 <__aeabi_dmul>
 801315a:	4680      	mov	r8, r0
 801315c:	4689      	mov	r9, r1
 801315e:	e7bd      	b.n	80130dc <_dtoa_r+0x594>
 8013160:	08015a18 	.word	0x08015a18
 8013164:	080159f0 	.word	0x080159f0
 8013168:	3ff00000 	.word	0x3ff00000
 801316c:	40240000 	.word	0x40240000
 8013170:	401c0000 	.word	0x401c0000
 8013174:	40140000 	.word	0x40140000
 8013178:	3fe00000 	.word	0x3fe00000
 801317c:	9d01      	ldr	r5, [sp, #4]
 801317e:	4656      	mov	r6, sl
 8013180:	465f      	mov	r7, fp
 8013182:	4642      	mov	r2, r8
 8013184:	464b      	mov	r3, r9
 8013186:	4630      	mov	r0, r6
 8013188:	4639      	mov	r1, r7
 801318a:	f7ed fb77 	bl	800087c <__aeabi_ddiv>
 801318e:	f7ed fcfb 	bl	8000b88 <__aeabi_d2iz>
 8013192:	4682      	mov	sl, r0
 8013194:	f7ed f9de 	bl	8000554 <__aeabi_i2d>
 8013198:	4642      	mov	r2, r8
 801319a:	464b      	mov	r3, r9
 801319c:	f7ed fa44 	bl	8000628 <__aeabi_dmul>
 80131a0:	4602      	mov	r2, r0
 80131a2:	460b      	mov	r3, r1
 80131a4:	4630      	mov	r0, r6
 80131a6:	4639      	mov	r1, r7
 80131a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80131ac:	f7ed f884 	bl	80002b8 <__aeabi_dsub>
 80131b0:	f805 6b01 	strb.w	r6, [r5], #1
 80131b4:	9e01      	ldr	r6, [sp, #4]
 80131b6:	9f03      	ldr	r7, [sp, #12]
 80131b8:	1bae      	subs	r6, r5, r6
 80131ba:	42b7      	cmp	r7, r6
 80131bc:	4602      	mov	r2, r0
 80131be:	460b      	mov	r3, r1
 80131c0:	d135      	bne.n	801322e <_dtoa_r+0x6e6>
 80131c2:	f7ed f87b 	bl	80002bc <__adddf3>
 80131c6:	4642      	mov	r2, r8
 80131c8:	464b      	mov	r3, r9
 80131ca:	4606      	mov	r6, r0
 80131cc:	460f      	mov	r7, r1
 80131ce:	f7ed fcbb 	bl	8000b48 <__aeabi_dcmpgt>
 80131d2:	b9d0      	cbnz	r0, 801320a <_dtoa_r+0x6c2>
 80131d4:	4642      	mov	r2, r8
 80131d6:	464b      	mov	r3, r9
 80131d8:	4630      	mov	r0, r6
 80131da:	4639      	mov	r1, r7
 80131dc:	f7ed fc8c 	bl	8000af8 <__aeabi_dcmpeq>
 80131e0:	b110      	cbz	r0, 80131e8 <_dtoa_r+0x6a0>
 80131e2:	f01a 0f01 	tst.w	sl, #1
 80131e6:	d110      	bne.n	801320a <_dtoa_r+0x6c2>
 80131e8:	4620      	mov	r0, r4
 80131ea:	ee18 1a10 	vmov	r1, s16
 80131ee:	f000 ff47 	bl	8014080 <_Bfree>
 80131f2:	2300      	movs	r3, #0
 80131f4:	9800      	ldr	r0, [sp, #0]
 80131f6:	702b      	strb	r3, [r5, #0]
 80131f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131fa:	3001      	adds	r0, #1
 80131fc:	6018      	str	r0, [r3, #0]
 80131fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013200:	2b00      	cmp	r3, #0
 8013202:	f43f acf1 	beq.w	8012be8 <_dtoa_r+0xa0>
 8013206:	601d      	str	r5, [r3, #0]
 8013208:	e4ee      	b.n	8012be8 <_dtoa_r+0xa0>
 801320a:	9f00      	ldr	r7, [sp, #0]
 801320c:	462b      	mov	r3, r5
 801320e:	461d      	mov	r5, r3
 8013210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013214:	2a39      	cmp	r2, #57	; 0x39
 8013216:	d106      	bne.n	8013226 <_dtoa_r+0x6de>
 8013218:	9a01      	ldr	r2, [sp, #4]
 801321a:	429a      	cmp	r2, r3
 801321c:	d1f7      	bne.n	801320e <_dtoa_r+0x6c6>
 801321e:	9901      	ldr	r1, [sp, #4]
 8013220:	2230      	movs	r2, #48	; 0x30
 8013222:	3701      	adds	r7, #1
 8013224:	700a      	strb	r2, [r1, #0]
 8013226:	781a      	ldrb	r2, [r3, #0]
 8013228:	3201      	adds	r2, #1
 801322a:	701a      	strb	r2, [r3, #0]
 801322c:	e790      	b.n	8013150 <_dtoa_r+0x608>
 801322e:	4ba6      	ldr	r3, [pc, #664]	; (80134c8 <_dtoa_r+0x980>)
 8013230:	2200      	movs	r2, #0
 8013232:	f7ed f9f9 	bl	8000628 <__aeabi_dmul>
 8013236:	2200      	movs	r2, #0
 8013238:	2300      	movs	r3, #0
 801323a:	4606      	mov	r6, r0
 801323c:	460f      	mov	r7, r1
 801323e:	f7ed fc5b 	bl	8000af8 <__aeabi_dcmpeq>
 8013242:	2800      	cmp	r0, #0
 8013244:	d09d      	beq.n	8013182 <_dtoa_r+0x63a>
 8013246:	e7cf      	b.n	80131e8 <_dtoa_r+0x6a0>
 8013248:	9a08      	ldr	r2, [sp, #32]
 801324a:	2a00      	cmp	r2, #0
 801324c:	f000 80d7 	beq.w	80133fe <_dtoa_r+0x8b6>
 8013250:	9a06      	ldr	r2, [sp, #24]
 8013252:	2a01      	cmp	r2, #1
 8013254:	f300 80ba 	bgt.w	80133cc <_dtoa_r+0x884>
 8013258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801325a:	2a00      	cmp	r2, #0
 801325c:	f000 80b2 	beq.w	80133c4 <_dtoa_r+0x87c>
 8013260:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013264:	9e07      	ldr	r6, [sp, #28]
 8013266:	9d04      	ldr	r5, [sp, #16]
 8013268:	9a04      	ldr	r2, [sp, #16]
 801326a:	441a      	add	r2, r3
 801326c:	9204      	str	r2, [sp, #16]
 801326e:	9a05      	ldr	r2, [sp, #20]
 8013270:	2101      	movs	r1, #1
 8013272:	441a      	add	r2, r3
 8013274:	4620      	mov	r0, r4
 8013276:	9205      	str	r2, [sp, #20]
 8013278:	f001 f804 	bl	8014284 <__i2b>
 801327c:	4607      	mov	r7, r0
 801327e:	2d00      	cmp	r5, #0
 8013280:	dd0c      	ble.n	801329c <_dtoa_r+0x754>
 8013282:	9b05      	ldr	r3, [sp, #20]
 8013284:	2b00      	cmp	r3, #0
 8013286:	dd09      	ble.n	801329c <_dtoa_r+0x754>
 8013288:	42ab      	cmp	r3, r5
 801328a:	9a04      	ldr	r2, [sp, #16]
 801328c:	bfa8      	it	ge
 801328e:	462b      	movge	r3, r5
 8013290:	1ad2      	subs	r2, r2, r3
 8013292:	9204      	str	r2, [sp, #16]
 8013294:	9a05      	ldr	r2, [sp, #20]
 8013296:	1aed      	subs	r5, r5, r3
 8013298:	1ad3      	subs	r3, r2, r3
 801329a:	9305      	str	r3, [sp, #20]
 801329c:	9b07      	ldr	r3, [sp, #28]
 801329e:	b31b      	cbz	r3, 80132e8 <_dtoa_r+0x7a0>
 80132a0:	9b08      	ldr	r3, [sp, #32]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f000 80af 	beq.w	8013406 <_dtoa_r+0x8be>
 80132a8:	2e00      	cmp	r6, #0
 80132aa:	dd13      	ble.n	80132d4 <_dtoa_r+0x78c>
 80132ac:	4639      	mov	r1, r7
 80132ae:	4632      	mov	r2, r6
 80132b0:	4620      	mov	r0, r4
 80132b2:	f001 f8a7 	bl	8014404 <__pow5mult>
 80132b6:	ee18 2a10 	vmov	r2, s16
 80132ba:	4601      	mov	r1, r0
 80132bc:	4607      	mov	r7, r0
 80132be:	4620      	mov	r0, r4
 80132c0:	f000 fff6 	bl	80142b0 <__multiply>
 80132c4:	ee18 1a10 	vmov	r1, s16
 80132c8:	4680      	mov	r8, r0
 80132ca:	4620      	mov	r0, r4
 80132cc:	f000 fed8 	bl	8014080 <_Bfree>
 80132d0:	ee08 8a10 	vmov	s16, r8
 80132d4:	9b07      	ldr	r3, [sp, #28]
 80132d6:	1b9a      	subs	r2, r3, r6
 80132d8:	d006      	beq.n	80132e8 <_dtoa_r+0x7a0>
 80132da:	ee18 1a10 	vmov	r1, s16
 80132de:	4620      	mov	r0, r4
 80132e0:	f001 f890 	bl	8014404 <__pow5mult>
 80132e4:	ee08 0a10 	vmov	s16, r0
 80132e8:	2101      	movs	r1, #1
 80132ea:	4620      	mov	r0, r4
 80132ec:	f000 ffca 	bl	8014284 <__i2b>
 80132f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	4606      	mov	r6, r0
 80132f6:	f340 8088 	ble.w	801340a <_dtoa_r+0x8c2>
 80132fa:	461a      	mov	r2, r3
 80132fc:	4601      	mov	r1, r0
 80132fe:	4620      	mov	r0, r4
 8013300:	f001 f880 	bl	8014404 <__pow5mult>
 8013304:	9b06      	ldr	r3, [sp, #24]
 8013306:	2b01      	cmp	r3, #1
 8013308:	4606      	mov	r6, r0
 801330a:	f340 8081 	ble.w	8013410 <_dtoa_r+0x8c8>
 801330e:	f04f 0800 	mov.w	r8, #0
 8013312:	6933      	ldr	r3, [r6, #16]
 8013314:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013318:	6918      	ldr	r0, [r3, #16]
 801331a:	f000 ff63 	bl	80141e4 <__hi0bits>
 801331e:	f1c0 0020 	rsb	r0, r0, #32
 8013322:	9b05      	ldr	r3, [sp, #20]
 8013324:	4418      	add	r0, r3
 8013326:	f010 001f 	ands.w	r0, r0, #31
 801332a:	f000 8092 	beq.w	8013452 <_dtoa_r+0x90a>
 801332e:	f1c0 0320 	rsb	r3, r0, #32
 8013332:	2b04      	cmp	r3, #4
 8013334:	f340 808a 	ble.w	801344c <_dtoa_r+0x904>
 8013338:	f1c0 001c 	rsb	r0, r0, #28
 801333c:	9b04      	ldr	r3, [sp, #16]
 801333e:	4403      	add	r3, r0
 8013340:	9304      	str	r3, [sp, #16]
 8013342:	9b05      	ldr	r3, [sp, #20]
 8013344:	4403      	add	r3, r0
 8013346:	4405      	add	r5, r0
 8013348:	9305      	str	r3, [sp, #20]
 801334a:	9b04      	ldr	r3, [sp, #16]
 801334c:	2b00      	cmp	r3, #0
 801334e:	dd07      	ble.n	8013360 <_dtoa_r+0x818>
 8013350:	ee18 1a10 	vmov	r1, s16
 8013354:	461a      	mov	r2, r3
 8013356:	4620      	mov	r0, r4
 8013358:	f001 f8ae 	bl	80144b8 <__lshift>
 801335c:	ee08 0a10 	vmov	s16, r0
 8013360:	9b05      	ldr	r3, [sp, #20]
 8013362:	2b00      	cmp	r3, #0
 8013364:	dd05      	ble.n	8013372 <_dtoa_r+0x82a>
 8013366:	4631      	mov	r1, r6
 8013368:	461a      	mov	r2, r3
 801336a:	4620      	mov	r0, r4
 801336c:	f001 f8a4 	bl	80144b8 <__lshift>
 8013370:	4606      	mov	r6, r0
 8013372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013374:	2b00      	cmp	r3, #0
 8013376:	d06e      	beq.n	8013456 <_dtoa_r+0x90e>
 8013378:	ee18 0a10 	vmov	r0, s16
 801337c:	4631      	mov	r1, r6
 801337e:	f001 f90b 	bl	8014598 <__mcmp>
 8013382:	2800      	cmp	r0, #0
 8013384:	da67      	bge.n	8013456 <_dtoa_r+0x90e>
 8013386:	9b00      	ldr	r3, [sp, #0]
 8013388:	3b01      	subs	r3, #1
 801338a:	ee18 1a10 	vmov	r1, s16
 801338e:	9300      	str	r3, [sp, #0]
 8013390:	220a      	movs	r2, #10
 8013392:	2300      	movs	r3, #0
 8013394:	4620      	mov	r0, r4
 8013396:	f000 fe95 	bl	80140c4 <__multadd>
 801339a:	9b08      	ldr	r3, [sp, #32]
 801339c:	ee08 0a10 	vmov	s16, r0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	f000 81b1 	beq.w	8013708 <_dtoa_r+0xbc0>
 80133a6:	2300      	movs	r3, #0
 80133a8:	4639      	mov	r1, r7
 80133aa:	220a      	movs	r2, #10
 80133ac:	4620      	mov	r0, r4
 80133ae:	f000 fe89 	bl	80140c4 <__multadd>
 80133b2:	9b02      	ldr	r3, [sp, #8]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	4607      	mov	r7, r0
 80133b8:	f300 808e 	bgt.w	80134d8 <_dtoa_r+0x990>
 80133bc:	9b06      	ldr	r3, [sp, #24]
 80133be:	2b02      	cmp	r3, #2
 80133c0:	dc51      	bgt.n	8013466 <_dtoa_r+0x91e>
 80133c2:	e089      	b.n	80134d8 <_dtoa_r+0x990>
 80133c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80133ca:	e74b      	b.n	8013264 <_dtoa_r+0x71c>
 80133cc:	9b03      	ldr	r3, [sp, #12]
 80133ce:	1e5e      	subs	r6, r3, #1
 80133d0:	9b07      	ldr	r3, [sp, #28]
 80133d2:	42b3      	cmp	r3, r6
 80133d4:	bfbf      	itttt	lt
 80133d6:	9b07      	ldrlt	r3, [sp, #28]
 80133d8:	9607      	strlt	r6, [sp, #28]
 80133da:	1af2      	sublt	r2, r6, r3
 80133dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80133de:	bfb6      	itet	lt
 80133e0:	189b      	addlt	r3, r3, r2
 80133e2:	1b9e      	subge	r6, r3, r6
 80133e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80133e6:	9b03      	ldr	r3, [sp, #12]
 80133e8:	bfb8      	it	lt
 80133ea:	2600      	movlt	r6, #0
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	bfb7      	itett	lt
 80133f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80133f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80133f8:	1a9d      	sublt	r5, r3, r2
 80133fa:	2300      	movlt	r3, #0
 80133fc:	e734      	b.n	8013268 <_dtoa_r+0x720>
 80133fe:	9e07      	ldr	r6, [sp, #28]
 8013400:	9d04      	ldr	r5, [sp, #16]
 8013402:	9f08      	ldr	r7, [sp, #32]
 8013404:	e73b      	b.n	801327e <_dtoa_r+0x736>
 8013406:	9a07      	ldr	r2, [sp, #28]
 8013408:	e767      	b.n	80132da <_dtoa_r+0x792>
 801340a:	9b06      	ldr	r3, [sp, #24]
 801340c:	2b01      	cmp	r3, #1
 801340e:	dc18      	bgt.n	8013442 <_dtoa_r+0x8fa>
 8013410:	f1ba 0f00 	cmp.w	sl, #0
 8013414:	d115      	bne.n	8013442 <_dtoa_r+0x8fa>
 8013416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801341a:	b993      	cbnz	r3, 8013442 <_dtoa_r+0x8fa>
 801341c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013420:	0d1b      	lsrs	r3, r3, #20
 8013422:	051b      	lsls	r3, r3, #20
 8013424:	b183      	cbz	r3, 8013448 <_dtoa_r+0x900>
 8013426:	9b04      	ldr	r3, [sp, #16]
 8013428:	3301      	adds	r3, #1
 801342a:	9304      	str	r3, [sp, #16]
 801342c:	9b05      	ldr	r3, [sp, #20]
 801342e:	3301      	adds	r3, #1
 8013430:	9305      	str	r3, [sp, #20]
 8013432:	f04f 0801 	mov.w	r8, #1
 8013436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013438:	2b00      	cmp	r3, #0
 801343a:	f47f af6a 	bne.w	8013312 <_dtoa_r+0x7ca>
 801343e:	2001      	movs	r0, #1
 8013440:	e76f      	b.n	8013322 <_dtoa_r+0x7da>
 8013442:	f04f 0800 	mov.w	r8, #0
 8013446:	e7f6      	b.n	8013436 <_dtoa_r+0x8ee>
 8013448:	4698      	mov	r8, r3
 801344a:	e7f4      	b.n	8013436 <_dtoa_r+0x8ee>
 801344c:	f43f af7d 	beq.w	801334a <_dtoa_r+0x802>
 8013450:	4618      	mov	r0, r3
 8013452:	301c      	adds	r0, #28
 8013454:	e772      	b.n	801333c <_dtoa_r+0x7f4>
 8013456:	9b03      	ldr	r3, [sp, #12]
 8013458:	2b00      	cmp	r3, #0
 801345a:	dc37      	bgt.n	80134cc <_dtoa_r+0x984>
 801345c:	9b06      	ldr	r3, [sp, #24]
 801345e:	2b02      	cmp	r3, #2
 8013460:	dd34      	ble.n	80134cc <_dtoa_r+0x984>
 8013462:	9b03      	ldr	r3, [sp, #12]
 8013464:	9302      	str	r3, [sp, #8]
 8013466:	9b02      	ldr	r3, [sp, #8]
 8013468:	b96b      	cbnz	r3, 8013486 <_dtoa_r+0x93e>
 801346a:	4631      	mov	r1, r6
 801346c:	2205      	movs	r2, #5
 801346e:	4620      	mov	r0, r4
 8013470:	f000 fe28 	bl	80140c4 <__multadd>
 8013474:	4601      	mov	r1, r0
 8013476:	4606      	mov	r6, r0
 8013478:	ee18 0a10 	vmov	r0, s16
 801347c:	f001 f88c 	bl	8014598 <__mcmp>
 8013480:	2800      	cmp	r0, #0
 8013482:	f73f adbb 	bgt.w	8012ffc <_dtoa_r+0x4b4>
 8013486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013488:	9d01      	ldr	r5, [sp, #4]
 801348a:	43db      	mvns	r3, r3
 801348c:	9300      	str	r3, [sp, #0]
 801348e:	f04f 0800 	mov.w	r8, #0
 8013492:	4631      	mov	r1, r6
 8013494:	4620      	mov	r0, r4
 8013496:	f000 fdf3 	bl	8014080 <_Bfree>
 801349a:	2f00      	cmp	r7, #0
 801349c:	f43f aea4 	beq.w	80131e8 <_dtoa_r+0x6a0>
 80134a0:	f1b8 0f00 	cmp.w	r8, #0
 80134a4:	d005      	beq.n	80134b2 <_dtoa_r+0x96a>
 80134a6:	45b8      	cmp	r8, r7
 80134a8:	d003      	beq.n	80134b2 <_dtoa_r+0x96a>
 80134aa:	4641      	mov	r1, r8
 80134ac:	4620      	mov	r0, r4
 80134ae:	f000 fde7 	bl	8014080 <_Bfree>
 80134b2:	4639      	mov	r1, r7
 80134b4:	4620      	mov	r0, r4
 80134b6:	f000 fde3 	bl	8014080 <_Bfree>
 80134ba:	e695      	b.n	80131e8 <_dtoa_r+0x6a0>
 80134bc:	2600      	movs	r6, #0
 80134be:	4637      	mov	r7, r6
 80134c0:	e7e1      	b.n	8013486 <_dtoa_r+0x93e>
 80134c2:	9700      	str	r7, [sp, #0]
 80134c4:	4637      	mov	r7, r6
 80134c6:	e599      	b.n	8012ffc <_dtoa_r+0x4b4>
 80134c8:	40240000 	.word	0x40240000
 80134cc:	9b08      	ldr	r3, [sp, #32]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	f000 80ca 	beq.w	8013668 <_dtoa_r+0xb20>
 80134d4:	9b03      	ldr	r3, [sp, #12]
 80134d6:	9302      	str	r3, [sp, #8]
 80134d8:	2d00      	cmp	r5, #0
 80134da:	dd05      	ble.n	80134e8 <_dtoa_r+0x9a0>
 80134dc:	4639      	mov	r1, r7
 80134de:	462a      	mov	r2, r5
 80134e0:	4620      	mov	r0, r4
 80134e2:	f000 ffe9 	bl	80144b8 <__lshift>
 80134e6:	4607      	mov	r7, r0
 80134e8:	f1b8 0f00 	cmp.w	r8, #0
 80134ec:	d05b      	beq.n	80135a6 <_dtoa_r+0xa5e>
 80134ee:	6879      	ldr	r1, [r7, #4]
 80134f0:	4620      	mov	r0, r4
 80134f2:	f000 fd85 	bl	8014000 <_Balloc>
 80134f6:	4605      	mov	r5, r0
 80134f8:	b928      	cbnz	r0, 8013506 <_dtoa_r+0x9be>
 80134fa:	4b87      	ldr	r3, [pc, #540]	; (8013718 <_dtoa_r+0xbd0>)
 80134fc:	4602      	mov	r2, r0
 80134fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013502:	f7ff bb3b 	b.w	8012b7c <_dtoa_r+0x34>
 8013506:	693a      	ldr	r2, [r7, #16]
 8013508:	3202      	adds	r2, #2
 801350a:	0092      	lsls	r2, r2, #2
 801350c:	f107 010c 	add.w	r1, r7, #12
 8013510:	300c      	adds	r0, #12
 8013512:	f7fd fb7e 	bl	8010c12 <memcpy>
 8013516:	2201      	movs	r2, #1
 8013518:	4629      	mov	r1, r5
 801351a:	4620      	mov	r0, r4
 801351c:	f000 ffcc 	bl	80144b8 <__lshift>
 8013520:	9b01      	ldr	r3, [sp, #4]
 8013522:	f103 0901 	add.w	r9, r3, #1
 8013526:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801352a:	4413      	add	r3, r2
 801352c:	9305      	str	r3, [sp, #20]
 801352e:	f00a 0301 	and.w	r3, sl, #1
 8013532:	46b8      	mov	r8, r7
 8013534:	9304      	str	r3, [sp, #16]
 8013536:	4607      	mov	r7, r0
 8013538:	4631      	mov	r1, r6
 801353a:	ee18 0a10 	vmov	r0, s16
 801353e:	f7ff fa75 	bl	8012a2c <quorem>
 8013542:	4641      	mov	r1, r8
 8013544:	9002      	str	r0, [sp, #8]
 8013546:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801354a:	ee18 0a10 	vmov	r0, s16
 801354e:	f001 f823 	bl	8014598 <__mcmp>
 8013552:	463a      	mov	r2, r7
 8013554:	9003      	str	r0, [sp, #12]
 8013556:	4631      	mov	r1, r6
 8013558:	4620      	mov	r0, r4
 801355a:	f001 f839 	bl	80145d0 <__mdiff>
 801355e:	68c2      	ldr	r2, [r0, #12]
 8013560:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8013564:	4605      	mov	r5, r0
 8013566:	bb02      	cbnz	r2, 80135aa <_dtoa_r+0xa62>
 8013568:	4601      	mov	r1, r0
 801356a:	ee18 0a10 	vmov	r0, s16
 801356e:	f001 f813 	bl	8014598 <__mcmp>
 8013572:	4602      	mov	r2, r0
 8013574:	4629      	mov	r1, r5
 8013576:	4620      	mov	r0, r4
 8013578:	9207      	str	r2, [sp, #28]
 801357a:	f000 fd81 	bl	8014080 <_Bfree>
 801357e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013582:	ea43 0102 	orr.w	r1, r3, r2
 8013586:	9b04      	ldr	r3, [sp, #16]
 8013588:	430b      	orrs	r3, r1
 801358a:	464d      	mov	r5, r9
 801358c:	d10f      	bne.n	80135ae <_dtoa_r+0xa66>
 801358e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013592:	d02a      	beq.n	80135ea <_dtoa_r+0xaa2>
 8013594:	9b03      	ldr	r3, [sp, #12]
 8013596:	2b00      	cmp	r3, #0
 8013598:	dd02      	ble.n	80135a0 <_dtoa_r+0xa58>
 801359a:	9b02      	ldr	r3, [sp, #8]
 801359c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80135a0:	f88b a000 	strb.w	sl, [fp]
 80135a4:	e775      	b.n	8013492 <_dtoa_r+0x94a>
 80135a6:	4638      	mov	r0, r7
 80135a8:	e7ba      	b.n	8013520 <_dtoa_r+0x9d8>
 80135aa:	2201      	movs	r2, #1
 80135ac:	e7e2      	b.n	8013574 <_dtoa_r+0xa2c>
 80135ae:	9b03      	ldr	r3, [sp, #12]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	db04      	blt.n	80135be <_dtoa_r+0xa76>
 80135b4:	9906      	ldr	r1, [sp, #24]
 80135b6:	430b      	orrs	r3, r1
 80135b8:	9904      	ldr	r1, [sp, #16]
 80135ba:	430b      	orrs	r3, r1
 80135bc:	d122      	bne.n	8013604 <_dtoa_r+0xabc>
 80135be:	2a00      	cmp	r2, #0
 80135c0:	ddee      	ble.n	80135a0 <_dtoa_r+0xa58>
 80135c2:	ee18 1a10 	vmov	r1, s16
 80135c6:	2201      	movs	r2, #1
 80135c8:	4620      	mov	r0, r4
 80135ca:	f000 ff75 	bl	80144b8 <__lshift>
 80135ce:	4631      	mov	r1, r6
 80135d0:	ee08 0a10 	vmov	s16, r0
 80135d4:	f000 ffe0 	bl	8014598 <__mcmp>
 80135d8:	2800      	cmp	r0, #0
 80135da:	dc03      	bgt.n	80135e4 <_dtoa_r+0xa9c>
 80135dc:	d1e0      	bne.n	80135a0 <_dtoa_r+0xa58>
 80135de:	f01a 0f01 	tst.w	sl, #1
 80135e2:	d0dd      	beq.n	80135a0 <_dtoa_r+0xa58>
 80135e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80135e8:	d1d7      	bne.n	801359a <_dtoa_r+0xa52>
 80135ea:	2339      	movs	r3, #57	; 0x39
 80135ec:	f88b 3000 	strb.w	r3, [fp]
 80135f0:	462b      	mov	r3, r5
 80135f2:	461d      	mov	r5, r3
 80135f4:	3b01      	subs	r3, #1
 80135f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80135fa:	2a39      	cmp	r2, #57	; 0x39
 80135fc:	d071      	beq.n	80136e2 <_dtoa_r+0xb9a>
 80135fe:	3201      	adds	r2, #1
 8013600:	701a      	strb	r2, [r3, #0]
 8013602:	e746      	b.n	8013492 <_dtoa_r+0x94a>
 8013604:	2a00      	cmp	r2, #0
 8013606:	dd07      	ble.n	8013618 <_dtoa_r+0xad0>
 8013608:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801360c:	d0ed      	beq.n	80135ea <_dtoa_r+0xaa2>
 801360e:	f10a 0301 	add.w	r3, sl, #1
 8013612:	f88b 3000 	strb.w	r3, [fp]
 8013616:	e73c      	b.n	8013492 <_dtoa_r+0x94a>
 8013618:	9b05      	ldr	r3, [sp, #20]
 801361a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801361e:	4599      	cmp	r9, r3
 8013620:	d047      	beq.n	80136b2 <_dtoa_r+0xb6a>
 8013622:	ee18 1a10 	vmov	r1, s16
 8013626:	2300      	movs	r3, #0
 8013628:	220a      	movs	r2, #10
 801362a:	4620      	mov	r0, r4
 801362c:	f000 fd4a 	bl	80140c4 <__multadd>
 8013630:	45b8      	cmp	r8, r7
 8013632:	ee08 0a10 	vmov	s16, r0
 8013636:	f04f 0300 	mov.w	r3, #0
 801363a:	f04f 020a 	mov.w	r2, #10
 801363e:	4641      	mov	r1, r8
 8013640:	4620      	mov	r0, r4
 8013642:	d106      	bne.n	8013652 <_dtoa_r+0xb0a>
 8013644:	f000 fd3e 	bl	80140c4 <__multadd>
 8013648:	4680      	mov	r8, r0
 801364a:	4607      	mov	r7, r0
 801364c:	f109 0901 	add.w	r9, r9, #1
 8013650:	e772      	b.n	8013538 <_dtoa_r+0x9f0>
 8013652:	f000 fd37 	bl	80140c4 <__multadd>
 8013656:	4639      	mov	r1, r7
 8013658:	4680      	mov	r8, r0
 801365a:	2300      	movs	r3, #0
 801365c:	220a      	movs	r2, #10
 801365e:	4620      	mov	r0, r4
 8013660:	f000 fd30 	bl	80140c4 <__multadd>
 8013664:	4607      	mov	r7, r0
 8013666:	e7f1      	b.n	801364c <_dtoa_r+0xb04>
 8013668:	9b03      	ldr	r3, [sp, #12]
 801366a:	9302      	str	r3, [sp, #8]
 801366c:	9d01      	ldr	r5, [sp, #4]
 801366e:	ee18 0a10 	vmov	r0, s16
 8013672:	4631      	mov	r1, r6
 8013674:	f7ff f9da 	bl	8012a2c <quorem>
 8013678:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801367c:	9b01      	ldr	r3, [sp, #4]
 801367e:	f805 ab01 	strb.w	sl, [r5], #1
 8013682:	1aea      	subs	r2, r5, r3
 8013684:	9b02      	ldr	r3, [sp, #8]
 8013686:	4293      	cmp	r3, r2
 8013688:	dd09      	ble.n	801369e <_dtoa_r+0xb56>
 801368a:	ee18 1a10 	vmov	r1, s16
 801368e:	2300      	movs	r3, #0
 8013690:	220a      	movs	r2, #10
 8013692:	4620      	mov	r0, r4
 8013694:	f000 fd16 	bl	80140c4 <__multadd>
 8013698:	ee08 0a10 	vmov	s16, r0
 801369c:	e7e7      	b.n	801366e <_dtoa_r+0xb26>
 801369e:	9b02      	ldr	r3, [sp, #8]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	bfc8      	it	gt
 80136a4:	461d      	movgt	r5, r3
 80136a6:	9b01      	ldr	r3, [sp, #4]
 80136a8:	bfd8      	it	le
 80136aa:	2501      	movle	r5, #1
 80136ac:	441d      	add	r5, r3
 80136ae:	f04f 0800 	mov.w	r8, #0
 80136b2:	ee18 1a10 	vmov	r1, s16
 80136b6:	2201      	movs	r2, #1
 80136b8:	4620      	mov	r0, r4
 80136ba:	f000 fefd 	bl	80144b8 <__lshift>
 80136be:	4631      	mov	r1, r6
 80136c0:	ee08 0a10 	vmov	s16, r0
 80136c4:	f000 ff68 	bl	8014598 <__mcmp>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	dc91      	bgt.n	80135f0 <_dtoa_r+0xaa8>
 80136cc:	d102      	bne.n	80136d4 <_dtoa_r+0xb8c>
 80136ce:	f01a 0f01 	tst.w	sl, #1
 80136d2:	d18d      	bne.n	80135f0 <_dtoa_r+0xaa8>
 80136d4:	462b      	mov	r3, r5
 80136d6:	461d      	mov	r5, r3
 80136d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80136dc:	2a30      	cmp	r2, #48	; 0x30
 80136de:	d0fa      	beq.n	80136d6 <_dtoa_r+0xb8e>
 80136e0:	e6d7      	b.n	8013492 <_dtoa_r+0x94a>
 80136e2:	9a01      	ldr	r2, [sp, #4]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d184      	bne.n	80135f2 <_dtoa_r+0xaaa>
 80136e8:	9b00      	ldr	r3, [sp, #0]
 80136ea:	3301      	adds	r3, #1
 80136ec:	9300      	str	r3, [sp, #0]
 80136ee:	2331      	movs	r3, #49	; 0x31
 80136f0:	7013      	strb	r3, [r2, #0]
 80136f2:	e6ce      	b.n	8013492 <_dtoa_r+0x94a>
 80136f4:	4b09      	ldr	r3, [pc, #36]	; (801371c <_dtoa_r+0xbd4>)
 80136f6:	f7ff ba95 	b.w	8012c24 <_dtoa_r+0xdc>
 80136fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f47f aa6e 	bne.w	8012bde <_dtoa_r+0x96>
 8013702:	4b07      	ldr	r3, [pc, #28]	; (8013720 <_dtoa_r+0xbd8>)
 8013704:	f7ff ba8e 	b.w	8012c24 <_dtoa_r+0xdc>
 8013708:	9b02      	ldr	r3, [sp, #8]
 801370a:	2b00      	cmp	r3, #0
 801370c:	dcae      	bgt.n	801366c <_dtoa_r+0xb24>
 801370e:	9b06      	ldr	r3, [sp, #24]
 8013710:	2b02      	cmp	r3, #2
 8013712:	f73f aea8 	bgt.w	8013466 <_dtoa_r+0x91e>
 8013716:	e7a9      	b.n	801366c <_dtoa_r+0xb24>
 8013718:	08015908 	.word	0x08015908
 801371c:	0801570c 	.word	0x0801570c
 8013720:	08015889 	.word	0x08015889

08013724 <__sflush_r>:
 8013724:	898a      	ldrh	r2, [r1, #12]
 8013726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801372a:	4605      	mov	r5, r0
 801372c:	0710      	lsls	r0, r2, #28
 801372e:	460c      	mov	r4, r1
 8013730:	d458      	bmi.n	80137e4 <__sflush_r+0xc0>
 8013732:	684b      	ldr	r3, [r1, #4]
 8013734:	2b00      	cmp	r3, #0
 8013736:	dc05      	bgt.n	8013744 <__sflush_r+0x20>
 8013738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801373a:	2b00      	cmp	r3, #0
 801373c:	dc02      	bgt.n	8013744 <__sflush_r+0x20>
 801373e:	2000      	movs	r0, #0
 8013740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013746:	2e00      	cmp	r6, #0
 8013748:	d0f9      	beq.n	801373e <__sflush_r+0x1a>
 801374a:	2300      	movs	r3, #0
 801374c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013750:	682f      	ldr	r7, [r5, #0]
 8013752:	602b      	str	r3, [r5, #0]
 8013754:	d032      	beq.n	80137bc <__sflush_r+0x98>
 8013756:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013758:	89a3      	ldrh	r3, [r4, #12]
 801375a:	075a      	lsls	r2, r3, #29
 801375c:	d505      	bpl.n	801376a <__sflush_r+0x46>
 801375e:	6863      	ldr	r3, [r4, #4]
 8013760:	1ac0      	subs	r0, r0, r3
 8013762:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013764:	b10b      	cbz	r3, 801376a <__sflush_r+0x46>
 8013766:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013768:	1ac0      	subs	r0, r0, r3
 801376a:	2300      	movs	r3, #0
 801376c:	4602      	mov	r2, r0
 801376e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013770:	6a21      	ldr	r1, [r4, #32]
 8013772:	4628      	mov	r0, r5
 8013774:	47b0      	blx	r6
 8013776:	1c43      	adds	r3, r0, #1
 8013778:	89a3      	ldrh	r3, [r4, #12]
 801377a:	d106      	bne.n	801378a <__sflush_r+0x66>
 801377c:	6829      	ldr	r1, [r5, #0]
 801377e:	291d      	cmp	r1, #29
 8013780:	d82c      	bhi.n	80137dc <__sflush_r+0xb8>
 8013782:	4a2a      	ldr	r2, [pc, #168]	; (801382c <__sflush_r+0x108>)
 8013784:	40ca      	lsrs	r2, r1
 8013786:	07d6      	lsls	r6, r2, #31
 8013788:	d528      	bpl.n	80137dc <__sflush_r+0xb8>
 801378a:	2200      	movs	r2, #0
 801378c:	6062      	str	r2, [r4, #4]
 801378e:	04d9      	lsls	r1, r3, #19
 8013790:	6922      	ldr	r2, [r4, #16]
 8013792:	6022      	str	r2, [r4, #0]
 8013794:	d504      	bpl.n	80137a0 <__sflush_r+0x7c>
 8013796:	1c42      	adds	r2, r0, #1
 8013798:	d101      	bne.n	801379e <__sflush_r+0x7a>
 801379a:	682b      	ldr	r3, [r5, #0]
 801379c:	b903      	cbnz	r3, 80137a0 <__sflush_r+0x7c>
 801379e:	6560      	str	r0, [r4, #84]	; 0x54
 80137a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80137a2:	602f      	str	r7, [r5, #0]
 80137a4:	2900      	cmp	r1, #0
 80137a6:	d0ca      	beq.n	801373e <__sflush_r+0x1a>
 80137a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137ac:	4299      	cmp	r1, r3
 80137ae:	d002      	beq.n	80137b6 <__sflush_r+0x92>
 80137b0:	4628      	mov	r0, r5
 80137b2:	f001 f8fd 	bl	80149b0 <_free_r>
 80137b6:	2000      	movs	r0, #0
 80137b8:	6360      	str	r0, [r4, #52]	; 0x34
 80137ba:	e7c1      	b.n	8013740 <__sflush_r+0x1c>
 80137bc:	6a21      	ldr	r1, [r4, #32]
 80137be:	2301      	movs	r3, #1
 80137c0:	4628      	mov	r0, r5
 80137c2:	47b0      	blx	r6
 80137c4:	1c41      	adds	r1, r0, #1
 80137c6:	d1c7      	bne.n	8013758 <__sflush_r+0x34>
 80137c8:	682b      	ldr	r3, [r5, #0]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d0c4      	beq.n	8013758 <__sflush_r+0x34>
 80137ce:	2b1d      	cmp	r3, #29
 80137d0:	d001      	beq.n	80137d6 <__sflush_r+0xb2>
 80137d2:	2b16      	cmp	r3, #22
 80137d4:	d101      	bne.n	80137da <__sflush_r+0xb6>
 80137d6:	602f      	str	r7, [r5, #0]
 80137d8:	e7b1      	b.n	801373e <__sflush_r+0x1a>
 80137da:	89a3      	ldrh	r3, [r4, #12]
 80137dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137e0:	81a3      	strh	r3, [r4, #12]
 80137e2:	e7ad      	b.n	8013740 <__sflush_r+0x1c>
 80137e4:	690f      	ldr	r7, [r1, #16]
 80137e6:	2f00      	cmp	r7, #0
 80137e8:	d0a9      	beq.n	801373e <__sflush_r+0x1a>
 80137ea:	0793      	lsls	r3, r2, #30
 80137ec:	680e      	ldr	r6, [r1, #0]
 80137ee:	bf08      	it	eq
 80137f0:	694b      	ldreq	r3, [r1, #20]
 80137f2:	600f      	str	r7, [r1, #0]
 80137f4:	bf18      	it	ne
 80137f6:	2300      	movne	r3, #0
 80137f8:	eba6 0807 	sub.w	r8, r6, r7
 80137fc:	608b      	str	r3, [r1, #8]
 80137fe:	f1b8 0f00 	cmp.w	r8, #0
 8013802:	dd9c      	ble.n	801373e <__sflush_r+0x1a>
 8013804:	6a21      	ldr	r1, [r4, #32]
 8013806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013808:	4643      	mov	r3, r8
 801380a:	463a      	mov	r2, r7
 801380c:	4628      	mov	r0, r5
 801380e:	47b0      	blx	r6
 8013810:	2800      	cmp	r0, #0
 8013812:	dc06      	bgt.n	8013822 <__sflush_r+0xfe>
 8013814:	89a3      	ldrh	r3, [r4, #12]
 8013816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801381a:	81a3      	strh	r3, [r4, #12]
 801381c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013820:	e78e      	b.n	8013740 <__sflush_r+0x1c>
 8013822:	4407      	add	r7, r0
 8013824:	eba8 0800 	sub.w	r8, r8, r0
 8013828:	e7e9      	b.n	80137fe <__sflush_r+0xda>
 801382a:	bf00      	nop
 801382c:	20400001 	.word	0x20400001

08013830 <_fflush_r>:
 8013830:	b538      	push	{r3, r4, r5, lr}
 8013832:	690b      	ldr	r3, [r1, #16]
 8013834:	4605      	mov	r5, r0
 8013836:	460c      	mov	r4, r1
 8013838:	b913      	cbnz	r3, 8013840 <_fflush_r+0x10>
 801383a:	2500      	movs	r5, #0
 801383c:	4628      	mov	r0, r5
 801383e:	bd38      	pop	{r3, r4, r5, pc}
 8013840:	b118      	cbz	r0, 801384a <_fflush_r+0x1a>
 8013842:	6983      	ldr	r3, [r0, #24]
 8013844:	b90b      	cbnz	r3, 801384a <_fflush_r+0x1a>
 8013846:	f7fd f91f 	bl	8010a88 <__sinit>
 801384a:	4b14      	ldr	r3, [pc, #80]	; (801389c <_fflush_r+0x6c>)
 801384c:	429c      	cmp	r4, r3
 801384e:	d11b      	bne.n	8013888 <_fflush_r+0x58>
 8013850:	686c      	ldr	r4, [r5, #4]
 8013852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d0ef      	beq.n	801383a <_fflush_r+0xa>
 801385a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801385c:	07d0      	lsls	r0, r2, #31
 801385e:	d404      	bmi.n	801386a <_fflush_r+0x3a>
 8013860:	0599      	lsls	r1, r3, #22
 8013862:	d402      	bmi.n	801386a <_fflush_r+0x3a>
 8013864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013866:	f7fd f9d2 	bl	8010c0e <__retarget_lock_acquire_recursive>
 801386a:	4628      	mov	r0, r5
 801386c:	4621      	mov	r1, r4
 801386e:	f7ff ff59 	bl	8013724 <__sflush_r>
 8013872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013874:	07da      	lsls	r2, r3, #31
 8013876:	4605      	mov	r5, r0
 8013878:	d4e0      	bmi.n	801383c <_fflush_r+0xc>
 801387a:	89a3      	ldrh	r3, [r4, #12]
 801387c:	059b      	lsls	r3, r3, #22
 801387e:	d4dd      	bmi.n	801383c <_fflush_r+0xc>
 8013880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013882:	f7fd f9c5 	bl	8010c10 <__retarget_lock_release_recursive>
 8013886:	e7d9      	b.n	801383c <_fflush_r+0xc>
 8013888:	4b05      	ldr	r3, [pc, #20]	; (80138a0 <_fflush_r+0x70>)
 801388a:	429c      	cmp	r4, r3
 801388c:	d101      	bne.n	8013892 <_fflush_r+0x62>
 801388e:	68ac      	ldr	r4, [r5, #8]
 8013890:	e7df      	b.n	8013852 <_fflush_r+0x22>
 8013892:	4b04      	ldr	r3, [pc, #16]	; (80138a4 <_fflush_r+0x74>)
 8013894:	429c      	cmp	r4, r3
 8013896:	bf08      	it	eq
 8013898:	68ec      	ldreq	r4, [r5, #12]
 801389a:	e7da      	b.n	8013852 <_fflush_r+0x22>
 801389c:	080156b8 	.word	0x080156b8
 80138a0:	080156d8 	.word	0x080156d8
 80138a4:	08015698 	.word	0x08015698

080138a8 <rshift>:
 80138a8:	6903      	ldr	r3, [r0, #16]
 80138aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80138ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80138b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80138b6:	f100 0414 	add.w	r4, r0, #20
 80138ba:	dd45      	ble.n	8013948 <rshift+0xa0>
 80138bc:	f011 011f 	ands.w	r1, r1, #31
 80138c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80138c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80138c8:	d10c      	bne.n	80138e4 <rshift+0x3c>
 80138ca:	f100 0710 	add.w	r7, r0, #16
 80138ce:	4629      	mov	r1, r5
 80138d0:	42b1      	cmp	r1, r6
 80138d2:	d334      	bcc.n	801393e <rshift+0x96>
 80138d4:	1a9b      	subs	r3, r3, r2
 80138d6:	009b      	lsls	r3, r3, #2
 80138d8:	1eea      	subs	r2, r5, #3
 80138da:	4296      	cmp	r6, r2
 80138dc:	bf38      	it	cc
 80138de:	2300      	movcc	r3, #0
 80138e0:	4423      	add	r3, r4
 80138e2:	e015      	b.n	8013910 <rshift+0x68>
 80138e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80138e8:	f1c1 0820 	rsb	r8, r1, #32
 80138ec:	40cf      	lsrs	r7, r1
 80138ee:	f105 0e04 	add.w	lr, r5, #4
 80138f2:	46a1      	mov	r9, r4
 80138f4:	4576      	cmp	r6, lr
 80138f6:	46f4      	mov	ip, lr
 80138f8:	d815      	bhi.n	8013926 <rshift+0x7e>
 80138fa:	1a9a      	subs	r2, r3, r2
 80138fc:	0092      	lsls	r2, r2, #2
 80138fe:	3a04      	subs	r2, #4
 8013900:	3501      	adds	r5, #1
 8013902:	42ae      	cmp	r6, r5
 8013904:	bf38      	it	cc
 8013906:	2200      	movcc	r2, #0
 8013908:	18a3      	adds	r3, r4, r2
 801390a:	50a7      	str	r7, [r4, r2]
 801390c:	b107      	cbz	r7, 8013910 <rshift+0x68>
 801390e:	3304      	adds	r3, #4
 8013910:	1b1a      	subs	r2, r3, r4
 8013912:	42a3      	cmp	r3, r4
 8013914:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013918:	bf08      	it	eq
 801391a:	2300      	moveq	r3, #0
 801391c:	6102      	str	r2, [r0, #16]
 801391e:	bf08      	it	eq
 8013920:	6143      	streq	r3, [r0, #20]
 8013922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013926:	f8dc c000 	ldr.w	ip, [ip]
 801392a:	fa0c fc08 	lsl.w	ip, ip, r8
 801392e:	ea4c 0707 	orr.w	r7, ip, r7
 8013932:	f849 7b04 	str.w	r7, [r9], #4
 8013936:	f85e 7b04 	ldr.w	r7, [lr], #4
 801393a:	40cf      	lsrs	r7, r1
 801393c:	e7da      	b.n	80138f4 <rshift+0x4c>
 801393e:	f851 cb04 	ldr.w	ip, [r1], #4
 8013942:	f847 cf04 	str.w	ip, [r7, #4]!
 8013946:	e7c3      	b.n	80138d0 <rshift+0x28>
 8013948:	4623      	mov	r3, r4
 801394a:	e7e1      	b.n	8013910 <rshift+0x68>

0801394c <__hexdig_fun>:
 801394c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013950:	2b09      	cmp	r3, #9
 8013952:	d802      	bhi.n	801395a <__hexdig_fun+0xe>
 8013954:	3820      	subs	r0, #32
 8013956:	b2c0      	uxtb	r0, r0
 8013958:	4770      	bx	lr
 801395a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801395e:	2b05      	cmp	r3, #5
 8013960:	d801      	bhi.n	8013966 <__hexdig_fun+0x1a>
 8013962:	3847      	subs	r0, #71	; 0x47
 8013964:	e7f7      	b.n	8013956 <__hexdig_fun+0xa>
 8013966:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801396a:	2b05      	cmp	r3, #5
 801396c:	d801      	bhi.n	8013972 <__hexdig_fun+0x26>
 801396e:	3827      	subs	r0, #39	; 0x27
 8013970:	e7f1      	b.n	8013956 <__hexdig_fun+0xa>
 8013972:	2000      	movs	r0, #0
 8013974:	4770      	bx	lr
	...

08013978 <__gethex>:
 8013978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801397c:	ed2d 8b02 	vpush	{d8}
 8013980:	b089      	sub	sp, #36	; 0x24
 8013982:	ee08 0a10 	vmov	s16, r0
 8013986:	9304      	str	r3, [sp, #16]
 8013988:	4bb4      	ldr	r3, [pc, #720]	; (8013c5c <__gethex+0x2e4>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	9301      	str	r3, [sp, #4]
 801398e:	4618      	mov	r0, r3
 8013990:	468b      	mov	fp, r1
 8013992:	4690      	mov	r8, r2
 8013994:	f7ec fc34 	bl	8000200 <strlen>
 8013998:	9b01      	ldr	r3, [sp, #4]
 801399a:	f8db 2000 	ldr.w	r2, [fp]
 801399e:	4403      	add	r3, r0
 80139a0:	4682      	mov	sl, r0
 80139a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80139a6:	9305      	str	r3, [sp, #20]
 80139a8:	1c93      	adds	r3, r2, #2
 80139aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80139ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80139b2:	32fe      	adds	r2, #254	; 0xfe
 80139b4:	18d1      	adds	r1, r2, r3
 80139b6:	461f      	mov	r7, r3
 80139b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80139bc:	9100      	str	r1, [sp, #0]
 80139be:	2830      	cmp	r0, #48	; 0x30
 80139c0:	d0f8      	beq.n	80139b4 <__gethex+0x3c>
 80139c2:	f7ff ffc3 	bl	801394c <__hexdig_fun>
 80139c6:	4604      	mov	r4, r0
 80139c8:	2800      	cmp	r0, #0
 80139ca:	d13a      	bne.n	8013a42 <__gethex+0xca>
 80139cc:	9901      	ldr	r1, [sp, #4]
 80139ce:	4652      	mov	r2, sl
 80139d0:	4638      	mov	r0, r7
 80139d2:	f001 f9b1 	bl	8014d38 <strncmp>
 80139d6:	4605      	mov	r5, r0
 80139d8:	2800      	cmp	r0, #0
 80139da:	d168      	bne.n	8013aae <__gethex+0x136>
 80139dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80139e0:	eb07 060a 	add.w	r6, r7, sl
 80139e4:	f7ff ffb2 	bl	801394c <__hexdig_fun>
 80139e8:	2800      	cmp	r0, #0
 80139ea:	d062      	beq.n	8013ab2 <__gethex+0x13a>
 80139ec:	4633      	mov	r3, r6
 80139ee:	7818      	ldrb	r0, [r3, #0]
 80139f0:	2830      	cmp	r0, #48	; 0x30
 80139f2:	461f      	mov	r7, r3
 80139f4:	f103 0301 	add.w	r3, r3, #1
 80139f8:	d0f9      	beq.n	80139ee <__gethex+0x76>
 80139fa:	f7ff ffa7 	bl	801394c <__hexdig_fun>
 80139fe:	2301      	movs	r3, #1
 8013a00:	fab0 f480 	clz	r4, r0
 8013a04:	0964      	lsrs	r4, r4, #5
 8013a06:	4635      	mov	r5, r6
 8013a08:	9300      	str	r3, [sp, #0]
 8013a0a:	463a      	mov	r2, r7
 8013a0c:	4616      	mov	r6, r2
 8013a0e:	3201      	adds	r2, #1
 8013a10:	7830      	ldrb	r0, [r6, #0]
 8013a12:	f7ff ff9b 	bl	801394c <__hexdig_fun>
 8013a16:	2800      	cmp	r0, #0
 8013a18:	d1f8      	bne.n	8013a0c <__gethex+0x94>
 8013a1a:	9901      	ldr	r1, [sp, #4]
 8013a1c:	4652      	mov	r2, sl
 8013a1e:	4630      	mov	r0, r6
 8013a20:	f001 f98a 	bl	8014d38 <strncmp>
 8013a24:	b980      	cbnz	r0, 8013a48 <__gethex+0xd0>
 8013a26:	b94d      	cbnz	r5, 8013a3c <__gethex+0xc4>
 8013a28:	eb06 050a 	add.w	r5, r6, sl
 8013a2c:	462a      	mov	r2, r5
 8013a2e:	4616      	mov	r6, r2
 8013a30:	3201      	adds	r2, #1
 8013a32:	7830      	ldrb	r0, [r6, #0]
 8013a34:	f7ff ff8a 	bl	801394c <__hexdig_fun>
 8013a38:	2800      	cmp	r0, #0
 8013a3a:	d1f8      	bne.n	8013a2e <__gethex+0xb6>
 8013a3c:	1bad      	subs	r5, r5, r6
 8013a3e:	00ad      	lsls	r5, r5, #2
 8013a40:	e004      	b.n	8013a4c <__gethex+0xd4>
 8013a42:	2400      	movs	r4, #0
 8013a44:	4625      	mov	r5, r4
 8013a46:	e7e0      	b.n	8013a0a <__gethex+0x92>
 8013a48:	2d00      	cmp	r5, #0
 8013a4a:	d1f7      	bne.n	8013a3c <__gethex+0xc4>
 8013a4c:	7833      	ldrb	r3, [r6, #0]
 8013a4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013a52:	2b50      	cmp	r3, #80	; 0x50
 8013a54:	d13b      	bne.n	8013ace <__gethex+0x156>
 8013a56:	7873      	ldrb	r3, [r6, #1]
 8013a58:	2b2b      	cmp	r3, #43	; 0x2b
 8013a5a:	d02c      	beq.n	8013ab6 <__gethex+0x13e>
 8013a5c:	2b2d      	cmp	r3, #45	; 0x2d
 8013a5e:	d02e      	beq.n	8013abe <__gethex+0x146>
 8013a60:	1c71      	adds	r1, r6, #1
 8013a62:	f04f 0900 	mov.w	r9, #0
 8013a66:	7808      	ldrb	r0, [r1, #0]
 8013a68:	f7ff ff70 	bl	801394c <__hexdig_fun>
 8013a6c:	1e43      	subs	r3, r0, #1
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	2b18      	cmp	r3, #24
 8013a72:	d82c      	bhi.n	8013ace <__gethex+0x156>
 8013a74:	f1a0 0210 	sub.w	r2, r0, #16
 8013a78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013a7c:	f7ff ff66 	bl	801394c <__hexdig_fun>
 8013a80:	1e43      	subs	r3, r0, #1
 8013a82:	b2db      	uxtb	r3, r3
 8013a84:	2b18      	cmp	r3, #24
 8013a86:	d91d      	bls.n	8013ac4 <__gethex+0x14c>
 8013a88:	f1b9 0f00 	cmp.w	r9, #0
 8013a8c:	d000      	beq.n	8013a90 <__gethex+0x118>
 8013a8e:	4252      	negs	r2, r2
 8013a90:	4415      	add	r5, r2
 8013a92:	f8cb 1000 	str.w	r1, [fp]
 8013a96:	b1e4      	cbz	r4, 8013ad2 <__gethex+0x15a>
 8013a98:	9b00      	ldr	r3, [sp, #0]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	bf14      	ite	ne
 8013a9e:	2700      	movne	r7, #0
 8013aa0:	2706      	moveq	r7, #6
 8013aa2:	4638      	mov	r0, r7
 8013aa4:	b009      	add	sp, #36	; 0x24
 8013aa6:	ecbd 8b02 	vpop	{d8}
 8013aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aae:	463e      	mov	r6, r7
 8013ab0:	4625      	mov	r5, r4
 8013ab2:	2401      	movs	r4, #1
 8013ab4:	e7ca      	b.n	8013a4c <__gethex+0xd4>
 8013ab6:	f04f 0900 	mov.w	r9, #0
 8013aba:	1cb1      	adds	r1, r6, #2
 8013abc:	e7d3      	b.n	8013a66 <__gethex+0xee>
 8013abe:	f04f 0901 	mov.w	r9, #1
 8013ac2:	e7fa      	b.n	8013aba <__gethex+0x142>
 8013ac4:	230a      	movs	r3, #10
 8013ac6:	fb03 0202 	mla	r2, r3, r2, r0
 8013aca:	3a10      	subs	r2, #16
 8013acc:	e7d4      	b.n	8013a78 <__gethex+0x100>
 8013ace:	4631      	mov	r1, r6
 8013ad0:	e7df      	b.n	8013a92 <__gethex+0x11a>
 8013ad2:	1bf3      	subs	r3, r6, r7
 8013ad4:	3b01      	subs	r3, #1
 8013ad6:	4621      	mov	r1, r4
 8013ad8:	2b07      	cmp	r3, #7
 8013ada:	dc0b      	bgt.n	8013af4 <__gethex+0x17c>
 8013adc:	ee18 0a10 	vmov	r0, s16
 8013ae0:	f000 fa8e 	bl	8014000 <_Balloc>
 8013ae4:	4604      	mov	r4, r0
 8013ae6:	b940      	cbnz	r0, 8013afa <__gethex+0x182>
 8013ae8:	4b5d      	ldr	r3, [pc, #372]	; (8013c60 <__gethex+0x2e8>)
 8013aea:	4602      	mov	r2, r0
 8013aec:	21de      	movs	r1, #222	; 0xde
 8013aee:	485d      	ldr	r0, [pc, #372]	; (8013c64 <__gethex+0x2ec>)
 8013af0:	f001 f944 	bl	8014d7c <__assert_func>
 8013af4:	3101      	adds	r1, #1
 8013af6:	105b      	asrs	r3, r3, #1
 8013af8:	e7ee      	b.n	8013ad8 <__gethex+0x160>
 8013afa:	f100 0914 	add.w	r9, r0, #20
 8013afe:	f04f 0b00 	mov.w	fp, #0
 8013b02:	f1ca 0301 	rsb	r3, sl, #1
 8013b06:	f8cd 9008 	str.w	r9, [sp, #8]
 8013b0a:	f8cd b000 	str.w	fp, [sp]
 8013b0e:	9306      	str	r3, [sp, #24]
 8013b10:	42b7      	cmp	r7, r6
 8013b12:	d340      	bcc.n	8013b96 <__gethex+0x21e>
 8013b14:	9802      	ldr	r0, [sp, #8]
 8013b16:	9b00      	ldr	r3, [sp, #0]
 8013b18:	f840 3b04 	str.w	r3, [r0], #4
 8013b1c:	eba0 0009 	sub.w	r0, r0, r9
 8013b20:	1080      	asrs	r0, r0, #2
 8013b22:	0146      	lsls	r6, r0, #5
 8013b24:	6120      	str	r0, [r4, #16]
 8013b26:	4618      	mov	r0, r3
 8013b28:	f000 fb5c 	bl	80141e4 <__hi0bits>
 8013b2c:	1a30      	subs	r0, r6, r0
 8013b2e:	f8d8 6000 	ldr.w	r6, [r8]
 8013b32:	42b0      	cmp	r0, r6
 8013b34:	dd63      	ble.n	8013bfe <__gethex+0x286>
 8013b36:	1b87      	subs	r7, r0, r6
 8013b38:	4639      	mov	r1, r7
 8013b3a:	4620      	mov	r0, r4
 8013b3c:	f000 ff00 	bl	8014940 <__any_on>
 8013b40:	4682      	mov	sl, r0
 8013b42:	b1a8      	cbz	r0, 8013b70 <__gethex+0x1f8>
 8013b44:	1e7b      	subs	r3, r7, #1
 8013b46:	1159      	asrs	r1, r3, #5
 8013b48:	f003 021f 	and.w	r2, r3, #31
 8013b4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013b50:	f04f 0a01 	mov.w	sl, #1
 8013b54:	fa0a f202 	lsl.w	r2, sl, r2
 8013b58:	420a      	tst	r2, r1
 8013b5a:	d009      	beq.n	8013b70 <__gethex+0x1f8>
 8013b5c:	4553      	cmp	r3, sl
 8013b5e:	dd05      	ble.n	8013b6c <__gethex+0x1f4>
 8013b60:	1eb9      	subs	r1, r7, #2
 8013b62:	4620      	mov	r0, r4
 8013b64:	f000 feec 	bl	8014940 <__any_on>
 8013b68:	2800      	cmp	r0, #0
 8013b6a:	d145      	bne.n	8013bf8 <__gethex+0x280>
 8013b6c:	f04f 0a02 	mov.w	sl, #2
 8013b70:	4639      	mov	r1, r7
 8013b72:	4620      	mov	r0, r4
 8013b74:	f7ff fe98 	bl	80138a8 <rshift>
 8013b78:	443d      	add	r5, r7
 8013b7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013b7e:	42ab      	cmp	r3, r5
 8013b80:	da4c      	bge.n	8013c1c <__gethex+0x2a4>
 8013b82:	ee18 0a10 	vmov	r0, s16
 8013b86:	4621      	mov	r1, r4
 8013b88:	f000 fa7a 	bl	8014080 <_Bfree>
 8013b8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013b8e:	2300      	movs	r3, #0
 8013b90:	6013      	str	r3, [r2, #0]
 8013b92:	27a3      	movs	r7, #163	; 0xa3
 8013b94:	e785      	b.n	8013aa2 <__gethex+0x12a>
 8013b96:	1e73      	subs	r3, r6, #1
 8013b98:	9a05      	ldr	r2, [sp, #20]
 8013b9a:	9303      	str	r3, [sp, #12]
 8013b9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013ba0:	4293      	cmp	r3, r2
 8013ba2:	d019      	beq.n	8013bd8 <__gethex+0x260>
 8013ba4:	f1bb 0f20 	cmp.w	fp, #32
 8013ba8:	d107      	bne.n	8013bba <__gethex+0x242>
 8013baa:	9b02      	ldr	r3, [sp, #8]
 8013bac:	9a00      	ldr	r2, [sp, #0]
 8013bae:	f843 2b04 	str.w	r2, [r3], #4
 8013bb2:	9302      	str	r3, [sp, #8]
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	9300      	str	r3, [sp, #0]
 8013bb8:	469b      	mov	fp, r3
 8013bba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013bbe:	f7ff fec5 	bl	801394c <__hexdig_fun>
 8013bc2:	9b00      	ldr	r3, [sp, #0]
 8013bc4:	f000 000f 	and.w	r0, r0, #15
 8013bc8:	fa00 f00b 	lsl.w	r0, r0, fp
 8013bcc:	4303      	orrs	r3, r0
 8013bce:	9300      	str	r3, [sp, #0]
 8013bd0:	f10b 0b04 	add.w	fp, fp, #4
 8013bd4:	9b03      	ldr	r3, [sp, #12]
 8013bd6:	e00d      	b.n	8013bf4 <__gethex+0x27c>
 8013bd8:	9b03      	ldr	r3, [sp, #12]
 8013bda:	9a06      	ldr	r2, [sp, #24]
 8013bdc:	4413      	add	r3, r2
 8013bde:	42bb      	cmp	r3, r7
 8013be0:	d3e0      	bcc.n	8013ba4 <__gethex+0x22c>
 8013be2:	4618      	mov	r0, r3
 8013be4:	9901      	ldr	r1, [sp, #4]
 8013be6:	9307      	str	r3, [sp, #28]
 8013be8:	4652      	mov	r2, sl
 8013bea:	f001 f8a5 	bl	8014d38 <strncmp>
 8013bee:	9b07      	ldr	r3, [sp, #28]
 8013bf0:	2800      	cmp	r0, #0
 8013bf2:	d1d7      	bne.n	8013ba4 <__gethex+0x22c>
 8013bf4:	461e      	mov	r6, r3
 8013bf6:	e78b      	b.n	8013b10 <__gethex+0x198>
 8013bf8:	f04f 0a03 	mov.w	sl, #3
 8013bfc:	e7b8      	b.n	8013b70 <__gethex+0x1f8>
 8013bfe:	da0a      	bge.n	8013c16 <__gethex+0x29e>
 8013c00:	1a37      	subs	r7, r6, r0
 8013c02:	4621      	mov	r1, r4
 8013c04:	ee18 0a10 	vmov	r0, s16
 8013c08:	463a      	mov	r2, r7
 8013c0a:	f000 fc55 	bl	80144b8 <__lshift>
 8013c0e:	1bed      	subs	r5, r5, r7
 8013c10:	4604      	mov	r4, r0
 8013c12:	f100 0914 	add.w	r9, r0, #20
 8013c16:	f04f 0a00 	mov.w	sl, #0
 8013c1a:	e7ae      	b.n	8013b7a <__gethex+0x202>
 8013c1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013c20:	42a8      	cmp	r0, r5
 8013c22:	dd72      	ble.n	8013d0a <__gethex+0x392>
 8013c24:	1b45      	subs	r5, r0, r5
 8013c26:	42ae      	cmp	r6, r5
 8013c28:	dc36      	bgt.n	8013c98 <__gethex+0x320>
 8013c2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013c2e:	2b02      	cmp	r3, #2
 8013c30:	d02a      	beq.n	8013c88 <__gethex+0x310>
 8013c32:	2b03      	cmp	r3, #3
 8013c34:	d02c      	beq.n	8013c90 <__gethex+0x318>
 8013c36:	2b01      	cmp	r3, #1
 8013c38:	d11c      	bne.n	8013c74 <__gethex+0x2fc>
 8013c3a:	42ae      	cmp	r6, r5
 8013c3c:	d11a      	bne.n	8013c74 <__gethex+0x2fc>
 8013c3e:	2e01      	cmp	r6, #1
 8013c40:	d112      	bne.n	8013c68 <__gethex+0x2f0>
 8013c42:	9a04      	ldr	r2, [sp, #16]
 8013c44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013c48:	6013      	str	r3, [r2, #0]
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	6123      	str	r3, [r4, #16]
 8013c4e:	f8c9 3000 	str.w	r3, [r9]
 8013c52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013c54:	2762      	movs	r7, #98	; 0x62
 8013c56:	601c      	str	r4, [r3, #0]
 8013c58:	e723      	b.n	8013aa2 <__gethex+0x12a>
 8013c5a:	bf00      	nop
 8013c5c:	08015980 	.word	0x08015980
 8013c60:	08015908 	.word	0x08015908
 8013c64:	08015919 	.word	0x08015919
 8013c68:	1e71      	subs	r1, r6, #1
 8013c6a:	4620      	mov	r0, r4
 8013c6c:	f000 fe68 	bl	8014940 <__any_on>
 8013c70:	2800      	cmp	r0, #0
 8013c72:	d1e6      	bne.n	8013c42 <__gethex+0x2ca>
 8013c74:	ee18 0a10 	vmov	r0, s16
 8013c78:	4621      	mov	r1, r4
 8013c7a:	f000 fa01 	bl	8014080 <_Bfree>
 8013c7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013c80:	2300      	movs	r3, #0
 8013c82:	6013      	str	r3, [r2, #0]
 8013c84:	2750      	movs	r7, #80	; 0x50
 8013c86:	e70c      	b.n	8013aa2 <__gethex+0x12a>
 8013c88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d1f2      	bne.n	8013c74 <__gethex+0x2fc>
 8013c8e:	e7d8      	b.n	8013c42 <__gethex+0x2ca>
 8013c90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d1d5      	bne.n	8013c42 <__gethex+0x2ca>
 8013c96:	e7ed      	b.n	8013c74 <__gethex+0x2fc>
 8013c98:	1e6f      	subs	r7, r5, #1
 8013c9a:	f1ba 0f00 	cmp.w	sl, #0
 8013c9e:	d131      	bne.n	8013d04 <__gethex+0x38c>
 8013ca0:	b127      	cbz	r7, 8013cac <__gethex+0x334>
 8013ca2:	4639      	mov	r1, r7
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	f000 fe4b 	bl	8014940 <__any_on>
 8013caa:	4682      	mov	sl, r0
 8013cac:	117b      	asrs	r3, r7, #5
 8013cae:	2101      	movs	r1, #1
 8013cb0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013cb4:	f007 071f 	and.w	r7, r7, #31
 8013cb8:	fa01 f707 	lsl.w	r7, r1, r7
 8013cbc:	421f      	tst	r7, r3
 8013cbe:	4629      	mov	r1, r5
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	bf18      	it	ne
 8013cc4:	f04a 0a02 	orrne.w	sl, sl, #2
 8013cc8:	1b76      	subs	r6, r6, r5
 8013cca:	f7ff fded 	bl	80138a8 <rshift>
 8013cce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013cd2:	2702      	movs	r7, #2
 8013cd4:	f1ba 0f00 	cmp.w	sl, #0
 8013cd8:	d048      	beq.n	8013d6c <__gethex+0x3f4>
 8013cda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013cde:	2b02      	cmp	r3, #2
 8013ce0:	d015      	beq.n	8013d0e <__gethex+0x396>
 8013ce2:	2b03      	cmp	r3, #3
 8013ce4:	d017      	beq.n	8013d16 <__gethex+0x39e>
 8013ce6:	2b01      	cmp	r3, #1
 8013ce8:	d109      	bne.n	8013cfe <__gethex+0x386>
 8013cea:	f01a 0f02 	tst.w	sl, #2
 8013cee:	d006      	beq.n	8013cfe <__gethex+0x386>
 8013cf0:	f8d9 0000 	ldr.w	r0, [r9]
 8013cf4:	ea4a 0a00 	orr.w	sl, sl, r0
 8013cf8:	f01a 0f01 	tst.w	sl, #1
 8013cfc:	d10e      	bne.n	8013d1c <__gethex+0x3a4>
 8013cfe:	f047 0710 	orr.w	r7, r7, #16
 8013d02:	e033      	b.n	8013d6c <__gethex+0x3f4>
 8013d04:	f04f 0a01 	mov.w	sl, #1
 8013d08:	e7d0      	b.n	8013cac <__gethex+0x334>
 8013d0a:	2701      	movs	r7, #1
 8013d0c:	e7e2      	b.n	8013cd4 <__gethex+0x35c>
 8013d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d10:	f1c3 0301 	rsb	r3, r3, #1
 8013d14:	9315      	str	r3, [sp, #84]	; 0x54
 8013d16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d0f0      	beq.n	8013cfe <__gethex+0x386>
 8013d1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013d20:	f104 0314 	add.w	r3, r4, #20
 8013d24:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013d28:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013d2c:	f04f 0c00 	mov.w	ip, #0
 8013d30:	4618      	mov	r0, r3
 8013d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d36:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8013d3a:	d01c      	beq.n	8013d76 <__gethex+0x3fe>
 8013d3c:	3201      	adds	r2, #1
 8013d3e:	6002      	str	r2, [r0, #0]
 8013d40:	2f02      	cmp	r7, #2
 8013d42:	f104 0314 	add.w	r3, r4, #20
 8013d46:	d13f      	bne.n	8013dc8 <__gethex+0x450>
 8013d48:	f8d8 2000 	ldr.w	r2, [r8]
 8013d4c:	3a01      	subs	r2, #1
 8013d4e:	42b2      	cmp	r2, r6
 8013d50:	d10a      	bne.n	8013d68 <__gethex+0x3f0>
 8013d52:	1171      	asrs	r1, r6, #5
 8013d54:	2201      	movs	r2, #1
 8013d56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013d5a:	f006 061f 	and.w	r6, r6, #31
 8013d5e:	fa02 f606 	lsl.w	r6, r2, r6
 8013d62:	421e      	tst	r6, r3
 8013d64:	bf18      	it	ne
 8013d66:	4617      	movne	r7, r2
 8013d68:	f047 0720 	orr.w	r7, r7, #32
 8013d6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013d6e:	601c      	str	r4, [r3, #0]
 8013d70:	9b04      	ldr	r3, [sp, #16]
 8013d72:	601d      	str	r5, [r3, #0]
 8013d74:	e695      	b.n	8013aa2 <__gethex+0x12a>
 8013d76:	4299      	cmp	r1, r3
 8013d78:	f843 cc04 	str.w	ip, [r3, #-4]
 8013d7c:	d8d8      	bhi.n	8013d30 <__gethex+0x3b8>
 8013d7e:	68a3      	ldr	r3, [r4, #8]
 8013d80:	459b      	cmp	fp, r3
 8013d82:	db19      	blt.n	8013db8 <__gethex+0x440>
 8013d84:	6861      	ldr	r1, [r4, #4]
 8013d86:	ee18 0a10 	vmov	r0, s16
 8013d8a:	3101      	adds	r1, #1
 8013d8c:	f000 f938 	bl	8014000 <_Balloc>
 8013d90:	4681      	mov	r9, r0
 8013d92:	b918      	cbnz	r0, 8013d9c <__gethex+0x424>
 8013d94:	4b1a      	ldr	r3, [pc, #104]	; (8013e00 <__gethex+0x488>)
 8013d96:	4602      	mov	r2, r0
 8013d98:	2184      	movs	r1, #132	; 0x84
 8013d9a:	e6a8      	b.n	8013aee <__gethex+0x176>
 8013d9c:	6922      	ldr	r2, [r4, #16]
 8013d9e:	3202      	adds	r2, #2
 8013da0:	f104 010c 	add.w	r1, r4, #12
 8013da4:	0092      	lsls	r2, r2, #2
 8013da6:	300c      	adds	r0, #12
 8013da8:	f7fc ff33 	bl	8010c12 <memcpy>
 8013dac:	4621      	mov	r1, r4
 8013dae:	ee18 0a10 	vmov	r0, s16
 8013db2:	f000 f965 	bl	8014080 <_Bfree>
 8013db6:	464c      	mov	r4, r9
 8013db8:	6923      	ldr	r3, [r4, #16]
 8013dba:	1c5a      	adds	r2, r3, #1
 8013dbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013dc0:	6122      	str	r2, [r4, #16]
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	615a      	str	r2, [r3, #20]
 8013dc6:	e7bb      	b.n	8013d40 <__gethex+0x3c8>
 8013dc8:	6922      	ldr	r2, [r4, #16]
 8013dca:	455a      	cmp	r2, fp
 8013dcc:	dd0b      	ble.n	8013de6 <__gethex+0x46e>
 8013dce:	2101      	movs	r1, #1
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	f7ff fd69 	bl	80138a8 <rshift>
 8013dd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013dda:	3501      	adds	r5, #1
 8013ddc:	42ab      	cmp	r3, r5
 8013dde:	f6ff aed0 	blt.w	8013b82 <__gethex+0x20a>
 8013de2:	2701      	movs	r7, #1
 8013de4:	e7c0      	b.n	8013d68 <__gethex+0x3f0>
 8013de6:	f016 061f 	ands.w	r6, r6, #31
 8013dea:	d0fa      	beq.n	8013de2 <__gethex+0x46a>
 8013dec:	4453      	add	r3, sl
 8013dee:	f1c6 0620 	rsb	r6, r6, #32
 8013df2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013df6:	f000 f9f5 	bl	80141e4 <__hi0bits>
 8013dfa:	42b0      	cmp	r0, r6
 8013dfc:	dbe7      	blt.n	8013dce <__gethex+0x456>
 8013dfe:	e7f0      	b.n	8013de2 <__gethex+0x46a>
 8013e00:	08015908 	.word	0x08015908

08013e04 <L_shift>:
 8013e04:	f1c2 0208 	rsb	r2, r2, #8
 8013e08:	0092      	lsls	r2, r2, #2
 8013e0a:	b570      	push	{r4, r5, r6, lr}
 8013e0c:	f1c2 0620 	rsb	r6, r2, #32
 8013e10:	6843      	ldr	r3, [r0, #4]
 8013e12:	6804      	ldr	r4, [r0, #0]
 8013e14:	fa03 f506 	lsl.w	r5, r3, r6
 8013e18:	432c      	orrs	r4, r5
 8013e1a:	40d3      	lsrs	r3, r2
 8013e1c:	6004      	str	r4, [r0, #0]
 8013e1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013e22:	4288      	cmp	r0, r1
 8013e24:	d3f4      	bcc.n	8013e10 <L_shift+0xc>
 8013e26:	bd70      	pop	{r4, r5, r6, pc}

08013e28 <__match>:
 8013e28:	b530      	push	{r4, r5, lr}
 8013e2a:	6803      	ldr	r3, [r0, #0]
 8013e2c:	3301      	adds	r3, #1
 8013e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e32:	b914      	cbnz	r4, 8013e3a <__match+0x12>
 8013e34:	6003      	str	r3, [r0, #0]
 8013e36:	2001      	movs	r0, #1
 8013e38:	bd30      	pop	{r4, r5, pc}
 8013e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013e42:	2d19      	cmp	r5, #25
 8013e44:	bf98      	it	ls
 8013e46:	3220      	addls	r2, #32
 8013e48:	42a2      	cmp	r2, r4
 8013e4a:	d0f0      	beq.n	8013e2e <__match+0x6>
 8013e4c:	2000      	movs	r0, #0
 8013e4e:	e7f3      	b.n	8013e38 <__match+0x10>

08013e50 <__hexnan>:
 8013e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e54:	680b      	ldr	r3, [r1, #0]
 8013e56:	115e      	asrs	r6, r3, #5
 8013e58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013e5c:	f013 031f 	ands.w	r3, r3, #31
 8013e60:	b087      	sub	sp, #28
 8013e62:	bf18      	it	ne
 8013e64:	3604      	addne	r6, #4
 8013e66:	2500      	movs	r5, #0
 8013e68:	1f37      	subs	r7, r6, #4
 8013e6a:	4690      	mov	r8, r2
 8013e6c:	6802      	ldr	r2, [r0, #0]
 8013e6e:	9301      	str	r3, [sp, #4]
 8013e70:	4682      	mov	sl, r0
 8013e72:	f846 5c04 	str.w	r5, [r6, #-4]
 8013e76:	46b9      	mov	r9, r7
 8013e78:	463c      	mov	r4, r7
 8013e7a:	9502      	str	r5, [sp, #8]
 8013e7c:	46ab      	mov	fp, r5
 8013e7e:	7851      	ldrb	r1, [r2, #1]
 8013e80:	1c53      	adds	r3, r2, #1
 8013e82:	9303      	str	r3, [sp, #12]
 8013e84:	b341      	cbz	r1, 8013ed8 <__hexnan+0x88>
 8013e86:	4608      	mov	r0, r1
 8013e88:	9205      	str	r2, [sp, #20]
 8013e8a:	9104      	str	r1, [sp, #16]
 8013e8c:	f7ff fd5e 	bl	801394c <__hexdig_fun>
 8013e90:	2800      	cmp	r0, #0
 8013e92:	d14f      	bne.n	8013f34 <__hexnan+0xe4>
 8013e94:	9904      	ldr	r1, [sp, #16]
 8013e96:	9a05      	ldr	r2, [sp, #20]
 8013e98:	2920      	cmp	r1, #32
 8013e9a:	d818      	bhi.n	8013ece <__hexnan+0x7e>
 8013e9c:	9b02      	ldr	r3, [sp, #8]
 8013e9e:	459b      	cmp	fp, r3
 8013ea0:	dd13      	ble.n	8013eca <__hexnan+0x7a>
 8013ea2:	454c      	cmp	r4, r9
 8013ea4:	d206      	bcs.n	8013eb4 <__hexnan+0x64>
 8013ea6:	2d07      	cmp	r5, #7
 8013ea8:	dc04      	bgt.n	8013eb4 <__hexnan+0x64>
 8013eaa:	462a      	mov	r2, r5
 8013eac:	4649      	mov	r1, r9
 8013eae:	4620      	mov	r0, r4
 8013eb0:	f7ff ffa8 	bl	8013e04 <L_shift>
 8013eb4:	4544      	cmp	r4, r8
 8013eb6:	d950      	bls.n	8013f5a <__hexnan+0x10a>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	f1a4 0904 	sub.w	r9, r4, #4
 8013ebe:	f844 3c04 	str.w	r3, [r4, #-4]
 8013ec2:	f8cd b008 	str.w	fp, [sp, #8]
 8013ec6:	464c      	mov	r4, r9
 8013ec8:	461d      	mov	r5, r3
 8013eca:	9a03      	ldr	r2, [sp, #12]
 8013ecc:	e7d7      	b.n	8013e7e <__hexnan+0x2e>
 8013ece:	2929      	cmp	r1, #41	; 0x29
 8013ed0:	d156      	bne.n	8013f80 <__hexnan+0x130>
 8013ed2:	3202      	adds	r2, #2
 8013ed4:	f8ca 2000 	str.w	r2, [sl]
 8013ed8:	f1bb 0f00 	cmp.w	fp, #0
 8013edc:	d050      	beq.n	8013f80 <__hexnan+0x130>
 8013ede:	454c      	cmp	r4, r9
 8013ee0:	d206      	bcs.n	8013ef0 <__hexnan+0xa0>
 8013ee2:	2d07      	cmp	r5, #7
 8013ee4:	dc04      	bgt.n	8013ef0 <__hexnan+0xa0>
 8013ee6:	462a      	mov	r2, r5
 8013ee8:	4649      	mov	r1, r9
 8013eea:	4620      	mov	r0, r4
 8013eec:	f7ff ff8a 	bl	8013e04 <L_shift>
 8013ef0:	4544      	cmp	r4, r8
 8013ef2:	d934      	bls.n	8013f5e <__hexnan+0x10e>
 8013ef4:	f1a8 0204 	sub.w	r2, r8, #4
 8013ef8:	4623      	mov	r3, r4
 8013efa:	f853 1b04 	ldr.w	r1, [r3], #4
 8013efe:	f842 1f04 	str.w	r1, [r2, #4]!
 8013f02:	429f      	cmp	r7, r3
 8013f04:	d2f9      	bcs.n	8013efa <__hexnan+0xaa>
 8013f06:	1b3b      	subs	r3, r7, r4
 8013f08:	f023 0303 	bic.w	r3, r3, #3
 8013f0c:	3304      	adds	r3, #4
 8013f0e:	3401      	adds	r4, #1
 8013f10:	3e03      	subs	r6, #3
 8013f12:	42b4      	cmp	r4, r6
 8013f14:	bf88      	it	hi
 8013f16:	2304      	movhi	r3, #4
 8013f18:	4443      	add	r3, r8
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	f843 2b04 	str.w	r2, [r3], #4
 8013f20:	429f      	cmp	r7, r3
 8013f22:	d2fb      	bcs.n	8013f1c <__hexnan+0xcc>
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	b91b      	cbnz	r3, 8013f30 <__hexnan+0xe0>
 8013f28:	4547      	cmp	r7, r8
 8013f2a:	d127      	bne.n	8013f7c <__hexnan+0x12c>
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	603b      	str	r3, [r7, #0]
 8013f30:	2005      	movs	r0, #5
 8013f32:	e026      	b.n	8013f82 <__hexnan+0x132>
 8013f34:	3501      	adds	r5, #1
 8013f36:	2d08      	cmp	r5, #8
 8013f38:	f10b 0b01 	add.w	fp, fp, #1
 8013f3c:	dd06      	ble.n	8013f4c <__hexnan+0xfc>
 8013f3e:	4544      	cmp	r4, r8
 8013f40:	d9c3      	bls.n	8013eca <__hexnan+0x7a>
 8013f42:	2300      	movs	r3, #0
 8013f44:	f844 3c04 	str.w	r3, [r4, #-4]
 8013f48:	2501      	movs	r5, #1
 8013f4a:	3c04      	subs	r4, #4
 8013f4c:	6822      	ldr	r2, [r4, #0]
 8013f4e:	f000 000f 	and.w	r0, r0, #15
 8013f52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013f56:	6022      	str	r2, [r4, #0]
 8013f58:	e7b7      	b.n	8013eca <__hexnan+0x7a>
 8013f5a:	2508      	movs	r5, #8
 8013f5c:	e7b5      	b.n	8013eca <__hexnan+0x7a>
 8013f5e:	9b01      	ldr	r3, [sp, #4]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d0df      	beq.n	8013f24 <__hexnan+0xd4>
 8013f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f68:	f1c3 0320 	rsb	r3, r3, #32
 8013f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8013f70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013f74:	401a      	ands	r2, r3
 8013f76:	f846 2c04 	str.w	r2, [r6, #-4]
 8013f7a:	e7d3      	b.n	8013f24 <__hexnan+0xd4>
 8013f7c:	3f04      	subs	r7, #4
 8013f7e:	e7d1      	b.n	8013f24 <__hexnan+0xd4>
 8013f80:	2004      	movs	r0, #4
 8013f82:	b007      	add	sp, #28
 8013f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f88 <_localeconv_r>:
 8013f88:	4800      	ldr	r0, [pc, #0]	; (8013f8c <_localeconv_r+0x4>)
 8013f8a:	4770      	bx	lr
 8013f8c:	20000168 	.word	0x20000168

08013f90 <_lseek_r>:
 8013f90:	b538      	push	{r3, r4, r5, lr}
 8013f92:	4d07      	ldr	r5, [pc, #28]	; (8013fb0 <_lseek_r+0x20>)
 8013f94:	4604      	mov	r4, r0
 8013f96:	4608      	mov	r0, r1
 8013f98:	4611      	mov	r1, r2
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	602a      	str	r2, [r5, #0]
 8013f9e:	461a      	mov	r2, r3
 8013fa0:	f7ee f806 	bl	8001fb0 <_lseek>
 8013fa4:	1c43      	adds	r3, r0, #1
 8013fa6:	d102      	bne.n	8013fae <_lseek_r+0x1e>
 8013fa8:	682b      	ldr	r3, [r5, #0]
 8013faa:	b103      	cbz	r3, 8013fae <_lseek_r+0x1e>
 8013fac:	6023      	str	r3, [r4, #0]
 8013fae:	bd38      	pop	{r3, r4, r5, pc}
 8013fb0:	200026c0 	.word	0x200026c0

08013fb4 <malloc>:
 8013fb4:	4b02      	ldr	r3, [pc, #8]	; (8013fc0 <malloc+0xc>)
 8013fb6:	4601      	mov	r1, r0
 8013fb8:	6818      	ldr	r0, [r3, #0]
 8013fba:	f7fc be61 	b.w	8010c80 <_malloc_r>
 8013fbe:	bf00      	nop
 8013fc0:	20000010 	.word	0x20000010

08013fc4 <__ascii_mbtowc>:
 8013fc4:	b082      	sub	sp, #8
 8013fc6:	b901      	cbnz	r1, 8013fca <__ascii_mbtowc+0x6>
 8013fc8:	a901      	add	r1, sp, #4
 8013fca:	b142      	cbz	r2, 8013fde <__ascii_mbtowc+0x1a>
 8013fcc:	b14b      	cbz	r3, 8013fe2 <__ascii_mbtowc+0x1e>
 8013fce:	7813      	ldrb	r3, [r2, #0]
 8013fd0:	600b      	str	r3, [r1, #0]
 8013fd2:	7812      	ldrb	r2, [r2, #0]
 8013fd4:	1e10      	subs	r0, r2, #0
 8013fd6:	bf18      	it	ne
 8013fd8:	2001      	movne	r0, #1
 8013fda:	b002      	add	sp, #8
 8013fdc:	4770      	bx	lr
 8013fde:	4610      	mov	r0, r2
 8013fe0:	e7fb      	b.n	8013fda <__ascii_mbtowc+0x16>
 8013fe2:	f06f 0001 	mvn.w	r0, #1
 8013fe6:	e7f8      	b.n	8013fda <__ascii_mbtowc+0x16>

08013fe8 <__malloc_lock>:
 8013fe8:	4801      	ldr	r0, [pc, #4]	; (8013ff0 <__malloc_lock+0x8>)
 8013fea:	f7fc be10 	b.w	8010c0e <__retarget_lock_acquire_recursive>
 8013fee:	bf00      	nop
 8013ff0:	200026b4 	.word	0x200026b4

08013ff4 <__malloc_unlock>:
 8013ff4:	4801      	ldr	r0, [pc, #4]	; (8013ffc <__malloc_unlock+0x8>)
 8013ff6:	f7fc be0b 	b.w	8010c10 <__retarget_lock_release_recursive>
 8013ffa:	bf00      	nop
 8013ffc:	200026b4 	.word	0x200026b4

08014000 <_Balloc>:
 8014000:	b570      	push	{r4, r5, r6, lr}
 8014002:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014004:	4604      	mov	r4, r0
 8014006:	460d      	mov	r5, r1
 8014008:	b976      	cbnz	r6, 8014028 <_Balloc+0x28>
 801400a:	2010      	movs	r0, #16
 801400c:	f7ff ffd2 	bl	8013fb4 <malloc>
 8014010:	4602      	mov	r2, r0
 8014012:	6260      	str	r0, [r4, #36]	; 0x24
 8014014:	b920      	cbnz	r0, 8014020 <_Balloc+0x20>
 8014016:	4b18      	ldr	r3, [pc, #96]	; (8014078 <_Balloc+0x78>)
 8014018:	4818      	ldr	r0, [pc, #96]	; (801407c <_Balloc+0x7c>)
 801401a:	2166      	movs	r1, #102	; 0x66
 801401c:	f000 feae 	bl	8014d7c <__assert_func>
 8014020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014024:	6006      	str	r6, [r0, #0]
 8014026:	60c6      	str	r6, [r0, #12]
 8014028:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801402a:	68f3      	ldr	r3, [r6, #12]
 801402c:	b183      	cbz	r3, 8014050 <_Balloc+0x50>
 801402e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014030:	68db      	ldr	r3, [r3, #12]
 8014032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014036:	b9b8      	cbnz	r0, 8014068 <_Balloc+0x68>
 8014038:	2101      	movs	r1, #1
 801403a:	fa01 f605 	lsl.w	r6, r1, r5
 801403e:	1d72      	adds	r2, r6, #5
 8014040:	0092      	lsls	r2, r2, #2
 8014042:	4620      	mov	r0, r4
 8014044:	f000 fc9d 	bl	8014982 <_calloc_r>
 8014048:	b160      	cbz	r0, 8014064 <_Balloc+0x64>
 801404a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801404e:	e00e      	b.n	801406e <_Balloc+0x6e>
 8014050:	2221      	movs	r2, #33	; 0x21
 8014052:	2104      	movs	r1, #4
 8014054:	4620      	mov	r0, r4
 8014056:	f000 fc94 	bl	8014982 <_calloc_r>
 801405a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801405c:	60f0      	str	r0, [r6, #12]
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d1e4      	bne.n	801402e <_Balloc+0x2e>
 8014064:	2000      	movs	r0, #0
 8014066:	bd70      	pop	{r4, r5, r6, pc}
 8014068:	6802      	ldr	r2, [r0, #0]
 801406a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801406e:	2300      	movs	r3, #0
 8014070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014074:	e7f7      	b.n	8014066 <_Balloc+0x66>
 8014076:	bf00      	nop
 8014078:	08015896 	.word	0x08015896
 801407c:	08015994 	.word	0x08015994

08014080 <_Bfree>:
 8014080:	b570      	push	{r4, r5, r6, lr}
 8014082:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014084:	4605      	mov	r5, r0
 8014086:	460c      	mov	r4, r1
 8014088:	b976      	cbnz	r6, 80140a8 <_Bfree+0x28>
 801408a:	2010      	movs	r0, #16
 801408c:	f7ff ff92 	bl	8013fb4 <malloc>
 8014090:	4602      	mov	r2, r0
 8014092:	6268      	str	r0, [r5, #36]	; 0x24
 8014094:	b920      	cbnz	r0, 80140a0 <_Bfree+0x20>
 8014096:	4b09      	ldr	r3, [pc, #36]	; (80140bc <_Bfree+0x3c>)
 8014098:	4809      	ldr	r0, [pc, #36]	; (80140c0 <_Bfree+0x40>)
 801409a:	218a      	movs	r1, #138	; 0x8a
 801409c:	f000 fe6e 	bl	8014d7c <__assert_func>
 80140a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80140a4:	6006      	str	r6, [r0, #0]
 80140a6:	60c6      	str	r6, [r0, #12]
 80140a8:	b13c      	cbz	r4, 80140ba <_Bfree+0x3a>
 80140aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80140ac:	6862      	ldr	r2, [r4, #4]
 80140ae:	68db      	ldr	r3, [r3, #12]
 80140b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80140b4:	6021      	str	r1, [r4, #0]
 80140b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80140ba:	bd70      	pop	{r4, r5, r6, pc}
 80140bc:	08015896 	.word	0x08015896
 80140c0:	08015994 	.word	0x08015994

080140c4 <__multadd>:
 80140c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140c8:	690d      	ldr	r5, [r1, #16]
 80140ca:	4607      	mov	r7, r0
 80140cc:	460c      	mov	r4, r1
 80140ce:	461e      	mov	r6, r3
 80140d0:	f101 0c14 	add.w	ip, r1, #20
 80140d4:	2000      	movs	r0, #0
 80140d6:	f8dc 3000 	ldr.w	r3, [ip]
 80140da:	b299      	uxth	r1, r3
 80140dc:	fb02 6101 	mla	r1, r2, r1, r6
 80140e0:	0c1e      	lsrs	r6, r3, #16
 80140e2:	0c0b      	lsrs	r3, r1, #16
 80140e4:	fb02 3306 	mla	r3, r2, r6, r3
 80140e8:	b289      	uxth	r1, r1
 80140ea:	3001      	adds	r0, #1
 80140ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80140f0:	4285      	cmp	r5, r0
 80140f2:	f84c 1b04 	str.w	r1, [ip], #4
 80140f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80140fa:	dcec      	bgt.n	80140d6 <__multadd+0x12>
 80140fc:	b30e      	cbz	r6, 8014142 <__multadd+0x7e>
 80140fe:	68a3      	ldr	r3, [r4, #8]
 8014100:	42ab      	cmp	r3, r5
 8014102:	dc19      	bgt.n	8014138 <__multadd+0x74>
 8014104:	6861      	ldr	r1, [r4, #4]
 8014106:	4638      	mov	r0, r7
 8014108:	3101      	adds	r1, #1
 801410a:	f7ff ff79 	bl	8014000 <_Balloc>
 801410e:	4680      	mov	r8, r0
 8014110:	b928      	cbnz	r0, 801411e <__multadd+0x5a>
 8014112:	4602      	mov	r2, r0
 8014114:	4b0c      	ldr	r3, [pc, #48]	; (8014148 <__multadd+0x84>)
 8014116:	480d      	ldr	r0, [pc, #52]	; (801414c <__multadd+0x88>)
 8014118:	21b5      	movs	r1, #181	; 0xb5
 801411a:	f000 fe2f 	bl	8014d7c <__assert_func>
 801411e:	6922      	ldr	r2, [r4, #16]
 8014120:	3202      	adds	r2, #2
 8014122:	f104 010c 	add.w	r1, r4, #12
 8014126:	0092      	lsls	r2, r2, #2
 8014128:	300c      	adds	r0, #12
 801412a:	f7fc fd72 	bl	8010c12 <memcpy>
 801412e:	4621      	mov	r1, r4
 8014130:	4638      	mov	r0, r7
 8014132:	f7ff ffa5 	bl	8014080 <_Bfree>
 8014136:	4644      	mov	r4, r8
 8014138:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801413c:	3501      	adds	r5, #1
 801413e:	615e      	str	r6, [r3, #20]
 8014140:	6125      	str	r5, [r4, #16]
 8014142:	4620      	mov	r0, r4
 8014144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014148:	08015908 	.word	0x08015908
 801414c:	08015994 	.word	0x08015994

08014150 <__s2b>:
 8014150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014154:	460c      	mov	r4, r1
 8014156:	4615      	mov	r5, r2
 8014158:	461f      	mov	r7, r3
 801415a:	2209      	movs	r2, #9
 801415c:	3308      	adds	r3, #8
 801415e:	4606      	mov	r6, r0
 8014160:	fb93 f3f2 	sdiv	r3, r3, r2
 8014164:	2100      	movs	r1, #0
 8014166:	2201      	movs	r2, #1
 8014168:	429a      	cmp	r2, r3
 801416a:	db09      	blt.n	8014180 <__s2b+0x30>
 801416c:	4630      	mov	r0, r6
 801416e:	f7ff ff47 	bl	8014000 <_Balloc>
 8014172:	b940      	cbnz	r0, 8014186 <__s2b+0x36>
 8014174:	4602      	mov	r2, r0
 8014176:	4b19      	ldr	r3, [pc, #100]	; (80141dc <__s2b+0x8c>)
 8014178:	4819      	ldr	r0, [pc, #100]	; (80141e0 <__s2b+0x90>)
 801417a:	21ce      	movs	r1, #206	; 0xce
 801417c:	f000 fdfe 	bl	8014d7c <__assert_func>
 8014180:	0052      	lsls	r2, r2, #1
 8014182:	3101      	adds	r1, #1
 8014184:	e7f0      	b.n	8014168 <__s2b+0x18>
 8014186:	9b08      	ldr	r3, [sp, #32]
 8014188:	6143      	str	r3, [r0, #20]
 801418a:	2d09      	cmp	r5, #9
 801418c:	f04f 0301 	mov.w	r3, #1
 8014190:	6103      	str	r3, [r0, #16]
 8014192:	dd16      	ble.n	80141c2 <__s2b+0x72>
 8014194:	f104 0909 	add.w	r9, r4, #9
 8014198:	46c8      	mov	r8, r9
 801419a:	442c      	add	r4, r5
 801419c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80141a0:	4601      	mov	r1, r0
 80141a2:	3b30      	subs	r3, #48	; 0x30
 80141a4:	220a      	movs	r2, #10
 80141a6:	4630      	mov	r0, r6
 80141a8:	f7ff ff8c 	bl	80140c4 <__multadd>
 80141ac:	45a0      	cmp	r8, r4
 80141ae:	d1f5      	bne.n	801419c <__s2b+0x4c>
 80141b0:	f1a5 0408 	sub.w	r4, r5, #8
 80141b4:	444c      	add	r4, r9
 80141b6:	1b2d      	subs	r5, r5, r4
 80141b8:	1963      	adds	r3, r4, r5
 80141ba:	42bb      	cmp	r3, r7
 80141bc:	db04      	blt.n	80141c8 <__s2b+0x78>
 80141be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141c2:	340a      	adds	r4, #10
 80141c4:	2509      	movs	r5, #9
 80141c6:	e7f6      	b.n	80141b6 <__s2b+0x66>
 80141c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80141cc:	4601      	mov	r1, r0
 80141ce:	3b30      	subs	r3, #48	; 0x30
 80141d0:	220a      	movs	r2, #10
 80141d2:	4630      	mov	r0, r6
 80141d4:	f7ff ff76 	bl	80140c4 <__multadd>
 80141d8:	e7ee      	b.n	80141b8 <__s2b+0x68>
 80141da:	bf00      	nop
 80141dc:	08015908 	.word	0x08015908
 80141e0:	08015994 	.word	0x08015994

080141e4 <__hi0bits>:
 80141e4:	0c03      	lsrs	r3, r0, #16
 80141e6:	041b      	lsls	r3, r3, #16
 80141e8:	b9d3      	cbnz	r3, 8014220 <__hi0bits+0x3c>
 80141ea:	0400      	lsls	r0, r0, #16
 80141ec:	2310      	movs	r3, #16
 80141ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80141f2:	bf04      	itt	eq
 80141f4:	0200      	lsleq	r0, r0, #8
 80141f6:	3308      	addeq	r3, #8
 80141f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80141fc:	bf04      	itt	eq
 80141fe:	0100      	lsleq	r0, r0, #4
 8014200:	3304      	addeq	r3, #4
 8014202:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014206:	bf04      	itt	eq
 8014208:	0080      	lsleq	r0, r0, #2
 801420a:	3302      	addeq	r3, #2
 801420c:	2800      	cmp	r0, #0
 801420e:	db05      	blt.n	801421c <__hi0bits+0x38>
 8014210:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014214:	f103 0301 	add.w	r3, r3, #1
 8014218:	bf08      	it	eq
 801421a:	2320      	moveq	r3, #32
 801421c:	4618      	mov	r0, r3
 801421e:	4770      	bx	lr
 8014220:	2300      	movs	r3, #0
 8014222:	e7e4      	b.n	80141ee <__hi0bits+0xa>

08014224 <__lo0bits>:
 8014224:	6803      	ldr	r3, [r0, #0]
 8014226:	f013 0207 	ands.w	r2, r3, #7
 801422a:	4601      	mov	r1, r0
 801422c:	d00b      	beq.n	8014246 <__lo0bits+0x22>
 801422e:	07da      	lsls	r2, r3, #31
 8014230:	d423      	bmi.n	801427a <__lo0bits+0x56>
 8014232:	0798      	lsls	r0, r3, #30
 8014234:	bf49      	itett	mi
 8014236:	085b      	lsrmi	r3, r3, #1
 8014238:	089b      	lsrpl	r3, r3, #2
 801423a:	2001      	movmi	r0, #1
 801423c:	600b      	strmi	r3, [r1, #0]
 801423e:	bf5c      	itt	pl
 8014240:	600b      	strpl	r3, [r1, #0]
 8014242:	2002      	movpl	r0, #2
 8014244:	4770      	bx	lr
 8014246:	b298      	uxth	r0, r3
 8014248:	b9a8      	cbnz	r0, 8014276 <__lo0bits+0x52>
 801424a:	0c1b      	lsrs	r3, r3, #16
 801424c:	2010      	movs	r0, #16
 801424e:	b2da      	uxtb	r2, r3
 8014250:	b90a      	cbnz	r2, 8014256 <__lo0bits+0x32>
 8014252:	3008      	adds	r0, #8
 8014254:	0a1b      	lsrs	r3, r3, #8
 8014256:	071a      	lsls	r2, r3, #28
 8014258:	bf04      	itt	eq
 801425a:	091b      	lsreq	r3, r3, #4
 801425c:	3004      	addeq	r0, #4
 801425e:	079a      	lsls	r2, r3, #30
 8014260:	bf04      	itt	eq
 8014262:	089b      	lsreq	r3, r3, #2
 8014264:	3002      	addeq	r0, #2
 8014266:	07da      	lsls	r2, r3, #31
 8014268:	d403      	bmi.n	8014272 <__lo0bits+0x4e>
 801426a:	085b      	lsrs	r3, r3, #1
 801426c:	f100 0001 	add.w	r0, r0, #1
 8014270:	d005      	beq.n	801427e <__lo0bits+0x5a>
 8014272:	600b      	str	r3, [r1, #0]
 8014274:	4770      	bx	lr
 8014276:	4610      	mov	r0, r2
 8014278:	e7e9      	b.n	801424e <__lo0bits+0x2a>
 801427a:	2000      	movs	r0, #0
 801427c:	4770      	bx	lr
 801427e:	2020      	movs	r0, #32
 8014280:	4770      	bx	lr
	...

08014284 <__i2b>:
 8014284:	b510      	push	{r4, lr}
 8014286:	460c      	mov	r4, r1
 8014288:	2101      	movs	r1, #1
 801428a:	f7ff feb9 	bl	8014000 <_Balloc>
 801428e:	4602      	mov	r2, r0
 8014290:	b928      	cbnz	r0, 801429e <__i2b+0x1a>
 8014292:	4b05      	ldr	r3, [pc, #20]	; (80142a8 <__i2b+0x24>)
 8014294:	4805      	ldr	r0, [pc, #20]	; (80142ac <__i2b+0x28>)
 8014296:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801429a:	f000 fd6f 	bl	8014d7c <__assert_func>
 801429e:	2301      	movs	r3, #1
 80142a0:	6144      	str	r4, [r0, #20]
 80142a2:	6103      	str	r3, [r0, #16]
 80142a4:	bd10      	pop	{r4, pc}
 80142a6:	bf00      	nop
 80142a8:	08015908 	.word	0x08015908
 80142ac:	08015994 	.word	0x08015994

080142b0 <__multiply>:
 80142b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b4:	4691      	mov	r9, r2
 80142b6:	690a      	ldr	r2, [r1, #16]
 80142b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80142bc:	429a      	cmp	r2, r3
 80142be:	bfb8      	it	lt
 80142c0:	460b      	movlt	r3, r1
 80142c2:	460c      	mov	r4, r1
 80142c4:	bfbc      	itt	lt
 80142c6:	464c      	movlt	r4, r9
 80142c8:	4699      	movlt	r9, r3
 80142ca:	6927      	ldr	r7, [r4, #16]
 80142cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80142d0:	68a3      	ldr	r3, [r4, #8]
 80142d2:	6861      	ldr	r1, [r4, #4]
 80142d4:	eb07 060a 	add.w	r6, r7, sl
 80142d8:	42b3      	cmp	r3, r6
 80142da:	b085      	sub	sp, #20
 80142dc:	bfb8      	it	lt
 80142de:	3101      	addlt	r1, #1
 80142e0:	f7ff fe8e 	bl	8014000 <_Balloc>
 80142e4:	b930      	cbnz	r0, 80142f4 <__multiply+0x44>
 80142e6:	4602      	mov	r2, r0
 80142e8:	4b44      	ldr	r3, [pc, #272]	; (80143fc <__multiply+0x14c>)
 80142ea:	4845      	ldr	r0, [pc, #276]	; (8014400 <__multiply+0x150>)
 80142ec:	f240 115d 	movw	r1, #349	; 0x15d
 80142f0:	f000 fd44 	bl	8014d7c <__assert_func>
 80142f4:	f100 0514 	add.w	r5, r0, #20
 80142f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80142fc:	462b      	mov	r3, r5
 80142fe:	2200      	movs	r2, #0
 8014300:	4543      	cmp	r3, r8
 8014302:	d321      	bcc.n	8014348 <__multiply+0x98>
 8014304:	f104 0314 	add.w	r3, r4, #20
 8014308:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801430c:	f109 0314 	add.w	r3, r9, #20
 8014310:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014314:	9202      	str	r2, [sp, #8]
 8014316:	1b3a      	subs	r2, r7, r4
 8014318:	3a15      	subs	r2, #21
 801431a:	f022 0203 	bic.w	r2, r2, #3
 801431e:	3204      	adds	r2, #4
 8014320:	f104 0115 	add.w	r1, r4, #21
 8014324:	428f      	cmp	r7, r1
 8014326:	bf38      	it	cc
 8014328:	2204      	movcc	r2, #4
 801432a:	9201      	str	r2, [sp, #4]
 801432c:	9a02      	ldr	r2, [sp, #8]
 801432e:	9303      	str	r3, [sp, #12]
 8014330:	429a      	cmp	r2, r3
 8014332:	d80c      	bhi.n	801434e <__multiply+0x9e>
 8014334:	2e00      	cmp	r6, #0
 8014336:	dd03      	ble.n	8014340 <__multiply+0x90>
 8014338:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801433c:	2b00      	cmp	r3, #0
 801433e:	d05a      	beq.n	80143f6 <__multiply+0x146>
 8014340:	6106      	str	r6, [r0, #16]
 8014342:	b005      	add	sp, #20
 8014344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014348:	f843 2b04 	str.w	r2, [r3], #4
 801434c:	e7d8      	b.n	8014300 <__multiply+0x50>
 801434e:	f8b3 a000 	ldrh.w	sl, [r3]
 8014352:	f1ba 0f00 	cmp.w	sl, #0
 8014356:	d024      	beq.n	80143a2 <__multiply+0xf2>
 8014358:	f104 0e14 	add.w	lr, r4, #20
 801435c:	46a9      	mov	r9, r5
 801435e:	f04f 0c00 	mov.w	ip, #0
 8014362:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014366:	f8d9 1000 	ldr.w	r1, [r9]
 801436a:	fa1f fb82 	uxth.w	fp, r2
 801436e:	b289      	uxth	r1, r1
 8014370:	fb0a 110b 	mla	r1, sl, fp, r1
 8014374:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014378:	f8d9 2000 	ldr.w	r2, [r9]
 801437c:	4461      	add	r1, ip
 801437e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014382:	fb0a c20b 	mla	r2, sl, fp, ip
 8014386:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801438a:	b289      	uxth	r1, r1
 801438c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014390:	4577      	cmp	r7, lr
 8014392:	f849 1b04 	str.w	r1, [r9], #4
 8014396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801439a:	d8e2      	bhi.n	8014362 <__multiply+0xb2>
 801439c:	9a01      	ldr	r2, [sp, #4]
 801439e:	f845 c002 	str.w	ip, [r5, r2]
 80143a2:	9a03      	ldr	r2, [sp, #12]
 80143a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80143a8:	3304      	adds	r3, #4
 80143aa:	f1b9 0f00 	cmp.w	r9, #0
 80143ae:	d020      	beq.n	80143f2 <__multiply+0x142>
 80143b0:	6829      	ldr	r1, [r5, #0]
 80143b2:	f104 0c14 	add.w	ip, r4, #20
 80143b6:	46ae      	mov	lr, r5
 80143b8:	f04f 0a00 	mov.w	sl, #0
 80143bc:	f8bc b000 	ldrh.w	fp, [ip]
 80143c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80143c4:	fb09 220b 	mla	r2, r9, fp, r2
 80143c8:	4492      	add	sl, r2
 80143ca:	b289      	uxth	r1, r1
 80143cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80143d0:	f84e 1b04 	str.w	r1, [lr], #4
 80143d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80143d8:	f8be 1000 	ldrh.w	r1, [lr]
 80143dc:	0c12      	lsrs	r2, r2, #16
 80143de:	fb09 1102 	mla	r1, r9, r2, r1
 80143e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80143e6:	4567      	cmp	r7, ip
 80143e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80143ec:	d8e6      	bhi.n	80143bc <__multiply+0x10c>
 80143ee:	9a01      	ldr	r2, [sp, #4]
 80143f0:	50a9      	str	r1, [r5, r2]
 80143f2:	3504      	adds	r5, #4
 80143f4:	e79a      	b.n	801432c <__multiply+0x7c>
 80143f6:	3e01      	subs	r6, #1
 80143f8:	e79c      	b.n	8014334 <__multiply+0x84>
 80143fa:	bf00      	nop
 80143fc:	08015908 	.word	0x08015908
 8014400:	08015994 	.word	0x08015994

08014404 <__pow5mult>:
 8014404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014408:	4615      	mov	r5, r2
 801440a:	f012 0203 	ands.w	r2, r2, #3
 801440e:	4606      	mov	r6, r0
 8014410:	460f      	mov	r7, r1
 8014412:	d007      	beq.n	8014424 <__pow5mult+0x20>
 8014414:	4c25      	ldr	r4, [pc, #148]	; (80144ac <__pow5mult+0xa8>)
 8014416:	3a01      	subs	r2, #1
 8014418:	2300      	movs	r3, #0
 801441a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801441e:	f7ff fe51 	bl	80140c4 <__multadd>
 8014422:	4607      	mov	r7, r0
 8014424:	10ad      	asrs	r5, r5, #2
 8014426:	d03d      	beq.n	80144a4 <__pow5mult+0xa0>
 8014428:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801442a:	b97c      	cbnz	r4, 801444c <__pow5mult+0x48>
 801442c:	2010      	movs	r0, #16
 801442e:	f7ff fdc1 	bl	8013fb4 <malloc>
 8014432:	4602      	mov	r2, r0
 8014434:	6270      	str	r0, [r6, #36]	; 0x24
 8014436:	b928      	cbnz	r0, 8014444 <__pow5mult+0x40>
 8014438:	4b1d      	ldr	r3, [pc, #116]	; (80144b0 <__pow5mult+0xac>)
 801443a:	481e      	ldr	r0, [pc, #120]	; (80144b4 <__pow5mult+0xb0>)
 801443c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014440:	f000 fc9c 	bl	8014d7c <__assert_func>
 8014444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014448:	6004      	str	r4, [r0, #0]
 801444a:	60c4      	str	r4, [r0, #12]
 801444c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014454:	b94c      	cbnz	r4, 801446a <__pow5mult+0x66>
 8014456:	f240 2171 	movw	r1, #625	; 0x271
 801445a:	4630      	mov	r0, r6
 801445c:	f7ff ff12 	bl	8014284 <__i2b>
 8014460:	2300      	movs	r3, #0
 8014462:	f8c8 0008 	str.w	r0, [r8, #8]
 8014466:	4604      	mov	r4, r0
 8014468:	6003      	str	r3, [r0, #0]
 801446a:	f04f 0900 	mov.w	r9, #0
 801446e:	07eb      	lsls	r3, r5, #31
 8014470:	d50a      	bpl.n	8014488 <__pow5mult+0x84>
 8014472:	4639      	mov	r1, r7
 8014474:	4622      	mov	r2, r4
 8014476:	4630      	mov	r0, r6
 8014478:	f7ff ff1a 	bl	80142b0 <__multiply>
 801447c:	4639      	mov	r1, r7
 801447e:	4680      	mov	r8, r0
 8014480:	4630      	mov	r0, r6
 8014482:	f7ff fdfd 	bl	8014080 <_Bfree>
 8014486:	4647      	mov	r7, r8
 8014488:	106d      	asrs	r5, r5, #1
 801448a:	d00b      	beq.n	80144a4 <__pow5mult+0xa0>
 801448c:	6820      	ldr	r0, [r4, #0]
 801448e:	b938      	cbnz	r0, 80144a0 <__pow5mult+0x9c>
 8014490:	4622      	mov	r2, r4
 8014492:	4621      	mov	r1, r4
 8014494:	4630      	mov	r0, r6
 8014496:	f7ff ff0b 	bl	80142b0 <__multiply>
 801449a:	6020      	str	r0, [r4, #0]
 801449c:	f8c0 9000 	str.w	r9, [r0]
 80144a0:	4604      	mov	r4, r0
 80144a2:	e7e4      	b.n	801446e <__pow5mult+0x6a>
 80144a4:	4638      	mov	r0, r7
 80144a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144aa:	bf00      	nop
 80144ac:	08015ae0 	.word	0x08015ae0
 80144b0:	08015896 	.word	0x08015896
 80144b4:	08015994 	.word	0x08015994

080144b8 <__lshift>:
 80144b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144bc:	460c      	mov	r4, r1
 80144be:	6849      	ldr	r1, [r1, #4]
 80144c0:	6923      	ldr	r3, [r4, #16]
 80144c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80144c6:	68a3      	ldr	r3, [r4, #8]
 80144c8:	4607      	mov	r7, r0
 80144ca:	4691      	mov	r9, r2
 80144cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80144d0:	f108 0601 	add.w	r6, r8, #1
 80144d4:	42b3      	cmp	r3, r6
 80144d6:	db0b      	blt.n	80144f0 <__lshift+0x38>
 80144d8:	4638      	mov	r0, r7
 80144da:	f7ff fd91 	bl	8014000 <_Balloc>
 80144de:	4605      	mov	r5, r0
 80144e0:	b948      	cbnz	r0, 80144f6 <__lshift+0x3e>
 80144e2:	4602      	mov	r2, r0
 80144e4:	4b2a      	ldr	r3, [pc, #168]	; (8014590 <__lshift+0xd8>)
 80144e6:	482b      	ldr	r0, [pc, #172]	; (8014594 <__lshift+0xdc>)
 80144e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80144ec:	f000 fc46 	bl	8014d7c <__assert_func>
 80144f0:	3101      	adds	r1, #1
 80144f2:	005b      	lsls	r3, r3, #1
 80144f4:	e7ee      	b.n	80144d4 <__lshift+0x1c>
 80144f6:	2300      	movs	r3, #0
 80144f8:	f100 0114 	add.w	r1, r0, #20
 80144fc:	f100 0210 	add.w	r2, r0, #16
 8014500:	4618      	mov	r0, r3
 8014502:	4553      	cmp	r3, sl
 8014504:	db37      	blt.n	8014576 <__lshift+0xbe>
 8014506:	6920      	ldr	r0, [r4, #16]
 8014508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801450c:	f104 0314 	add.w	r3, r4, #20
 8014510:	f019 091f 	ands.w	r9, r9, #31
 8014514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014518:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801451c:	d02f      	beq.n	801457e <__lshift+0xc6>
 801451e:	f1c9 0e20 	rsb	lr, r9, #32
 8014522:	468a      	mov	sl, r1
 8014524:	f04f 0c00 	mov.w	ip, #0
 8014528:	681a      	ldr	r2, [r3, #0]
 801452a:	fa02 f209 	lsl.w	r2, r2, r9
 801452e:	ea42 020c 	orr.w	r2, r2, ip
 8014532:	f84a 2b04 	str.w	r2, [sl], #4
 8014536:	f853 2b04 	ldr.w	r2, [r3], #4
 801453a:	4298      	cmp	r0, r3
 801453c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014540:	d8f2      	bhi.n	8014528 <__lshift+0x70>
 8014542:	1b03      	subs	r3, r0, r4
 8014544:	3b15      	subs	r3, #21
 8014546:	f023 0303 	bic.w	r3, r3, #3
 801454a:	3304      	adds	r3, #4
 801454c:	f104 0215 	add.w	r2, r4, #21
 8014550:	4290      	cmp	r0, r2
 8014552:	bf38      	it	cc
 8014554:	2304      	movcc	r3, #4
 8014556:	f841 c003 	str.w	ip, [r1, r3]
 801455a:	f1bc 0f00 	cmp.w	ip, #0
 801455e:	d001      	beq.n	8014564 <__lshift+0xac>
 8014560:	f108 0602 	add.w	r6, r8, #2
 8014564:	3e01      	subs	r6, #1
 8014566:	4638      	mov	r0, r7
 8014568:	612e      	str	r6, [r5, #16]
 801456a:	4621      	mov	r1, r4
 801456c:	f7ff fd88 	bl	8014080 <_Bfree>
 8014570:	4628      	mov	r0, r5
 8014572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014576:	f842 0f04 	str.w	r0, [r2, #4]!
 801457a:	3301      	adds	r3, #1
 801457c:	e7c1      	b.n	8014502 <__lshift+0x4a>
 801457e:	3904      	subs	r1, #4
 8014580:	f853 2b04 	ldr.w	r2, [r3], #4
 8014584:	f841 2f04 	str.w	r2, [r1, #4]!
 8014588:	4298      	cmp	r0, r3
 801458a:	d8f9      	bhi.n	8014580 <__lshift+0xc8>
 801458c:	e7ea      	b.n	8014564 <__lshift+0xac>
 801458e:	bf00      	nop
 8014590:	08015908 	.word	0x08015908
 8014594:	08015994 	.word	0x08015994

08014598 <__mcmp>:
 8014598:	b530      	push	{r4, r5, lr}
 801459a:	6902      	ldr	r2, [r0, #16]
 801459c:	690c      	ldr	r4, [r1, #16]
 801459e:	1b12      	subs	r2, r2, r4
 80145a0:	d10e      	bne.n	80145c0 <__mcmp+0x28>
 80145a2:	f100 0314 	add.w	r3, r0, #20
 80145a6:	3114      	adds	r1, #20
 80145a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80145ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80145b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80145b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80145b8:	42a5      	cmp	r5, r4
 80145ba:	d003      	beq.n	80145c4 <__mcmp+0x2c>
 80145bc:	d305      	bcc.n	80145ca <__mcmp+0x32>
 80145be:	2201      	movs	r2, #1
 80145c0:	4610      	mov	r0, r2
 80145c2:	bd30      	pop	{r4, r5, pc}
 80145c4:	4283      	cmp	r3, r0
 80145c6:	d3f3      	bcc.n	80145b0 <__mcmp+0x18>
 80145c8:	e7fa      	b.n	80145c0 <__mcmp+0x28>
 80145ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80145ce:	e7f7      	b.n	80145c0 <__mcmp+0x28>

080145d0 <__mdiff>:
 80145d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d4:	460c      	mov	r4, r1
 80145d6:	4606      	mov	r6, r0
 80145d8:	4611      	mov	r1, r2
 80145da:	4620      	mov	r0, r4
 80145dc:	4690      	mov	r8, r2
 80145de:	f7ff ffdb 	bl	8014598 <__mcmp>
 80145e2:	1e05      	subs	r5, r0, #0
 80145e4:	d110      	bne.n	8014608 <__mdiff+0x38>
 80145e6:	4629      	mov	r1, r5
 80145e8:	4630      	mov	r0, r6
 80145ea:	f7ff fd09 	bl	8014000 <_Balloc>
 80145ee:	b930      	cbnz	r0, 80145fe <__mdiff+0x2e>
 80145f0:	4b3a      	ldr	r3, [pc, #232]	; (80146dc <__mdiff+0x10c>)
 80145f2:	4602      	mov	r2, r0
 80145f4:	f240 2132 	movw	r1, #562	; 0x232
 80145f8:	4839      	ldr	r0, [pc, #228]	; (80146e0 <__mdiff+0x110>)
 80145fa:	f000 fbbf 	bl	8014d7c <__assert_func>
 80145fe:	2301      	movs	r3, #1
 8014600:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014608:	bfa4      	itt	ge
 801460a:	4643      	movge	r3, r8
 801460c:	46a0      	movge	r8, r4
 801460e:	4630      	mov	r0, r6
 8014610:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014614:	bfa6      	itte	ge
 8014616:	461c      	movge	r4, r3
 8014618:	2500      	movge	r5, #0
 801461a:	2501      	movlt	r5, #1
 801461c:	f7ff fcf0 	bl	8014000 <_Balloc>
 8014620:	b920      	cbnz	r0, 801462c <__mdiff+0x5c>
 8014622:	4b2e      	ldr	r3, [pc, #184]	; (80146dc <__mdiff+0x10c>)
 8014624:	4602      	mov	r2, r0
 8014626:	f44f 7110 	mov.w	r1, #576	; 0x240
 801462a:	e7e5      	b.n	80145f8 <__mdiff+0x28>
 801462c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014630:	6926      	ldr	r6, [r4, #16]
 8014632:	60c5      	str	r5, [r0, #12]
 8014634:	f104 0914 	add.w	r9, r4, #20
 8014638:	f108 0514 	add.w	r5, r8, #20
 801463c:	f100 0e14 	add.w	lr, r0, #20
 8014640:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014644:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014648:	f108 0210 	add.w	r2, r8, #16
 801464c:	46f2      	mov	sl, lr
 801464e:	2100      	movs	r1, #0
 8014650:	f859 3b04 	ldr.w	r3, [r9], #4
 8014654:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014658:	fa1f f883 	uxth.w	r8, r3
 801465c:	fa11 f18b 	uxtah	r1, r1, fp
 8014660:	0c1b      	lsrs	r3, r3, #16
 8014662:	eba1 0808 	sub.w	r8, r1, r8
 8014666:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801466a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801466e:	fa1f f888 	uxth.w	r8, r8
 8014672:	1419      	asrs	r1, r3, #16
 8014674:	454e      	cmp	r6, r9
 8014676:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801467a:	f84a 3b04 	str.w	r3, [sl], #4
 801467e:	d8e7      	bhi.n	8014650 <__mdiff+0x80>
 8014680:	1b33      	subs	r3, r6, r4
 8014682:	3b15      	subs	r3, #21
 8014684:	f023 0303 	bic.w	r3, r3, #3
 8014688:	3304      	adds	r3, #4
 801468a:	3415      	adds	r4, #21
 801468c:	42a6      	cmp	r6, r4
 801468e:	bf38      	it	cc
 8014690:	2304      	movcc	r3, #4
 8014692:	441d      	add	r5, r3
 8014694:	4473      	add	r3, lr
 8014696:	469e      	mov	lr, r3
 8014698:	462e      	mov	r6, r5
 801469a:	4566      	cmp	r6, ip
 801469c:	d30e      	bcc.n	80146bc <__mdiff+0xec>
 801469e:	f10c 0203 	add.w	r2, ip, #3
 80146a2:	1b52      	subs	r2, r2, r5
 80146a4:	f022 0203 	bic.w	r2, r2, #3
 80146a8:	3d03      	subs	r5, #3
 80146aa:	45ac      	cmp	ip, r5
 80146ac:	bf38      	it	cc
 80146ae:	2200      	movcc	r2, #0
 80146b0:	441a      	add	r2, r3
 80146b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80146b6:	b17b      	cbz	r3, 80146d8 <__mdiff+0x108>
 80146b8:	6107      	str	r7, [r0, #16]
 80146ba:	e7a3      	b.n	8014604 <__mdiff+0x34>
 80146bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80146c0:	fa11 f288 	uxtah	r2, r1, r8
 80146c4:	1414      	asrs	r4, r2, #16
 80146c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80146ca:	b292      	uxth	r2, r2
 80146cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80146d0:	f84e 2b04 	str.w	r2, [lr], #4
 80146d4:	1421      	asrs	r1, r4, #16
 80146d6:	e7e0      	b.n	801469a <__mdiff+0xca>
 80146d8:	3f01      	subs	r7, #1
 80146da:	e7ea      	b.n	80146b2 <__mdiff+0xe2>
 80146dc:	08015908 	.word	0x08015908
 80146e0:	08015994 	.word	0x08015994

080146e4 <__ulp>:
 80146e4:	b082      	sub	sp, #8
 80146e6:	ed8d 0b00 	vstr	d0, [sp]
 80146ea:	9b01      	ldr	r3, [sp, #4]
 80146ec:	4912      	ldr	r1, [pc, #72]	; (8014738 <__ulp+0x54>)
 80146ee:	4019      	ands	r1, r3
 80146f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80146f4:	2900      	cmp	r1, #0
 80146f6:	dd05      	ble.n	8014704 <__ulp+0x20>
 80146f8:	2200      	movs	r2, #0
 80146fa:	460b      	mov	r3, r1
 80146fc:	ec43 2b10 	vmov	d0, r2, r3
 8014700:	b002      	add	sp, #8
 8014702:	4770      	bx	lr
 8014704:	4249      	negs	r1, r1
 8014706:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801470a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801470e:	f04f 0200 	mov.w	r2, #0
 8014712:	f04f 0300 	mov.w	r3, #0
 8014716:	da04      	bge.n	8014722 <__ulp+0x3e>
 8014718:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801471c:	fa41 f300 	asr.w	r3, r1, r0
 8014720:	e7ec      	b.n	80146fc <__ulp+0x18>
 8014722:	f1a0 0114 	sub.w	r1, r0, #20
 8014726:	291e      	cmp	r1, #30
 8014728:	bfda      	itte	le
 801472a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801472e:	fa20 f101 	lsrle.w	r1, r0, r1
 8014732:	2101      	movgt	r1, #1
 8014734:	460a      	mov	r2, r1
 8014736:	e7e1      	b.n	80146fc <__ulp+0x18>
 8014738:	7ff00000 	.word	0x7ff00000

0801473c <__b2d>:
 801473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801473e:	6905      	ldr	r5, [r0, #16]
 8014740:	f100 0714 	add.w	r7, r0, #20
 8014744:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014748:	1f2e      	subs	r6, r5, #4
 801474a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801474e:	4620      	mov	r0, r4
 8014750:	f7ff fd48 	bl	80141e4 <__hi0bits>
 8014754:	f1c0 0320 	rsb	r3, r0, #32
 8014758:	280a      	cmp	r0, #10
 801475a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80147d8 <__b2d+0x9c>
 801475e:	600b      	str	r3, [r1, #0]
 8014760:	dc14      	bgt.n	801478c <__b2d+0x50>
 8014762:	f1c0 0e0b 	rsb	lr, r0, #11
 8014766:	fa24 f10e 	lsr.w	r1, r4, lr
 801476a:	42b7      	cmp	r7, r6
 801476c:	ea41 030c 	orr.w	r3, r1, ip
 8014770:	bf34      	ite	cc
 8014772:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014776:	2100      	movcs	r1, #0
 8014778:	3015      	adds	r0, #21
 801477a:	fa04 f000 	lsl.w	r0, r4, r0
 801477e:	fa21 f10e 	lsr.w	r1, r1, lr
 8014782:	ea40 0201 	orr.w	r2, r0, r1
 8014786:	ec43 2b10 	vmov	d0, r2, r3
 801478a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801478c:	42b7      	cmp	r7, r6
 801478e:	bf3a      	itte	cc
 8014790:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014794:	f1a5 0608 	subcc.w	r6, r5, #8
 8014798:	2100      	movcs	r1, #0
 801479a:	380b      	subs	r0, #11
 801479c:	d017      	beq.n	80147ce <__b2d+0x92>
 801479e:	f1c0 0c20 	rsb	ip, r0, #32
 80147a2:	fa04 f500 	lsl.w	r5, r4, r0
 80147a6:	42be      	cmp	r6, r7
 80147a8:	fa21 f40c 	lsr.w	r4, r1, ip
 80147ac:	ea45 0504 	orr.w	r5, r5, r4
 80147b0:	bf8c      	ite	hi
 80147b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80147b6:	2400      	movls	r4, #0
 80147b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80147bc:	fa01 f000 	lsl.w	r0, r1, r0
 80147c0:	fa24 f40c 	lsr.w	r4, r4, ip
 80147c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80147c8:	ea40 0204 	orr.w	r2, r0, r4
 80147cc:	e7db      	b.n	8014786 <__b2d+0x4a>
 80147ce:	ea44 030c 	orr.w	r3, r4, ip
 80147d2:	460a      	mov	r2, r1
 80147d4:	e7d7      	b.n	8014786 <__b2d+0x4a>
 80147d6:	bf00      	nop
 80147d8:	3ff00000 	.word	0x3ff00000

080147dc <__d2b>:
 80147dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80147e0:	4689      	mov	r9, r1
 80147e2:	2101      	movs	r1, #1
 80147e4:	ec57 6b10 	vmov	r6, r7, d0
 80147e8:	4690      	mov	r8, r2
 80147ea:	f7ff fc09 	bl	8014000 <_Balloc>
 80147ee:	4604      	mov	r4, r0
 80147f0:	b930      	cbnz	r0, 8014800 <__d2b+0x24>
 80147f2:	4602      	mov	r2, r0
 80147f4:	4b25      	ldr	r3, [pc, #148]	; (801488c <__d2b+0xb0>)
 80147f6:	4826      	ldr	r0, [pc, #152]	; (8014890 <__d2b+0xb4>)
 80147f8:	f240 310a 	movw	r1, #778	; 0x30a
 80147fc:	f000 fabe 	bl	8014d7c <__assert_func>
 8014800:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014804:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014808:	bb35      	cbnz	r5, 8014858 <__d2b+0x7c>
 801480a:	2e00      	cmp	r6, #0
 801480c:	9301      	str	r3, [sp, #4]
 801480e:	d028      	beq.n	8014862 <__d2b+0x86>
 8014810:	4668      	mov	r0, sp
 8014812:	9600      	str	r6, [sp, #0]
 8014814:	f7ff fd06 	bl	8014224 <__lo0bits>
 8014818:	9900      	ldr	r1, [sp, #0]
 801481a:	b300      	cbz	r0, 801485e <__d2b+0x82>
 801481c:	9a01      	ldr	r2, [sp, #4]
 801481e:	f1c0 0320 	rsb	r3, r0, #32
 8014822:	fa02 f303 	lsl.w	r3, r2, r3
 8014826:	430b      	orrs	r3, r1
 8014828:	40c2      	lsrs	r2, r0
 801482a:	6163      	str	r3, [r4, #20]
 801482c:	9201      	str	r2, [sp, #4]
 801482e:	9b01      	ldr	r3, [sp, #4]
 8014830:	61a3      	str	r3, [r4, #24]
 8014832:	2b00      	cmp	r3, #0
 8014834:	bf14      	ite	ne
 8014836:	2202      	movne	r2, #2
 8014838:	2201      	moveq	r2, #1
 801483a:	6122      	str	r2, [r4, #16]
 801483c:	b1d5      	cbz	r5, 8014874 <__d2b+0x98>
 801483e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014842:	4405      	add	r5, r0
 8014844:	f8c9 5000 	str.w	r5, [r9]
 8014848:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801484c:	f8c8 0000 	str.w	r0, [r8]
 8014850:	4620      	mov	r0, r4
 8014852:	b003      	add	sp, #12
 8014854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801485c:	e7d5      	b.n	801480a <__d2b+0x2e>
 801485e:	6161      	str	r1, [r4, #20]
 8014860:	e7e5      	b.n	801482e <__d2b+0x52>
 8014862:	a801      	add	r0, sp, #4
 8014864:	f7ff fcde 	bl	8014224 <__lo0bits>
 8014868:	9b01      	ldr	r3, [sp, #4]
 801486a:	6163      	str	r3, [r4, #20]
 801486c:	2201      	movs	r2, #1
 801486e:	6122      	str	r2, [r4, #16]
 8014870:	3020      	adds	r0, #32
 8014872:	e7e3      	b.n	801483c <__d2b+0x60>
 8014874:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014878:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801487c:	f8c9 0000 	str.w	r0, [r9]
 8014880:	6918      	ldr	r0, [r3, #16]
 8014882:	f7ff fcaf 	bl	80141e4 <__hi0bits>
 8014886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801488a:	e7df      	b.n	801484c <__d2b+0x70>
 801488c:	08015908 	.word	0x08015908
 8014890:	08015994 	.word	0x08015994

08014894 <__ratio>:
 8014894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014898:	4688      	mov	r8, r1
 801489a:	4669      	mov	r1, sp
 801489c:	4681      	mov	r9, r0
 801489e:	f7ff ff4d 	bl	801473c <__b2d>
 80148a2:	a901      	add	r1, sp, #4
 80148a4:	4640      	mov	r0, r8
 80148a6:	ec55 4b10 	vmov	r4, r5, d0
 80148aa:	f7ff ff47 	bl	801473c <__b2d>
 80148ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80148b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80148b6:	eba3 0c02 	sub.w	ip, r3, r2
 80148ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 80148be:	1a9b      	subs	r3, r3, r2
 80148c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80148c4:	ec51 0b10 	vmov	r0, r1, d0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	bfd6      	itet	le
 80148cc:	460a      	movle	r2, r1
 80148ce:	462a      	movgt	r2, r5
 80148d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80148d4:	468b      	mov	fp, r1
 80148d6:	462f      	mov	r7, r5
 80148d8:	bfd4      	ite	le
 80148da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80148de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80148e2:	4620      	mov	r0, r4
 80148e4:	ee10 2a10 	vmov	r2, s0
 80148e8:	465b      	mov	r3, fp
 80148ea:	4639      	mov	r1, r7
 80148ec:	f7eb ffc6 	bl	800087c <__aeabi_ddiv>
 80148f0:	ec41 0b10 	vmov	d0, r0, r1
 80148f4:	b003      	add	sp, #12
 80148f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080148fa <__copybits>:
 80148fa:	3901      	subs	r1, #1
 80148fc:	b570      	push	{r4, r5, r6, lr}
 80148fe:	1149      	asrs	r1, r1, #5
 8014900:	6914      	ldr	r4, [r2, #16]
 8014902:	3101      	adds	r1, #1
 8014904:	f102 0314 	add.w	r3, r2, #20
 8014908:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801490c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014910:	1f05      	subs	r5, r0, #4
 8014912:	42a3      	cmp	r3, r4
 8014914:	d30c      	bcc.n	8014930 <__copybits+0x36>
 8014916:	1aa3      	subs	r3, r4, r2
 8014918:	3b11      	subs	r3, #17
 801491a:	f023 0303 	bic.w	r3, r3, #3
 801491e:	3211      	adds	r2, #17
 8014920:	42a2      	cmp	r2, r4
 8014922:	bf88      	it	hi
 8014924:	2300      	movhi	r3, #0
 8014926:	4418      	add	r0, r3
 8014928:	2300      	movs	r3, #0
 801492a:	4288      	cmp	r0, r1
 801492c:	d305      	bcc.n	801493a <__copybits+0x40>
 801492e:	bd70      	pop	{r4, r5, r6, pc}
 8014930:	f853 6b04 	ldr.w	r6, [r3], #4
 8014934:	f845 6f04 	str.w	r6, [r5, #4]!
 8014938:	e7eb      	b.n	8014912 <__copybits+0x18>
 801493a:	f840 3b04 	str.w	r3, [r0], #4
 801493e:	e7f4      	b.n	801492a <__copybits+0x30>

08014940 <__any_on>:
 8014940:	f100 0214 	add.w	r2, r0, #20
 8014944:	6900      	ldr	r0, [r0, #16]
 8014946:	114b      	asrs	r3, r1, #5
 8014948:	4298      	cmp	r0, r3
 801494a:	b510      	push	{r4, lr}
 801494c:	db11      	blt.n	8014972 <__any_on+0x32>
 801494e:	dd0a      	ble.n	8014966 <__any_on+0x26>
 8014950:	f011 011f 	ands.w	r1, r1, #31
 8014954:	d007      	beq.n	8014966 <__any_on+0x26>
 8014956:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801495a:	fa24 f001 	lsr.w	r0, r4, r1
 801495e:	fa00 f101 	lsl.w	r1, r0, r1
 8014962:	428c      	cmp	r4, r1
 8014964:	d10b      	bne.n	801497e <__any_on+0x3e>
 8014966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801496a:	4293      	cmp	r3, r2
 801496c:	d803      	bhi.n	8014976 <__any_on+0x36>
 801496e:	2000      	movs	r0, #0
 8014970:	bd10      	pop	{r4, pc}
 8014972:	4603      	mov	r3, r0
 8014974:	e7f7      	b.n	8014966 <__any_on+0x26>
 8014976:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801497a:	2900      	cmp	r1, #0
 801497c:	d0f5      	beq.n	801496a <__any_on+0x2a>
 801497e:	2001      	movs	r0, #1
 8014980:	e7f6      	b.n	8014970 <__any_on+0x30>

08014982 <_calloc_r>:
 8014982:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014984:	fba1 2402 	umull	r2, r4, r1, r2
 8014988:	b94c      	cbnz	r4, 801499e <_calloc_r+0x1c>
 801498a:	4611      	mov	r1, r2
 801498c:	9201      	str	r2, [sp, #4]
 801498e:	f7fc f977 	bl	8010c80 <_malloc_r>
 8014992:	9a01      	ldr	r2, [sp, #4]
 8014994:	4605      	mov	r5, r0
 8014996:	b930      	cbnz	r0, 80149a6 <_calloc_r+0x24>
 8014998:	4628      	mov	r0, r5
 801499a:	b003      	add	sp, #12
 801499c:	bd30      	pop	{r4, r5, pc}
 801499e:	220c      	movs	r2, #12
 80149a0:	6002      	str	r2, [r0, #0]
 80149a2:	2500      	movs	r5, #0
 80149a4:	e7f8      	b.n	8014998 <_calloc_r+0x16>
 80149a6:	4621      	mov	r1, r4
 80149a8:	f7fc f941 	bl	8010c2e <memset>
 80149ac:	e7f4      	b.n	8014998 <_calloc_r+0x16>
	...

080149b0 <_free_r>:
 80149b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149b2:	2900      	cmp	r1, #0
 80149b4:	d044      	beq.n	8014a40 <_free_r+0x90>
 80149b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149ba:	9001      	str	r0, [sp, #4]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	f1a1 0404 	sub.w	r4, r1, #4
 80149c2:	bfb8      	it	lt
 80149c4:	18e4      	addlt	r4, r4, r3
 80149c6:	f7ff fb0f 	bl	8013fe8 <__malloc_lock>
 80149ca:	4a1e      	ldr	r2, [pc, #120]	; (8014a44 <_free_r+0x94>)
 80149cc:	9801      	ldr	r0, [sp, #4]
 80149ce:	6813      	ldr	r3, [r2, #0]
 80149d0:	b933      	cbnz	r3, 80149e0 <_free_r+0x30>
 80149d2:	6063      	str	r3, [r4, #4]
 80149d4:	6014      	str	r4, [r2, #0]
 80149d6:	b003      	add	sp, #12
 80149d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149dc:	f7ff bb0a 	b.w	8013ff4 <__malloc_unlock>
 80149e0:	42a3      	cmp	r3, r4
 80149e2:	d908      	bls.n	80149f6 <_free_r+0x46>
 80149e4:	6825      	ldr	r5, [r4, #0]
 80149e6:	1961      	adds	r1, r4, r5
 80149e8:	428b      	cmp	r3, r1
 80149ea:	bf01      	itttt	eq
 80149ec:	6819      	ldreq	r1, [r3, #0]
 80149ee:	685b      	ldreq	r3, [r3, #4]
 80149f0:	1949      	addeq	r1, r1, r5
 80149f2:	6021      	streq	r1, [r4, #0]
 80149f4:	e7ed      	b.n	80149d2 <_free_r+0x22>
 80149f6:	461a      	mov	r2, r3
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	b10b      	cbz	r3, 8014a00 <_free_r+0x50>
 80149fc:	42a3      	cmp	r3, r4
 80149fe:	d9fa      	bls.n	80149f6 <_free_r+0x46>
 8014a00:	6811      	ldr	r1, [r2, #0]
 8014a02:	1855      	adds	r5, r2, r1
 8014a04:	42a5      	cmp	r5, r4
 8014a06:	d10b      	bne.n	8014a20 <_free_r+0x70>
 8014a08:	6824      	ldr	r4, [r4, #0]
 8014a0a:	4421      	add	r1, r4
 8014a0c:	1854      	adds	r4, r2, r1
 8014a0e:	42a3      	cmp	r3, r4
 8014a10:	6011      	str	r1, [r2, #0]
 8014a12:	d1e0      	bne.n	80149d6 <_free_r+0x26>
 8014a14:	681c      	ldr	r4, [r3, #0]
 8014a16:	685b      	ldr	r3, [r3, #4]
 8014a18:	6053      	str	r3, [r2, #4]
 8014a1a:	4421      	add	r1, r4
 8014a1c:	6011      	str	r1, [r2, #0]
 8014a1e:	e7da      	b.n	80149d6 <_free_r+0x26>
 8014a20:	d902      	bls.n	8014a28 <_free_r+0x78>
 8014a22:	230c      	movs	r3, #12
 8014a24:	6003      	str	r3, [r0, #0]
 8014a26:	e7d6      	b.n	80149d6 <_free_r+0x26>
 8014a28:	6825      	ldr	r5, [r4, #0]
 8014a2a:	1961      	adds	r1, r4, r5
 8014a2c:	428b      	cmp	r3, r1
 8014a2e:	bf04      	itt	eq
 8014a30:	6819      	ldreq	r1, [r3, #0]
 8014a32:	685b      	ldreq	r3, [r3, #4]
 8014a34:	6063      	str	r3, [r4, #4]
 8014a36:	bf04      	itt	eq
 8014a38:	1949      	addeq	r1, r1, r5
 8014a3a:	6021      	streq	r1, [r4, #0]
 8014a3c:	6054      	str	r4, [r2, #4]
 8014a3e:	e7ca      	b.n	80149d6 <_free_r+0x26>
 8014a40:	b003      	add	sp, #12
 8014a42:	bd30      	pop	{r4, r5, pc}
 8014a44:	200026b8 	.word	0x200026b8

08014a48 <__ssputs_r>:
 8014a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a4c:	688e      	ldr	r6, [r1, #8]
 8014a4e:	429e      	cmp	r6, r3
 8014a50:	4682      	mov	sl, r0
 8014a52:	460c      	mov	r4, r1
 8014a54:	4690      	mov	r8, r2
 8014a56:	461f      	mov	r7, r3
 8014a58:	d838      	bhi.n	8014acc <__ssputs_r+0x84>
 8014a5a:	898a      	ldrh	r2, [r1, #12]
 8014a5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014a60:	d032      	beq.n	8014ac8 <__ssputs_r+0x80>
 8014a62:	6825      	ldr	r5, [r4, #0]
 8014a64:	6909      	ldr	r1, [r1, #16]
 8014a66:	eba5 0901 	sub.w	r9, r5, r1
 8014a6a:	6965      	ldr	r5, [r4, #20]
 8014a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a74:	3301      	adds	r3, #1
 8014a76:	444b      	add	r3, r9
 8014a78:	106d      	asrs	r5, r5, #1
 8014a7a:	429d      	cmp	r5, r3
 8014a7c:	bf38      	it	cc
 8014a7e:	461d      	movcc	r5, r3
 8014a80:	0553      	lsls	r3, r2, #21
 8014a82:	d531      	bpl.n	8014ae8 <__ssputs_r+0xa0>
 8014a84:	4629      	mov	r1, r5
 8014a86:	f7fc f8fb 	bl	8010c80 <_malloc_r>
 8014a8a:	4606      	mov	r6, r0
 8014a8c:	b950      	cbnz	r0, 8014aa4 <__ssputs_r+0x5c>
 8014a8e:	230c      	movs	r3, #12
 8014a90:	f8ca 3000 	str.w	r3, [sl]
 8014a94:	89a3      	ldrh	r3, [r4, #12]
 8014a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a9a:	81a3      	strh	r3, [r4, #12]
 8014a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aa4:	6921      	ldr	r1, [r4, #16]
 8014aa6:	464a      	mov	r2, r9
 8014aa8:	f7fc f8b3 	bl	8010c12 <memcpy>
 8014aac:	89a3      	ldrh	r3, [r4, #12]
 8014aae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ab6:	81a3      	strh	r3, [r4, #12]
 8014ab8:	6126      	str	r6, [r4, #16]
 8014aba:	6165      	str	r5, [r4, #20]
 8014abc:	444e      	add	r6, r9
 8014abe:	eba5 0509 	sub.w	r5, r5, r9
 8014ac2:	6026      	str	r6, [r4, #0]
 8014ac4:	60a5      	str	r5, [r4, #8]
 8014ac6:	463e      	mov	r6, r7
 8014ac8:	42be      	cmp	r6, r7
 8014aca:	d900      	bls.n	8014ace <__ssputs_r+0x86>
 8014acc:	463e      	mov	r6, r7
 8014ace:	6820      	ldr	r0, [r4, #0]
 8014ad0:	4632      	mov	r2, r6
 8014ad2:	4641      	mov	r1, r8
 8014ad4:	f000 f982 	bl	8014ddc <memmove>
 8014ad8:	68a3      	ldr	r3, [r4, #8]
 8014ada:	1b9b      	subs	r3, r3, r6
 8014adc:	60a3      	str	r3, [r4, #8]
 8014ade:	6823      	ldr	r3, [r4, #0]
 8014ae0:	4433      	add	r3, r6
 8014ae2:	6023      	str	r3, [r4, #0]
 8014ae4:	2000      	movs	r0, #0
 8014ae6:	e7db      	b.n	8014aa0 <__ssputs_r+0x58>
 8014ae8:	462a      	mov	r2, r5
 8014aea:	f000 f991 	bl	8014e10 <_realloc_r>
 8014aee:	4606      	mov	r6, r0
 8014af0:	2800      	cmp	r0, #0
 8014af2:	d1e1      	bne.n	8014ab8 <__ssputs_r+0x70>
 8014af4:	6921      	ldr	r1, [r4, #16]
 8014af6:	4650      	mov	r0, sl
 8014af8:	f7ff ff5a 	bl	80149b0 <_free_r>
 8014afc:	e7c7      	b.n	8014a8e <__ssputs_r+0x46>
	...

08014b00 <_svfiprintf_r>:
 8014b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b04:	4698      	mov	r8, r3
 8014b06:	898b      	ldrh	r3, [r1, #12]
 8014b08:	061b      	lsls	r3, r3, #24
 8014b0a:	b09d      	sub	sp, #116	; 0x74
 8014b0c:	4607      	mov	r7, r0
 8014b0e:	460d      	mov	r5, r1
 8014b10:	4614      	mov	r4, r2
 8014b12:	d50e      	bpl.n	8014b32 <_svfiprintf_r+0x32>
 8014b14:	690b      	ldr	r3, [r1, #16]
 8014b16:	b963      	cbnz	r3, 8014b32 <_svfiprintf_r+0x32>
 8014b18:	2140      	movs	r1, #64	; 0x40
 8014b1a:	f7fc f8b1 	bl	8010c80 <_malloc_r>
 8014b1e:	6028      	str	r0, [r5, #0]
 8014b20:	6128      	str	r0, [r5, #16]
 8014b22:	b920      	cbnz	r0, 8014b2e <_svfiprintf_r+0x2e>
 8014b24:	230c      	movs	r3, #12
 8014b26:	603b      	str	r3, [r7, #0]
 8014b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b2c:	e0d1      	b.n	8014cd2 <_svfiprintf_r+0x1d2>
 8014b2e:	2340      	movs	r3, #64	; 0x40
 8014b30:	616b      	str	r3, [r5, #20]
 8014b32:	2300      	movs	r3, #0
 8014b34:	9309      	str	r3, [sp, #36]	; 0x24
 8014b36:	2320      	movs	r3, #32
 8014b38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b40:	2330      	movs	r3, #48	; 0x30
 8014b42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014cec <_svfiprintf_r+0x1ec>
 8014b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b4a:	f04f 0901 	mov.w	r9, #1
 8014b4e:	4623      	mov	r3, r4
 8014b50:	469a      	mov	sl, r3
 8014b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b56:	b10a      	cbz	r2, 8014b5c <_svfiprintf_r+0x5c>
 8014b58:	2a25      	cmp	r2, #37	; 0x25
 8014b5a:	d1f9      	bne.n	8014b50 <_svfiprintf_r+0x50>
 8014b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8014b60:	d00b      	beq.n	8014b7a <_svfiprintf_r+0x7a>
 8014b62:	465b      	mov	r3, fp
 8014b64:	4622      	mov	r2, r4
 8014b66:	4629      	mov	r1, r5
 8014b68:	4638      	mov	r0, r7
 8014b6a:	f7ff ff6d 	bl	8014a48 <__ssputs_r>
 8014b6e:	3001      	adds	r0, #1
 8014b70:	f000 80aa 	beq.w	8014cc8 <_svfiprintf_r+0x1c8>
 8014b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b76:	445a      	add	r2, fp
 8014b78:	9209      	str	r2, [sp, #36]	; 0x24
 8014b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f000 80a2 	beq.w	8014cc8 <_svfiprintf_r+0x1c8>
 8014b84:	2300      	movs	r3, #0
 8014b86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b8e:	f10a 0a01 	add.w	sl, sl, #1
 8014b92:	9304      	str	r3, [sp, #16]
 8014b94:	9307      	str	r3, [sp, #28]
 8014b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8014b9c:	4654      	mov	r4, sl
 8014b9e:	2205      	movs	r2, #5
 8014ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ba4:	4851      	ldr	r0, [pc, #324]	; (8014cec <_svfiprintf_r+0x1ec>)
 8014ba6:	f7eb fb33 	bl	8000210 <memchr>
 8014baa:	9a04      	ldr	r2, [sp, #16]
 8014bac:	b9d8      	cbnz	r0, 8014be6 <_svfiprintf_r+0xe6>
 8014bae:	06d0      	lsls	r0, r2, #27
 8014bb0:	bf44      	itt	mi
 8014bb2:	2320      	movmi	r3, #32
 8014bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014bb8:	0711      	lsls	r1, r2, #28
 8014bba:	bf44      	itt	mi
 8014bbc:	232b      	movmi	r3, #43	; 0x2b
 8014bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8014bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8014bc8:	d015      	beq.n	8014bf6 <_svfiprintf_r+0xf6>
 8014bca:	9a07      	ldr	r2, [sp, #28]
 8014bcc:	4654      	mov	r4, sl
 8014bce:	2000      	movs	r0, #0
 8014bd0:	f04f 0c0a 	mov.w	ip, #10
 8014bd4:	4621      	mov	r1, r4
 8014bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bda:	3b30      	subs	r3, #48	; 0x30
 8014bdc:	2b09      	cmp	r3, #9
 8014bde:	d94e      	bls.n	8014c7e <_svfiprintf_r+0x17e>
 8014be0:	b1b0      	cbz	r0, 8014c10 <_svfiprintf_r+0x110>
 8014be2:	9207      	str	r2, [sp, #28]
 8014be4:	e014      	b.n	8014c10 <_svfiprintf_r+0x110>
 8014be6:	eba0 0308 	sub.w	r3, r0, r8
 8014bea:	fa09 f303 	lsl.w	r3, r9, r3
 8014bee:	4313      	orrs	r3, r2
 8014bf0:	9304      	str	r3, [sp, #16]
 8014bf2:	46a2      	mov	sl, r4
 8014bf4:	e7d2      	b.n	8014b9c <_svfiprintf_r+0x9c>
 8014bf6:	9b03      	ldr	r3, [sp, #12]
 8014bf8:	1d19      	adds	r1, r3, #4
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	9103      	str	r1, [sp, #12]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	bfbb      	ittet	lt
 8014c02:	425b      	neglt	r3, r3
 8014c04:	f042 0202 	orrlt.w	r2, r2, #2
 8014c08:	9307      	strge	r3, [sp, #28]
 8014c0a:	9307      	strlt	r3, [sp, #28]
 8014c0c:	bfb8      	it	lt
 8014c0e:	9204      	strlt	r2, [sp, #16]
 8014c10:	7823      	ldrb	r3, [r4, #0]
 8014c12:	2b2e      	cmp	r3, #46	; 0x2e
 8014c14:	d10c      	bne.n	8014c30 <_svfiprintf_r+0x130>
 8014c16:	7863      	ldrb	r3, [r4, #1]
 8014c18:	2b2a      	cmp	r3, #42	; 0x2a
 8014c1a:	d135      	bne.n	8014c88 <_svfiprintf_r+0x188>
 8014c1c:	9b03      	ldr	r3, [sp, #12]
 8014c1e:	1d1a      	adds	r2, r3, #4
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	9203      	str	r2, [sp, #12]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	bfb8      	it	lt
 8014c28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014c2c:	3402      	adds	r4, #2
 8014c2e:	9305      	str	r3, [sp, #20]
 8014c30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014cfc <_svfiprintf_r+0x1fc>
 8014c34:	7821      	ldrb	r1, [r4, #0]
 8014c36:	2203      	movs	r2, #3
 8014c38:	4650      	mov	r0, sl
 8014c3a:	f7eb fae9 	bl	8000210 <memchr>
 8014c3e:	b140      	cbz	r0, 8014c52 <_svfiprintf_r+0x152>
 8014c40:	2340      	movs	r3, #64	; 0x40
 8014c42:	eba0 000a 	sub.w	r0, r0, sl
 8014c46:	fa03 f000 	lsl.w	r0, r3, r0
 8014c4a:	9b04      	ldr	r3, [sp, #16]
 8014c4c:	4303      	orrs	r3, r0
 8014c4e:	3401      	adds	r4, #1
 8014c50:	9304      	str	r3, [sp, #16]
 8014c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c56:	4826      	ldr	r0, [pc, #152]	; (8014cf0 <_svfiprintf_r+0x1f0>)
 8014c58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c5c:	2206      	movs	r2, #6
 8014c5e:	f7eb fad7 	bl	8000210 <memchr>
 8014c62:	2800      	cmp	r0, #0
 8014c64:	d038      	beq.n	8014cd8 <_svfiprintf_r+0x1d8>
 8014c66:	4b23      	ldr	r3, [pc, #140]	; (8014cf4 <_svfiprintf_r+0x1f4>)
 8014c68:	bb1b      	cbnz	r3, 8014cb2 <_svfiprintf_r+0x1b2>
 8014c6a:	9b03      	ldr	r3, [sp, #12]
 8014c6c:	3307      	adds	r3, #7
 8014c6e:	f023 0307 	bic.w	r3, r3, #7
 8014c72:	3308      	adds	r3, #8
 8014c74:	9303      	str	r3, [sp, #12]
 8014c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c78:	4433      	add	r3, r6
 8014c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8014c7c:	e767      	b.n	8014b4e <_svfiprintf_r+0x4e>
 8014c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c82:	460c      	mov	r4, r1
 8014c84:	2001      	movs	r0, #1
 8014c86:	e7a5      	b.n	8014bd4 <_svfiprintf_r+0xd4>
 8014c88:	2300      	movs	r3, #0
 8014c8a:	3401      	adds	r4, #1
 8014c8c:	9305      	str	r3, [sp, #20]
 8014c8e:	4619      	mov	r1, r3
 8014c90:	f04f 0c0a 	mov.w	ip, #10
 8014c94:	4620      	mov	r0, r4
 8014c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c9a:	3a30      	subs	r2, #48	; 0x30
 8014c9c:	2a09      	cmp	r2, #9
 8014c9e:	d903      	bls.n	8014ca8 <_svfiprintf_r+0x1a8>
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d0c5      	beq.n	8014c30 <_svfiprintf_r+0x130>
 8014ca4:	9105      	str	r1, [sp, #20]
 8014ca6:	e7c3      	b.n	8014c30 <_svfiprintf_r+0x130>
 8014ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8014cac:	4604      	mov	r4, r0
 8014cae:	2301      	movs	r3, #1
 8014cb0:	e7f0      	b.n	8014c94 <_svfiprintf_r+0x194>
 8014cb2:	ab03      	add	r3, sp, #12
 8014cb4:	9300      	str	r3, [sp, #0]
 8014cb6:	462a      	mov	r2, r5
 8014cb8:	4b0f      	ldr	r3, [pc, #60]	; (8014cf8 <_svfiprintf_r+0x1f8>)
 8014cba:	a904      	add	r1, sp, #16
 8014cbc:	4638      	mov	r0, r7
 8014cbe:	f7fc f8f3 	bl	8010ea8 <_printf_float>
 8014cc2:	1c42      	adds	r2, r0, #1
 8014cc4:	4606      	mov	r6, r0
 8014cc6:	d1d6      	bne.n	8014c76 <_svfiprintf_r+0x176>
 8014cc8:	89ab      	ldrh	r3, [r5, #12]
 8014cca:	065b      	lsls	r3, r3, #25
 8014ccc:	f53f af2c 	bmi.w	8014b28 <_svfiprintf_r+0x28>
 8014cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cd2:	b01d      	add	sp, #116	; 0x74
 8014cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cd8:	ab03      	add	r3, sp, #12
 8014cda:	9300      	str	r3, [sp, #0]
 8014cdc:	462a      	mov	r2, r5
 8014cde:	4b06      	ldr	r3, [pc, #24]	; (8014cf8 <_svfiprintf_r+0x1f8>)
 8014ce0:	a904      	add	r1, sp, #16
 8014ce2:	4638      	mov	r0, r7
 8014ce4:	f7fc fb84 	bl	80113f0 <_printf_i>
 8014ce8:	e7eb      	b.n	8014cc2 <_svfiprintf_r+0x1c2>
 8014cea:	bf00      	nop
 8014cec:	08015aec 	.word	0x08015aec
 8014cf0:	08015af6 	.word	0x08015af6
 8014cf4:	08010ea9 	.word	0x08010ea9
 8014cf8:	08014a49 	.word	0x08014a49
 8014cfc:	08015af2 	.word	0x08015af2

08014d00 <_read_r>:
 8014d00:	b538      	push	{r3, r4, r5, lr}
 8014d02:	4d07      	ldr	r5, [pc, #28]	; (8014d20 <_read_r+0x20>)
 8014d04:	4604      	mov	r4, r0
 8014d06:	4608      	mov	r0, r1
 8014d08:	4611      	mov	r1, r2
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	602a      	str	r2, [r5, #0]
 8014d0e:	461a      	mov	r2, r3
 8014d10:	f7ed f8ee 	bl	8001ef0 <_read>
 8014d14:	1c43      	adds	r3, r0, #1
 8014d16:	d102      	bne.n	8014d1e <_read_r+0x1e>
 8014d18:	682b      	ldr	r3, [r5, #0]
 8014d1a:	b103      	cbz	r3, 8014d1e <_read_r+0x1e>
 8014d1c:	6023      	str	r3, [r4, #0]
 8014d1e:	bd38      	pop	{r3, r4, r5, pc}
 8014d20:	200026c0 	.word	0x200026c0
 8014d24:	00000000 	.word	0x00000000

08014d28 <nan>:
 8014d28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014d30 <nan+0x8>
 8014d2c:	4770      	bx	lr
 8014d2e:	bf00      	nop
 8014d30:	00000000 	.word	0x00000000
 8014d34:	7ff80000 	.word	0x7ff80000

08014d38 <strncmp>:
 8014d38:	b510      	push	{r4, lr}
 8014d3a:	b17a      	cbz	r2, 8014d5c <strncmp+0x24>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	3901      	subs	r1, #1
 8014d40:	1884      	adds	r4, r0, r2
 8014d42:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014d46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014d4a:	4290      	cmp	r0, r2
 8014d4c:	d101      	bne.n	8014d52 <strncmp+0x1a>
 8014d4e:	42a3      	cmp	r3, r4
 8014d50:	d101      	bne.n	8014d56 <strncmp+0x1e>
 8014d52:	1a80      	subs	r0, r0, r2
 8014d54:	bd10      	pop	{r4, pc}
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d1f3      	bne.n	8014d42 <strncmp+0xa>
 8014d5a:	e7fa      	b.n	8014d52 <strncmp+0x1a>
 8014d5c:	4610      	mov	r0, r2
 8014d5e:	e7f9      	b.n	8014d54 <strncmp+0x1c>

08014d60 <__ascii_wctomb>:
 8014d60:	b149      	cbz	r1, 8014d76 <__ascii_wctomb+0x16>
 8014d62:	2aff      	cmp	r2, #255	; 0xff
 8014d64:	bf85      	ittet	hi
 8014d66:	238a      	movhi	r3, #138	; 0x8a
 8014d68:	6003      	strhi	r3, [r0, #0]
 8014d6a:	700a      	strbls	r2, [r1, #0]
 8014d6c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014d70:	bf98      	it	ls
 8014d72:	2001      	movls	r0, #1
 8014d74:	4770      	bx	lr
 8014d76:	4608      	mov	r0, r1
 8014d78:	4770      	bx	lr
	...

08014d7c <__assert_func>:
 8014d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d7e:	4614      	mov	r4, r2
 8014d80:	461a      	mov	r2, r3
 8014d82:	4b09      	ldr	r3, [pc, #36]	; (8014da8 <__assert_func+0x2c>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	4605      	mov	r5, r0
 8014d88:	68d8      	ldr	r0, [r3, #12]
 8014d8a:	b14c      	cbz	r4, 8014da0 <__assert_func+0x24>
 8014d8c:	4b07      	ldr	r3, [pc, #28]	; (8014dac <__assert_func+0x30>)
 8014d8e:	9100      	str	r1, [sp, #0]
 8014d90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d94:	4906      	ldr	r1, [pc, #24]	; (8014db0 <__assert_func+0x34>)
 8014d96:	462b      	mov	r3, r5
 8014d98:	f000 f80e 	bl	8014db8 <fiprintf>
 8014d9c:	f000 fa80 	bl	80152a0 <abort>
 8014da0:	4b04      	ldr	r3, [pc, #16]	; (8014db4 <__assert_func+0x38>)
 8014da2:	461c      	mov	r4, r3
 8014da4:	e7f3      	b.n	8014d8e <__assert_func+0x12>
 8014da6:	bf00      	nop
 8014da8:	20000010 	.word	0x20000010
 8014dac:	08015afd 	.word	0x08015afd
 8014db0:	08015b0a 	.word	0x08015b0a
 8014db4:	08015b38 	.word	0x08015b38

08014db8 <fiprintf>:
 8014db8:	b40e      	push	{r1, r2, r3}
 8014dba:	b503      	push	{r0, r1, lr}
 8014dbc:	4601      	mov	r1, r0
 8014dbe:	ab03      	add	r3, sp, #12
 8014dc0:	4805      	ldr	r0, [pc, #20]	; (8014dd8 <fiprintf+0x20>)
 8014dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dc6:	6800      	ldr	r0, [r0, #0]
 8014dc8:	9301      	str	r3, [sp, #4]
 8014dca:	f000 f879 	bl	8014ec0 <_vfiprintf_r>
 8014dce:	b002      	add	sp, #8
 8014dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014dd4:	b003      	add	sp, #12
 8014dd6:	4770      	bx	lr
 8014dd8:	20000010 	.word	0x20000010

08014ddc <memmove>:
 8014ddc:	4288      	cmp	r0, r1
 8014dde:	b510      	push	{r4, lr}
 8014de0:	eb01 0402 	add.w	r4, r1, r2
 8014de4:	d902      	bls.n	8014dec <memmove+0x10>
 8014de6:	4284      	cmp	r4, r0
 8014de8:	4623      	mov	r3, r4
 8014dea:	d807      	bhi.n	8014dfc <memmove+0x20>
 8014dec:	1e43      	subs	r3, r0, #1
 8014dee:	42a1      	cmp	r1, r4
 8014df0:	d008      	beq.n	8014e04 <memmove+0x28>
 8014df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014df6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014dfa:	e7f8      	b.n	8014dee <memmove+0x12>
 8014dfc:	4402      	add	r2, r0
 8014dfe:	4601      	mov	r1, r0
 8014e00:	428a      	cmp	r2, r1
 8014e02:	d100      	bne.n	8014e06 <memmove+0x2a>
 8014e04:	bd10      	pop	{r4, pc}
 8014e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014e0e:	e7f7      	b.n	8014e00 <memmove+0x24>

08014e10 <_realloc_r>:
 8014e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e14:	4680      	mov	r8, r0
 8014e16:	4614      	mov	r4, r2
 8014e18:	460e      	mov	r6, r1
 8014e1a:	b921      	cbnz	r1, 8014e26 <_realloc_r+0x16>
 8014e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e20:	4611      	mov	r1, r2
 8014e22:	f7fb bf2d 	b.w	8010c80 <_malloc_r>
 8014e26:	b92a      	cbnz	r2, 8014e34 <_realloc_r+0x24>
 8014e28:	f7ff fdc2 	bl	80149b0 <_free_r>
 8014e2c:	4625      	mov	r5, r4
 8014e2e:	4628      	mov	r0, r5
 8014e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e34:	f000 faa0 	bl	8015378 <_malloc_usable_size_r>
 8014e38:	4284      	cmp	r4, r0
 8014e3a:	4607      	mov	r7, r0
 8014e3c:	d802      	bhi.n	8014e44 <_realloc_r+0x34>
 8014e3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014e42:	d812      	bhi.n	8014e6a <_realloc_r+0x5a>
 8014e44:	4621      	mov	r1, r4
 8014e46:	4640      	mov	r0, r8
 8014e48:	f7fb ff1a 	bl	8010c80 <_malloc_r>
 8014e4c:	4605      	mov	r5, r0
 8014e4e:	2800      	cmp	r0, #0
 8014e50:	d0ed      	beq.n	8014e2e <_realloc_r+0x1e>
 8014e52:	42bc      	cmp	r4, r7
 8014e54:	4622      	mov	r2, r4
 8014e56:	4631      	mov	r1, r6
 8014e58:	bf28      	it	cs
 8014e5a:	463a      	movcs	r2, r7
 8014e5c:	f7fb fed9 	bl	8010c12 <memcpy>
 8014e60:	4631      	mov	r1, r6
 8014e62:	4640      	mov	r0, r8
 8014e64:	f7ff fda4 	bl	80149b0 <_free_r>
 8014e68:	e7e1      	b.n	8014e2e <_realloc_r+0x1e>
 8014e6a:	4635      	mov	r5, r6
 8014e6c:	e7df      	b.n	8014e2e <_realloc_r+0x1e>

08014e6e <__sfputc_r>:
 8014e6e:	6893      	ldr	r3, [r2, #8]
 8014e70:	3b01      	subs	r3, #1
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	b410      	push	{r4}
 8014e76:	6093      	str	r3, [r2, #8]
 8014e78:	da08      	bge.n	8014e8c <__sfputc_r+0x1e>
 8014e7a:	6994      	ldr	r4, [r2, #24]
 8014e7c:	42a3      	cmp	r3, r4
 8014e7e:	db01      	blt.n	8014e84 <__sfputc_r+0x16>
 8014e80:	290a      	cmp	r1, #10
 8014e82:	d103      	bne.n	8014e8c <__sfputc_r+0x1e>
 8014e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e88:	f000 b94a 	b.w	8015120 <__swbuf_r>
 8014e8c:	6813      	ldr	r3, [r2, #0]
 8014e8e:	1c58      	adds	r0, r3, #1
 8014e90:	6010      	str	r0, [r2, #0]
 8014e92:	7019      	strb	r1, [r3, #0]
 8014e94:	4608      	mov	r0, r1
 8014e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <__sfputs_r>:
 8014e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e9e:	4606      	mov	r6, r0
 8014ea0:	460f      	mov	r7, r1
 8014ea2:	4614      	mov	r4, r2
 8014ea4:	18d5      	adds	r5, r2, r3
 8014ea6:	42ac      	cmp	r4, r5
 8014ea8:	d101      	bne.n	8014eae <__sfputs_r+0x12>
 8014eaa:	2000      	movs	r0, #0
 8014eac:	e007      	b.n	8014ebe <__sfputs_r+0x22>
 8014eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014eb2:	463a      	mov	r2, r7
 8014eb4:	4630      	mov	r0, r6
 8014eb6:	f7ff ffda 	bl	8014e6e <__sfputc_r>
 8014eba:	1c43      	adds	r3, r0, #1
 8014ebc:	d1f3      	bne.n	8014ea6 <__sfputs_r+0xa>
 8014ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014ec0 <_vfiprintf_r>:
 8014ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec4:	460d      	mov	r5, r1
 8014ec6:	b09d      	sub	sp, #116	; 0x74
 8014ec8:	4614      	mov	r4, r2
 8014eca:	4698      	mov	r8, r3
 8014ecc:	4606      	mov	r6, r0
 8014ece:	b118      	cbz	r0, 8014ed8 <_vfiprintf_r+0x18>
 8014ed0:	6983      	ldr	r3, [r0, #24]
 8014ed2:	b90b      	cbnz	r3, 8014ed8 <_vfiprintf_r+0x18>
 8014ed4:	f7fb fdd8 	bl	8010a88 <__sinit>
 8014ed8:	4b89      	ldr	r3, [pc, #548]	; (8015100 <_vfiprintf_r+0x240>)
 8014eda:	429d      	cmp	r5, r3
 8014edc:	d11b      	bne.n	8014f16 <_vfiprintf_r+0x56>
 8014ede:	6875      	ldr	r5, [r6, #4]
 8014ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ee2:	07d9      	lsls	r1, r3, #31
 8014ee4:	d405      	bmi.n	8014ef2 <_vfiprintf_r+0x32>
 8014ee6:	89ab      	ldrh	r3, [r5, #12]
 8014ee8:	059a      	lsls	r2, r3, #22
 8014eea:	d402      	bmi.n	8014ef2 <_vfiprintf_r+0x32>
 8014eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014eee:	f7fb fe8e 	bl	8010c0e <__retarget_lock_acquire_recursive>
 8014ef2:	89ab      	ldrh	r3, [r5, #12]
 8014ef4:	071b      	lsls	r3, r3, #28
 8014ef6:	d501      	bpl.n	8014efc <_vfiprintf_r+0x3c>
 8014ef8:	692b      	ldr	r3, [r5, #16]
 8014efa:	b9eb      	cbnz	r3, 8014f38 <_vfiprintf_r+0x78>
 8014efc:	4629      	mov	r1, r5
 8014efe:	4630      	mov	r0, r6
 8014f00:	f000 f960 	bl	80151c4 <__swsetup_r>
 8014f04:	b1c0      	cbz	r0, 8014f38 <_vfiprintf_r+0x78>
 8014f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f08:	07dc      	lsls	r4, r3, #31
 8014f0a:	d50e      	bpl.n	8014f2a <_vfiprintf_r+0x6a>
 8014f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f10:	b01d      	add	sp, #116	; 0x74
 8014f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f16:	4b7b      	ldr	r3, [pc, #492]	; (8015104 <_vfiprintf_r+0x244>)
 8014f18:	429d      	cmp	r5, r3
 8014f1a:	d101      	bne.n	8014f20 <_vfiprintf_r+0x60>
 8014f1c:	68b5      	ldr	r5, [r6, #8]
 8014f1e:	e7df      	b.n	8014ee0 <_vfiprintf_r+0x20>
 8014f20:	4b79      	ldr	r3, [pc, #484]	; (8015108 <_vfiprintf_r+0x248>)
 8014f22:	429d      	cmp	r5, r3
 8014f24:	bf08      	it	eq
 8014f26:	68f5      	ldreq	r5, [r6, #12]
 8014f28:	e7da      	b.n	8014ee0 <_vfiprintf_r+0x20>
 8014f2a:	89ab      	ldrh	r3, [r5, #12]
 8014f2c:	0598      	lsls	r0, r3, #22
 8014f2e:	d4ed      	bmi.n	8014f0c <_vfiprintf_r+0x4c>
 8014f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f32:	f7fb fe6d 	bl	8010c10 <__retarget_lock_release_recursive>
 8014f36:	e7e9      	b.n	8014f0c <_vfiprintf_r+0x4c>
 8014f38:	2300      	movs	r3, #0
 8014f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8014f3c:	2320      	movs	r3, #32
 8014f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f46:	2330      	movs	r3, #48	; 0x30
 8014f48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801510c <_vfiprintf_r+0x24c>
 8014f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014f50:	f04f 0901 	mov.w	r9, #1
 8014f54:	4623      	mov	r3, r4
 8014f56:	469a      	mov	sl, r3
 8014f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f5c:	b10a      	cbz	r2, 8014f62 <_vfiprintf_r+0xa2>
 8014f5e:	2a25      	cmp	r2, #37	; 0x25
 8014f60:	d1f9      	bne.n	8014f56 <_vfiprintf_r+0x96>
 8014f62:	ebba 0b04 	subs.w	fp, sl, r4
 8014f66:	d00b      	beq.n	8014f80 <_vfiprintf_r+0xc0>
 8014f68:	465b      	mov	r3, fp
 8014f6a:	4622      	mov	r2, r4
 8014f6c:	4629      	mov	r1, r5
 8014f6e:	4630      	mov	r0, r6
 8014f70:	f7ff ff94 	bl	8014e9c <__sfputs_r>
 8014f74:	3001      	adds	r0, #1
 8014f76:	f000 80aa 	beq.w	80150ce <_vfiprintf_r+0x20e>
 8014f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f7c:	445a      	add	r2, fp
 8014f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8014f80:	f89a 3000 	ldrb.w	r3, [sl]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	f000 80a2 	beq.w	80150ce <_vfiprintf_r+0x20e>
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f94:	f10a 0a01 	add.w	sl, sl, #1
 8014f98:	9304      	str	r3, [sp, #16]
 8014f9a:	9307      	str	r3, [sp, #28]
 8014f9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014fa0:	931a      	str	r3, [sp, #104]	; 0x68
 8014fa2:	4654      	mov	r4, sl
 8014fa4:	2205      	movs	r2, #5
 8014fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014faa:	4858      	ldr	r0, [pc, #352]	; (801510c <_vfiprintf_r+0x24c>)
 8014fac:	f7eb f930 	bl	8000210 <memchr>
 8014fb0:	9a04      	ldr	r2, [sp, #16]
 8014fb2:	b9d8      	cbnz	r0, 8014fec <_vfiprintf_r+0x12c>
 8014fb4:	06d1      	lsls	r1, r2, #27
 8014fb6:	bf44      	itt	mi
 8014fb8:	2320      	movmi	r3, #32
 8014fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fbe:	0713      	lsls	r3, r2, #28
 8014fc0:	bf44      	itt	mi
 8014fc2:	232b      	movmi	r3, #43	; 0x2b
 8014fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8014fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8014fce:	d015      	beq.n	8014ffc <_vfiprintf_r+0x13c>
 8014fd0:	9a07      	ldr	r2, [sp, #28]
 8014fd2:	4654      	mov	r4, sl
 8014fd4:	2000      	movs	r0, #0
 8014fd6:	f04f 0c0a 	mov.w	ip, #10
 8014fda:	4621      	mov	r1, r4
 8014fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fe0:	3b30      	subs	r3, #48	; 0x30
 8014fe2:	2b09      	cmp	r3, #9
 8014fe4:	d94e      	bls.n	8015084 <_vfiprintf_r+0x1c4>
 8014fe6:	b1b0      	cbz	r0, 8015016 <_vfiprintf_r+0x156>
 8014fe8:	9207      	str	r2, [sp, #28]
 8014fea:	e014      	b.n	8015016 <_vfiprintf_r+0x156>
 8014fec:	eba0 0308 	sub.w	r3, r0, r8
 8014ff0:	fa09 f303 	lsl.w	r3, r9, r3
 8014ff4:	4313      	orrs	r3, r2
 8014ff6:	9304      	str	r3, [sp, #16]
 8014ff8:	46a2      	mov	sl, r4
 8014ffa:	e7d2      	b.n	8014fa2 <_vfiprintf_r+0xe2>
 8014ffc:	9b03      	ldr	r3, [sp, #12]
 8014ffe:	1d19      	adds	r1, r3, #4
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	9103      	str	r1, [sp, #12]
 8015004:	2b00      	cmp	r3, #0
 8015006:	bfbb      	ittet	lt
 8015008:	425b      	neglt	r3, r3
 801500a:	f042 0202 	orrlt.w	r2, r2, #2
 801500e:	9307      	strge	r3, [sp, #28]
 8015010:	9307      	strlt	r3, [sp, #28]
 8015012:	bfb8      	it	lt
 8015014:	9204      	strlt	r2, [sp, #16]
 8015016:	7823      	ldrb	r3, [r4, #0]
 8015018:	2b2e      	cmp	r3, #46	; 0x2e
 801501a:	d10c      	bne.n	8015036 <_vfiprintf_r+0x176>
 801501c:	7863      	ldrb	r3, [r4, #1]
 801501e:	2b2a      	cmp	r3, #42	; 0x2a
 8015020:	d135      	bne.n	801508e <_vfiprintf_r+0x1ce>
 8015022:	9b03      	ldr	r3, [sp, #12]
 8015024:	1d1a      	adds	r2, r3, #4
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	9203      	str	r2, [sp, #12]
 801502a:	2b00      	cmp	r3, #0
 801502c:	bfb8      	it	lt
 801502e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015032:	3402      	adds	r4, #2
 8015034:	9305      	str	r3, [sp, #20]
 8015036:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801511c <_vfiprintf_r+0x25c>
 801503a:	7821      	ldrb	r1, [r4, #0]
 801503c:	2203      	movs	r2, #3
 801503e:	4650      	mov	r0, sl
 8015040:	f7eb f8e6 	bl	8000210 <memchr>
 8015044:	b140      	cbz	r0, 8015058 <_vfiprintf_r+0x198>
 8015046:	2340      	movs	r3, #64	; 0x40
 8015048:	eba0 000a 	sub.w	r0, r0, sl
 801504c:	fa03 f000 	lsl.w	r0, r3, r0
 8015050:	9b04      	ldr	r3, [sp, #16]
 8015052:	4303      	orrs	r3, r0
 8015054:	3401      	adds	r4, #1
 8015056:	9304      	str	r3, [sp, #16]
 8015058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801505c:	482c      	ldr	r0, [pc, #176]	; (8015110 <_vfiprintf_r+0x250>)
 801505e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015062:	2206      	movs	r2, #6
 8015064:	f7eb f8d4 	bl	8000210 <memchr>
 8015068:	2800      	cmp	r0, #0
 801506a:	d03f      	beq.n	80150ec <_vfiprintf_r+0x22c>
 801506c:	4b29      	ldr	r3, [pc, #164]	; (8015114 <_vfiprintf_r+0x254>)
 801506e:	bb1b      	cbnz	r3, 80150b8 <_vfiprintf_r+0x1f8>
 8015070:	9b03      	ldr	r3, [sp, #12]
 8015072:	3307      	adds	r3, #7
 8015074:	f023 0307 	bic.w	r3, r3, #7
 8015078:	3308      	adds	r3, #8
 801507a:	9303      	str	r3, [sp, #12]
 801507c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801507e:	443b      	add	r3, r7
 8015080:	9309      	str	r3, [sp, #36]	; 0x24
 8015082:	e767      	b.n	8014f54 <_vfiprintf_r+0x94>
 8015084:	fb0c 3202 	mla	r2, ip, r2, r3
 8015088:	460c      	mov	r4, r1
 801508a:	2001      	movs	r0, #1
 801508c:	e7a5      	b.n	8014fda <_vfiprintf_r+0x11a>
 801508e:	2300      	movs	r3, #0
 8015090:	3401      	adds	r4, #1
 8015092:	9305      	str	r3, [sp, #20]
 8015094:	4619      	mov	r1, r3
 8015096:	f04f 0c0a 	mov.w	ip, #10
 801509a:	4620      	mov	r0, r4
 801509c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150a0:	3a30      	subs	r2, #48	; 0x30
 80150a2:	2a09      	cmp	r2, #9
 80150a4:	d903      	bls.n	80150ae <_vfiprintf_r+0x1ee>
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d0c5      	beq.n	8015036 <_vfiprintf_r+0x176>
 80150aa:	9105      	str	r1, [sp, #20]
 80150ac:	e7c3      	b.n	8015036 <_vfiprintf_r+0x176>
 80150ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80150b2:	4604      	mov	r4, r0
 80150b4:	2301      	movs	r3, #1
 80150b6:	e7f0      	b.n	801509a <_vfiprintf_r+0x1da>
 80150b8:	ab03      	add	r3, sp, #12
 80150ba:	9300      	str	r3, [sp, #0]
 80150bc:	462a      	mov	r2, r5
 80150be:	4b16      	ldr	r3, [pc, #88]	; (8015118 <_vfiprintf_r+0x258>)
 80150c0:	a904      	add	r1, sp, #16
 80150c2:	4630      	mov	r0, r6
 80150c4:	f7fb fef0 	bl	8010ea8 <_printf_float>
 80150c8:	4607      	mov	r7, r0
 80150ca:	1c78      	adds	r0, r7, #1
 80150cc:	d1d6      	bne.n	801507c <_vfiprintf_r+0x1bc>
 80150ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150d0:	07d9      	lsls	r1, r3, #31
 80150d2:	d405      	bmi.n	80150e0 <_vfiprintf_r+0x220>
 80150d4:	89ab      	ldrh	r3, [r5, #12]
 80150d6:	059a      	lsls	r2, r3, #22
 80150d8:	d402      	bmi.n	80150e0 <_vfiprintf_r+0x220>
 80150da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150dc:	f7fb fd98 	bl	8010c10 <__retarget_lock_release_recursive>
 80150e0:	89ab      	ldrh	r3, [r5, #12]
 80150e2:	065b      	lsls	r3, r3, #25
 80150e4:	f53f af12 	bmi.w	8014f0c <_vfiprintf_r+0x4c>
 80150e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150ea:	e711      	b.n	8014f10 <_vfiprintf_r+0x50>
 80150ec:	ab03      	add	r3, sp, #12
 80150ee:	9300      	str	r3, [sp, #0]
 80150f0:	462a      	mov	r2, r5
 80150f2:	4b09      	ldr	r3, [pc, #36]	; (8015118 <_vfiprintf_r+0x258>)
 80150f4:	a904      	add	r1, sp, #16
 80150f6:	4630      	mov	r0, r6
 80150f8:	f7fc f97a 	bl	80113f0 <_printf_i>
 80150fc:	e7e4      	b.n	80150c8 <_vfiprintf_r+0x208>
 80150fe:	bf00      	nop
 8015100:	080156b8 	.word	0x080156b8
 8015104:	080156d8 	.word	0x080156d8
 8015108:	08015698 	.word	0x08015698
 801510c:	08015aec 	.word	0x08015aec
 8015110:	08015af6 	.word	0x08015af6
 8015114:	08010ea9 	.word	0x08010ea9
 8015118:	08014e9d 	.word	0x08014e9d
 801511c:	08015af2 	.word	0x08015af2

08015120 <__swbuf_r>:
 8015120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015122:	460e      	mov	r6, r1
 8015124:	4614      	mov	r4, r2
 8015126:	4605      	mov	r5, r0
 8015128:	b118      	cbz	r0, 8015132 <__swbuf_r+0x12>
 801512a:	6983      	ldr	r3, [r0, #24]
 801512c:	b90b      	cbnz	r3, 8015132 <__swbuf_r+0x12>
 801512e:	f7fb fcab 	bl	8010a88 <__sinit>
 8015132:	4b21      	ldr	r3, [pc, #132]	; (80151b8 <__swbuf_r+0x98>)
 8015134:	429c      	cmp	r4, r3
 8015136:	d12b      	bne.n	8015190 <__swbuf_r+0x70>
 8015138:	686c      	ldr	r4, [r5, #4]
 801513a:	69a3      	ldr	r3, [r4, #24]
 801513c:	60a3      	str	r3, [r4, #8]
 801513e:	89a3      	ldrh	r3, [r4, #12]
 8015140:	071a      	lsls	r2, r3, #28
 8015142:	d52f      	bpl.n	80151a4 <__swbuf_r+0x84>
 8015144:	6923      	ldr	r3, [r4, #16]
 8015146:	b36b      	cbz	r3, 80151a4 <__swbuf_r+0x84>
 8015148:	6923      	ldr	r3, [r4, #16]
 801514a:	6820      	ldr	r0, [r4, #0]
 801514c:	1ac0      	subs	r0, r0, r3
 801514e:	6963      	ldr	r3, [r4, #20]
 8015150:	b2f6      	uxtb	r6, r6
 8015152:	4283      	cmp	r3, r0
 8015154:	4637      	mov	r7, r6
 8015156:	dc04      	bgt.n	8015162 <__swbuf_r+0x42>
 8015158:	4621      	mov	r1, r4
 801515a:	4628      	mov	r0, r5
 801515c:	f7fe fb68 	bl	8013830 <_fflush_r>
 8015160:	bb30      	cbnz	r0, 80151b0 <__swbuf_r+0x90>
 8015162:	68a3      	ldr	r3, [r4, #8]
 8015164:	3b01      	subs	r3, #1
 8015166:	60a3      	str	r3, [r4, #8]
 8015168:	6823      	ldr	r3, [r4, #0]
 801516a:	1c5a      	adds	r2, r3, #1
 801516c:	6022      	str	r2, [r4, #0]
 801516e:	701e      	strb	r6, [r3, #0]
 8015170:	6963      	ldr	r3, [r4, #20]
 8015172:	3001      	adds	r0, #1
 8015174:	4283      	cmp	r3, r0
 8015176:	d004      	beq.n	8015182 <__swbuf_r+0x62>
 8015178:	89a3      	ldrh	r3, [r4, #12]
 801517a:	07db      	lsls	r3, r3, #31
 801517c:	d506      	bpl.n	801518c <__swbuf_r+0x6c>
 801517e:	2e0a      	cmp	r6, #10
 8015180:	d104      	bne.n	801518c <__swbuf_r+0x6c>
 8015182:	4621      	mov	r1, r4
 8015184:	4628      	mov	r0, r5
 8015186:	f7fe fb53 	bl	8013830 <_fflush_r>
 801518a:	b988      	cbnz	r0, 80151b0 <__swbuf_r+0x90>
 801518c:	4638      	mov	r0, r7
 801518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015190:	4b0a      	ldr	r3, [pc, #40]	; (80151bc <__swbuf_r+0x9c>)
 8015192:	429c      	cmp	r4, r3
 8015194:	d101      	bne.n	801519a <__swbuf_r+0x7a>
 8015196:	68ac      	ldr	r4, [r5, #8]
 8015198:	e7cf      	b.n	801513a <__swbuf_r+0x1a>
 801519a:	4b09      	ldr	r3, [pc, #36]	; (80151c0 <__swbuf_r+0xa0>)
 801519c:	429c      	cmp	r4, r3
 801519e:	bf08      	it	eq
 80151a0:	68ec      	ldreq	r4, [r5, #12]
 80151a2:	e7ca      	b.n	801513a <__swbuf_r+0x1a>
 80151a4:	4621      	mov	r1, r4
 80151a6:	4628      	mov	r0, r5
 80151a8:	f000 f80c 	bl	80151c4 <__swsetup_r>
 80151ac:	2800      	cmp	r0, #0
 80151ae:	d0cb      	beq.n	8015148 <__swbuf_r+0x28>
 80151b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80151b4:	e7ea      	b.n	801518c <__swbuf_r+0x6c>
 80151b6:	bf00      	nop
 80151b8:	080156b8 	.word	0x080156b8
 80151bc:	080156d8 	.word	0x080156d8
 80151c0:	08015698 	.word	0x08015698

080151c4 <__swsetup_r>:
 80151c4:	4b32      	ldr	r3, [pc, #200]	; (8015290 <__swsetup_r+0xcc>)
 80151c6:	b570      	push	{r4, r5, r6, lr}
 80151c8:	681d      	ldr	r5, [r3, #0]
 80151ca:	4606      	mov	r6, r0
 80151cc:	460c      	mov	r4, r1
 80151ce:	b125      	cbz	r5, 80151da <__swsetup_r+0x16>
 80151d0:	69ab      	ldr	r3, [r5, #24]
 80151d2:	b913      	cbnz	r3, 80151da <__swsetup_r+0x16>
 80151d4:	4628      	mov	r0, r5
 80151d6:	f7fb fc57 	bl	8010a88 <__sinit>
 80151da:	4b2e      	ldr	r3, [pc, #184]	; (8015294 <__swsetup_r+0xd0>)
 80151dc:	429c      	cmp	r4, r3
 80151de:	d10f      	bne.n	8015200 <__swsetup_r+0x3c>
 80151e0:	686c      	ldr	r4, [r5, #4]
 80151e2:	89a3      	ldrh	r3, [r4, #12]
 80151e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80151e8:	0719      	lsls	r1, r3, #28
 80151ea:	d42c      	bmi.n	8015246 <__swsetup_r+0x82>
 80151ec:	06dd      	lsls	r5, r3, #27
 80151ee:	d411      	bmi.n	8015214 <__swsetup_r+0x50>
 80151f0:	2309      	movs	r3, #9
 80151f2:	6033      	str	r3, [r6, #0]
 80151f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80151f8:	81a3      	strh	r3, [r4, #12]
 80151fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151fe:	e03e      	b.n	801527e <__swsetup_r+0xba>
 8015200:	4b25      	ldr	r3, [pc, #148]	; (8015298 <__swsetup_r+0xd4>)
 8015202:	429c      	cmp	r4, r3
 8015204:	d101      	bne.n	801520a <__swsetup_r+0x46>
 8015206:	68ac      	ldr	r4, [r5, #8]
 8015208:	e7eb      	b.n	80151e2 <__swsetup_r+0x1e>
 801520a:	4b24      	ldr	r3, [pc, #144]	; (801529c <__swsetup_r+0xd8>)
 801520c:	429c      	cmp	r4, r3
 801520e:	bf08      	it	eq
 8015210:	68ec      	ldreq	r4, [r5, #12]
 8015212:	e7e6      	b.n	80151e2 <__swsetup_r+0x1e>
 8015214:	0758      	lsls	r0, r3, #29
 8015216:	d512      	bpl.n	801523e <__swsetup_r+0x7a>
 8015218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801521a:	b141      	cbz	r1, 801522e <__swsetup_r+0x6a>
 801521c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015220:	4299      	cmp	r1, r3
 8015222:	d002      	beq.n	801522a <__swsetup_r+0x66>
 8015224:	4630      	mov	r0, r6
 8015226:	f7ff fbc3 	bl	80149b0 <_free_r>
 801522a:	2300      	movs	r3, #0
 801522c:	6363      	str	r3, [r4, #52]	; 0x34
 801522e:	89a3      	ldrh	r3, [r4, #12]
 8015230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015234:	81a3      	strh	r3, [r4, #12]
 8015236:	2300      	movs	r3, #0
 8015238:	6063      	str	r3, [r4, #4]
 801523a:	6923      	ldr	r3, [r4, #16]
 801523c:	6023      	str	r3, [r4, #0]
 801523e:	89a3      	ldrh	r3, [r4, #12]
 8015240:	f043 0308 	orr.w	r3, r3, #8
 8015244:	81a3      	strh	r3, [r4, #12]
 8015246:	6923      	ldr	r3, [r4, #16]
 8015248:	b94b      	cbnz	r3, 801525e <__swsetup_r+0x9a>
 801524a:	89a3      	ldrh	r3, [r4, #12]
 801524c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015254:	d003      	beq.n	801525e <__swsetup_r+0x9a>
 8015256:	4621      	mov	r1, r4
 8015258:	4630      	mov	r0, r6
 801525a:	f000 f84d 	bl	80152f8 <__smakebuf_r>
 801525e:	89a0      	ldrh	r0, [r4, #12]
 8015260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015264:	f010 0301 	ands.w	r3, r0, #1
 8015268:	d00a      	beq.n	8015280 <__swsetup_r+0xbc>
 801526a:	2300      	movs	r3, #0
 801526c:	60a3      	str	r3, [r4, #8]
 801526e:	6963      	ldr	r3, [r4, #20]
 8015270:	425b      	negs	r3, r3
 8015272:	61a3      	str	r3, [r4, #24]
 8015274:	6923      	ldr	r3, [r4, #16]
 8015276:	b943      	cbnz	r3, 801528a <__swsetup_r+0xc6>
 8015278:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801527c:	d1ba      	bne.n	80151f4 <__swsetup_r+0x30>
 801527e:	bd70      	pop	{r4, r5, r6, pc}
 8015280:	0781      	lsls	r1, r0, #30
 8015282:	bf58      	it	pl
 8015284:	6963      	ldrpl	r3, [r4, #20]
 8015286:	60a3      	str	r3, [r4, #8]
 8015288:	e7f4      	b.n	8015274 <__swsetup_r+0xb0>
 801528a:	2000      	movs	r0, #0
 801528c:	e7f7      	b.n	801527e <__swsetup_r+0xba>
 801528e:	bf00      	nop
 8015290:	20000010 	.word	0x20000010
 8015294:	080156b8 	.word	0x080156b8
 8015298:	080156d8 	.word	0x080156d8
 801529c:	08015698 	.word	0x08015698

080152a0 <abort>:
 80152a0:	b508      	push	{r3, lr}
 80152a2:	2006      	movs	r0, #6
 80152a4:	f000 f898 	bl	80153d8 <raise>
 80152a8:	2001      	movs	r0, #1
 80152aa:	f7ec fe17 	bl	8001edc <_exit>

080152ae <__swhatbuf_r>:
 80152ae:	b570      	push	{r4, r5, r6, lr}
 80152b0:	460e      	mov	r6, r1
 80152b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152b6:	2900      	cmp	r1, #0
 80152b8:	b096      	sub	sp, #88	; 0x58
 80152ba:	4614      	mov	r4, r2
 80152bc:	461d      	mov	r5, r3
 80152be:	da08      	bge.n	80152d2 <__swhatbuf_r+0x24>
 80152c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80152c4:	2200      	movs	r2, #0
 80152c6:	602a      	str	r2, [r5, #0]
 80152c8:	061a      	lsls	r2, r3, #24
 80152ca:	d410      	bmi.n	80152ee <__swhatbuf_r+0x40>
 80152cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152d0:	e00e      	b.n	80152f0 <__swhatbuf_r+0x42>
 80152d2:	466a      	mov	r2, sp
 80152d4:	f000 f89c 	bl	8015410 <_fstat_r>
 80152d8:	2800      	cmp	r0, #0
 80152da:	dbf1      	blt.n	80152c0 <__swhatbuf_r+0x12>
 80152dc:	9a01      	ldr	r2, [sp, #4]
 80152de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80152e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80152e6:	425a      	negs	r2, r3
 80152e8:	415a      	adcs	r2, r3
 80152ea:	602a      	str	r2, [r5, #0]
 80152ec:	e7ee      	b.n	80152cc <__swhatbuf_r+0x1e>
 80152ee:	2340      	movs	r3, #64	; 0x40
 80152f0:	2000      	movs	r0, #0
 80152f2:	6023      	str	r3, [r4, #0]
 80152f4:	b016      	add	sp, #88	; 0x58
 80152f6:	bd70      	pop	{r4, r5, r6, pc}

080152f8 <__smakebuf_r>:
 80152f8:	898b      	ldrh	r3, [r1, #12]
 80152fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80152fc:	079d      	lsls	r5, r3, #30
 80152fe:	4606      	mov	r6, r0
 8015300:	460c      	mov	r4, r1
 8015302:	d507      	bpl.n	8015314 <__smakebuf_r+0x1c>
 8015304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015308:	6023      	str	r3, [r4, #0]
 801530a:	6123      	str	r3, [r4, #16]
 801530c:	2301      	movs	r3, #1
 801530e:	6163      	str	r3, [r4, #20]
 8015310:	b002      	add	sp, #8
 8015312:	bd70      	pop	{r4, r5, r6, pc}
 8015314:	ab01      	add	r3, sp, #4
 8015316:	466a      	mov	r2, sp
 8015318:	f7ff ffc9 	bl	80152ae <__swhatbuf_r>
 801531c:	9900      	ldr	r1, [sp, #0]
 801531e:	4605      	mov	r5, r0
 8015320:	4630      	mov	r0, r6
 8015322:	f7fb fcad 	bl	8010c80 <_malloc_r>
 8015326:	b948      	cbnz	r0, 801533c <__smakebuf_r+0x44>
 8015328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801532c:	059a      	lsls	r2, r3, #22
 801532e:	d4ef      	bmi.n	8015310 <__smakebuf_r+0x18>
 8015330:	f023 0303 	bic.w	r3, r3, #3
 8015334:	f043 0302 	orr.w	r3, r3, #2
 8015338:	81a3      	strh	r3, [r4, #12]
 801533a:	e7e3      	b.n	8015304 <__smakebuf_r+0xc>
 801533c:	4b0d      	ldr	r3, [pc, #52]	; (8015374 <__smakebuf_r+0x7c>)
 801533e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015340:	89a3      	ldrh	r3, [r4, #12]
 8015342:	6020      	str	r0, [r4, #0]
 8015344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015348:	81a3      	strh	r3, [r4, #12]
 801534a:	9b00      	ldr	r3, [sp, #0]
 801534c:	6163      	str	r3, [r4, #20]
 801534e:	9b01      	ldr	r3, [sp, #4]
 8015350:	6120      	str	r0, [r4, #16]
 8015352:	b15b      	cbz	r3, 801536c <__smakebuf_r+0x74>
 8015354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015358:	4630      	mov	r0, r6
 801535a:	f000 f86b 	bl	8015434 <_isatty_r>
 801535e:	b128      	cbz	r0, 801536c <__smakebuf_r+0x74>
 8015360:	89a3      	ldrh	r3, [r4, #12]
 8015362:	f023 0303 	bic.w	r3, r3, #3
 8015366:	f043 0301 	orr.w	r3, r3, #1
 801536a:	81a3      	strh	r3, [r4, #12]
 801536c:	89a0      	ldrh	r0, [r4, #12]
 801536e:	4305      	orrs	r5, r0
 8015370:	81a5      	strh	r5, [r4, #12]
 8015372:	e7cd      	b.n	8015310 <__smakebuf_r+0x18>
 8015374:	08010a21 	.word	0x08010a21

08015378 <_malloc_usable_size_r>:
 8015378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801537c:	1f18      	subs	r0, r3, #4
 801537e:	2b00      	cmp	r3, #0
 8015380:	bfbc      	itt	lt
 8015382:	580b      	ldrlt	r3, [r1, r0]
 8015384:	18c0      	addlt	r0, r0, r3
 8015386:	4770      	bx	lr

08015388 <_raise_r>:
 8015388:	291f      	cmp	r1, #31
 801538a:	b538      	push	{r3, r4, r5, lr}
 801538c:	4604      	mov	r4, r0
 801538e:	460d      	mov	r5, r1
 8015390:	d904      	bls.n	801539c <_raise_r+0x14>
 8015392:	2316      	movs	r3, #22
 8015394:	6003      	str	r3, [r0, #0]
 8015396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801539a:	bd38      	pop	{r3, r4, r5, pc}
 801539c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801539e:	b112      	cbz	r2, 80153a6 <_raise_r+0x1e>
 80153a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80153a4:	b94b      	cbnz	r3, 80153ba <_raise_r+0x32>
 80153a6:	4620      	mov	r0, r4
 80153a8:	f000 f830 	bl	801540c <_getpid_r>
 80153ac:	462a      	mov	r2, r5
 80153ae:	4601      	mov	r1, r0
 80153b0:	4620      	mov	r0, r4
 80153b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153b6:	f000 b817 	b.w	80153e8 <_kill_r>
 80153ba:	2b01      	cmp	r3, #1
 80153bc:	d00a      	beq.n	80153d4 <_raise_r+0x4c>
 80153be:	1c59      	adds	r1, r3, #1
 80153c0:	d103      	bne.n	80153ca <_raise_r+0x42>
 80153c2:	2316      	movs	r3, #22
 80153c4:	6003      	str	r3, [r0, #0]
 80153c6:	2001      	movs	r0, #1
 80153c8:	e7e7      	b.n	801539a <_raise_r+0x12>
 80153ca:	2400      	movs	r4, #0
 80153cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80153d0:	4628      	mov	r0, r5
 80153d2:	4798      	blx	r3
 80153d4:	2000      	movs	r0, #0
 80153d6:	e7e0      	b.n	801539a <_raise_r+0x12>

080153d8 <raise>:
 80153d8:	4b02      	ldr	r3, [pc, #8]	; (80153e4 <raise+0xc>)
 80153da:	4601      	mov	r1, r0
 80153dc:	6818      	ldr	r0, [r3, #0]
 80153de:	f7ff bfd3 	b.w	8015388 <_raise_r>
 80153e2:	bf00      	nop
 80153e4:	20000010 	.word	0x20000010

080153e8 <_kill_r>:
 80153e8:	b538      	push	{r3, r4, r5, lr}
 80153ea:	4d07      	ldr	r5, [pc, #28]	; (8015408 <_kill_r+0x20>)
 80153ec:	2300      	movs	r3, #0
 80153ee:	4604      	mov	r4, r0
 80153f0:	4608      	mov	r0, r1
 80153f2:	4611      	mov	r1, r2
 80153f4:	602b      	str	r3, [r5, #0]
 80153f6:	f7ec fd61 	bl	8001ebc <_kill>
 80153fa:	1c43      	adds	r3, r0, #1
 80153fc:	d102      	bne.n	8015404 <_kill_r+0x1c>
 80153fe:	682b      	ldr	r3, [r5, #0]
 8015400:	b103      	cbz	r3, 8015404 <_kill_r+0x1c>
 8015402:	6023      	str	r3, [r4, #0]
 8015404:	bd38      	pop	{r3, r4, r5, pc}
 8015406:	bf00      	nop
 8015408:	200026c0 	.word	0x200026c0

0801540c <_getpid_r>:
 801540c:	f7ec bd4e 	b.w	8001eac <_getpid>

08015410 <_fstat_r>:
 8015410:	b538      	push	{r3, r4, r5, lr}
 8015412:	4d07      	ldr	r5, [pc, #28]	; (8015430 <_fstat_r+0x20>)
 8015414:	2300      	movs	r3, #0
 8015416:	4604      	mov	r4, r0
 8015418:	4608      	mov	r0, r1
 801541a:	4611      	mov	r1, r2
 801541c:	602b      	str	r3, [r5, #0]
 801541e:	f7ec fdac 	bl	8001f7a <_fstat>
 8015422:	1c43      	adds	r3, r0, #1
 8015424:	d102      	bne.n	801542c <_fstat_r+0x1c>
 8015426:	682b      	ldr	r3, [r5, #0]
 8015428:	b103      	cbz	r3, 801542c <_fstat_r+0x1c>
 801542a:	6023      	str	r3, [r4, #0]
 801542c:	bd38      	pop	{r3, r4, r5, pc}
 801542e:	bf00      	nop
 8015430:	200026c0 	.word	0x200026c0

08015434 <_isatty_r>:
 8015434:	b538      	push	{r3, r4, r5, lr}
 8015436:	4d06      	ldr	r5, [pc, #24]	; (8015450 <_isatty_r+0x1c>)
 8015438:	2300      	movs	r3, #0
 801543a:	4604      	mov	r4, r0
 801543c:	4608      	mov	r0, r1
 801543e:	602b      	str	r3, [r5, #0]
 8015440:	f7ec fdab 	bl	8001f9a <_isatty>
 8015444:	1c43      	adds	r3, r0, #1
 8015446:	d102      	bne.n	801544e <_isatty_r+0x1a>
 8015448:	682b      	ldr	r3, [r5, #0]
 801544a:	b103      	cbz	r3, 801544e <_isatty_r+0x1a>
 801544c:	6023      	str	r3, [r4, #0]
 801544e:	bd38      	pop	{r3, r4, r5, pc}
 8015450:	200026c0 	.word	0x200026c0

08015454 <_init>:
 8015454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015456:	bf00      	nop
 8015458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801545a:	bc08      	pop	{r3}
 801545c:	469e      	mov	lr, r3
 801545e:	4770      	bx	lr

08015460 <_fini>:
 8015460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015462:	bf00      	nop
 8015464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015466:	bc08      	pop	{r3}
 8015468:	469e      	mov	lr, r3
 801546a:	4770      	bx	lr
