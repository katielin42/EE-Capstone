
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010540  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08010700  08010700  00020700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010930  08010930  00030084  2**0
                  CONTENTS
  4 .ARM          00000000  08010930  08010930  00030084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010930  08010930  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010930  08010930  00020930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010934  08010934  00020934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08010938  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025e8  20000084  080109bc  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000266c  080109bc  0003266c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030c81  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061cd  00000000  00000000  00060d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002870  00000000  00000000  00066f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025b8  00000000  00000000  00069778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039fae  00000000  00000000  0006bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032a1c  00000000  00000000  000a5cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00151004  00000000  00000000  000d86fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002296fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae90  00000000  00000000  00229750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000084 	.word	0x20000084
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080106e8 	.word	0x080106e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000088 	.word	0x20000088
 80001fc:	080106e8 	.word	0x080106e8

08000200 <ADC_Init>:
/* USER CODE BEGIN PV */



//initialize ADC thread
void ADC_Init(void *argument) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	60fb      	str	r3, [r7, #12]
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 800020c:	4a08      	ldr	r2, [pc, #32]	; (8000230 <ADC_Init+0x30>)
 800020e:	2101      	movs	r1, #1
 8000210:	2001      	movs	r0, #1
 8000212:	f00c fd9d 	bl	800cd50 <osSemaphoreNew>
 8000216:	4603      	mov	r3, r0
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <ADC_Init+0x34>)
 800021a:	6013      	str	r3, [r2, #0]
	//start to collect ADC signals into ADC buffer through the DMA
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 800021c:	2209      	movs	r2, #9
 800021e:	4906      	ldr	r1, [pc, #24]	; (8000238 <ADC_Init+0x38>)
 8000220:	68f8      	ldr	r0, [r7, #12]
 8000222:	f001 fd95 	bl	8001d50 <HAL_ADC_Start_DMA>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	0801077c 	.word	0x0801077c
 8000234:	200000c0 	.word	0x200000c0
 8000238:	200000a0 	.word	0x200000a0

0800023c <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	// average the ADC values from 3 consecutive samples and convert them into the analog values with the formula (VREF-GND)/ADC_BIT_RESOLUTION
	//// analog values from adc bit sample = (VREF-GND)*ADC_bits/4095
	for(int i = 0 ; i < 3; i++) {
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e039      	b.n	80002be <HAL_ADC_ConvCpltCallback+0x82>
		ADC_buffer_processed[i] = ((vref-gnd)/adc_reso)*(((float)ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3);
 800024a:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <HAL_ADC_ConvCpltCallback+0x9c>)
 800024c:	ed93 7a00 	vldr	s14, [r3]
 8000250:	4b22      	ldr	r3, [pc, #136]	; (80002dc <HAL_ADC_ConvCpltCallback+0xa0>)
 8000252:	edd3 7a00 	vldr	s15, [r3]
 8000256:	ee77 6a67 	vsub.f32	s13, s14, s15
 800025a:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <HAL_ADC_ConvCpltCallback+0xa4>)
 800025c:	edd3 7a00 	vldr	s15, [r3]
 8000260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000264:	4a1f      	ldr	r2, [pc, #124]	; (80002e4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800026c:	ee07 3a90 	vmov	s15, r3
 8000270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	3303      	adds	r3, #3
 8000278:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <HAL_ADC_ConvCpltCallback+0xa8>)
 800027a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800027e:	ee07 3a90 	vmov	s15, r3
 8000282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000286:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	3306      	adds	r3, #6
 800028e:	4a15      	ldr	r2, [pc, #84]	; (80002e4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000294:	ee07 3a90 	vmov	s15, r3
 8000298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800029c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80002a0:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80002a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80002a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002ac:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <HAL_ADC_ConvCpltCallback+0xac>)
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4413      	add	r3, r2
 80002b4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3; i++) {
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	3301      	adds	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	2b02      	cmp	r3, #2
 80002c2:	ddc2      	ble.n	800024a <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <HAL_ADC_ConvCpltCallback+0xb0>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f00c fe1d 	bl	800cf08 <osSemaphoreRelease>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000000 	.word	0x20000000
 80002dc:	20000114 	.word	0x20000114
 80002e0:	20000004 	.word	0x20000004
 80002e4:	200000a0 	.word	0x200000a0
 80002e8:	200000b4 	.word	0x200000b4
 80002ec:	200000c0 	.word	0x200000c0

080002f0 <state_machine_init>:

void controller_state_machine(void *args);



void state_machine_init(void){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	thr_1 = osThreadNew(controller_state_machine, &hadc1, &thr_1_attributes);
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <state_machine_init+0x18>)
 80002f6:	4905      	ldr	r1, [pc, #20]	; (800030c <state_machine_init+0x1c>)
 80002f8:	4805      	ldr	r0, [pc, #20]	; (8000310 <state_machine_init+0x20>)
 80002fa:	f00c fb48 	bl	800c98e <osThreadNew>
 80002fe:	4603      	mov	r3, r0
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <state_machine_init+0x24>)
 8000302:	6013      	str	r3, [r2, #0]
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	0801078c 	.word	0x0801078c
 800030c:	20000120 	.word	0x20000120
 8000310:	08000319 	.word	0x08000319
 8000314:	20000118 	.word	0x20000118

08000318 <controller_state_machine>:

void controller_state_machine(void *args){
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	ADC_P0=ADC_buffer_processed[0];
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <controller_state_machine+0x30>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a09      	ldr	r2, [pc, #36]	; (800034c <controller_state_machine+0x34>)
 8000326:	6013      	str	r3, [r2, #0]
	SD_process(yourmom, &ADC_P0, 1);
 8000328:	2201      	movs	r2, #1
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <controller_state_machine+0x34>)
 800032c:	4808      	ldr	r0, [pc, #32]	; (8000350 <controller_state_machine+0x38>)
 800032e:	f000 fd0f 	bl	8000d50 <SD_process>
	  for(;;)
	  {
		  osSemaphoreAcquire(ADC_semHandle, 1);
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <controller_state_machine+0x3c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2101      	movs	r1, #1
 8000338:	4618      	mov	r0, r3
 800033a:	f00c fd93 	bl	800ce64 <osSemaphoreAcquire>


	    osDelay(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f00c fbb7 	bl	800cab2 <osDelay>
		  osSemaphoreAcquire(ADC_semHandle, 1);
 8000344:	e7f5      	b.n	8000332 <controller_state_machine+0x1a>
 8000346:	bf00      	nop
 8000348:	200000b4 	.word	0x200000b4
 800034c:	2000011c 	.word	0x2000011c
 8000350:	20000008 	.word	0x20000008
 8000354:	200000c0 	.word	0x200000c0

08000358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035c:	f001 f961 	bl	8001622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000360:	f000 f82e 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000364:	f000 fa68 	bl	8000838 <MX_GPIO_Init>
  MX_DMA_Init();
 8000368:	f000 f9d6 	bl	8000718 <MX_DMA_Init>
  MX_FMC_Init();
 800036c:	f000 f9fe 	bl	800076c <MX_FMC_Init>
  MX_I2C1_Init();
 8000370:	f000 f932 	bl	80005d8 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8000374:	f000 f970 	bl	8000658 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000378:	f000 f990 	bl	800069c <MX_SPI2_Init>
  MX_CAN1_Init();
 800037c:	f000 f8f6 	bl	800056c <MX_CAN1_Init>
  MX_ADC1_Init();
 8000380:	f000 f86c 	bl	800045c <MX_ADC1_Init>
  MX_FATFS_Init();
 8000384:	f009 f8fc 	bl	8009580 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000388:	f00c fa80 	bl	800c88c <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */

  defaultTaskHandle = osThreadNew(SD_init, NULL, &defaultTask_attributes);
 800038c:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <main+0x58>)
 800038e:	2100      	movs	r1, #0
 8000390:	4808      	ldr	r0, [pc, #32]	; (80003b4 <main+0x5c>)
 8000392:	f00c fafc 	bl	800c98e <osThreadNew>
 8000396:	4603      	mov	r3, r0
 8000398:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <main+0x60>)
 800039a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init(&hadc1);
 800039c:	4807      	ldr	r0, [pc, #28]	; (80003bc <main+0x64>)
 800039e:	f7ff ff2f 	bl	8000200 <ADC_Init>

  state_machine_init();
 80003a2:	f7ff ffa5 	bl	80002f0 <state_machine_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003a6:	f00c fab7 	bl	800c918 <osKernelStart>
  SD_init();
 80003aa:	f000 fcab 	bl	8000d04 <SD_init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <main+0x56>
 80003b0:	080107b0 	.word	0x080107b0
 80003b4:	08000d05 	.word	0x08000d05
 80003b8:	20000398 	.word	0x20000398
 80003bc:	20000120 	.word	0x20000120

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b096      	sub	sp, #88	; 0x58
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0314 	add.w	r3, r7, #20
 80003ca:	2244      	movs	r2, #68	; 0x44
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f010 f8c0 	bl	8010554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	463b      	mov	r3, r7
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80003e2:	2000      	movs	r0, #0
 80003e4:	f003 fbaa 	bl	8003b3c <HAL_PWREx_ControlVoltageScaling>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80003ee:	f000 fc83 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f2:	2301      	movs	r3, #1
 80003f4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	2302      	movs	r3, #2
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000400:	2303      	movs	r3, #3
 8000402:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000404:	2302      	movs	r3, #2
 8000406:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000408:	231e      	movs	r3, #30
 800040a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800040c:	2302      	movs	r3, #2
 800040e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000410:	2302      	movs	r3, #2
 8000412:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000414:	2302      	movs	r3, #2
 8000416:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0314 	add.w	r3, r7, #20
 800041c:	4618      	mov	r0, r3
 800041e:	f003 fc41 	bl	8003ca4 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000428:	f000 fc66 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	230f      	movs	r3, #15
 800042e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000430:	2303      	movs	r3, #3
 8000432:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000440:	463b      	mov	r3, r7
 8000442:	2105      	movs	r1, #5
 8000444:	4618      	mov	r0, r3
 8000446:	f004 f847 	bl	80044d8 <HAL_RCC_ClockConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000450:	f000 fc52 	bl	8000cf8 <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3758      	adds	r7, #88	; 0x58
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000462:	463b      	mov	r3, r7
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
 800046e:	611a      	str	r2, [r3, #16]
 8000470:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000472:	4b39      	ldr	r3, [pc, #228]	; (8000558 <MX_ADC1_Init+0xfc>)
 8000474:	4a39      	ldr	r2, [pc, #228]	; (800055c <MX_ADC1_Init+0x100>)
 8000476:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000478:	4b37      	ldr	r3, [pc, #220]	; (8000558 <MX_ADC1_Init+0xfc>)
 800047a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800047e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000480:	4b35      	ldr	r3, [pc, #212]	; (8000558 <MX_ADC1_Init+0xfc>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000486:	4b34      	ldr	r3, [pc, #208]	; (8000558 <MX_ADC1_Init+0xfc>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800048c:	4b32      	ldr	r3, [pc, #200]	; (8000558 <MX_ADC1_Init+0xfc>)
 800048e:	2201      	movs	r2, #1
 8000490:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000492:	4b31      	ldr	r3, [pc, #196]	; (8000558 <MX_ADC1_Init+0xfc>)
 8000494:	2208      	movs	r2, #8
 8000496:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000498:	4b2f      	ldr	r3, [pc, #188]	; (8000558 <MX_ADC1_Init+0xfc>)
 800049a:	2200      	movs	r2, #0
 800049c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800049e:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <MX_ADC1_Init+0xfc>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80004a4:	4b2c      	ldr	r3, [pc, #176]	; (8000558 <MX_ADC1_Init+0xfc>)
 80004a6:	2203      	movs	r2, #3
 80004a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004aa:	4b2b      	ldr	r3, [pc, #172]	; (8000558 <MX_ADC1_Init+0xfc>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b2:	4b29      	ldr	r3, [pc, #164]	; (8000558 <MX_ADC1_Init+0xfc>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004b8:	4b27      	ldr	r3, [pc, #156]	; (8000558 <MX_ADC1_Init+0xfc>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80004be:	4b26      	ldr	r3, [pc, #152]	; (8000558 <MX_ADC1_Init+0xfc>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004c6:	4b24      	ldr	r3, [pc, #144]	; (8000558 <MX_ADC1_Init+0xfc>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004cc:	4b22      	ldr	r3, [pc, #136]	; (8000558 <MX_ADC1_Init+0xfc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80004d4:	4b20      	ldr	r3, [pc, #128]	; (8000558 <MX_ADC1_Init+0xfc>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004da:	481f      	ldr	r0, [pc, #124]	; (8000558 <MX_ADC1_Init+0xfc>)
 80004dc:	f001 faec 	bl	8001ab8 <HAL_ADC_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80004e6:	f000 fc07 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <MX_ADC1_Init+0x104>)
 80004ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ee:	2306      	movs	r3, #6
 80004f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80004f2:	2305      	movs	r3, #5
 80004f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004f6:	237f      	movs	r3, #127	; 0x7f
 80004f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004fa:	2304      	movs	r3, #4
 80004fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000502:	463b      	mov	r3, r7
 8000504:	4619      	mov	r1, r3
 8000506:	4814      	ldr	r0, [pc, #80]	; (8000558 <MX_ADC1_Init+0xfc>)
 8000508:	f001 fe78 	bl	80021fc <HAL_ADC_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000512:	f000 fbf1 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <MX_ADC1_Init+0x108>)
 8000518:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800051a:	230c      	movs	r3, #12
 800051c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800051e:	463b      	mov	r3, r7
 8000520:	4619      	mov	r1, r3
 8000522:	480d      	ldr	r0, [pc, #52]	; (8000558 <MX_ADC1_Init+0xfc>)
 8000524:	f001 fe6a 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800052e:	f000 fbe3 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <MX_ADC1_Init+0x10c>)
 8000534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000536:	2312      	movs	r3, #18
 8000538:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053a:	463b      	mov	r3, r7
 800053c:	4619      	mov	r1, r3
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <MX_ADC1_Init+0xfc>)
 8000540:	f001 fe5c 	bl	80021fc <HAL_ADC_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800054a:	f000 fbd5 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000120 	.word	0x20000120
 800055c:	50040000 	.word	0x50040000
 8000560:	14f00020 	.word	0x14f00020
 8000564:	19200040 	.word	0x19200040
 8000568:	1d500080 	.word	0x1d500080

0800056c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_CAN1_Init+0x64>)
 8000572:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <MX_CAN1_Init+0x68>)
 8000574:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_CAN1_Init+0x64>)
 8000578:	2214      	movs	r2, #20
 800057a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_CAN1_Init+0x64>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_CAN1_Init+0x64>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_CAN1_Init+0x64>)
 800058a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800058e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_CAN1_Init+0x64>)
 8000592:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000596:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_CAN1_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_CAN1_Init+0x64>)
 80005be:	f002 fb65 	bl	8002c8c <HAL_CAN_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005c8:	f000 fb96 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200001e8 	.word	0x200001e8
 80005d4:	40006400 	.word	0x40006400

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_I2C1_Init+0x74>)
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <MX_I2C1_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_I2C1_Init+0x74>)
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <MX_I2C1_Init+0x7c>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_I2C1_Init+0x74>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_I2C1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000612:	480e      	ldr	r0, [pc, #56]	; (800064c <MX_I2C1_Init+0x74>)
 8000614:	f003 f94c 	bl	80038b0 <HAL_I2C_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800061e:	f000 fb6b 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000622:	2100      	movs	r1, #0
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <MX_I2C1_Init+0x74>)
 8000626:	f003 f9d2 	bl	80039ce <HAL_I2CEx_ConfigAnalogFilter>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 fb62 	bl	8000cf8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000634:	2100      	movs	r1, #0
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_I2C1_Init+0x74>)
 8000638:	f003 fa14 	bl	8003a64 <HAL_I2CEx_ConfigDigitalFilter>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fb59 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000210 	.word	0x20000210
 8000650:	40005400 	.word	0x40005400
 8000654:	307075b1 	.word	0x307075b1

08000658 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_SDMMC1_SD_Init+0x3c>)
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <MX_SDMMC1_SD_Init+0x40>)
 8000660:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_SDMMC1_SD_Init+0x3c>)
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_SDMMC1_SD_Init+0x3c>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_SDMMC1_SD_Init+0x3c>)
 8000670:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000674:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_SDMMC1_SD_Init+0x3c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <MX_SDMMC1_SD_Init+0x3c>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000682:	4b04      	ldr	r3, [pc, #16]	; (8000694 <MX_SDMMC1_SD_Init+0x3c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000264 	.word	0x20000264
 8000698:	50062400 	.word	0x50062400

0800069c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_SPI2_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MX_SPI2_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_SPI2_Init+0x74>)
 80006a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_SPI2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_SPI2_Init+0x74>)
 80006b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_SPI2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_SPI2_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_SPI2_Init+0x74>)
 80006ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_SPI2_Init+0x74>)
 80006d2:	2208      	movs	r2, #8
 80006d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI2_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_SPI2_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_SPI2_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_SPI2_Init+0x74>)
 80006ea:	2207      	movs	r2, #7
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_SPI2_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_SPI2_Init+0x74>)
 80006f6:	2208      	movs	r2, #8
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_SPI2_Init+0x74>)
 80006fc:	f007 fc77 	bl	8007fee <HAL_SPI_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 faf7 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200002e4 	.word	0x200002e4
 8000714:	40003800 	.word	0x40003800

08000718 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_DMA_Init+0x50>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <MX_DMA_Init+0x50>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	; 0x48
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_DMA_Init+0x50>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_DMA_Init+0x50>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <MX_DMA_Init+0x50>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	; 0x48
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_DMA_Init+0x50>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2105      	movs	r1, #5
 8000752:	200e      	movs	r0, #14
 8000754:	f002 fc4e 	bl	8002ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000758:	200e      	movs	r0, #14
 800075a:	f002 fc67 	bl	800302c <HAL_NVIC_EnableIRQ>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2220      	movs	r2, #32
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f00f feeb 	bl	8010554 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_FMC_Init+0xc4>)
 8000780:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000784:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_FMC_Init+0xc4>)
 8000788:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <MX_FMC_Init+0xc8>)
 800078a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_FMC_Init+0xc4>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000792:	4b27      	ldr	r3, [pc, #156]	; (8000830 <MX_FMC_Init+0xc4>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_FMC_Init+0xc4>)
 800079a:	2204      	movs	r2, #4
 800079c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MX_FMC_Init+0xc4>)
 80007a0:	2210      	movs	r2, #16
 80007a2:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_FMC_Init+0xc4>)
 80007a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80007ac:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_FMC_Init+0xc4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_FMC_Init+0xc4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_FMC_Init+0xc4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_FMC_Init+0xc4>)
 80007c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_FMC_Init+0xc4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_FMC_Init+0xc4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_FMC_Init+0xc4>)
 80007d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_FMC_Init+0xc4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_FMC_Init+0xc4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_FMC_Init+0xc4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_FMC_Init+0xc4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80007f2:	230f      	movs	r3, #15
 80007f4:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80007f6:	230f      	movs	r3, #15
 80007f8:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80007fa:	23ff      	movs	r3, #255	; 0xff
 80007fc:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000802:	230f      	movs	r3, #15
 8000804:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000806:	2310      	movs	r3, #16
 8000808:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_FMC_Init+0xc4>)
 800081a:	f007 fc8b 	bl	8008134 <HAL_SRAM_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000824:	f000 fa68 	bl	8000cf8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000348 	.word	0x20000348
 8000834:	a0000104 	.word	0xa0000104

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	; 0x38
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800084e:	4bb2      	ldr	r3, [pc, #712]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4ab1      	ldr	r2, [pc, #708]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4baf      	ldr	r3, [pc, #700]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000862:	623b      	str	r3, [r7, #32]
 8000864:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	4bac      	ldr	r3, [pc, #688]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4aab      	ldr	r2, [pc, #684]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4ba9      	ldr	r3, [pc, #676]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	4ba6      	ldr	r3, [pc, #664]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4aa5      	ldr	r2, [pc, #660]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000884:	f043 0310 	orr.w	r3, r3, #16
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4ba3      	ldr	r3, [pc, #652]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4ba0      	ldr	r3, [pc, #640]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a9f      	ldr	r2, [pc, #636]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b9d      	ldr	r3, [pc, #628]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b9a      	ldr	r3, [pc, #616]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a99      	ldr	r2, [pc, #612]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b97      	ldr	r3, [pc, #604]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c6:	4b94      	ldr	r3, [pc, #592]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a93      	ldr	r2, [pc, #588]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b91      	ldr	r3, [pc, #580]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80008de:	f003 f9d1 	bl	8003c84 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	4b8d      	ldr	r3, [pc, #564]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a8c      	ldr	r2, [pc, #560]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b8a      	ldr	r3, [pc, #552]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b87      	ldr	r3, [pc, #540]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a86      	ldr	r2, [pc, #536]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b84      	ldr	r3, [pc, #528]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	4b81      	ldr	r3, [pc, #516]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a80      	ldr	r2, [pc, #512]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000918:	f043 0320 	orr.w	r3, r3, #32
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b7e      	ldr	r3, [pc, #504]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0320 	and.w	r3, r3, #32
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f244 0114 	movw	r1, #16404	; 0x4014
 8000930:	487a      	ldr	r0, [pc, #488]	; (8000b1c <MX_GPIO_Init+0x2e4>)
 8000932:	f002 ffa5 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800093c:	4878      	ldr	r0, [pc, #480]	; (8000b20 <MX_GPIO_Init+0x2e8>)
 800093e:	f002 ff9f 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094a:	f002 ff99 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2104      	movs	r1, #4
 8000952:	4874      	ldr	r0, [pc, #464]	; (8000b24 <MX_GPIO_Init+0x2ec>)
 8000954:	f002 ff94 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000958:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800096a:	2305      	movs	r3, #5
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	4619      	mov	r1, r3
 8000974:	486c      	ldr	r0, [pc, #432]	; (8000b28 <MX_GPIO_Init+0x2f0>)
 8000976:	f002 fdd9 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 800097a:	f244 0314 	movw	r3, #16404	; 0x4014
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	4862      	ldr	r0, [pc, #392]	; (8000b1c <MX_GPIO_Init+0x2e4>)
 8000994:	f002 fdca 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000998:	2310      	movs	r3, #16
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009a8:	2302      	movs	r3, #2
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	485c      	ldr	r0, [pc, #368]	; (8000b24 <MX_GPIO_Init+0x2ec>)
 80009b4:	f002 fdba 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 80009b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009ca:	2307      	movs	r3, #7
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f002 fda8 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80009dc:	23b0      	movs	r3, #176	; 0xb0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80009ec:	230a      	movs	r3, #10
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	484c      	ldr	r0, [pc, #304]	; (8000b28 <MX_GPIO_Init+0x2f0>)
 80009f8:	f002 fd98 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 80009fc:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a0e:	230d      	movs	r3, #13
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4842      	ldr	r0, [pc, #264]	; (8000b24 <MX_GPIO_Init+0x2ec>)
 8000a1a:	f002 fd87 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000a1e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000a30:	2305      	movs	r3, #5
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	483c      	ldr	r0, [pc, #240]	; (8000b2c <MX_GPIO_Init+0x2f4>)
 8000a3c:	f002 fd76 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000a40:	2302      	movs	r3, #2
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4834      	ldr	r0, [pc, #208]	; (8000b28 <MX_GPIO_Init+0x2f0>)
 8000a56:	f002 fd69 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000a5a:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4829      	ldr	r0, [pc, #164]	; (8000b1c <MX_GPIO_Init+0x2e4>)
 8000a78:	f002 fd58 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4820      	ldr	r0, [pc, #128]	; (8000b1c <MX_GPIO_Init+0x2e4>)
 8000a9a:	f002 fd47 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000a9e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000ab0:	2305      	movs	r3, #5
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <MX_GPIO_Init+0x2e4>)
 8000abc:	f002 fd36 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8000ac0:	2364      	movs	r3, #100	; 0x64
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000ad0:	230d      	movs	r3, #13
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4815      	ldr	r0, [pc, #84]	; (8000b30 <MX_GPIO_Init+0x2f8>)
 8000adc:	f002 fd26 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af2:	230a      	movs	r3, #10
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f002 fd14 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
 8000b16:	e00d      	b.n	8000b34 <MX_GPIO_Init+0x2fc>
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48001c00 	.word	0x48001c00
 8000b20:	48000800 	.word	0x48000800
 8000b24:	48000400 	.word	0x48000400
 8000b28:	48002000 	.word	0x48002000
 8000b2c:	48001800 	.word	0x48001800
 8000b30:	48001000 	.word	0x48001000
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4862      	ldr	r0, [pc, #392]	; (8000cc4 <MX_GPIO_Init+0x48c>)
 8000b3c:	f002 fcf6 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000b40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b46:	2312      	movs	r3, #18
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b52:	2304      	movs	r3, #4
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	485a      	ldr	r0, [pc, #360]	; (8000cc8 <MX_GPIO_Init+0x490>)
 8000b5e:	f002 fce5 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000b62:	2340      	movs	r3, #64	; 0x40
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	4853      	ldr	r0, [pc, #332]	; (8000cc4 <MX_GPIO_Init+0x48c>)
 8000b78:	f002 fcd8 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000b7c:	2384      	movs	r3, #132	; 0x84
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b8c:	2306      	movs	r3, #6
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	484b      	ldr	r0, [pc, #300]	; (8000cc4 <MX_GPIO_Init+0x48c>)
 8000b98:	f002 fcc8 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000b9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4844      	ldr	r0, [pc, #272]	; (8000ccc <MX_GPIO_Init+0x494>)
 8000bba:	f002 fcb7 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	483a      	ldr	r0, [pc, #232]	; (8000cc4 <MX_GPIO_Init+0x48c>)
 8000bda:	f002 fca7 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bde:	2320      	movs	r3, #32
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f002 fc9a 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000bf8:	2340      	movs	r3, #64	; 0x40
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f002 fc8b 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000c16:	2308      	movs	r3, #8
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c26:	2307      	movs	r3, #7
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f002 fc7a 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000c38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000c4a:	230b      	movs	r3, #11
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	481e      	ldr	r0, [pc, #120]	; (8000cd0 <MX_GPIO_Init+0x498>)
 8000c56:	f002 fc69 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c6a:	230a      	movs	r3, #10
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f002 fc58 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	480e      	ldr	r0, [pc, #56]	; (8000ccc <MX_GPIO_Init+0x494>)
 8000c94:	f002 fc4a 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000caa:	2306      	movs	r3, #6
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_GPIO_Init+0x494>)
 8000cb6:	f002 fc39 	bl	800352c <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3738      	adds	r7, #56	; 0x38
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	48000800 	.word	0x48000800
 8000cc8:	48001800 	.word	0x48001800
 8000ccc:	48000400 	.word	0x48000400
 8000cd0:	48001400 	.word	0x48001400

08000cd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d101      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ce6:	f000 fcb5 	bl	8001654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40001000 	.word	0x40001000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <SD_init>:
FRESULT res; /* FatFs function common result code */
uint32_t byteswritten, bytesread; /* File write/read counts */
uint16_t rtext[_MAX_SS];/* File read buffer */
/* USER CODE END 1 */

void SD_init(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af02      	add	r7, sp, #8
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK){
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	490d      	ldr	r1, [pc, #52]	; (8000d44 <SD_init+0x40>)
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <SD_init+0x44>)
 8000d10:	f00a fc26 	bl	800b560 <f_mount>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <SD_init+0x1c>
		Error_Handler();
 8000d1a:	f7ff ffed 	bl	8000cf8 <Error_Handler>
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		{
			Error_Handler();
		}
	}
}
 8000d1e:	e00d      	b.n	8000d3c <SD_init+0x38>
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <SD_init+0x48>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2107      	movs	r1, #7
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <SD_init+0x40>)
 8000d2e:	f00b f89d 	bl	800be6c <f_mkfs>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SD_init+0x38>
			Error_Handler();
 8000d38:	f7ff ffde 	bl	8000cf8 <Error_Handler>
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200007fc 	.word	0x200007fc
 8000d48:	20000800 	.word	0x20000800
 8000d4c:	200003a4 	.word	0x200003a4

08000d50 <SD_process>:
//
//void* is common denominator for all pointers. Temp var to be changed to use with anything else
void SD_process(char *filename, void *buffer, int length){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
			//Open file for writing (Create)
			if(f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK){
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	68f9      	ldr	r1, [r7, #12]
 8000d60:	4812      	ldr	r0, [pc, #72]	; (8000dac <SD_process+0x5c>)
 8000d62:	f00a fc61 	bl	800b628 <f_open>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <SD_process+0x22>
				Error_Handler();
 8000d6c:	f7ff ffc4 	bl	8000cf8 <Error_Handler>
					f_close(&SDFile);
				}
			}
			//create if condition to check if buffer is null/bad function calls
//	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
}
 8000d70:	e017      	b.n	8000da2 <SD_process+0x52>
				res = f_write(&SDFile, buffer, length, (void *)&byteswritten);
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <SD_process+0x60>)
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <SD_process+0x5c>)
 8000d7a:	f00a fe1a 	bl	800b9b2 <f_write>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <SD_process+0x64>)
 8000d84:	701a      	strb	r2, [r3, #0]
				if((byteswritten == 0) || (res != FR_OK)){
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <SD_process+0x60>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <SD_process+0x46>
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <SD_process+0x64>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <SD_process+0x4c>
					Error_Handler();
 8000d96:	f7ff ffaf 	bl	8000cf8 <Error_Handler>
}
 8000d9a:	e002      	b.n	8000da2 <SD_process+0x52>
					f_close(&SDFile);
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <SD_process+0x5c>)
 8000d9e:	f00b f835 	bl	800be0c <f_close>
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000a34 	.word	0x20000a34
 8000db0:	200003a0 	.word	0x200003a0
 8000db4:	2000039c 	.word	0x2000039c

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc2:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_MspInit+0x4c>)
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_MspInit+0x4c>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	6593      	str	r3, [r2, #88]	; 0x58
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_MspInit+0x4c>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	210f      	movs	r1, #15
 8000df2:	f06f 0001 	mvn.w	r0, #1
 8000df6:	f002 f8fd 	bl	8002ff4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0b2      	sub	sp, #200	; 0xc8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	229c      	movs	r2, #156	; 0x9c
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00f fb93 	bl	8010554 <memset>
  if(hadc->Instance==ADC1)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a5d      	ldr	r2, [pc, #372]	; (8000fa8 <HAL_ADC_MspInit+0x1a0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	f040 80b2 	bne.w	8000f9e <HAL_ADC_MspInit+0x196>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e50:	2308      	movs	r3, #8
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e66:	f107 0318 	add.w	r3, r7, #24
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fe20 	bl	8004ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000e76:	f7ff ff3f 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e7a:	4b4c      	ldr	r3, [pc, #304]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000e80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b49      	ldr	r3, [pc, #292]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	4b46      	ldr	r3, [pc, #280]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a45      	ldr	r2, [pc, #276]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b43      	ldr	r3, [pc, #268]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b40      	ldr	r3, [pc, #256]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a3f      	ldr	r2, [pc, #252]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b3d      	ldr	r3, [pc, #244]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a39      	ldr	r2, [pc, #228]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <HAL_ADC_MspInit+0x1a4>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000eda:	2318      	movs	r3, #24
 8000edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ee0:	230b      	movs	r3, #11
 8000ee2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	482f      	ldr	r0, [pc, #188]	; (8000fb0 <HAL_ADC_MspInit+0x1a8>)
 8000ef4:	f002 fb1a 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8000ef8:	2387      	movs	r3, #135	; 0x87
 8000efa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000efe:	230b      	movs	r3, #11
 8000f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f002 fb0a 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f1e:	230b      	movs	r3, #11
 8000f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4820      	ldr	r0, [pc, #128]	; (8000fb4 <HAL_ADC_MspInit+0x1ac>)
 8000f32:	f002 fafb 	bl	800352c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8000f36:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f38:	4a20      	ldr	r2, [pc, #128]	; (8000fbc <HAL_ADC_MspInit+0x1b4>)
 8000f3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f3e:	2205      	movs	r2, #5
 8000f40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f62:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f66:	2220      	movs	r2, #32
 8000f68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f6c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000f70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f74:	f002 f868 	bl	8003048 <HAL_DMA_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_ADC_MspInit+0x17a>
    {
      Error_Handler();
 8000f7e:	f7ff febb 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f86:	651a      	str	r2, [r3, #80]	; 0x50
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0x1b0>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2105      	movs	r1, #5
 8000f92:	2012      	movs	r0, #18
 8000f94:	f002 f82e 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000f98:	2012      	movs	r0, #18
 8000f9a:	f002 f847 	bl	800302c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	37c8      	adds	r7, #200	; 0xc8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	50040000 	.word	0x50040000
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	48000400 	.word	0x48000400
 8000fb8:	20000188 	.word	0x20000188
 8000fbc:	40020044 	.word	0x40020044

08000fc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a18      	ldr	r2, [pc, #96]	; (8001040 <HAL_CAN_MspInit+0x80>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d129      	bne.n	8001036 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_CAN_MspInit+0x84>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_CAN_MspInit+0x84>)
 8000fe8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fec:	6593      	str	r3, [r2, #88]	; 0x58
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_CAN_MspInit+0x84>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_CAN_MspInit+0x84>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a11      	ldr	r2, [pc, #68]	; (8001044 <HAL_CAN_MspInit+0x84>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_CAN_MspInit+0x84>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001012:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001024:	2309      	movs	r3, #9
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f002 fa7b 	bl	800352c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40006400 	.word	0x40006400
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0b2      	sub	sp, #200	; 0xc8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	229c      	movs	r2, #156	; 0x9c
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f00f fa73 	bl	8010554 <memset>
  if(hi2c->Instance==I2C1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a33      	ldr	r2, [pc, #204]	; (8001140 <HAL_I2C_MspInit+0xf8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d15e      	bne.n	8001136 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001078:	2340      	movs	r3, #64	; 0x40
 800107a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800107c:	2300      	movs	r3, #0
 800107e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001080:	f107 0318 	add.w	r3, r7, #24
 8001084:	4618      	mov	r0, r3
 8001086:	f003 fd13 	bl	8004ab0 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001090:	f7ff fe32 	bl	8000cf8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_I2C_MspInit+0xfc>)
 8001096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001098:	4a2a      	ldr	r2, [pc, #168]	; (8001144 <HAL_I2C_MspInit+0xfc>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <HAL_I2C_MspInit+0xfc>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <HAL_I2C_MspInit+0xfc>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	4a24      	ldr	r2, [pc, #144]	; (8001144 <HAL_I2C_MspInit+0xfc>)
 80010b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <HAL_I2C_MspInit+0xfc>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80010c4:	f002 fdde 	bl	8003c84 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 80010c8:	2340      	movs	r3, #64	; 0x40
 80010ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ce:	2312      	movs	r3, #18
 80010d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e0:	2304      	movs	r3, #4
 80010e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4816      	ldr	r0, [pc, #88]	; (8001148 <HAL_I2C_MspInit+0x100>)
 80010ee:	f002 fa1d 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 80010f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fa:	2312      	movs	r3, #18
 80010fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001100:	2301      	movs	r3, #1
 8001102:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110c:	2304      	movs	r3, #4
 800110e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <HAL_I2C_MspInit+0x104>)
 800111a:	f002 fa07 	bl	800352c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_I2C_MspInit+0xfc>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_I2C_MspInit+0xfc>)
 8001124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001128:	6593      	str	r3, [r2, #88]	; 0x58
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_I2C_MspInit+0xfc>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001136:	bf00      	nop
 8001138:	37c8      	adds	r7, #200	; 0xc8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40005400 	.word	0x40005400
 8001144:	40021000 	.word	0x40021000
 8001148:	48000400 	.word	0x48000400
 800114c:	48001800 	.word	0x48001800

08001150 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0b2      	sub	sp, #200	; 0xc8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	229c      	movs	r2, #156	; 0x9c
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f00f f9ef 	bl	8010554 <memset>
  if(hsd->Instance==SDMMC1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a37      	ldr	r2, [pc, #220]	; (8001258 <HAL_SD_MspInit+0x108>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d167      	bne.n	8001250 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001180:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001184:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fc8c 	bl	8004ab0 <HAL_RCCEx_PeriphCLKConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800119e:	f7ff fdab 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80011a2:	4b2e      	ldr	r3, [pc, #184]	; (800125c <HAL_SD_MspInit+0x10c>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <HAL_SD_MspInit+0x10c>)
 80011a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <HAL_SD_MspInit+0x10c>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <HAL_SD_MspInit+0x10c>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4a27      	ldr	r2, [pc, #156]	; (800125c <HAL_SD_MspInit+0x10c>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <HAL_SD_MspInit+0x10c>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <HAL_SD_MspInit+0x10c>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a21      	ldr	r2, [pc, #132]	; (800125c <HAL_SD_MspInit+0x10c>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <HAL_SD_MspInit+0x10c>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80011ea:	2304      	movs	r3, #4
 80011ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001202:	230c      	movs	r3, #12
 8001204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800120c:	4619      	mov	r1, r3
 800120e:	4814      	ldr	r0, [pc, #80]	; (8001260 <HAL_SD_MspInit+0x110>)
 8001210:	f002 f98c 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001214:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800122e:	230c      	movs	r3, #12
 8001230:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001238:	4619      	mov	r1, r3
 800123a:	480a      	ldr	r0, [pc, #40]	; (8001264 <HAL_SD_MspInit+0x114>)
 800123c:	f002 f976 	bl	800352c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2105      	movs	r1, #5
 8001244:	2031      	movs	r0, #49	; 0x31
 8001246:	f001 fed5 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800124a:	2031      	movs	r0, #49	; 0x31
 800124c:	f001 feee 	bl	800302c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001250:	bf00      	nop
 8001252:	37c8      	adds	r7, #200	; 0xc8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	50062400 	.word	0x50062400
 800125c:	40021000 	.word	0x40021000
 8001260:	48000c00 	.word	0x48000c00
 8001264:	48000800 	.word	0x48000800

08001268 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a25      	ldr	r2, [pc, #148]	; (800131c <HAL_SPI_MspInit+0xb4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d144      	bne.n	8001314 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800128a:	4b25      	ldr	r3, [pc, #148]	; (8001320 <HAL_SPI_MspInit+0xb8>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	4a24      	ldr	r2, [pc, #144]	; (8001320 <HAL_SPI_MspInit+0xb8>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6593      	str	r3, [r2, #88]	; 0x58
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <HAL_SPI_MspInit+0xb8>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <HAL_SPI_MspInit+0xb8>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <HAL_SPI_MspInit+0xb8>)
 80012a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <HAL_SPI_MspInit+0xb8>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_SPI_MspInit+0xb8>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a18      	ldr	r2, [pc, #96]	; (8001320 <HAL_SPI_MspInit+0xb8>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_SPI_MspInit+0xb8>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80012d2:	2301      	movs	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e2:	2305      	movs	r3, #5
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <HAL_SPI_MspInit+0xbc>)
 80012ee:	f002 f91d 	bl	800352c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80012f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001304:	2305      	movs	r3, #5
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <HAL_SPI_MspInit+0xc0>)
 8001310:	f002 f90c 	bl	800352c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40003800 	.word	0x40003800
 8001320:	40021000 	.word	0x40021000
 8001324:	48002000 	.word	0x48002000
 8001328:	48000400 	.word	0x48000400

0800132c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001340:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_FMC_MspInit+0xe0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d15d      	bne.n	8001404 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_FMC_MspInit+0xe0>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_FMC_MspInit+0xe4>)
 8001350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001352:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <HAL_FMC_MspInit+0xe4>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6513      	str	r3, [r2, #80]	; 0x50
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_FMC_MspInit+0xe4>)
 800135c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001366:	f64f 739b 	movw	r3, #65435	; 0xff9b
 800136a:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001378:	230c      	movs	r3, #12
 800137a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4619      	mov	r1, r3
 8001380:	4824      	ldr	r0, [pc, #144]	; (8001414 <HAL_FMC_MspInit+0xe8>)
 8001382:	f002 f8d3 	bl	800352c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001386:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800138a:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001398:	230c      	movs	r3, #12
 800139a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	481d      	ldr	r0, [pc, #116]	; (8001418 <HAL_FMC_MspInit+0xec>)
 80013a2:	f002 f8c3 	bl	800352c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013b6:	230c      	movs	r3, #12
 80013b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4817      	ldr	r0, [pc, #92]	; (800141c <HAL_FMC_MspInit+0xf0>)
 80013c0:	f002 f8b4 	bl	800352c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80013c4:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80013c8:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d6:	230c      	movs	r3, #12
 80013d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	4810      	ldr	r0, [pc, #64]	; (8001420 <HAL_FMC_MspInit+0xf4>)
 80013e0:	f002 f8a4 	bl	800352c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80013e4:	233f      	movs	r3, #63	; 0x3f
 80013e6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f4:	230c      	movs	r3, #12
 80013f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4809      	ldr	r0, [pc, #36]	; (8001424 <HAL_FMC_MspInit+0xf8>)
 80013fe:	f002 f895 	bl	800352c <HAL_GPIO_Init>
 8001402:	e000      	b.n	8001406 <HAL_FMC_MspInit+0xda>
    return;
 8001404:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200007a4 	.word	0x200007a4
 8001410:	40021000 	.word	0x40021000
 8001414:	48001000 	.word	0x48001000
 8001418:	48000c00 	.word	0x48000c00
 800141c:	48000400 	.word	0x48000400
 8001420:	48001400 	.word	0x48001400
 8001424:	48001800 	.word	0x48001800

08001428 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001430:	f7ff ff7c 	bl	800132c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	; 0x38
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <HAL_InitTick+0xe0>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	4a33      	ldr	r2, [pc, #204]	; (800151c <HAL_InitTick+0xe0>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	6593      	str	r3, [r2, #88]	; 0x58
 8001456:	4b31      	ldr	r3, [pc, #196]	; (800151c <HAL_InitTick+0xe0>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001462:	f107 0210 	add.w	r2, r7, #16
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fa2f 	bl	80048d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800147c:	f003 f9fc 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8001480:	6378      	str	r0, [r7, #52]	; 0x34
 8001482:	e004      	b.n	800148e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001484:	f003 f9f8 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8001488:	4603      	mov	r3, r0
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800148e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001490:	4a23      	ldr	r2, [pc, #140]	; (8001520 <HAL_InitTick+0xe4>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0c9b      	lsrs	r3, r3, #18
 8001498:	3b01      	subs	r3, #1
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <HAL_InitTick+0xe8>)
 800149e:	4a22      	ldr	r2, [pc, #136]	; (8001528 <HAL_InitTick+0xec>)
 80014a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <HAL_InitTick+0xe8>)
 80014a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <HAL_InitTick+0xe8>)
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_InitTick+0xe8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_InitTick+0xe8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_InitTick+0xe8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014c2:	4818      	ldr	r0, [pc, #96]	; (8001524 <HAL_InitTick+0xe8>)
 80014c4:	f006 fe7e 	bl	80081c4 <HAL_TIM_Base_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d11b      	bne.n	800150e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014d6:	4813      	ldr	r0, [pc, #76]	; (8001524 <HAL_InitTick+0xe8>)
 80014d8:	f006 fed6 	bl	8008288 <HAL_TIM_Base_Start_IT>
 80014dc:	4603      	mov	r3, r0
 80014de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d111      	bne.n	800150e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014ea:	2036      	movs	r0, #54	; 0x36
 80014ec:	f001 fd9e 	bl	800302c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	d808      	bhi.n	8001508 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014f6:	2200      	movs	r2, #0
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	2036      	movs	r0, #54	; 0x36
 80014fc:	f001 fd7a 	bl	8002ff4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_InitTick+0xf0>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e002      	b.n	800150e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800150e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001512:	4618      	mov	r0, r3
 8001514:	3738      	adds	r7, #56	; 0x38
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	431bde83 	.word	0x431bde83
 8001524:	200007a8 	.word	0x200007a8
 8001528:	40001000 	.word	0x40001000
 800152c:	20000014 	.word	0x20000014

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <DMA1_Channel4_IRQHandler+0x10>)
 8001562:	f001 fe94 	bl	800328e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000188 	.word	0x20000188

08001570 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <ADC1_IRQHandler+0x10>)
 8001576:	f000 fc6f 	bl	8001e58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000120 	.word	0x20000120

08001584 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <SDMMC1_IRQHandler+0x10>)
 800158a:	f005 fab3 	bl	8006af4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000264 	.word	0x20000264

08001598 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <TIM6_DAC_IRQHandler+0x10>)
 800159e:	f006 fee3 	bl	8008368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200007a8 	.word	0x200007a8

080015ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <SystemInit+0x20>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <SystemInit+0x20>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001608 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d4:	f7ff ffea 	bl	80015ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <LoopForever+0x6>)
  ldr r1, =_edata
 80015da:	490d      	ldr	r1, [pc, #52]	; (8001610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <LoopForever+0xe>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f0:	4c0a      	ldr	r4, [pc, #40]	; (800161c <LoopForever+0x16>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015fe:	f00e ff75 	bl	80104ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001602:	f7fe fea9 	bl	8000358 <main>

08001606 <LoopForever>:

LoopForever:
    b LoopForever
 8001606:	e7fe      	b.n	8001606 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001608:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001614:	08010938 	.word	0x08010938
  ldr r2, =_sbss
 8001618:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800161c:	2000266c 	.word	0x2000266c

08001620 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <CAN1_RX0_IRQHandler>

08001622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f001 fcd6 	bl	8002fde <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001632:	200f      	movs	r0, #15
 8001634:	f7ff ff02 	bl	800143c <HAL_InitTick>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	e001      	b.n	8001648 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001644:	f7ff fbb8 	bl	8000db8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001648:	79fb      	ldrb	r3, [r7, #7]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000018 	.word	0x20000018
 8001678:	200007f4 	.word	0x200007f4

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200007f4 	.word	0x200007f4

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000018 	.word	0x20000018

080016dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3360      	adds	r3, #96	; 0x60
 8001756:	461a      	mov	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <LL_ADC_SetOffset+0x44>)
 8001766:	4013      	ands	r3, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	4313      	orrs	r3, r2
 8001774:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800177c:	bf00      	nop
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	03fff000 	.word	0x03fff000

0800178c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3360      	adds	r3, #96	; 0x60
 800179a:	461a      	mov	r2, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3360      	adds	r3, #96	; 0x60
 80017c8:	461a      	mov	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	431a      	orrs	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017e2:	bf00      	nop
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	615a      	str	r2, [r3, #20]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800183a:	b480      	push	{r7}
 800183c:	b087      	sub	sp, #28
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3330      	adds	r3, #48	; 0x30
 800184a:	461a      	mov	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	4413      	add	r3, r2
 8001858:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	211f      	movs	r1, #31
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	401a      	ands	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0e9b      	lsrs	r3, r3, #26
 8001872:	f003 011f 	and.w	r1, r3, #31
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	431a      	orrs	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3314      	adds	r3, #20
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	0e5b      	lsrs	r3, r3, #25
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	0d1b      	lsrs	r3, r3, #20
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	2107      	movs	r1, #7
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	401a      	ands	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	0d1b      	lsrs	r3, r3, #20
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	431a      	orrs	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001902:	bf00      	nop
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	43db      	mvns	r3, r3
 800192a:	401a      	ands	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0318 	and.w	r3, r3, #24
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001934:	40d9      	lsrs	r1, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	400b      	ands	r3, r1
 800193a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193e:	431a      	orrs	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	0007ffff 	.word	0x0007ffff

08001958 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6093      	str	r3, [r2, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800198c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001990:	d101      	bne.n	8001996 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019e0:	d101      	bne.n	80019e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <LL_ADC_IsEnabled+0x18>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <LL_ADC_IsEnabled+0x1a>
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a56:	f043 0204 	orr.w	r2, r3, #4
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d101      	bne.n	8001a82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d101      	bne.n	8001aa8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e12f      	b.n	8001d32 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff f991 	bl	8000e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff3f 	bl	800197c <LL_ADC_IsDeepPowerDownEnabled>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff25 	bl	8001958 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff5a 	bl	80019cc <LL_ADC_IsInternalRegulatorEnabled>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d115      	bne.n	8001b4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff3e 	bl	80019a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b28:	4b84      	ldr	r3, [pc, #528]	; (8001d3c <HAL_ADC_Init+0x284>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	4a84      	ldr	r2, [pc, #528]	; (8001d40 <HAL_ADC_Init+0x288>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	3301      	adds	r3, #1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f9      	bne.n	8001b3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff3c 	bl	80019cc <LL_ADC_IsInternalRegulatorEnabled>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	f043 0210 	orr.w	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff75 	bl	8001a6a <LL_ADC_REG_IsConversionOngoing>
 8001b80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 80c8 	bne.w	8001d20 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 80c4 	bne.w	8001d20 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ba0:	f043 0202 	orr.w	r2, r3, #2
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff35 	bl	8001a1c <LL_ADC_IsEnabled>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bb8:	4862      	ldr	r0, [pc, #392]	; (8001d44 <HAL_ADC_Init+0x28c>)
 8001bba:	f7ff ff2f 	bl	8001a1c <LL_ADC_IsEnabled>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	485f      	ldr	r0, [pc, #380]	; (8001d48 <HAL_ADC_Init+0x290>)
 8001bcc:	f7ff fd86 	bl	80016dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7e5b      	ldrb	r3, [r3, #25]
 8001bd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001be0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001be6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d106      	bne.n	8001c0c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	3b01      	subs	r3, #1
 8001c04:	045b      	lsls	r3, r3, #17
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_ADC_Init+0x294>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	69b9      	ldr	r1, [r7, #24]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff12 	bl	8001a6a <LL_ADC_REG_IsConversionOngoing>
 8001c46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff1f 	bl	8001a90 <LL_ADC_INJ_IsConversionOngoing>
 8001c52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d140      	bne.n	8001cdc <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d13d      	bne.n	8001cdc <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7e1b      	ldrb	r3, [r3, #24]
 8001c68:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c6a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c72:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c82:	f023 0306 	bic.w	r3, r3, #6
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d118      	bne.n	8001ccc <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	611a      	str	r2, [r3, #16]
 8001cca:	e007      	b.n	8001cdc <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d10c      	bne.n	8001cfe <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f023 010f 	bic.w	r1, r3, #15
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	1e5a      	subs	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfc:	e007      	b.n	8001d0e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 020f 	bic.w	r2, r2, #15
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	f043 0201 	orr.w	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	659a      	str	r2, [r3, #88]	; 0x58
 8001d1e:	e007      	b.n	8001d30 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	f043 0210 	orr.w	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d30:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000010 	.word	0x20000010
 8001d40:	053e2d63 	.word	0x053e2d63
 8001d44:	50040000 	.word	0x50040000
 8001d48:	50040300 	.word	0x50040300
 8001d4c:	fff0c007 	.word	0xfff0c007

08001d50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fe82 	bl	8001a6a <LL_ADC_REG_IsConversionOngoing>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d167      	bne.n	8001e3c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_Start_DMA+0x2a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e063      	b.n	8001e42 <HAL_ADC_Start_DMA+0xf2>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fe36 	bl	80029f4 <ADC_Enable>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d14f      	bne.n	8001e32 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	f023 0206 	bic.w	r2, r3, #6
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dbe:	e002      	b.n	8001dc6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dca:	4a20      	ldr	r2, [pc, #128]	; (8001e4c <HAL_ADC_Start_DMA+0xfc>)
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd2:	4a1f      	ldr	r2, [pc, #124]	; (8001e50 <HAL_ADC_Start_DMA+0x100>)
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dda:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <HAL_ADC_Start_DMA+0x104>)
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	221c      	movs	r2, #28
 8001de4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0210 	orr.w	r2, r2, #16
 8001dfc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 0201 	orr.w	r2, r2, #1
 8001e0c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3340      	adds	r3, #64	; 0x40
 8001e18:	4619      	mov	r1, r3
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f001 f9bb 	bl	8003198 <HAL_DMA_Start_IT>
 8001e22:	4603      	mov	r3, r0
 8001e24:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fe09 	bl	8001a42 <LL_ADC_REG_StartConversion>
 8001e30:	e006      	b.n	8001e40 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001e3a:	e001      	b.n	8001e40 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	08002b01 	.word	0x08002b01
 8001e50:	08002bd9 	.word	0x08002bd9
 8001e54:	08002bf5 	.word	0x08002bf5

08001e58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d017      	beq.n	8001eae <HAL_ADC_IRQHandler+0x56>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d012      	beq.n	8001eae <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fee9 	bl	8002c78 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d004      	beq.n	8001ec2 <HAL_ADC_IRQHandler+0x6a>
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d05e      	beq.n	8001f8a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d059      	beq.n	8001f8a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fc8e 	bl	8001814 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d03e      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d135      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d12e      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fda1 	bl	8001a6a <LL_ADC_REG_IsConversionOngoing>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d11a      	bne.n	8001f64 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 020c 	bic.w	r2, r2, #12
 8001f3c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d112      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	659a      	str	r2, [r3, #88]	; 0x58
 8001f62:	e00b      	b.n	8001f7c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f043 0210 	orr.w	r2, r3, #16
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	f043 0201 	orr.w	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7fe f95d 	bl	800023c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	220c      	movs	r2, #12
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x146>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d072      	beq.n	800208e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d06d      	beq.n	800208e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fc5f 	bl	8001892 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001fd4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fc1a 	bl	8001814 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fe0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d047      	beq.n	8002080 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_ADC_IRQHandler+0x1b2>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d03f      	beq.n	8002080 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002006:	2b00      	cmp	r3, #0
 8002008:	d13a      	bne.n	8002080 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002014:	2b40      	cmp	r3, #64	; 0x40
 8002016:	d133      	bne.n	8002080 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d12e      	bne.n	8002080 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fd32 	bl	8001a90 <LL_ADC_INJ_IsConversionOngoing>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d11a      	bne.n	8002068 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002040:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d112      	bne.n	8002080 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	659a      	str	r2, [r3, #88]	; 0x58
 8002066:	e00b      	b.n	8002080 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	f043 0210 	orr.w	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fdd1 	bl	8002c28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2260      	movs	r2, #96	; 0x60
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b00      	cmp	r3, #0
 8002096:	d011      	beq.n	80020bc <HAL_ADC_IRQHandler+0x264>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00c      	beq.n	80020bc <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f890 	bl	80021d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d012      	beq.n	80020ec <HAL_ADC_IRQHandler+0x294>
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00d      	beq.n	80020ec <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fdb7 	bl	8002c50 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d012      	beq.n	800211c <HAL_ADC_IRQHandler+0x2c4>
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fda9 	bl	8002c64 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d02a      	beq.n	800217c <HAL_ADC_IRQHandler+0x324>
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	d025      	beq.n	800217c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002138:	2301      	movs	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	e008      	b.n	8002150 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800214c:	2301      	movs	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10e      	bne.n	8002174 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	f043 0202 	orr.w	r2, r3, #2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f83a 	bl	80021e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2210      	movs	r2, #16
 800217a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002182:	2b00      	cmp	r3, #0
 8002184:	d018      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x360>
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	f043 0208 	orr.w	r2, r3, #8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021b0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fd42 	bl	8002c3c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80021b8:	bf00      	nop
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b0b6      	sub	sp, #216	; 0xd8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x22>
 800221a:	2302      	movs	r3, #2
 800221c:	e3d5      	b.n	80029ca <HAL_ADC_ConfigChannel+0x7ce>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fc1d 	bl	8001a6a <LL_ADC_REG_IsConversionOngoing>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 83ba 	bne.w	80029ac <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b05      	cmp	r3, #5
 800223e:	d824      	bhi.n	800228a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	3b02      	subs	r3, #2
 8002246:	2b03      	cmp	r3, #3
 8002248:	d81b      	bhi.n	8002282 <HAL_ADC_ConfigChannel+0x86>
 800224a:	a201      	add	r2, pc, #4	; (adr r2, 8002250 <HAL_ADC_ConfigChannel+0x54>)
 800224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002250:	08002261 	.word	0x08002261
 8002254:	08002269 	.word	0x08002269
 8002258:	08002271 	.word	0x08002271
 800225c:	08002279 	.word	0x08002279
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	220c      	movs	r2, #12
 8002264:	605a      	str	r2, [r3, #4]
          break;
 8002266:	e011      	b.n	800228c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2212      	movs	r2, #18
 800226c:	605a      	str	r2, [r3, #4]
          break;
 800226e:	e00d      	b.n	800228c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2218      	movs	r2, #24
 8002274:	605a      	str	r2, [r3, #4]
          break;
 8002276:	e009      	b.n	800228c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800227e:	605a      	str	r2, [r3, #4]
          break;
 8002280:	e004      	b.n	800228c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2206      	movs	r2, #6
 8002286:	605a      	str	r2, [r3, #4]
          break;
 8002288:	e000      	b.n	800228c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800228a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	f7ff face 	bl	800183a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fbe1 	bl	8001a6a <LL_ADC_REG_IsConversionOngoing>
 80022a8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fbed 	bl	8001a90 <LL_ADC_INJ_IsConversionOngoing>
 80022b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 81c1 	bne.w	8002646 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 81bc 	bne.w	8002646 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022d6:	d10f      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2200      	movs	r2, #0
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7ff fae8 	bl	80018b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fa7c 	bl	80017ee <LL_ADC_SetSamplingTimeCommonConfig>
 80022f6:	e00e      	b.n	8002316 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6819      	ldr	r1, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	461a      	mov	r2, r3
 8002306:	f7ff fad7 	bl	80018b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fa6c 	bl	80017ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d00a      	beq.n	800234e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	6919      	ldr	r1, [r3, #16]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002348:	f7ff f9fc 	bl	8001744 <LL_ADC_SetOffset>
 800234c:	e17b      	b.n	8002646 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fa19 	bl	800178c <LL_ADC_GetOffsetChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <HAL_ADC_ConfigChannel+0x17e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fa0e 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	0e9b      	lsrs	r3, r3, #26
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	e01e      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x1bc>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fa03 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002398:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800239c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e004      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80023ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x1d4>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0e9b      	lsrs	r3, r3, #26
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	e018      	b.n	8002402 <HAL_ADC_ConfigChannel+0x206>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80023f4:	2320      	movs	r3, #32
 80023f6:	e004      	b.n	8002402 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80023f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002402:	429a      	cmp	r2, r3
 8002404:	d106      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff f9d2 	bl	80017b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff f9b6 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10a      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x244>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2101      	movs	r1, #1
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f9ab 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	0e9b      	lsrs	r3, r3, #26
 800243a:	f003 021f 	and.w	r2, r3, #31
 800243e:	e01e      	b.n	800247e <HAL_ADC_ConfigChannel+0x282>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2101      	movs	r1, #1
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f9a0 	bl	800178c <LL_ADC_GetOffsetChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800245e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800246e:	2320      	movs	r3, #32
 8002470:	e004      	b.n	800247c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x29a>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	e018      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x2cc>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80024ba:	2320      	movs	r3, #32
 80024bc:	e004      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80024be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2200      	movs	r2, #0
 80024d2:	2101      	movs	r1, #1
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff f96f 	bl	80017b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2102      	movs	r1, #2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff f953 	bl	800178c <LL_ADC_GetOffsetChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x30a>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2102      	movs	r1, #2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff f948 	bl	800178c <LL_ADC_GetOffsetChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	0e9b      	lsrs	r3, r3, #26
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	e01e      	b.n	8002544 <HAL_ADC_ConfigChannel+0x348>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2102      	movs	r1, #2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f93d 	bl	800178c <LL_ADC_GetOffsetChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002528:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800252c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002534:	2320      	movs	r3, #32
 8002536:	e004      	b.n	8002542 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002538:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_ADC_ConfigChannel+0x360>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	e016      	b.n	800258a <HAL_ADC_ConfigChannel+0x38e>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800256e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800257c:	2320      	movs	r3, #32
 800257e:	e004      	b.n	800258a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800258a:	429a      	cmp	r2, r3
 800258c:	d106      	bne.n	800259c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	2102      	movs	r1, #2
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff f90e 	bl	80017b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2103      	movs	r1, #3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f8f2 	bl	800178c <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10a      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x3cc>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2103      	movs	r1, #3
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff f8e7 	bl	800178c <LL_ADC_GetOffsetChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	f003 021f 	and.w	r2, r3, #31
 80025c6:	e017      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x3fc>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2103      	movs	r1, #3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f8dc 	bl	800178c <LL_ADC_GetOffsetChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e003      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80025ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x414>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	e011      	b.n	8002634 <HAL_ADC_ConfigChannel+0x438>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800261e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002620:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e003      	b.n	8002634 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800262c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002634:	429a      	cmp	r2, r3
 8002636:	d106      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2200      	movs	r2, #0
 800263e:	2103      	movs	r1, #3
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff f8b9 	bl	80017b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f9e6 	bl	8001a1c <LL_ADC_IsEnabled>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	f040 8140 	bne.w	80028d8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6819      	ldr	r1, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	461a      	mov	r2, r3
 8002666:	f7ff f953 	bl	8001910 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	4a8f      	ldr	r2, [pc, #572]	; (80028ac <HAL_ADC_ConfigChannel+0x6b0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	f040 8131 	bne.w	80028d8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10b      	bne.n	800269e <HAL_ADC_ConfigChannel+0x4a2>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	3301      	adds	r3, #1
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	2b09      	cmp	r3, #9
 8002694:	bf94      	ite	ls
 8002696:	2301      	movls	r3, #1
 8002698:	2300      	movhi	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	e019      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x4d6>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ae:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e003      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80026ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2b09      	cmp	r3, #9
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d079      	beq.n	80027ca <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d107      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x4f6>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0e9b      	lsrs	r3, r3, #26
 80026e8:	3301      	adds	r3, #1
 80026ea:	069b      	lsls	r3, r3, #26
 80026ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f0:	e015      	b.n	800271e <HAL_ADC_ConfigChannel+0x522>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002702:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800270a:	2320      	movs	r3, #32
 800270c:	e003      	b.n	8002716 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	3301      	adds	r3, #1
 8002718:	069b      	lsls	r3, r3, #26
 800271a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_ADC_ConfigChannel+0x542>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	3301      	adds	r3, #1
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	e017      	b.n	800276e <HAL_ADC_ConfigChannel+0x572>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800274c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800274e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002756:	2320      	movs	r3, #32
 8002758:	e003      	b.n	8002762 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800275a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3301      	adds	r3, #1
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2101      	movs	r1, #1
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	ea42 0103 	orr.w	r1, r2, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x598>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	0e9b      	lsrs	r3, r3, #26
 8002784:	3301      	adds	r3, #1
 8002786:	f003 021f 	and.w	r2, r3, #31
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	051b      	lsls	r3, r3, #20
 8002792:	e018      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x5ca>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e003      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80027b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	3301      	adds	r3, #1
 80027ba:	f003 021f 	and.w	r2, r3, #31
 80027be:	4613      	mov	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4413      	add	r3, r2
 80027c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c6:	430b      	orrs	r3, r1
 80027c8:	e081      	b.n	80028ce <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d107      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x5ea>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0e9b      	lsrs	r3, r3, #26
 80027dc:	3301      	adds	r3, #1
 80027de:	069b      	lsls	r3, r3, #26
 80027e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027e4:	e015      	b.n	8002812 <HAL_ADC_ConfigChannel+0x616>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80027fe:	2320      	movs	r3, #32
 8002800:	e003      	b.n	800280a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	3301      	adds	r3, #1
 800280c:	069b      	lsls	r3, r3, #26
 800280e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x636>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	0e9b      	lsrs	r3, r3, #26
 8002824:	3301      	adds	r3, #1
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	e017      	b.n	8002862 <HAL_ADC_ConfigChannel+0x666>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	61fb      	str	r3, [r7, #28]
  return result;
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800284a:	2320      	movs	r3, #32
 800284c:	e003      	b.n	8002856 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	ea42 0103 	orr.w	r1, r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10d      	bne.n	800288e <HAL_ADC_ConfigChannel+0x692>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0e9b      	lsrs	r3, r3, #26
 8002878:	3301      	adds	r3, #1
 800287a:	f003 021f 	and.w	r2, r3, #31
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	3b1e      	subs	r3, #30
 8002886:	051b      	lsls	r3, r3, #20
 8002888:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800288c:	e01e      	b.n	80028cc <HAL_ADC_ConfigChannel+0x6d0>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	613b      	str	r3, [r7, #16]
  return result;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d104      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80028a6:	2320      	movs	r3, #32
 80028a8:	e006      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x6bc>
 80028aa:	bf00      	nop
 80028ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f003 021f 	and.w	r2, r3, #31
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	3b1e      	subs	r3, #30
 80028c6:	051b      	lsls	r3, r3, #20
 80028c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028cc:	430b      	orrs	r3, r1
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	6892      	ldr	r2, [r2, #8]
 80028d2:	4619      	mov	r1, r3
 80028d4:	f7fe fff0 	bl	80018b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_ADC_ConfigChannel+0x7d8>)
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d06c      	beq.n	80029be <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028e4:	483c      	ldr	r0, [pc, #240]	; (80029d8 <HAL_ADC_ConfigChannel+0x7dc>)
 80028e6:	f7fe ff1f 	bl	8001728 <LL_ADC_GetCommonPathInternalCh>
 80028ea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a3a      	ldr	r2, [pc, #232]	; (80029dc <HAL_ADC_ConfigChannel+0x7e0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d127      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d121      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a35      	ldr	r2, [pc, #212]	; (80029e0 <HAL_ADC_ConfigChannel+0x7e4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d157      	bne.n	80029be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800290e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002912:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002916:	4619      	mov	r1, r3
 8002918:	482f      	ldr	r0, [pc, #188]	; (80029d8 <HAL_ADC_ConfigChannel+0x7dc>)
 800291a:	f7fe fef2 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800291e:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <HAL_ADC_ConfigChannel+0x7e8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <HAL_ADC_ConfigChannel+0x7ec>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002938:	e002      	b.n	8002940 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3b01      	subs	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f9      	bne.n	800293a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002946:	e03a      	b.n	80029be <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a27      	ldr	r2, [pc, #156]	; (80029ec <HAL_ADC_ConfigChannel+0x7f0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d113      	bne.n	800297a <HAL_ADC_ConfigChannel+0x77e>
 8002952:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10d      	bne.n	800297a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d12a      	bne.n	80029be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800296c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002970:	4619      	mov	r1, r3
 8002972:	4819      	ldr	r0, [pc, #100]	; (80029d8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002974:	f7fe fec5 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002978:	e021      	b.n	80029be <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d11c      	bne.n	80029be <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d116      	bne.n	80029be <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d111      	bne.n	80029be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800299a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029a2:	4619      	mov	r1, r3
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <HAL_ADC_ConfigChannel+0x7dc>)
 80029a6:	f7fe feac 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
 80029aa:	e008      	b.n	80029be <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80029c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	37d8      	adds	r7, #216	; 0xd8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	80080000 	.word	0x80080000
 80029d8:	50040300 	.word	0x50040300
 80029dc:	c7520000 	.word	0xc7520000
 80029e0:	50040000 	.word	0x50040000
 80029e4:	20000010 	.word	0x20000010
 80029e8:	053e2d63 	.word	0x053e2d63
 80029ec:	cb840000 	.word	0xcb840000
 80029f0:	80000001 	.word	0x80000001

080029f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff f809 	bl	8001a1c <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d169      	bne.n	8002ae4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <ADC_Enable+0xfc>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	f043 0210 	orr.w	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e055      	b.n	8002ae6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe ffd8 	bl	80019f4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a44:	482b      	ldr	r0, [pc, #172]	; (8002af4 <ADC_Enable+0x100>)
 8002a46:	f7fe fe6f 	bl	8001728 <LL_ADC_GetCommonPathInternalCh>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a54:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <ADC_Enable+0x104>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	4a28      	ldr	r2, [pc, #160]	; (8002afc <ADC_Enable+0x108>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a6e:	e002      	b.n	8002a76 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f9      	bne.n	8002a70 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fdfe 	bl	800167c <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a82:	e028      	b.n	8002ad6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe ffc7 	bl	8001a1c <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d104      	bne.n	8002a9e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe ffab 	bl	80019f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a9e:	f7fe fded 	bl	800167c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d914      	bls.n	8002ad6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d00d      	beq.n	8002ad6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	f043 0210 	orr.w	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e007      	b.n	8002ae6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d1cf      	bne.n	8002a84 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	8000003f 	.word	0x8000003f
 8002af4:	50040300 	.word	0x50040300
 8002af8:	20000010 	.word	0x20000010
 8002afc:	053e2d63 	.word	0x053e2d63

08002b00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d14b      	bne.n	8002bb2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d021      	beq.n	8002b78 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fe6b 	bl	8001814 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d032      	beq.n	8002baa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d12b      	bne.n	8002baa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d11f      	bne.n	8002baa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	659a      	str	r2, [r3, #88]	; 0x58
 8002b76:	e018      	b.n	8002baa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d111      	bne.n	8002baa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7fd fb46 	bl	800023c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bb0:	e00e      	b.n	8002bd0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff fb12 	bl	80021e8 <HAL_ADC_ErrorCallback>
}
 8002bc4:	e004      	b.n	8002bd0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	4798      	blx	r3
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff faea 	bl	80021c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	f043 0204 	orr.w	r2, r3, #4
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff fae4 	bl	80021e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0ed      	b.n	8002e7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe f988 	bl	8000fc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc0:	f7fe fcdc 	bl	800167c <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cc6:	e012      	b.n	8002cee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cc8:	f7fe fcd8 	bl	800167c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b0a      	cmp	r3, #10
 8002cd4:	d90b      	bls.n	8002cee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2205      	movs	r2, #5
 8002ce6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0c5      	b.n	8002e7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0e5      	beq.n	8002cc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0202 	bic.w	r2, r2, #2
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d0c:	f7fe fcb6 	bl	800167c <HAL_GetTick>
 8002d10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d12:	e012      	b.n	8002d3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d14:	f7fe fcb2 	bl	800167c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b0a      	cmp	r3, #10
 8002d20:	d90b      	bls.n	8002d3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2205      	movs	r2, #5
 8002d32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e09f      	b.n	8002e7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e5      	bne.n	8002d14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7e1b      	ldrb	r3, [r3, #24]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d108      	bne.n	8002d62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e007      	b.n	8002d72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7e5b      	ldrb	r3, [r3, #25]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d108      	bne.n	8002d8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e007      	b.n	8002d9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e9b      	ldrb	r3, [r3, #26]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d108      	bne.n	8002db6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0220 	orr.w	r2, r2, #32
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e007      	b.n	8002dc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0220 	bic.w	r2, r2, #32
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7edb      	ldrb	r3, [r3, #27]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d108      	bne.n	8002de0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0210 	bic.w	r2, r2, #16
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e007      	b.n	8002df0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0210 	orr.w	r2, r2, #16
 8002dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7f1b      	ldrb	r3, [r3, #28]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d108      	bne.n	8002e0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0208 	orr.w	r2, r2, #8
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e007      	b.n	8002e1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0208 	bic.w	r2, r2, #8
 8002e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	7f5b      	ldrb	r3, [r3, #29]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d108      	bne.n	8002e34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0204 	orr.w	r2, r2, #4
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e007      	b.n	8002e44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0204 	bic.w	r2, r2, #4
 8002e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	ea42 0103 	orr.w	r1, r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	1e5a      	subs	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0307 	and.w	r3, r3, #7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	db0b      	blt.n	8002f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	4907      	ldr	r1, [pc, #28]	; (8002f20 <__NVIC_EnableIRQ+0x38>)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2001      	movs	r0, #1
 8002f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000e100 	.word	0xe000e100

08002f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	6039      	str	r1, [r7, #0]
 8002f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	db0a      	blt.n	8002f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	490c      	ldr	r1, [pc, #48]	; (8002f70 <__NVIC_SetPriority+0x4c>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	440b      	add	r3, r1
 8002f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f4c:	e00a      	b.n	8002f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4908      	ldr	r1, [pc, #32]	; (8002f74 <__NVIC_SetPriority+0x50>)
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3b04      	subs	r3, #4
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	440b      	add	r3, r1
 8002f62:	761a      	strb	r2, [r3, #24]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000e100 	.word	0xe000e100
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f1c3 0307 	rsb	r3, r3, #7
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	bf28      	it	cs
 8002f96:	2304      	movcs	r3, #4
 8002f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d902      	bls.n	8002fa8 <NVIC_EncodePriority+0x30>
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3b03      	subs	r3, #3
 8002fa6:	e000      	b.n	8002faa <NVIC_EncodePriority+0x32>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	401a      	ands	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43d9      	mvns	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	4313      	orrs	r3, r2
         );
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff ff4c 	bl	8002e84 <__NVIC_SetPriorityGrouping>
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003006:	f7ff ff61 	bl	8002ecc <__NVIC_GetPriorityGrouping>
 800300a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	6978      	ldr	r0, [r7, #20]
 8003012:	f7ff ffb1 	bl	8002f78 <NVIC_EncodePriority>
 8003016:	4602      	mov	r2, r0
 8003018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff80 	bl	8002f24 <__NVIC_SetPriority>
}
 8003024:	bf00      	nop
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff54 	bl	8002ee8 <__NVIC_EnableIRQ>
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e08d      	b.n	8003176 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_DMA_Init+0x138>)
 8003062:	429a      	cmp	r2, r3
 8003064:	d80f      	bhi.n	8003086 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	4b45      	ldr	r3, [pc, #276]	; (8003184 <HAL_DMA_Init+0x13c>)
 800306e:	4413      	add	r3, r2
 8003070:	4a45      	ldr	r2, [pc, #276]	; (8003188 <HAL_DMA_Init+0x140>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	009a      	lsls	r2, r3, #2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a42      	ldr	r2, [pc, #264]	; (800318c <HAL_DMA_Init+0x144>)
 8003082:	641a      	str	r2, [r3, #64]	; 0x40
 8003084:	e00e      	b.n	80030a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	4b40      	ldr	r3, [pc, #256]	; (8003190 <HAL_DMA_Init+0x148>)
 800308e:	4413      	add	r3, r2
 8003090:	4a3d      	ldr	r2, [pc, #244]	; (8003188 <HAL_DMA_Init+0x140>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	091b      	lsrs	r3, r3, #4
 8003098:	009a      	lsls	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a3c      	ldr	r2, [pc, #240]	; (8003194 <HAL_DMA_Init+0x14c>)
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f9b6 	bl	8003468 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003104:	d102      	bne.n	800310c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003120:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <HAL_DMA_Init+0x104>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b04      	cmp	r3, #4
 8003130:	d80c      	bhi.n	800314c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9d6 	bl	80034e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	e008      	b.n	800315e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40020407 	.word	0x40020407
 8003184:	bffdfff8 	.word	0xbffdfff8
 8003188:	cccccccd 	.word	0xcccccccd
 800318c:	40020000 	.word	0x40020000
 8003190:	bffdfbf8 	.word	0xbffdfbf8
 8003194:	40020400 	.word	0x40020400

08003198 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_DMA_Start_IT+0x20>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e066      	b.n	8003286 <HAL_DMA_Start_IT+0xee>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d155      	bne.n	8003278 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0201 	bic.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f8fb 	bl	80033ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 020e 	orr.w	r2, r2, #14
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e00f      	b.n	8003230 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0204 	bic.w	r2, r2, #4
 800321e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 020a 	orr.w	r2, r2, #10
 800322e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003264:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e005      	b.n	8003284 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003280:	2302      	movs	r3, #2
 8003282:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003284:	7dfb      	ldrb	r3, [r7, #23]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	f003 031c 	and.w	r3, r3, #28
 80032ae:	2204      	movs	r2, #4
 80032b0:	409a      	lsls	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d026      	beq.n	8003308 <HAL_DMA_IRQHandler+0x7a>
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d021      	beq.n	8003308 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d107      	bne.n	80032e2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0204 	bic.w	r2, r2, #4
 80032e0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f003 021c 	and.w	r2, r3, #28
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2104      	movs	r1, #4
 80032f0:	fa01 f202 	lsl.w	r2, r1, r2
 80032f4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d071      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003306:	e06c      	b.n	80033e2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f003 031c 	and.w	r3, r3, #28
 8003310:	2202      	movs	r2, #2
 8003312:	409a      	lsls	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d02e      	beq.n	800337a <HAL_DMA_IRQHandler+0xec>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d029      	beq.n	800337a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 020a 	bic.w	r2, r2, #10
 8003342:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	f003 021c 	and.w	r2, r3, #28
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	2102      	movs	r1, #2
 800335a:	fa01 f202 	lsl.w	r2, r1, r2
 800335e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d038      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003378:	e033      	b.n	80033e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f003 031c 	and.w	r3, r3, #28
 8003382:	2208      	movs	r2, #8
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02a      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x156>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d025      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 020e 	bic.w	r2, r2, #14
 80033a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	f003 021c 	and.w	r2, r3, #28
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	2101      	movs	r1, #1
 80033b6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033e2:	bf00      	nop
 80033e4:	bf00      	nop
}
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003402:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003414:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	f003 021c 	and.w	r2, r3, #28
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	2101      	movs	r1, #1
 8003424:	fa01 f202 	lsl.w	r2, r1, r2
 8003428:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b10      	cmp	r3, #16
 8003438:	d108      	bne.n	800344c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800344a:	e007      	b.n	800345c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	60da      	str	r2, [r3, #12]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003478:	429a      	cmp	r2, r3
 800347a:	d80a      	bhi.n	8003492 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003488:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6493      	str	r3, [r2, #72]	; 0x48
 8003490:	e007      	b.n	80034a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	009a      	lsls	r2, r3, #2
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800349c:	4413      	add	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	3b08      	subs	r3, #8
 80034aa:	4a0c      	ldr	r2, [pc, #48]	; (80034dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80034b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40020407 	.word	0x40020407
 80034d8:	4002081c 	.word	0x4002081c
 80034dc:	cccccccd 	.word	0xcccccccd
 80034e0:	40020880 	.word	0x40020880

080034e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	461a      	mov	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a08      	ldr	r2, [pc, #32]	; (8003528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003506:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3b01      	subs	r3, #1
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	2201      	movs	r2, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	1000823f 	.word	0x1000823f
 8003528:	40020940 	.word	0x40020940

0800352c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353a:	e166      	b.n	800380a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	2101      	movs	r1, #1
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	4013      	ands	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8158 	beq.w	8003804 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d005      	beq.n	800356c <HAL_GPIO_Init+0x40>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d130      	bne.n	80035ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035a2:	2201      	movs	r2, #1
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4013      	ands	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	f003 0201 	and.w	r2, r3, #1
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d017      	beq.n	800360a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	2203      	movs	r2, #3
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4013      	ands	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d123      	bne.n	800365e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	08da      	lsrs	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3208      	adds	r2, #8
 800361e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	220f      	movs	r2, #15
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	08da      	lsrs	r2, r3, #3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3208      	adds	r2, #8
 8003658:	6939      	ldr	r1, [r7, #16]
 800365a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	2203      	movs	r2, #3
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0203 	and.w	r2, r3, #3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80b2 	beq.w	8003804 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a0:	4b61      	ldr	r3, [pc, #388]	; (8003828 <HAL_GPIO_Init+0x2fc>)
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	4a60      	ldr	r2, [pc, #384]	; (8003828 <HAL_GPIO_Init+0x2fc>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6613      	str	r3, [r2, #96]	; 0x60
 80036ac:	4b5e      	ldr	r3, [pc, #376]	; (8003828 <HAL_GPIO_Init+0x2fc>)
 80036ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036b8:	4a5c      	ldr	r2, [pc, #368]	; (800382c <HAL_GPIO_Init+0x300>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	3302      	adds	r3, #2
 80036c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	220f      	movs	r2, #15
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036e2:	d02b      	beq.n	800373c <HAL_GPIO_Init+0x210>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a52      	ldr	r2, [pc, #328]	; (8003830 <HAL_GPIO_Init+0x304>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d025      	beq.n	8003738 <HAL_GPIO_Init+0x20c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a51      	ldr	r2, [pc, #324]	; (8003834 <HAL_GPIO_Init+0x308>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d01f      	beq.n	8003734 <HAL_GPIO_Init+0x208>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a50      	ldr	r2, [pc, #320]	; (8003838 <HAL_GPIO_Init+0x30c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d019      	beq.n	8003730 <HAL_GPIO_Init+0x204>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a4f      	ldr	r2, [pc, #316]	; (800383c <HAL_GPIO_Init+0x310>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_GPIO_Init+0x200>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a4e      	ldr	r2, [pc, #312]	; (8003840 <HAL_GPIO_Init+0x314>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00d      	beq.n	8003728 <HAL_GPIO_Init+0x1fc>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a4d      	ldr	r2, [pc, #308]	; (8003844 <HAL_GPIO_Init+0x318>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d007      	beq.n	8003724 <HAL_GPIO_Init+0x1f8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a4c      	ldr	r2, [pc, #304]	; (8003848 <HAL_GPIO_Init+0x31c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d101      	bne.n	8003720 <HAL_GPIO_Init+0x1f4>
 800371c:	2307      	movs	r3, #7
 800371e:	e00e      	b.n	800373e <HAL_GPIO_Init+0x212>
 8003720:	2308      	movs	r3, #8
 8003722:	e00c      	b.n	800373e <HAL_GPIO_Init+0x212>
 8003724:	2306      	movs	r3, #6
 8003726:	e00a      	b.n	800373e <HAL_GPIO_Init+0x212>
 8003728:	2305      	movs	r3, #5
 800372a:	e008      	b.n	800373e <HAL_GPIO_Init+0x212>
 800372c:	2304      	movs	r3, #4
 800372e:	e006      	b.n	800373e <HAL_GPIO_Init+0x212>
 8003730:	2303      	movs	r3, #3
 8003732:	e004      	b.n	800373e <HAL_GPIO_Init+0x212>
 8003734:	2302      	movs	r3, #2
 8003736:	e002      	b.n	800373e <HAL_GPIO_Init+0x212>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_GPIO_Init+0x212>
 800373c:	2300      	movs	r3, #0
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	f002 0203 	and.w	r2, r2, #3
 8003744:	0092      	lsls	r2, r2, #2
 8003746:	4093      	lsls	r3, r2
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800374e:	4937      	ldr	r1, [pc, #220]	; (800382c <HAL_GPIO_Init+0x300>)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	3302      	adds	r3, #2
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800375c:	4b3b      	ldr	r3, [pc, #236]	; (800384c <HAL_GPIO_Init+0x320>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003780:	4a32      	ldr	r2, [pc, #200]	; (800384c <HAL_GPIO_Init+0x320>)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <HAL_GPIO_Init+0x320>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	43db      	mvns	r3, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037aa:	4a28      	ldr	r2, [pc, #160]	; (800384c <HAL_GPIO_Init+0x320>)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037b0:	4b26      	ldr	r3, [pc, #152]	; (800384c <HAL_GPIO_Init+0x320>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037d4:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_GPIO_Init+0x320>)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_GPIO_Init+0x320>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037fe:	4a13      	ldr	r2, [pc, #76]	; (800384c <HAL_GPIO_Init+0x320>)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	3301      	adds	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	f47f ae91 	bne.w	800353c <HAL_GPIO_Init+0x10>
  }
}
 800381a:	bf00      	nop
 800381c:	bf00      	nop
 800381e:	371c      	adds	r7, #28
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	40021000 	.word	0x40021000
 800382c:	40010000 	.word	0x40010000
 8003830:	48000400 	.word	0x48000400
 8003834:	48000800 	.word	0x48000800
 8003838:	48000c00 	.word	0x48000c00
 800383c:	48001000 	.word	0x48001000
 8003840:	48001400 	.word	0x48001400
 8003844:	48001800 	.word	0x48001800
 8003848:	48001c00 	.word	0x48001c00
 800384c:	40010400 	.word	0x40010400

08003850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e001      	b.n	8003872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800389c:	e002      	b.n	80038a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e081      	b.n	80039c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd fbb6 	bl	8001048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	; 0x24
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003900:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003910:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	e006      	b.n	8003938 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003936:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d104      	bne.n	800394a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003948:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800396c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69d9      	ldr	r1, [r3, #28]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1a      	ldr	r2, [r3, #32]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d138      	bne.n	8003a56 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e032      	b.n	8003a58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2224      	movs	r2, #36	; 0x24
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a20:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e000      	b.n	8003a58 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
  }
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d139      	bne.n	8003aee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e033      	b.n	8003af0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2224      	movs	r2, #36	; 0x24
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ab6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0c:	d102      	bne.n	8003b14 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b12:	e00b      	b.n	8003b2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003b14:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b22:	d102      	bne.n	8003b2a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b28:	e000      	b.n	8003b2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003b2a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40007000 	.word	0x40007000

08003b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d141      	bne.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b4a:	4b4b      	ldr	r3, [pc, #300]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b56:	d131      	bne.n	8003bbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b58:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b5e:	4a46      	ldr	r2, [pc, #280]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b68:	4b43      	ldr	r3, [pc, #268]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b70:	4a41      	ldr	r2, [pc, #260]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b78:	4b40      	ldr	r3, [pc, #256]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2232      	movs	r2, #50	; 0x32
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	4a3f      	ldr	r2, [pc, #252]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	0c9b      	lsrs	r3, r3, #18
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b8e:	e002      	b.n	8003b96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b96:	4b38      	ldr	r3, [pc, #224]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba2:	d102      	bne.n	8003baa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f2      	bne.n	8003b90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003baa:	4b33      	ldr	r3, [pc, #204]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb6:	d158      	bne.n	8003c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e057      	b.n	8003c6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bbc:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc2:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bcc:	e04d      	b.n	8003c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd4:	d141      	bne.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bd6:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be2:	d131      	bne.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003be4:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bea:	4a23      	ldr	r2, [pc, #140]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bf4:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bfc:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2232      	movs	r2, #50	; 0x32
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	4a1c      	ldr	r2, [pc, #112]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	0c9b      	lsrs	r3, r3, #18
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c1a:	e002      	b.n	8003c22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2e:	d102      	bne.n	8003c36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f2      	bne.n	8003c1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c36:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c42:	d112      	bne.n	8003c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e011      	b.n	8003c6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c58:	e007      	b.n	8003c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c5a:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c62:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c68:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40007000 	.word	0x40007000
 8003c7c:	20000010 	.word	0x20000010
 8003c80:	431bde83 	.word	0x431bde83

08003c84 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c92:	6053      	str	r3, [r2, #4]
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40007000 	.word	0x40007000

08003ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f000 bc08 	b.w	80044c8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb8:	4b96      	ldr	r3, [pc, #600]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc2:	4b94      	ldr	r3, [pc, #592]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80e4 	beq.w	8003ea2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4c>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	f040 808b 	bne.w	8003dfe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	f040 8087 	bne.w	8003dfe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cf0:	4b88      	ldr	r3, [pc, #544]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_OscConfig+0x64>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e3df      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1a      	ldr	r2, [r3, #32]
 8003d0c:	4b81      	ldr	r3, [pc, #516]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d004      	beq.n	8003d22 <HAL_RCC_OscConfig+0x7e>
 8003d18:	4b7e      	ldr	r3, [pc, #504]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d20:	e005      	b.n	8003d2e <HAL_RCC_OscConfig+0x8a>
 8003d22:	4b7c      	ldr	r3, [pc, #496]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d223      	bcs.n	8003d7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fdfc 	bl	8004934 <RCC_SetFlashLatencyFromMSIRange>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e3c0      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d46:	4b73      	ldr	r3, [pc, #460]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a72      	ldr	r2, [pc, #456]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	f043 0308 	orr.w	r3, r3, #8
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b70      	ldr	r3, [pc, #448]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	496d      	ldr	r1, [pc, #436]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d64:	4b6b      	ldr	r3, [pc, #428]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	4968      	ldr	r1, [pc, #416]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
 8003d78:	e025      	b.n	8003dc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d7a:	4b66      	ldr	r3, [pc, #408]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a65      	ldr	r2, [pc, #404]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d80:	f043 0308 	orr.w	r3, r3, #8
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b63      	ldr	r3, [pc, #396]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4960      	ldr	r1, [pc, #384]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d98:	4b5e      	ldr	r3, [pc, #376]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	495b      	ldr	r1, [pc, #364]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fdbc 	bl	8004934 <RCC_SetFlashLatencyFromMSIRange>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e380      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dc6:	f000 fcc1 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	4b51      	ldr	r3, [pc, #324]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	4950      	ldr	r1, [pc, #320]	; (8003f18 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	5ccb      	ldrb	r3, [r1, r3]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	fa22 f303 	lsr.w	r3, r2, r3
 8003de2:	4a4e      	ldr	r2, [pc, #312]	; (8003f1c <HAL_RCC_OscConfig+0x278>)
 8003de4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003de6:	4b4e      	ldr	r3, [pc, #312]	; (8003f20 <HAL_RCC_OscConfig+0x27c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd fb26 	bl	800143c <HAL_InitTick>
 8003df0:	4603      	mov	r3, r0
 8003df2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d052      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	e364      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d032      	beq.n	8003e6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e06:	4b43      	ldr	r3, [pc, #268]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a42      	ldr	r2, [pc, #264]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e12:	f7fd fc33 	bl	800167c <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e1a:	f7fd fc2f 	bl	800167c <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e34d      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e2c:	4b39      	ldr	r3, [pc, #228]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e38:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a35      	ldr	r2, [pc, #212]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e3e:	f043 0308 	orr.w	r3, r3, #8
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b33      	ldr	r3, [pc, #204]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4930      	ldr	r1, [pc, #192]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e56:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	492b      	ldr	r1, [pc, #172]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	604b      	str	r3, [r1, #4]
 8003e6a:	e01a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e6c:	4b29      	ldr	r3, [pc, #164]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e78:	f7fd fc00 	bl	800167c <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e80:	f7fd fbfc 	bl	800167c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e31a      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e92:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1dc>
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ea0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d073      	beq.n	8003f96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x21c>
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d063      	beq.n	8003f94 <HAL_RCC_OscConfig+0x2f0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d15f      	bne.n	8003f94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e2f7      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d106      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x24c>
 8003ee2:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a0b      	ldr	r2, [pc, #44]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e025      	b.n	8003f3c <HAL_RCC_OscConfig+0x298>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef8:	d114      	bne.n	8003f24 <HAL_RCC_OscConfig+0x280>
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a05      	ldr	r2, [pc, #20]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a02      	ldr	r2, [pc, #8]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e013      	b.n	8003f3c <HAL_RCC_OscConfig+0x298>
 8003f14:	40021000 	.word	0x40021000
 8003f18:	080107d4 	.word	0x080107d4
 8003f1c:	20000010 	.word	0x20000010
 8003f20:	20000014 	.word	0x20000014
 8003f24:	4ba0      	ldr	r3, [pc, #640]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a9f      	ldr	r2, [pc, #636]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8003f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	4b9d      	ldr	r3, [pc, #628]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a9c      	ldr	r2, [pc, #624]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8003f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d013      	beq.n	8003f6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd fb9a 	bl	800167c <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fd fb96 	bl	800167c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	; 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e2b4      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f5e:	4b92      	ldr	r3, [pc, #584]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x2a8>
 8003f6a:	e014      	b.n	8003f96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd fb86 	bl	800167c <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f74:	f7fd fb82 	bl	800167c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	; 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e2a0      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f86:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x2d0>
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d060      	beq.n	8004064 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x310>
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d119      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d116      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb4:	4b7c      	ldr	r3, [pc, #496]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_OscConfig+0x328>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e27d      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fcc:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	4973      	ldr	r1, [pc, #460]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fe0:	e040      	b.n	8004064 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d023      	beq.n	8004032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fea:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6e      	ldr	r2, [pc, #440]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff6:	f7fd fb41 	bl	800167c <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ffe:	f7fd fb3d 	bl	800167c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e25b      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004010:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401c:	4b62      	ldr	r3, [pc, #392]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	495f      	ldr	r1, [pc, #380]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
 8004030:	e018      	b.n	8004064 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004032:	4b5d      	ldr	r3, [pc, #372]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a5c      	ldr	r2, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8004038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fd fb1d 	bl	800167c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004046:	f7fd fb19 	bl	800167c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e237      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004058:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f0      	bne.n	8004046 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d03c      	beq.n	80040ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01c      	beq.n	80040b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004078:	4b4b      	ldr	r3, [pc, #300]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 800407a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407e:	4a4a      	ldr	r2, [pc, #296]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004088:	f7fd faf8 	bl	800167c <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004090:	f7fd faf4 	bl	800167c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e212      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a2:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ef      	beq.n	8004090 <HAL_RCC_OscConfig+0x3ec>
 80040b0:	e01b      	b.n	80040ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b2:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 80040b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b8:	4a3b      	ldr	r2, [pc, #236]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c2:	f7fd fadb 	bl	800167c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ca:	f7fd fad7 	bl	800167c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e1f5      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040dc:	4b32      	ldr	r3, [pc, #200]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 80040de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1ef      	bne.n	80040ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80a6 	beq.w	8004244 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f8:	2300      	movs	r3, #0
 80040fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040fc:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10d      	bne.n	8004124 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	6593      	str	r3, [r2, #88]	; 0x58
 8004114:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004120:	2301      	movs	r3, #1
 8004122:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004124:	4b21      	ldr	r3, [pc, #132]	; (80041ac <HAL_RCC_OscConfig+0x508>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d118      	bne.n	8004162 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004130:	4b1e      	ldr	r3, [pc, #120]	; (80041ac <HAL_RCC_OscConfig+0x508>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1d      	ldr	r2, [pc, #116]	; (80041ac <HAL_RCC_OscConfig+0x508>)
 8004136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413c:	f7fd fa9e 	bl	800167c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004144:	f7fd fa9a 	bl	800167c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e1b8      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004156:	4b15      	ldr	r3, [pc, #84]	; (80041ac <HAL_RCC_OscConfig+0x508>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d108      	bne.n	800417c <HAL_RCC_OscConfig+0x4d8>
 800416a:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004170:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800417a:	e029      	b.n	80041d0 <HAL_RCC_OscConfig+0x52c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b05      	cmp	r3, #5
 8004182:	d115      	bne.n	80041b0 <HAL_RCC_OscConfig+0x50c>
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	4a07      	ldr	r2, [pc, #28]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	4a03      	ldr	r2, [pc, #12]	; (80041a8 <HAL_RCC_OscConfig+0x504>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a4:	e014      	b.n	80041d0 <HAL_RCC_OscConfig+0x52c>
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40007000 	.word	0x40007000
 80041b0:	4b9d      	ldr	r3, [pc, #628]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b6:	4a9c      	ldr	r2, [pc, #624]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c0:	4b99      	ldr	r3, [pc, #612]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	4a98      	ldr	r2, [pc, #608]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d016      	beq.n	8004206 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d8:	f7fd fa50 	bl	800167c <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e0:	f7fd fa4c 	bl	800167c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e168      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f6:	4b8c      	ldr	r3, [pc, #560]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80041f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0ed      	beq.n	80041e0 <HAL_RCC_OscConfig+0x53c>
 8004204:	e015      	b.n	8004232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004206:	f7fd fa39 	bl	800167c <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800420c:	e00a      	b.n	8004224 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420e:	f7fd fa35 	bl	800167c <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	f241 3288 	movw	r2, #5000	; 0x1388
 800421c:	4293      	cmp	r3, r2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e151      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004224:	4b80      	ldr	r3, [pc, #512]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1ed      	bne.n	800420e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004232:	7ffb      	ldrb	r3, [r7, #31]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d105      	bne.n	8004244 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004238:	4b7b      	ldr	r3, [pc, #492]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	4a7a      	ldr	r2, [pc, #488]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 800423e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004242:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d03c      	beq.n	80042ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01c      	beq.n	8004292 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004258:	4b73      	ldr	r3, [pc, #460]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 800425a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800425e:	4a72      	ldr	r2, [pc, #456]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004268:	f7fd fa08 	bl	800167c <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004270:	f7fd fa04 	bl	800167c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e122      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004282:	4b69      	ldr	r3, [pc, #420]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 8004284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0ef      	beq.n	8004270 <HAL_RCC_OscConfig+0x5cc>
 8004290:	e01b      	b.n	80042ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004292:	4b65      	ldr	r3, [pc, #404]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 8004294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004298:	4a63      	ldr	r2, [pc, #396]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7fd f9eb 	bl	800167c <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042aa:	f7fd f9e7 	bl	800167c <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e105      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042bc:	4b5a      	ldr	r3, [pc, #360]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80042be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1ef      	bne.n	80042aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80f9 	beq.w	80044c6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	2b02      	cmp	r3, #2
 80042da:	f040 80cf 	bne.w	800447c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042de:	4b52      	ldr	r3, [pc, #328]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f003 0203 	and.w	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d12c      	bne.n	800434c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	3b01      	subs	r3, #1
 80042fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d123      	bne.n	800434c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d11b      	bne.n	800434c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d113      	bne.n	800434c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	3b01      	subs	r3, #1
 8004332:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d109      	bne.n	800434c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	085b      	lsrs	r3, r3, #1
 8004344:	3b01      	subs	r3, #1
 8004346:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d071      	beq.n	8004430 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d068      	beq.n	8004424 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004352:	4b35      	ldr	r3, [pc, #212]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d105      	bne.n	800436a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800435e:	4b32      	ldr	r3, [pc, #200]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e0ac      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800436e:	4b2e      	ldr	r3, [pc, #184]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2d      	ldr	r2, [pc, #180]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 8004374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004378:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800437a:	f7fd f97f 	bl	800167c <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004382:	f7fd f97b 	bl	800167c <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e099      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004394:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f0      	bne.n	8004382 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a0:	4b21      	ldr	r3, [pc, #132]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4b21      	ldr	r3, [pc, #132]	; (800442c <HAL_RCC_OscConfig+0x788>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043b0:	3a01      	subs	r2, #1
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	4311      	orrs	r1, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043ba:	0212      	lsls	r2, r2, #8
 80043bc:	4311      	orrs	r1, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043c2:	0852      	lsrs	r2, r2, #1
 80043c4:	3a01      	subs	r2, #1
 80043c6:	0552      	lsls	r2, r2, #21
 80043c8:	4311      	orrs	r1, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043ce:	0852      	lsrs	r2, r2, #1
 80043d0:	3a01      	subs	r2, #1
 80043d2:	0652      	lsls	r2, r2, #25
 80043d4:	4311      	orrs	r1, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043da:	06d2      	lsls	r2, r2, #27
 80043dc:	430a      	orrs	r2, r1
 80043de:	4912      	ldr	r1, [pc, #72]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043e4:	4b10      	ldr	r3, [pc, #64]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a0f      	ldr	r2, [pc, #60]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80043ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043f0:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043fc:	f7fd f93e 	bl	800167c <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd f93a 	bl	800167c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e058      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004416:	4b04      	ldr	r3, [pc, #16]	; (8004428 <HAL_RCC_OscConfig+0x784>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004422:	e050      	b.n	80044c6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e04f      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
 8004428:	40021000 	.word	0x40021000
 800442c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004430:	4b27      	ldr	r3, [pc, #156]	; (80044d0 <HAL_RCC_OscConfig+0x82c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d144      	bne.n	80044c6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800443c:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <HAL_RCC_OscConfig+0x82c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a23      	ldr	r2, [pc, #140]	; (80044d0 <HAL_RCC_OscConfig+0x82c>)
 8004442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004446:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004448:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <HAL_RCC_OscConfig+0x82c>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4a20      	ldr	r2, [pc, #128]	; (80044d0 <HAL_RCC_OscConfig+0x82c>)
 800444e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004452:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004454:	f7fd f912 	bl	800167c <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7fd f90e 	bl	800167c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e02c      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446e:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <HAL_RCC_OscConfig+0x82c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x7b8>
 800447a:	e024      	b.n	80044c6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b0c      	cmp	r3, #12
 8004480:	d01f      	beq.n	80044c2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <HAL_RCC_OscConfig+0x82c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <HAL_RCC_OscConfig+0x82c>)
 8004488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800448c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fd f8f5 	bl	800167c <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004496:	f7fd f8f1 	bl	800167c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e00f      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_RCC_OscConfig+0x82c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_RCC_OscConfig+0x82c>)
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	4905      	ldr	r1, [pc, #20]	; (80044d0 <HAL_RCC_OscConfig+0x82c>)
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <HAL_RCC_OscConfig+0x830>)
 80044bc:	4013      	ands	r3, r2
 80044be:	60cb      	str	r3, [r1, #12]
 80044c0:	e001      	b.n	80044c6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	feeefffc 	.word	0xfeeefffc

080044d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e11d      	b.n	800472c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f0:	4b90      	ldr	r3, [pc, #576]	; (8004734 <HAL_RCC_ClockConfig+0x25c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d910      	bls.n	8004520 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b8d      	ldr	r3, [pc, #564]	; (8004734 <HAL_RCC_ClockConfig+0x25c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 020f 	bic.w	r2, r3, #15
 8004506:	498b      	ldr	r1, [pc, #556]	; (8004734 <HAL_RCC_ClockConfig+0x25c>)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b89      	ldr	r3, [pc, #548]	; (8004734 <HAL_RCC_ClockConfig+0x25c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e105      	b.n	800472c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	4b81      	ldr	r3, [pc, #516]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004538:	429a      	cmp	r2, r3
 800453a:	d908      	bls.n	800454e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453c:	4b7e      	ldr	r3, [pc, #504]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	497b      	ldr	r1, [pc, #492]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d079      	beq.n	800464e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b03      	cmp	r3, #3
 8004560:	d11e      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004562:	4b75      	ldr	r3, [pc, #468]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0dc      	b.n	800472c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004572:	f000 fa39 	bl	80049e8 <RCC_GetSysClockFreqFromPLLSource>
 8004576:	4603      	mov	r3, r0
 8004578:	4a70      	ldr	r2, [pc, #448]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d946      	bls.n	800460c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800457e:	4b6e      	ldr	r3, [pc, #440]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d140      	bne.n	800460c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800458a:	4b6b      	ldr	r3, [pc, #428]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004592:	4a69      	ldr	r2, [pc, #420]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004598:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e035      	b.n	800460c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d107      	bne.n	80045b8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045a8:	4b63      	ldr	r3, [pc, #396]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d115      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0b9      	b.n	800472c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d107      	bne.n	80045d0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045c0:	4b5d      	ldr	r3, [pc, #372]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0ad      	b.n	800472c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d0:	4b59      	ldr	r3, [pc, #356]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0a5      	b.n	800472c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80045e0:	f000 f8b4 	bl	800474c <HAL_RCC_GetSysClockFreq>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4a55      	ldr	r2, [pc, #340]	; (800473c <HAL_RCC_ClockConfig+0x264>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d90f      	bls.n	800460c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80045ec:	4b52      	ldr	r3, [pc, #328]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045f8:	4b4f      	ldr	r3, [pc, #316]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004600:	4a4d      	ldr	r2, [pc, #308]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004606:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800460c:	4b4a      	ldr	r3, [pc, #296]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f023 0203 	bic.w	r2, r3, #3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4947      	ldr	r1, [pc, #284]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461e:	f7fd f82d 	bl	800167c <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004624:	e00a      	b.n	800463c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004626:	f7fd f829 	bl	800167c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f241 3288 	movw	r2, #5000	; 0x1388
 8004634:	4293      	cmp	r3, r2
 8004636:	d901      	bls.n	800463c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e077      	b.n	800472c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463c:	4b3e      	ldr	r3, [pc, #248]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 020c 	and.w	r2, r3, #12
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	429a      	cmp	r2, r3
 800464c:	d1eb      	bne.n	8004626 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	d105      	bne.n	8004660 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004654:	4b38      	ldr	r3, [pc, #224]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4a37      	ldr	r2, [pc, #220]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 800465a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800465e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d010      	beq.n	800468e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	4b31      	ldr	r3, [pc, #196]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004678:	429a      	cmp	r2, r3
 800467a:	d208      	bcs.n	800468e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467c:	4b2e      	ldr	r3, [pc, #184]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	492b      	ldr	r1, [pc, #172]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800468e:	4b29      	ldr	r3, [pc, #164]	; (8004734 <HAL_RCC_ClockConfig+0x25c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d210      	bcs.n	80046be <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469c:	4b25      	ldr	r3, [pc, #148]	; (8004734 <HAL_RCC_ClockConfig+0x25c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 020f 	bic.w	r2, r3, #15
 80046a4:	4923      	ldr	r1, [pc, #140]	; (8004734 <HAL_RCC_ClockConfig+0x25c>)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ac:	4b21      	ldr	r3, [pc, #132]	; (8004734 <HAL_RCC_ClockConfig+0x25c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d001      	beq.n	80046be <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e036      	b.n	800472c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ca:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	4918      	ldr	r1, [pc, #96]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e8:	4b13      	ldr	r3, [pc, #76]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4910      	ldr	r1, [pc, #64]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046fc:	f000 f826 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8004700:	4602      	mov	r2, r0
 8004702:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_RCC_ClockConfig+0x260>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	490c      	ldr	r1, [pc, #48]	; (8004740 <HAL_RCC_ClockConfig+0x268>)
 800470e:	5ccb      	ldrb	r3, [r1, r3]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
 8004718:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <HAL_RCC_ClockConfig+0x26c>)
 800471a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <HAL_RCC_ClockConfig+0x270>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7fc fe8b 	bl	800143c <HAL_InitTick>
 8004726:	4603      	mov	r3, r0
 8004728:	73fb      	strb	r3, [r7, #15]

  return status;
 800472a:	7bfb      	ldrb	r3, [r7, #15]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40022000 	.word	0x40022000
 8004738:	40021000 	.word	0x40021000
 800473c:	04c4b400 	.word	0x04c4b400
 8004740:	080107d4 	.word	0x080107d4
 8004744:	20000010 	.word	0x20000010
 8004748:	20000014 	.word	0x20000014

0800474c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800474c:	b480      	push	{r7}
 800474e:	b089      	sub	sp, #36	; 0x24
 8004750:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800475a:	4b3e      	ldr	r3, [pc, #248]	; (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004764:	4b3b      	ldr	r3, [pc, #236]	; (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x34>
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b0c      	cmp	r3, #12
 8004778:	d121      	bne.n	80047be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d11e      	bne.n	80047be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004780:	4b34      	ldr	r3, [pc, #208]	; (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d107      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800478c:	4b31      	ldr	r3, [pc, #196]	; (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 800478e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e005      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800479c:	4b2d      	ldr	r3, [pc, #180]	; (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047a8:	4a2b      	ldr	r2, [pc, #172]	; (8004858 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10d      	bne.n	80047d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d102      	bne.n	80047ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047c4:	4b25      	ldr	r3, [pc, #148]	; (800485c <HAL_RCC_GetSysClockFreq+0x110>)
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	e004      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047d0:	4b22      	ldr	r3, [pc, #136]	; (800485c <HAL_RCC_GetSysClockFreq+0x110>)
 80047d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	2b0c      	cmp	r3, #12
 80047d8:	d134      	bne.n	8004844 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047da:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d003      	beq.n	80047f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d003      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0xac>
 80047f0:	e005      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047f2:	4b1a      	ldr	r3, [pc, #104]	; (800485c <HAL_RCC_GetSysClockFreq+0x110>)
 80047f4:	617b      	str	r3, [r7, #20]
      break;
 80047f6:	e005      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047f8:	4b18      	ldr	r3, [pc, #96]	; (800485c <HAL_RCC_GetSysClockFreq+0x110>)
 80047fa:	617b      	str	r3, [r7, #20]
      break;
 80047fc:	e002      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	617b      	str	r3, [r7, #20]
      break;
 8004802:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004804:	4b13      	ldr	r3, [pc, #76]	; (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	3301      	adds	r3, #1
 8004810:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	fb03 f202 	mul.w	r2, r3, r2
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800482a:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <HAL_RCC_GetSysClockFreq+0x108>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	0e5b      	lsrs	r3, r3, #25
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	3301      	adds	r3, #1
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004844:	69bb      	ldr	r3, [r7, #24]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3724      	adds	r7, #36	; 0x24
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40021000 	.word	0x40021000
 8004858:	080107ec 	.word	0x080107ec
 800485c:	00f42400 	.word	0x00f42400

08004860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <HAL_RCC_GetHCLKFreq+0x14>)
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000010 	.word	0x20000010

08004878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800487c:	f7ff fff0 	bl	8004860 <HAL_RCC_GetHCLKFreq>
 8004880:	4602      	mov	r2, r0
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	0a1b      	lsrs	r3, r3, #8
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	4904      	ldr	r1, [pc, #16]	; (80048a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800488e:	5ccb      	ldrb	r3, [r1, r3]
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004898:	4618      	mov	r0, r3
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40021000 	.word	0x40021000
 80048a0:	080107e4 	.word	0x080107e4

080048a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048a8:	f7ff ffda 	bl	8004860 <HAL_RCC_GetHCLKFreq>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0adb      	lsrs	r3, r3, #11
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4904      	ldr	r1, [pc, #16]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ba:	5ccb      	ldrb	r3, [r1, r3]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40021000 	.word	0x40021000
 80048cc:	080107e4 	.word	0x080107e4

080048d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	220f      	movs	r2, #15
 80048de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80048e0:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_RCC_GetClockConfig+0x5c>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0203 	and.w	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80048ec:	4b0f      	ldr	r3, [pc, #60]	; (800492c <HAL_RCC_GetClockConfig+0x5c>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <HAL_RCC_GetClockConfig+0x5c>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004904:	4b09      	ldr	r3, [pc, #36]	; (800492c <HAL_RCC_GetClockConfig+0x5c>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	08db      	lsrs	r3, r3, #3
 800490a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004912:	4b07      	ldr	r3, [pc, #28]	; (8004930 <HAL_RCC_GetClockConfig+0x60>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 020f 	and.w	r2, r3, #15
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	601a      	str	r2, [r3, #0]
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40021000 	.word	0x40021000
 8004930:	40022000 	.word	0x40022000

08004934 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004940:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800494c:	f7ff f8d6 	bl	8003afc <HAL_PWREx_GetVoltageRange>
 8004950:	6178      	str	r0, [r7, #20]
 8004952:	e014      	b.n	800497e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004954:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004958:	4a21      	ldr	r2, [pc, #132]	; (80049e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800495a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495e:	6593      	str	r3, [r2, #88]	; 0x58
 8004960:	4b1f      	ldr	r3, [pc, #124]	; (80049e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800496c:	f7ff f8c6 	bl	8003afc <HAL_PWREx_GetVoltageRange>
 8004970:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004972:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004976:	4a1a      	ldr	r2, [pc, #104]	; (80049e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800497c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004984:	d10b      	bne.n	800499e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b80      	cmp	r3, #128	; 0x80
 800498a:	d913      	bls.n	80049b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2ba0      	cmp	r3, #160	; 0xa0
 8004990:	d902      	bls.n	8004998 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004992:	2302      	movs	r3, #2
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	e00d      	b.n	80049b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004998:	2301      	movs	r3, #1
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	e00a      	b.n	80049b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b7f      	cmp	r3, #127	; 0x7f
 80049a2:	d902      	bls.n	80049aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80049a4:	2302      	movs	r3, #2
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	e004      	b.n	80049b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b70      	cmp	r3, #112	; 0x70
 80049ae:	d101      	bne.n	80049b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049b0:	2301      	movs	r3, #1
 80049b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f023 020f 	bic.w	r2, r3, #15
 80049bc:	4909      	ldr	r1, [pc, #36]	; (80049e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049c4:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d001      	beq.n	80049d6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40022000 	.word	0x40022000

080049e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049ee:	4b2d      	ldr	r3, [pc, #180]	; (8004aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d00b      	beq.n	8004a16 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d825      	bhi.n	8004a50 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d008      	beq.n	8004a1c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d11f      	bne.n	8004a50 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004a10:	4b25      	ldr	r3, [pc, #148]	; (8004aa8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a12:	613b      	str	r3, [r7, #16]
    break;
 8004a14:	e01f      	b.n	8004a56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a18:	613b      	str	r3, [r7, #16]
    break;
 8004a1a:	e01c      	b.n	8004a56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a1c:	4b21      	ldr	r3, [pc, #132]	; (8004aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d107      	bne.n	8004a38 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a28:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	e005      	b.n	8004a44 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a38:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004a44:	4a19      	ldr	r2, [pc, #100]	; (8004aac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4c:	613b      	str	r3, [r7, #16]
    break;
 8004a4e:	e002      	b.n	8004a56 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
    break;
 8004a54:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a56:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	091b      	lsrs	r3, r3, #4
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	3301      	adds	r3, #1
 8004a62:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	0a1b      	lsrs	r3, r3, #8
 8004a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	fb03 f202 	mul.w	r2, r3, r2
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	0e5b      	lsrs	r3, r3, #25
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	3301      	adds	r3, #1
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004a96:	683b      	ldr	r3, [r7, #0]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	080107ec 	.word	0x080107ec

08004ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ab8:	2300      	movs	r3, #0
 8004aba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004abc:	2300      	movs	r3, #0
 8004abe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d040      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad0:	2b80      	cmp	r3, #128	; 0x80
 8004ad2:	d02a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ad4:	2b80      	cmp	r3, #128	; 0x80
 8004ad6:	d825      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ad8:	2b60      	cmp	r3, #96	; 0x60
 8004ada:	d026      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004adc:	2b60      	cmp	r3, #96	; 0x60
 8004ade:	d821      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d006      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d81d      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d009      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d010      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004af0:	e018      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004af2:	4b89      	ldr	r3, [pc, #548]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	4a88      	ldr	r2, [pc, #544]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004afe:	e015      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 fa82 	bl	8006010 <RCCEx_PLLSAI1_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b10:	e00c      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3320      	adds	r3, #32
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fb6d 	bl	80061f8 <RCCEx_PLLSAI2_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b22:	e003      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	74fb      	strb	r3, [r7, #19]
      break;
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b2c:	7cfb      	ldrb	r3, [r7, #19]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10b      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b32:	4b79      	ldr	r3, [pc, #484]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b38:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b40:	4975      	ldr	r1, [pc, #468]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b48:	e001      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4a:	7cfb      	ldrb	r3, [r7, #19]
 8004b4c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d047      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b62:	d030      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b68:	d82a      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b6e:	d02a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b74:	d824      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b80:	d81e      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8a:	d010      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b8c:	e018      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b8e:	4b62      	ldr	r3, [pc, #392]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	4a61      	ldr	r2, [pc, #388]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b98:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b9a:	e015      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 fa34 	bl	8006010 <RCCEx_PLLSAI1_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bac:	e00c      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3320      	adds	r3, #32
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 fb1f 	bl	80061f8 <RCCEx_PLLSAI2_Config>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bbe:	e003      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	74fb      	strb	r3, [r7, #19]
      break;
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc8:	7cfb      	ldrb	r3, [r7, #19]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bce:	4b52      	ldr	r3, [pc, #328]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	494e      	ldr	r1, [pc, #312]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004be4:	e001      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 809f 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bfc:	4b46      	ldr	r3, [pc, #280]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00d      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c12:	4b41      	ldr	r3, [pc, #260]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	4a40      	ldr	r2, [pc, #256]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c26:	60bb      	str	r3, [r7, #8]
 8004c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c2e:	4b3b      	ldr	r3, [pc, #236]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a3a      	ldr	r2, [pc, #232]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c3a:	f7fc fd1f 	bl	800167c <HAL_GetTick>
 8004c3e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c40:	e009      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c42:	f7fc fd1b 	bl	800167c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d902      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	74fb      	strb	r3, [r7, #19]
        break;
 8004c54:	e005      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c56:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0ef      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d15b      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c68:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c72:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01f      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d019      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c86:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c90:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c92:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cb2:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d016      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fc fcda 	bl	800167c <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cca:	e00b      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ccc:	f7fc fcd6 	bl	800167c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d902      	bls.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	74fb      	strb	r3, [r7, #19]
            break;
 8004ce2:	e006      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0ec      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004cf2:	7cfb      	ldrb	r3, [r7, #19]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10c      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf8:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d08:	4903      	ldr	r1, [pc, #12]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d10:	e008      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d12:	7cfb      	ldrb	r3, [r7, #19]
 8004d14:	74bb      	strb	r3, [r7, #18]
 8004d16:	e005      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d24:	7c7b      	ldrb	r3, [r7, #17]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2a:	4ba0      	ldr	r3, [pc, #640]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	4a9f      	ldr	r2, [pc, #636]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d42:	4b9a      	ldr	r3, [pc, #616]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f023 0203 	bic.w	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d50:	4996      	ldr	r1, [pc, #600]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d64:	4b91      	ldr	r3, [pc, #580]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f023 020c 	bic.w	r2, r3, #12
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	498e      	ldr	r1, [pc, #568]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d86:	4b89      	ldr	r3, [pc, #548]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	4985      	ldr	r1, [pc, #532]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004da8:	4b80      	ldr	r3, [pc, #512]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db6:	497d      	ldr	r1, [pc, #500]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dca:	4b78      	ldr	r3, [pc, #480]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd8:	4974      	ldr	r1, [pc, #464]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dec:	4b6f      	ldr	r3, [pc, #444]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfa:	496c      	ldr	r1, [pc, #432]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e0e:	4b67      	ldr	r3, [pc, #412]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1c:	4963      	ldr	r1, [pc, #396]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e30:	4b5e      	ldr	r3, [pc, #376]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e3e:	495b      	ldr	r1, [pc, #364]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e52:	4b56      	ldr	r3, [pc, #344]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e60:	4952      	ldr	r1, [pc, #328]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e74:	4b4d      	ldr	r3, [pc, #308]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e82:	494a      	ldr	r1, [pc, #296]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e96:	4b45      	ldr	r3, [pc, #276]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea4:	4941      	ldr	r1, [pc, #260]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eb8:	4b3c      	ldr	r3, [pc, #240]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ebe:	f023 0203 	bic.w	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec6:	4939      	ldr	r1, [pc, #228]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d028      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eda:	4b34      	ldr	r3, [pc, #208]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee8:	4930      	ldr	r1, [pc, #192]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ef8:	d106      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004efa:	4b2c      	ldr	r3, [pc, #176]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	4a2b      	ldr	r2, [pc, #172]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f04:	60d3      	str	r3, [r2, #12]
 8004f06:	e011      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f10:	d10c      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3304      	adds	r3, #4
 8004f16:	2101      	movs	r1, #1
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 f879 	bl	8006010 <RCCEx_PLLSAI1_Config>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d04d      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f40:	d108      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004f42:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f48:	4a18      	ldr	r2, [pc, #96]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f4e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f52:	e012      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004f54:	4b15      	ldr	r3, [pc, #84]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f5a:	4a14      	ldr	r2, [pc, #80]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f60:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f64:	4b11      	ldr	r3, [pc, #68]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f72:	490e      	ldr	r1, [pc, #56]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f82:	d106      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f84:	4b09      	ldr	r3, [pc, #36]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a08      	ldr	r2, [pc, #32]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f8e:	60d3      	str	r3, [r2, #12]
 8004f90:	e020      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f9a:	d109      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f9c:	4b03      	ldr	r3, [pc, #12]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4a02      	ldr	r2, [pc, #8]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa6:	60d3      	str	r3, [r2, #12]
 8004fa8:	e014      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004faa:	bf00      	nop
 8004fac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 f825 	bl	8006010 <RCCEx_PLLSAI1_Config>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fca:	7cfb      	ldrb	r3, [r7, #19]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004fd0:	7cfb      	ldrb	r3, [r7, #19]
 8004fd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d028      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fe0:	4b7a      	ldr	r3, [pc, #488]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fee:	4977      	ldr	r1, [pc, #476]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffe:	d106      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005000:	4b72      	ldr	r3, [pc, #456]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a71      	ldr	r2, [pc, #452]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800500a:	60d3      	str	r3, [r2, #12]
 800500c:	e011      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005012:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005016:	d10c      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	2101      	movs	r1, #1
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fff6 	bl	8006010 <RCCEx_PLLSAI1_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005028:	7cfb      	ldrb	r3, [r7, #19]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800502e:	7cfb      	ldrb	r3, [r7, #19]
 8005030:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01e      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800503e:	4b63      	ldr	r3, [pc, #396]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504e:	495f      	ldr	r1, [pc, #380]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800505c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005060:	d10c      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3304      	adds	r3, #4
 8005066:	2102      	movs	r1, #2
 8005068:	4618      	mov	r0, r3
 800506a:	f000 ffd1 	bl	8006010 <RCCEx_PLLSAI1_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005072:	7cfb      	ldrb	r3, [r7, #19]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005078:	7cfb      	ldrb	r3, [r7, #19]
 800507a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00b      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005088:	4b50      	ldr	r3, [pc, #320]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800508a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800508e:	f023 0204 	bic.w	r2, r3, #4
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005098:	494c      	ldr	r1, [pc, #304]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00b      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050ac:	4b47      	ldr	r3, [pc, #284]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050b2:	f023 0218 	bic.w	r2, r3, #24
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050bc:	4943      	ldr	r1, [pc, #268]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d035      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050d0:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a3d      	ldr	r2, [pc, #244]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050dc:	f7fc face 	bl	800167c <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050e2:	e009      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050e4:	f7fc faca 	bl	800167c <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d902      	bls.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	74fb      	strb	r3, [r7, #19]
        break;
 80050f6:	e005      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050f8:	4b34      	ldr	r3, [pc, #208]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1ef      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d113      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800510a:	4b30      	ldr	r3, [pc, #192]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800510c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005110:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800511a:	492c      	ldr	r1, [pc, #176]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3320      	adds	r3, #32
 8005126:	2102      	movs	r1, #2
 8005128:	4618      	mov	r0, r3
 800512a:	f001 f865 	bl	80061f8 <RCCEx_PLLSAI2_Config>
 800512e:	4603      	mov	r3, r0
 8005130:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005132:	7cfb      	ldrb	r3, [r7, #19]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005138:	7cfb      	ldrb	r3, [r7, #19]
 800513a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01e      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005148:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800514a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800514e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005158:	491c      	ldr	r1, [pc, #112]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516a:	d10c      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3320      	adds	r3, #32
 8005170:	2101      	movs	r1, #1
 8005172:	4618      	mov	r0, r3
 8005174:	f001 f840 	bl	80061f8 <RCCEx_PLLSAI2_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005182:	7cfb      	ldrb	r3, [r7, #19]
 8005184:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d017      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005192:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005194:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005198:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a2:	490a      	ldr	r1, [pc, #40]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051b4:	d105      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	4a04      	ldr	r2, [pc, #16]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80051bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051c0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40021000 	.word	0x40021000

080051d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051e2:	d13e      	bne.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80051e4:	4bb6      	ldr	r3, [pc, #728]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ee:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051f6:	d028      	beq.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051fe:	f200 86f2 	bhi.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005208:	d005      	beq.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005210:	d00e      	beq.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005212:	f000 bee8 	b.w	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005216:	4baa      	ldr	r3, [pc, #680]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	f040 86e2 	bne.w	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8005226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522a:	61fb      	str	r3, [r7, #28]
      break;
 800522c:	f000 bedd 	b.w	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005230:	4ba3      	ldr	r3, [pc, #652]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b02      	cmp	r3, #2
 800523c:	f040 86d7 	bne.w	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8005240:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005244:	61fb      	str	r3, [r7, #28]
      break;
 8005246:	f000 bed2 	b.w	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800524a:	4b9d      	ldr	r3, [pc, #628]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005256:	f040 86cc 	bne.w	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 800525a:	4b9a      	ldr	r3, [pc, #616]	; (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800525c:	61fb      	str	r3, [r7, #28]
      break;
 800525e:	f000 bec8 	b.w	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005262:	4b97      	ldr	r3, [pc, #604]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d036      	beq.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b03      	cmp	r3, #3
 8005276:	d840      	bhi.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d003      	beq.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d020      	beq.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005284:	e039      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005286:	4b8e      	ldr	r3, [pc, #568]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d116      	bne.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005292:	4b8b      	ldr	r3, [pc, #556]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800529e:	4b88      	ldr	r3, [pc, #544]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	e005      	b.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80052aa:	4b85      	ldr	r3, [pc, #532]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80052ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b0:	0a1b      	lsrs	r3, r3, #8
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	4a84      	ldr	r2, [pc, #528]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80052b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80052be:	e01f      	b.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61bb      	str	r3, [r7, #24]
      break;
 80052c4:	e01c      	b.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052c6:	4b7e      	ldr	r3, [pc, #504]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d2:	d102      	bne.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80052d4:	4b7d      	ldr	r3, [pc, #500]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80052d6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80052d8:	e012      	b.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
      break;
 80052de:	e00f      	b.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052e0:	4b77      	ldr	r3, [pc, #476]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ec:	d102      	bne.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80052ee:	4b77      	ldr	r3, [pc, #476]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80052f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80052f2:	e005      	b.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61bb      	str	r3, [r7, #24]
      break;
 80052f8:	e002      	b.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
      break;
 80052fe:	bf00      	nop
    }

    switch(PeriphClk)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005306:	f000 8604 	beq.w	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005310:	f200 8671 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800531a:	f000 8467 	beq.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005324:	f200 8667 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800532e:	f000 852f 	beq.w	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005338:	f200 865d 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005342:	f000 8185 	beq.w	8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800534c:	f200 8653 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005356:	f000 80cb 	beq.w	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005360:	f200 8649 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536a:	f000 842e 	beq.w	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005374:	f200 863f 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800537e:	f000 83e2 	beq.w	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005388:	f200 8635 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005392:	f000 80ad 	beq.w	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539c:	f200 862b 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a6:	f000 809b 	beq.w	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b0:	f200 8621 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ba:	f000 8089 	beq.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c4:	f200 8617 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ce:	f000 8552 	beq.w	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d8:	f200 860d 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e2:	f000 84fe 	beq.w	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ec:	f200 8603 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f6:	f000 849f 	beq.w	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005400:	f200 85f9 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b80      	cmp	r3, #128	; 0x80
 8005408:	f000 846a 	beq.w	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	f200 85f1 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b20      	cmp	r3, #32
 8005418:	d84c      	bhi.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 85ea 	beq.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3b01      	subs	r3, #1
 8005426:	2b1f      	cmp	r3, #31
 8005428:	f200 85e5 	bhi.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005845 	.word	0x08005845
 8005438:	080058b3 	.word	0x080058b3
 800543c:	08005ff7 	.word	0x08005ff7
 8005440:	08005947 	.word	0x08005947
 8005444:	08005ff7 	.word	0x08005ff7
 8005448:	08005ff7 	.word	0x08005ff7
 800544c:	08005ff7 	.word	0x08005ff7
 8005450:	080059bf 	.word	0x080059bf
 8005454:	08005ff7 	.word	0x08005ff7
 8005458:	08005ff7 	.word	0x08005ff7
 800545c:	08005ff7 	.word	0x08005ff7
 8005460:	08005ff7 	.word	0x08005ff7
 8005464:	08005ff7 	.word	0x08005ff7
 8005468:	08005ff7 	.word	0x08005ff7
 800546c:	08005ff7 	.word	0x08005ff7
 8005470:	08005a43 	.word	0x08005a43
 8005474:	08005ff7 	.word	0x08005ff7
 8005478:	08005ff7 	.word	0x08005ff7
 800547c:	08005ff7 	.word	0x08005ff7
 8005480:	08005ff7 	.word	0x08005ff7
 8005484:	08005ff7 	.word	0x08005ff7
 8005488:	08005ff7 	.word	0x08005ff7
 800548c:	08005ff7 	.word	0x08005ff7
 8005490:	08005ff7 	.word	0x08005ff7
 8005494:	08005ff7 	.word	0x08005ff7
 8005498:	08005ff7 	.word	0x08005ff7
 800549c:	08005ff7 	.word	0x08005ff7
 80054a0:	08005ff7 	.word	0x08005ff7
 80054a4:	08005ff7 	.word	0x08005ff7
 80054a8:	08005ff7 	.word	0x08005ff7
 80054ac:	08005ff7 	.word	0x08005ff7
 80054b0:	08005ac5 	.word	0x08005ac5
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	f000 83e6 	beq.w	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80054bc:	f000 bd9b 	b.w	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80054c0:	40021000 	.word	0x40021000
 80054c4:	0007a120 	.word	0x0007a120
 80054c8:	080107ec 	.word	0x080107ec
 80054cc:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80054d6:	f000 ff83 	bl	80063e0 <RCCEx_GetSAIxPeriphCLKFreq>
 80054da:	61f8      	str	r0, [r7, #28]
      break;
 80054dc:	f000 bd8e 	b.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80054e6:	f000 ff7b 	bl	80063e0 <RCCEx_GetSAIxPeriphCLKFreq>
 80054ea:	61f8      	str	r0, [r7, #28]
      break;
 80054ec:	f000 bd86 	b.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80054f0:	4b9a      	ldr	r3, [pc, #616]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005502:	d015      	beq.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800550a:	f200 8092 	bhi.w	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005514:	d029      	beq.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800551c:	f200 8089 	bhi.w	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d07b      	beq.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800552c:	d04a      	beq.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 800552e:	e080      	b.n	8005632 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005530:	4b8a      	ldr	r3, [pc, #552]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b02      	cmp	r3, #2
 800553a:	d17d      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800553c:	4b87      	ldr	r3, [pc, #540]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8005548:	4b84      	ldr	r3, [pc, #528]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	e005      	b.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8005554:	4b81      	ldr	r3, [pc, #516]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800555a:	0a1b      	lsrs	r3, r3, #8
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	4a7f      	ldr	r2, [pc, #508]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005566:	61fb      	str	r3, [r7, #28]
          break;
 8005568:	e066      	b.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800556a:	4b7c      	ldr	r3, [pc, #496]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005576:	d162      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005578:	4b78      	ldr	r3, [pc, #480]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005584:	d15b      	bne.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005586:	4b75      	ldr	r3, [pc, #468]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005590:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	fb03 f202 	mul.w	r2, r3, r2
 800559a:	4b70      	ldr	r3, [pc, #448]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	3301      	adds	r3, #1
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80055ac:	4b6b      	ldr	r3, [pc, #428]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	0d5b      	lsrs	r3, r3, #21
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	3301      	adds	r3, #1
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	61fb      	str	r3, [r7, #28]
          break;
 80055c2:	e03c      	b.n	800563e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80055c4:	4b65      	ldr	r3, [pc, #404]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055d0:	d138      	bne.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80055d2:	4b62      	ldr	r3, [pc, #392]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055de:	d131      	bne.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80055e0:	4b5e      	ldr	r3, [pc, #376]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ea:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	fb03 f202 	mul.w	r2, r3, r2
 80055f4:	4b59      	ldr	r3, [pc, #356]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	3301      	adds	r3, #1
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005606:	4b55      	ldr	r3, [pc, #340]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	0d5b      	lsrs	r3, r3, #21
 800560c:	f003 0303 	and.w	r3, r3, #3
 8005610:	3301      	adds	r3, #1
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	fbb2 f3f3 	udiv	r3, r2, r3
 800561a:	61fb      	str	r3, [r7, #28]
          break;
 800561c:	e012      	b.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800561e:	4b4f      	ldr	r3, [pc, #316]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b02      	cmp	r3, #2
 800562a:	d10e      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 800562c:	4b4d      	ldr	r3, [pc, #308]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800562e:	61fb      	str	r3, [r7, #28]
          break;
 8005630:	e00b      	b.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8005632:	bf00      	nop
 8005634:	f000 bce2 	b.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005638:	bf00      	nop
 800563a:	f000 bcdf 	b.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800563e:	bf00      	nop
 8005640:	f000 bcdc 	b.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005644:	bf00      	nop
 8005646:	f000 bcd9 	b.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800564a:	bf00      	nop
        break;
 800564c:	f000 bcd6 	b.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8005650:	4b42      	ldr	r3, [pc, #264]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800565a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800565e:	d13d      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005660:	4b3e      	ldr	r3, [pc, #248]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800566c:	f040 84c5 	bne.w	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005670:	4b3a      	ldr	r3, [pc, #232]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567c:	f040 84bd 	bne.w	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005680:	4b36      	ldr	r3, [pc, #216]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	0a1b      	lsrs	r3, r3, #8
 8005686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800568a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	fb03 f202 	mul.w	r2, r3, r2
 8005694:	4b31      	ldr	r3, [pc, #196]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	3301      	adds	r3, #1
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80056a6:	4b2d      	ldr	r3, [pc, #180]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	0edb      	lsrs	r3, r3, #27
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80056b8:	4b28      	ldr	r3, [pc, #160]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 80056c4:	2311      	movs	r3, #17
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	e001      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 80056ca:	2307      	movs	r3, #7
 80056cc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d6:	61fb      	str	r3, [r7, #28]
      break;
 80056d8:	f000 bc8f 	b.w	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80056dc:	4b1f      	ldr	r3, [pc, #124]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80056ee:	d016      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80056f6:	f200 809b 	bhi.w	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005700:	d032      	beq.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005708:	f200 8092 	bhi.w	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 8084 	beq.w	800581c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800571a:	d052      	beq.n	80057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 800571c:	e088      	b.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800571e:	4b0f      	ldr	r3, [pc, #60]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b02      	cmp	r3, #2
 8005728:	f040 8084 	bne.w	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800572c:	4b0b      	ldr	r3, [pc, #44]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8005738:	4b08      	ldr	r3, [pc, #32]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	e005      	b.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	4a03      	ldr	r2, [pc, #12]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005756:	61fb      	str	r3, [r7, #28]
          break;
 8005758:	e06c      	b.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800575a:	bf00      	nop
 800575c:	40021000 	.word	0x40021000
 8005760:	080107ec 	.word	0x080107ec
 8005764:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005768:	4ba5      	ldr	r3, [pc, #660]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005770:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005774:	d160      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005776:	4ba2      	ldr	r3, [pc, #648]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800577e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005782:	d159      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005784:	4b9e      	ldr	r3, [pc, #632]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800578e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	fb03 f202 	mul.w	r2, r3, r2
 8005798:	4b99      	ldr	r3, [pc, #612]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	3301      	adds	r3, #1
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80057aa:	4b95      	ldr	r3, [pc, #596]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	0d5b      	lsrs	r3, r3, #21
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	3301      	adds	r3, #1
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	61fb      	str	r3, [r7, #28]
          break;
 80057c0:	e03a      	b.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80057c2:	4b8f      	ldr	r3, [pc, #572]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ce:	d135      	bne.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80057d0:	4b8b      	ldr	r3, [pc, #556]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057dc:	d12e      	bne.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80057de:	4b88      	ldr	r3, [pc, #544]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	0a1b      	lsrs	r3, r3, #8
 80057e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	fb03 f202 	mul.w	r2, r3, r2
 80057f2:	4b83      	ldr	r3, [pc, #524]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	091b      	lsrs	r3, r3, #4
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	3301      	adds	r3, #1
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005804:	4b7e      	ldr	r3, [pc, #504]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	0d5b      	lsrs	r3, r3, #21
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	3301      	adds	r3, #1
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	fbb2 f3f3 	udiv	r3, r2, r3
 8005818:	61fb      	str	r3, [r7, #28]
          break;
 800581a:	e00f      	b.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800581c:	4b78      	ldr	r3, [pc, #480]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800581e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d10a      	bne.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800582a:	4b76      	ldr	r3, [pc, #472]	; (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800582c:	61fb      	str	r3, [r7, #28]
          break;
 800582e:	e007      	b.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8005830:	bf00      	nop
 8005832:	e3e2      	b.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005834:	bf00      	nop
 8005836:	e3e0      	b.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005838:	bf00      	nop
 800583a:	e3de      	b.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800583c:	bf00      	nop
 800583e:	e3dc      	b.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005840:	bf00      	nop
      break;
 8005842:	e3da      	b.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005844:	4b6e      	ldr	r3, [pc, #440]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b03      	cmp	r3, #3
 8005854:	d827      	bhi.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8005856:	a201      	add	r2, pc, #4	; (adr r2, 800585c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8005858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585c:	0800586d 	.word	0x0800586d
 8005860:	08005875 	.word	0x08005875
 8005864:	0800587d 	.word	0x0800587d
 8005868:	08005891 	.word	0x08005891
          frequency = HAL_RCC_GetPCLK2Freq();
 800586c:	f7ff f81a 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8005870:	61f8      	str	r0, [r7, #28]
          break;
 8005872:	e01d      	b.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005874:	f7fe ff6a 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8005878:	61f8      	str	r0, [r7, #28]
          break;
 800587a:	e019      	b.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800587c:	4b60      	ldr	r3, [pc, #384]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005888:	d10f      	bne.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 800588a:	4b5f      	ldr	r3, [pc, #380]	; (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800588c:	61fb      	str	r3, [r7, #28]
          break;
 800588e:	e00c      	b.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005890:	4b5b      	ldr	r3, [pc, #364]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d107      	bne.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800589e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058a2:	61fb      	str	r3, [r7, #28]
          break;
 80058a4:	e003      	b.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 80058a6:	bf00      	nop
 80058a8:	e3a8      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80058aa:	bf00      	nop
 80058ac:	e3a6      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80058ae:	bf00      	nop
        break;
 80058b0:	e3a4      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80058b2:	4b53      	ldr	r3, [pc, #332]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b0c      	cmp	r3, #12
 80058c2:	d83a      	bhi.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	08005901 	.word	0x08005901
 80058d0:	0800593b 	.word	0x0800593b
 80058d4:	0800593b 	.word	0x0800593b
 80058d8:	0800593b 	.word	0x0800593b
 80058dc:	08005909 	.word	0x08005909
 80058e0:	0800593b 	.word	0x0800593b
 80058e4:	0800593b 	.word	0x0800593b
 80058e8:	0800593b 	.word	0x0800593b
 80058ec:	08005911 	.word	0x08005911
 80058f0:	0800593b 	.word	0x0800593b
 80058f4:	0800593b 	.word	0x0800593b
 80058f8:	0800593b 	.word	0x0800593b
 80058fc:	08005925 	.word	0x08005925
          frequency = HAL_RCC_GetPCLK1Freq();
 8005900:	f7fe ffba 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005904:	61f8      	str	r0, [r7, #28]
          break;
 8005906:	e01d      	b.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8005908:	f7fe ff20 	bl	800474c <HAL_RCC_GetSysClockFreq>
 800590c:	61f8      	str	r0, [r7, #28]
          break;
 800590e:	e019      	b.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005910:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591c:	d10f      	bne.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 800591e:	4b3a      	ldr	r3, [pc, #232]	; (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005920:	61fb      	str	r3, [r7, #28]
          break;
 8005922:	e00c      	b.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005924:	4b36      	ldr	r3, [pc, #216]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b02      	cmp	r3, #2
 8005930:	d107      	bne.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005936:	61fb      	str	r3, [r7, #28]
          break;
 8005938:	e003      	b.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800593a:	bf00      	nop
 800593c:	e35e      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800593e:	bf00      	nop
 8005940:	e35c      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005942:	bf00      	nop
        break;
 8005944:	e35a      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005946:	4b2e      	ldr	r3, [pc, #184]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b30      	cmp	r3, #48	; 0x30
 8005956:	d021      	beq.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b30      	cmp	r3, #48	; 0x30
 800595c:	d829      	bhi.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b20      	cmp	r3, #32
 8005962:	d011      	beq.n	8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b20      	cmp	r3, #32
 8005968:	d823      	bhi.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b10      	cmp	r3, #16
 8005974:	d004      	beq.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8005976:	e01c      	b.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005978:	f7fe ff7e 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 800597c:	61f8      	str	r0, [r7, #28]
          break;
 800597e:	e01d      	b.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8005980:	f7fe fee4 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8005984:	61f8      	str	r0, [r7, #28]
          break;
 8005986:	e019      	b.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005988:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005994:	d10f      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8005996:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005998:	61fb      	str	r3, [r7, #28]
          break;
 800599a:	e00c      	b.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800599c:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800599e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d107      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80059aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ae:	61fb      	str	r3, [r7, #28]
          break;
 80059b0:	e003      	b.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80059b2:	bf00      	nop
 80059b4:	e322      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059b6:	bf00      	nop
 80059b8:	e320      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80059ba:	bf00      	nop
        break;
 80059bc:	e31e      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80059be:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2bc0      	cmp	r3, #192	; 0xc0
 80059ce:	d027      	beq.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2bc0      	cmp	r3, #192	; 0xc0
 80059d4:	d82f      	bhi.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b80      	cmp	r3, #128	; 0x80
 80059da:	d017      	beq.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b80      	cmp	r3, #128	; 0x80
 80059e0:	d829      	bhi.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b40      	cmp	r3, #64	; 0x40
 80059ec:	d004      	beq.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80059ee:	e022      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059f0:	f7fe ff42 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 80059f4:	61f8      	str	r0, [r7, #28]
          break;
 80059f6:	e023      	b.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80059f8:	f7fe fea8 	bl	800474c <HAL_RCC_GetSysClockFreq>
 80059fc:	61f8      	str	r0, [r7, #28]
          break;
 80059fe:	e01f      	b.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005a00:	40021000 	.word	0x40021000
 8005a04:	02dc6c00 	.word	0x02dc6c00
 8005a08:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a0c:	4b9b      	ldr	r3, [pc, #620]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a18:	d10f      	bne.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8005a1a:	4b99      	ldr	r3, [pc, #612]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a1c:	61fb      	str	r3, [r7, #28]
          break;
 8005a1e:	e00c      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a20:	4b96      	ldr	r3, [pc, #600]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d107      	bne.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8005a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a32:	61fb      	str	r3, [r7, #28]
          break;
 8005a34:	e003      	b.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8005a36:	bf00      	nop
 8005a38:	e2e0      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a3a:	bf00      	nop
 8005a3c:	e2de      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a3e:	bf00      	nop
        break;
 8005a40:	e2dc      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005a42:	4b8e      	ldr	r3, [pc, #568]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a54:	d025      	beq.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a5c:	d82c      	bhi.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a64:	d013      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a6c:	d824      	bhi.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d004      	beq.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7a:	d004      	beq.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8005a7c:	e01c      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a7e:	f7fe fefb 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005a82:	61f8      	str	r0, [r7, #28]
          break;
 8005a84:	e01d      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a86:	f7fe fe61 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8005a8a:	61f8      	str	r0, [r7, #28]
          break;
 8005a8c:	e019      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a8e:	4b7b      	ldr	r3, [pc, #492]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a9a:	d10f      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8005a9c:	4b78      	ldr	r3, [pc, #480]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a9e:	61fb      	str	r3, [r7, #28]
          break;
 8005aa0:	e00c      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005aa2:	4b76      	ldr	r3, [pc, #472]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d107      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8005ab0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab4:	61fb      	str	r3, [r7, #28]
          break;
 8005ab6:	e003      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8005ab8:	bf00      	nop
 8005aba:	e29f      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005abc:	bf00      	nop
 8005abe:	e29d      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ac0:	bf00      	nop
        break;
 8005ac2:	e29b      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005ac4:	4b6d      	ldr	r3, [pc, #436]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ad6:	d025      	beq.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ade:	d82c      	bhi.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae6:	d013      	beq.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aee:	d824      	bhi.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d004      	beq.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005afc:	d004      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8005afe:	e01c      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b00:	f7fe feba 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005b04:	61f8      	str	r0, [r7, #28]
          break;
 8005b06:	e01d      	b.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b08:	f7fe fe20 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8005b0c:	61f8      	str	r0, [r7, #28]
          break;
 8005b0e:	e019      	b.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b10:	4b5a      	ldr	r3, [pc, #360]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1c:	d10f      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8005b1e:	4b58      	ldr	r3, [pc, #352]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005b20:	61fb      	str	r3, [r7, #28]
          break;
 8005b22:	e00c      	b.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b24:	4b55      	ldr	r3, [pc, #340]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d107      	bne.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8005b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b36:	61fb      	str	r3, [r7, #28]
          break;
 8005b38:	e003      	b.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8005b3a:	bf00      	nop
 8005b3c:	e25e      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b3e:	bf00      	nop
 8005b40:	e25c      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b42:	bf00      	nop
        break;
 8005b44:	e25a      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005b46:	4b4d      	ldr	r3, [pc, #308]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b58:	d007      	beq.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b60:	d12f      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b62:	f7fe fdf3 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8005b66:	61f8      	str	r0, [r7, #28]
          break;
 8005b68:	e02e      	b.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005b6a:	4b44      	ldr	r3, [pc, #272]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b76:	d126      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8005b78:	4b40      	ldr	r3, [pc, #256]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d020      	beq.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b84:	4b3d      	ldr	r3, [pc, #244]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	0a1b      	lsrs	r3, r3, #8
 8005b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b8e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	fb03 f202 	mul.w	r2, r3, r2
 8005b98:	4b38      	ldr	r3, [pc, #224]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	091b      	lsrs	r3, r3, #4
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005baa:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	0e5b      	lsrs	r3, r3, #25
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbe:	61fb      	str	r3, [r7, #28]
          break;
 8005bc0:	e001      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8005bc2:	bf00      	nop
 8005bc4:	e21a      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005bc6:	bf00      	nop
        break;
 8005bc8:	e218      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005bca:	4b2c      	ldr	r3, [pc, #176]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005bdc:	f7fe fe62 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8005be0:	61f8      	str	r0, [r7, #28]
        break;
 8005be2:	e20b      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005be4:	f7fe fdb2 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8005be8:	61f8      	str	r0, [r7, #28]
        break;
 8005bea:	e207      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005bec:	4b23      	ldr	r3, [pc, #140]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bf2:	f003 0318 	and.w	r3, r3, #24
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d010      	beq.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d834      	bhi.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d024      	beq.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8005c10:	e02d      	b.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005c12:	69b9      	ldr	r1, [r7, #24]
 8005c14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c18:	f000 fbe2 	bl	80063e0 <RCCEx_GetSAIxPeriphCLKFreq>
 8005c1c:	61f8      	str	r0, [r7, #28]
          break;
 8005c1e:	e02b      	b.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005c20:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d122      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005c2c:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	091b      	lsrs	r3, r3, #4
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	e005      	b.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	4a0c      	ldr	r2, [pc, #48]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c56:	61fb      	str	r3, [r7, #28]
          break;
 8005c58:	e00b      	b.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c5a:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c66:	d106      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005c6a:	61fb      	str	r3, [r7, #28]
          break;
 8005c6c:	e003      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8005c6e:	bf00      	nop
 8005c70:	e1c4      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c72:	bf00      	nop
 8005c74:	e1c2      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c76:	bf00      	nop
        break;
 8005c78:	e1c0      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	00f42400 	.word	0x00f42400
 8005c84:	080107ec 	.word	0x080107ec
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005c88:	4b96      	ldr	r3, [pc, #600]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9a:	d013      	beq.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca2:	d819      	bhi.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb0:	d004      	beq.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8005cb2:	e011      	b.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cb4:	f7fe fde0 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005cb8:	61f8      	str	r0, [r7, #28]
          break;
 8005cba:	e010      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cbc:	f7fe fd46 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8005cc0:	61f8      	str	r0, [r7, #28]
          break;
 8005cc2:	e00c      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cc4:	4b87      	ldr	r3, [pc, #540]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd0:	d104      	bne.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8005cd2:	4b85      	ldr	r3, [pc, #532]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cd4:	61fb      	str	r3, [r7, #28]
          break;
 8005cd6:	e001      	b.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8005cd8:	bf00      	nop
 8005cda:	e18f      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005cdc:	bf00      	nop
        break;
 8005cde:	e18d      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005ce0:	4b80      	ldr	r3, [pc, #512]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf2:	d013      	beq.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfa:	d819      	bhi.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d08:	d004      	beq.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8005d0a:	e011      	b.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d0c:	f7fe fdb4 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005d10:	61f8      	str	r0, [r7, #28]
          break;
 8005d12:	e010      	b.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d14:	f7fe fd1a 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8005d18:	61f8      	str	r0, [r7, #28]
          break;
 8005d1a:	e00c      	b.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d1c:	4b71      	ldr	r3, [pc, #452]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d28:	d104      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8005d2a:	4b6f      	ldr	r3, [pc, #444]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d2c:	61fb      	str	r3, [r7, #28]
          break;
 8005d2e:	e001      	b.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8005d30:	bf00      	nop
 8005d32:	e163      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d34:	bf00      	nop
        break;
 8005d36:	e161      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005d38:	4b6a      	ldr	r3, [pc, #424]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d4a:	d013      	beq.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d52:	d819      	bhi.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d60:	d004      	beq.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8005d62:	e011      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d64:	f7fe fd88 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005d68:	61f8      	str	r0, [r7, #28]
          break;
 8005d6a:	e010      	b.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d6c:	f7fe fcee 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8005d70:	61f8      	str	r0, [r7, #28]
          break;
 8005d72:	e00c      	b.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d74:	4b5b      	ldr	r3, [pc, #364]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d80:	d104      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8005d82:	4b59      	ldr	r3, [pc, #356]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d84:	61fb      	str	r3, [r7, #28]
          break;
 8005d86:	e001      	b.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8005d88:	bf00      	nop
 8005d8a:	e137      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d8c:	bf00      	nop
        break;
 8005d8e:	e135      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005d90:	4b54      	ldr	r3, [pc, #336]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d011      	beq.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d818      	bhi.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d004      	beq.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8005db4:	e011      	b.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005db6:	f7fe fd5f 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005dba:	61f8      	str	r0, [r7, #28]
          break;
 8005dbc:	e010      	b.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dbe:	f7fe fcc5 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8005dc2:	61f8      	str	r0, [r7, #28]
          break;
 8005dc4:	e00c      	b.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dc6:	4b47      	ldr	r3, [pc, #284]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd2:	d104      	bne.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8005dd4:	4b44      	ldr	r3, [pc, #272]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005dd6:	61fb      	str	r3, [r7, #28]
          break;
 8005dd8:	e001      	b.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8005dda:	bf00      	nop
 8005ddc:	e10e      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005dde:	bf00      	nop
        break;
 8005de0:	e10c      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005de2:	4b40      	ldr	r3, [pc, #256]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005df4:	d02c      	beq.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005dfc:	d833      	bhi.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e04:	d01a      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e0c:	d82b      	bhi.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e1a:	d004      	beq.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8005e1c:	e023      	b.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e1e:	f7fe fd2b 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005e22:	61f8      	str	r0, [r7, #28]
          break;
 8005e24:	e026      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e26:	4b2f      	ldr	r3, [pc, #188]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d11a      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8005e34:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e38:	61fb      	str	r3, [r7, #28]
          break;
 8005e3a:	e016      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e3c:	4b29      	ldr	r3, [pc, #164]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e48:	d111      	bne.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8005e4a:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005e4c:	61fb      	str	r3, [r7, #28]
          break;
 8005e4e:	e00e      	b.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e50:	4b24      	ldr	r3, [pc, #144]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d109      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8005e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e62:	61fb      	str	r3, [r7, #28]
          break;
 8005e64:	e005      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8005e66:	bf00      	nop
 8005e68:	e0c8      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e6a:	bf00      	nop
 8005e6c:	e0c6      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e6e:	bf00      	nop
 8005e70:	e0c4      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e72:	bf00      	nop
        break;
 8005e74:	e0c2      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005e76:	4b1b      	ldr	r3, [pc, #108]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e88:	d030      	beq.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e90:	d837      	bhi.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e98:	d01a      	beq.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea0:	d82f      	bhi.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eae:	d004      	beq.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8005eb0:	e027      	b.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005eb2:	f7fe fce1 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8005eb6:	61f8      	str	r0, [r7, #28]
          break;
 8005eb8:	e02a      	b.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005eba:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d11e      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8005ec8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005ecc:	61fb      	str	r3, [r7, #28]
          break;
 8005ece:	e01a      	b.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ed0:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005edc:	d115      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8005ede:	4b02      	ldr	r3, [pc, #8]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005ee0:	61fb      	str	r3, [r7, #28]
          break;
 8005ee2:	e012      	b.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005eec:	4b46      	ldr	r3, [pc, #280]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d109      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8005efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005efe:	61fb      	str	r3, [r7, #28]
          break;
 8005f00:	e005      	b.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8005f02:	bf00      	nop
 8005f04:	e07a      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005f06:	bf00      	nop
 8005f08:	e078      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005f0a:	bf00      	nop
 8005f0c:	e076      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005f0e:	bf00      	nop
        break;
 8005f10:	e074      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005f12:	4b3d      	ldr	r3, [pc, #244]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005f14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f18:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f24:	d02c      	beq.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f2c:	d855      	bhi.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f3a:	d004      	beq.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8005f3c:	e04d      	b.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f3e:	f7fe fc05 	bl	800474c <HAL_RCC_GetSysClockFreq>
 8005f42:	61f8      	str	r0, [r7, #28]
          break;
 8005f44:	e04e      	b.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f46:	4b30      	ldr	r3, [pc, #192]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d145      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f52:	4b2d      	ldr	r3, [pc, #180]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005f5e:	4b2a      	ldr	r3, [pc, #168]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	091b      	lsrs	r3, r3, #4
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	e005      	b.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8005f6a:	4b27      	ldr	r3, [pc, #156]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	4a25      	ldr	r2, [pc, #148]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f7c:	61fb      	str	r3, [r7, #28]
          break;
 8005f7e:	e02e      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005f80:	4b21      	ldr	r3, [pc, #132]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f8c:	d129      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005f8e:	4b1e      	ldr	r3, [pc, #120]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f9a:	d122      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f9c:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	0a1b      	lsrs	r3, r3, #8
 8005fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	fb03 f202 	mul.w	r2, r3, r2
 8005fb0:	4b15      	ldr	r3, [pc, #84]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	091b      	lsrs	r3, r3, #4
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	3301      	adds	r3, #1
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005fc2:	4b11      	ldr	r3, [pc, #68]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	0d5b      	lsrs	r3, r3, #21
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	3301      	adds	r3, #1
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	61fb      	str	r3, [r7, #28]
          break;
 8005fd8:	e003      	b.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8005fda:	bf00      	nop
 8005fdc:	e00e      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005fde:	bf00      	nop
 8005fe0:	e00c      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005fe2:	bf00      	nop
        break;
 8005fe4:	e00a      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005fe6:	bf00      	nop
 8005fe8:	e008      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005fea:	bf00      	nop
 8005fec:	e006      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e004      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e002      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005ffa:	bf00      	nop
    }
  }

  return(frequency);
 8005ffc:	69fb      	ldr	r3, [r7, #28]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40021000 	.word	0x40021000
 800600c:	080107ec 	.word	0x080107ec

08006010 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800601e:	4b72      	ldr	r3, [pc, #456]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00e      	beq.n	8006048 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800602a:	4b6f      	ldr	r3, [pc, #444]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f003 0203 	and.w	r2, r3, #3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d103      	bne.n	8006042 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
       ||
 800603e:	2b00      	cmp	r3, #0
 8006040:	d142      	bne.n	80060c8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
 8006046:	e03f      	b.n	80060c8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b03      	cmp	r3, #3
 800604e:	d018      	beq.n	8006082 <RCCEx_PLLSAI1_Config+0x72>
 8006050:	2b03      	cmp	r3, #3
 8006052:	d825      	bhi.n	80060a0 <RCCEx_PLLSAI1_Config+0x90>
 8006054:	2b01      	cmp	r3, #1
 8006056:	d002      	beq.n	800605e <RCCEx_PLLSAI1_Config+0x4e>
 8006058:	2b02      	cmp	r3, #2
 800605a:	d009      	beq.n	8006070 <RCCEx_PLLSAI1_Config+0x60>
 800605c:	e020      	b.n	80060a0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800605e:	4b62      	ldr	r3, [pc, #392]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d11d      	bne.n	80060a6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800606e:	e01a      	b.n	80060a6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006070:	4b5d      	ldr	r3, [pc, #372]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006078:	2b00      	cmp	r3, #0
 800607a:	d116      	bne.n	80060aa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006080:	e013      	b.n	80060aa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006082:	4b59      	ldr	r3, [pc, #356]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10f      	bne.n	80060ae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800608e:	4b56      	ldr	r3, [pc, #344]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d109      	bne.n	80060ae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800609e:	e006      	b.n	80060ae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	73fb      	strb	r3, [r7, #15]
      break;
 80060a4:	e004      	b.n	80060b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80060a6:	bf00      	nop
 80060a8:	e002      	b.n	80060b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80060aa:	bf00      	nop
 80060ac:	e000      	b.n	80060b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80060ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d108      	bne.n	80060c8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80060b6:	4b4c      	ldr	r3, [pc, #304]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f023 0203 	bic.w	r2, r3, #3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4949      	ldr	r1, [pc, #292]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f040 8086 	bne.w	80061dc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060d0:	4b45      	ldr	r3, [pc, #276]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a44      	ldr	r2, [pc, #272]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060dc:	f7fb face 	bl	800167c <HAL_GetTick>
 80060e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060e2:	e009      	b.n	80060f8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060e4:	f7fb faca 	bl	800167c <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d902      	bls.n	80060f8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	73fb      	strb	r3, [r7, #15]
        break;
 80060f6:	e005      	b.n	8006104 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060f8:	4b3b      	ldr	r3, [pc, #236]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1ef      	bne.n	80060e4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d168      	bne.n	80061dc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d113      	bne.n	8006138 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006110:	4b35      	ldr	r3, [pc, #212]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006112:	691a      	ldr	r2, [r3, #16]
 8006114:	4b35      	ldr	r3, [pc, #212]	; (80061ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8006116:	4013      	ands	r3, r2
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6892      	ldr	r2, [r2, #8]
 800611c:	0211      	lsls	r1, r2, #8
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	68d2      	ldr	r2, [r2, #12]
 8006122:	06d2      	lsls	r2, r2, #27
 8006124:	4311      	orrs	r1, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6852      	ldr	r2, [r2, #4]
 800612a:	3a01      	subs	r2, #1
 800612c:	0112      	lsls	r2, r2, #4
 800612e:	430a      	orrs	r2, r1
 8006130:	492d      	ldr	r1, [pc, #180]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006132:	4313      	orrs	r3, r2
 8006134:	610b      	str	r3, [r1, #16]
 8006136:	e02d      	b.n	8006194 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d115      	bne.n	800616a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800613e:	4b2a      	ldr	r3, [pc, #168]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	4b2b      	ldr	r3, [pc, #172]	; (80061f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006144:	4013      	ands	r3, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6892      	ldr	r2, [r2, #8]
 800614a:	0211      	lsls	r1, r2, #8
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6912      	ldr	r2, [r2, #16]
 8006150:	0852      	lsrs	r2, r2, #1
 8006152:	3a01      	subs	r2, #1
 8006154:	0552      	lsls	r2, r2, #21
 8006156:	4311      	orrs	r1, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6852      	ldr	r2, [r2, #4]
 800615c:	3a01      	subs	r2, #1
 800615e:	0112      	lsls	r2, r2, #4
 8006160:	430a      	orrs	r2, r1
 8006162:	4921      	ldr	r1, [pc, #132]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006164:	4313      	orrs	r3, r2
 8006166:	610b      	str	r3, [r1, #16]
 8006168:	e014      	b.n	8006194 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800616a:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	4b21      	ldr	r3, [pc, #132]	; (80061f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006170:	4013      	ands	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6892      	ldr	r2, [r2, #8]
 8006176:	0211      	lsls	r1, r2, #8
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6952      	ldr	r2, [r2, #20]
 800617c:	0852      	lsrs	r2, r2, #1
 800617e:	3a01      	subs	r2, #1
 8006180:	0652      	lsls	r2, r2, #25
 8006182:	4311      	orrs	r1, r2
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6852      	ldr	r2, [r2, #4]
 8006188:	3a01      	subs	r2, #1
 800618a:	0112      	lsls	r2, r2, #4
 800618c:	430a      	orrs	r2, r1
 800618e:	4916      	ldr	r1, [pc, #88]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006190:	4313      	orrs	r3, r2
 8006192:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006194:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a13      	ldr	r2, [pc, #76]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800619a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800619e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a0:	f7fb fa6c 	bl	800167c <HAL_GetTick>
 80061a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061a6:	e009      	b.n	80061bc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061a8:	f7fb fa68 	bl	800167c <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d902      	bls.n	80061bc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	73fb      	strb	r3, [r7, #15]
          break;
 80061ba:	e005      	b.n	80061c8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0ef      	beq.n	80061a8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061ce:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	4904      	ldr	r1, [pc, #16]	; (80061e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000
 80061ec:	07ff800f 	.word	0x07ff800f
 80061f0:	ff9f800f 	.word	0xff9f800f
 80061f4:	f9ff800f 	.word	0xf9ff800f

080061f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006206:	4b72      	ldr	r3, [pc, #456]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00e      	beq.n	8006230 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006212:	4b6f      	ldr	r3, [pc, #444]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f003 0203 	and.w	r2, r3, #3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d103      	bne.n	800622a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
       ||
 8006226:	2b00      	cmp	r3, #0
 8006228:	d142      	bne.n	80062b0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	73fb      	strb	r3, [r7, #15]
 800622e:	e03f      	b.n	80062b0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d018      	beq.n	800626a <RCCEx_PLLSAI2_Config+0x72>
 8006238:	2b03      	cmp	r3, #3
 800623a:	d825      	bhi.n	8006288 <RCCEx_PLLSAI2_Config+0x90>
 800623c:	2b01      	cmp	r3, #1
 800623e:	d002      	beq.n	8006246 <RCCEx_PLLSAI2_Config+0x4e>
 8006240:	2b02      	cmp	r3, #2
 8006242:	d009      	beq.n	8006258 <RCCEx_PLLSAI2_Config+0x60>
 8006244:	e020      	b.n	8006288 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006246:	4b62      	ldr	r3, [pc, #392]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d11d      	bne.n	800628e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006256:	e01a      	b.n	800628e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006258:	4b5d      	ldr	r3, [pc, #372]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006260:	2b00      	cmp	r3, #0
 8006262:	d116      	bne.n	8006292 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006268:	e013      	b.n	8006292 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800626a:	4b59      	ldr	r3, [pc, #356]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10f      	bne.n	8006296 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006276:	4b56      	ldr	r3, [pc, #344]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006286:	e006      	b.n	8006296 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	73fb      	strb	r3, [r7, #15]
      break;
 800628c:	e004      	b.n	8006298 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800628e:	bf00      	nop
 8006290:	e002      	b.n	8006298 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006292:	bf00      	nop
 8006294:	e000      	b.n	8006298 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006296:	bf00      	nop
    }

    if(status == HAL_OK)
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d108      	bne.n	80062b0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800629e:	4b4c      	ldr	r3, [pc, #304]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f023 0203 	bic.w	r2, r3, #3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4949      	ldr	r1, [pc, #292]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 8086 	bne.w	80063c4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80062b8:	4b45      	ldr	r3, [pc, #276]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a44      	ldr	r2, [pc, #272]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c4:	f7fb f9da 	bl	800167c <HAL_GetTick>
 80062c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062ca:	e009      	b.n	80062e0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062cc:	f7fb f9d6 	bl	800167c <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d902      	bls.n	80062e0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	73fb      	strb	r3, [r7, #15]
        break;
 80062de:	e005      	b.n	80062ec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062e0:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1ef      	bne.n	80062cc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d168      	bne.n	80063c4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d113      	bne.n	8006320 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062f8:	4b35      	ldr	r3, [pc, #212]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	4b35      	ldr	r3, [pc, #212]	; (80063d4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80062fe:	4013      	ands	r3, r2
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6892      	ldr	r2, [r2, #8]
 8006304:	0211      	lsls	r1, r2, #8
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	68d2      	ldr	r2, [r2, #12]
 800630a:	06d2      	lsls	r2, r2, #27
 800630c:	4311      	orrs	r1, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6852      	ldr	r2, [r2, #4]
 8006312:	3a01      	subs	r2, #1
 8006314:	0112      	lsls	r2, r2, #4
 8006316:	430a      	orrs	r2, r1
 8006318:	492d      	ldr	r1, [pc, #180]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800631a:	4313      	orrs	r3, r2
 800631c:	614b      	str	r3, [r1, #20]
 800631e:	e02d      	b.n	800637c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d115      	bne.n	8006352 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006326:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006328:	695a      	ldr	r2, [r3, #20]
 800632a:	4b2b      	ldr	r3, [pc, #172]	; (80063d8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800632c:	4013      	ands	r3, r2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6892      	ldr	r2, [r2, #8]
 8006332:	0211      	lsls	r1, r2, #8
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6912      	ldr	r2, [r2, #16]
 8006338:	0852      	lsrs	r2, r2, #1
 800633a:	3a01      	subs	r2, #1
 800633c:	0552      	lsls	r2, r2, #21
 800633e:	4311      	orrs	r1, r2
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6852      	ldr	r2, [r2, #4]
 8006344:	3a01      	subs	r2, #1
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	430a      	orrs	r2, r1
 800634a:	4921      	ldr	r1, [pc, #132]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800634c:	4313      	orrs	r3, r2
 800634e:	614b      	str	r3, [r1, #20]
 8006350:	e014      	b.n	800637c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006352:	4b1f      	ldr	r3, [pc, #124]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	4b21      	ldr	r3, [pc, #132]	; (80063dc <RCCEx_PLLSAI2_Config+0x1e4>)
 8006358:	4013      	ands	r3, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6892      	ldr	r2, [r2, #8]
 800635e:	0211      	lsls	r1, r2, #8
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6952      	ldr	r2, [r2, #20]
 8006364:	0852      	lsrs	r2, r2, #1
 8006366:	3a01      	subs	r2, #1
 8006368:	0652      	lsls	r2, r2, #25
 800636a:	4311      	orrs	r1, r2
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6852      	ldr	r2, [r2, #4]
 8006370:	3a01      	subs	r2, #1
 8006372:	0112      	lsls	r2, r2, #4
 8006374:	430a      	orrs	r2, r1
 8006376:	4916      	ldr	r1, [pc, #88]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006378:	4313      	orrs	r3, r2
 800637a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800637c:	4b14      	ldr	r3, [pc, #80]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006386:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006388:	f7fb f978 	bl	800167c <HAL_GetTick>
 800638c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800638e:	e009      	b.n	80063a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006390:	f7fb f974 	bl	800167c <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d902      	bls.n	80063a4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	73fb      	strb	r3, [r7, #15]
          break;
 80063a2:	e005      	b.n	80063b0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0ef      	beq.n	8006390 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d106      	bne.n	80063c4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063b6:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063b8:	695a      	ldr	r2, [r3, #20]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	4904      	ldr	r1, [pc, #16]	; (80063d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40021000 	.word	0x40021000
 80063d4:	07ff800f 	.word	0x07ff800f
 80063d8:	ff9f800f 	.word	0xff9f800f
 80063dc:	f9ff800f 	.word	0xf9ff800f

080063e0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b089      	sub	sp, #36	; 0x24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fc:	d10b      	bne.n	8006416 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80063fe:	4b7e      	ldr	r3, [pc, #504]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006400:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006404:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006408:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b60      	cmp	r3, #96	; 0x60
 800640e:	d112      	bne.n	8006436 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006410:	4b7a      	ldr	r3, [pc, #488]	; (80065fc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	e00f      	b.n	8006436 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641c:	d10b      	bne.n	8006436 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800641e:	4b76      	ldr	r3, [pc, #472]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006424:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006428:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006430:	d101      	bne.n	8006436 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006432:	4b72      	ldr	r3, [pc, #456]	; (80065fc <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006434:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f040 80d6 	bne.w	80065ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b40      	cmp	r3, #64	; 0x40
 8006446:	d003      	beq.n	8006450 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800644e:	d13b      	bne.n	80064c8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006450:	4b69      	ldr	r3, [pc, #420]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800645c:	f040 80c4 	bne.w	80065e8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006460:	4b65      	ldr	r3, [pc, #404]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 80bd 	beq.w	80065e8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800646e:	4b62      	ldr	r3, [pc, #392]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	091b      	lsrs	r3, r3, #4
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	3301      	adds	r3, #1
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006482:	4b5d      	ldr	r3, [pc, #372]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800648c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800648e:	4b5a      	ldr	r3, [pc, #360]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	0edb      	lsrs	r3, r3, #27
 8006494:	f003 031f 	and.w	r3, r3, #31
 8006498:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80064a0:	4b55      	ldr	r3, [pc, #340]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80064ac:	2311      	movs	r3, #17
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	e001      	b.n	80064b6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80064b2:	2307      	movs	r3, #7
 80064b4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	fb03 f202 	mul.w	r2, r3, r2
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80064c6:	e08f      	b.n	80065e8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d13a      	bne.n	8006544 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80064ce:	4b4a      	ldr	r3, [pc, #296]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064da:	f040 8086 	bne.w	80065ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80064de:	4b46      	ldr	r3, [pc, #280]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d07f      	beq.n	80065ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80064ea:	4b43      	ldr	r3, [pc, #268]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	091b      	lsrs	r3, r3, #4
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	3301      	adds	r3, #1
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80064fe:	4b3e      	ldr	r3, [pc, #248]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006508:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800650a:	4b3b      	ldr	r3, [pc, #236]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	0edb      	lsrs	r3, r3, #27
 8006510:	f003 031f 	and.w	r3, r3, #31
 8006514:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800651c:	4b36      	ldr	r3, [pc, #216]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006528:	2311      	movs	r3, #17
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	e001      	b.n	8006532 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800652e:	2307      	movs	r3, #7
 8006530:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	fb03 f202 	mul.w	r2, r3, r2
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006540:	61fb      	str	r3, [r7, #28]
 8006542:	e052      	b.n	80065ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b80      	cmp	r3, #128	; 0x80
 8006548:	d003      	beq.n	8006552 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006550:	d109      	bne.n	8006566 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006552:	4b29      	ldr	r3, [pc, #164]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800655a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800655e:	d144      	bne.n	80065ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006560:	4b27      	ldr	r3, [pc, #156]	; (8006600 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006562:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006564:	e041      	b.n	80065ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b20      	cmp	r3, #32
 800656a:	d003      	beq.n	8006574 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006572:	d13a      	bne.n	80065ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006574:	4b20      	ldr	r3, [pc, #128]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800657c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006580:	d133      	bne.n	80065ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006582:	4b1d      	ldr	r3, [pc, #116]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d02d      	beq.n	80065ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800658e:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	091b      	lsrs	r3, r3, #4
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	3301      	adds	r3, #1
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80065a2:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	0a1b      	lsrs	r3, r3, #8
 80065a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ac:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80065ae:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	0edb      	lsrs	r3, r3, #27
 80065b4:	f003 031f 	and.w	r3, r3, #31
 80065b8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80065c0:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80065cc:	2311      	movs	r3, #17
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e001      	b.n	80065d6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80065d2:	2307      	movs	r3, #7
 80065d4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	fb03 f202 	mul.w	r2, r3, r2
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	e000      	b.n	80065ea <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80065e8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80065ea:	69fb      	ldr	r3, [r7, #28]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3724      	adds	r7, #36	; 0x24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	40021000 	.word	0x40021000
 80065fc:	001fff68 	.word	0x001fff68
 8006600:	00f42400 	.word	0x00f42400

08006604 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08a      	sub	sp, #40	; 0x28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e078      	b.n	8006708 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d105      	bne.n	800662e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fa fd91 	bl	8001150 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2203      	movs	r2, #3
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f86a 	bl	8006710 <HAL_SD_InitCard>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e060      	b.n	8006708 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006646:	f107 0308 	add.w	r3, r7, #8
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fdb5 	bl	80071bc <HAL_SD_GetCardStatus>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e055      	b.n	8006708 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800665c:	7e3b      	ldrb	r3, [r7, #24]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006662:	7e7b      	ldrb	r3, [r7, #25]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666c:	2b01      	cmp	r3, #1
 800666e:	d10a      	bne.n	8006686 <HAL_SD_Init+0x82>
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <HAL_SD_Init+0x78>
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006682:	65da      	str	r2, [r3, #92]	; 0x5c
 8006684:	e00b      	b.n	800669e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668a:	2b01      	cmp	r3, #1
 800668c:	d104      	bne.n	8006698 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006694:	65da      	str	r2, [r3, #92]	; 0x5c
 8006696:	e002      	b.n	800669e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fe6b 	bl	8007380 <HAL_SD_ConfigWideBusOperation>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e029      	b.n	8006708 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80066b4:	f7fa ffe2 	bl	800167c <HAL_GetTick>
 80066b8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80066ba:	e014      	b.n	80066e6 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80066bc:	f7fa ffde 	bl	800167c <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ca:	d10c      	bne.n	80066e6 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e010      	b.n	8006708 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 ff5e 	bl	80075a8 <HAL_SD_GetCardState>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d1e4      	bne.n	80066bc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3728      	adds	r7, #40	; 0x28
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006710:	b5b0      	push	{r4, r5, r7, lr}
 8006712:	b08e      	sub	sp, #56	; 0x38
 8006714:	af04      	add	r7, sp, #16
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006718:	2300      	movs	r3, #0
 800671a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006724:	2300      	movs	r3, #0
 8006726:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006728:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800672c:	f7fe fd50 	bl	80051d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006730:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	2b00      	cmp	r3, #0
 8006736:	d109      	bne.n	800674c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e079      	b.n	8006840 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	0a1b      	lsrs	r3, r3, #8
 8006750:	4a3d      	ldr	r2, [pc, #244]	; (8006848 <HAL_SD_InitCard+0x138>)
 8006752:	fba2 2303 	umull	r2, r3, r2, r3
 8006756:	091b      	lsrs	r3, r3, #4
 8006758:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d107      	bne.n	8006778 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0210 	orr.w	r2, r2, #16
 8006776:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681d      	ldr	r5, [r3, #0]
 800677c:	466c      	mov	r4, sp
 800677e:	f107 0314 	add.w	r3, r7, #20
 8006782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006786:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800678a:	f107 0308 	add.w	r3, r7, #8
 800678e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006790:	4628      	mov	r0, r5
 8006792:	f002 f90f 	bl	80089b4 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f002 f952 	bl	8008a44 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80067ac:	4a27      	ldr	r2, [pc, #156]	; (800684c <HAL_SD_InitCard+0x13c>)
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b4:	3301      	adds	r3, #1
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fa ff6c 	bl	8001694 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 ffd3 	bl	8007768 <SD_PowerON>
 80067c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e02e      	b.n	8006840 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 ff00 	bl	80075e8 <SD_InitCard>
 80067e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	431a      	orrs	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e01b      	b.n	8006840 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006810:	4618      	mov	r0, r3
 8006812:	f002 f9ad 	bl	8008b70 <SDMMC_CmdBlockLength>
 8006816:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00f      	beq.n	800683e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a0b      	ldr	r2, [pc, #44]	; (8006850 <HAL_SD_InitCard+0x140>)
 8006824:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3728      	adds	r7, #40	; 0x28
 8006844:	46bd      	mov	sp, r7
 8006846:	bdb0      	pop	{r4, r5, r7, pc}
 8006848:	014f8b59 	.word	0x014f8b59
 800684c:	00012110 	.word	0x00012110
 8006850:	1fe00fff 	.word	0x1fe00fff

08006854 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08c      	sub	sp, #48	; 0x30
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d107      	bne.n	800687c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e08d      	b.n	8006998 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b01      	cmp	r3, #1
 8006886:	f040 8086 	bne.w	8006996 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	441a      	add	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	429a      	cmp	r2, r3
 800689c:	d907      	bls.n	80068ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e074      	b.n	8006998 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2203      	movs	r2, #3
 80068b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2200      	movs	r2, #0
 80068bc:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	025a      	lsls	r2, r3, #9
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d002      	beq.n	80068da <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	025b      	lsls	r3, r3, #9
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	025b      	lsls	r3, r3, #9
 80068e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80068e6:	2390      	movs	r3, #144	; 0x90
 80068e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80068ea:	2302      	movs	r3, #2
 80068ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80068f2:	2300      	movs	r3, #0
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f107 0210 	add.w	r2, r7, #16
 80068fe:	4611      	mov	r1, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f002 f909 	bl	8008b18 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006914:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2201      	movs	r2, #1
 8006924:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d90a      	bls.n	8006942 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2282      	movs	r2, #130	; 0x82
 8006930:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006938:	4618      	mov	r0, r3
 800693a:	f002 f95f 	bl	8008bfc <SDMMC_CmdReadMultiBlock>
 800693e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006940:	e009      	b.n	8006956 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2281      	movs	r2, #129	; 0x81
 8006946:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800694e:	4618      	mov	r0, r3
 8006950:	f002 f931 	bl	8008bb6 <SDMMC_CmdReadSingleBlock>
 8006954:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d012      	beq.n	8006982 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0f      	ldr	r2, [pc, #60]	; (80069a0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	431a      	orrs	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e00a      	b.n	8006998 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006990:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	e000      	b.n	8006998 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006996:	2302      	movs	r3, #2
  }
}
 8006998:	4618      	mov	r0, r3
 800699a:	3730      	adds	r7, #48	; 0x30
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	1fe00fff 	.word	0x1fe00fff

080069a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08c      	sub	sp, #48	; 0x30
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d107      	bne.n	80069cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e08d      	b.n	8006ae8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	f040 8086 	bne.w	8006ae6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80069e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	441a      	add	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d907      	bls.n	80069fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e074      	b.n	8006ae8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2203      	movs	r2, #3
 8006a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	025a      	lsls	r2, r3, #9
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d002      	beq.n	8006a2a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	025b      	lsls	r3, r3, #9
 8006a28:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a2e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	025b      	lsls	r3, r3, #9
 8006a34:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006a36:	2390      	movs	r3, #144	; 0x90
 8006a38:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f107 0210 	add.w	r2, r7, #16
 8006a4e:	4611      	mov	r1, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f002 f861 	bl	8008b18 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a64:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2201      	movs	r2, #1
 8006a74:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d90a      	bls.n	8006a92 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	22a0      	movs	r2, #160	; 0xa0
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f002 f8fd 	bl	8008c88 <SDMMC_CmdWriteMultiBlock>
 8006a8e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006a90:	e009      	b.n	8006aa6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2290      	movs	r2, #144	; 0x90
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f002 f8cf 	bl	8008c42 <SDMMC_CmdWriteSingleBlock>
 8006aa4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d012      	beq.n	8006ad2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a0f      	ldr	r2, [pc, #60]	; (8006af0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aba:	431a      	orrs	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e00a      	b.n	8006ae8 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006ae0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	e000      	b.n	8006ae8 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006ae6:	2302      	movs	r3, #2
  }
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3730      	adds	r7, #48	; 0x30
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	1fe00fff 	.word	0x1fe00fff

08006af4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d008      	beq.n	8006b22 <HAL_SD_IRQHandler+0x2e>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 f98e 	bl	8007e3c <SD_Read_IT>
 8006b20:	e199      	b.n	8006e56 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 80ae 	beq.w	8006c8e <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b3a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6812      	ldr	r2, [r2, #0]
 8006b46:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006b4a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006b4e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b6e:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f003 0308 	and.w	r3, r3, #8
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d038      	beq.n	8006bec <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <HAL_SD_IRQHandler+0x9a>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d011      	beq.n	8006bb2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f002 f89c 	bl	8008cd0 <SDMMC_CmdStopTransfer>
 8006b98:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d008      	beq.n	8006bb2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f957 	bl	8006e60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a90      	ldr	r2, [pc, #576]	; (8006df8 <HAL_SD_IRQHandler+0x304>)
 8006bb8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d104      	bne.n	8006bdc <HAL_SD_IRQHandler+0xe8>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f002 fd6b 	bl	80096b8 <HAL_SD_RxCpltCallback>
 8006be2:	e138      	b.n	8006e56 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f002 fd5d 	bl	80096a4 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8006bea:	e134      	b.n	8006e56 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 812f 	beq.w	8006e56 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2200      	movs	r2, #0
 8006c06:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d104      	bne.n	8006c24 <HAL_SD_IRQHandler+0x130>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f003 0320 	and.w	r3, r3, #32
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d011      	beq.n	8006c48 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f002 f851 	bl	8008cd0 <SDMMC_CmdStopTransfer>
 8006c2e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d008      	beq.n	8006c48 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f90c 	bl	8006e60 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d104      	bne.n	8006c6a <HAL_SD_IRQHandler+0x176>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f002 fd1a 	bl	80096a4 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d105      	bne.n	8006c86 <HAL_SD_IRQHandler+0x192>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80e8 	beq.w	8006e56 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f002 fd16 	bl	80096b8 <HAL_SD_RxCpltCallback>
}
 8006c8c:	e0e3      	b.n	8006e56 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <HAL_SD_IRQHandler+0x1ba>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 f919 	bl	8007ede <SD_Write_IT>
 8006cac:	e0d3      	b.n	8006e56 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 809f 	beq.w	8006dfc <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	f043 0202 	orr.w	r2, r3, #2
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	f043 0208 	orr.w	r2, r3, #8
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d005      	beq.n	8006d0c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d04:	f043 0220 	orr.w	r2, r3, #32
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1e:	f043 0210 	orr.w	r2, r3, #16
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a33      	ldr	r2, [pc, #204]	; (8006df8 <HAL_SD_IRQHandler+0x304>)
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006d3c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d4c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d6c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 ffac 	bl	8008cd0 <SDMMC_CmdStopTransfer>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d92:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d9c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f852 	bl	8006e60 <HAL_SD_ErrorCallback>
}
 8006dbc:	e04b      	b.n	8006e56 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d046      	beq.n	8006e56 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d042      	beq.n	8006e56 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006dde:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2200      	movs	r2, #0
 8006de6:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f835 	bl	8006e60 <HAL_SD_ErrorCallback>
}
 8006df6:	e02e      	b.n	8006e56 <HAL_SD_IRQHandler+0x362>
 8006df8:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d025      	beq.n	8006e56 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10c      	bne.n	8006e3c <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 f8d4 	bl	8007fda <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8006e32:	e010      	b.n	8006e56 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 f8bc 	bl	8007fb2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8006e3a:	e00c      	b.n	8006e56 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 f8bd 	bl	8007fc6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006e4c:	e003      	b.n	8006e56 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 f8a5 	bl	8007f9e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006e54:	e7ff      	b.n	8006e56 <HAL_SD_IRQHandler+0x362>
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop

08006e60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e82:	0f9b      	lsrs	r3, r3, #30
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8e:	0e9b      	lsrs	r3, r3, #26
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea0:	0e1b      	lsrs	r3, r3, #24
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	f003 0303 	and.w	r3, r3, #3
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ed4:	0d1b      	lsrs	r3, r3, #20
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ee0:	0c1b      	lsrs	r3, r3, #16
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef2:	0bdb      	lsrs	r3, r3, #15
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f04:	0b9b      	lsrs	r3, r3, #14
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f16:	0b5b      	lsrs	r3, r3, #13
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f28:	0b1b      	lsrs	r3, r3, #12
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d163      	bne.n	800700c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f48:	009a      	lsls	r2, r3, #2
 8006f4a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f4e:	4013      	ands	r3, r2
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f54:	0f92      	lsrs	r2, r2, #30
 8006f56:	431a      	orrs	r2, r3
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f60:	0edb      	lsrs	r3, r3, #27
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f72:	0e1b      	lsrs	r3, r3, #24
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f84:	0d5b      	lsrs	r3, r3, #21
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f96:	0c9b      	lsrs	r3, r3, #18
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fa8:	0bdb      	lsrs	r3, r3, #15
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	f003 0307 	and.w	r3, r3, #7
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	7e1b      	ldrb	r3, [r3, #24]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	3302      	adds	r3, #2
 8006fcc:	2201      	movs	r2, #1
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006fd6:	fb03 f202 	mul.w	r2, r3, r2
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	7a1b      	ldrb	r3, [r3, #8]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	2201      	movs	r2, #1
 8006fea:	409a      	lsls	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ff8:	0a52      	lsrs	r2, r2, #9
 8006ffa:	fb03 f202 	mul.w	r2, r3, r2
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007008:	659a      	str	r2, [r3, #88]	; 0x58
 800700a:	e031      	b.n	8007070 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007010:	2b01      	cmp	r3, #1
 8007012:	d11d      	bne.n	8007050 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007018:	041b      	lsls	r3, r3, #16
 800701a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007022:	0c1b      	lsrs	r3, r3, #16
 8007024:	431a      	orrs	r2, r3
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	3301      	adds	r3, #1
 8007030:	029a      	lsls	r2, r3, #10
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007044:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	659a      	str	r2, [r3, #88]	; 0x58
 800704e:	e00f      	b.n	8007070 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a58      	ldr	r2, [pc, #352]	; (80071b8 <HAL_SD_GetCardCSD+0x344>)
 8007056:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e09d      	b.n	80071ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007074:	0b9b      	lsrs	r3, r3, #14
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007086:	09db      	lsrs	r3, r3, #7
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800708e:	b2da      	uxtb	r2, r3
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a8:	0fdb      	lsrs	r3, r3, #31
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b4:	0f5b      	lsrs	r3, r3, #29
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	f003 0303 	and.w	r3, r3, #3
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070c6:	0e9b      	lsrs	r3, r3, #26
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d8:	0d9b      	lsrs	r3, r3, #22
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	f003 030f 	and.w	r3, r3, #15
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ea:	0d5b      	lsrs	r3, r3, #21
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007106:	0c1b      	lsrs	r3, r3, #16
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	b2da      	uxtb	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800711a:	0bdb      	lsrs	r3, r3, #15
 800711c:	b2db      	uxtb	r3, r3
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	b2da      	uxtb	r2, r3
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712e:	0b9b      	lsrs	r3, r3, #14
 8007130:	b2db      	uxtb	r3, r3
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	b2da      	uxtb	r2, r3
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007142:	0b5b      	lsrs	r3, r3, #13
 8007144:	b2db      	uxtb	r3, r3
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	b2da      	uxtb	r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007156:	0b1b      	lsrs	r3, r3, #12
 8007158:	b2db      	uxtb	r3, r3
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	b2da      	uxtb	r2, r3
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800716a:	0a9b      	lsrs	r3, r3, #10
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	b2da      	uxtb	r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800717e:	0a1b      	lsrs	r3, r3, #8
 8007180:	b2db      	uxtb	r3, r3
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	b2da      	uxtb	r2, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007192:	085b      	lsrs	r3, r3, #1
 8007194:	b2db      	uxtb	r3, r3
 8007196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800719a:	b2da      	uxtb	r2, r3
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	1fe00fff 	.word	0x1fe00fff

080071bc <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b094      	sub	sp, #80	; 0x50
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80071cc:	f107 0308 	add.w	r3, r7, #8
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fbd4 	bl	8007980 <SD_SendSDStatus>
 80071d8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80071da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d011      	beq.n	8007204 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a4f      	ldr	r2, [pc, #316]	; (8007324 <HAL_SD_GetCardStatus+0x168>)
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007202:	e070      	b.n	80072e6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	099b      	lsrs	r3, r3, #6
 8007208:	b2db      	uxtb	r3, r3
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	b2da      	uxtb	r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	b2da      	uxtb	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	b29b      	uxth	r3, r3
 800722a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800722e:	b29a      	uxth	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	0e1b      	lsrs	r3, r3, #24
 8007234:	b29b      	uxth	r3, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	b29a      	uxth	r2, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	061a      	lsls	r2, r3, #24
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800724a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	0a1b      	lsrs	r3, r3, #8
 8007250:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007254:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	0e1b      	lsrs	r3, r3, #24
 800725a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	b2da      	uxtb	r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b2da      	uxtb	r2, r3
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	0d1b      	lsrs	r3, r3, #20
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	b2da      	uxtb	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	0c1b      	lsrs	r3, r3, #16
 8007286:	b29b      	uxth	r3, r3
 8007288:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800728c:	b29a      	uxth	r2, r3
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	b29b      	uxth	r3, r3
 8007292:	b2db      	uxtb	r3, r3
 8007294:	b29b      	uxth	r3, r3
 8007296:	4313      	orrs	r3, r2
 8007298:	b29a      	uxth	r2, r3
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	0a9b      	lsrs	r3, r3, #10
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	0a1b      	lsrs	r3, r3, #8
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	091b      	lsrs	r3, r3, #4
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 030f 	and.w	r3, r3, #15
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	0e1b      	lsrs	r3, r3, #24
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072ee:	4618      	mov	r0, r3
 80072f0:	f001 fc3e 	bl	8008b70 <SDMMC_CmdBlockLength>
 80072f4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80072f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00d      	beq.n	8007318 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a08      	ldr	r2, [pc, #32]	; (8007324 <HAL_SD_GetCardStatus+0x168>)
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007308:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007318:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800731c:	4618      	mov	r0, r3
 800731e:	3750      	adds	r7, #80	; 0x50
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	1fe00fff 	.word	0x1fe00fff

08007328 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007380:	b5b0      	push	{r4, r5, r7, lr}
 8007382:	b090      	sub	sp, #64	; 0x40
 8007384:	af04      	add	r7, sp, #16
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2203      	movs	r2, #3
 8007394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739c:	2b03      	cmp	r3, #3
 800739e:	d02e      	beq.n	80073fe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a6:	d106      	bne.n	80073b6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
 80073b4:	e029      	b.n	800740a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073bc:	d10a      	bne.n	80073d4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fbd6 	bl	8007b70 <SD_WideBus_Enable>
 80073c4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	639a      	str	r2, [r3, #56]	; 0x38
 80073d2:	e01a      	b.n	800740a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fc13 	bl	8007c06 <SD_WideBus_Disable>
 80073e0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	639a      	str	r2, [r3, #56]	; 0x38
 80073ee:	e00c      	b.n	800740a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	639a      	str	r2, [r3, #56]	; 0x38
 80073fc:	e005      	b.n	800740a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a60      	ldr	r2, [pc, #384]	; (8007598 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007418:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007420:	e097      	b.n	8007552 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007422:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007426:	f7fd fed3 	bl	80051d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800742a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 8086 	beq.w	8007540 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695a      	ldr	r2, [r3, #20]
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	4952      	ldr	r1, [pc, #328]	; (800759c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007452:	fba1 1303 	umull	r1, r3, r1, r3
 8007456:	0e1b      	lsrs	r3, r3, #24
 8007458:	429a      	cmp	r2, r3
 800745a:	d303      	bcc.n	8007464 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	e05a      	b.n	800751a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746c:	d103      	bne.n	8007476 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	61fb      	str	r3, [r7, #28]
 8007474:	e051      	b.n	800751a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747e:	d126      	bne.n	80074ce <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10e      	bne.n	80074a6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	4a45      	ldr	r2, [pc, #276]	; (80075a0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d906      	bls.n	800749e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	4a42      	ldr	r2, [pc, #264]	; (800759c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007494:	fba2 2303 	umull	r2, r3, r2, r3
 8007498:	0e5b      	lsrs	r3, r3, #25
 800749a:	61fb      	str	r3, [r7, #28]
 800749c:	e03d      	b.n	800751a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	61fb      	str	r3, [r7, #28]
 80074a4:	e039      	b.n	800751a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b2:	4a3b      	ldr	r2, [pc, #236]	; (80075a0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d906      	bls.n	80074c6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	4a38      	ldr	r2, [pc, #224]	; (800759c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80074bc:	fba2 2303 	umull	r2, r3, r2, r3
 80074c0:	0e5b      	lsrs	r3, r3, #25
 80074c2:	61fb      	str	r3, [r7, #28]
 80074c4:	e029      	b.n	800751a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	e025      	b.n	800751a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10e      	bne.n	80074f4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	4a32      	ldr	r2, [pc, #200]	; (80075a4 <HAL_SD_ConfigWideBusOperation+0x224>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d906      	bls.n	80074ec <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	4a2e      	ldr	r2, [pc, #184]	; (800759c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	0e1b      	lsrs	r3, r3, #24
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	e016      	b.n	800751a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	61fb      	str	r3, [r7, #28]
 80074f2:	e012      	b.n	800751a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007500:	4a28      	ldr	r2, [pc, #160]	; (80075a4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d906      	bls.n	8007514 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	4a24      	ldr	r2, [pc, #144]	; (800759c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800750a:	fba2 2303 	umull	r2, r3, r2, r3
 800750e:	0e1b      	lsrs	r3, r3, #24
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	e002      	b.n	800751a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681d      	ldr	r5, [r3, #0]
 8007524:	466c      	mov	r4, sp
 8007526:	f107 0318 	add.w	r3, r7, #24
 800752a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800752e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007532:	f107 030c 	add.w	r3, r7, #12
 8007536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007538:	4628      	mov	r0, r5
 800753a:	f001 fa3b 	bl	80089b4 <SDMMC_Init>
 800753e:	e008      	b.n	8007552 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800755a:	4618      	mov	r0, r3
 800755c:	f001 fb08 	bl	8008b70 <SDMMC_CmdBlockLength>
 8007560:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00c      	beq.n	8007582 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a0a      	ldr	r2, [pc, #40]	; (8007598 <HAL_SD_ConfigWideBusOperation+0x218>)
 800756e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	431a      	orrs	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800758a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800758e:	4618      	mov	r0, r3
 8007590:	3730      	adds	r7, #48	; 0x30
 8007592:	46bd      	mov	sp, r7
 8007594:	bdb0      	pop	{r4, r5, r7, pc}
 8007596:	bf00      	nop
 8007598:	1fe00fff 	.word	0x1fe00fff
 800759c:	55e63b89 	.word	0x55e63b89
 80075a0:	02faf080 	.word	0x02faf080
 80075a4:	017d7840 	.word	0x017d7840

080075a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80075b4:	f107 030c 	add.w	r3, r7, #12
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fab0 	bl	8007b20 <SD_SendStatus>
 80075c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	0a5b      	lsrs	r3, r3, #9
 80075d8:	f003 030f 	and.w	r3, r3, #15
 80075dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80075de:	693b      	ldr	r3, [r7, #16]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075e8:	b5b0      	push	{r4, r5, r7, lr}
 80075ea:	b090      	sub	sp, #64	; 0x40
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80075f0:	2301      	movs	r3, #1
 80075f2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 fa35 	bl	8008a68 <SDMMC_GetPowerState>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007604:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007608:	e0a9      	b.n	800775e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	2b03      	cmp	r3, #3
 8007610:	d02e      	beq.n	8007670 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f001 fc7a 	bl	8008f10 <SDMMC_CmdSendCID>
 800761c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800761e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <SD_InitCard+0x40>
    {
      return errorstate;
 8007624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007626:	e09a      	b.n	800775e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2100      	movs	r1, #0
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fa5f 	bl	8008af2 <SDMMC_GetResponse>
 8007634:	4602      	mov	r2, r0
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2104      	movs	r1, #4
 8007640:	4618      	mov	r0, r3
 8007642:	f001 fa56 	bl	8008af2 <SDMMC_GetResponse>
 8007646:	4602      	mov	r2, r0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2108      	movs	r1, #8
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fa4d 	bl	8008af2 <SDMMC_GetResponse>
 8007658:	4602      	mov	r2, r0
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	210c      	movs	r1, #12
 8007664:	4618      	mov	r0, r3
 8007666:	f001 fa44 	bl	8008af2 <SDMMC_GetResponse>
 800766a:	4602      	mov	r2, r0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007674:	2b03      	cmp	r3, #3
 8007676:	d00d      	beq.n	8007694 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f107 020e 	add.w	r2, r7, #14
 8007680:	4611      	mov	r1, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f001 fc83 	bl	8008f8e <SDMMC_CmdSetRelAdd>
 8007688:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800768a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <SD_InitCard+0xac>
    {
      return errorstate;
 8007690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007692:	e064      	b.n	800775e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007698:	2b03      	cmp	r3, #3
 800769a:	d036      	beq.n	800770a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800769c:	89fb      	ldrh	r3, [r7, #14]
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ac:	041b      	lsls	r3, r3, #16
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f001 fc4c 	bl	8008f4e <SDMMC_CmdSendCSD>
 80076b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80076b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <SD_InitCard+0xda>
    {
      return errorstate;
 80076be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c0:	e04d      	b.n	800775e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 fa12 	bl	8008af2 <SDMMC_GetResponse>
 80076ce:	4602      	mov	r2, r0
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2104      	movs	r1, #4
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fa09 	bl	8008af2 <SDMMC_GetResponse>
 80076e0:	4602      	mov	r2, r0
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2108      	movs	r1, #8
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 fa00 	bl	8008af2 <SDMMC_GetResponse>
 80076f2:	4602      	mov	r2, r0
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	210c      	movs	r1, #12
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 f9f7 	bl	8008af2 <SDMMC_GetResponse>
 8007704:	4602      	mov	r2, r0
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2104      	movs	r1, #4
 8007710:	4618      	mov	r0, r3
 8007712:	f001 f9ee 	bl	8008af2 <SDMMC_GetResponse>
 8007716:	4603      	mov	r3, r0
 8007718:	0d1a      	lsrs	r2, r3, #20
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800771e:	f107 0310 	add.w	r3, r7, #16
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff fba5 	bl	8006e74 <HAL_SD_GetCardCSD>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007734:	e013      	b.n	800775e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6819      	ldr	r1, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800773e:	041b      	lsls	r3, r3, #16
 8007740:	2200      	movs	r2, #0
 8007742:	461c      	mov	r4, r3
 8007744:	4615      	mov	r5, r2
 8007746:	4622      	mov	r2, r4
 8007748:	462b      	mov	r3, r5
 800774a:	4608      	mov	r0, r1
 800774c:	f001 faf6 	bl	8008d3c <SDMMC_CmdSelDesel>
 8007750:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <SD_InitCard+0x174>
  {
    return errorstate;
 8007758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775a:	e000      	b.n	800775e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3740      	adds	r7, #64	; 0x40
 8007762:	46bd      	mov	sp, r7
 8007764:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007768 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	61fb      	str	r3, [r7, #28]
 8007778:	2300      	movs	r3, #0
 800777a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800777c:	f7f9 ff7e 	bl	800167c <HAL_GetTick>
 8007780:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f001 fafc 	bl	8008d84 <SDMMC_CmdGoIdleState>
 800778c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <SD_PowerON+0x30>
  {
    return errorstate;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	e0ed      	b.n	8007974 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4618      	mov	r0, r3
 800779e:	f001 fb0f 	bl	8008dc0 <SDMMC_CmdOperCond>
 80077a2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00d      	beq.n	80077c6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 fae5 	bl	8008d84 <SDMMC_CmdGoIdleState>
 80077ba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d004      	beq.n	80077cc <SD_PowerON+0x64>
    {
      return errorstate;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	e0d6      	b.n	8007974 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d137      	bne.n	8007844 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2100      	movs	r1, #0
 80077da:	4618      	mov	r0, r3
 80077dc:	f001 fb10 	bl	8008e00 <SDMMC_CmdAppCommand>
 80077e0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d02d      	beq.n	8007844 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077ec:	e0c2      	b.n	8007974 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2100      	movs	r1, #0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f001 fb03 	bl	8008e00 <SDMMC_CmdAppCommand>
 80077fa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <SD_PowerON+0x9e>
    {
      return errorstate;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	e0b6      	b.n	8007974 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	495c      	ldr	r1, [pc, #368]	; (800797c <SD_PowerON+0x214>)
 800780c:	4618      	mov	r0, r3
 800780e:	f001 fb1a 	bl	8008e46 <SDMMC_CmdAppOperCommand>
 8007812:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800781a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800781e:	e0a9      	b.n	8007974 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2100      	movs	r1, #0
 8007826:	4618      	mov	r0, r3
 8007828:	f001 f963 	bl	8008af2 <SDMMC_GetResponse>
 800782c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	0fdb      	lsrs	r3, r3, #31
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <SD_PowerON+0xd2>
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <SD_PowerON+0xd4>
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]

    count++;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3301      	adds	r3, #1
 8007842:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800784a:	4293      	cmp	r3, r2
 800784c:	d802      	bhi.n	8007854 <SD_PowerON+0xec>
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0cc      	beq.n	80077ee <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800785a:	4293      	cmp	r3, r2
 800785c:	d902      	bls.n	8007864 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800785e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007862:	e087      	b.n	8007974 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d07e      	beq.n	800796c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d17a      	bne.n	8007972 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d075      	beq.n	8007972 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800788c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0208 	orr.w	r2, r2, #8
 800789c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 fbda 	bl	800905c <SDMMC_CmdVoltageSwitch>
 80078a8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00c      	beq.n	80078ca <SD_PowerON+0x162>
        {
          return errorstate;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	e05f      	b.n	8007974 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80078b4:	f7f9 fee2 	bl	800167c <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c2:	d102      	bne.n	80078ca <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80078c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078c8:	e054      	b.n	8007974 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078d8:	d1ec      	bne.n	80078b4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80078e2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078f2:	d002      	beq.n	80078fa <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80078f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078f8:	e03c      	b.n	8007974 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80078fa:	2001      	movs	r0, #1
 80078fc:	f000 fb44 	bl	8007f88 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0204 	orr.w	r2, r2, #4
 800790e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007910:	e00a      	b.n	8007928 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007912:	f7f9 feb3 	bl	800167c <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007920:	d102      	bne.n	8007928 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007922:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007926:	e025      	b.n	8007974 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007936:	d1ec      	bne.n	8007912 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007940:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800794c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007950:	d102      	bne.n	8007958 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007956:	e00d      	b.n	8007974 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2213      	movs	r2, #19
 800795e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007968:	639a      	str	r2, [r3, #56]	; 0x38
 800796a:	e002      	b.n	8007972 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3720      	adds	r7, #32
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	c1100000 	.word	0xc1100000

08007980 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08c      	sub	sp, #48	; 0x30
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800798a:	f7f9 fe77 	bl	800167c <HAL_GetTick>
 800798e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2100      	movs	r1, #0
 800799a:	4618      	mov	r0, r3
 800799c:	f001 f8a9 	bl	8008af2 <SDMMC_GetResponse>
 80079a0:	4603      	mov	r3, r0
 80079a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079aa:	d102      	bne.n	80079b2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80079ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079b0:	e0b0      	b.n	8007b14 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2140      	movs	r1, #64	; 0x40
 80079b8:	4618      	mov	r0, r3
 80079ba:	f001 f8d9 	bl	8008b70 <SDMMC_CmdBlockLength>
 80079be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d005      	beq.n	80079d2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	e0a0      	b.n	8007b14 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079da:	041b      	lsls	r3, r3, #16
 80079dc:	4619      	mov	r1, r3
 80079de:	4610      	mov	r0, r2
 80079e0:	f001 fa0e 	bl	8008e00 <SDMMC_CmdAppCommand>
 80079e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d005      	beq.n	80079f8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	e08d      	b.n	8007b14 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079fc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80079fe:	2340      	movs	r3, #64	; 0x40
 8007a00:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007a02:	2360      	movs	r3, #96	; 0x60
 8007a04:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a06:	2302      	movs	r3, #2
 8007a08:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f107 0208 	add.w	r2, r7, #8
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f001 f87b 	bl	8008b18 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f001 faf6 	bl	8009018 <SDMMC_CmdStatusRegister>
 8007a2c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d02b      	beq.n	8007a8c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	e069      	b.n	8007b14 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d013      	beq.n	8007a76 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007a4e:	2300      	movs	r3, #0
 8007a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a52:	e00d      	b.n	8007a70 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 ffd5 	bl	8008a08 <SDMMC_ReadFIFO>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a62:	601a      	str	r2, [r3, #0]
        pData++;
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	3304      	adds	r3, #4
 8007a68:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	2b07      	cmp	r3, #7
 8007a74:	d9ee      	bls.n	8007a54 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007a76:	f7f9 fe01 	bl	800167c <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a84:	d102      	bne.n	8007a8c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007a86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a8a:	e043      	b.n	8007b14 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a92:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0d2      	beq.n	8007a40 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007aa8:	2308      	movs	r3, #8
 8007aaa:	e033      	b.n	8007b14 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007aba:	2302      	movs	r3, #2
 8007abc:	e02a      	b.n	8007b14 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d017      	beq.n	8007afc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007acc:	2320      	movs	r3, #32
 8007ace:	e021      	b.n	8007b14 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 ff97 	bl	8008a08 <SDMMC_ReadFIFO>
 8007ada:	4602      	mov	r2, r0
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	601a      	str	r2, [r3, #0]
    pData++;
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ae6:	f7f9 fdc9 	bl	800167c <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007af4:	d102      	bne.n	8007afc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007af6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007afa:	e00b      	b.n	8007b14 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e2      	bne.n	8007ad0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a03      	ldr	r2, [pc, #12]	; (8007b1c <SD_SendSDStatus+0x19c>)
 8007b10:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3730      	adds	r7, #48	; 0x30
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	18000f3a 	.word	0x18000f3a

08007b20 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007b30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b34:	e018      	b.n	8007b68 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b3e:	041b      	lsls	r3, r3, #16
 8007b40:	4619      	mov	r1, r3
 8007b42:	4610      	mov	r0, r2
 8007b44:	f001 fa45 	bl	8008fd2 <SDMMC_CmdSendStatus>
 8007b48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	e009      	b.n	8007b68 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 ffc9 	bl	8008af2 <SDMMC_GetResponse>
 8007b60:	4602      	mov	r2, r0
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2100      	movs	r1, #0
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 ffb3 	bl	8008af2 <SDMMC_GetResponse>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b96:	d102      	bne.n	8007b9e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b9c:	e02f      	b.n	8007bfe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b9e:	f107 030c 	add.w	r3, r7, #12
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f879 	bl	8007c9c <SD_FindSCR>
 8007baa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	e023      	b.n	8007bfe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d01c      	beq.n	8007bfa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc8:	041b      	lsls	r3, r3, #16
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4610      	mov	r0, r2
 8007bce:	f001 f917 	bl	8008e00 <SDMMC_CmdAppCommand>
 8007bd2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	e00f      	b.n	8007bfe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2102      	movs	r1, #2
 8007be4:	4618      	mov	r0, r3
 8007be6:	f001 f94e 	bl	8008e86 <SDMMC_CmdBusWidth>
 8007bea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	e003      	b.n	8007bfe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e001      	b.n	8007bfe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007bfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b086      	sub	sp, #24
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	2300      	movs	r3, #0
 8007c14:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 ff68 	bl	8008af2 <SDMMC_GetResponse>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c2c:	d102      	bne.n	8007c34 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007c2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c32:	e02f      	b.n	8007c94 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007c34:	f107 030c 	add.w	r3, r7, #12
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f82e 	bl	8007c9c <SD_FindSCR>
 8007c40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	e023      	b.n	8007c94 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d01c      	beq.n	8007c90 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c5e:	041b      	lsls	r3, r3, #16
 8007c60:	4619      	mov	r1, r3
 8007c62:	4610      	mov	r0, r2
 8007c64:	f001 f8cc 	bl	8008e00 <SDMMC_CmdAppCommand>
 8007c68:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	e00f      	b.n	8007c94 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2100      	movs	r1, #0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f903 	bl	8008e86 <SDMMC_CmdBusWidth>
 8007c80:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	e003      	b.n	8007c94 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	e001      	b.n	8007c94 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b08e      	sub	sp, #56	; 0x38
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ca6:	f7f9 fce9 	bl	800167c <HAL_GetTick>
 8007caa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60bb      	str	r3, [r7, #8]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2108      	movs	r1, #8
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 ff54 	bl	8008b70 <SDMMC_CmdBlockLength>
 8007cc8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	e0ad      	b.n	8007e30 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cdc:	041b      	lsls	r3, r3, #16
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f001 f88d 	bl	8008e00 <SDMMC_CmdAppCommand>
 8007ce6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	e09e      	b.n	8007e30 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cf6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007cfc:	2330      	movs	r3, #48	; 0x30
 8007cfe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d00:	2302      	movs	r3, #2
 8007d02:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f107 0210 	add.w	r2, r7, #16
 8007d14:	4611      	mov	r1, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fefe 	bl	8008b18 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 f8d3 	bl	8008ecc <SDMMC_CmdSendSCR>
 8007d26:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d027      	beq.n	8007d7e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	e07e      	b.n	8007e30 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d113      	bne.n	8007d68 <SD_FindSCR+0xcc>
 8007d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d110      	bne.n	8007d68 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 fe5c 	bl	8008a08 <SDMMC_ReadFIFO>
 8007d50:	4603      	mov	r3, r0
 8007d52:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 fe55 	bl	8008a08 <SDMMC_ReadFIFO>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	60fb      	str	r3, [r7, #12]
      index++;
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	3301      	adds	r3, #1
 8007d66:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d68:	f7f9 fc88 	bl	800167c <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d76:	d102      	bne.n	8007d7e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007d78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d7c:	e058      	b.n	8007e30 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d84:	f240 532a 	movw	r3, #1322	; 0x52a
 8007d88:	4013      	ands	r3, r2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0d1      	beq.n	8007d32 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d94:	f003 0308 	and.w	r3, r3, #8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2208      	movs	r2, #8
 8007da2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007da4:	2308      	movs	r3, #8
 8007da6:	e043      	b.n	8007e30 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d005      	beq.n	8007dc2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e036      	b.n	8007e30 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007dd8:	2320      	movs	r3, #32
 8007dda:	e029      	b.n	8007e30 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a15      	ldr	r2, [pc, #84]	; (8007e38 <SD_FindSCR+0x19c>)
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	061a      	lsls	r2, r3, #24
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007df0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	0a1b      	lsrs	r3, r3, #8
 8007df6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007dfa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	0e1b      	lsrs	r3, r3, #24
 8007e00:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	601a      	str	r2, [r3, #0]
    scr++;
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	3304      	adds	r3, #4
 8007e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	061a      	lsls	r2, r3, #24
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	021b      	lsls	r3, r3, #8
 8007e14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e18:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	0a1b      	lsrs	r3, r3, #8
 8007e1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e22:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	0e1b      	lsrs	r3, r3, #24
 8007e28:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3738      	adds	r7, #56	; 0x38
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	18000f3a 	.word	0x18000f3a

08007e3c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e48:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d03f      	beq.n	8007ed6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	e033      	b.n	8007ec4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fdd1 	bl	8008a08 <SDMMC_ReadFIFO>
 8007e66:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3301      	adds	r3, #1
 8007e74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	0a1b      	lsrs	r3, r3, #8
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	0c1b      	lsrs	r3, r3, #16
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	0e1b      	lsrs	r3, r3, #24
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2b07      	cmp	r3, #7
 8007ec8:	d9c8      	bls.n	8007e5c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007ed6:	bf00      	nop
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b086      	sub	sp, #24
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d043      	beq.n	8007f80 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	e037      	b.n	8007f6e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3301      	adds	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	021a      	lsls	r2, r3, #8
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	041a      	lsls	r2, r3, #16
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3301      	adds	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	061a      	lsls	r2, r3, #24
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f107 0208 	add.w	r2, r7, #8
 8007f60:	4611      	mov	r1, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fd5d 	bl	8008a22 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b07      	cmp	r3, #7
 8007f72:	d9c4      	bls.n	8007efe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007f80:	bf00      	nop
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007fce:	bf00      	nop
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e095      	b.n	800812c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	2b00      	cmp	r3, #0
 8008006:	d108      	bne.n	800801a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008010:	d009      	beq.n	8008026 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	61da      	str	r2, [r3, #28]
 8008018:	e005      	b.n	8008026 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d106      	bne.n	8008046 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7f9 f911 	bl	8001268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2202      	movs	r2, #2
 800804a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800805c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008066:	d902      	bls.n	800806e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008068:	2300      	movs	r3, #0
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	e002      	b.n	8008074 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800806e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008072:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800807c:	d007      	beq.n	800808e <HAL_SPI_Init+0xa0>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008086:	d002      	beq.n	800808e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080bc:	431a      	orrs	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080c6:	431a      	orrs	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d0:	ea42 0103 	orr.w	r1, r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	0c1b      	lsrs	r3, r3, #16
 80080ea:	f003 0204 	and.w	r2, r3, #4
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	f003 0310 	and.w	r3, r3, #16
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fc:	f003 0308 	and.w	r3, r3, #8
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800810a:	ea42 0103 	orr.w	r1, r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e038      	b.n	80081bc <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d106      	bne.n	8008164 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7f9 f962 	bl	8001428 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3308      	adds	r3, #8
 800816c:	4619      	mov	r1, r3
 800816e:	4610      	mov	r0, r2
 8008170:	f000 fafa 	bl	8008768 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	461a      	mov	r2, r3
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	f000 fb8c 	bl	800889c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6858      	ldr	r0, [r3, #4]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	f000 fbd5 	bl	8008940 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	6892      	ldr	r2, [r2, #8]
 800819e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	6892      	ldr	r2, [r2, #8]
 80081aa:	f041 0101 	orr.w	r1, r1, #1
 80081ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e049      	b.n	800826a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f841 	bl	8008272 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3304      	adds	r3, #4
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f000 f9f8 	bl	80085f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800827a:	bf00      	nop
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
	...

08008288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	d001      	beq.n	80082a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e04f      	b.n	8008340 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0201 	orr.w	r2, r2, #1
 80082b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a23      	ldr	r2, [pc, #140]	; (800834c <HAL_TIM_Base_Start_IT+0xc4>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d01d      	beq.n	80082fe <HAL_TIM_Base_Start_IT+0x76>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ca:	d018      	beq.n	80082fe <HAL_TIM_Base_Start_IT+0x76>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1f      	ldr	r2, [pc, #124]	; (8008350 <HAL_TIM_Base_Start_IT+0xc8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d013      	beq.n	80082fe <HAL_TIM_Base_Start_IT+0x76>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1e      	ldr	r2, [pc, #120]	; (8008354 <HAL_TIM_Base_Start_IT+0xcc>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00e      	beq.n	80082fe <HAL_TIM_Base_Start_IT+0x76>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1c      	ldr	r2, [pc, #112]	; (8008358 <HAL_TIM_Base_Start_IT+0xd0>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d009      	beq.n	80082fe <HAL_TIM_Base_Start_IT+0x76>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1b      	ldr	r2, [pc, #108]	; (800835c <HAL_TIM_Base_Start_IT+0xd4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d004      	beq.n	80082fe <HAL_TIM_Base_Start_IT+0x76>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a19      	ldr	r2, [pc, #100]	; (8008360 <HAL_TIM_Base_Start_IT+0xd8>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d115      	bne.n	800832a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	4b17      	ldr	r3, [pc, #92]	; (8008364 <HAL_TIM_Base_Start_IT+0xdc>)
 8008306:	4013      	ands	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b06      	cmp	r3, #6
 800830e:	d015      	beq.n	800833c <HAL_TIM_Base_Start_IT+0xb4>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008316:	d011      	beq.n	800833c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f042 0201 	orr.w	r2, r2, #1
 8008326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008328:	e008      	b.n	800833c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f042 0201 	orr.w	r2, r2, #1
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	e000      	b.n	800833e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	40012c00 	.word	0x40012c00
 8008350:	40000400 	.word	0x40000400
 8008354:	40000800 	.word	0x40000800
 8008358:	40000c00 	.word	0x40000c00
 800835c:	40013400 	.word	0x40013400
 8008360:	40014000 	.word	0x40014000
 8008364:	00010007 	.word	0x00010007

08008368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b02      	cmp	r3, #2
 800837c:	d122      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b02      	cmp	r3, #2
 800838a:	d11b      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f06f 0202 	mvn.w	r2, #2
 8008394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	f003 0303 	and.w	r3, r3, #3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f905 	bl	80085ba <HAL_TIM_IC_CaptureCallback>
 80083b0:	e005      	b.n	80083be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8f7 	bl	80085a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f908 	bl	80085ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0304 	and.w	r3, r3, #4
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d122      	bne.n	8008418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f003 0304 	and.w	r3, r3, #4
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d11b      	bne.n	8008418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f06f 0204 	mvn.w	r2, #4
 80083e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2202      	movs	r2, #2
 80083ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f8db 	bl	80085ba <HAL_TIM_IC_CaptureCallback>
 8008404:	e005      	b.n	8008412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f8cd 	bl	80085a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f8de 	bl	80085ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	f003 0308 	and.w	r3, r3, #8
 8008422:	2b08      	cmp	r3, #8
 8008424:	d122      	bne.n	800846c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f003 0308 	and.w	r3, r3, #8
 8008430:	2b08      	cmp	r3, #8
 8008432:	d11b      	bne.n	800846c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f06f 0208 	mvn.w	r2, #8
 800843c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2204      	movs	r2, #4
 8008442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	f003 0303 	and.w	r3, r3, #3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f8b1 	bl	80085ba <HAL_TIM_IC_CaptureCallback>
 8008458:	e005      	b.n	8008466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f8a3 	bl	80085a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f8b4 	bl	80085ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f003 0310 	and.w	r3, r3, #16
 8008476:	2b10      	cmp	r3, #16
 8008478:	d122      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f003 0310 	and.w	r3, r3, #16
 8008484:	2b10      	cmp	r3, #16
 8008486:	d11b      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f06f 0210 	mvn.w	r2, #16
 8008490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2208      	movs	r2, #8
 8008496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f887 	bl	80085ba <HAL_TIM_IC_CaptureCallback>
 80084ac:	e005      	b.n	80084ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f879 	bl	80085a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f88a 	bl	80085ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d10e      	bne.n	80084ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d107      	bne.n	80084ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f06f 0201 	mvn.w	r2, #1
 80084e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7f8 fbf4 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f6:	2b80      	cmp	r3, #128	; 0x80
 80084f8:	d10e      	bne.n	8008518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008504:	2b80      	cmp	r3, #128	; 0x80
 8008506:	d107      	bne.n	8008518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f914 	bl	8008740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008526:	d10e      	bne.n	8008546 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008532:	2b80      	cmp	r3, #128	; 0x80
 8008534:	d107      	bne.n	8008546 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800853e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f907 	bl	8008754 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008550:	2b40      	cmp	r3, #64	; 0x40
 8008552:	d10e      	bne.n	8008572 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	d107      	bne.n	8008572 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800856a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f838 	bl	80085e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b20      	cmp	r3, #32
 800857e:	d10e      	bne.n	800859e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	2b20      	cmp	r3, #32
 800858c:	d107      	bne.n	800859e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f06f 0220 	mvn.w	r2, #32
 8008596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8c7 	bl	800872c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b083      	sub	sp, #12
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085ea:	bf00      	nop
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
	...

080085f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a40      	ldr	r2, [pc, #256]	; (800870c <TIM_Base_SetConfig+0x114>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d013      	beq.n	8008638 <TIM_Base_SetConfig+0x40>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008616:	d00f      	beq.n	8008638 <TIM_Base_SetConfig+0x40>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a3d      	ldr	r2, [pc, #244]	; (8008710 <TIM_Base_SetConfig+0x118>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00b      	beq.n	8008638 <TIM_Base_SetConfig+0x40>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a3c      	ldr	r2, [pc, #240]	; (8008714 <TIM_Base_SetConfig+0x11c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d007      	beq.n	8008638 <TIM_Base_SetConfig+0x40>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a3b      	ldr	r2, [pc, #236]	; (8008718 <TIM_Base_SetConfig+0x120>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d003      	beq.n	8008638 <TIM_Base_SetConfig+0x40>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a3a      	ldr	r2, [pc, #232]	; (800871c <TIM_Base_SetConfig+0x124>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d108      	bne.n	800864a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a2f      	ldr	r2, [pc, #188]	; (800870c <TIM_Base_SetConfig+0x114>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d01f      	beq.n	8008692 <TIM_Base_SetConfig+0x9a>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008658:	d01b      	beq.n	8008692 <TIM_Base_SetConfig+0x9a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a2c      	ldr	r2, [pc, #176]	; (8008710 <TIM_Base_SetConfig+0x118>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d017      	beq.n	8008692 <TIM_Base_SetConfig+0x9a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a2b      	ldr	r2, [pc, #172]	; (8008714 <TIM_Base_SetConfig+0x11c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d013      	beq.n	8008692 <TIM_Base_SetConfig+0x9a>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a2a      	ldr	r2, [pc, #168]	; (8008718 <TIM_Base_SetConfig+0x120>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00f      	beq.n	8008692 <TIM_Base_SetConfig+0x9a>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a29      	ldr	r2, [pc, #164]	; (800871c <TIM_Base_SetConfig+0x124>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00b      	beq.n	8008692 <TIM_Base_SetConfig+0x9a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a28      	ldr	r2, [pc, #160]	; (8008720 <TIM_Base_SetConfig+0x128>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d007      	beq.n	8008692 <TIM_Base_SetConfig+0x9a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a27      	ldr	r2, [pc, #156]	; (8008724 <TIM_Base_SetConfig+0x12c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d003      	beq.n	8008692 <TIM_Base_SetConfig+0x9a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a26      	ldr	r2, [pc, #152]	; (8008728 <TIM_Base_SetConfig+0x130>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d108      	bne.n	80086a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a10      	ldr	r2, [pc, #64]	; (800870c <TIM_Base_SetConfig+0x114>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d00f      	beq.n	80086f0 <TIM_Base_SetConfig+0xf8>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a12      	ldr	r2, [pc, #72]	; (800871c <TIM_Base_SetConfig+0x124>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d00b      	beq.n	80086f0 <TIM_Base_SetConfig+0xf8>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a11      	ldr	r2, [pc, #68]	; (8008720 <TIM_Base_SetConfig+0x128>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d007      	beq.n	80086f0 <TIM_Base_SetConfig+0xf8>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a10      	ldr	r2, [pc, #64]	; (8008724 <TIM_Base_SetConfig+0x12c>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d003      	beq.n	80086f0 <TIM_Base_SetConfig+0xf8>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a0f      	ldr	r2, [pc, #60]	; (8008728 <TIM_Base_SetConfig+0x130>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d103      	bne.n	80086f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	691a      	ldr	r2, [r3, #16]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	615a      	str	r2, [r3, #20]
}
 80086fe:	bf00      	nop
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	40012c00 	.word	0x40012c00
 8008710:	40000400 	.word	0x40000400
 8008714:	40000800 	.word	0x40000800
 8008718:	40000c00 	.word	0x40000c00
 800871c:	40013400 	.word	0x40013400
 8008720:	40014000 	.word	0x40014000
 8008724:	40014400 	.word	0x40014400
 8008728:	40014800 	.word	0x40014800

0800872c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	6812      	ldr	r2, [r2, #0]
 8008780:	f023 0101 	bic.w	r1, r3, #1
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	2b08      	cmp	r3, #8
 8008790:	d102      	bne.n	8008798 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008792:	2340      	movs	r3, #64	; 0x40
 8008794:	617b      	str	r3, [r7, #20]
 8008796:	e001      	b.n	800879c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008798:	2300      	movs	r3, #0
 800879a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80087a8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80087ae:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80087b4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80087ba:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80087c0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80087c6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80087cc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80087d2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80087d8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80087de:	4313      	orrs	r3, r2
 80087e0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	4313      	orrs	r3, r2
 8008808:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800880a:	4b23      	ldr	r3, [pc, #140]	; (8008898 <FMC_NORSRAM_Init+0x130>)
 800880c:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008814:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800881c:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008824:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800882c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	43db      	mvns	r3, r3
 800883c:	ea02 0103 	and.w	r1, r2, r3
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	4319      	orrs	r1, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008856:	d10c      	bne.n	8008872 <FMC_NORSRAM_Init+0x10a>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d008      	beq.n	8008872 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d006      	beq.n	8008888 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008882:	431a      	orrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	0008fb7f 	.word	0x0008fb7f

0800889c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	011b      	lsls	r3, r3, #4
 80088bc:	431a      	orrs	r2, r3
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	431a      	orrs	r2, r3
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	079b      	lsls	r3, r3, #30
 80088cc:	431a      	orrs	r2, r3
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	041b      	lsls	r3, r3, #16
 80088d4:	431a      	orrs	r2, r3
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	3b01      	subs	r3, #1
 80088dc:	051b      	lsls	r3, r3, #20
 80088de:	431a      	orrs	r2, r3
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	3b02      	subs	r3, #2
 80088e6:	061b      	lsls	r3, r3, #24
 80088e8:	ea42 0103 	orr.w	r1, r2, r3
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	3201      	adds	r2, #1
 80088f4:	4319      	orrs	r1, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008908:	d113      	bne.n	8008932 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008912:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	3b01      	subs	r3, #1
 800891a:	051b      	lsls	r3, r3, #20
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	431a      	orrs	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	371c      	adds	r7, #28
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008954:	d121      	bne.n	800899a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	6819      	ldr	r1, [r3, #0]
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	4319      	orrs	r1, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	021b      	lsls	r3, r3, #8
 8008974:	4319      	orrs	r1, r3
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	079b      	lsls	r3, r3, #30
 800897c:	4319      	orrs	r1, r3
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	4319      	orrs	r1, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	041b      	lsls	r3, r3, #16
 800898a:	430b      	orrs	r3, r1
 800898c:	ea42 0103 	orr.w	r1, r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008998:	e005      	b.n	80089a6 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80089a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80089b4:	b084      	sub	sp, #16
 80089b6:	b480      	push	{r7}
 80089b8:	b085      	sub	sp, #20
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	f107 001c 	add.w	r0, r7, #28
 80089c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80089ca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80089cc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80089ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80089d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80089d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80089d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80089da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	4b07      	ldr	r3, [pc, #28]	; (8008a04 <SDMMC_Init+0x50>)
 80089e8:	4013      	ands	r3, r2
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	b004      	add	sp, #16
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	ffc02c00 	.word	0xffc02c00

08008a08 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f043 0203 	orr.w	r2, r3, #3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008a58:	2002      	movs	r0, #2
 8008a5a:	f7f8 fe1b 	bl	8001694 <HAL_Delay>

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0303 	and.w	r3, r3, #3
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008aa2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008aa8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008aae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <SDMMC_SendCommand+0x50>)
 8008abc:	4013      	ands	r3, r2
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	fffee0c0 	.word	0xfffee0c0

08008ad8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	b2db      	uxtb	r3, r3
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b085      	sub	sp, #20
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	3314      	adds	r3, #20
 8008b00:	461a      	mov	r2, r3
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	4413      	add	r3, r2
 8008b06:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b3e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008b44:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008b4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0

}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008b7e:	2310      	movs	r3, #16
 8008b80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b92:	f107 0308 	add.w	r3, r7, #8
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff ff73 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba2:	2110      	movs	r1, #16
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fa7b 	bl	80090a0 <SDMMC_GetCmdResp1>
 8008baa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bac:	69fb      	ldr	r3, [r7, #28]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b088      	sub	sp, #32
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008bc4:	2311      	movs	r3, #17
 8008bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bd8:	f107 0308 	add.w	r3, r7, #8
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7ff ff50 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008be8:	2111      	movs	r1, #17
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fa58 	bl	80090a0 <SDMMC_GetCmdResp1>
 8008bf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bf2:	69fb      	ldr	r3, [r7, #28]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3720      	adds	r7, #32
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008c0a:	2312      	movs	r3, #18
 8008c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c1e:	f107 0308 	add.w	r3, r7, #8
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff ff2d 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c2e:	2112      	movs	r1, #18
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa35 	bl	80090a0 <SDMMC_GetCmdResp1>
 8008c36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c38:	69fb      	ldr	r3, [r7, #28]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3720      	adds	r7, #32
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b088      	sub	sp, #32
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008c50:	2318      	movs	r3, #24
 8008c52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c64:	f107 0308 	add.w	r3, r7, #8
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff ff0a 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c74:	2118      	movs	r1, #24
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa12 	bl	80090a0 <SDMMC_GetCmdResp1>
 8008c7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c7e:	69fb      	ldr	r3, [r7, #28]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3720      	adds	r7, #32
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008c96:	2319      	movs	r3, #25
 8008c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ca8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008caa:	f107 0308 	add.w	r3, r7, #8
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff fee7 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cba:	2119      	movs	r1, #25
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f9ef 	bl	80090a0 <SDMMC_GetCmdResp1>
 8008cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cc4:	69fb      	ldr	r3, [r7, #28]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3720      	adds	r7, #32
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008cdc:	230c      	movs	r3, #12
 8008cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ce4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cee:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d08:	f107 0308 	add.w	r3, r7, #8
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff feb8 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008d14:	4a08      	ldr	r2, [pc, #32]	; (8008d38 <SDMMC_CmdStopTransfer+0x68>)
 8008d16:	210c      	movs	r1, #12
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f9c1 	bl	80090a0 <SDMMC_GetCmdResp1>
 8008d1e:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3720      	adds	r7, #32
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	05f5e100 	.word	0x05f5e100

08008d3c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08a      	sub	sp, #40	; 0x28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d4c:	2307      	movs	r3, #7
 8008d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d54:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d56:	2300      	movs	r3, #0
 8008d58:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d5e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d60:	f107 0310 	add.w	r3, r7, #16
 8008d64:	4619      	mov	r1, r3
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f7ff fe8c 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d70:	2107      	movs	r1, #7
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f000 f994 	bl	80090a0 <SDMMC_GetCmdResp1>
 8008d78:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3728      	adds	r7, #40	; 0x28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b088      	sub	sp, #32
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008d90:	2300      	movs	r3, #0
 8008d92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008d94:	2300      	movs	r3, #0
 8008d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008da0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff fe6b 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fbb8 	bl	8009524 <SDMMC_GetCmdError>
 8008db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008db6:	69fb      	ldr	r3, [r7, #28]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3720      	adds	r7, #32
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008dc8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008dce:	2308      	movs	r3, #8
 8008dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008de0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008de2:	f107 0308 	add.w	r3, r7, #8
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7ff fe4b 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fb4a 	bl	8009488 <SDMMC_GetCmdResp7>
 8008df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008df6:	69fb      	ldr	r3, [r7, #28]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3720      	adds	r7, #32
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008e0e:	2337      	movs	r3, #55	; 0x37
 8008e10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e22:	f107 0308 	add.w	r3, r7, #8
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff fe2b 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e32:	2137      	movs	r1, #55	; 0x37
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f933 	bl	80090a0 <SDMMC_GetCmdResp1>
 8008e3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e3c:	69fb      	ldr	r3, [r7, #28]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3720      	adds	r7, #32
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b088      	sub	sp, #32
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008e54:	2329      	movs	r3, #41	; 0x29
 8008e56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e68:	f107 0308 	add.w	r3, r7, #8
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7ff fe08 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fa4f 	bl	8009318 <SDMMC_GetCmdResp3>
 8008e7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3720      	adds	r7, #32
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b088      	sub	sp, #32
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008e94:	2306      	movs	r3, #6
 8008e96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ea6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ea8:	f107 0308 	add.w	r3, r7, #8
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff fde8 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb8:	2106      	movs	r1, #6
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f8f0 	bl	80090a0 <SDMMC_GetCmdResp1>
 8008ec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3720      	adds	r7, #32
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b088      	sub	sp, #32
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008ed8:	2333      	movs	r3, #51	; 0x33
 8008eda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ee0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eec:	f107 0308 	add.w	r3, r7, #8
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7ff fdc6 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008efc:	2133      	movs	r1, #51	; 0x33
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f8ce 	bl	80090a0 <SDMMC_GetCmdResp1>
 8008f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f06:	69fb      	ldr	r3, [r7, #28]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3720      	adds	r7, #32
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b088      	sub	sp, #32
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f30:	f107 0308 	add.w	r3, r7, #8
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff fda4 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9a1 	bl	8009284 <SDMMC_GetCmdResp2>
 8008f42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f44:	69fb      	ldr	r3, [r7, #28]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b088      	sub	sp, #32
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008f5c:	2309      	movs	r3, #9
 8008f5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008f60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f66:	2300      	movs	r3, #0
 8008f68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f70:	f107 0308 	add.w	r3, r7, #8
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff fd84 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f981 	bl	8009284 <SDMMC_GetCmdResp2>
 8008f82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f84:	69fb      	ldr	r3, [r7, #28]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3720      	adds	r7, #32
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b088      	sub	sp, #32
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fb0:	f107 0308 	add.w	r3, r7, #8
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7ff fd64 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	2103      	movs	r1, #3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f9e9 	bl	8009398 <SDMMC_GetCmdResp6>
 8008fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fc8:	69fb      	ldr	r3, [r7, #28]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3720      	adds	r7, #32
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b088      	sub	sp, #32
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008fe0:	230d      	movs	r3, #13
 8008fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fea:	2300      	movs	r3, #0
 8008fec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ff2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ff4:	f107 0308 	add.w	r3, r7, #8
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff fd42 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009000:	f241 3288 	movw	r2, #5000	; 0x1388
 8009004:	210d      	movs	r1, #13
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f84a 	bl	80090a0 <SDMMC_GetCmdResp1>
 800900c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800900e:	69fb      	ldr	r3, [r7, #28]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3720      	adds	r7, #32
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009024:	230d      	movs	r3, #13
 8009026:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800902c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800902e:	2300      	movs	r3, #0
 8009030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009036:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009038:	f107 0308 	add.w	r3, r7, #8
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff fd20 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009044:	f241 3288 	movw	r2, #5000	; 0x1388
 8009048:	210d      	movs	r1, #13
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f828 	bl	80090a0 <SDMMC_GetCmdResp1>
 8009050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009052:	69fb      	ldr	r3, [r7, #28]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3720      	adds	r7, #32
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009064:	2300      	movs	r3, #0
 8009066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009068:	230b      	movs	r3, #11
 800906a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800906c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009072:	2300      	movs	r3, #0
 8009074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800907a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800907c:	f107 0308 	add.w	r3, r7, #8
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff fcfe 	bl	8008a84 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009088:	f241 3288 	movw	r2, #5000	; 0x1388
 800908c:	210b      	movs	r1, #11
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f806 	bl	80090a0 <SDMMC_GetCmdResp1>
 8009094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009096:	69fb      	ldr	r3, [r7, #28]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3720      	adds	r7, #32
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b088      	sub	sp, #32
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	460b      	mov	r3, r1
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80090ae:	4b70      	ldr	r3, [pc, #448]	; (8009270 <SDMMC_GetCmdResp1+0x1d0>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a70      	ldr	r2, [pc, #448]	; (8009274 <SDMMC_GetCmdResp1+0x1d4>)
 80090b4:	fba2 2303 	umull	r2, r3, r2, r3
 80090b8:	0a5a      	lsrs	r2, r3, #9
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	fb02 f303 	mul.w	r3, r2, r3
 80090c0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	1e5a      	subs	r2, r3, #1
 80090c6:	61fa      	str	r2, [r7, #28]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090d0:	e0c9      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	4b67      	ldr	r3, [pc, #412]	; (8009278 <SDMMC_GetCmdResp1+0x1d8>)
 80090dc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0ef      	beq.n	80090c2 <SDMMC_GetCmdResp1+0x22>
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1ea      	bne.n	80090c2 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d004      	beq.n	8009102 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2204      	movs	r2, #4
 80090fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090fe:	2304      	movs	r3, #4
 8009100:	e0b1      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d004      	beq.n	8009118 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2201      	movs	r2, #1
 8009112:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009114:	2301      	movs	r3, #1
 8009116:	e0a6      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4a58      	ldr	r2, [pc, #352]	; (800927c <SDMMC_GetCmdResp1+0x1dc>)
 800911c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f7ff fcda 	bl	8008ad8 <SDMMC_GetCommandResponse>
 8009124:	4603      	mov	r3, r0
 8009126:	461a      	mov	r2, r3
 8009128:	7afb      	ldrb	r3, [r7, #11]
 800912a:	4293      	cmp	r3, r2
 800912c:	d001      	beq.n	8009132 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800912e:	2301      	movs	r3, #1
 8009130:	e099      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009132:	2100      	movs	r1, #0
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f7ff fcdc 	bl	8008af2 <SDMMC_GetResponse>
 800913a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4b50      	ldr	r3, [pc, #320]	; (8009280 <SDMMC_GetCmdResp1+0x1e0>)
 8009140:	4013      	ands	r3, r2
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009146:	2300      	movs	r3, #0
 8009148:	e08d      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2b00      	cmp	r3, #0
 800914e:	da02      	bge.n	8009156 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009150:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009154:	e087      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009160:	2340      	movs	r3, #64	; 0x40
 8009162:	e080      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800916e:	2380      	movs	r3, #128	; 0x80
 8009170:	e079      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800917c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009180:	e071      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800918c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009190:	e069      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800919c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091a0:	e061      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80091ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091b0:	e059      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80091bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091c0:	e051      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80091cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091d0:	e049      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80091dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091e0:	e041      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80091ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091f0:	e039      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80091fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009200:	e031      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800920c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009210:	e029      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800921c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009220:	e021      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800922c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009230:	e019      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800923c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009240:	e011      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800924c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009250:	e009      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f003 0308 	and.w	r3, r3, #8
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800925c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009260:	e001      	b.n	8009266 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009266:	4618      	mov	r0, r3
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	20000010 	.word	0x20000010
 8009274:	10624dd3 	.word	0x10624dd3
 8009278:	00200045 	.word	0x00200045
 800927c:	002000c5 	.word	0x002000c5
 8009280:	fdffe008 	.word	0xfdffe008

08009284 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800928c:	4b1f      	ldr	r3, [pc, #124]	; (800930c <SDMMC_GetCmdResp2+0x88>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a1f      	ldr	r2, [pc, #124]	; (8009310 <SDMMC_GetCmdResp2+0x8c>)
 8009292:	fba2 2303 	umull	r2, r3, r2, r3
 8009296:	0a5b      	lsrs	r3, r3, #9
 8009298:	f241 3288 	movw	r2, #5000	; 0x1388
 800929c:	fb02 f303 	mul.w	r3, r2, r3
 80092a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	1e5a      	subs	r2, r3, #1
 80092a6:	60fa      	str	r2, [r7, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d102      	bne.n	80092b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092b0:	e026      	b.n	8009300 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0ef      	beq.n	80092a2 <SDMMC_GetCmdResp2+0x1e>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1ea      	bne.n	80092a2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d004      	beq.n	80092e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2204      	movs	r2, #4
 80092dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092de:	2304      	movs	r3, #4
 80092e0:	e00e      	b.n	8009300 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e003      	b.n	8009300 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a06      	ldr	r2, [pc, #24]	; (8009314 <SDMMC_GetCmdResp2+0x90>)
 80092fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	20000010 	.word	0x20000010
 8009310:	10624dd3 	.word	0x10624dd3
 8009314:	002000c5 	.word	0x002000c5

08009318 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009320:	4b1a      	ldr	r3, [pc, #104]	; (800938c <SDMMC_GetCmdResp3+0x74>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a1a      	ldr	r2, [pc, #104]	; (8009390 <SDMMC_GetCmdResp3+0x78>)
 8009326:	fba2 2303 	umull	r2, r3, r2, r3
 800932a:	0a5b      	lsrs	r3, r3, #9
 800932c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009330:	fb02 f303 	mul.w	r3, r2, r3
 8009334:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	1e5a      	subs	r2, r3, #1
 800933a:	60fa      	str	r2, [r7, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d102      	bne.n	8009346 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009344:	e01b      	b.n	800937e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0ef      	beq.n	8009336 <SDMMC_GetCmdResp3+0x1e>
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1ea      	bne.n	8009336 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b00      	cmp	r3, #0
 800936a:	d004      	beq.n	8009376 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2204      	movs	r2, #4
 8009370:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009372:	2304      	movs	r3, #4
 8009374:	e003      	b.n	800937e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a06      	ldr	r2, [pc, #24]	; (8009394 <SDMMC_GetCmdResp3+0x7c>)
 800937a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3714      	adds	r7, #20
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20000010 	.word	0x20000010
 8009390:	10624dd3 	.word	0x10624dd3
 8009394:	002000c5 	.word	0x002000c5

08009398 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	460b      	mov	r3, r1
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093a6:	4b35      	ldr	r3, [pc, #212]	; (800947c <SDMMC_GetCmdResp6+0xe4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a35      	ldr	r2, [pc, #212]	; (8009480 <SDMMC_GetCmdResp6+0xe8>)
 80093ac:	fba2 2303 	umull	r2, r3, r2, r3
 80093b0:	0a5b      	lsrs	r3, r3, #9
 80093b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b6:	fb02 f303 	mul.w	r3, r2, r3
 80093ba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	1e5a      	subs	r2, r3, #1
 80093c0:	61fa      	str	r2, [r7, #28]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d102      	bne.n	80093cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093ca:	e052      	b.n	8009472 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0ef      	beq.n	80093bc <SDMMC_GetCmdResp6+0x24>
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1ea      	bne.n	80093bc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ea:	f003 0304 	and.w	r3, r3, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d004      	beq.n	80093fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2204      	movs	r2, #4
 80093f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093f8:	2304      	movs	r3, #4
 80093fa:	e03a      	b.n	8009472 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b00      	cmp	r3, #0
 8009406:	d004      	beq.n	8009412 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2201      	movs	r2, #1
 800940c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800940e:	2301      	movs	r3, #1
 8009410:	e02f      	b.n	8009472 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f7ff fb60 	bl	8008ad8 <SDMMC_GetCommandResponse>
 8009418:	4603      	mov	r3, r0
 800941a:	461a      	mov	r2, r3
 800941c:	7afb      	ldrb	r3, [r7, #11]
 800941e:	4293      	cmp	r3, r2
 8009420:	d001      	beq.n	8009426 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009422:	2301      	movs	r3, #1
 8009424:	e025      	b.n	8009472 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	4a16      	ldr	r2, [pc, #88]	; (8009484 <SDMMC_GetCmdResp6+0xec>)
 800942a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800942c:	2100      	movs	r1, #0
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7ff fb5f 	bl	8008af2 <SDMMC_GetResponse>
 8009434:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d106      	bne.n	800944e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	0c1b      	lsrs	r3, r3, #16
 8009444:	b29a      	uxth	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800944a:	2300      	movs	r3, #0
 800944c:	e011      	b.n	8009472 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800945c:	e009      	b.n	8009472 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800946c:	e001      	b.n	8009472 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800946e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009472:	4618      	mov	r0, r3
 8009474:	3720      	adds	r7, #32
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000010 	.word	0x20000010
 8009480:	10624dd3 	.word	0x10624dd3
 8009484:	002000c5 	.word	0x002000c5

08009488 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009490:	4b22      	ldr	r3, [pc, #136]	; (800951c <SDMMC_GetCmdResp7+0x94>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a22      	ldr	r2, [pc, #136]	; (8009520 <SDMMC_GetCmdResp7+0x98>)
 8009496:	fba2 2303 	umull	r2, r3, r2, r3
 800949a:	0a5b      	lsrs	r3, r3, #9
 800949c:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a0:	fb02 f303 	mul.w	r3, r2, r3
 80094a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	1e5a      	subs	r2, r3, #1
 80094aa:	60fa      	str	r2, [r7, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d102      	bne.n	80094b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094b4:	e02c      	b.n	8009510 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d0ef      	beq.n	80094a6 <SDMMC_GetCmdResp7+0x1e>
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1ea      	bne.n	80094a6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d004      	beq.n	80094e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2204      	movs	r2, #4
 80094e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094e2:	2304      	movs	r3, #4
 80094e4:	e014      	b.n	8009510 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d004      	beq.n	80094fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e009      	b.n	8009510 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2240      	movs	r2, #64	; 0x40
 800950c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800950e:	2300      	movs	r3, #0

}
 8009510:	4618      	mov	r0, r3
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	20000010 	.word	0x20000010
 8009520:	10624dd3 	.word	0x10624dd3

08009524 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800952c:	4b11      	ldr	r3, [pc, #68]	; (8009574 <SDMMC_GetCmdError+0x50>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a11      	ldr	r2, [pc, #68]	; (8009578 <SDMMC_GetCmdError+0x54>)
 8009532:	fba2 2303 	umull	r2, r3, r2, r3
 8009536:	0a5b      	lsrs	r3, r3, #9
 8009538:	f241 3288 	movw	r2, #5000	; 0x1388
 800953c:	fb02 f303 	mul.w	r3, r2, r3
 8009540:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	1e5a      	subs	r2, r3, #1
 8009546:	60fa      	str	r2, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800954c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009550:	e009      	b.n	8009566 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955a:	2b00      	cmp	r3, #0
 800955c:	d0f1      	beq.n	8009542 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a06      	ldr	r2, [pc, #24]	; (800957c <SDMMC_GetCmdError+0x58>)
 8009562:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	20000010 	.word	0x20000010
 8009578:	10624dd3 	.word	0x10624dd3
 800957c:	002000c5 	.word	0x002000c5

08009580 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009584:	4904      	ldr	r1, [pc, #16]	; (8009598 <MX_FATFS_Init+0x18>)
 8009586:	4805      	ldr	r0, [pc, #20]	; (800959c <MX_FATFS_Init+0x1c>)
 8009588:	f003 f8e8 	bl	800c75c <FATFS_LinkDriver>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	4b03      	ldr	r3, [pc, #12]	; (80095a0 <MX_FATFS_Init+0x20>)
 8009592:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009594:	bf00      	nop
 8009596:	bd80      	pop	{r7, pc}
 8009598:	200007fc 	.word	0x200007fc
 800959c:	0801081c 	.word	0x0801081c
 80095a0:	200007f8 	.word	0x200007f8

080095a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80095a4:	b480      	push	{r7}
 80095a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80095a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80095be:	f000 f885 	bl	80096cc <BSP_SD_IsDetected>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d001      	beq.n	80095cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80095c8:	2302      	movs	r3, #2
 80095ca:	e012      	b.n	80095f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80095cc:	480b      	ldr	r0, [pc, #44]	; (80095fc <BSP_SD_Init+0x48>)
 80095ce:	f7fd f819 	bl	8006604 <HAL_SD_Init>
 80095d2:	4603      	mov	r3, r0
 80095d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80095d6:	79fb      	ldrb	r3, [r7, #7]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d109      	bne.n	80095f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80095dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80095e0:	4806      	ldr	r0, [pc, #24]	; (80095fc <BSP_SD_Init+0x48>)
 80095e2:	f7fd fecd 	bl	8007380 <HAL_SD_ConfigWideBusOperation>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80095f0:	79fb      	ldrb	r3, [r7, #7]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20000264 	.word	0x20000264

08009600 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	68f9      	ldr	r1, [r7, #12]
 8009616:	4806      	ldr	r0, [pc, #24]	; (8009630 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009618:	f7fd f91c 	bl	8006854 <HAL_SD_ReadBlocks_DMA>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009626:	7dfb      	ldrb	r3, [r7, #23]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	20000264 	.word	0x20000264

08009634 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	68f9      	ldr	r1, [r7, #12]
 800964a:	4806      	ldr	r0, [pc, #24]	; (8009664 <BSP_SD_WriteBlocks_DMA+0x30>)
 800964c:	f7fd f9aa 	bl	80069a4 <HAL_SD_WriteBlocks_DMA>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800965a:	7dfb      	ldrb	r3, [r7, #23]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20000264 	.word	0x20000264

08009668 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800966c:	4805      	ldr	r0, [pc, #20]	; (8009684 <BSP_SD_GetCardState+0x1c>)
 800966e:	f7fd ff9b 	bl	80075a8 <HAL_SD_GetCardState>
 8009672:	4603      	mov	r3, r0
 8009674:	2b04      	cmp	r3, #4
 8009676:	bf14      	ite	ne
 8009678:	2301      	movne	r3, #1
 800967a:	2300      	moveq	r3, #0
 800967c:	b2db      	uxtb	r3, r3
}
 800967e:	4618      	mov	r0, r3
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20000264 	.word	0x20000264

08009688 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	4803      	ldr	r0, [pc, #12]	; (80096a0 <BSP_SD_GetCardInfo+0x18>)
 8009694:	f7fd fe48 	bl	8007328 <HAL_SD_GetCardInfo>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	20000264 	.word	0x20000264

080096a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80096ac:	f000 f9aa 	bl	8009a04 <BSP_SD_WriteCpltCallback>
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80096c0:	f000 f9b2 	bl	8009a28 <BSP_SD_ReadCpltCallback>
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80096d2:	2301      	movs	r3, #1
 80096d4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80096d6:	f000 f80b 	bl	80096f0 <BSP_PlatformIsDetected>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d101      	bne.n	80096e4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80096e0:	2300      	movs	r3, #0
 80096e2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	b2db      	uxtb	r3, r3
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80096f6:	2301      	movs	r3, #1
 80096f8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80096fa:	2120      	movs	r1, #32
 80096fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009700:	f7fa f8a6 	bl	8003850 <HAL_GPIO_ReadPin>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800970a:	2300      	movs	r3, #0
 800970c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800970e:	79fb      	ldrb	r3, [r7, #7]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8009720:	f003 f920 	bl	800c964 <osKernelGetTickCount>
 8009724:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8009726:	e006      	b.n	8009736 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009728:	f7ff ff9e 	bl	8009668 <BSP_SD_GetCardState>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009732:	2300      	movs	r3, #0
 8009734:	e009      	b.n	800974a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8009736:	f003 f915 	bl	800c964 <osKernelGetTickCount>
 800973a:	4602      	mov	r2, r0
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	429a      	cmp	r2, r3
 8009744:	d8f0      	bhi.n	8009728 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800975e:	4b0b      	ldr	r3, [pc, #44]	; (800978c <SD_CheckStatus+0x38>)
 8009760:	2201      	movs	r2, #1
 8009762:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009764:	f7ff ff80 	bl	8009668 <BSP_SD_GetCardState>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d107      	bne.n	800977e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800976e:	4b07      	ldr	r3, [pc, #28]	; (800978c <SD_CheckStatus+0x38>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	b2da      	uxtb	r2, r3
 800977a:	4b04      	ldr	r3, [pc, #16]	; (800978c <SD_CheckStatus+0x38>)
 800977c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800977e:	4b03      	ldr	r3, [pc, #12]	; (800978c <SD_CheckStatus+0x38>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b2db      	uxtb	r3, r3
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20000019 	.word	0x20000019

08009790 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800979a:	4b1c      	ldr	r3, [pc, #112]	; (800980c <SD_initialize+0x7c>)
 800979c:	2201      	movs	r2, #1
 800979e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80097a0:	f003 f898 	bl	800c8d4 <osKernelGetState>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d129      	bne.n	80097fe <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80097aa:	f7ff ff03 	bl	80095b4 <BSP_SD_Init>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d107      	bne.n	80097c4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff ffcc 	bl	8009754 <SD_CheckStatus>
 80097bc:	4603      	mov	r3, r0
 80097be:	461a      	mov	r2, r3
 80097c0:	4b12      	ldr	r3, [pc, #72]	; (800980c <SD_initialize+0x7c>)
 80097c2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80097c4:	4b11      	ldr	r3, [pc, #68]	; (800980c <SD_initialize+0x7c>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d017      	beq.n	80097fe <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80097ce:	4b10      	ldr	r3, [pc, #64]	; (8009810 <SD_initialize+0x80>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d107      	bne.n	80097e6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80097d6:	2200      	movs	r2, #0
 80097d8:	2102      	movs	r1, #2
 80097da:	200a      	movs	r0, #10
 80097dc:	f003 fbd8 	bl	800cf90 <osMessageQueueNew>
 80097e0:	4603      	mov	r3, r0
 80097e2:	4a0b      	ldr	r2, [pc, #44]	; (8009810 <SD_initialize+0x80>)
 80097e4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80097e6:	4b0a      	ldr	r3, [pc, #40]	; (8009810 <SD_initialize+0x80>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d107      	bne.n	80097fe <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80097ee:	4b07      	ldr	r3, [pc, #28]	; (800980c <SD_initialize+0x7c>)
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f043 0301 	orr.w	r3, r3, #1
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	4b04      	ldr	r3, [pc, #16]	; (800980c <SD_initialize+0x7c>)
 80097fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80097fe:	4b03      	ldr	r3, [pc, #12]	; (800980c <SD_initialize+0x7c>)
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	b2db      	uxtb	r3, r3
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	20000019 	.word	0x20000019
 8009810:	20000c64 	.word	0x20000c64

08009814 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff ff97 	bl	8009754 <SD_CheckStatus>
 8009826:	4603      	mov	r3, r0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af00      	add	r7, sp, #0
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009844:	f247 5030 	movw	r0, #30000	; 0x7530
 8009848:	f7ff ff66 	bl	8009718 <SD_CheckStatusWithTimeout>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	da01      	bge.n	8009856 <SD_read+0x26>
  {
    return res;
 8009852:	7ffb      	ldrb	r3, [r7, #31]
 8009854:	e02f      	b.n	80098b6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	68b8      	ldr	r0, [r7, #8]
 800985c:	f7ff fed0 	bl	8009600 <BSP_SD_ReadBlocks_DMA>
 8009860:	4603      	mov	r3, r0
 8009862:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8009864:	7fbb      	ldrb	r3, [r7, #30]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d124      	bne.n	80098b4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800986a:	4b15      	ldr	r3, [pc, #84]	; (80098c0 <SD_read+0x90>)
 800986c:	6818      	ldr	r0, [r3, #0]
 800986e:	f107 0112 	add.w	r1, r7, #18
 8009872:	f247 5330 	movw	r3, #30000	; 0x7530
 8009876:	2200      	movs	r2, #0
 8009878:	f003 fc5e 	bl	800d138 <osMessageQueueGet>
 800987c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d117      	bne.n	80098b4 <SD_read+0x84>
 8009884:	8a7b      	ldrh	r3, [r7, #18]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d114      	bne.n	80098b4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800988a:	f003 f86b 	bl	800c964 <osKernelGetTickCount>
 800988e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009890:	e007      	b.n	80098a2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009892:	f7ff fee9 	bl	8009668 <BSP_SD_GetCardState>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d102      	bne.n	80098a2 <SD_read+0x72>
              {
                res = RES_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80098a0:	e008      	b.n	80098b4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80098a2:	f003 f85f 	bl	800c964 <osKernelGetTickCount>
 80098a6:	4602      	mov	r2, r0
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	f247 522f 	movw	r2, #29999	; 0x752f
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d9ee      	bls.n	8009892 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80098b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3720      	adds	r7, #32
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	20000c64 	.word	0x20000c64

080098c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b088      	sub	sp, #32
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60b9      	str	r1, [r7, #8]
 80098cc:	607a      	str	r2, [r7, #4]
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80098d8:	f247 5030 	movw	r0, #30000	; 0x7530
 80098dc:	f7ff ff1c 	bl	8009718 <SD_CheckStatusWithTimeout>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	da01      	bge.n	80098ea <SD_write+0x26>
  {
    return res;
 80098e6:	7ffb      	ldrb	r3, [r7, #31]
 80098e8:	e02d      	b.n	8009946 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	68b8      	ldr	r0, [r7, #8]
 80098f0:	f7ff fea0 	bl	8009634 <BSP_SD_WriteBlocks_DMA>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d124      	bne.n	8009944 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80098fa:	4b15      	ldr	r3, [pc, #84]	; (8009950 <SD_write+0x8c>)
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	f107 0112 	add.w	r1, r7, #18
 8009902:	f247 5330 	movw	r3, #30000	; 0x7530
 8009906:	2200      	movs	r2, #0
 8009908:	f003 fc16 	bl	800d138 <osMessageQueueGet>
 800990c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d117      	bne.n	8009944 <SD_write+0x80>
 8009914:	8a7b      	ldrh	r3, [r7, #18]
 8009916:	2b02      	cmp	r3, #2
 8009918:	d114      	bne.n	8009944 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800991a:	f003 f823 	bl	800c964 <osKernelGetTickCount>
 800991e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009920:	e007      	b.n	8009932 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009922:	f7ff fea1 	bl	8009668 <BSP_SD_GetCardState>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d102      	bne.n	8009932 <SD_write+0x6e>
          {
            res = RES_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	77fb      	strb	r3, [r7, #31]
            break;
 8009930:	e008      	b.n	8009944 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009932:	f003 f817 	bl	800c964 <osKernelGetTickCount>
 8009936:	4602      	mov	r2, r0
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009940:	4293      	cmp	r3, r2
 8009942:	d9ee      	bls.n	8009922 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009944:	7ffb      	ldrb	r3, [r7, #31]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3720      	adds	r7, #32
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	20000c64 	.word	0x20000c64

08009954 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b08c      	sub	sp, #48	; 0x30
 8009958:	af00      	add	r7, sp, #0
 800995a:	4603      	mov	r3, r0
 800995c:	603a      	str	r2, [r7, #0]
 800995e:	71fb      	strb	r3, [r7, #7]
 8009960:	460b      	mov	r3, r1
 8009962:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800996a:	4b25      	ldr	r3, [pc, #148]	; (8009a00 <SD_ioctl+0xac>)
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	b2db      	uxtb	r3, r3
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <SD_ioctl+0x28>
 8009978:	2303      	movs	r3, #3
 800997a:	e03c      	b.n	80099f6 <SD_ioctl+0xa2>

  switch (cmd)
 800997c:	79bb      	ldrb	r3, [r7, #6]
 800997e:	2b03      	cmp	r3, #3
 8009980:	d834      	bhi.n	80099ec <SD_ioctl+0x98>
 8009982:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <SD_ioctl+0x34>)
 8009984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009988:	08009999 	.word	0x08009999
 800998c:	080099a1 	.word	0x080099a1
 8009990:	080099b9 	.word	0x080099b9
 8009994:	080099d3 	.word	0x080099d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009998:	2300      	movs	r3, #0
 800999a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800999e:	e028      	b.n	80099f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80099a0:	f107 0308 	add.w	r3, r7, #8
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7ff fe6f 	bl	8009688 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80099aa:	6a3a      	ldr	r2, [r7, #32]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80099b6:	e01c      	b.n	80099f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80099b8:	f107 0308 	add.w	r3, r7, #8
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff fe63 	bl	8009688 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80099d0:	e00f      	b.n	80099f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80099d2:	f107 0308 	add.w	r3, r7, #8
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7ff fe56 	bl	8009688 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	0a5a      	lsrs	r2, r3, #9
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80099ea:	e002      	b.n	80099f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80099ec:	2304      	movs	r3, #4
 80099ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80099f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3730      	adds	r7, #48	; 0x30
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20000019 	.word	0x20000019

08009a04 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009a0e:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <BSP_SD_WriteCpltCallback+0x20>)
 8009a10:	6818      	ldr	r0, [r3, #0]
 8009a12:	1db9      	adds	r1, r7, #6
 8009a14:	2300      	movs	r3, #0
 8009a16:	2200      	movs	r2, #0
 8009a18:	f003 fb2e 	bl	800d078 <osMessageQueuePut>
#endif
}
 8009a1c:	bf00      	nop
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20000c64 	.word	0x20000c64

08009a28 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009a32:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <BSP_SD_ReadCpltCallback+0x20>)
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	1db9      	adds	r1, r7, #6
 8009a38:	2300      	movs	r3, #0
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f003 fb1c 	bl	800d078 <osMessageQueuePut>
#endif
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	20000c64 	.word	0x20000c64

08009a4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	4603      	mov	r3, r0
 8009a54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	4a08      	ldr	r2, [pc, #32]	; (8009a7c <disk_status+0x30>)
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	79fa      	ldrb	r2, [r7, #7]
 8009a64:	4905      	ldr	r1, [pc, #20]	; (8009a7c <disk_status+0x30>)
 8009a66:	440a      	add	r2, r1
 8009a68:	7a12      	ldrb	r2, [r2, #8]
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	4798      	blx	r3
 8009a6e:	4603      	mov	r3, r0
 8009a70:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20000c90 	.word	0x20000c90

08009a80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009a8e:	79fb      	ldrb	r3, [r7, #7]
 8009a90:	4a0d      	ldr	r2, [pc, #52]	; (8009ac8 <disk_initialize+0x48>)
 8009a92:	5cd3      	ldrb	r3, [r2, r3]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d111      	bne.n	8009abc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009a98:	79fb      	ldrb	r3, [r7, #7]
 8009a9a:	4a0b      	ldr	r2, [pc, #44]	; (8009ac8 <disk_initialize+0x48>)
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	4a09      	ldr	r2, [pc, #36]	; (8009ac8 <disk_initialize+0x48>)
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	79fa      	ldrb	r2, [r7, #7]
 8009aae:	4906      	ldr	r1, [pc, #24]	; (8009ac8 <disk_initialize+0x48>)
 8009ab0:	440a      	add	r2, r1
 8009ab2:	7a12      	ldrb	r2, [r2, #8]
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	4798      	blx	r3
 8009ab8:	4603      	mov	r3, r0
 8009aba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20000c90 	.word	0x20000c90

08009acc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009acc:	b590      	push	{r4, r7, lr}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	607a      	str	r2, [r7, #4]
 8009ad6:	603b      	str	r3, [r7, #0]
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	4a0a      	ldr	r2, [pc, #40]	; (8009b08 <disk_read+0x3c>)
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	689c      	ldr	r4, [r3, #8]
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	4a07      	ldr	r2, [pc, #28]	; (8009b08 <disk_read+0x3c>)
 8009aec:	4413      	add	r3, r2
 8009aee:	7a18      	ldrb	r0, [r3, #8]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	47a0      	blx	r4
 8009af8:	4603      	mov	r3, r0
 8009afa:	75fb      	strb	r3, [r7, #23]
  return res;
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd90      	pop	{r4, r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20000c90 	.word	0x20000c90

08009b0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009b0c:	b590      	push	{r4, r7, lr}
 8009b0e:	b087      	sub	sp, #28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	607a      	str	r2, [r7, #4]
 8009b16:	603b      	str	r3, [r7, #0]
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	4a0a      	ldr	r2, [pc, #40]	; (8009b48 <disk_write+0x3c>)
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4413      	add	r3, r2
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	68dc      	ldr	r4, [r3, #12]
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
 8009b2a:	4a07      	ldr	r2, [pc, #28]	; (8009b48 <disk_write+0x3c>)
 8009b2c:	4413      	add	r3, r2
 8009b2e:	7a18      	ldrb	r0, [r3, #8]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	68b9      	ldr	r1, [r7, #8]
 8009b36:	47a0      	blx	r4
 8009b38:	4603      	mov	r3, r0
 8009b3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd90      	pop	{r4, r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20000c90 	.word	0x20000c90

08009b4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	603a      	str	r2, [r7, #0]
 8009b56:	71fb      	strb	r3, [r7, #7]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b5c:	79fb      	ldrb	r3, [r7, #7]
 8009b5e:	4a09      	ldr	r2, [pc, #36]	; (8009b84 <disk_ioctl+0x38>)
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	79fa      	ldrb	r2, [r7, #7]
 8009b6a:	4906      	ldr	r1, [pc, #24]	; (8009b84 <disk_ioctl+0x38>)
 8009b6c:	440a      	add	r2, r1
 8009b6e:	7a10      	ldrb	r0, [r2, #8]
 8009b70:	79b9      	ldrb	r1, [r7, #6]
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	4798      	blx	r3
 8009b76:	4603      	mov	r3, r0
 8009b78:	73fb      	strb	r3, [r7, #15]
  return res;
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	20000c90 	.word	0x20000c90

08009b88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3301      	adds	r3, #1
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009b98:	89fb      	ldrh	r3, [r7, #14]
 8009b9a:	021b      	lsls	r3, r3, #8
 8009b9c:	b21a      	sxth	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	b21b      	sxth	r3, r3
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	b21b      	sxth	r3, r3
 8009ba8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009baa:	89fb      	ldrh	r3, [r7, #14]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	3303      	adds	r3, #3
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	021b      	lsls	r3, r3, #8
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	3202      	adds	r2, #2
 8009bd0:	7812      	ldrb	r2, [r2, #0]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	021b      	lsls	r3, r3, #8
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	3201      	adds	r2, #1
 8009bde:	7812      	ldrb	r2, [r2, #0]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	021b      	lsls	r3, r3, #8
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	7812      	ldrb	r2, [r2, #0]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]
	return rv;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b083      	sub	sp, #12
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	607a      	str	r2, [r7, #4]
 8009c10:	887a      	ldrh	r2, [r7, #2]
 8009c12:	b2d2      	uxtb	r2, r2
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	887b      	ldrh	r3, [r7, #2]
 8009c18:	0a1b      	lsrs	r3, r3, #8
 8009c1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	607a      	str	r2, [r7, #4]
 8009c22:	887a      	ldrh	r2, [r7, #2]
 8009c24:	b2d2      	uxtb	r2, r2
 8009c26:	701a      	strb	r2, [r3, #0]
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	b2d2      	uxtb	r2, r2
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	0a1b      	lsrs	r3, r3, #8
 8009c4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	607a      	str	r2, [r7, #4]
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	b2d2      	uxtb	r2, r2
 8009c5a:	701a      	strb	r2, [r3, #0]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	0a1b      	lsrs	r3, r3, #8
 8009c60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	0a1b      	lsrs	r3, r3, #8
 8009c72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	607a      	str	r2, [r7, #4]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	b2d2      	uxtb	r2, r2
 8009c7e:	701a      	strb	r2, [r3, #0]
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009c8c:	b480      	push	{r7}
 8009c8e:	b087      	sub	sp, #28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00d      	beq.n	8009cc2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	1c53      	adds	r3, r2, #1
 8009caa:	613b      	str	r3, [r7, #16]
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	1c59      	adds	r1, r3, #1
 8009cb0:	6179      	str	r1, [r7, #20]
 8009cb2:	7812      	ldrb	r2, [r2, #0]
 8009cb4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	607b      	str	r3, [r7, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1f1      	bne.n	8009ca6 <mem_cpy+0x1a>
	}
}
 8009cc2:	bf00      	nop
 8009cc4:	371c      	adds	r7, #28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009cce:	b480      	push	{r7}
 8009cd0:	b087      	sub	sp, #28
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	1c5a      	adds	r2, r3, #1
 8009ce2:	617a      	str	r2, [r7, #20]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	b2d2      	uxtb	r2, r2
 8009ce8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	607b      	str	r3, [r7, #4]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1f3      	bne.n	8009cde <mem_set+0x10>
}
 8009cf6:	bf00      	nop
 8009cf8:	bf00      	nop
 8009cfa:	371c      	adds	r7, #28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009d04:	b480      	push	{r7}
 8009d06:	b089      	sub	sp, #36	; 0x24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	61fb      	str	r3, [r7, #28]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	61fa      	str	r2, [r7, #28]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	4619      	mov	r1, r3
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	61ba      	str	r2, [r7, #24]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	1acb      	subs	r3, r1, r3
 8009d30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	607b      	str	r3, [r7, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d002      	beq.n	8009d44 <mem_cmp+0x40>
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d0eb      	beq.n	8009d1c <mem_cmp+0x18>

	return r;
 8009d44:	697b      	ldr	r3, [r7, #20]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3724      	adds	r7, #36	; 0x24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009d52:	b480      	push	{r7}
 8009d54:	b083      	sub	sp, #12
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009d5c:	e002      	b.n	8009d64 <chk_chr+0x12>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	3301      	adds	r3, #1
 8009d62:	607b      	str	r3, [r7, #4]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d005      	beq.n	8009d78 <chk_chr+0x26>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	461a      	mov	r2, r3
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d1f2      	bne.n	8009d5e <chk_chr+0xc>
	return *str;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d009      	beq.n	8009daa <lock_fs+0x22>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f002 fd12 	bl	800c7c4 <ff_req_grant>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <lock_fs+0x22>
 8009da6:	2301      	movs	r3, #1
 8009da8:	e000      	b.n	8009dac <lock_fs+0x24>
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00d      	beq.n	8009de2 <unlock_fs+0x2e>
 8009dc6:	78fb      	ldrb	r3, [r7, #3]
 8009dc8:	2b0c      	cmp	r3, #12
 8009dca:	d00a      	beq.n	8009de2 <unlock_fs+0x2e>
 8009dcc:	78fb      	ldrb	r3, [r7, #3]
 8009dce:	2b0b      	cmp	r3, #11
 8009dd0:	d007      	beq.n	8009de2 <unlock_fs+0x2e>
 8009dd2:	78fb      	ldrb	r3, [r7, #3]
 8009dd4:	2b0f      	cmp	r3, #15
 8009dd6:	d004      	beq.n	8009de2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f002 fd06 	bl	800c7ee <ff_rel_grant>
	}
}
 8009de2:	bf00      	nop
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009df6:	2300      	movs	r3, #0
 8009df8:	60bb      	str	r3, [r7, #8]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	60fb      	str	r3, [r7, #12]
 8009dfe:	e029      	b.n	8009e54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009e00:	4a27      	ldr	r2, [pc, #156]	; (8009ea0 <chk_lock+0xb4>)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	011b      	lsls	r3, r3, #4
 8009e06:	4413      	add	r3, r2
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d01d      	beq.n	8009e4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e0e:	4a24      	ldr	r2, [pc, #144]	; (8009ea0 <chk_lock+0xb4>)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	011b      	lsls	r3, r3, #4
 8009e14:	4413      	add	r3, r2
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d116      	bne.n	8009e4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009e20:	4a1f      	ldr	r2, [pc, #124]	; (8009ea0 <chk_lock+0xb4>)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	4413      	add	r3, r2
 8009e28:	3304      	adds	r3, #4
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d10c      	bne.n	8009e4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e34:	4a1a      	ldr	r2, [pc, #104]	; (8009ea0 <chk_lock+0xb4>)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	011b      	lsls	r3, r3, #4
 8009e3a:	4413      	add	r3, r2
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d102      	bne.n	8009e4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e48:	e007      	b.n	8009e5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3301      	adds	r3, #1
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d9d2      	bls.n	8009e00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d109      	bne.n	8009e74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d102      	bne.n	8009e6c <chk_lock+0x80>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d101      	bne.n	8009e70 <chk_lock+0x84>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	e010      	b.n	8009e92 <chk_lock+0xa6>
 8009e70:	2312      	movs	r3, #18
 8009e72:	e00e      	b.n	8009e92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d108      	bne.n	8009e8c <chk_lock+0xa0>
 8009e7a:	4a09      	ldr	r2, [pc, #36]	; (8009ea0 <chk_lock+0xb4>)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	4413      	add	r3, r2
 8009e82:	330c      	adds	r3, #12
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e8a:	d101      	bne.n	8009e90 <chk_lock+0xa4>
 8009e8c:	2310      	movs	r3, #16
 8009e8e:	e000      	b.n	8009e92 <chk_lock+0xa6>
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20000c70 	.word	0x20000c70

08009ea4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	607b      	str	r3, [r7, #4]
 8009eae:	e002      	b.n	8009eb6 <enq_lock+0x12>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	607b      	str	r3, [r7, #4]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d806      	bhi.n	8009eca <enq_lock+0x26>
 8009ebc:	4a09      	ldr	r2, [pc, #36]	; (8009ee4 <enq_lock+0x40>)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	011b      	lsls	r3, r3, #4
 8009ec2:	4413      	add	r3, r2
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1f2      	bne.n	8009eb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	bf14      	ite	ne
 8009ed0:	2301      	movne	r3, #1
 8009ed2:	2300      	moveq	r3, #0
 8009ed4:	b2db      	uxtb	r3, r3
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	370c      	adds	r7, #12
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	20000c70 	.word	0x20000c70

08009ee8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60fb      	str	r3, [r7, #12]
 8009ef6:	e01f      	b.n	8009f38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009ef8:	4a41      	ldr	r2, [pc, #260]	; (800a000 <inc_lock+0x118>)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	011b      	lsls	r3, r3, #4
 8009efe:	4413      	add	r3, r2
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d113      	bne.n	8009f32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009f0a:	4a3d      	ldr	r2, [pc, #244]	; (800a000 <inc_lock+0x118>)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	011b      	lsls	r3, r3, #4
 8009f10:	4413      	add	r3, r2
 8009f12:	3304      	adds	r3, #4
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d109      	bne.n	8009f32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009f1e:	4a38      	ldr	r2, [pc, #224]	; (800a000 <inc_lock+0x118>)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	011b      	lsls	r3, r3, #4
 8009f24:	4413      	add	r3, r2
 8009f26:	3308      	adds	r3, #8
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d006      	beq.n	8009f40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3301      	adds	r3, #1
 8009f36:	60fb      	str	r3, [r7, #12]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d9dc      	bls.n	8009ef8 <inc_lock+0x10>
 8009f3e:	e000      	b.n	8009f42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009f40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d132      	bne.n	8009fae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	e002      	b.n	8009f54 <inc_lock+0x6c>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3301      	adds	r3, #1
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d806      	bhi.n	8009f68 <inc_lock+0x80>
 8009f5a:	4a29      	ldr	r2, [pc, #164]	; (800a000 <inc_lock+0x118>)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	011b      	lsls	r3, r3, #4
 8009f60:	4413      	add	r3, r2
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1f2      	bne.n	8009f4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d101      	bne.n	8009f72 <inc_lock+0x8a>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e040      	b.n	8009ff4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	4922      	ldr	r1, [pc, #136]	; (800a000 <inc_lock+0x118>)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	440b      	add	r3, r1
 8009f7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	689a      	ldr	r2, [r3, #8]
 8009f84:	491e      	ldr	r1, [pc, #120]	; (800a000 <inc_lock+0x118>)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	440b      	add	r3, r1
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	695a      	ldr	r2, [r3, #20]
 8009f94:	491a      	ldr	r1, [pc, #104]	; (800a000 <inc_lock+0x118>)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	011b      	lsls	r3, r3, #4
 8009f9a:	440b      	add	r3, r1
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009fa0:	4a17      	ldr	r2, [pc, #92]	; (800a000 <inc_lock+0x118>)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	011b      	lsls	r3, r3, #4
 8009fa6:	4413      	add	r3, r2
 8009fa8:	330c      	adds	r3, #12
 8009faa:	2200      	movs	r2, #0
 8009fac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d009      	beq.n	8009fc8 <inc_lock+0xe0>
 8009fb4:	4a12      	ldr	r2, [pc, #72]	; (800a000 <inc_lock+0x118>)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	011b      	lsls	r3, r3, #4
 8009fba:	4413      	add	r3, r2
 8009fbc:	330c      	adds	r3, #12
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <inc_lock+0xe0>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e015      	b.n	8009ff4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d108      	bne.n	8009fe0 <inc_lock+0xf8>
 8009fce:	4a0c      	ldr	r2, [pc, #48]	; (800a000 <inc_lock+0x118>)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	011b      	lsls	r3, r3, #4
 8009fd4:	4413      	add	r3, r2
 8009fd6:	330c      	adds	r3, #12
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	e001      	b.n	8009fe4 <inc_lock+0xfc>
 8009fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fe4:	4906      	ldr	r1, [pc, #24]	; (800a000 <inc_lock+0x118>)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	011b      	lsls	r3, r3, #4
 8009fea:	440b      	add	r3, r1
 8009fec:	330c      	adds	r3, #12
 8009fee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3301      	adds	r3, #1
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	20000c70 	.word	0x20000c70

0800a004 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3b01      	subs	r3, #1
 800a010:	607b      	str	r3, [r7, #4]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d825      	bhi.n	800a064 <dec_lock+0x60>
		n = Files[i].ctr;
 800a018:	4a17      	ldr	r2, [pc, #92]	; (800a078 <dec_lock+0x74>)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	011b      	lsls	r3, r3, #4
 800a01e:	4413      	add	r3, r2
 800a020:	330c      	adds	r3, #12
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a026:	89fb      	ldrh	r3, [r7, #14]
 800a028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a02c:	d101      	bne.n	800a032 <dec_lock+0x2e>
 800a02e:	2300      	movs	r3, #0
 800a030:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a032:	89fb      	ldrh	r3, [r7, #14]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <dec_lock+0x3a>
 800a038:	89fb      	ldrh	r3, [r7, #14]
 800a03a:	3b01      	subs	r3, #1
 800a03c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a03e:	4a0e      	ldr	r2, [pc, #56]	; (800a078 <dec_lock+0x74>)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	011b      	lsls	r3, r3, #4
 800a044:	4413      	add	r3, r2
 800a046:	330c      	adds	r3, #12
 800a048:	89fa      	ldrh	r2, [r7, #14]
 800a04a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a04c:	89fb      	ldrh	r3, [r7, #14]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d105      	bne.n	800a05e <dec_lock+0x5a>
 800a052:	4a09      	ldr	r2, [pc, #36]	; (800a078 <dec_lock+0x74>)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	011b      	lsls	r3, r3, #4
 800a058:	4413      	add	r3, r2
 800a05a:	2200      	movs	r2, #0
 800a05c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	737b      	strb	r3, [r7, #13]
 800a062:	e001      	b.n	800a068 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a064:	2302      	movs	r3, #2
 800a066:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a068:	7b7b      	ldrb	r3, [r7, #13]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	20000c70 	.word	0x20000c70

0800a07c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a084:	2300      	movs	r3, #0
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	e010      	b.n	800a0ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a08a:	4a0d      	ldr	r2, [pc, #52]	; (800a0c0 <clear_lock+0x44>)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	4413      	add	r3, r2
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	429a      	cmp	r2, r3
 800a098:	d105      	bne.n	800a0a6 <clear_lock+0x2a>
 800a09a:	4a09      	ldr	r2, [pc, #36]	; (800a0c0 <clear_lock+0x44>)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	011b      	lsls	r3, r3, #4
 800a0a0:	4413      	add	r3, r2
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d9eb      	bls.n	800a08a <clear_lock+0xe>
	}
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	20000c70 	.word	0x20000c70

0800a0c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	78db      	ldrb	r3, [r3, #3]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d034      	beq.n	800a142 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	7858      	ldrb	r0, [r3, #1]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	f7ff fd0e 	bl	8009b0c <disk_write>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d002      	beq.n	800a0fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	73fb      	strb	r3, [r7, #15]
 800a0fa:	e022      	b.n	800a142 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	1ad2      	subs	r2, r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	69db      	ldr	r3, [r3, #28]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d217      	bcs.n	800a142 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	789b      	ldrb	r3, [r3, #2]
 800a116:	613b      	str	r3, [r7, #16]
 800a118:	e010      	b.n	800a13c <sync_window+0x78>
					wsect += fs->fsize;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	69db      	ldr	r3, [r3, #28]
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	4413      	add	r3, r2
 800a122:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	7858      	ldrb	r0, [r3, #1]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a12e:	2301      	movs	r3, #1
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	f7ff fceb 	bl	8009b0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	3b01      	subs	r3, #1
 800a13a:	613b      	str	r3, [r7, #16]
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d8eb      	bhi.n	800a11a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a142:	7bfb      	ldrb	r3, [r7, #15]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d01b      	beq.n	800a19c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff ffad 	bl	800a0c4 <sync_window>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d113      	bne.n	800a19c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	7858      	ldrb	r0, [r3, #1]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a17e:	2301      	movs	r3, #1
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	f7ff fca3 	bl	8009acc <disk_read>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d004      	beq.n	800a196 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a18c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a190:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a192:	2301      	movs	r3, #1
 800a194:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff ff87 	bl	800a0c4 <sync_window>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a1ba:	7bfb      	ldrb	r3, [r7, #15]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d158      	bne.n	800a272 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2b03      	cmp	r3, #3
 800a1c6:	d148      	bne.n	800a25a <sync_fs+0xb2>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	791b      	ldrb	r3, [r3, #4]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d144      	bne.n	800a25a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	3334      	adds	r3, #52	; 0x34
 800a1d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1d8:	2100      	movs	r1, #0
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff fd77 	bl	8009cce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	3334      	adds	r3, #52	; 0x34
 800a1e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff fd06 	bl	8009bfe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	3334      	adds	r3, #52	; 0x34
 800a1f6:	4921      	ldr	r1, [pc, #132]	; (800a27c <sync_fs+0xd4>)
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff fd1b 	bl	8009c34 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	3334      	adds	r3, #52	; 0x34
 800a202:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a206:	491e      	ldr	r1, [pc, #120]	; (800a280 <sync_fs+0xd8>)
 800a208:	4618      	mov	r0, r3
 800a20a:	f7ff fd13 	bl	8009c34 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3334      	adds	r3, #52	; 0x34
 800a212:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	4619      	mov	r1, r3
 800a21c:	4610      	mov	r0, r2
 800a21e:	f7ff fd09 	bl	8009c34 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3334      	adds	r3, #52	; 0x34
 800a226:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	4619      	mov	r1, r3
 800a230:	4610      	mov	r0, r2
 800a232:	f7ff fcff 	bl	8009c34 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	7858      	ldrb	r0, [r3, #1]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a24e:	2301      	movs	r3, #1
 800a250:	f7ff fc5c 	bl	8009b0c <disk_write>
			fs->fsi_flag = 0;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	785b      	ldrb	r3, [r3, #1]
 800a25e:	2200      	movs	r2, #0
 800a260:	2100      	movs	r1, #0
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff fc72 	bl	8009b4c <disk_ioctl>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <sync_fs+0xca>
 800a26e:	2301      	movs	r3, #1
 800a270:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a272:	7bfb      	ldrb	r3, [r7, #15]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	41615252 	.word	0x41615252
 800a280:	61417272 	.word	0x61417272

0800a284 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	3b02      	subs	r3, #2
 800a292:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	3b02      	subs	r3, #2
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d301      	bcc.n	800a2a4 <clust2sect+0x20>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e008      	b.n	800a2b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	895b      	ldrh	r3, [r3, #10]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	fb03 f202 	mul.w	r2, r3, r2
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	4413      	add	r3, r2
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b086      	sub	sp, #24
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d904      	bls.n	800a2e2 <get_fat+0x20>
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d302      	bcc.n	800a2e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	617b      	str	r3, [r7, #20]
 800a2e6:	e08f      	b.n	800a408 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a2e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d062      	beq.n	800a3bc <get_fat+0xfa>
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	dc7c      	bgt.n	800a3f4 <get_fat+0x132>
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d002      	beq.n	800a304 <get_fat+0x42>
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d042      	beq.n	800a388 <get_fat+0xc6>
 800a302:	e077      	b.n	800a3f4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	085b      	lsrs	r3, r3, #1
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	0a5b      	lsrs	r3, r3, #9
 800a31a:	4413      	add	r3, r2
 800a31c:	4619      	mov	r1, r3
 800a31e:	6938      	ldr	r0, [r7, #16]
 800a320:	f7ff ff14 	bl	800a14c <move_window>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d167      	bne.n	800a3fa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	1c5a      	adds	r2, r3, #1
 800a32e:	60fa      	str	r2, [r7, #12]
 800a330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	4413      	add	r3, r2
 800a338:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a33c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	0a5b      	lsrs	r3, r3, #9
 800a346:	4413      	add	r3, r2
 800a348:	4619      	mov	r1, r3
 800a34a:	6938      	ldr	r0, [r7, #16]
 800a34c:	f7ff fefe 	bl	800a14c <move_window>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d153      	bne.n	800a3fe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	4413      	add	r3, r2
 800a360:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a364:	021b      	lsls	r3, r3, #8
 800a366:	461a      	mov	r2, r3
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	f003 0301 	and.w	r3, r3, #1
 800a374:	2b00      	cmp	r3, #0
 800a376:	d002      	beq.n	800a37e <get_fat+0xbc>
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	091b      	lsrs	r3, r3, #4
 800a37c:	e002      	b.n	800a384 <get_fat+0xc2>
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a384:	617b      	str	r3, [r7, #20]
			break;
 800a386:	e03f      	b.n	800a408 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	0a1b      	lsrs	r3, r3, #8
 800a390:	4413      	add	r3, r2
 800a392:	4619      	mov	r1, r3
 800a394:	6938      	ldr	r0, [r7, #16]
 800a396:	f7ff fed9 	bl	800a14c <move_window>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d130      	bne.n	800a402 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a3ae:	4413      	add	r3, r2
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff fbe9 	bl	8009b88 <ld_word>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	617b      	str	r3, [r7, #20]
			break;
 800a3ba:	e025      	b.n	800a408 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	09db      	lsrs	r3, r3, #7
 800a3c4:	4413      	add	r3, r2
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	6938      	ldr	r0, [r7, #16]
 800a3ca:	f7ff febf 	bl	800a14c <move_window>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d118      	bne.n	800a406 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a3e2:	4413      	add	r3, r2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7ff fbe7 	bl	8009bb8 <ld_dword>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a3f0:	617b      	str	r3, [r7, #20]
			break;
 800a3f2:	e009      	b.n	800a408 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	617b      	str	r3, [r7, #20]
 800a3f8:	e006      	b.n	800a408 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3fa:	bf00      	nop
 800a3fc:	e004      	b.n	800a408 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3fe:	bf00      	nop
 800a400:	e002      	b.n	800a408 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a402:	bf00      	nop
 800a404:	e000      	b.n	800a408 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a406:	bf00      	nop
		}
	}

	return val;
 800a408:	697b      	ldr	r3, [r7, #20]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a412:	b590      	push	{r4, r7, lr}
 800a414:	b089      	sub	sp, #36	; 0x24
 800a416:	af00      	add	r7, sp, #0
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a41e:	2302      	movs	r3, #2
 800a420:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2b01      	cmp	r3, #1
 800a426:	f240 80d2 	bls.w	800a5ce <put_fat+0x1bc>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	429a      	cmp	r2, r3
 800a432:	f080 80cc 	bcs.w	800a5ce <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	f000 8096 	beq.w	800a56c <put_fat+0x15a>
 800a440:	2b03      	cmp	r3, #3
 800a442:	f300 80cd 	bgt.w	800a5e0 <put_fat+0x1ce>
 800a446:	2b01      	cmp	r3, #1
 800a448:	d002      	beq.n	800a450 <put_fat+0x3e>
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d06e      	beq.n	800a52c <put_fat+0x11a>
 800a44e:	e0c7      	b.n	800a5e0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	61bb      	str	r3, [r7, #24]
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	085b      	lsrs	r3, r3, #1
 800a458:	69ba      	ldr	r2, [r7, #24]
 800a45a:	4413      	add	r3, r2
 800a45c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	0a5b      	lsrs	r3, r3, #9
 800a466:	4413      	add	r3, r2
 800a468:	4619      	mov	r1, r3
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7ff fe6e 	bl	800a14c <move_window>
 800a470:	4603      	mov	r3, r0
 800a472:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a474:	7ffb      	ldrb	r3, [r7, #31]
 800a476:	2b00      	cmp	r3, #0
 800a478:	f040 80ab 	bne.w	800a5d2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	1c59      	adds	r1, r3, #1
 800a486:	61b9      	str	r1, [r7, #24]
 800a488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a48c:	4413      	add	r3, r2
 800a48e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00d      	beq.n	800a4b6 <put_fat+0xa4>
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	b25b      	sxtb	r3, r3
 800a4a0:	f003 030f 	and.w	r3, r3, #15
 800a4a4:	b25a      	sxtb	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	011b      	lsls	r3, r3, #4
 800a4ac:	b25b      	sxtb	r3, r3
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	b25b      	sxtb	r3, r3
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	e001      	b.n	800a4ba <put_fat+0xa8>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	0a5b      	lsrs	r3, r3, #9
 800a4cc:	4413      	add	r3, r2
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f7ff fe3b 	bl	800a14c <move_window>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4da:	7ffb      	ldrb	r3, [r7, #31]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d17a      	bne.n	800a5d6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ec:	4413      	add	r3, r2
 800a4ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <put_fat+0xf0>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	091b      	lsrs	r3, r3, #4
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	e00e      	b.n	800a520 <put_fat+0x10e>
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	b25b      	sxtb	r3, r3
 800a508:	f023 030f 	bic.w	r3, r3, #15
 800a50c:	b25a      	sxtb	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	0a1b      	lsrs	r3, r3, #8
 800a512:	b25b      	sxtb	r3, r3
 800a514:	f003 030f 	and.w	r3, r3, #15
 800a518:	b25b      	sxtb	r3, r3
 800a51a:	4313      	orrs	r3, r2
 800a51c:	b25b      	sxtb	r3, r3
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2201      	movs	r2, #1
 800a528:	70da      	strb	r2, [r3, #3]
			break;
 800a52a:	e059      	b.n	800a5e0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	0a1b      	lsrs	r3, r3, #8
 800a534:	4413      	add	r3, r2
 800a536:	4619      	mov	r1, r3
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f7ff fe07 	bl	800a14c <move_window>
 800a53e:	4603      	mov	r3, r0
 800a540:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a542:	7ffb      	ldrb	r3, [r7, #31]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d148      	bne.n	800a5da <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	005b      	lsls	r3, r3, #1
 800a552:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a556:	4413      	add	r3, r2
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	b292      	uxth	r2, r2
 800a55c:	4611      	mov	r1, r2
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff fb4d 	bl	8009bfe <st_word>
			fs->wflag = 1;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2201      	movs	r2, #1
 800a568:	70da      	strb	r2, [r3, #3]
			break;
 800a56a:	e039      	b.n	800a5e0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	09db      	lsrs	r3, r3, #7
 800a574:	4413      	add	r3, r2
 800a576:	4619      	mov	r1, r3
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f7ff fde7 	bl	800a14c <move_window>
 800a57e:	4603      	mov	r3, r0
 800a580:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a582:	7ffb      	ldrb	r3, [r7, #31]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d12a      	bne.n	800a5de <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a59c:	4413      	add	r3, r2
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fb0a 	bl	8009bb8 <ld_dword>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a5aa:	4323      	orrs	r3, r4
 800a5ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a5bc:	4413      	add	r3, r2
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff fb37 	bl	8009c34 <st_dword>
			fs->wflag = 1;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	70da      	strb	r2, [r3, #3]
			break;
 800a5cc:	e008      	b.n	800a5e0 <put_fat+0x1ce>
		}
	}
 800a5ce:	bf00      	nop
 800a5d0:	e006      	b.n	800a5e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a5d2:	bf00      	nop
 800a5d4:	e004      	b.n	800a5e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a5d6:	bf00      	nop
 800a5d8:	e002      	b.n	800a5e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a5da:	bf00      	nop
 800a5dc:	e000      	b.n	800a5e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a5de:	bf00      	nop
	return res;
 800a5e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3724      	adds	r7, #36	; 0x24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd90      	pop	{r4, r7, pc}

0800a5ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b088      	sub	sp, #32
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d904      	bls.n	800a610 <remove_chain+0x26>
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d301      	bcc.n	800a614 <remove_chain+0x2a>
 800a610:	2302      	movs	r3, #2
 800a612:	e04b      	b.n	800a6ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00c      	beq.n	800a634 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a61a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a61e:	6879      	ldr	r1, [r7, #4]
 800a620:	69b8      	ldr	r0, [r7, #24]
 800a622:	f7ff fef6 	bl	800a412 <put_fat>
 800a626:	4603      	mov	r3, r0
 800a628:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a62a:	7ffb      	ldrb	r3, [r7, #31]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <remove_chain+0x4a>
 800a630:	7ffb      	ldrb	r3, [r7, #31]
 800a632:	e03b      	b.n	800a6ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a634:	68b9      	ldr	r1, [r7, #8]
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f7ff fe43 	bl	800a2c2 <get_fat>
 800a63c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d031      	beq.n	800a6a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <remove_chain+0x64>
 800a64a:	2302      	movs	r3, #2
 800a64c:	e02e      	b.n	800a6ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a654:	d101      	bne.n	800a65a <remove_chain+0x70>
 800a656:	2301      	movs	r3, #1
 800a658:	e028      	b.n	800a6ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a65a:	2200      	movs	r2, #0
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	69b8      	ldr	r0, [r7, #24]
 800a660:	f7ff fed7 	bl	800a412 <put_fat>
 800a664:	4603      	mov	r3, r0
 800a666:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a668:	7ffb      	ldrb	r3, [r7, #31]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <remove_chain+0x88>
 800a66e:	7ffb      	ldrb	r3, [r7, #31]
 800a670:	e01c      	b.n	800a6ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	695a      	ldr	r2, [r3, #20]
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	3b02      	subs	r3, #2
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d20b      	bcs.n	800a698 <remove_chain+0xae>
			fs->free_clst++;
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	1c5a      	adds	r2, r3, #1
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	791b      	ldrb	r3, [r3, #4]
 800a68e:	f043 0301 	orr.w	r3, r3, #1
 800a692:	b2da      	uxtb	r2, r3
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d3c6      	bcc.n	800a634 <remove_chain+0x4a>
 800a6a6:	e000      	b.n	800a6aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a6a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3720      	adds	r7, #32
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10d      	bne.n	800a6e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d004      	beq.n	800a6e0 <create_chain+0x2c>
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	69ba      	ldr	r2, [r7, #24]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d31b      	bcc.n	800a718 <create_chain+0x64>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	61bb      	str	r3, [r7, #24]
 800a6e4:	e018      	b.n	800a718 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff fdea 	bl	800a2c2 <get_fat>
 800a6ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d801      	bhi.n	800a6fa <create_chain+0x46>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e070      	b.n	800a7dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a700:	d101      	bne.n	800a706 <create_chain+0x52>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	e06a      	b.n	800a7dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d201      	bcs.n	800a714 <create_chain+0x60>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	e063      	b.n	800a7dc <create_chain+0x128>
		scl = clst;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	3301      	adds	r3, #1
 800a720:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	69fa      	ldr	r2, [r7, #28]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d307      	bcc.n	800a73c <create_chain+0x88>
				ncl = 2;
 800a72c:	2302      	movs	r3, #2
 800a72e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a730:	69fa      	ldr	r2, [r7, #28]
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	429a      	cmp	r2, r3
 800a736:	d901      	bls.n	800a73c <create_chain+0x88>
 800a738:	2300      	movs	r3, #0
 800a73a:	e04f      	b.n	800a7dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a73c:	69f9      	ldr	r1, [r7, #28]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff fdbf 	bl	800a2c2 <get_fat>
 800a744:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00e      	beq.n	800a76a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d003      	beq.n	800a75a <create_chain+0xa6>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a758:	d101      	bne.n	800a75e <create_chain+0xaa>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	e03e      	b.n	800a7dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a75e:	69fa      	ldr	r2, [r7, #28]
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	429a      	cmp	r2, r3
 800a764:	d1da      	bne.n	800a71c <create_chain+0x68>
 800a766:	2300      	movs	r3, #0
 800a768:	e038      	b.n	800a7dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a76a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a76c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a770:	69f9      	ldr	r1, [r7, #28]
 800a772:	6938      	ldr	r0, [r7, #16]
 800a774:	f7ff fe4d 	bl	800a412 <put_fat>
 800a778:	4603      	mov	r3, r0
 800a77a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a77c:	7dfb      	ldrb	r3, [r7, #23]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d109      	bne.n	800a796 <create_chain+0xe2>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d006      	beq.n	800a796 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a788:	69fa      	ldr	r2, [r7, #28]
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6938      	ldr	r0, [r7, #16]
 800a78e:	f7ff fe40 	bl	800a412 <put_fat>
 800a792:	4603      	mov	r3, r0
 800a794:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a796:	7dfb      	ldrb	r3, [r7, #23]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d116      	bne.n	800a7ca <create_chain+0x116>
		fs->last_clst = ncl;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	69fa      	ldr	r2, [r7, #28]
 800a7a0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	695a      	ldr	r2, [r3, #20]
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	699b      	ldr	r3, [r3, #24]
 800a7aa:	3b02      	subs	r3, #2
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d804      	bhi.n	800a7ba <create_chain+0x106>
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	1e5a      	subs	r2, r3, #1
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	791b      	ldrb	r3, [r3, #4]
 800a7be:	f043 0301 	orr.w	r3, r3, #1
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	711a      	strb	r2, [r3, #4]
 800a7c8:	e007      	b.n	800a7da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d102      	bne.n	800a7d6 <create_chain+0x122>
 800a7d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7d4:	e000      	b.n	800a7d8 <create_chain+0x124>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a7da:	69fb      	ldr	r3, [r7, #28]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3720      	adds	r7, #32
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	0a5b      	lsrs	r3, r3, #9
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	8952      	ldrh	r2, [r2, #10]
 800a804:	fbb3 f3f2 	udiv	r3, r3, r2
 800a808:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	1d1a      	adds	r2, r3, #4
 800a80e:	613a      	str	r2, [r7, #16]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <clmt_clust+0x3a>
 800a81a:	2300      	movs	r3, #0
 800a81c:	e010      	b.n	800a840 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	429a      	cmp	r2, r3
 800a824:	d307      	bcc.n	800a836 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	617b      	str	r3, [r7, #20]
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	3304      	adds	r3, #4
 800a832:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a834:	e7e9      	b.n	800a80a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a836:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	4413      	add	r3, r2
}
 800a840:	4618      	mov	r0, r3
 800a842:	371c      	adds	r7, #28
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a862:	d204      	bcs.n	800a86e <dir_sdi+0x22>
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f003 031f 	and.w	r3, r3, #31
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a86e:	2302      	movs	r3, #2
 800a870:	e063      	b.n	800a93a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d106      	bne.n	800a892 <dir_sdi+0x46>
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d902      	bls.n	800a892 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a890:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10c      	bne.n	800a8b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	095b      	lsrs	r3, r3, #5
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	8912      	ldrh	r2, [r2, #8]
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d301      	bcc.n	800a8a8 <dir_sdi+0x5c>
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	e048      	b.n	800a93a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	61da      	str	r2, [r3, #28]
 800a8b0:	e029      	b.n	800a906 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	895b      	ldrh	r3, [r3, #10]
 800a8b6:	025b      	lsls	r3, r3, #9
 800a8b8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a8ba:	e019      	b.n	800a8f0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6979      	ldr	r1, [r7, #20]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7ff fcfe 	bl	800a2c2 <get_fat>
 800a8c6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8ce:	d101      	bne.n	800a8d4 <dir_sdi+0x88>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e032      	b.n	800a93a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d904      	bls.n	800a8e4 <dir_sdi+0x98>
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d301      	bcc.n	800a8e8 <dir_sdi+0x9c>
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	e028      	b.n	800a93a <dir_sdi+0xee>
			ofs -= csz;
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d2e1      	bcs.n	800a8bc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a8f8:	6979      	ldr	r1, [r7, #20]
 800a8fa:	6938      	ldr	r0, [r7, #16]
 800a8fc:	f7ff fcc2 	bl	800a284 <clust2sect>
 800a900:	4602      	mov	r2, r0
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	69db      	ldr	r3, [r3, #28]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <dir_sdi+0xcc>
 800a914:	2302      	movs	r3, #2
 800a916:	e010      	b.n	800a93a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	69da      	ldr	r2, [r3, #28]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	0a5b      	lsrs	r3, r3, #9
 800a920:	441a      	add	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a932:	441a      	add	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b086      	sub	sp, #24
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	3320      	adds	r3, #32
 800a958:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d003      	beq.n	800a96a <dir_next+0x28>
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a968:	d301      	bcc.n	800a96e <dir_next+0x2c>
 800a96a:	2304      	movs	r3, #4
 800a96c:	e0aa      	b.n	800aac4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a974:	2b00      	cmp	r3, #0
 800a976:	f040 8098 	bne.w	800aaaa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10b      	bne.n	800a9a4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	095b      	lsrs	r3, r3, #5
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	8912      	ldrh	r2, [r2, #8]
 800a994:	4293      	cmp	r3, r2
 800a996:	f0c0 8088 	bcc.w	800aaaa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	61da      	str	r2, [r3, #28]
 800a9a0:	2304      	movs	r3, #4
 800a9a2:	e08f      	b.n	800aac4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	0a5b      	lsrs	r3, r3, #9
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	8952      	ldrh	r2, [r2, #10]
 800a9ac:	3a01      	subs	r2, #1
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d17a      	bne.n	800aaaa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4610      	mov	r0, r2
 800a9be:	f7ff fc80 	bl	800a2c2 <get_fat>
 800a9c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d801      	bhi.n	800a9ce <dir_next+0x8c>
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	e07a      	b.n	800aac4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9d4:	d101      	bne.n	800a9da <dir_next+0x98>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e074      	b.n	800aac4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d358      	bcc.n	800aa96 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d104      	bne.n	800a9f4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	61da      	str	r2, [r3, #28]
 800a9f0:	2304      	movs	r3, #4
 800a9f2:	e067      	b.n	800aac4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	f7ff fe59 	bl	800a6b4 <create_chain>
 800aa02:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <dir_next+0xcc>
 800aa0a:	2307      	movs	r3, #7
 800aa0c:	e05a      	b.n	800aac4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d101      	bne.n	800aa18 <dir_next+0xd6>
 800aa14:	2302      	movs	r3, #2
 800aa16:	e055      	b.n	800aac4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa1e:	d101      	bne.n	800aa24 <dir_next+0xe2>
 800aa20:	2301      	movs	r3, #1
 800aa22:	e04f      	b.n	800aac4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f7ff fb4d 	bl	800a0c4 <sync_window>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d001      	beq.n	800aa34 <dir_next+0xf2>
 800aa30:	2301      	movs	r3, #1
 800aa32:	e047      	b.n	800aac4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	3334      	adds	r3, #52	; 0x34
 800aa38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7ff f945 	bl	8009cce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
 800aa48:	6979      	ldr	r1, [r7, #20]
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7ff fc1a 	bl	800a284 <clust2sect>
 800aa50:	4602      	mov	r2, r0
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	631a      	str	r2, [r3, #48]	; 0x30
 800aa56:	e012      	b.n	800aa7e <dir_next+0x13c>
						fs->wflag = 1;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7ff fb30 	bl	800a0c4 <sync_window>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <dir_next+0x12c>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e02a      	b.n	800aac4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	3301      	adds	r3, #1
 800aa72:	613b      	str	r3, [r7, #16]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa78:	1c5a      	adds	r2, r3, #1
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	631a      	str	r2, [r3, #48]	; 0x30
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	895b      	ldrh	r3, [r3, #10]
 800aa82:	461a      	mov	r2, r3
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d3e6      	bcc.n	800aa58 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	1ad2      	subs	r2, r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aa9c:	6979      	ldr	r1, [r7, #20]
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f7ff fbf0 	bl	800a284 <clust2sect>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aabc:	441a      	add	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aadc:	2100      	movs	r1, #0
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7ff feb4 	bl	800a84c <dir_sdi>
 800aae4:	4603      	mov	r3, r0
 800aae6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aae8:	7dfb      	ldrb	r3, [r7, #23]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d12b      	bne.n	800ab46 <dir_alloc+0x7a>
		n = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	69db      	ldr	r3, [r3, #28]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f7ff fb27 	bl	800a14c <move_window>
 800aafe:	4603      	mov	r3, r0
 800ab00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab02:	7dfb      	ldrb	r3, [r7, #23]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d11d      	bne.n	800ab44 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2be5      	cmp	r3, #229	; 0xe5
 800ab10:	d004      	beq.n	800ab1c <dir_alloc+0x50>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d107      	bne.n	800ab2c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	613b      	str	r3, [r7, #16]
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d102      	bne.n	800ab30 <dir_alloc+0x64>
 800ab2a:	e00c      	b.n	800ab46 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ab30:	2101      	movs	r1, #1
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7ff ff05 	bl	800a942 <dir_next>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ab3c:	7dfb      	ldrb	r3, [r7, #23]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d0d7      	beq.n	800aaf2 <dir_alloc+0x26>
 800ab42:	e000      	b.n	800ab46 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ab44:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab46:	7dfb      	ldrb	r3, [r7, #23]
 800ab48:	2b04      	cmp	r3, #4
 800ab4a:	d101      	bne.n	800ab50 <dir_alloc+0x84>
 800ab4c:	2307      	movs	r3, #7
 800ab4e:	75fb      	strb	r3, [r7, #23]
	return res;
 800ab50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3718      	adds	r7, #24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	331a      	adds	r3, #26
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7ff f80d 	bl	8009b88 <ld_word>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d109      	bne.n	800ab8e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	3314      	adds	r3, #20
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7ff f802 	bl	8009b88 <ld_word>
 800ab84:	4603      	mov	r3, r0
 800ab86:	041b      	lsls	r3, r3, #16
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	331a      	adds	r3, #26
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	b292      	uxth	r2, r2
 800abac:	4611      	mov	r1, r2
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff f825 	bl	8009bfe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d109      	bne.n	800abd0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	f103 0214 	add.w	r2, r3, #20
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	0c1b      	lsrs	r3, r3, #16
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	4619      	mov	r1, r3
 800abca:	4610      	mov	r0, r2
 800abcc:	f7ff f817 	bl	8009bfe <st_word>
	}
}
 800abd0:	bf00      	nop
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800abe6:	2100      	movs	r1, #0
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7ff fe2f 	bl	800a84c <dir_sdi>
 800abee:	4603      	mov	r3, r0
 800abf0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <dir_find+0x24>
 800abf8:	7dfb      	ldrb	r3, [r7, #23]
 800abfa:	e03e      	b.n	800ac7a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	69db      	ldr	r3, [r3, #28]
 800ac00:	4619      	mov	r1, r3
 800ac02:	6938      	ldr	r0, [r7, #16]
 800ac04:	f7ff faa2 	bl	800a14c <move_window>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d12f      	bne.n	800ac72 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d102      	bne.n	800ac26 <dir_find+0x4e>
 800ac20:	2304      	movs	r3, #4
 800ac22:	75fb      	strb	r3, [r7, #23]
 800ac24:	e028      	b.n	800ac78 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	330b      	adds	r3, #11
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a1b      	ldr	r3, [r3, #32]
 800ac3c:	330b      	adds	r3, #11
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	f003 0308 	and.w	r3, r3, #8
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10a      	bne.n	800ac5e <dir_find+0x86>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a18      	ldr	r0, [r3, #32]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3324      	adds	r3, #36	; 0x24
 800ac50:	220b      	movs	r2, #11
 800ac52:	4619      	mov	r1, r3
 800ac54:	f7ff f856 	bl	8009d04 <mem_cmp>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00b      	beq.n	800ac76 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ac5e:	2100      	movs	r1, #0
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f7ff fe6e 	bl	800a942 <dir_next>
 800ac66:	4603      	mov	r3, r0
 800ac68:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d0c5      	beq.n	800abfc <dir_find+0x24>
 800ac70:	e002      	b.n	800ac78 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ac72:	bf00      	nop
 800ac74:	e000      	b.n	800ac78 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ac76:	bf00      	nop

	return res;
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b084      	sub	sp, #16
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ac90:	2101      	movs	r1, #1
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff ff1a 	bl	800aacc <dir_alloc>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d11c      	bne.n	800acdc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	4619      	mov	r1, r3
 800aca8:	68b8      	ldr	r0, [r7, #8]
 800acaa:	f7ff fa4f 	bl	800a14c <move_window>
 800acae:	4603      	mov	r3, r0
 800acb0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d111      	bne.n	800acdc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	2220      	movs	r2, #32
 800acbe:	2100      	movs	r1, #0
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff f804 	bl	8009cce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6a18      	ldr	r0, [r3, #32]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	3324      	adds	r3, #36	; 0x24
 800acce:	220b      	movs	r2, #11
 800acd0:	4619      	mov	r1, r3
 800acd2:	f7fe ffdb 	bl	8009c8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2201      	movs	r2, #1
 800acda:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800acdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
	...

0800ace8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b088      	sub	sp, #32
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60fb      	str	r3, [r7, #12]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	3324      	adds	r3, #36	; 0x24
 800acfc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800acfe:	220b      	movs	r2, #11
 800ad00:	2120      	movs	r1, #32
 800ad02:	68b8      	ldr	r0, [r7, #8]
 800ad04:	f7fe ffe3 	bl	8009cce <mem_set>
	si = i = 0; ni = 8;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	613b      	str	r3, [r7, #16]
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	61fb      	str	r3, [r7, #28]
 800ad10:	2308      	movs	r3, #8
 800ad12:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	1c5a      	adds	r2, r3, #1
 800ad18:	61fa      	str	r2, [r7, #28]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ad22:	7efb      	ldrb	r3, [r7, #27]
 800ad24:	2b20      	cmp	r3, #32
 800ad26:	d94e      	bls.n	800adc6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ad28:	7efb      	ldrb	r3, [r7, #27]
 800ad2a:	2b2f      	cmp	r3, #47	; 0x2f
 800ad2c:	d006      	beq.n	800ad3c <create_name+0x54>
 800ad2e:	7efb      	ldrb	r3, [r7, #27]
 800ad30:	2b5c      	cmp	r3, #92	; 0x5c
 800ad32:	d110      	bne.n	800ad56 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ad34:	e002      	b.n	800ad3c <create_name+0x54>
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	4413      	add	r3, r2
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	2b2f      	cmp	r3, #47	; 0x2f
 800ad46:	d0f6      	beq.n	800ad36 <create_name+0x4e>
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b5c      	cmp	r3, #92	; 0x5c
 800ad52:	d0f0      	beq.n	800ad36 <create_name+0x4e>
			break;
 800ad54:	e038      	b.n	800adc8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ad56:	7efb      	ldrb	r3, [r7, #27]
 800ad58:	2b2e      	cmp	r3, #46	; 0x2e
 800ad5a:	d003      	beq.n	800ad64 <create_name+0x7c>
 800ad5c:	693a      	ldr	r2, [r7, #16]
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d30c      	bcc.n	800ad7e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2b0b      	cmp	r3, #11
 800ad68:	d002      	beq.n	800ad70 <create_name+0x88>
 800ad6a:	7efb      	ldrb	r3, [r7, #27]
 800ad6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad6e:	d001      	beq.n	800ad74 <create_name+0x8c>
 800ad70:	2306      	movs	r3, #6
 800ad72:	e044      	b.n	800adfe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ad74:	2308      	movs	r3, #8
 800ad76:	613b      	str	r3, [r7, #16]
 800ad78:	230b      	movs	r3, #11
 800ad7a:	617b      	str	r3, [r7, #20]
			continue;
 800ad7c:	e022      	b.n	800adc4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ad7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	da04      	bge.n	800ad90 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ad86:	7efb      	ldrb	r3, [r7, #27]
 800ad88:	3b80      	subs	r3, #128	; 0x80
 800ad8a:	4a1f      	ldr	r2, [pc, #124]	; (800ae08 <create_name+0x120>)
 800ad8c:	5cd3      	ldrb	r3, [r2, r3]
 800ad8e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ad90:	7efb      	ldrb	r3, [r7, #27]
 800ad92:	4619      	mov	r1, r3
 800ad94:	481d      	ldr	r0, [pc, #116]	; (800ae0c <create_name+0x124>)
 800ad96:	f7fe ffdc 	bl	8009d52 <chk_chr>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d001      	beq.n	800ada4 <create_name+0xbc>
 800ada0:	2306      	movs	r3, #6
 800ada2:	e02c      	b.n	800adfe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ada4:	7efb      	ldrb	r3, [r7, #27]
 800ada6:	2b60      	cmp	r3, #96	; 0x60
 800ada8:	d905      	bls.n	800adb6 <create_name+0xce>
 800adaa:	7efb      	ldrb	r3, [r7, #27]
 800adac:	2b7a      	cmp	r3, #122	; 0x7a
 800adae:	d802      	bhi.n	800adb6 <create_name+0xce>
 800adb0:	7efb      	ldrb	r3, [r7, #27]
 800adb2:	3b20      	subs	r3, #32
 800adb4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	613a      	str	r2, [r7, #16]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	4413      	add	r3, r2
 800adc0:	7efa      	ldrb	r2, [r7, #27]
 800adc2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800adc4:	e7a6      	b.n	800ad14 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800adc6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	441a      	add	r2, r3
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d101      	bne.n	800addc <create_name+0xf4>
 800add8:	2306      	movs	r3, #6
 800adda:	e010      	b.n	800adfe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	2be5      	cmp	r3, #229	; 0xe5
 800ade2:	d102      	bne.n	800adea <create_name+0x102>
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	2205      	movs	r2, #5
 800ade8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800adea:	7efb      	ldrb	r3, [r7, #27]
 800adec:	2b20      	cmp	r3, #32
 800adee:	d801      	bhi.n	800adf4 <create_name+0x10c>
 800adf0:	2204      	movs	r2, #4
 800adf2:	e000      	b.n	800adf6 <create_name+0x10e>
 800adf4:	2200      	movs	r2, #0
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	330b      	adds	r3, #11
 800adfa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800adfc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3720      	adds	r7, #32
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	08010830 	.word	0x08010830
 800ae0c:	08010720 	.word	0x08010720

0800ae10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ae24:	e002      	b.n	800ae2c <follow_path+0x1c>
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	2b2f      	cmp	r3, #47	; 0x2f
 800ae32:	d0f8      	beq.n	800ae26 <follow_path+0x16>
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	2b5c      	cmp	r3, #92	; 0x5c
 800ae3a:	d0f4      	beq.n	800ae26 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b1f      	cmp	r3, #31
 800ae48:	d80a      	bhi.n	800ae60 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2280      	movs	r2, #128	; 0x80
 800ae4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ae52:	2100      	movs	r1, #0
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7ff fcf9 	bl	800a84c <dir_sdi>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	75fb      	strb	r3, [r7, #23]
 800ae5e:	e043      	b.n	800aee8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae60:	463b      	mov	r3, r7
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7ff ff3f 	bl	800ace8 <create_name>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae6e:	7dfb      	ldrb	r3, [r7, #23]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d134      	bne.n	800aede <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7ff feaf 	bl	800abd8 <dir_find>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae84:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00a      	beq.n	800aea2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	d127      	bne.n	800aee2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ae92:	7afb      	ldrb	r3, [r7, #11]
 800ae94:	f003 0304 	and.w	r3, r3, #4
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d122      	bne.n	800aee2 <follow_path+0xd2>
 800ae9c:	2305      	movs	r3, #5
 800ae9e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800aea0:	e01f      	b.n	800aee2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aea2:	7afb      	ldrb	r3, [r7, #11]
 800aea4:	f003 0304 	and.w	r3, r3, #4
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d11c      	bne.n	800aee6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	799b      	ldrb	r3, [r3, #6]
 800aeb0:	f003 0310 	and.w	r3, r3, #16
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d102      	bne.n	800aebe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800aeb8:	2305      	movs	r3, #5
 800aeba:	75fb      	strb	r3, [r7, #23]
 800aebc:	e014      	b.n	800aee8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	695b      	ldr	r3, [r3, #20]
 800aec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aecc:	4413      	add	r3, r2
 800aece:	4619      	mov	r1, r3
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f7ff fe42 	bl	800ab5a <ld_clust>
 800aed6:	4602      	mov	r2, r0
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aedc:	e7c0      	b.n	800ae60 <follow_path+0x50>
			if (res != FR_OK) break;
 800aede:	bf00      	nop
 800aee0:	e002      	b.n	800aee8 <follow_path+0xd8>
				break;
 800aee2:	bf00      	nop
 800aee4:	e000      	b.n	800aee8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aee6:	bf00      	nop
			}
		}
	}

	return res;
 800aee8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3718      	adds	r7, #24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b087      	sub	sp, #28
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aefa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aefe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d031      	beq.n	800af6c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	617b      	str	r3, [r7, #20]
 800af0e:	e002      	b.n	800af16 <get_ldnumber+0x24>
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	3301      	adds	r3, #1
 800af14:	617b      	str	r3, [r7, #20]
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b20      	cmp	r3, #32
 800af1c:	d903      	bls.n	800af26 <get_ldnumber+0x34>
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	2b3a      	cmp	r3, #58	; 0x3a
 800af24:	d1f4      	bne.n	800af10 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	2b3a      	cmp	r3, #58	; 0x3a
 800af2c:	d11c      	bne.n	800af68 <get_ldnumber+0x76>
			tp = *path;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	1c5a      	adds	r2, r3, #1
 800af38:	60fa      	str	r2, [r7, #12]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	3b30      	subs	r3, #48	; 0x30
 800af3e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2b09      	cmp	r3, #9
 800af44:	d80e      	bhi.n	800af64 <get_ldnumber+0x72>
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d10a      	bne.n	800af64 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d107      	bne.n	800af64 <get_ldnumber+0x72>
					vol = (int)i;
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	3301      	adds	r3, #1
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	e002      	b.n	800af6e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800af68:	2300      	movs	r3, #0
 800af6a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800af6c:	693b      	ldr	r3, [r7, #16]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	371c      	adds	r7, #28
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
	...

0800af7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	70da      	strb	r2, [r3, #3]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af92:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800af94:	6839      	ldr	r1, [r7, #0]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff f8d8 	bl	800a14c <move_window>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <check_fs+0x2a>
 800afa2:	2304      	movs	r3, #4
 800afa4:	e038      	b.n	800b018 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	3334      	adds	r3, #52	; 0x34
 800afaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fe fdea 	bl	8009b88 <ld_word>
 800afb4:	4603      	mov	r3, r0
 800afb6:	461a      	mov	r2, r3
 800afb8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d001      	beq.n	800afc4 <check_fs+0x48>
 800afc0:	2303      	movs	r3, #3
 800afc2:	e029      	b.n	800b018 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afca:	2be9      	cmp	r3, #233	; 0xe9
 800afcc:	d009      	beq.n	800afe2 <check_fs+0x66>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afd4:	2beb      	cmp	r3, #235	; 0xeb
 800afd6:	d11e      	bne.n	800b016 <check_fs+0x9a>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800afde:	2b90      	cmp	r3, #144	; 0x90
 800afe0:	d119      	bne.n	800b016 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3334      	adds	r3, #52	; 0x34
 800afe6:	3336      	adds	r3, #54	; 0x36
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fe fde5 	bl	8009bb8 <ld_dword>
 800afee:	4603      	mov	r3, r0
 800aff0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aff4:	4a0a      	ldr	r2, [pc, #40]	; (800b020 <check_fs+0xa4>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d101      	bne.n	800affe <check_fs+0x82>
 800affa:	2300      	movs	r3, #0
 800affc:	e00c      	b.n	800b018 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3334      	adds	r3, #52	; 0x34
 800b002:	3352      	adds	r3, #82	; 0x52
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe fdd7 	bl	8009bb8 <ld_dword>
 800b00a:	4603      	mov	r3, r0
 800b00c:	4a05      	ldr	r2, [pc, #20]	; (800b024 <check_fs+0xa8>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d101      	bne.n	800b016 <check_fs+0x9a>
 800b012:	2300      	movs	r3, #0
 800b014:	e000      	b.n	800b018 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b016:	2302      	movs	r3, #2
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	00544146 	.word	0x00544146
 800b024:	33544146 	.word	0x33544146

0800b028 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b096      	sub	sp, #88	; 0x58
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	4613      	mov	r3, r2
 800b034:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2200      	movs	r2, #0
 800b03a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff ff58 	bl	800aef2 <get_ldnumber>
 800b042:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b046:	2b00      	cmp	r3, #0
 800b048:	da01      	bge.n	800b04e <find_volume+0x26>
 800b04a:	230b      	movs	r3, #11
 800b04c:	e235      	b.n	800b4ba <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b04e:	4aa5      	ldr	r2, [pc, #660]	; (800b2e4 <find_volume+0x2bc>)
 800b050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b056:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <find_volume+0x3a>
 800b05e:	230c      	movs	r3, #12
 800b060:	e22b      	b.n	800b4ba <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800b062:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b064:	f7fe fe90 	bl	8009d88 <lock_fs>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <find_volume+0x4a>
 800b06e:	230f      	movs	r3, #15
 800b070:	e223      	b.n	800b4ba <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b076:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b078:	79fb      	ldrb	r3, [r7, #7]
 800b07a:	f023 0301 	bic.w	r3, r3, #1
 800b07e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d01a      	beq.n	800b0be <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08a:	785b      	ldrb	r3, [r3, #1]
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fe fcdd 	bl	8009a4c <disk_status>
 800b092:	4603      	mov	r3, r0
 800b094:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b098:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10c      	bne.n	800b0be <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b0a4:	79fb      	ldrb	r3, [r7, #7]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d007      	beq.n	800b0ba <find_volume+0x92>
 800b0aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0ae:	f003 0304 	and.w	r3, r3, #4
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d001      	beq.n	800b0ba <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b0b6:	230a      	movs	r3, #10
 800b0b8:	e1ff      	b.n	800b4ba <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	e1fd      	b.n	800b4ba <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c6:	b2da      	uxtb	r2, r3
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	785b      	ldrb	r3, [r3, #1]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7fe fcd5 	bl	8009a80 <disk_initialize>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b0dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e1e6      	b.n	800b4ba <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b0ec:	79fb      	ldrb	r3, [r7, #7]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d007      	beq.n	800b102 <find_volume+0xda>
 800b0f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0f6:	f003 0304 	and.w	r3, r3, #4
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b0fe:	230a      	movs	r3, #10
 800b100:	e1db      	b.n	800b4ba <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b106:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b108:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b10a:	f7ff ff37 	bl	800af7c <check_fs>
 800b10e:	4603      	mov	r3, r0
 800b110:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b114:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d149      	bne.n	800b1b0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b11c:	2300      	movs	r3, #0
 800b11e:	643b      	str	r3, [r7, #64]	; 0x40
 800b120:	e01e      	b.n	800b160 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b12a:	011b      	lsls	r3, r3, #4
 800b12c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b130:	4413      	add	r3, r2
 800b132:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	3304      	adds	r3, #4
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d006      	beq.n	800b14c <find_volume+0x124>
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	3308      	adds	r3, #8
 800b142:	4618      	mov	r0, r3
 800b144:	f7fe fd38 	bl	8009bb8 <ld_dword>
 800b148:	4602      	mov	r2, r0
 800b14a:	e000      	b.n	800b14e <find_volume+0x126>
 800b14c:	2200      	movs	r2, #0
 800b14e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	3358      	adds	r3, #88	; 0x58
 800b154:	443b      	add	r3, r7
 800b156:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b15a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b15c:	3301      	adds	r3, #1
 800b15e:	643b      	str	r3, [r7, #64]	; 0x40
 800b160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b162:	2b03      	cmp	r3, #3
 800b164:	d9dd      	bls.n	800b122 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b166:	2300      	movs	r3, #0
 800b168:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d002      	beq.n	800b176 <find_volume+0x14e>
 800b170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b172:	3b01      	subs	r3, #1
 800b174:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	3358      	adds	r3, #88	; 0x58
 800b17c:	443b      	add	r3, r7
 800b17e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b182:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b186:	2b00      	cmp	r3, #0
 800b188:	d005      	beq.n	800b196 <find_volume+0x16e>
 800b18a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b18c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b18e:	f7ff fef5 	bl	800af7c <check_fs>
 800b192:	4603      	mov	r3, r0
 800b194:	e000      	b.n	800b198 <find_volume+0x170>
 800b196:	2303      	movs	r3, #3
 800b198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b19c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d905      	bls.n	800b1b0 <find_volume+0x188>
 800b1a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	643b      	str	r3, [r7, #64]	; 0x40
 800b1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ac:	2b03      	cmp	r3, #3
 800b1ae:	d9e2      	bls.n	800b176 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b1b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1b4:	2b04      	cmp	r3, #4
 800b1b6:	d101      	bne.n	800b1bc <find_volume+0x194>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e17e      	b.n	800b4ba <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b1bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d901      	bls.n	800b1c8 <find_volume+0x1a0>
 800b1c4:	230d      	movs	r3, #13
 800b1c6:	e178      	b.n	800b4ba <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ca:	3334      	adds	r3, #52	; 0x34
 800b1cc:	330b      	adds	r3, #11
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7fe fcda 	bl	8009b88 <ld_word>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1da:	d001      	beq.n	800b1e0 <find_volume+0x1b8>
 800b1dc:	230d      	movs	r3, #13
 800b1de:	e16c      	b.n	800b4ba <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e2:	3334      	adds	r3, #52	; 0x34
 800b1e4:	3316      	adds	r3, #22
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fe fcce 	bl	8009b88 <ld_word>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b1f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d106      	bne.n	800b204 <find_volume+0x1dc>
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	3334      	adds	r3, #52	; 0x34
 800b1fa:	3324      	adds	r3, #36	; 0x24
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fe fcdb 	bl	8009bb8 <ld_dword>
 800b202:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b208:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b212:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	789b      	ldrb	r3, [r3, #2]
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d005      	beq.n	800b228 <find_volume+0x200>
 800b21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21e:	789b      	ldrb	r3, [r3, #2]
 800b220:	2b02      	cmp	r3, #2
 800b222:	d001      	beq.n	800b228 <find_volume+0x200>
 800b224:	230d      	movs	r3, #13
 800b226:	e148      	b.n	800b4ba <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22a:	789b      	ldrb	r3, [r3, #2]
 800b22c:	461a      	mov	r2, r3
 800b22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b230:	fb02 f303 	mul.w	r3, r2, r3
 800b234:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b240:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b244:	895b      	ldrh	r3, [r3, #10]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d008      	beq.n	800b25c <find_volume+0x234>
 800b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24c:	895b      	ldrh	r3, [r3, #10]
 800b24e:	461a      	mov	r2, r3
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	895b      	ldrh	r3, [r3, #10]
 800b254:	3b01      	subs	r3, #1
 800b256:	4013      	ands	r3, r2
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <find_volume+0x238>
 800b25c:	230d      	movs	r3, #13
 800b25e:	e12c      	b.n	800b4ba <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	3334      	adds	r3, #52	; 0x34
 800b264:	3311      	adds	r3, #17
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe fc8e 	bl	8009b88 <ld_word>
 800b26c:	4603      	mov	r3, r0
 800b26e:	461a      	mov	r2, r3
 800b270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b272:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	891b      	ldrh	r3, [r3, #8]
 800b278:	f003 030f 	and.w	r3, r3, #15
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <find_volume+0x25e>
 800b282:	230d      	movs	r3, #13
 800b284:	e119      	b.n	800b4ba <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b288:	3334      	adds	r3, #52	; 0x34
 800b28a:	3313      	adds	r3, #19
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7fe fc7b 	bl	8009b88 <ld_word>
 800b292:	4603      	mov	r3, r0
 800b294:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d106      	bne.n	800b2aa <find_volume+0x282>
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	3334      	adds	r3, #52	; 0x34
 800b2a0:	3320      	adds	r3, #32
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe fc88 	bl	8009bb8 <ld_dword>
 800b2a8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ac:	3334      	adds	r3, #52	; 0x34
 800b2ae:	330e      	adds	r3, #14
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7fe fc69 	bl	8009b88 <ld_word>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b2ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <find_volume+0x29c>
 800b2c0:	230d      	movs	r3, #13
 800b2c2:	e0fa      	b.n	800b4ba <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b2c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c8:	4413      	add	r3, r2
 800b2ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2cc:	8912      	ldrh	r2, [r2, #8]
 800b2ce:	0912      	lsrs	r2, r2, #4
 800b2d0:	b292      	uxth	r2, r2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b2d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d204      	bcs.n	800b2e8 <find_volume+0x2c0>
 800b2de:	230d      	movs	r3, #13
 800b2e0:	e0eb      	b.n	800b4ba <find_volume+0x492>
 800b2e2:	bf00      	nop
 800b2e4:	20000c68 	.word	0x20000c68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b2e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2f0:	8952      	ldrh	r2, [r2, #10]
 800b2f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2f6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <find_volume+0x2da>
 800b2fe:	230d      	movs	r3, #13
 800b300:	e0db      	b.n	800b4ba <find_volume+0x492>
		fmt = FS_FAT32;
 800b302:	2303      	movs	r3, #3
 800b304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b30e:	4293      	cmp	r3, r2
 800b310:	d802      	bhi.n	800b318 <find_volume+0x2f0>
 800b312:	2302      	movs	r3, #2
 800b314:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b31e:	4293      	cmp	r3, r2
 800b320:	d802      	bhi.n	800b328 <find_volume+0x300>
 800b322:	2301      	movs	r3, #1
 800b324:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32a:	1c9a      	adds	r2, r3, #2
 800b32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b332:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b334:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b336:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b33a:	441a      	add	r2, r3
 800b33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b340:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b344:	441a      	add	r2, r3
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b34a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d11e      	bne.n	800b390 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b354:	3334      	adds	r3, #52	; 0x34
 800b356:	332a      	adds	r3, #42	; 0x2a
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fe fc15 	bl	8009b88 <ld_word>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <find_volume+0x340>
 800b364:	230d      	movs	r3, #13
 800b366:	e0a8      	b.n	800b4ba <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36a:	891b      	ldrh	r3, [r3, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <find_volume+0x34c>
 800b370:	230d      	movs	r3, #13
 800b372:	e0a2      	b.n	800b4ba <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b376:	3334      	adds	r3, #52	; 0x34
 800b378:	332c      	adds	r3, #44	; 0x2c
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe fc1c 	bl	8009bb8 <ld_dword>
 800b380:	4602      	mov	r2, r0
 800b382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b384:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	647b      	str	r3, [r7, #68]	; 0x44
 800b38e:	e01f      	b.n	800b3d0 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b392:	891b      	ldrh	r3, [r3, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d101      	bne.n	800b39c <find_volume+0x374>
 800b398:	230d      	movs	r3, #13
 800b39a:	e08e      	b.n	800b4ba <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3a2:	441a      	add	r2, r3
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b3a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d103      	bne.n	800b3b8 <find_volume+0x390>
 800b3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	005b      	lsls	r3, r3, #1
 800b3b6:	e00a      	b.n	800b3ce <find_volume+0x3a6>
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	699a      	ldr	r2, [r3, #24]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	4413      	add	r3, r2
 800b3c2:	085a      	lsrs	r2, r3, #1
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	f003 0301 	and.w	r3, r3, #1
 800b3cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b3ce:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d2:	69da      	ldr	r2, [r3, #28]
 800b3d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b3da:	0a5b      	lsrs	r3, r3, #9
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d201      	bcs.n	800b3e4 <find_volume+0x3bc>
 800b3e0:	230d      	movs	r3, #13
 800b3e2:	e06a      	b.n	800b4ba <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3ea:	615a      	str	r2, [r3, #20]
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	695a      	ldr	r2, [r3, #20]
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	2280      	movs	r2, #128	; 0x80
 800b3f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b3fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	d149      	bne.n	800b496 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	3334      	adds	r3, #52	; 0x34
 800b406:	3330      	adds	r3, #48	; 0x30
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fe fbbd 	bl	8009b88 <ld_word>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b01      	cmp	r3, #1
 800b412:	d140      	bne.n	800b496 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b416:	3301      	adds	r3, #1
 800b418:	4619      	mov	r1, r3
 800b41a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b41c:	f7fe fe96 	bl	800a14c <move_window>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d137      	bne.n	800b496 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	2200      	movs	r2, #0
 800b42a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	3334      	adds	r3, #52	; 0x34
 800b430:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b434:	4618      	mov	r0, r3
 800b436:	f7fe fba7 	bl	8009b88 <ld_word>
 800b43a:	4603      	mov	r3, r0
 800b43c:	461a      	mov	r2, r3
 800b43e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b442:	429a      	cmp	r2, r3
 800b444:	d127      	bne.n	800b496 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b448:	3334      	adds	r3, #52	; 0x34
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fe fbb4 	bl	8009bb8 <ld_dword>
 800b450:	4603      	mov	r3, r0
 800b452:	4a1c      	ldr	r2, [pc, #112]	; (800b4c4 <find_volume+0x49c>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d11e      	bne.n	800b496 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45a:	3334      	adds	r3, #52	; 0x34
 800b45c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b460:	4618      	mov	r0, r3
 800b462:	f7fe fba9 	bl	8009bb8 <ld_dword>
 800b466:	4603      	mov	r3, r0
 800b468:	4a17      	ldr	r2, [pc, #92]	; (800b4c8 <find_volume+0x4a0>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d113      	bne.n	800b496 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b470:	3334      	adds	r3, #52	; 0x34
 800b472:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b476:	4618      	mov	r0, r3
 800b478:	f7fe fb9e 	bl	8009bb8 <ld_dword>
 800b47c:	4602      	mov	r2, r0
 800b47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b480:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b484:	3334      	adds	r3, #52	; 0x34
 800b486:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fe fb94 	bl	8009bb8 <ld_dword>
 800b490:	4602      	mov	r2, r0
 800b492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b494:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b498:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b49c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b49e:	4b0b      	ldr	r3, [pc, #44]	; (800b4cc <find_volume+0x4a4>)
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	4b09      	ldr	r3, [pc, #36]	; (800b4cc <find_volume+0x4a4>)
 800b4a8:	801a      	strh	r2, [r3, #0]
 800b4aa:	4b08      	ldr	r3, [pc, #32]	; (800b4cc <find_volume+0x4a4>)
 800b4ac:	881a      	ldrh	r2, [r3, #0]
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b4b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4b4:	f7fe fde2 	bl	800a07c <clear_lock>
#endif
	return FR_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3758      	adds	r7, #88	; 0x58
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	41615252 	.word	0x41615252
 800b4c8:	61417272 	.word	0x61417272
 800b4cc:	20000c6c 	.word	0x20000c6c

0800b4d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b4da:	2309      	movs	r3, #9
 800b4dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d02e      	beq.n	800b542 <validate+0x72>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d02a      	beq.n	800b542 <validate+0x72>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d025      	beq.n	800b542 <validate+0x72>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	889a      	ldrh	r2, [r3, #4]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	88db      	ldrh	r3, [r3, #6]
 800b500:	429a      	cmp	r2, r3
 800b502:	d11e      	bne.n	800b542 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fe fc3d 	bl	8009d88 <lock_fs>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d014      	beq.n	800b53e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	785b      	ldrb	r3, [r3, #1]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fe fa96 	bl	8009a4c <disk_status>
 800b520:	4603      	mov	r3, r0
 800b522:	f003 0301 	and.w	r3, r3, #1
 800b526:	2b00      	cmp	r3, #0
 800b528:	d102      	bne.n	800b530 <validate+0x60>
				res = FR_OK;
 800b52a:	2300      	movs	r3, #0
 800b52c:	73fb      	strb	r3, [r7, #15]
 800b52e:	e008      	b.n	800b542 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2100      	movs	r1, #0
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe fc3c 	bl	8009db4 <unlock_fs>
 800b53c:	e001      	b.n	800b542 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b53e:	230f      	movs	r3, #15
 800b540:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b542:	7bfb      	ldrb	r3, [r7, #15]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <validate+0x7e>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	e000      	b.n	800b550 <validate+0x80>
 800b54e:	2300      	movs	r3, #0
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	6013      	str	r3, [r2, #0]
	return res;
 800b554:	7bfb      	ldrb	r3, [r7, #15]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
	...

0800b560 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b088      	sub	sp, #32
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	4613      	mov	r3, r2
 800b56c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b572:	f107 0310 	add.w	r3, r7, #16
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff fcbb 	bl	800aef2 <get_ldnumber>
 800b57c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	2b00      	cmp	r3, #0
 800b582:	da01      	bge.n	800b588 <f_mount+0x28>
 800b584:	230b      	movs	r3, #11
 800b586:	e048      	b.n	800b61a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b588:	4a26      	ldr	r2, [pc, #152]	; (800b624 <f_mount+0xc4>)
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b590:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d00f      	beq.n	800b5b8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b598:	69b8      	ldr	r0, [r7, #24]
 800b59a:	f7fe fd6f 	bl	800a07c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f001 f902 	bl	800c7ac <ff_del_syncobj>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <f_mount+0x52>
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	e033      	b.n	800b61a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00f      	beq.n	800b5de <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	330c      	adds	r3, #12
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	f001 f8d3 	bl	800c77a <ff_cre_syncobj>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <f_mount+0x7e>
 800b5da:	2302      	movs	r3, #2
 800b5dc:	e01d      	b.n	800b61a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	4910      	ldr	r1, [pc, #64]	; (800b624 <f_mount+0xc4>)
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <f_mount+0x94>
 800b5ee:	79fb      	ldrb	r3, [r7, #7]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d001      	beq.n	800b5f8 <f_mount+0x98>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	e010      	b.n	800b61a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b5f8:	f107 010c 	add.w	r1, r7, #12
 800b5fc:	f107 0308 	add.w	r3, r7, #8
 800b600:	2200      	movs	r2, #0
 800b602:	4618      	mov	r0, r3
 800b604:	f7ff fd10 	bl	800b028 <find_volume>
 800b608:	4603      	mov	r3, r0
 800b60a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	7dfa      	ldrb	r2, [r7, #23]
 800b610:	4611      	mov	r1, r2
 800b612:	4618      	mov	r0, r3
 800b614:	f7fe fbce 	bl	8009db4 <unlock_fs>
 800b618:	7dfb      	ldrb	r3, [r7, #23]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3720      	adds	r7, #32
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	20000c68 	.word	0x20000c68

0800b628 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b098      	sub	sp, #96	; 0x60
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	4613      	mov	r3, r2
 800b634:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d101      	bne.n	800b640 <f_open+0x18>
 800b63c:	2309      	movs	r3, #9
 800b63e:	e1b4      	b.n	800b9aa <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b640:	79fb      	ldrb	r3, [r7, #7]
 800b642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b646:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b648:	79fa      	ldrb	r2, [r7, #7]
 800b64a:	f107 0110 	add.w	r1, r7, #16
 800b64e:	f107 0308 	add.w	r3, r7, #8
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff fce8 	bl	800b028 <find_volume>
 800b658:	4603      	mov	r3, r0
 800b65a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b65e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b662:	2b00      	cmp	r3, #0
 800b664:	f040 8191 	bne.w	800b98a <f_open+0x362>
		dj.obj.fs = fs;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	f107 0314 	add.w	r3, r7, #20
 800b672:	4611      	mov	r1, r2
 800b674:	4618      	mov	r0, r3
 800b676:	f7ff fbcb 	bl	800ae10 <follow_path>
 800b67a:	4603      	mov	r3, r0
 800b67c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b680:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b684:	2b00      	cmp	r3, #0
 800b686:	d11a      	bne.n	800b6be <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b688:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b68c:	b25b      	sxtb	r3, r3
 800b68e:	2b00      	cmp	r3, #0
 800b690:	da03      	bge.n	800b69a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b692:	2306      	movs	r3, #6
 800b694:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b698:	e011      	b.n	800b6be <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b69a:	79fb      	ldrb	r3, [r7, #7]
 800b69c:	f023 0301 	bic.w	r3, r3, #1
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	bf14      	ite	ne
 800b6a4:	2301      	movne	r3, #1
 800b6a6:	2300      	moveq	r3, #0
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f107 0314 	add.w	r3, r7, #20
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fe fb9a 	bl	8009dec <chk_lock>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b6be:	79fb      	ldrb	r3, [r7, #7]
 800b6c0:	f003 031c 	and.w	r3, r3, #28
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d07f      	beq.n	800b7c8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b6c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d017      	beq.n	800b700 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b6d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6d4:	2b04      	cmp	r3, #4
 800b6d6:	d10e      	bne.n	800b6f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b6d8:	f7fe fbe4 	bl	8009ea4 <enq_lock>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d006      	beq.n	800b6f0 <f_open+0xc8>
 800b6e2:	f107 0314 	add.w	r3, r7, #20
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7ff facb 	bl	800ac82 <dir_register>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	e000      	b.n	800b6f2 <f_open+0xca>
 800b6f0:	2312      	movs	r3, #18
 800b6f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b6f6:	79fb      	ldrb	r3, [r7, #7]
 800b6f8:	f043 0308 	orr.w	r3, r3, #8
 800b6fc:	71fb      	strb	r3, [r7, #7]
 800b6fe:	e010      	b.n	800b722 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b700:	7ebb      	ldrb	r3, [r7, #26]
 800b702:	f003 0311 	and.w	r3, r3, #17
 800b706:	2b00      	cmp	r3, #0
 800b708:	d003      	beq.n	800b712 <f_open+0xea>
					res = FR_DENIED;
 800b70a:	2307      	movs	r3, #7
 800b70c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b710:	e007      	b.n	800b722 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b712:	79fb      	ldrb	r3, [r7, #7]
 800b714:	f003 0304 	and.w	r3, r3, #4
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <f_open+0xfa>
 800b71c:	2308      	movs	r3, #8
 800b71e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b726:	2b00      	cmp	r3, #0
 800b728:	d168      	bne.n	800b7fc <f_open+0x1d4>
 800b72a:	79fb      	ldrb	r3, [r7, #7]
 800b72c:	f003 0308 	and.w	r3, r3, #8
 800b730:	2b00      	cmp	r3, #0
 800b732:	d063      	beq.n	800b7fc <f_open+0x1d4>
				dw = GET_FATTIME();
 800b734:	f7fd ff36 	bl	80095a4 <get_fattime>
 800b738:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73c:	330e      	adds	r3, #14
 800b73e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b740:	4618      	mov	r0, r3
 800b742:	f7fe fa77 	bl	8009c34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b748:	3316      	adds	r3, #22
 800b74a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fe fa71 	bl	8009c34 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b754:	330b      	adds	r3, #11
 800b756:	2220      	movs	r2, #32
 800b758:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b75e:	4611      	mov	r1, r2
 800b760:	4618      	mov	r0, r3
 800b762:	f7ff f9fa 	bl	800ab5a <ld_clust>
 800b766:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b76c:	2200      	movs	r2, #0
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff fa12 	bl	800ab98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b776:	331c      	adds	r3, #28
 800b778:	2100      	movs	r1, #0
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fe fa5a 	bl	8009c34 <st_dword>
					fs->wflag = 1;
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	2201      	movs	r2, #1
 800b784:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d037      	beq.n	800b7fc <f_open+0x1d4>
						dw = fs->winsect;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b790:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b792:	f107 0314 	add.w	r3, r7, #20
 800b796:	2200      	movs	r2, #0
 800b798:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fe ff25 	bl	800a5ea <remove_chain>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b7a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d126      	bne.n	800b7fc <f_open+0x1d4>
							res = move_window(fs, dw);
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe fcca 	bl	800a14c <move_window>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7c2:	3a01      	subs	r2, #1
 800b7c4:	611a      	str	r2, [r3, #16]
 800b7c6:	e019      	b.n	800b7fc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b7c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d115      	bne.n	800b7fc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b7d0:	7ebb      	ldrb	r3, [r7, #26]
 800b7d2:	f003 0310 	and.w	r3, r3, #16
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d003      	beq.n	800b7e2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b7da:	2304      	movs	r3, #4
 800b7dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b7e0:	e00c      	b.n	800b7fc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b7e2:	79fb      	ldrb	r3, [r7, #7]
 800b7e4:	f003 0302 	and.w	r3, r3, #2
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d007      	beq.n	800b7fc <f_open+0x1d4>
 800b7ec:	7ebb      	ldrb	r3, [r7, #26]
 800b7ee:	f003 0301 	and.w	r3, r3, #1
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <f_open+0x1d4>
						res = FR_DENIED;
 800b7f6:	2307      	movs	r3, #7
 800b7f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b7fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b800:	2b00      	cmp	r3, #0
 800b802:	d128      	bne.n	800b856 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	f003 0308 	and.w	r3, r3, #8
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d003      	beq.n	800b816 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b80e:	79fb      	ldrb	r3, [r7, #7]
 800b810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b814:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b81e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b824:	79fb      	ldrb	r3, [r7, #7]
 800b826:	f023 0301 	bic.w	r3, r3, #1
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	bf14      	ite	ne
 800b82e:	2301      	movne	r3, #1
 800b830:	2300      	moveq	r3, #0
 800b832:	b2db      	uxtb	r3, r3
 800b834:	461a      	mov	r2, r3
 800b836:	f107 0314 	add.w	r3, r7, #20
 800b83a:	4611      	mov	r1, r2
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fe fb53 	bl	8009ee8 <inc_lock>
 800b842:	4602      	mov	r2, r0
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d102      	bne.n	800b856 <f_open+0x22e>
 800b850:	2302      	movs	r3, #2
 800b852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f040 8095 	bne.w	800b98a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b864:	4611      	mov	r1, r2
 800b866:	4618      	mov	r0, r3
 800b868:	f7ff f977 	bl	800ab5a <ld_clust>
 800b86c:	4602      	mov	r2, r0
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b874:	331c      	adds	r3, #28
 800b876:	4618      	mov	r0, r3
 800b878:	f7fe f99e 	bl	8009bb8 <ld_dword>
 800b87c:	4602      	mov	r2, r0
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2200      	movs	r2, #0
 800b886:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	88da      	ldrh	r2, [r3, #6]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	79fa      	ldrb	r2, [r7, #7]
 800b89a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	3330      	adds	r3, #48	; 0x30
 800b8b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fe fa08 	bl	8009cce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b8be:	79fb      	ldrb	r3, [r7, #7]
 800b8c0:	f003 0320 	and.w	r3, r3, #32
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d060      	beq.n	800b98a <f_open+0x362>
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d05c      	beq.n	800b98a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	68da      	ldr	r2, [r3, #12]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	895b      	ldrh	r3, [r3, #10]
 800b8dc:	025b      	lsls	r3, r3, #9
 800b8de:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	657b      	str	r3, [r7, #84]	; 0x54
 800b8ec:	e016      	b.n	800b91c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe fce5 	bl	800a2c2 <get_fat>
 800b8f8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b8fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d802      	bhi.n	800b906 <f_open+0x2de>
 800b900:	2302      	movs	r3, #2
 800b902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b90c:	d102      	bne.n	800b914 <f_open+0x2ec>
 800b90e:	2301      	movs	r3, #1
 800b910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	657b      	str	r3, [r7, #84]	; 0x54
 800b91c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b920:	2b00      	cmp	r3, #0
 800b922:	d103      	bne.n	800b92c <f_open+0x304>
 800b924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b928:	429a      	cmp	r2, r3
 800b92a:	d8e0      	bhi.n	800b8ee <f_open+0x2c6>
				}
				fp->clust = clst;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b930:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b936:	2b00      	cmp	r3, #0
 800b938:	d127      	bne.n	800b98a <f_open+0x362>
 800b93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b940:	2b00      	cmp	r3, #0
 800b942:	d022      	beq.n	800b98a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b948:	4618      	mov	r0, r3
 800b94a:	f7fe fc9b 	bl	800a284 <clust2sect>
 800b94e:	6478      	str	r0, [r7, #68]	; 0x44
 800b950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b952:	2b00      	cmp	r3, #0
 800b954:	d103      	bne.n	800b95e <f_open+0x336>
						res = FR_INT_ERR;
 800b956:	2302      	movs	r3, #2
 800b958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b95c:	e015      	b.n	800b98a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b95e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b960:	0a5a      	lsrs	r2, r3, #9
 800b962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b964:	441a      	add	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	7858      	ldrb	r0, [r3, #1]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6a1a      	ldr	r2, [r3, #32]
 800b978:	2301      	movs	r3, #1
 800b97a:	f7fe f8a7 	bl	8009acc <disk_read>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <f_open+0x362>
 800b984:	2301      	movs	r3, #1
 800b986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b98a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d002      	beq.n	800b998 <f_open+0x370>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b99e:	4611      	mov	r1, r2
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe fa07 	bl	8009db4 <unlock_fs>
 800b9a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3760      	adds	r7, #96	; 0x60
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b08c      	sub	sp, #48	; 0x30
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	60b9      	str	r1, [r7, #8]
 800b9bc:	607a      	str	r2, [r7, #4]
 800b9be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f107 0210 	add.w	r2, r7, #16
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff fd7c 	bl	800b4d0 <validate>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b9de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d107      	bne.n	800b9f6 <f_write+0x44>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	7d5b      	ldrb	r3, [r3, #21]
 800b9ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b9ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d009      	beq.n	800ba0a <f_write+0x58>
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe f9d8 	bl	8009db4 <unlock_fs>
 800ba04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba08:	e173      	b.n	800bcf2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	7d1b      	ldrb	r3, [r3, #20]
 800ba0e:	f003 0302 	and.w	r3, r3, #2
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d106      	bne.n	800ba24 <f_write+0x72>
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2107      	movs	r1, #7
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fe f9ca 	bl	8009db4 <unlock_fs>
 800ba20:	2307      	movs	r3, #7
 800ba22:	e166      	b.n	800bcf2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	699a      	ldr	r2, [r3, #24]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	441a      	add	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	f080 814b 	bcs.w	800bccc <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	43db      	mvns	r3, r3
 800ba3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ba3e:	e145      	b.n	800bccc <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f040 8101 	bne.w	800bc50 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	0a5b      	lsrs	r3, r3, #9
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	8952      	ldrh	r2, [r2, #10]
 800ba58:	3a01      	subs	r2, #1
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d14d      	bne.n	800bb00 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d10c      	bne.n	800ba86 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d11a      	bne.n	800baae <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe fe19 	bl	800a6b4 <create_chain>
 800ba82:	62b8      	str	r0, [r7, #40]	; 0x28
 800ba84:	e013      	b.n	800baae <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d007      	beq.n	800ba9e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	4619      	mov	r1, r3
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f7fe fea5 	bl	800a7e4 <clmt_clust>
 800ba9a:	62b8      	str	r0, [r7, #40]	; 0x28
 800ba9c:	e007      	b.n	800baae <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	69db      	ldr	r3, [r3, #28]
 800baa4:	4619      	mov	r1, r3
 800baa6:	4610      	mov	r0, r2
 800baa8:	f7fe fe04 	bl	800a6b4 <create_chain>
 800baac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 8110 	beq.w	800bcd6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d109      	bne.n	800bad0 <f_write+0x11e>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2202      	movs	r2, #2
 800bac0:	755a      	strb	r2, [r3, #21]
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	2102      	movs	r1, #2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fe f974 	bl	8009db4 <unlock_fs>
 800bacc:	2302      	movs	r3, #2
 800bace:	e110      	b.n	800bcf2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bad6:	d109      	bne.n	800baec <f_write+0x13a>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2201      	movs	r2, #1
 800badc:	755a      	strb	r2, [r3, #21]
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	2101      	movs	r1, #1
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fe f966 	bl	8009db4 <unlock_fs>
 800bae8:	2301      	movs	r3, #1
 800baea:	e102      	b.n	800bcf2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baf0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d102      	bne.n	800bb00 <f_write+0x14e>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bafe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	7d1b      	ldrb	r3, [r3, #20]
 800bb04:	b25b      	sxtb	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	da1d      	bge.n	800bb46 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	7858      	ldrb	r0, [r3, #1]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6a1a      	ldr	r2, [r3, #32]
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f7fd fff7 	bl	8009b0c <disk_write>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d009      	beq.n	800bb38 <f_write+0x186>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2201      	movs	r2, #1
 800bb28:	755a      	strb	r2, [r3, #21]
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fe f940 	bl	8009db4 <unlock_fs>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e0dc      	b.n	800bcf2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	7d1b      	ldrb	r3, [r3, #20]
 800bb3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb40:	b2da      	uxtb	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bb46:	693a      	ldr	r2, [r7, #16]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	69db      	ldr	r3, [r3, #28]
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	4610      	mov	r0, r2
 800bb50:	f7fe fb98 	bl	800a284 <clust2sect>
 800bb54:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d109      	bne.n	800bb70 <f_write+0x1be>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2202      	movs	r2, #2
 800bb60:	755a      	strb	r2, [r3, #21]
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	2102      	movs	r1, #2
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe f924 	bl	8009db4 <unlock_fs>
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	e0c0      	b.n	800bcf2 <f_write+0x340>
			sect += csect;
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	4413      	add	r3, r2
 800bb76:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	0a5b      	lsrs	r3, r3, #9
 800bb7c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d041      	beq.n	800bc08 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bb84:	69ba      	ldr	r2, [r7, #24]
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	4413      	add	r3, r2
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	8952      	ldrh	r2, [r2, #10]
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d905      	bls.n	800bb9e <f_write+0x1ec>
					cc = fs->csize - csect;
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	895b      	ldrh	r3, [r3, #10]
 800bb96:	461a      	mov	r2, r3
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	7858      	ldrb	r0, [r3, #1]
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	69f9      	ldr	r1, [r7, #28]
 800bba8:	f7fd ffb0 	bl	8009b0c <disk_write>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d009      	beq.n	800bbc6 <f_write+0x214>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	755a      	strb	r2, [r3, #21]
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	2101      	movs	r1, #1
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe f8f9 	bl	8009db4 <unlock_fs>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e095      	b.n	800bcf2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6a1a      	ldr	r2, [r3, #32]
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	1ad3      	subs	r3, r2, r3
 800bbce:	6a3a      	ldr	r2, [r7, #32]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d915      	bls.n	800bc00 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6a1a      	ldr	r2, [r3, #32]
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	025b      	lsls	r3, r3, #9
 800bbe4:	69fa      	ldr	r2, [r7, #28]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbec:	4619      	mov	r1, r3
 800bbee:	f7fe f84d 	bl	8009c8c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	7d1b      	ldrb	r3, [r3, #20]
 800bbf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bc00:	6a3b      	ldr	r3, [r7, #32]
 800bc02:	025b      	lsls	r3, r3, #9
 800bc04:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bc06:	e044      	b.n	800bc92 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6a1b      	ldr	r3, [r3, #32]
 800bc0c:	697a      	ldr	r2, [r7, #20]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d01b      	beq.n	800bc4a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	699a      	ldr	r2, [r3, #24]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d215      	bcs.n	800bc4a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	7858      	ldrb	r0, [r3, #1]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc28:	2301      	movs	r3, #1
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	f7fd ff4e 	bl	8009acc <disk_read>
 800bc30:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d009      	beq.n	800bc4a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	755a      	strb	r2, [r3, #21]
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2101      	movs	r1, #1
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fe f8b7 	bl	8009db4 <unlock_fs>
 800bc46:	2301      	movs	r3, #1
 800bc48:	e053      	b.n	800bcf2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc58:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bc5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d901      	bls.n	800bc6a <f_write+0x2b8>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc78:	4413      	add	r3, r2
 800bc7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc7c:	69f9      	ldr	r1, [r7, #28]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe f804 	bl	8009c8c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	7d1b      	ldrb	r3, [r3, #20]
 800bc88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bc92:	69fa      	ldr	r2, [r7, #28]
 800bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc96:	4413      	add	r3, r2
 800bc98:	61fb      	str	r3, [r7, #28]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	699a      	ldr	r2, [r3, #24]
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca0:	441a      	add	r2, r3
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	619a      	str	r2, [r3, #24]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	68da      	ldr	r2, [r3, #12]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	bf38      	it	cc
 800bcb2:	461a      	movcc	r2, r3
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	60da      	str	r2, [r3, #12]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	441a      	add	r2, r3
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f47f aeb6 	bne.w	800ba40 <f_write+0x8e>
 800bcd4:	e000      	b.n	800bcd8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bcd6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	7d1b      	ldrb	r3, [r3, #20]
 800bcdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	2100      	movs	r1, #0
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe f862 	bl	8009db4 <unlock_fs>
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3730      	adds	r7, #48	; 0x30
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b086      	sub	sp, #24
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f107 0208 	add.w	r2, r7, #8
 800bd08:	4611      	mov	r1, r2
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7ff fbe0 	bl	800b4d0 <validate>
 800bd10:	4603      	mov	r3, r0
 800bd12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d16d      	bne.n	800bdf6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	7d1b      	ldrb	r3, [r3, #20]
 800bd1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d067      	beq.n	800bdf6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	7d1b      	ldrb	r3, [r3, #20]
 800bd2a:	b25b      	sxtb	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	da1a      	bge.n	800bd66 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	7858      	ldrb	r0, [r3, #1]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a1a      	ldr	r2, [r3, #32]
 800bd3e:	2301      	movs	r3, #1
 800bd40:	f7fd fee4 	bl	8009b0c <disk_write>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d006      	beq.n	800bd58 <f_sync+0x5e>
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	2101      	movs	r1, #1
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fe f830 	bl	8009db4 <unlock_fs>
 800bd54:	2301      	movs	r3, #1
 800bd56:	e055      	b.n	800be04 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	7d1b      	ldrb	r3, [r3, #20]
 800bd5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bd66:	f7fd fc1d 	bl	80095a4 <get_fattime>
 800bd6a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	4619      	mov	r1, r3
 800bd74:	4610      	mov	r0, r2
 800bd76:	f7fe f9e9 	bl	800a14c <move_window>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bd7e:	7dfb      	ldrb	r3, [r7, #23]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d138      	bne.n	800bdf6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd88:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	330b      	adds	r3, #11
 800bd8e:	781a      	ldrb	r2, [r3, #0]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	330b      	adds	r3, #11
 800bd94:	f042 0220 	orr.w	r2, r2, #32
 800bd98:	b2d2      	uxtb	r2, r2
 800bd9a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6818      	ldr	r0, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	461a      	mov	r2, r3
 800bda6:	68f9      	ldr	r1, [r7, #12]
 800bda8:	f7fe fef6 	bl	800ab98 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f103 021c 	add.w	r2, r3, #28
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	4610      	mov	r0, r2
 800bdba:	f7fd ff3b 	bl	8009c34 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3316      	adds	r3, #22
 800bdc2:	6939      	ldr	r1, [r7, #16]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7fd ff35 	bl	8009c34 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	3312      	adds	r3, #18
 800bdce:	2100      	movs	r1, #0
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fd ff14 	bl	8009bfe <st_word>
					fs->wflag = 1;
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	2201      	movs	r2, #1
 800bdda:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe f9e2 	bl	800a1a8 <sync_fs>
 800bde4:	4603      	mov	r3, r0
 800bde6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	7d1b      	ldrb	r3, [r3, #20]
 800bdec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	7dfa      	ldrb	r2, [r7, #23]
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7fd ffd9 	bl	8009db4 <unlock_fs>
 800be02:	7dfb      	ldrb	r3, [r7, #23]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3718      	adds	r7, #24
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f7ff ff70 	bl	800bcfa <f_sync>
 800be1a:	4603      	mov	r3, r0
 800be1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d11d      	bne.n	800be60 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f107 0208 	add.w	r2, r7, #8
 800be2a:	4611      	mov	r1, r2
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7ff fb4f 	bl	800b4d0 <validate>
 800be32:	4603      	mov	r3, r0
 800be34:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d111      	bne.n	800be60 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	4618      	mov	r0, r3
 800be42:	f7fe f8df 	bl	800a004 <dec_lock>
 800be46:	4603      	mov	r3, r0
 800be48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d102      	bne.n	800be56 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2100      	movs	r1, #0
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fd ffaa 	bl	8009db4 <unlock_fs>
#endif
		}
	}
	return res;
 800be60:	7bfb      	ldrb	r3, [r7, #15]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
	...

0800be6c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800be6c:	b590      	push	{r4, r7, lr}
 800be6e:	b09d      	sub	sp, #116	; 0x74
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	607a      	str	r2, [r7, #4]
 800be76:	603b      	str	r3, [r7, #0]
 800be78:	460b      	mov	r3, r1
 800be7a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800be7c:	2301      	movs	r3, #1
 800be7e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800be80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be84:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800be86:	f107 030c 	add.w	r3, r7, #12
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7ff f831 	bl	800aef2 <get_ldnumber>
 800be90:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800be92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be94:	2b00      	cmp	r3, #0
 800be96:	da02      	bge.n	800be9e <f_mkfs+0x32>
 800be98:	230b      	movs	r3, #11
 800be9a:	f000 bc0d 	b.w	800c6b8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800be9e:	4a94      	ldr	r2, [pc, #592]	; (800c0f0 <f_mkfs+0x284>)
 800bea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d005      	beq.n	800beb6 <f_mkfs+0x4a>
 800beaa:	4a91      	ldr	r2, [pc, #580]	; (800c0f0 <f_mkfs+0x284>)
 800beac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beb2:	2200      	movs	r2, #0
 800beb4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800beb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800bebc:	2300      	movs	r3, #0
 800bebe:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800bec2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fd fdda 	bl	8009a80 <disk_initialize>
 800becc:	4603      	mov	r3, r0
 800bece:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800bed2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bed6:	f003 0301 	and.w	r3, r3, #1
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d001      	beq.n	800bee2 <f_mkfs+0x76>
 800bede:	2303      	movs	r3, #3
 800bee0:	e3ea      	b.n	800c6b8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800bee2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bee6:	f003 0304 	and.w	r3, r3, #4
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <f_mkfs+0x86>
 800beee:	230a      	movs	r3, #10
 800bef0:	e3e2      	b.n	800c6b8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800bef2:	f107 0214 	add.w	r2, r7, #20
 800bef6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800befa:	2103      	movs	r1, #3
 800befc:	4618      	mov	r0, r3
 800befe:	f7fd fe25 	bl	8009b4c <disk_ioctl>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10c      	bne.n	800bf22 <f_mkfs+0xb6>
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d009      	beq.n	800bf22 <f_mkfs+0xb6>
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf14:	d805      	bhi.n	800bf22 <f_mkfs+0xb6>
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	1e5a      	subs	r2, r3, #1
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <f_mkfs+0xba>
 800bf22:	2301      	movs	r3, #1
 800bf24:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800bf26:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf2a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d003      	beq.n	800bf3a <f_mkfs+0xce>
 800bf32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d309      	bcc.n	800bf4e <f_mkfs+0xe2>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf40:	d805      	bhi.n	800bf4e <f_mkfs+0xe2>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	1e5a      	subs	r2, r3, #1
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4013      	ands	r3, r2
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <f_mkfs+0xe6>
 800bf4e:	2313      	movs	r3, #19
 800bf50:	e3b2      	b.n	800c6b8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800bf52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf5a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800bf60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bf62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf66:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800bf6c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf70:	fb02 f303 	mul.w	r3, r2, r3
 800bf74:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d101      	bne.n	800bf80 <f_mkfs+0x114>
 800bf7c:	230e      	movs	r3, #14
 800bf7e:	e39b      	b.n	800c6b8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800bf80:	f107 0210 	add.w	r2, r7, #16
 800bf84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bf88:	2101      	movs	r1, #1
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fd fdde 	bl	8009b4c <disk_ioctl>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <f_mkfs+0x12e>
 800bf96:	2301      	movs	r3, #1
 800bf98:	e38e      	b.n	800c6b8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800bf9a:	7afb      	ldrb	r3, [r7, #11]
 800bf9c:	f003 0308 	and.w	r3, r3, #8
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d001      	beq.n	800bfa8 <f_mkfs+0x13c>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	e000      	b.n	800bfaa <f_mkfs+0x13e>
 800bfa8:	233f      	movs	r3, #63	; 0x3f
 800bfaa:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d901      	bls.n	800bfb8 <f_mkfs+0x14c>
 800bfb4:	230e      	movs	r3, #14
 800bfb6:	e37f      	b.n	800c6b8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800bfb8:	693a      	ldr	r2, [r7, #16]
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	2b7f      	cmp	r3, #127	; 0x7f
 800bfc4:	d801      	bhi.n	800bfca <f_mkfs+0x15e>
 800bfc6:	230e      	movs	r3, #14
 800bfc8:	e376      	b.n	800c6b8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b80      	cmp	r3, #128	; 0x80
 800bfce:	d901      	bls.n	800bfd4 <f_mkfs+0x168>
 800bfd0:	2313      	movs	r3, #19
 800bfd2:	e371      	b.n	800c6b8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800bfd4:	7afb      	ldrb	r3, [r7, #11]
 800bfd6:	f003 0302 	and.w	r3, r3, #2
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00d      	beq.n	800bffa <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800bfde:	7afb      	ldrb	r3, [r7, #11]
 800bfe0:	f003 0307 	and.w	r3, r3, #7
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d004      	beq.n	800bff2 <f_mkfs+0x186>
 800bfe8:	7afb      	ldrb	r3, [r7, #11]
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d103      	bne.n	800bffa <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800bff2:	2303      	movs	r3, #3
 800bff4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bff8:	e009      	b.n	800c00e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800bffa:	7afb      	ldrb	r3, [r7, #11]
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	2b00      	cmp	r3, #0
 800c002:	d101      	bne.n	800c008 <f_mkfs+0x19c>
 800c004:	2313      	movs	r3, #19
 800c006:	e357      	b.n	800c6b8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800c008:	2302      	movs	r3, #2
 800c00a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800c012:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c016:	2b03      	cmp	r3, #3
 800c018:	d13c      	bne.n	800c094 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800c01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d11b      	bne.n	800c058 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	0c5b      	lsrs	r3, r3, #17
 800c024:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800c026:	2300      	movs	r3, #0
 800c028:	64bb      	str	r3, [r7, #72]	; 0x48
 800c02a:	2301      	movs	r3, #1
 800c02c:	653b      	str	r3, [r7, #80]	; 0x50
 800c02e:	e005      	b.n	800c03c <f_mkfs+0x1d0>
 800c030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c032:	3301      	adds	r3, #1
 800c034:	64bb      	str	r3, [r7, #72]	; 0x48
 800c036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c038:	005b      	lsls	r3, r3, #1
 800c03a:	653b      	str	r3, [r7, #80]	; 0x50
 800c03c:	4a2d      	ldr	r2, [pc, #180]	; (800c0f4 <f_mkfs+0x288>)
 800c03e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d007      	beq.n	800c058 <f_mkfs+0x1ec>
 800c048:	4a2a      	ldr	r2, [pc, #168]	; (800c0f4 <f_mkfs+0x288>)
 800c04a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c04c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c050:	461a      	mov	r2, r3
 800c052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c054:	4293      	cmp	r3, r2
 800c056:	d2eb      	bcs.n	800c030 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800c058:	693a      	ldr	r2, [r7, #16]
 800c05a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c060:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	3302      	adds	r3, #2
 800c066:	009a      	lsls	r2, r3, #2
 800c068:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c06a:	4413      	add	r3, r2
 800c06c:	1e5a      	subs	r2, r3, #1
 800c06e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c070:	fbb2 f3f3 	udiv	r3, r2, r3
 800c074:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800c076:	2320      	movs	r3, #32
 800c078:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800c07a:	2300      	movs	r3, #0
 800c07c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800c07e:	6a3b      	ldr	r3, [r7, #32]
 800c080:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c084:	4293      	cmp	r3, r2
 800c086:	d903      	bls.n	800c090 <f_mkfs+0x224>
 800c088:	6a3b      	ldr	r3, [r7, #32]
 800c08a:	4a1b      	ldr	r2, [pc, #108]	; (800c0f8 <f_mkfs+0x28c>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d952      	bls.n	800c136 <f_mkfs+0x2ca>
 800c090:	230e      	movs	r3, #14
 800c092:	e311      	b.n	800c6b8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800c094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c096:	2b00      	cmp	r3, #0
 800c098:	d11b      	bne.n	800c0d2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	0b1b      	lsrs	r3, r3, #12
 800c09e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	653b      	str	r3, [r7, #80]	; 0x50
 800c0a8:	e005      	b.n	800c0b6 <f_mkfs+0x24a>
 800c0aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0b2:	005b      	lsls	r3, r3, #1
 800c0b4:	653b      	str	r3, [r7, #80]	; 0x50
 800c0b6:	4a11      	ldr	r2, [pc, #68]	; (800c0fc <f_mkfs+0x290>)
 800c0b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d007      	beq.n	800c0d2 <f_mkfs+0x266>
 800c0c2:	4a0e      	ldr	r2, [pc, #56]	; (800c0fc <f_mkfs+0x290>)
 800c0c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d2eb      	bcs.n	800c0aa <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800c0d2:	693a      	ldr	r2, [r7, #16]
 800c0d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0da:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d90c      	bls.n	800c100 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800c0e6:	6a3b      	ldr	r3, [r7, #32]
 800c0e8:	3302      	adds	r3, #2
 800c0ea:	005b      	lsls	r3, r3, #1
 800c0ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0ee:	e012      	b.n	800c116 <f_mkfs+0x2aa>
 800c0f0:	20000c68 	.word	0x20000c68
 800c0f4:	080108b0 	.word	0x080108b0
 800c0f8:	0ffffff5 	.word	0x0ffffff5
 800c0fc:	080108c0 	.word	0x080108c0
				} else {
					fmt = FS_FAT12;
 800c100:	2301      	movs	r3, #1
 800c102:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800c106:	6a3a      	ldr	r2, [r7, #32]
 800c108:	4613      	mov	r3, r2
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	4413      	add	r3, r2
 800c10e:	3301      	adds	r3, #1
 800c110:	085b      	lsrs	r3, r3, #1
 800c112:	3303      	adds	r3, #3
 800c114:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800c116:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c11a:	4413      	add	r3, r2
 800c11c:	1e5a      	subs	r2, r3, #1
 800c11e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c120:	fbb2 f3f3 	udiv	r3, r2, r3
 800c124:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800c126:	2301      	movs	r3, #1
 800c128:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800c12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c12c:	015a      	lsls	r2, r3, #5
 800c12e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c130:	fbb2 f3f3 	udiv	r3, r2, r3
 800c134:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800c136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c13a:	4413      	add	r3, r2
 800c13c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800c13e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c142:	fb03 f202 	mul.w	r2, r3, r2
 800c146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c148:	4413      	add	r3, r2
 800c14a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c14c:	4413      	add	r3, r2
 800c14e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800c150:	697a      	ldr	r2, [r7, #20]
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	4413      	add	r3, r2
 800c156:	1e5a      	subs	r2, r3, #1
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	425b      	negs	r3, r3
 800c15c:	401a      	ands	r2, r3
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800c164:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c168:	2b03      	cmp	r3, #3
 800c16a:	d108      	bne.n	800c17e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800c16c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c16e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c170:	4413      	add	r3, r2
 800c172:	657b      	str	r3, [r7, #84]	; 0x54
 800c174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c178:	4413      	add	r3, r2
 800c17a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c17c:	e006      	b.n	800c18c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800c17e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c182:	fbb2 f3f3 	udiv	r3, r2, r3
 800c186:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c188:	4413      	add	r3, r2
 800c18a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800c18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c18e:	011a      	lsls	r2, r3, #4
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	441a      	add	r2, r3
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	1ad2      	subs	r2, r2, r3
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d901      	bls.n	800c1a2 <f_mkfs+0x336>
 800c19e:	230e      	movs	r3, #14
 800c1a0:	e28a      	b.n	800c6b8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1a6:	1ad2      	subs	r2, r2, r3
 800c1a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c1ac:	fb01 f303 	mul.w	r3, r1, r3
 800c1b0:	1ad2      	subs	r2, r2, r3
 800c1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1b4:	1ad2      	subs	r2, r2, r3
 800c1b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1bc:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800c1be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c1c2:	2b03      	cmp	r3, #3
 800c1c4:	d10f      	bne.n	800c1e6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800c1c6:	6a3b      	ldr	r3, [r7, #32]
 800c1c8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d80a      	bhi.n	800c1e6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d105      	bne.n	800c1e2 <f_mkfs+0x376>
 800c1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1d8:	085b      	lsrs	r3, r3, #1
 800c1da:	607b      	str	r3, [r7, #4]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d144      	bne.n	800c26c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800c1e2:	230e      	movs	r3, #14
 800c1e4:	e268      	b.n	800c6b8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800c1e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	d133      	bne.n	800c256 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800c1ee:	6a3b      	ldr	r3, [r7, #32]
 800c1f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d91e      	bls.n	800c236 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d107      	bne.n	800c20e <f_mkfs+0x3a2>
 800c1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	2b40      	cmp	r3, #64	; 0x40
 800c204:	d803      	bhi.n	800c20e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800c206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	607b      	str	r3, [r7, #4]
 800c20c:	e033      	b.n	800c276 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800c20e:	7afb      	ldrb	r3, [r7, #11]
 800c210:	f003 0302 	and.w	r3, r3, #2
 800c214:	2b00      	cmp	r3, #0
 800c216:	d003      	beq.n	800c220 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800c218:	2303      	movs	r3, #3
 800c21a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c21e:	e02a      	b.n	800c276 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d105      	bne.n	800c232 <f_mkfs+0x3c6>
 800c226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c228:	005b      	lsls	r3, r3, #1
 800c22a:	607b      	str	r3, [r7, #4]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b80      	cmp	r3, #128	; 0x80
 800c230:	d91e      	bls.n	800c270 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800c232:	230e      	movs	r3, #14
 800c234:	e240      	b.n	800c6b8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800c236:	6a3b      	ldr	r3, [r7, #32]
 800c238:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d80a      	bhi.n	800c256 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d105      	bne.n	800c252 <f_mkfs+0x3e6>
 800c246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	607b      	str	r3, [r7, #4]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b80      	cmp	r3, #128	; 0x80
 800c250:	d910      	bls.n	800c274 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800c252:	230e      	movs	r3, #14
 800c254:	e230      	b.n	800c6b8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800c256:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d10c      	bne.n	800c278 <f_mkfs+0x40c>
 800c25e:	6a3b      	ldr	r3, [r7, #32]
 800c260:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c264:	4293      	cmp	r3, r2
 800c266:	d907      	bls.n	800c278 <f_mkfs+0x40c>
 800c268:	230e      	movs	r3, #14
 800c26a:	e225      	b.n	800c6b8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800c26c:	bf00      	nop
 800c26e:	e6ce      	b.n	800c00e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c270:	bf00      	nop
 800c272:	e6cc      	b.n	800c00e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800c274:	bf00      	nop
			pau = au;
 800c276:	e6ca      	b.n	800c00e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800c278:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800c27a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c27c:	461a      	mov	r2, r3
 800c27e:	2100      	movs	r1, #0
 800c280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c282:	f7fd fd24 	bl	8009cce <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800c286:	220b      	movs	r2, #11
 800c288:	49b2      	ldr	r1, [pc, #712]	; (800c554 <f_mkfs+0x6e8>)
 800c28a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c28c:	f7fd fcfe 	bl	8009c8c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	330b      	adds	r3, #11
 800c294:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c296:	4611      	mov	r1, r2
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fd fcb0 	bl	8009bfe <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	330d      	adds	r3, #13
 800c2a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2a4:	b2d2      	uxtb	r2, r2
 800c2a6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	330e      	adds	r3, #14
 800c2ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c2ae:	b292      	uxth	r2, r2
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fd fca3 	bl	8009bfe <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ba:	3310      	adds	r3, #16
 800c2bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2be:	b2d2      	uxtb	r2, r2
 800c2c0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c4:	f103 0211 	add.w	r2, r3, #17
 800c2c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c2cc:	2b03      	cmp	r3, #3
 800c2ce:	d002      	beq.n	800c2d6 <f_mkfs+0x46a>
 800c2d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	e000      	b.n	800c2d8 <f_mkfs+0x46c>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	4619      	mov	r1, r3
 800c2da:	4610      	mov	r0, r2
 800c2dc:	f7fd fc8f 	bl	8009bfe <st_word>
		if (sz_vol < 0x10000) {
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2e6:	d208      	bcs.n	800c2fa <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800c2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ea:	3313      	adds	r3, #19
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	b292      	uxth	r2, r2
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fd fc83 	bl	8009bfe <st_word>
 800c2f8:	e006      	b.n	800c308 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fc:	3320      	adds	r3, #32
 800c2fe:	693a      	ldr	r2, [r7, #16]
 800c300:	4611      	mov	r1, r2
 800c302:	4618      	mov	r0, r3
 800c304:	f7fd fc96 	bl	8009c34 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	3315      	adds	r3, #21
 800c30c:	22f8      	movs	r2, #248	; 0xf8
 800c30e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c312:	3318      	adds	r3, #24
 800c314:	213f      	movs	r1, #63	; 0x3f
 800c316:	4618      	mov	r0, r3
 800c318:	f7fd fc71 	bl	8009bfe <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800c31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31e:	331a      	adds	r3, #26
 800c320:	21ff      	movs	r1, #255	; 0xff
 800c322:	4618      	mov	r0, r3
 800c324:	f7fd fc6b 	bl	8009bfe <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32a:	331c      	adds	r3, #28
 800c32c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fd fc80 	bl	8009c34 <st_dword>
		if (fmt == FS_FAT32) {
 800c334:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c338:	2b03      	cmp	r3, #3
 800c33a:	d131      	bne.n	800c3a0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800c33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800c342:	f7fd f92f 	bl	80095a4 <get_fattime>
 800c346:	4603      	mov	r3, r0
 800c348:	4619      	mov	r1, r3
 800c34a:	4620      	mov	r0, r4
 800c34c:	f7fd fc72 	bl	8009c34 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800c350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c352:	3324      	adds	r3, #36	; 0x24
 800c354:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c356:	4618      	mov	r0, r3
 800c358:	f7fd fc6c 	bl	8009c34 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	332c      	adds	r3, #44	; 0x2c
 800c360:	2102      	movs	r1, #2
 800c362:	4618      	mov	r0, r3
 800c364:	f7fd fc66 	bl	8009c34 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800c368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36a:	3330      	adds	r3, #48	; 0x30
 800c36c:	2101      	movs	r1, #1
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fd fc45 	bl	8009bfe <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800c374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c376:	3332      	adds	r3, #50	; 0x32
 800c378:	2106      	movs	r1, #6
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fd fc3f 	bl	8009bfe <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800c380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c382:	3340      	adds	r3, #64	; 0x40
 800c384:	2280      	movs	r2, #128	; 0x80
 800c386:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800c388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38a:	3342      	adds	r3, #66	; 0x42
 800c38c:	2229      	movs	r2, #41	; 0x29
 800c38e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800c390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c392:	3347      	adds	r3, #71	; 0x47
 800c394:	2213      	movs	r2, #19
 800c396:	4970      	ldr	r1, [pc, #448]	; (800c558 <f_mkfs+0x6ec>)
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fd fc77 	bl	8009c8c <mem_cpy>
 800c39e:	e020      	b.n	800c3e2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c3a6:	f7fd f8fd 	bl	80095a4 <get_fattime>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f7fd fc40 	bl	8009c34 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	3316      	adds	r3, #22
 800c3b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c3ba:	b292      	uxth	r2, r2
 800c3bc:	4611      	mov	r1, r2
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fd fc1d 	bl	8009bfe <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c6:	3324      	adds	r3, #36	; 0x24
 800c3c8:	2280      	movs	r2, #128	; 0x80
 800c3ca:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ce:	3326      	adds	r3, #38	; 0x26
 800c3d0:	2229      	movs	r2, #41	; 0x29
 800c3d2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d6:	332b      	adds	r3, #43	; 0x2b
 800c3d8:	2213      	movs	r2, #19
 800c3da:	4960      	ldr	r1, [pc, #384]	; (800c55c <f_mkfs+0x6f0>)
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fd fc55 	bl	8009c8c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c3e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fd fc06 	bl	8009bfe <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c3f2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3fc:	f7fd fb86 	bl	8009b0c <disk_write>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <f_mkfs+0x59e>
 800c406:	2301      	movs	r3, #1
 800c408:	e156      	b.n	800c6b8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c40a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d140      	bne.n	800c494 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c414:	1d9a      	adds	r2, r3, #6
 800c416:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c41a:	2301      	movs	r3, #1
 800c41c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c41e:	f7fd fb75 	bl	8009b0c <disk_write>
			mem_set(buf, 0, ss);
 800c422:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c424:	461a      	mov	r2, r3
 800c426:	2100      	movs	r1, #0
 800c428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c42a:	f7fd fc50 	bl	8009cce <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c42e:	494c      	ldr	r1, [pc, #304]	; (800c560 <f_mkfs+0x6f4>)
 800c430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c432:	f7fd fbff 	bl	8009c34 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c43c:	4949      	ldr	r1, [pc, #292]	; (800c564 <f_mkfs+0x6f8>)
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fd fbf8 	bl	8009c34 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c446:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c44a:	6a3b      	ldr	r3, [r7, #32]
 800c44c:	3b01      	subs	r3, #1
 800c44e:	4619      	mov	r1, r3
 800c450:	4610      	mov	r0, r2
 800c452:	f7fd fbef 	bl	8009c34 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c45c:	2102      	movs	r1, #2
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fd fbe8 	bl	8009c34 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c466:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c46a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fd fbc5 	bl	8009bfe <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c476:	1dda      	adds	r2, r3, #7
 800c478:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c47c:	2301      	movs	r3, #1
 800c47e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c480:	f7fd fb44 	bl	8009b0c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c48c:	2301      	movs	r3, #1
 800c48e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c490:	f7fd fb3c 	bl	8009b0c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c496:	2100      	movs	r1, #0
 800c498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c49a:	f7fd fc18 	bl	8009cce <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c49e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4a0:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4a6:	e04b      	b.n	800c540 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c4a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c4ac:	2b03      	cmp	r3, #3
 800c4ae:	d113      	bne.n	800c4d8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c4b0:	f06f 0107 	mvn.w	r1, #7
 800c4b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4b6:	f7fd fbbd 	bl	8009c34 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4bc:	3304      	adds	r3, #4
 800c4be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fd fbb6 	bl	8009c34 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ca:	3308      	adds	r3, #8
 800c4cc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fd fbaf 	bl	8009c34 <st_dword>
 800c4d6:	e00b      	b.n	800c4f0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c4d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d101      	bne.n	800c4e4 <f_mkfs+0x678>
 800c4e0:	4b21      	ldr	r3, [pc, #132]	; (800c568 <f_mkfs+0x6fc>)
 800c4e2:	e001      	b.n	800c4e8 <f_mkfs+0x67c>
 800c4e4:	f06f 0307 	mvn.w	r3, #7
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4ec:	f7fd fba2 	bl	8009c34 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c4f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4f2:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c4f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	bf28      	it	cs
 800c4fc:	4613      	movcs	r3, r2
 800c4fe:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c500:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c506:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c50a:	f7fd faff 	bl	8009b0c <disk_write>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d001      	beq.n	800c518 <f_mkfs+0x6ac>
 800c514:	2301      	movs	r3, #1
 800c516:	e0cf      	b.n	800c6b8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c518:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c51a:	461a      	mov	r2, r3
 800c51c:	2100      	movs	r1, #0
 800c51e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c520:	f7fd fbd5 	bl	8009cce <mem_set>
				sect += n; nsect -= n;
 800c524:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c528:	4413      	add	r3, r2
 800c52a:	667b      	str	r3, [r7, #100]	; 0x64
 800c52c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c52e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1dc      	bne.n	800c4f4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c53a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c53c:	3301      	adds	r3, #1
 800c53e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c544:	429a      	cmp	r2, r3
 800c546:	d3af      	bcc.n	800c4a8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c548:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c54c:	2b03      	cmp	r3, #3
 800c54e:	d10d      	bne.n	800c56c <f_mkfs+0x700>
 800c550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c552:	e00c      	b.n	800c56e <f_mkfs+0x702>
 800c554:	08010730 	.word	0x08010730
 800c558:	0801073c 	.word	0x0801073c
 800c55c:	08010750 	.word	0x08010750
 800c560:	41615252 	.word	0x41615252
 800c564:	61417272 	.word	0x61417272
 800c568:	00fffff8 	.word	0x00fffff8
 800c56c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c56e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c570:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c574:	4293      	cmp	r3, r2
 800c576:	bf28      	it	cs
 800c578:	4613      	movcs	r3, r2
 800c57a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c57c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c582:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c586:	f7fd fac1 	bl	8009b0c <disk_write>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d001      	beq.n	800c594 <f_mkfs+0x728>
 800c590:	2301      	movs	r3, #1
 800c592:	e091      	b.n	800c6b8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800c594:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c598:	4413      	add	r3, r2
 800c59a:	667b      	str	r3, [r7, #100]	; 0x64
 800c59c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c59e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c5a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1e2      	bne.n	800c570 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c5aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d103      	bne.n	800c5ba <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c5b2:	230c      	movs	r3, #12
 800c5b4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c5b8:	e010      	b.n	800c5dc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5c0:	d303      	bcc.n	800c5ca <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c5c2:	2306      	movs	r3, #6
 800c5c4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c5c8:	e008      	b.n	800c5dc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c5ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	d101      	bne.n	800c5d6 <f_mkfs+0x76a>
 800c5d2:	2304      	movs	r3, #4
 800c5d4:	e000      	b.n	800c5d8 <f_mkfs+0x76c>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c5dc:	7afb      	ldrb	r3, [r7, #11]
 800c5de:	f003 0308 	and.w	r3, r3, #8
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d15b      	bne.n	800c69e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800c5e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5ee:	f7fd fb6e 	bl	8009cce <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5f8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7fd fafe 	bl	8009bfe <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c604:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c608:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	2200      	movs	r2, #0
 800c60e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	3301      	adds	r3, #1
 800c614:	2201      	movs	r2, #1
 800c616:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	3302      	adds	r3, #2
 800c61c:	2201      	movs	r2, #1
 800c61e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	3303      	adds	r3, #3
 800c624:	2200      	movs	r2, #0
 800c626:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	3304      	adds	r3, #4
 800c62c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c630:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c632:	693a      	ldr	r2, [r7, #16]
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	441a      	add	r2, r3
 800c638:	4b21      	ldr	r3, [pc, #132]	; (800c6c0 <f_mkfs+0x854>)
 800c63a:	fba3 1302 	umull	r1, r3, r3, r2
 800c63e:	1ad2      	subs	r2, r2, r3
 800c640:	0852      	lsrs	r2, r2, #1
 800c642:	4413      	add	r3, r2
 800c644:	0b5b      	lsrs	r3, r3, #13
 800c646:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	3305      	adds	r3, #5
 800c64c:	22fe      	movs	r2, #254	; 0xfe
 800c64e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c652:	089b      	lsrs	r3, r3, #2
 800c654:	b2da      	uxtb	r2, r3
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	3306      	adds	r3, #6
 800c65a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c65e:	b2d2      	uxtb	r2, r2
 800c660:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	3307      	adds	r3, #7
 800c666:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c668:	b2d2      	uxtb	r2, r2
 800c66a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	3308      	adds	r3, #8
 800c670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c672:	4618      	mov	r0, r3
 800c674:	f7fd fade 	bl	8009c34 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	330c      	adds	r3, #12
 800c67c:	693a      	ldr	r2, [r7, #16]
 800c67e:	4611      	mov	r1, r2
 800c680:	4618      	mov	r0, r3
 800c682:	f7fd fad7 	bl	8009c34 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c686:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c68a:	2301      	movs	r3, #1
 800c68c:	2200      	movs	r2, #0
 800c68e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c690:	f7fd fa3c 	bl	8009b0c <disk_write>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d001      	beq.n	800c69e <f_mkfs+0x832>
 800c69a:	2301      	movs	r3, #1
 800c69c:	e00c      	b.n	800c6b8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c69e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fd fa50 	bl	8009b4c <disk_ioctl>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d001      	beq.n	800c6b6 <f_mkfs+0x84a>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e000      	b.n	800c6b8 <f_mkfs+0x84c>

	return FR_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3774      	adds	r7, #116	; 0x74
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd90      	pop	{r4, r7, pc}
 800c6c0:	0515565b 	.word	0x0515565b

0800c6c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b087      	sub	sp, #28
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c6da:	4b1f      	ldr	r3, [pc, #124]	; (800c758 <FATFS_LinkDriverEx+0x94>)
 800c6dc:	7a5b      	ldrb	r3, [r3, #9]
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d131      	bne.n	800c748 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c6e4:	4b1c      	ldr	r3, [pc, #112]	; (800c758 <FATFS_LinkDriverEx+0x94>)
 800c6e6:	7a5b      	ldrb	r3, [r3, #9]
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	4b1a      	ldr	r3, [pc, #104]	; (800c758 <FATFS_LinkDriverEx+0x94>)
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c6f2:	4b19      	ldr	r3, [pc, #100]	; (800c758 <FATFS_LinkDriverEx+0x94>)
 800c6f4:	7a5b      	ldrb	r3, [r3, #9]
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	4a17      	ldr	r2, [pc, #92]	; (800c758 <FATFS_LinkDriverEx+0x94>)
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	4413      	add	r3, r2
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c702:	4b15      	ldr	r3, [pc, #84]	; (800c758 <FATFS_LinkDriverEx+0x94>)
 800c704:	7a5b      	ldrb	r3, [r3, #9]
 800c706:	b2db      	uxtb	r3, r3
 800c708:	461a      	mov	r2, r3
 800c70a:	4b13      	ldr	r3, [pc, #76]	; (800c758 <FATFS_LinkDriverEx+0x94>)
 800c70c:	4413      	add	r3, r2
 800c70e:	79fa      	ldrb	r2, [r7, #7]
 800c710:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c712:	4b11      	ldr	r3, [pc, #68]	; (800c758 <FATFS_LinkDriverEx+0x94>)
 800c714:	7a5b      	ldrb	r3, [r3, #9]
 800c716:	b2db      	uxtb	r3, r3
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	b2d1      	uxtb	r1, r2
 800c71c:	4a0e      	ldr	r2, [pc, #56]	; (800c758 <FATFS_LinkDriverEx+0x94>)
 800c71e:	7251      	strb	r1, [r2, #9]
 800c720:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c722:	7dbb      	ldrb	r3, [r7, #22]
 800c724:	3330      	adds	r3, #48	; 0x30
 800c726:	b2da      	uxtb	r2, r3
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	3301      	adds	r3, #1
 800c730:	223a      	movs	r2, #58	; 0x3a
 800c732:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	3302      	adds	r3, #2
 800c738:	222f      	movs	r2, #47	; 0x2f
 800c73a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	3303      	adds	r3, #3
 800c740:	2200      	movs	r2, #0
 800c742:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c744:	2300      	movs	r3, #0
 800c746:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c748:	7dfb      	ldrb	r3, [r7, #23]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	371c      	adds	r7, #28
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	20000c90 	.word	0x20000c90

0800c75c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c766:	2200      	movs	r2, #0
 800c768:	6839      	ldr	r1, [r7, #0]
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7ff ffaa 	bl	800c6c4 <FATFS_LinkDriverEx>
 800c770:	4603      	mov	r3, r0
}
 800c772:	4618      	mov	r0, r3
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b084      	sub	sp, #16
 800c77e:	af00      	add	r7, sp, #0
 800c780:	4603      	mov	r3, r0
 800c782:	6039      	str	r1, [r7, #0]
 800c784:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 800c786:	2000      	movs	r0, #0
 800c788:	f000 f9ae 	bl	800cae8 <osMutexNew>
 800c78c:	4602      	mov	r2, r0
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	bf14      	ite	ne
 800c79a:	2301      	movne	r3, #1
 800c79c:	2300      	moveq	r3, #0
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	60fb      	str	r3, [r7, #12]

    return ret;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 faa5 	bl	800cd04 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800c7ba:	2301      	movs	r3, #1
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 800c7d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fa0d 	bl	800cbf4 <osMutexAcquire>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d101      	bne.n	800c7e4 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b082      	sub	sp, #8
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fa47 	bl	800cc8a <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <__NVIC_SetPriority>:
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	4603      	mov	r3, r0
 800c80c:	6039      	str	r1, [r7, #0]
 800c80e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c814:	2b00      	cmp	r3, #0
 800c816:	db0a      	blt.n	800c82e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	490c      	ldr	r1, [pc, #48]	; (800c850 <__NVIC_SetPriority+0x4c>)
 800c81e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c822:	0112      	lsls	r2, r2, #4
 800c824:	b2d2      	uxtb	r2, r2
 800c826:	440b      	add	r3, r1
 800c828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c82c:	e00a      	b.n	800c844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	b2da      	uxtb	r2, r3
 800c832:	4908      	ldr	r1, [pc, #32]	; (800c854 <__NVIC_SetPriority+0x50>)
 800c834:	79fb      	ldrb	r3, [r7, #7]
 800c836:	f003 030f 	and.w	r3, r3, #15
 800c83a:	3b04      	subs	r3, #4
 800c83c:	0112      	lsls	r2, r2, #4
 800c83e:	b2d2      	uxtb	r2, r2
 800c840:	440b      	add	r3, r1
 800c842:	761a      	strb	r2, [r3, #24]
}
 800c844:	bf00      	nop
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr
 800c850:	e000e100 	.word	0xe000e100
 800c854:	e000ed00 	.word	0xe000ed00

0800c858 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c858:	b580      	push	{r7, lr}
 800c85a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c85c:	4b05      	ldr	r3, [pc, #20]	; (800c874 <SysTick_Handler+0x1c>)
 800c85e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c860:	f002 fcde 	bl	800f220 <xTaskGetSchedulerState>
 800c864:	4603      	mov	r3, r0
 800c866:	2b01      	cmp	r3, #1
 800c868:	d001      	beq.n	800c86e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c86a:	f003 fbc5 	bl	800fff8 <xPortSysTickHandler>
  }
}
 800c86e:	bf00      	nop
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	e000e010 	.word	0xe000e010

0800c878 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c878:	b580      	push	{r7, lr}
 800c87a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c87c:	2100      	movs	r1, #0
 800c87e:	f06f 0004 	mvn.w	r0, #4
 800c882:	f7ff ffbf 	bl	800c804 <__NVIC_SetPriority>
#endif
}
 800c886:	bf00      	nop
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c892:	f3ef 8305 	mrs	r3, IPSR
 800c896:	603b      	str	r3, [r7, #0]
  return(result);
 800c898:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d003      	beq.n	800c8a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c89e:	f06f 0305 	mvn.w	r3, #5
 800c8a2:	607b      	str	r3, [r7, #4]
 800c8a4:	e00c      	b.n	800c8c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c8a6:	4b0a      	ldr	r3, [pc, #40]	; (800c8d0 <osKernelInitialize+0x44>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d105      	bne.n	800c8ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c8ae:	4b08      	ldr	r3, [pc, #32]	; (800c8d0 <osKernelInitialize+0x44>)
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	607b      	str	r3, [r7, #4]
 800c8b8:	e002      	b.n	800c8c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c8ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c8c0:	687b      	ldr	r3, [r7, #4]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	370c      	adds	r7, #12
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	20000c9c 	.word	0x20000c9c

0800c8d4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800c8da:	f002 fca1 	bl	800f220 <xTaskGetSchedulerState>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d004      	beq.n	800c8ee <osKernelGetState+0x1a>
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d105      	bne.n	800c8f4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c8e8:	2302      	movs	r3, #2
 800c8ea:	607b      	str	r3, [r7, #4]
      break;
 800c8ec:	e00c      	b.n	800c908 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	607b      	str	r3, [r7, #4]
      break;
 800c8f2:	e009      	b.n	800c908 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c8f4:	4b07      	ldr	r3, [pc, #28]	; (800c914 <osKernelGetState+0x40>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d102      	bne.n	800c902 <osKernelGetState+0x2e>
        state = osKernelReady;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c900:	e001      	b.n	800c906 <osKernelGetState+0x32>
        state = osKernelInactive;
 800c902:	2300      	movs	r3, #0
 800c904:	607b      	str	r3, [r7, #4]
      break;
 800c906:	bf00      	nop
  }

  return (state);
 800c908:	687b      	ldr	r3, [r7, #4]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	20000c9c 	.word	0x20000c9c

0800c918 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c91e:	f3ef 8305 	mrs	r3, IPSR
 800c922:	603b      	str	r3, [r7, #0]
  return(result);
 800c924:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c926:	2b00      	cmp	r3, #0
 800c928:	d003      	beq.n	800c932 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c92a:	f06f 0305 	mvn.w	r3, #5
 800c92e:	607b      	str	r3, [r7, #4]
 800c930:	e010      	b.n	800c954 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c932:	4b0b      	ldr	r3, [pc, #44]	; (800c960 <osKernelStart+0x48>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d109      	bne.n	800c94e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c93a:	f7ff ff9d 	bl	800c878 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c93e:	4b08      	ldr	r3, [pc, #32]	; (800c960 <osKernelStart+0x48>)
 800c940:	2202      	movs	r2, #2
 800c942:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c944:	f001 ffee 	bl	800e924 <vTaskStartScheduler>
      stat = osOK;
 800c948:	2300      	movs	r3, #0
 800c94a:	607b      	str	r3, [r7, #4]
 800c94c:	e002      	b.n	800c954 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c94e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c952:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c954:	687b      	ldr	r3, [r7, #4]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	20000c9c 	.word	0x20000c9c

0800c964 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c96a:	f3ef 8305 	mrs	r3, IPSR
 800c96e:	603b      	str	r3, [r7, #0]
  return(result);
 800c970:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c972:	2b00      	cmp	r3, #0
 800c974:	d003      	beq.n	800c97e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c976:	f002 f901 	bl	800eb7c <xTaskGetTickCountFromISR>
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	e002      	b.n	800c984 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c97e:	f002 f8ed 	bl	800eb5c <xTaskGetTickCount>
 800c982:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c984:	687b      	ldr	r3, [r7, #4]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c98e:	b580      	push	{r7, lr}
 800c990:	b08e      	sub	sp, #56	; 0x38
 800c992:	af04      	add	r7, sp, #16
 800c994:	60f8      	str	r0, [r7, #12]
 800c996:	60b9      	str	r1, [r7, #8]
 800c998:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c99a:	2300      	movs	r3, #0
 800c99c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c99e:	f3ef 8305 	mrs	r3, IPSR
 800c9a2:	617b      	str	r3, [r7, #20]
  return(result);
 800c9a4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d17e      	bne.n	800caa8 <osThreadNew+0x11a>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d07b      	beq.n	800caa8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c9b0:	2380      	movs	r3, #128	; 0x80
 800c9b2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c9b4:	2318      	movs	r3, #24
 800c9b6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c9bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d045      	beq.n	800ca54 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d002      	beq.n	800c9d6 <osThreadNew+0x48>
        name = attr->name;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	699b      	ldr	r3, [r3, #24]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	699b      	ldr	r3, [r3, #24]
 800c9e2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d008      	beq.n	800c9fc <osThreadNew+0x6e>
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	2b38      	cmp	r3, #56	; 0x38
 800c9ee:	d805      	bhi.n	800c9fc <osThreadNew+0x6e>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	f003 0301 	and.w	r3, r3, #1
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <osThreadNew+0x72>
        return (NULL);
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e054      	b.n	800caaa <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	695b      	ldr	r3, [r3, #20]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d003      	beq.n	800ca10 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	695b      	ldr	r3, [r3, #20]
 800ca0c:	089b      	lsrs	r3, r3, #2
 800ca0e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00e      	beq.n	800ca36 <osThreadNew+0xa8>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	2bbb      	cmp	r3, #187	; 0xbb
 800ca1e:	d90a      	bls.n	800ca36 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d006      	beq.n	800ca36 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	695b      	ldr	r3, [r3, #20]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d002      	beq.n	800ca36 <osThreadNew+0xa8>
        mem = 1;
 800ca30:	2301      	movs	r3, #1
 800ca32:	61bb      	str	r3, [r7, #24]
 800ca34:	e010      	b.n	800ca58 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10c      	bne.n	800ca58 <osThreadNew+0xca>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d108      	bne.n	800ca58 <osThreadNew+0xca>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d104      	bne.n	800ca58 <osThreadNew+0xca>
          mem = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	61bb      	str	r3, [r7, #24]
 800ca52:	e001      	b.n	800ca58 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ca54:	2300      	movs	r3, #0
 800ca56:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d110      	bne.n	800ca80 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca66:	9202      	str	r2, [sp, #8]
 800ca68:	9301      	str	r3, [sp, #4]
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	9300      	str	r3, [sp, #0]
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	6a3a      	ldr	r2, [r7, #32]
 800ca72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f001 fd69 	bl	800e54c <xTaskCreateStatic>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	613b      	str	r3, [r7, #16]
 800ca7e:	e013      	b.n	800caa8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d110      	bne.n	800caa8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ca86:	6a3b      	ldr	r3, [r7, #32]
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	f107 0310 	add.w	r3, r7, #16
 800ca8e:	9301      	str	r3, [sp, #4]
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f001 fdb4 	bl	800e606 <xTaskCreate>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d001      	beq.n	800caa8 <osThreadNew+0x11a>
            hTask = NULL;
 800caa4:	2300      	movs	r3, #0
 800caa6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800caa8:	693b      	ldr	r3, [r7, #16]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3728      	adds	r7, #40	; 0x28
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b084      	sub	sp, #16
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caba:	f3ef 8305 	mrs	r3, IPSR
 800cabe:	60bb      	str	r3, [r7, #8]
  return(result);
 800cac0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d003      	beq.n	800cace <osDelay+0x1c>
    stat = osErrorISR;
 800cac6:	f06f 0305 	mvn.w	r3, #5
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	e007      	b.n	800cade <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cace:	2300      	movs	r3, #0
 800cad0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d002      	beq.n	800cade <osDelay+0x2c>
      vTaskDelay(ticks);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f001 feef 	bl	800e8bc <vTaskDelay>
    }
  }

  return (stat);
 800cade:	68fb      	ldr	r3, [r7, #12]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cae8:	b580      	push	{r7, lr}
 800caea:	b088      	sub	sp, #32
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800caf0:	2300      	movs	r3, #0
 800caf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caf4:	f3ef 8305 	mrs	r3, IPSR
 800caf8:	60bb      	str	r3, [r7, #8]
  return(result);
 800cafa:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d174      	bne.n	800cbea <osMutexNew+0x102>
    if (attr != NULL) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d003      	beq.n	800cb0e <osMutexNew+0x26>
      type = attr->attr_bits;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	61bb      	str	r3, [r7, #24]
 800cb0c:	e001      	b.n	800cb12 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	f003 0301 	and.w	r3, r3, #1
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d002      	beq.n	800cb22 <osMutexNew+0x3a>
      rmtx = 1U;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	617b      	str	r3, [r7, #20]
 800cb20:	e001      	b.n	800cb26 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800cb22:	2300      	movs	r3, #0
 800cb24:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	f003 0308 	and.w	r3, r3, #8
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d15c      	bne.n	800cbea <osMutexNew+0x102>
      mem = -1;
 800cb30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb34:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d015      	beq.n	800cb68 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d006      	beq.n	800cb52 <osMutexNew+0x6a>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	2b4f      	cmp	r3, #79	; 0x4f
 800cb4a:	d902      	bls.n	800cb52 <osMutexNew+0x6a>
          mem = 1;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	613b      	str	r3, [r7, #16]
 800cb50:	e00c      	b.n	800cb6c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d108      	bne.n	800cb6c <osMutexNew+0x84>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d104      	bne.n	800cb6c <osMutexNew+0x84>
            mem = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	613b      	str	r3, [r7, #16]
 800cb66:	e001      	b.n	800cb6c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d112      	bne.n	800cb98 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d007      	beq.n	800cb88 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	2004      	movs	r0, #4
 800cb80:	f000 fd8f 	bl	800d6a2 <xQueueCreateMutexStatic>
 800cb84:	61f8      	str	r0, [r7, #28]
 800cb86:	e016      	b.n	800cbb6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	2001      	movs	r0, #1
 800cb90:	f000 fd87 	bl	800d6a2 <xQueueCreateMutexStatic>
 800cb94:	61f8      	str	r0, [r7, #28]
 800cb96:	e00e      	b.n	800cbb6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d10b      	bne.n	800cbb6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d004      	beq.n	800cbae <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cba4:	2004      	movs	r0, #4
 800cba6:	f000 fd64 	bl	800d672 <xQueueCreateMutex>
 800cbaa:	61f8      	str	r0, [r7, #28]
 800cbac:	e003      	b.n	800cbb6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800cbae:	2001      	movs	r0, #1
 800cbb0:	f000 fd5f 	bl	800d672 <xQueueCreateMutex>
 800cbb4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00c      	beq.n	800cbd6 <osMutexNew+0xee>
        if (attr != NULL) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d003      	beq.n	800cbca <osMutexNew+0xe2>
          name = attr->name;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	60fb      	str	r3, [r7, #12]
 800cbc8:	e001      	b.n	800cbce <osMutexNew+0xe6>
        } else {
          name = NULL;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800cbce:	68f9      	ldr	r1, [r7, #12]
 800cbd0:	69f8      	ldr	r0, [r7, #28]
 800cbd2:	f001 fc33 	bl	800e43c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d006      	beq.n	800cbea <osMutexNew+0x102>
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d003      	beq.n	800cbea <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	f043 0301 	orr.w	r3, r3, #1
 800cbe8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cbea:	69fb      	ldr	r3, [r7, #28]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3720      	adds	r7, #32
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b086      	sub	sp, #24
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f023 0301 	bic.w	r3, r3, #1
 800cc04:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f003 0301 	and.w	r3, r3, #1
 800cc0c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc12:	f3ef 8305 	mrs	r3, IPSR
 800cc16:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc18:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d003      	beq.n	800cc26 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800cc1e:	f06f 0305 	mvn.w	r3, #5
 800cc22:	617b      	str	r3, [r7, #20]
 800cc24:	e02c      	b.n	800cc80 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d103      	bne.n	800cc34 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cc2c:	f06f 0303 	mvn.w	r3, #3
 800cc30:	617b      	str	r3, [r7, #20]
 800cc32:	e025      	b.n	800cc80 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d011      	beq.n	800cc5e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6938      	ldr	r0, [r7, #16]
 800cc3e:	f000 fd7f 	bl	800d740 <xQueueTakeMutexRecursive>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d01b      	beq.n	800cc80 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d003      	beq.n	800cc56 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800cc4e:	f06f 0301 	mvn.w	r3, #1
 800cc52:	617b      	str	r3, [r7, #20]
 800cc54:	e014      	b.n	800cc80 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cc56:	f06f 0302 	mvn.w	r3, #2
 800cc5a:	617b      	str	r3, [r7, #20]
 800cc5c:	e010      	b.n	800cc80 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cc5e:	6839      	ldr	r1, [r7, #0]
 800cc60:	6938      	ldr	r0, [r7, #16]
 800cc62:	f001 f913 	bl	800de8c <xQueueSemaphoreTake>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d009      	beq.n	800cc80 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d003      	beq.n	800cc7a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800cc72:	f06f 0301 	mvn.w	r3, #1
 800cc76:	617b      	str	r3, [r7, #20]
 800cc78:	e002      	b.n	800cc80 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cc7a:	f06f 0302 	mvn.w	r3, #2
 800cc7e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800cc80:	697b      	ldr	r3, [r7, #20]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b086      	sub	sp, #24
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f023 0301 	bic.w	r3, r3, #1
 800cc98:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cca2:	2300      	movs	r3, #0
 800cca4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cca6:	f3ef 8305 	mrs	r3, IPSR
 800ccaa:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccac:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d003      	beq.n	800ccba <osMutexRelease+0x30>
    stat = osErrorISR;
 800ccb2:	f06f 0305 	mvn.w	r3, #5
 800ccb6:	617b      	str	r3, [r7, #20]
 800ccb8:	e01f      	b.n	800ccfa <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d103      	bne.n	800ccc8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ccc0:	f06f 0303 	mvn.w	r3, #3
 800ccc4:	617b      	str	r3, [r7, #20]
 800ccc6:	e018      	b.n	800ccfa <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d009      	beq.n	800cce2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ccce:	6938      	ldr	r0, [r7, #16]
 800ccd0:	f000 fd02 	bl	800d6d8 <xQueueGiveMutexRecursive>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d00f      	beq.n	800ccfa <osMutexRelease+0x70>
        stat = osErrorResource;
 800ccda:	f06f 0302 	mvn.w	r3, #2
 800ccde:	617b      	str	r3, [r7, #20]
 800cce0:	e00b      	b.n	800ccfa <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cce2:	2300      	movs	r3, #0
 800cce4:	2200      	movs	r2, #0
 800cce6:	2100      	movs	r1, #0
 800cce8:	6938      	ldr	r0, [r7, #16]
 800ccea:	f000 fdc9 	bl	800d880 <xQueueGenericSend>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d002      	beq.n	800ccfa <osMutexRelease+0x70>
        stat = osErrorResource;
 800ccf4:	f06f 0302 	mvn.w	r3, #2
 800ccf8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ccfa:	697b      	ldr	r3, [r7, #20]
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3718      	adds	r7, #24
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f023 0301 	bic.w	r3, r3, #1
 800cd12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd14:	f3ef 8305 	mrs	r3, IPSR
 800cd18:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd1a:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d003      	beq.n	800cd28 <osMutexDelete+0x24>
    stat = osErrorISR;
 800cd20:	f06f 0305 	mvn.w	r3, #5
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	e00e      	b.n	800cd46 <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d103      	bne.n	800cd36 <osMutexDelete+0x32>
    stat = osErrorParameter;
 800cd2e:	f06f 0303 	mvn.w	r3, #3
 800cd32:	617b      	str	r3, [r7, #20]
 800cd34:	e007      	b.n	800cd46 <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800cd36:	6938      	ldr	r0, [r7, #16]
 800cd38:	f001 fbaa 	bl	800e490 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 800cd40:	6938      	ldr	r0, [r7, #16]
 800cd42:	f001 fa2f 	bl	800e1a4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800cd46:	697b      	ldr	r3, [r7, #20]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3718      	adds	r7, #24
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <osSemaphoreNew>:
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08a      	sub	sp, #40	; 0x28
 800cd54:	af02      	add	r7, sp, #8
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd60:	f3ef 8305 	mrs	r3, IPSR
 800cd64:	613b      	str	r3, [r7, #16]
  return(result);
 800cd66:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d175      	bne.n	800ce58 <osSemaphoreNew+0x108>
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d072      	beq.n	800ce58 <osSemaphoreNew+0x108>
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d86e      	bhi.n	800ce58 <osSemaphoreNew+0x108>
    mem = -1;
 800cd7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d015      	beq.n	800cdb2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d006      	beq.n	800cd9c <osSemaphoreNew+0x4c>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	2b4f      	cmp	r3, #79	; 0x4f
 800cd94:	d902      	bls.n	800cd9c <osSemaphoreNew+0x4c>
        mem = 1;
 800cd96:	2301      	movs	r3, #1
 800cd98:	61bb      	str	r3, [r7, #24]
 800cd9a:	e00c      	b.n	800cdb6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d108      	bne.n	800cdb6 <osSemaphoreNew+0x66>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d104      	bne.n	800cdb6 <osSemaphoreNew+0x66>
          mem = 0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	61bb      	str	r3, [r7, #24]
 800cdb0:	e001      	b.n	800cdb6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdbc:	d04c      	beq.n	800ce58 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d128      	bne.n	800ce16 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d10a      	bne.n	800cde0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	2203      	movs	r2, #3
 800cdd0:	9200      	str	r2, [sp, #0]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	2001      	movs	r0, #1
 800cdd8:	f000 fb5c 	bl	800d494 <xQueueGenericCreateStatic>
 800cddc:	61f8      	str	r0, [r7, #28]
 800cdde:	e005      	b.n	800cdec <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800cde0:	2203      	movs	r2, #3
 800cde2:	2100      	movs	r1, #0
 800cde4:	2001      	movs	r0, #1
 800cde6:	f000 fbcd 	bl	800d584 <xQueueGenericCreate>
 800cdea:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d022      	beq.n	800ce38 <osSemaphoreNew+0xe8>
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d01f      	beq.n	800ce38 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	69f8      	ldr	r0, [r7, #28]
 800ce00:	f000 fd3e 	bl	800d880 <xQueueGenericSend>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d016      	beq.n	800ce38 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ce0a:	69f8      	ldr	r0, [r7, #28]
 800ce0c:	f001 f9ca 	bl	800e1a4 <vQueueDelete>
            hSemaphore = NULL;
 800ce10:	2300      	movs	r3, #0
 800ce12:	61fb      	str	r3, [r7, #28]
 800ce14:	e010      	b.n	800ce38 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d108      	bne.n	800ce2e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	461a      	mov	r2, r3
 800ce22:	68b9      	ldr	r1, [r7, #8]
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f000 fcc1 	bl	800d7ac <xQueueCreateCountingSemaphoreStatic>
 800ce2a:	61f8      	str	r0, [r7, #28]
 800ce2c:	e004      	b.n	800ce38 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ce2e:	68b9      	ldr	r1, [r7, #8]
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f000 fcf2 	bl	800d81a <xQueueCreateCountingSemaphore>
 800ce36:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00c      	beq.n	800ce58 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d003      	beq.n	800ce4c <osSemaphoreNew+0xfc>
          name = attr->name;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	617b      	str	r3, [r7, #20]
 800ce4a:	e001      	b.n	800ce50 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ce50:	6979      	ldr	r1, [r7, #20]
 800ce52:	69f8      	ldr	r0, [r7, #28]
 800ce54:	f001 faf2 	bl	800e43c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ce58:	69fb      	ldr	r3, [r7, #28]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3720      	adds	r7, #32
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
	...

0800ce64 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d103      	bne.n	800ce84 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ce7c:	f06f 0303 	mvn.w	r3, #3
 800ce80:	617b      	str	r3, [r7, #20]
 800ce82:	e039      	b.n	800cef8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce84:	f3ef 8305 	mrs	r3, IPSR
 800ce88:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d022      	beq.n	800ced6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d003      	beq.n	800ce9e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ce96:	f06f 0303 	mvn.w	r3, #3
 800ce9a:	617b      	str	r3, [r7, #20]
 800ce9c:	e02c      	b.n	800cef8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cea2:	f107 0308 	add.w	r3, r7, #8
 800cea6:	461a      	mov	r2, r3
 800cea8:	2100      	movs	r1, #0
 800ceaa:	6938      	ldr	r0, [r7, #16]
 800ceac:	f001 f8fa 	bl	800e0a4 <xQueueReceiveFromISR>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d003      	beq.n	800cebe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ceb6:	f06f 0302 	mvn.w	r3, #2
 800ceba:	617b      	str	r3, [r7, #20]
 800cebc:	e01c      	b.n	800cef8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d019      	beq.n	800cef8 <osSemaphoreAcquire+0x94>
 800cec4:	4b0f      	ldr	r3, [pc, #60]	; (800cf04 <osSemaphoreAcquire+0xa0>)
 800cec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceca:	601a      	str	r2, [r3, #0]
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	e010      	b.n	800cef8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ced6:	6839      	ldr	r1, [r7, #0]
 800ced8:	6938      	ldr	r0, [r7, #16]
 800ceda:	f000 ffd7 	bl	800de8c <xQueueSemaphoreTake>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d009      	beq.n	800cef8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d003      	beq.n	800cef2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ceea:	f06f 0301 	mvn.w	r3, #1
 800ceee:	617b      	str	r3, [r7, #20]
 800cef0:	e002      	b.n	800cef8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800cef2:	f06f 0302 	mvn.w	r3, #2
 800cef6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cef8:	697b      	ldr	r3, [r7, #20]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3718      	adds	r7, #24
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	e000ed04 	.word	0xe000ed04

0800cf08 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b086      	sub	sp, #24
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cf14:	2300      	movs	r3, #0
 800cf16:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d103      	bne.n	800cf26 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cf1e:	f06f 0303 	mvn.w	r3, #3
 800cf22:	617b      	str	r3, [r7, #20]
 800cf24:	e02c      	b.n	800cf80 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf26:	f3ef 8305 	mrs	r3, IPSR
 800cf2a:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d01a      	beq.n	800cf68 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800cf32:	2300      	movs	r3, #0
 800cf34:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cf36:	f107 0308 	add.w	r3, r7, #8
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	6938      	ldr	r0, [r7, #16]
 800cf3e:	f000 fe38 	bl	800dbb2 <xQueueGiveFromISR>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d003      	beq.n	800cf50 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800cf48:	f06f 0302 	mvn.w	r3, #2
 800cf4c:	617b      	str	r3, [r7, #20]
 800cf4e:	e017      	b.n	800cf80 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d014      	beq.n	800cf80 <osSemaphoreRelease+0x78>
 800cf56:	4b0d      	ldr	r3, [pc, #52]	; (800cf8c <osSemaphoreRelease+0x84>)
 800cf58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	e00b      	b.n	800cf80 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cf68:	2300      	movs	r3, #0
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	6938      	ldr	r0, [r7, #16]
 800cf70:	f000 fc86 	bl	800d880 <xQueueGenericSend>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d002      	beq.n	800cf80 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800cf7a:	f06f 0302 	mvn.w	r3, #2
 800cf7e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800cf80:	697b      	ldr	r3, [r7, #20]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3718      	adds	r7, #24
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	e000ed04 	.word	0xe000ed04

0800cf90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08a      	sub	sp, #40	; 0x28
 800cf94:	af02      	add	r7, sp, #8
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfa0:	f3ef 8305 	mrs	r3, IPSR
 800cfa4:	613b      	str	r3, [r7, #16]
  return(result);
 800cfa6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d15f      	bne.n	800d06c <osMessageQueueNew+0xdc>
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d05c      	beq.n	800d06c <osMessageQueueNew+0xdc>
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d059      	beq.n	800d06c <osMessageQueueNew+0xdc>
    mem = -1;
 800cfb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfbc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d029      	beq.n	800d018 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	689b      	ldr	r3, [r3, #8]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d012      	beq.n	800cff2 <osMessageQueueNew+0x62>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	2b4f      	cmp	r3, #79	; 0x4f
 800cfd2:	d90e      	bls.n	800cff2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00a      	beq.n	800cff2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	695a      	ldr	r2, [r3, #20]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	68b9      	ldr	r1, [r7, #8]
 800cfe4:	fb01 f303 	mul.w	r3, r1, r3
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d302      	bcc.n	800cff2 <osMessageQueueNew+0x62>
        mem = 1;
 800cfec:	2301      	movs	r3, #1
 800cfee:	61bb      	str	r3, [r7, #24]
 800cff0:	e014      	b.n	800d01c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d110      	bne.n	800d01c <osMessageQueueNew+0x8c>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10c      	bne.n	800d01c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d006:	2b00      	cmp	r3, #0
 800d008:	d108      	bne.n	800d01c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	695b      	ldr	r3, [r3, #20]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d104      	bne.n	800d01c <osMessageQueueNew+0x8c>
          mem = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	61bb      	str	r3, [r7, #24]
 800d016:	e001      	b.n	800d01c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d018:	2300      	movs	r3, #0
 800d01a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d10b      	bne.n	800d03a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	691a      	ldr	r2, [r3, #16]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	2100      	movs	r1, #0
 800d02c:	9100      	str	r1, [sp, #0]
 800d02e:	68b9      	ldr	r1, [r7, #8]
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f000 fa2f 	bl	800d494 <xQueueGenericCreateStatic>
 800d036:	61f8      	str	r0, [r7, #28]
 800d038:	e008      	b.n	800d04c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d105      	bne.n	800d04c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d040:	2200      	movs	r2, #0
 800d042:	68b9      	ldr	r1, [r7, #8]
 800d044:	68f8      	ldr	r0, [r7, #12]
 800d046:	f000 fa9d 	bl	800d584 <xQueueGenericCreate>
 800d04a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d00c      	beq.n	800d06c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d003      	beq.n	800d060 <osMessageQueueNew+0xd0>
        name = attr->name;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	617b      	str	r3, [r7, #20]
 800d05e:	e001      	b.n	800d064 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d060:	2300      	movs	r3, #0
 800d062:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d064:	6979      	ldr	r1, [r7, #20]
 800d066:	69f8      	ldr	r0, [r7, #28]
 800d068:	f001 f9e8 	bl	800e43c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d06c:	69fb      	ldr	r3, [r7, #28]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3720      	adds	r7, #32
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d078:	b580      	push	{r7, lr}
 800d07a:	b088      	sub	sp, #32
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	603b      	str	r3, [r7, #0]
 800d084:	4613      	mov	r3, r2
 800d086:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d08c:	2300      	movs	r3, #0
 800d08e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d090:	f3ef 8305 	mrs	r3, IPSR
 800d094:	617b      	str	r3, [r7, #20]
  return(result);
 800d096:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d028      	beq.n	800d0ee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d005      	beq.n	800d0ae <osMessageQueuePut+0x36>
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d002      	beq.n	800d0ae <osMessageQueuePut+0x36>
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d003      	beq.n	800d0b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d0ae:	f06f 0303 	mvn.w	r3, #3
 800d0b2:	61fb      	str	r3, [r7, #28]
 800d0b4:	e038      	b.n	800d128 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d0ba:	f107 0210 	add.w	r2, r7, #16
 800d0be:	2300      	movs	r3, #0
 800d0c0:	68b9      	ldr	r1, [r7, #8]
 800d0c2:	69b8      	ldr	r0, [r7, #24]
 800d0c4:	f000 fcda 	bl	800da7c <xQueueGenericSendFromISR>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d003      	beq.n	800d0d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d0ce:	f06f 0302 	mvn.w	r3, #2
 800d0d2:	61fb      	str	r3, [r7, #28]
 800d0d4:	e028      	b.n	800d128 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d025      	beq.n	800d128 <osMessageQueuePut+0xb0>
 800d0dc:	4b15      	ldr	r3, [pc, #84]	; (800d134 <osMessageQueuePut+0xbc>)
 800d0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e2:	601a      	str	r2, [r3, #0]
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	e01c      	b.n	800d128 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <osMessageQueuePut+0x82>
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d103      	bne.n	800d102 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d0fa:	f06f 0303 	mvn.w	r3, #3
 800d0fe:	61fb      	str	r3, [r7, #28]
 800d100:	e012      	b.n	800d128 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d102:	2300      	movs	r3, #0
 800d104:	683a      	ldr	r2, [r7, #0]
 800d106:	68b9      	ldr	r1, [r7, #8]
 800d108:	69b8      	ldr	r0, [r7, #24]
 800d10a:	f000 fbb9 	bl	800d880 <xQueueGenericSend>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b01      	cmp	r3, #1
 800d112:	d009      	beq.n	800d128 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d003      	beq.n	800d122 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d11a:	f06f 0301 	mvn.w	r3, #1
 800d11e:	61fb      	str	r3, [r7, #28]
 800d120:	e002      	b.n	800d128 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d122:	f06f 0302 	mvn.w	r3, #2
 800d126:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d128:	69fb      	ldr	r3, [r7, #28]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3720      	adds	r7, #32
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	e000ed04 	.word	0xe000ed04

0800d138 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d138:	b580      	push	{r7, lr}
 800d13a:	b088      	sub	sp, #32
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
 800d144:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d14e:	f3ef 8305 	mrs	r3, IPSR
 800d152:	617b      	str	r3, [r7, #20]
  return(result);
 800d154:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d156:	2b00      	cmp	r3, #0
 800d158:	d028      	beq.n	800d1ac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d005      	beq.n	800d16c <osMessageQueueGet+0x34>
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d002      	beq.n	800d16c <osMessageQueueGet+0x34>
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d003      	beq.n	800d174 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d16c:	f06f 0303 	mvn.w	r3, #3
 800d170:	61fb      	str	r3, [r7, #28]
 800d172:	e037      	b.n	800d1e4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d174:	2300      	movs	r3, #0
 800d176:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d178:	f107 0310 	add.w	r3, r7, #16
 800d17c:	461a      	mov	r2, r3
 800d17e:	68b9      	ldr	r1, [r7, #8]
 800d180:	69b8      	ldr	r0, [r7, #24]
 800d182:	f000 ff8f 	bl	800e0a4 <xQueueReceiveFromISR>
 800d186:	4603      	mov	r3, r0
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d003      	beq.n	800d194 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d18c:	f06f 0302 	mvn.w	r3, #2
 800d190:	61fb      	str	r3, [r7, #28]
 800d192:	e027      	b.n	800d1e4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d024      	beq.n	800d1e4 <osMessageQueueGet+0xac>
 800d19a:	4b15      	ldr	r3, [pc, #84]	; (800d1f0 <osMessageQueueGet+0xb8>)
 800d19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	e01b      	b.n	800d1e4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <osMessageQueueGet+0x80>
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d103      	bne.n	800d1c0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d1b8:	f06f 0303 	mvn.w	r3, #3
 800d1bc:	61fb      	str	r3, [r7, #28]
 800d1be:	e011      	b.n	800d1e4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d1c0:	683a      	ldr	r2, [r7, #0]
 800d1c2:	68b9      	ldr	r1, [r7, #8]
 800d1c4:	69b8      	ldr	r0, [r7, #24]
 800d1c6:	f000 fd81 	bl	800dccc <xQueueReceive>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d009      	beq.n	800d1e4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d003      	beq.n	800d1de <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d1d6:	f06f 0301 	mvn.w	r3, #1
 800d1da:	61fb      	str	r3, [r7, #28]
 800d1dc:	e002      	b.n	800d1e4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d1de:	f06f 0302 	mvn.w	r3, #2
 800d1e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d1e4:	69fb      	ldr	r3, [r7, #28]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3720      	adds	r7, #32
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	e000ed04 	.word	0xe000ed04

0800d1f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	4a07      	ldr	r2, [pc, #28]	; (800d220 <vApplicationGetIdleTaskMemory+0x2c>)
 800d204:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	4a06      	ldr	r2, [pc, #24]	; (800d224 <vApplicationGetIdleTaskMemory+0x30>)
 800d20a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2280      	movs	r2, #128	; 0x80
 800d210:	601a      	str	r2, [r3, #0]
}
 800d212:	bf00      	nop
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	20000ca0 	.word	0x20000ca0
 800d224:	20000d5c 	.word	0x20000d5c

0800d228 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	4a07      	ldr	r2, [pc, #28]	; (800d254 <vApplicationGetTimerTaskMemory+0x2c>)
 800d238:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	4a06      	ldr	r2, [pc, #24]	; (800d258 <vApplicationGetTimerTaskMemory+0x30>)
 800d23e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d246:	601a      	str	r2, [r3, #0]
}
 800d248:	bf00      	nop
 800d24a:	3714      	adds	r7, #20
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr
 800d254:	20000f5c 	.word	0x20000f5c
 800d258:	20001018 	.word	0x20001018

0800d25c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f103 0208 	add.w	r2, r3, #8
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d274:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f103 0208 	add.w	r2, r3, #8
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f103 0208 	add.w	r2, r3, #8
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d290:	bf00      	nop
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d2aa:	bf00      	nop
 800d2ac:	370c      	adds	r7, #12
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr

0800d2b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2b6:	b480      	push	{r7}
 800d2b8:	b085      	sub	sp, #20
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	689a      	ldr	r2, [r3, #8]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	683a      	ldr	r2, [r7, #0]
 800d2da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	1c5a      	adds	r2, r3, #1
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	601a      	str	r2, [r3, #0]
}
 800d2f2:	bf00      	nop
 800d2f4:	3714      	adds	r7, #20
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr

0800d2fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2fe:	b480      	push	{r7}
 800d300:	b085      	sub	sp, #20
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d314:	d103      	bne.n	800d31e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	60fb      	str	r3, [r7, #12]
 800d31c:	e00c      	b.n	800d338 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	3308      	adds	r3, #8
 800d322:	60fb      	str	r3, [r7, #12]
 800d324:	e002      	b.n	800d32c <vListInsert+0x2e>
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	60fb      	str	r3, [r7, #12]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	429a      	cmp	r2, r3
 800d336:	d2f6      	bcs.n	800d326 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	685a      	ldr	r2, [r3, #4]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	683a      	ldr	r2, [r7, #0]
 800d346:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	683a      	ldr	r2, [r7, #0]
 800d352:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	1c5a      	adds	r2, r3, #1
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	601a      	str	r2, [r3, #0]
}
 800d364:	bf00      	nop
 800d366:	3714      	adds	r7, #20
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	6892      	ldr	r2, [r2, #8]
 800d386:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	6852      	ldr	r2, [r2, #4]
 800d390:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d103      	bne.n	800d3a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	689a      	ldr	r2, [r3, #8]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	1e5a      	subs	r2, r3, #1
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3714      	adds	r7, #20
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d10a      	bne.n	800d3ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3dc:	f383 8811 	msr	BASEPRI, r3
 800d3e0:	f3bf 8f6f 	isb	sy
 800d3e4:	f3bf 8f4f 	dsb	sy
 800d3e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d3ea:	bf00      	nop
 800d3ec:	e7fe      	b.n	800d3ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d3ee:	f002 fd71 	bl	800fed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3fa:	68f9      	ldr	r1, [r7, #12]
 800d3fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3fe:	fb01 f303 	mul.w	r3, r1, r3
 800d402:	441a      	add	r2, r3
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d41e:	3b01      	subs	r3, #1
 800d420:	68f9      	ldr	r1, [r7, #12]
 800d422:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d424:	fb01 f303 	mul.w	r3, r1, r3
 800d428:	441a      	add	r2, r3
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	22ff      	movs	r2, #255	; 0xff
 800d432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	22ff      	movs	r2, #255	; 0xff
 800d43a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d114      	bne.n	800d46e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	691b      	ldr	r3, [r3, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d01a      	beq.n	800d482 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	3310      	adds	r3, #16
 800d450:	4618      	mov	r0, r3
 800d452:	f001 fd13 	bl	800ee7c <xTaskRemoveFromEventList>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d012      	beq.n	800d482 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d45c:	4b0c      	ldr	r3, [pc, #48]	; (800d490 <xQueueGenericReset+0xcc>)
 800d45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d462:	601a      	str	r2, [r3, #0]
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	f3bf 8f6f 	isb	sy
 800d46c:	e009      	b.n	800d482 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	3310      	adds	r3, #16
 800d472:	4618      	mov	r0, r3
 800d474:	f7ff fef2 	bl	800d25c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	3324      	adds	r3, #36	; 0x24
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7ff feed 	bl	800d25c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d482:	f002 fd57 	bl	800ff34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d486:	2301      	movs	r3, #1
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	e000ed04 	.word	0xe000ed04

0800d494 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08e      	sub	sp, #56	; 0x38
 800d498:	af02      	add	r7, sp, #8
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d10a      	bne.n	800d4be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ac:	f383 8811 	msr	BASEPRI, r3
 800d4b0:	f3bf 8f6f 	isb	sy
 800d4b4:	f3bf 8f4f 	dsb	sy
 800d4b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4ba:	bf00      	nop
 800d4bc:	e7fe      	b.n	800d4bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10a      	bne.n	800d4da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <xQueueGenericCreateStatic+0x52>
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <xQueueGenericCreateStatic+0x56>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e000      	b.n	800d4ec <xQueueGenericCreateStatic+0x58>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	623b      	str	r3, [r7, #32]
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d102      	bne.n	800d512 <xQueueGenericCreateStatic+0x7e>
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d101      	bne.n	800d516 <xQueueGenericCreateStatic+0x82>
 800d512:	2301      	movs	r3, #1
 800d514:	e000      	b.n	800d518 <xQueueGenericCreateStatic+0x84>
 800d516:	2300      	movs	r3, #0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10a      	bne.n	800d532 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	61fb      	str	r3, [r7, #28]
}
 800d52e:	bf00      	nop
 800d530:	e7fe      	b.n	800d530 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d532:	2350      	movs	r3, #80	; 0x50
 800d534:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	2b50      	cmp	r3, #80	; 0x50
 800d53a:	d00a      	beq.n	800d552 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d540:	f383 8811 	msr	BASEPRI, r3
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	61bb      	str	r3, [r7, #24]
}
 800d54e:	bf00      	nop
 800d550:	e7fe      	b.n	800d550 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d552:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00d      	beq.n	800d57a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	2201      	movs	r2, #1
 800d562:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d566:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56c:	9300      	str	r3, [sp, #0]
 800d56e:	4613      	mov	r3, r2
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	68b9      	ldr	r1, [r7, #8]
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f000 f83f 	bl	800d5f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3730      	adds	r7, #48	; 0x30
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d584:	b580      	push	{r7, lr}
 800d586:	b08a      	sub	sp, #40	; 0x28
 800d588:	af02      	add	r7, sp, #8
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	4613      	mov	r3, r2
 800d590:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d10a      	bne.n	800d5ae <xQueueGenericCreate+0x2a>
	__asm volatile
 800d598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59c:	f383 8811 	msr	BASEPRI, r3
 800d5a0:	f3bf 8f6f 	isb	sy
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	613b      	str	r3, [r7, #16]
}
 800d5aa:	bf00      	nop
 800d5ac:	e7fe      	b.n	800d5ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	68ba      	ldr	r2, [r7, #8]
 800d5b2:	fb02 f303 	mul.w	r3, r2, r3
 800d5b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	3350      	adds	r3, #80	; 0x50
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f002 fdab 	bl	8010118 <pvPortMalloc>
 800d5c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d011      	beq.n	800d5ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	3350      	adds	r3, #80	; 0x50
 800d5d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5dc:	79fa      	ldrb	r2, [r7, #7]
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	697a      	ldr	r2, [r7, #20]
 800d5e6:	68b9      	ldr	r1, [r7, #8]
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f000 f805 	bl	800d5f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5ee:	69bb      	ldr	r3, [r7, #24]
	}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3720      	adds	r7, #32
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
 800d604:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d103      	bne.n	800d614 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	69ba      	ldr	r2, [r7, #24]
 800d610:	601a      	str	r2, [r3, #0]
 800d612:	e002      	b.n	800d61a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	68fa      	ldr	r2, [r7, #12]
 800d61e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	68ba      	ldr	r2, [r7, #8]
 800d624:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d626:	2101      	movs	r1, #1
 800d628:	69b8      	ldr	r0, [r7, #24]
 800d62a:	f7ff fecb 	bl	800d3c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	78fa      	ldrb	r2, [r7, #3]
 800d632:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d636:	bf00      	nop
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b082      	sub	sp, #8
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00e      	beq.n	800d66a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d65e:	2300      	movs	r3, #0
 800d660:	2200      	movs	r2, #0
 800d662:	2100      	movs	r1, #0
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 f90b 	bl	800d880 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d66a:	bf00      	nop
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d672:	b580      	push	{r7, lr}
 800d674:	b086      	sub	sp, #24
 800d676:	af00      	add	r7, sp, #0
 800d678:	4603      	mov	r3, r0
 800d67a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d67c:	2301      	movs	r3, #1
 800d67e:	617b      	str	r3, [r7, #20]
 800d680:	2300      	movs	r3, #0
 800d682:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d684:	79fb      	ldrb	r3, [r7, #7]
 800d686:	461a      	mov	r2, r3
 800d688:	6939      	ldr	r1, [r7, #16]
 800d68a:	6978      	ldr	r0, [r7, #20]
 800d68c:	f7ff ff7a 	bl	800d584 <xQueueGenericCreate>
 800d690:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f7ff ffd3 	bl	800d63e <prvInitialiseMutex>

		return xNewQueue;
 800d698:	68fb      	ldr	r3, [r7, #12]
	}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3718      	adds	r7, #24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b088      	sub	sp, #32
 800d6a6:	af02      	add	r7, sp, #8
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	6039      	str	r1, [r7, #0]
 800d6ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	617b      	str	r3, [r7, #20]
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d6b6:	79fb      	ldrb	r3, [r7, #7]
 800d6b8:	9300      	str	r3, [sp, #0]
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	6939      	ldr	r1, [r7, #16]
 800d6c0:	6978      	ldr	r0, [r7, #20]
 800d6c2:	f7ff fee7 	bl	800d494 <xQueueGenericCreateStatic>
 800d6c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f7ff ffb8 	bl	800d63e <prvInitialiseMutex>

		return xNewQueue;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
	}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3718      	adds	r7, #24
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d6d8:	b590      	push	{r4, r7, lr}
 800d6da:	b087      	sub	sp, #28
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10a      	bne.n	800d700 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	60fb      	str	r3, [r7, #12]
}
 800d6fc:	bf00      	nop
 800d6fe:	e7fe      	b.n	800d6fe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	689c      	ldr	r4, [r3, #8]
 800d704:	f001 fd7c 	bl	800f200 <xTaskGetCurrentTaskHandle>
 800d708:	4603      	mov	r3, r0
 800d70a:	429c      	cmp	r4, r3
 800d70c:	d111      	bne.n	800d732 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	1e5a      	subs	r2, r3, #1
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d105      	bne.n	800d72c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d720:	2300      	movs	r3, #0
 800d722:	2200      	movs	r2, #0
 800d724:	2100      	movs	r1, #0
 800d726:	6938      	ldr	r0, [r7, #16]
 800d728:	f000 f8aa 	bl	800d880 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d72c:	2301      	movs	r3, #1
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	e001      	b.n	800d736 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d732:	2300      	movs	r3, #0
 800d734:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d736:	697b      	ldr	r3, [r7, #20]
	}
 800d738:	4618      	mov	r0, r3
 800d73a:	371c      	adds	r7, #28
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd90      	pop	{r4, r7, pc}

0800d740 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d740:	b590      	push	{r4, r7, lr}
 800d742:	b087      	sub	sp, #28
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10a      	bne.n	800d76a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	60fb      	str	r3, [r7, #12]
}
 800d766:	bf00      	nop
 800d768:	e7fe      	b.n	800d768 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	689c      	ldr	r4, [r3, #8]
 800d76e:	f001 fd47 	bl	800f200 <xTaskGetCurrentTaskHandle>
 800d772:	4603      	mov	r3, r0
 800d774:	429c      	cmp	r4, r3
 800d776:	d107      	bne.n	800d788 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	1c5a      	adds	r2, r3, #1
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d782:	2301      	movs	r3, #1
 800d784:	617b      	str	r3, [r7, #20]
 800d786:	e00c      	b.n	800d7a2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d788:	6839      	ldr	r1, [r7, #0]
 800d78a:	6938      	ldr	r0, [r7, #16]
 800d78c:	f000 fb7e 	bl	800de8c <xQueueSemaphoreTake>
 800d790:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d004      	beq.n	800d7a2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	1c5a      	adds	r2, r3, #1
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d7a2:	697b      	ldr	r3, [r7, #20]
	}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	371c      	adds	r7, #28
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd90      	pop	{r4, r7, pc}

0800d7ac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08a      	sub	sp, #40	; 0x28
 800d7b0:	af02      	add	r7, sp, #8
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10a      	bne.n	800d7d4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	61bb      	str	r3, [r7, #24]
}
 800d7d0:	bf00      	nop
 800d7d2:	e7fe      	b.n	800d7d2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d7d4:	68ba      	ldr	r2, [r7, #8]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d90a      	bls.n	800d7f2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e0:	f383 8811 	msr	BASEPRI, r3
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	617b      	str	r3, [r7, #20]
}
 800d7ee:	bf00      	nop
 800d7f0:	e7fe      	b.n	800d7f0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	68f8      	ldr	r0, [r7, #12]
 800d7fe:	f7ff fe49 	bl	800d494 <xQueueGenericCreateStatic>
 800d802:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d002      	beq.n	800d810 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d810:	69fb      	ldr	r3, [r7, #28]
	}
 800d812:	4618      	mov	r0, r3
 800d814:	3720      	adds	r7, #32
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b086      	sub	sp, #24
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d10a      	bne.n	800d840 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82e:	f383 8811 	msr	BASEPRI, r3
 800d832:	f3bf 8f6f 	isb	sy
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	613b      	str	r3, [r7, #16]
}
 800d83c:	bf00      	nop
 800d83e:	e7fe      	b.n	800d83e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d840:	683a      	ldr	r2, [r7, #0]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	429a      	cmp	r2, r3
 800d846:	d90a      	bls.n	800d85e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	60fb      	str	r3, [r7, #12]
}
 800d85a:	bf00      	nop
 800d85c:	e7fe      	b.n	800d85c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d85e:	2202      	movs	r2, #2
 800d860:	2100      	movs	r1, #0
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7ff fe8e 	bl	800d584 <xQueueGenericCreate>
 800d868:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d876:	697b      	ldr	r3, [r7, #20]
	}
 800d878:	4618      	mov	r0, r3
 800d87a:	3718      	adds	r7, #24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b08e      	sub	sp, #56	; 0x38
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d88e:	2300      	movs	r3, #0
 800d890:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10a      	bne.n	800d8b2 <xQueueGenericSend+0x32>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d8ae:	bf00      	nop
 800d8b0:	e7fe      	b.n	800d8b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d103      	bne.n	800d8c0 <xQueueGenericSend+0x40>
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d101      	bne.n	800d8c4 <xQueueGenericSend+0x44>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e000      	b.n	800d8c6 <xQueueGenericSend+0x46>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d10a      	bne.n	800d8e0 <xQueueGenericSend+0x60>
	__asm volatile
 800d8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ce:	f383 8811 	msr	BASEPRI, r3
 800d8d2:	f3bf 8f6f 	isb	sy
 800d8d6:	f3bf 8f4f 	dsb	sy
 800d8da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d8dc:	bf00      	nop
 800d8de:	e7fe      	b.n	800d8de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	2b02      	cmp	r3, #2
 800d8e4:	d103      	bne.n	800d8ee <xQueueGenericSend+0x6e>
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d101      	bne.n	800d8f2 <xQueueGenericSend+0x72>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e000      	b.n	800d8f4 <xQueueGenericSend+0x74>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10a      	bne.n	800d90e <xQueueGenericSend+0x8e>
	__asm volatile
 800d8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fc:	f383 8811 	msr	BASEPRI, r3
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	623b      	str	r3, [r7, #32]
}
 800d90a:	bf00      	nop
 800d90c:	e7fe      	b.n	800d90c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d90e:	f001 fc87 	bl	800f220 <xTaskGetSchedulerState>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d102      	bne.n	800d91e <xQueueGenericSend+0x9e>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d101      	bne.n	800d922 <xQueueGenericSend+0xa2>
 800d91e:	2301      	movs	r3, #1
 800d920:	e000      	b.n	800d924 <xQueueGenericSend+0xa4>
 800d922:	2300      	movs	r3, #0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10a      	bne.n	800d93e <xQueueGenericSend+0xbe>
	__asm volatile
 800d928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92c:	f383 8811 	msr	BASEPRI, r3
 800d930:	f3bf 8f6f 	isb	sy
 800d934:	f3bf 8f4f 	dsb	sy
 800d938:	61fb      	str	r3, [r7, #28]
}
 800d93a:	bf00      	nop
 800d93c:	e7fe      	b.n	800d93c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d93e:	f002 fac9 	bl	800fed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d302      	bcc.n	800d954 <xQueueGenericSend+0xd4>
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	2b02      	cmp	r3, #2
 800d952:	d129      	bne.n	800d9a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d954:	683a      	ldr	r2, [r7, #0]
 800d956:	68b9      	ldr	r1, [r7, #8]
 800d958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d95a:	f000 fc5e 	bl	800e21a <prvCopyDataToQueue>
 800d95e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d964:	2b00      	cmp	r3, #0
 800d966:	d010      	beq.n	800d98a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96a:	3324      	adds	r3, #36	; 0x24
 800d96c:	4618      	mov	r0, r3
 800d96e:	f001 fa85 	bl	800ee7c <xTaskRemoveFromEventList>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d013      	beq.n	800d9a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d978:	4b3f      	ldr	r3, [pc, #252]	; (800da78 <xQueueGenericSend+0x1f8>)
 800d97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d97e:	601a      	str	r2, [r3, #0]
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	e00a      	b.n	800d9a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d007      	beq.n	800d9a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d990:	4b39      	ldr	r3, [pc, #228]	; (800da78 <xQueueGenericSend+0x1f8>)
 800d992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d996:	601a      	str	r2, [r3, #0]
 800d998:	f3bf 8f4f 	dsb	sy
 800d99c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d9a0:	f002 fac8 	bl	800ff34 <vPortExitCritical>
				return pdPASS;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e063      	b.n	800da70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d103      	bne.n	800d9b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9ae:	f002 fac1 	bl	800ff34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	e05c      	b.n	800da70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d106      	bne.n	800d9ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9bc:	f107 0314 	add.w	r3, r7, #20
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f001 fabf 	bl	800ef44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9ca:	f002 fab3 	bl	800ff34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9ce:	f001 f819 	bl	800ea04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9d2:	f002 fa7f 	bl	800fed4 <vPortEnterCritical>
 800d9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9dc:	b25b      	sxtb	r3, r3
 800d9de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9e2:	d103      	bne.n	800d9ec <xQueueGenericSend+0x16c>
 800d9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9f2:	b25b      	sxtb	r3, r3
 800d9f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9f8:	d103      	bne.n	800da02 <xQueueGenericSend+0x182>
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da02:	f002 fa97 	bl	800ff34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da06:	1d3a      	adds	r2, r7, #4
 800da08:	f107 0314 	add.w	r3, r7, #20
 800da0c:	4611      	mov	r1, r2
 800da0e:	4618      	mov	r0, r3
 800da10:	f001 faae 	bl	800ef70 <xTaskCheckForTimeOut>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d124      	bne.n	800da64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da1c:	f000 fcf5 	bl	800e40a <prvIsQueueFull>
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	d018      	beq.n	800da58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da28:	3310      	adds	r3, #16
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	4611      	mov	r1, r2
 800da2e:	4618      	mov	r0, r3
 800da30:	f001 f9d4 	bl	800eddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da36:	f000 fc80 	bl	800e33a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da3a:	f000 fff1 	bl	800ea20 <xTaskResumeAll>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	f47f af7c 	bne.w	800d93e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800da46:	4b0c      	ldr	r3, [pc, #48]	; (800da78 <xQueueGenericSend+0x1f8>)
 800da48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	f3bf 8f6f 	isb	sy
 800da56:	e772      	b.n	800d93e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da5a:	f000 fc6e 	bl	800e33a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da5e:	f000 ffdf 	bl	800ea20 <xTaskResumeAll>
 800da62:	e76c      	b.n	800d93e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da66:	f000 fc68 	bl	800e33a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da6a:	f000 ffd9 	bl	800ea20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da70:	4618      	mov	r0, r3
 800da72:	3738      	adds	r7, #56	; 0x38
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}
 800da78:	e000ed04 	.word	0xe000ed04

0800da7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b090      	sub	sp, #64	; 0x40
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
 800da88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800da8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da90:	2b00      	cmp	r3, #0
 800da92:	d10a      	bne.n	800daaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800da94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da98:	f383 8811 	msr	BASEPRI, r3
 800da9c:	f3bf 8f6f 	isb	sy
 800daa0:	f3bf 8f4f 	dsb	sy
 800daa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800daa6:	bf00      	nop
 800daa8:	e7fe      	b.n	800daa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d103      	bne.n	800dab8 <xQueueGenericSendFromISR+0x3c>
 800dab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d101      	bne.n	800dabc <xQueueGenericSendFromISR+0x40>
 800dab8:	2301      	movs	r3, #1
 800daba:	e000      	b.n	800dabe <xQueueGenericSendFromISR+0x42>
 800dabc:	2300      	movs	r3, #0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d10a      	bne.n	800dad8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac6:	f383 8811 	msr	BASEPRI, r3
 800daca:	f3bf 8f6f 	isb	sy
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dad4:	bf00      	nop
 800dad6:	e7fe      	b.n	800dad6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d103      	bne.n	800dae6 <xQueueGenericSendFromISR+0x6a>
 800dade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d101      	bne.n	800daea <xQueueGenericSendFromISR+0x6e>
 800dae6:	2301      	movs	r3, #1
 800dae8:	e000      	b.n	800daec <xQueueGenericSendFromISR+0x70>
 800daea:	2300      	movs	r3, #0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d10a      	bne.n	800db06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800daf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf4:	f383 8811 	msr	BASEPRI, r3
 800daf8:	f3bf 8f6f 	isb	sy
 800dafc:	f3bf 8f4f 	dsb	sy
 800db00:	623b      	str	r3, [r7, #32]
}
 800db02:	bf00      	nop
 800db04:	e7fe      	b.n	800db04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db06:	f002 fac7 	bl	8010098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db0a:	f3ef 8211 	mrs	r2, BASEPRI
 800db0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	61fa      	str	r2, [r7, #28]
 800db20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800db22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db2e:	429a      	cmp	r2, r3
 800db30:	d302      	bcc.n	800db38 <xQueueGenericSendFromISR+0xbc>
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	2b02      	cmp	r3, #2
 800db36:	d12f      	bne.n	800db98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db48:	683a      	ldr	r2, [r7, #0]
 800db4a:	68b9      	ldr	r1, [r7, #8]
 800db4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db4e:	f000 fb64 	bl	800e21a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800db56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db5a:	d112      	bne.n	800db82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db60:	2b00      	cmp	r3, #0
 800db62:	d016      	beq.n	800db92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db66:	3324      	adds	r3, #36	; 0x24
 800db68:	4618      	mov	r0, r3
 800db6a:	f001 f987 	bl	800ee7c <xTaskRemoveFromEventList>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00e      	beq.n	800db92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00b      	beq.n	800db92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2201      	movs	r2, #1
 800db7e:	601a      	str	r2, [r3, #0]
 800db80:	e007      	b.n	800db92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db86:	3301      	adds	r3, #1
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	b25a      	sxtb	r2, r3
 800db8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800db92:	2301      	movs	r3, #1
 800db94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800db96:	e001      	b.n	800db9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db98:	2300      	movs	r3, #0
 800db9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dba6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3740      	adds	r7, #64	; 0x40
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b08e      	sub	sp, #56	; 0x38
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
 800dbba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d10a      	bne.n	800dbdc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800dbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbca:	f383 8811 	msr	BASEPRI, r3
 800dbce:	f3bf 8f6f 	isb	sy
 800dbd2:	f3bf 8f4f 	dsb	sy
 800dbd6:	623b      	str	r3, [r7, #32]
}
 800dbd8:	bf00      	nop
 800dbda:	e7fe      	b.n	800dbda <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d00a      	beq.n	800dbfa <xQueueGiveFromISR+0x48>
	__asm volatile
 800dbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe8:	f383 8811 	msr	BASEPRI, r3
 800dbec:	f3bf 8f6f 	isb	sy
 800dbf0:	f3bf 8f4f 	dsb	sy
 800dbf4:	61fb      	str	r3, [r7, #28]
}
 800dbf6:	bf00      	nop
 800dbf8:	e7fe      	b.n	800dbf8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d103      	bne.n	800dc0a <xQueueGiveFromISR+0x58>
 800dc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc04:	689b      	ldr	r3, [r3, #8]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d101      	bne.n	800dc0e <xQueueGiveFromISR+0x5c>
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	e000      	b.n	800dc10 <xQueueGiveFromISR+0x5e>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10a      	bne.n	800dc2a <xQueueGiveFromISR+0x78>
	__asm volatile
 800dc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc18:	f383 8811 	msr	BASEPRI, r3
 800dc1c:	f3bf 8f6f 	isb	sy
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	61bb      	str	r3, [r7, #24]
}
 800dc26:	bf00      	nop
 800dc28:	e7fe      	b.n	800dc28 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc2a:	f002 fa35 	bl	8010098 <vPortValidateInterruptPriority>
	__asm volatile
 800dc2e:	f3ef 8211 	mrs	r2, BASEPRI
 800dc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	617a      	str	r2, [r7, #20]
 800dc44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dc46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d22b      	bcs.n	800dcb2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc66:	1c5a      	adds	r2, r3, #1
 800dc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dc6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dc70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc74:	d112      	bne.n	800dc9c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d016      	beq.n	800dcac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc80:	3324      	adds	r3, #36	; 0x24
 800dc82:	4618      	mov	r0, r3
 800dc84:	f001 f8fa 	bl	800ee7c <xTaskRemoveFromEventList>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00e      	beq.n	800dcac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00b      	beq.n	800dcac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	2201      	movs	r2, #1
 800dc98:	601a      	str	r2, [r3, #0]
 800dc9a:	e007      	b.n	800dcac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dca0:	3301      	adds	r3, #1
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	b25a      	sxtb	r2, r3
 800dca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dcac:	2301      	movs	r3, #1
 800dcae:	637b      	str	r3, [r7, #52]	; 0x34
 800dcb0:	e001      	b.n	800dcb6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	637b      	str	r3, [r7, #52]	; 0x34
 800dcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f383 8811 	msr	BASEPRI, r3
}
 800dcc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3738      	adds	r7, #56	; 0x38
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b08c      	sub	sp, #48	; 0x30
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d10a      	bne.n	800dcfc <xQueueReceive+0x30>
	__asm volatile
 800dce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcea:	f383 8811 	msr	BASEPRI, r3
 800dcee:	f3bf 8f6f 	isb	sy
 800dcf2:	f3bf 8f4f 	dsb	sy
 800dcf6:	623b      	str	r3, [r7, #32]
}
 800dcf8:	bf00      	nop
 800dcfa:	e7fe      	b.n	800dcfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d103      	bne.n	800dd0a <xQueueReceive+0x3e>
 800dd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d101      	bne.n	800dd0e <xQueueReceive+0x42>
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e000      	b.n	800dd10 <xQueueReceive+0x44>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d10a      	bne.n	800dd2a <xQueueReceive+0x5e>
	__asm volatile
 800dd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	61fb      	str	r3, [r7, #28]
}
 800dd26:	bf00      	nop
 800dd28:	e7fe      	b.n	800dd28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd2a:	f001 fa79 	bl	800f220 <xTaskGetSchedulerState>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d102      	bne.n	800dd3a <xQueueReceive+0x6e>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d101      	bne.n	800dd3e <xQueueReceive+0x72>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e000      	b.n	800dd40 <xQueueReceive+0x74>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d10a      	bne.n	800dd5a <xQueueReceive+0x8e>
	__asm volatile
 800dd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd48:	f383 8811 	msr	BASEPRI, r3
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	f3bf 8f4f 	dsb	sy
 800dd54:	61bb      	str	r3, [r7, #24]
}
 800dd56:	bf00      	nop
 800dd58:	e7fe      	b.n	800dd58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd5a:	f002 f8bb 	bl	800fed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d01f      	beq.n	800ddaa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd6a:	68b9      	ldr	r1, [r7, #8]
 800dd6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd6e:	f000 fabe 	bl	800e2ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd74:	1e5a      	subs	r2, r3, #1
 800dd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7c:	691b      	ldr	r3, [r3, #16]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00f      	beq.n	800dda2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd84:	3310      	adds	r3, #16
 800dd86:	4618      	mov	r0, r3
 800dd88:	f001 f878 	bl	800ee7c <xTaskRemoveFromEventList>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d007      	beq.n	800dda2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd92:	4b3d      	ldr	r3, [pc, #244]	; (800de88 <xQueueReceive+0x1bc>)
 800dd94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd98:	601a      	str	r2, [r3, #0]
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dda2:	f002 f8c7 	bl	800ff34 <vPortExitCritical>
				return pdPASS;
 800dda6:	2301      	movs	r3, #1
 800dda8:	e069      	b.n	800de7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d103      	bne.n	800ddb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ddb0:	f002 f8c0 	bl	800ff34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	e062      	b.n	800de7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d106      	bne.n	800ddcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddbe:	f107 0310 	add.w	r3, r7, #16
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f001 f8be 	bl	800ef44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ddcc:	f002 f8b2 	bl	800ff34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ddd0:	f000 fe18 	bl	800ea04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddd4:	f002 f87e 	bl	800fed4 <vPortEnterCritical>
 800ddd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddde:	b25b      	sxtb	r3, r3
 800dde0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dde4:	d103      	bne.n	800ddee <xQueueReceive+0x122>
 800dde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddf4:	b25b      	sxtb	r3, r3
 800ddf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddfa:	d103      	bne.n	800de04 <xQueueReceive+0x138>
 800ddfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de04:	f002 f896 	bl	800ff34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de08:	1d3a      	adds	r2, r7, #4
 800de0a:	f107 0310 	add.w	r3, r7, #16
 800de0e:	4611      	mov	r1, r2
 800de10:	4618      	mov	r0, r3
 800de12:	f001 f8ad 	bl	800ef70 <xTaskCheckForTimeOut>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d123      	bne.n	800de64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de1e:	f000 fade 	bl	800e3de <prvIsQueueEmpty>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d017      	beq.n	800de58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	3324      	adds	r3, #36	; 0x24
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	4611      	mov	r1, r2
 800de30:	4618      	mov	r0, r3
 800de32:	f000 ffd3 	bl	800eddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de38:	f000 fa7f 	bl	800e33a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de3c:	f000 fdf0 	bl	800ea20 <xTaskResumeAll>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d189      	bne.n	800dd5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800de46:	4b10      	ldr	r3, [pc, #64]	; (800de88 <xQueueReceive+0x1bc>)
 800de48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de4c:	601a      	str	r2, [r3, #0]
 800de4e:	f3bf 8f4f 	dsb	sy
 800de52:	f3bf 8f6f 	isb	sy
 800de56:	e780      	b.n	800dd5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800de58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de5a:	f000 fa6e 	bl	800e33a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de5e:	f000 fddf 	bl	800ea20 <xTaskResumeAll>
 800de62:	e77a      	b.n	800dd5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800de64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de66:	f000 fa68 	bl	800e33a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de6a:	f000 fdd9 	bl	800ea20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de70:	f000 fab5 	bl	800e3de <prvIsQueueEmpty>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	f43f af6f 	beq.w	800dd5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3730      	adds	r7, #48	; 0x30
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	e000ed04 	.word	0xe000ed04

0800de8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b08e      	sub	sp, #56	; 0x38
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800de96:	2300      	movs	r3, #0
 800de98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800de9e:	2300      	movs	r3, #0
 800dea0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d10a      	bne.n	800debe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800dea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deac:	f383 8811 	msr	BASEPRI, r3
 800deb0:	f3bf 8f6f 	isb	sy
 800deb4:	f3bf 8f4f 	dsb	sy
 800deb8:	623b      	str	r3, [r7, #32]
}
 800deba:	bf00      	nop
 800debc:	e7fe      	b.n	800debc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00a      	beq.n	800dedc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800dec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deca:	f383 8811 	msr	BASEPRI, r3
 800dece:	f3bf 8f6f 	isb	sy
 800ded2:	f3bf 8f4f 	dsb	sy
 800ded6:	61fb      	str	r3, [r7, #28]
}
 800ded8:	bf00      	nop
 800deda:	e7fe      	b.n	800deda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dedc:	f001 f9a0 	bl	800f220 <xTaskGetSchedulerState>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d102      	bne.n	800deec <xQueueSemaphoreTake+0x60>
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d101      	bne.n	800def0 <xQueueSemaphoreTake+0x64>
 800deec:	2301      	movs	r3, #1
 800deee:	e000      	b.n	800def2 <xQueueSemaphoreTake+0x66>
 800def0:	2300      	movs	r3, #0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d10a      	bne.n	800df0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	61bb      	str	r3, [r7, #24]
}
 800df08:	bf00      	nop
 800df0a:	e7fe      	b.n	800df0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df0c:	f001 ffe2 	bl	800fed4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800df10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800df16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d024      	beq.n	800df66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	1e5a      	subs	r2, r3, #1
 800df20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d104      	bne.n	800df36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800df2c:	f001 faee 	bl	800f50c <pvTaskIncrementMutexHeldCount>
 800df30:	4602      	mov	r2, r0
 800df32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df38:	691b      	ldr	r3, [r3, #16]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d00f      	beq.n	800df5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df40:	3310      	adds	r3, #16
 800df42:	4618      	mov	r0, r3
 800df44:	f000 ff9a 	bl	800ee7c <xTaskRemoveFromEventList>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d007      	beq.n	800df5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800df4e:	4b54      	ldr	r3, [pc, #336]	; (800e0a0 <xQueueSemaphoreTake+0x214>)
 800df50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800df5e:	f001 ffe9 	bl	800ff34 <vPortExitCritical>
				return pdPASS;
 800df62:	2301      	movs	r3, #1
 800df64:	e097      	b.n	800e096 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d111      	bne.n	800df90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800df6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00a      	beq.n	800df88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800df72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	617b      	str	r3, [r7, #20]
}
 800df84:	bf00      	nop
 800df86:	e7fe      	b.n	800df86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800df88:	f001 ffd4 	bl	800ff34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800df8c:	2300      	movs	r3, #0
 800df8e:	e082      	b.n	800e096 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df92:	2b00      	cmp	r3, #0
 800df94:	d106      	bne.n	800dfa4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df96:	f107 030c 	add.w	r3, r7, #12
 800df9a:	4618      	mov	r0, r3
 800df9c:	f000 ffd2 	bl	800ef44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dfa4:	f001 ffc6 	bl	800ff34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dfa8:	f000 fd2c 	bl	800ea04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfac:	f001 ff92 	bl	800fed4 <vPortEnterCritical>
 800dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfb6:	b25b      	sxtb	r3, r3
 800dfb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfbc:	d103      	bne.n	800dfc6 <xQueueSemaphoreTake+0x13a>
 800dfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfcc:	b25b      	sxtb	r3, r3
 800dfce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfd2:	d103      	bne.n	800dfdc <xQueueSemaphoreTake+0x150>
 800dfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfdc:	f001 ffaa 	bl	800ff34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfe0:	463a      	mov	r2, r7
 800dfe2:	f107 030c 	add.w	r3, r7, #12
 800dfe6:	4611      	mov	r1, r2
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f000 ffc1 	bl	800ef70 <xTaskCheckForTimeOut>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d132      	bne.n	800e05a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dff6:	f000 f9f2 	bl	800e3de <prvIsQueueEmpty>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d026      	beq.n	800e04e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d109      	bne.n	800e01c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e008:	f001 ff64 	bl	800fed4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	4618      	mov	r0, r3
 800e012:	f001 f923 	bl	800f25c <xTaskPriorityInherit>
 800e016:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e018:	f001 ff8c 	bl	800ff34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01e:	3324      	adds	r3, #36	; 0x24
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	4611      	mov	r1, r2
 800e024:	4618      	mov	r0, r3
 800e026:	f000 fed9 	bl	800eddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e02a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e02c:	f000 f985 	bl	800e33a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e030:	f000 fcf6 	bl	800ea20 <xTaskResumeAll>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	f47f af68 	bne.w	800df0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e03c:	4b18      	ldr	r3, [pc, #96]	; (800e0a0 <xQueueSemaphoreTake+0x214>)
 800e03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e042:	601a      	str	r2, [r3, #0]
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	e75e      	b.n	800df0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e04e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e050:	f000 f973 	bl	800e33a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e054:	f000 fce4 	bl	800ea20 <xTaskResumeAll>
 800e058:	e758      	b.n	800df0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e05a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e05c:	f000 f96d 	bl	800e33a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e060:	f000 fcde 	bl	800ea20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e066:	f000 f9ba 	bl	800e3de <prvIsQueueEmpty>
 800e06a:	4603      	mov	r3, r0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f43f af4d 	beq.w	800df0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00d      	beq.n	800e094 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e078:	f001 ff2c 	bl	800fed4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e07c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e07e:	f000 f8b4 	bl	800e1ea <prvGetDisinheritPriorityAfterTimeout>
 800e082:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e08a:	4618      	mov	r0, r3
 800e08c:	f001 f9bc 	bl	800f408 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e090:	f001 ff50 	bl	800ff34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e096:	4618      	mov	r0, r3
 800e098:	3738      	adds	r7, #56	; 0x38
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	e000ed04 	.word	0xe000ed04

0800e0a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b08e      	sub	sp, #56	; 0x38
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d10a      	bne.n	800e0d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0be:	f383 8811 	msr	BASEPRI, r3
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	623b      	str	r3, [r7, #32]
}
 800e0cc:	bf00      	nop
 800e0ce:	e7fe      	b.n	800e0ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d103      	bne.n	800e0de <xQueueReceiveFromISR+0x3a>
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d101      	bne.n	800e0e2 <xQueueReceiveFromISR+0x3e>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e000      	b.n	800e0e4 <xQueueReceiveFromISR+0x40>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10a      	bne.n	800e0fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ec:	f383 8811 	msr	BASEPRI, r3
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	61fb      	str	r3, [r7, #28]
}
 800e0fa:	bf00      	nop
 800e0fc:	e7fe      	b.n	800e0fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0fe:	f001 ffcb 	bl	8010098 <vPortValidateInterruptPriority>
	__asm volatile
 800e102:	f3ef 8211 	mrs	r2, BASEPRI
 800e106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10a:	f383 8811 	msr	BASEPRI, r3
 800e10e:	f3bf 8f6f 	isb	sy
 800e112:	f3bf 8f4f 	dsb	sy
 800e116:	61ba      	str	r2, [r7, #24]
 800e118:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e11a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e11c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e122:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e126:	2b00      	cmp	r3, #0
 800e128:	d02f      	beq.n	800e18a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e134:	68b9      	ldr	r1, [r7, #8]
 800e136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e138:	f000 f8d9 	bl	800e2ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13e:	1e5a      	subs	r2, r3, #1
 800e140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e142:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e144:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e14c:	d112      	bne.n	800e174 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e150:	691b      	ldr	r3, [r3, #16]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d016      	beq.n	800e184 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e158:	3310      	adds	r3, #16
 800e15a:	4618      	mov	r0, r3
 800e15c:	f000 fe8e 	bl	800ee7c <xTaskRemoveFromEventList>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	d00e      	beq.n	800e184 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00b      	beq.n	800e184 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	601a      	str	r2, [r3, #0]
 800e172:	e007      	b.n	800e184 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e178:	3301      	adds	r3, #1
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	b25a      	sxtb	r2, r3
 800e17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e184:	2301      	movs	r3, #1
 800e186:	637b      	str	r3, [r7, #52]	; 0x34
 800e188:	e001      	b.n	800e18e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e18a:	2300      	movs	r3, #0
 800e18c:	637b      	str	r3, [r7, #52]	; 0x34
 800e18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e190:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	f383 8811 	msr	BASEPRI, r3
}
 800e198:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3738      	adds	r7, #56	; 0x38
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d10a      	bne.n	800e1cc <vQueueDelete+0x28>
	__asm volatile
 800e1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ba:	f383 8811 	msr	BASEPRI, r3
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	f3bf 8f4f 	dsb	sy
 800e1c6:	60bb      	str	r3, [r7, #8]
}
 800e1c8:	bf00      	nop
 800e1ca:	e7fe      	b.n	800e1ca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f000 f95f 	bl	800e490 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d102      	bne.n	800e1e2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f002 f867 	bl	80102b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e1e2:	bf00      	nop
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e1ea:	b480      	push	{r7}
 800e1ec:	b085      	sub	sp, #20
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d006      	beq.n	800e208 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e204:	60fb      	str	r3, [r7, #12]
 800e206:	e001      	b.n	800e20c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e208:	2300      	movs	r3, #0
 800e20a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e20c:	68fb      	ldr	r3, [r7, #12]
	}
 800e20e:	4618      	mov	r0, r3
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr

0800e21a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b086      	sub	sp, #24
 800e21e:	af00      	add	r7, sp, #0
 800e220:	60f8      	str	r0, [r7, #12]
 800e222:	60b9      	str	r1, [r7, #8]
 800e224:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e226:	2300      	movs	r3, #0
 800e228:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e22e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e234:	2b00      	cmp	r3, #0
 800e236:	d10d      	bne.n	800e254 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d14d      	bne.n	800e2dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	4618      	mov	r0, r3
 800e246:	f001 f871 	bl	800f32c <xTaskPriorityDisinherit>
 800e24a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2200      	movs	r2, #0
 800e250:	609a      	str	r2, [r3, #8]
 800e252:	e043      	b.n	800e2dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d119      	bne.n	800e28e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	6858      	ldr	r0, [r3, #4]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e262:	461a      	mov	r2, r3
 800e264:	68b9      	ldr	r1, [r7, #8]
 800e266:	f002 f967 	bl	8010538 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	685a      	ldr	r2, [r3, #4]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e272:	441a      	add	r2, r3
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	429a      	cmp	r2, r3
 800e282:	d32b      	bcc.n	800e2dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	605a      	str	r2, [r3, #4]
 800e28c:	e026      	b.n	800e2dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	68d8      	ldr	r0, [r3, #12]
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e296:	461a      	mov	r2, r3
 800e298:	68b9      	ldr	r1, [r7, #8]
 800e29a:	f002 f94d 	bl	8010538 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	68da      	ldr	r2, [r3, #12]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a6:	425b      	negs	r3, r3
 800e2a8:	441a      	add	r2, r3
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	68da      	ldr	r2, [r3, #12]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d207      	bcs.n	800e2ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	689a      	ldr	r2, [r3, #8]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2c2:	425b      	negs	r3, r3
 800e2c4:	441a      	add	r2, r3
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d105      	bne.n	800e2dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	1c5a      	adds	r2, r3, #1
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e2e4:	697b      	ldr	r3, [r7, #20]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3718      	adds	r7, #24
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b082      	sub	sp, #8
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d018      	beq.n	800e332 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	68da      	ldr	r2, [r3, #12]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e308:	441a      	add	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68da      	ldr	r2, [r3, #12]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	689b      	ldr	r3, [r3, #8]
 800e316:	429a      	cmp	r2, r3
 800e318:	d303      	bcc.n	800e322 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	68d9      	ldr	r1, [r3, #12]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e32a:	461a      	mov	r2, r3
 800e32c:	6838      	ldr	r0, [r7, #0]
 800e32e:	f002 f903 	bl	8010538 <memcpy>
	}
}
 800e332:	bf00      	nop
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b084      	sub	sp, #16
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e342:	f001 fdc7 	bl	800fed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e34c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e34e:	e011      	b.n	800e374 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e354:	2b00      	cmp	r3, #0
 800e356:	d012      	beq.n	800e37e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	3324      	adds	r3, #36	; 0x24
 800e35c:	4618      	mov	r0, r3
 800e35e:	f000 fd8d 	bl	800ee7c <xTaskRemoveFromEventList>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d001      	beq.n	800e36c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e368:	f000 fe64 	bl	800f034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
 800e36e:	3b01      	subs	r3, #1
 800e370:	b2db      	uxtb	r3, r3
 800e372:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	dce9      	bgt.n	800e350 <prvUnlockQueue+0x16>
 800e37c:	e000      	b.n	800e380 <prvUnlockQueue+0x46>
					break;
 800e37e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	22ff      	movs	r2, #255	; 0xff
 800e384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e388:	f001 fdd4 	bl	800ff34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e38c:	f001 fda2 	bl	800fed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e396:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e398:	e011      	b.n	800e3be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	691b      	ldr	r3, [r3, #16]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d012      	beq.n	800e3c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	3310      	adds	r3, #16
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f000 fd68 	bl	800ee7c <xTaskRemoveFromEventList>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e3b2:	f000 fe3f 	bl	800f034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e3b6:	7bbb      	ldrb	r3, [r7, #14]
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	dce9      	bgt.n	800e39a <prvUnlockQueue+0x60>
 800e3c6:	e000      	b.n	800e3ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e3c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	22ff      	movs	r2, #255	; 0xff
 800e3ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e3d2:	f001 fdaf 	bl	800ff34 <vPortExitCritical>
}
 800e3d6:	bf00      	nop
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b084      	sub	sp, #16
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e3e6:	f001 fd75 	bl	800fed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d102      	bne.n	800e3f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	60fb      	str	r3, [r7, #12]
 800e3f6:	e001      	b.n	800e3fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e3fc:	f001 fd9a 	bl	800ff34 <vPortExitCritical>

	return xReturn;
 800e400:	68fb      	ldr	r3, [r7, #12]
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b084      	sub	sp, #16
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e412:	f001 fd5f 	bl	800fed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e41e:	429a      	cmp	r2, r3
 800e420:	d102      	bne.n	800e428 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e422:	2301      	movs	r3, #1
 800e424:	60fb      	str	r3, [r7, #12]
 800e426:	e001      	b.n	800e42c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e428:	2300      	movs	r3, #0
 800e42a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e42c:	f001 fd82 	bl	800ff34 <vPortExitCritical>

	return xReturn;
 800e430:	68fb      	ldr	r3, [r7, #12]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
	...

0800e43c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e43c:	b480      	push	{r7}
 800e43e:	b085      	sub	sp, #20
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e446:	2300      	movs	r3, #0
 800e448:	60fb      	str	r3, [r7, #12]
 800e44a:	e014      	b.n	800e476 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e44c:	4a0f      	ldr	r2, [pc, #60]	; (800e48c <vQueueAddToRegistry+0x50>)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10b      	bne.n	800e470 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e458:	490c      	ldr	r1, [pc, #48]	; (800e48c <vQueueAddToRegistry+0x50>)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	683a      	ldr	r2, [r7, #0]
 800e45e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e462:	4a0a      	ldr	r2, [pc, #40]	; (800e48c <vQueueAddToRegistry+0x50>)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	00db      	lsls	r3, r3, #3
 800e468:	4413      	add	r3, r2
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e46e:	e006      	b.n	800e47e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	3301      	adds	r3, #1
 800e474:	60fb      	str	r3, [r7, #12]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2b07      	cmp	r3, #7
 800e47a:	d9e7      	bls.n	800e44c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e47c:	bf00      	nop
 800e47e:	bf00      	nop
 800e480:	3714      	adds	r7, #20
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop
 800e48c:	20001418 	.word	0x20001418

0800e490 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e490:	b480      	push	{r7}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e498:	2300      	movs	r3, #0
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	e016      	b.n	800e4cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e49e:	4a10      	ldr	r2, [pc, #64]	; (800e4e0 <vQueueUnregisterQueue+0x50>)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	00db      	lsls	r3, r3, #3
 800e4a4:	4413      	add	r3, r2
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d10b      	bne.n	800e4c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e4ae:	4a0c      	ldr	r2, [pc, #48]	; (800e4e0 <vQueueUnregisterQueue+0x50>)
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e4b8:	4a09      	ldr	r2, [pc, #36]	; (800e4e0 <vQueueUnregisterQueue+0x50>)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	00db      	lsls	r3, r3, #3
 800e4be:	4413      	add	r3, r2
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	605a      	str	r2, [r3, #4]
				break;
 800e4c4:	e006      	b.n	800e4d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	60fb      	str	r3, [r7, #12]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2b07      	cmp	r3, #7
 800e4d0:	d9e5      	bls.n	800e49e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e4d2:	bf00      	nop
 800e4d4:	bf00      	nop
 800e4d6:	3714      	adds	r7, #20
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr
 800e4e0:	20001418 	.word	0x20001418

0800e4e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b086      	sub	sp, #24
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e4f4:	f001 fcee 	bl	800fed4 <vPortEnterCritical>
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4fe:	b25b      	sxtb	r3, r3
 800e500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e504:	d103      	bne.n	800e50e <vQueueWaitForMessageRestricted+0x2a>
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	2200      	movs	r2, #0
 800e50a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e514:	b25b      	sxtb	r3, r3
 800e516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e51a:	d103      	bne.n	800e524 <vQueueWaitForMessageRestricted+0x40>
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	2200      	movs	r2, #0
 800e520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e524:	f001 fd06 	bl	800ff34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d106      	bne.n	800e53e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	3324      	adds	r3, #36	; 0x24
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	68b9      	ldr	r1, [r7, #8]
 800e538:	4618      	mov	r0, r3
 800e53a:	f000 fc73 	bl	800ee24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e53e:	6978      	ldr	r0, [r7, #20]
 800e540:	f7ff fefb 	bl	800e33a <prvUnlockQueue>
	}
 800e544:	bf00      	nop
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b08e      	sub	sp, #56	; 0x38
 800e550:	af04      	add	r7, sp, #16
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	607a      	str	r2, [r7, #4]
 800e558:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d10a      	bne.n	800e576 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	623b      	str	r3, [r7, #32]
}
 800e572:	bf00      	nop
 800e574:	e7fe      	b.n	800e574 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d10a      	bne.n	800e592 <xTaskCreateStatic+0x46>
	__asm volatile
 800e57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e580:	f383 8811 	msr	BASEPRI, r3
 800e584:	f3bf 8f6f 	isb	sy
 800e588:	f3bf 8f4f 	dsb	sy
 800e58c:	61fb      	str	r3, [r7, #28]
}
 800e58e:	bf00      	nop
 800e590:	e7fe      	b.n	800e590 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e592:	23bc      	movs	r3, #188	; 0xbc
 800e594:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	2bbc      	cmp	r3, #188	; 0xbc
 800e59a:	d00a      	beq.n	800e5b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	61bb      	str	r3, [r7, #24]
}
 800e5ae:	bf00      	nop
 800e5b0:	e7fe      	b.n	800e5b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e5b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d01e      	beq.n	800e5f8 <xTaskCreateStatic+0xac>
 800e5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d01b      	beq.n	800e5f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5cc:	2202      	movs	r2, #2
 800e5ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	9303      	str	r3, [sp, #12]
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d8:	9302      	str	r3, [sp, #8]
 800e5da:	f107 0314 	add.w	r3, r7, #20
 800e5de:	9301      	str	r3, [sp, #4]
 800e5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e2:	9300      	str	r3, [sp, #0]
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	68b9      	ldr	r1, [r7, #8]
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f000 f850 	bl	800e690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e5f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5f2:	f000 f8f3 	bl	800e7dc <prvAddNewTaskToReadyList>
 800e5f6:	e001      	b.n	800e5fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e5fc:	697b      	ldr	r3, [r7, #20]
	}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3728      	adds	r7, #40	; 0x28
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e606:	b580      	push	{r7, lr}
 800e608:	b08c      	sub	sp, #48	; 0x30
 800e60a:	af04      	add	r7, sp, #16
 800e60c:	60f8      	str	r0, [r7, #12]
 800e60e:	60b9      	str	r1, [r7, #8]
 800e610:	603b      	str	r3, [r7, #0]
 800e612:	4613      	mov	r3, r2
 800e614:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e616:	88fb      	ldrh	r3, [r7, #6]
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	4618      	mov	r0, r3
 800e61c:	f001 fd7c 	bl	8010118 <pvPortMalloc>
 800e620:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00e      	beq.n	800e646 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e628:	20bc      	movs	r0, #188	; 0xbc
 800e62a:	f001 fd75 	bl	8010118 <pvPortMalloc>
 800e62e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d003      	beq.n	800e63e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e636:	69fb      	ldr	r3, [r7, #28]
 800e638:	697a      	ldr	r2, [r7, #20]
 800e63a:	631a      	str	r2, [r3, #48]	; 0x30
 800e63c:	e005      	b.n	800e64a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e63e:	6978      	ldr	r0, [r7, #20]
 800e640:	f001 fe36 	bl	80102b0 <vPortFree>
 800e644:	e001      	b.n	800e64a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e646:	2300      	movs	r3, #0
 800e648:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d017      	beq.n	800e680 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e650:	69fb      	ldr	r3, [r7, #28]
 800e652:	2200      	movs	r2, #0
 800e654:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e658:	88fa      	ldrh	r2, [r7, #6]
 800e65a:	2300      	movs	r3, #0
 800e65c:	9303      	str	r3, [sp, #12]
 800e65e:	69fb      	ldr	r3, [r7, #28]
 800e660:	9302      	str	r3, [sp, #8]
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	9301      	str	r3, [sp, #4]
 800e666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	68b9      	ldr	r1, [r7, #8]
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f000 f80e 	bl	800e690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e674:	69f8      	ldr	r0, [r7, #28]
 800e676:	f000 f8b1 	bl	800e7dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e67a:	2301      	movs	r3, #1
 800e67c:	61bb      	str	r3, [r7, #24]
 800e67e:	e002      	b.n	800e686 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e684:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e686:	69bb      	ldr	r3, [r7, #24]
	}
 800e688:	4618      	mov	r0, r3
 800e68a:	3720      	adds	r7, #32
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b088      	sub	sp, #32
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	607a      	str	r2, [r7, #4]
 800e69c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	21a5      	movs	r1, #165	; 0xa5
 800e6aa:	f001 ff53 	bl	8010554 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	4413      	add	r3, r2
 800e6be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	f023 0307 	bic.w	r3, r3, #7
 800e6c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	f003 0307 	and.w	r3, r3, #7
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00a      	beq.n	800e6e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d6:	f383 8811 	msr	BASEPRI, r3
 800e6da:	f3bf 8f6f 	isb	sy
 800e6de:	f3bf 8f4f 	dsb	sy
 800e6e2:	617b      	str	r3, [r7, #20]
}
 800e6e4:	bf00      	nop
 800e6e6:	e7fe      	b.n	800e6e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d01f      	beq.n	800e72e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	61fb      	str	r3, [r7, #28]
 800e6f2:	e012      	b.n	800e71a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e6f4:	68ba      	ldr	r2, [r7, #8]
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	7819      	ldrb	r1, [r3, #0]
 800e6fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	4413      	add	r3, r2
 800e702:	3334      	adds	r3, #52	; 0x34
 800e704:	460a      	mov	r2, r1
 800e706:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e708:	68ba      	ldr	r2, [r7, #8]
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	4413      	add	r3, r2
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d006      	beq.n	800e722 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	3301      	adds	r3, #1
 800e718:	61fb      	str	r3, [r7, #28]
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	2b0f      	cmp	r3, #15
 800e71e:	d9e9      	bls.n	800e6f4 <prvInitialiseNewTask+0x64>
 800e720:	e000      	b.n	800e724 <prvInitialiseNewTask+0x94>
			{
				break;
 800e722:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e726:	2200      	movs	r2, #0
 800e728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e72c:	e003      	b.n	800e736 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e730:	2200      	movs	r2, #0
 800e732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e738:	2b37      	cmp	r3, #55	; 0x37
 800e73a:	d901      	bls.n	800e740 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e73c:	2337      	movs	r3, #55	; 0x37
 800e73e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e744:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e74a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74e:	2200      	movs	r2, #0
 800e750:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e754:	3304      	adds	r3, #4
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe fda0 	bl	800d29c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75e:	3318      	adds	r3, #24
 800e760:	4618      	mov	r0, r3
 800e762:	f7fe fd9b 	bl	800d29c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e76a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e774:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e77a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77e:	2200      	movs	r2, #0
 800e780:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e786:	2200      	movs	r2, #0
 800e788:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78e:	3354      	adds	r3, #84	; 0x54
 800e790:	2260      	movs	r2, #96	; 0x60
 800e792:	2100      	movs	r1, #0
 800e794:	4618      	mov	r0, r3
 800e796:	f001 fedd 	bl	8010554 <memset>
 800e79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79c:	4a0c      	ldr	r2, [pc, #48]	; (800e7d0 <prvInitialiseNewTask+0x140>)
 800e79e:	659a      	str	r2, [r3, #88]	; 0x58
 800e7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a2:	4a0c      	ldr	r2, [pc, #48]	; (800e7d4 <prvInitialiseNewTask+0x144>)
 800e7a4:	65da      	str	r2, [r3, #92]	; 0x5c
 800e7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a8:	4a0b      	ldr	r2, [pc, #44]	; (800e7d8 <prvInitialiseNewTask+0x148>)
 800e7aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e7ac:	683a      	ldr	r2, [r7, #0]
 800e7ae:	68f9      	ldr	r1, [r7, #12]
 800e7b0:	69b8      	ldr	r0, [r7, #24]
 800e7b2:	f001 fa61 	bl	800fc78 <pxPortInitialiseStack>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d002      	beq.n	800e7c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7c8:	bf00      	nop
 800e7ca:	3720      	adds	r7, #32
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	080108f0 	.word	0x080108f0
 800e7d4:	08010910 	.word	0x08010910
 800e7d8:	080108d0 	.word	0x080108d0

0800e7dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e7e4:	f001 fb76 	bl	800fed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e7e8:	4b2d      	ldr	r3, [pc, #180]	; (800e8a0 <prvAddNewTaskToReadyList+0xc4>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	4a2c      	ldr	r2, [pc, #176]	; (800e8a0 <prvAddNewTaskToReadyList+0xc4>)
 800e7f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e7f2:	4b2c      	ldr	r3, [pc, #176]	; (800e8a4 <prvAddNewTaskToReadyList+0xc8>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d109      	bne.n	800e80e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e7fa:	4a2a      	ldr	r2, [pc, #168]	; (800e8a4 <prvAddNewTaskToReadyList+0xc8>)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e800:	4b27      	ldr	r3, [pc, #156]	; (800e8a0 <prvAddNewTaskToReadyList+0xc4>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	2b01      	cmp	r3, #1
 800e806:	d110      	bne.n	800e82a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e808:	f000 fc38 	bl	800f07c <prvInitialiseTaskLists>
 800e80c:	e00d      	b.n	800e82a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e80e:	4b26      	ldr	r3, [pc, #152]	; (800e8a8 <prvAddNewTaskToReadyList+0xcc>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d109      	bne.n	800e82a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e816:	4b23      	ldr	r3, [pc, #140]	; (800e8a4 <prvAddNewTaskToReadyList+0xc8>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e820:	429a      	cmp	r2, r3
 800e822:	d802      	bhi.n	800e82a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e824:	4a1f      	ldr	r2, [pc, #124]	; (800e8a4 <prvAddNewTaskToReadyList+0xc8>)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e82a:	4b20      	ldr	r3, [pc, #128]	; (800e8ac <prvAddNewTaskToReadyList+0xd0>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	3301      	adds	r3, #1
 800e830:	4a1e      	ldr	r2, [pc, #120]	; (800e8ac <prvAddNewTaskToReadyList+0xd0>)
 800e832:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e834:	4b1d      	ldr	r3, [pc, #116]	; (800e8ac <prvAddNewTaskToReadyList+0xd0>)
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e840:	4b1b      	ldr	r3, [pc, #108]	; (800e8b0 <prvAddNewTaskToReadyList+0xd4>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	429a      	cmp	r2, r3
 800e846:	d903      	bls.n	800e850 <prvAddNewTaskToReadyList+0x74>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e84c:	4a18      	ldr	r2, [pc, #96]	; (800e8b0 <prvAddNewTaskToReadyList+0xd4>)
 800e84e:	6013      	str	r3, [r2, #0]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e854:	4613      	mov	r3, r2
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	4a15      	ldr	r2, [pc, #84]	; (800e8b4 <prvAddNewTaskToReadyList+0xd8>)
 800e85e:	441a      	add	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	3304      	adds	r3, #4
 800e864:	4619      	mov	r1, r3
 800e866:	4610      	mov	r0, r2
 800e868:	f7fe fd25 	bl	800d2b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e86c:	f001 fb62 	bl	800ff34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e870:	4b0d      	ldr	r3, [pc, #52]	; (800e8a8 <prvAddNewTaskToReadyList+0xcc>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d00e      	beq.n	800e896 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e878:	4b0a      	ldr	r3, [pc, #40]	; (800e8a4 <prvAddNewTaskToReadyList+0xc8>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e882:	429a      	cmp	r2, r3
 800e884:	d207      	bcs.n	800e896 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e886:	4b0c      	ldr	r3, [pc, #48]	; (800e8b8 <prvAddNewTaskToReadyList+0xdc>)
 800e888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e896:	bf00      	nop
 800e898:	3708      	adds	r7, #8
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	2000192c 	.word	0x2000192c
 800e8a4:	20001458 	.word	0x20001458
 800e8a8:	20001938 	.word	0x20001938
 800e8ac:	20001948 	.word	0x20001948
 800e8b0:	20001934 	.word	0x20001934
 800e8b4:	2000145c 	.word	0x2000145c
 800e8b8:	e000ed04 	.word	0xe000ed04

0800e8bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d017      	beq.n	800e8fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e8ce:	4b13      	ldr	r3, [pc, #76]	; (800e91c <vTaskDelay+0x60>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00a      	beq.n	800e8ec <vTaskDelay+0x30>
	__asm volatile
 800e8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8da:	f383 8811 	msr	BASEPRI, r3
 800e8de:	f3bf 8f6f 	isb	sy
 800e8e2:	f3bf 8f4f 	dsb	sy
 800e8e6:	60bb      	str	r3, [r7, #8]
}
 800e8e8:	bf00      	nop
 800e8ea:	e7fe      	b.n	800e8ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e8ec:	f000 f88a 	bl	800ea04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 fe1e 	bl	800f534 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e8f8:	f000 f892 	bl	800ea20 <xTaskResumeAll>
 800e8fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d107      	bne.n	800e914 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e904:	4b06      	ldr	r3, [pc, #24]	; (800e920 <vTaskDelay+0x64>)
 800e906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e914:	bf00      	nop
 800e916:	3710      	adds	r7, #16
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	20001954 	.word	0x20001954
 800e920:	e000ed04 	.word	0xe000ed04

0800e924 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b08a      	sub	sp, #40	; 0x28
 800e928:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e92a:	2300      	movs	r3, #0
 800e92c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e92e:	2300      	movs	r3, #0
 800e930:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e932:	463a      	mov	r2, r7
 800e934:	1d39      	adds	r1, r7, #4
 800e936:	f107 0308 	add.w	r3, r7, #8
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fe fc5a 	bl	800d1f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e940:	6839      	ldr	r1, [r7, #0]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	68ba      	ldr	r2, [r7, #8]
 800e946:	9202      	str	r2, [sp, #8]
 800e948:	9301      	str	r3, [sp, #4]
 800e94a:	2300      	movs	r3, #0
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	2300      	movs	r3, #0
 800e950:	460a      	mov	r2, r1
 800e952:	4924      	ldr	r1, [pc, #144]	; (800e9e4 <vTaskStartScheduler+0xc0>)
 800e954:	4824      	ldr	r0, [pc, #144]	; (800e9e8 <vTaskStartScheduler+0xc4>)
 800e956:	f7ff fdf9 	bl	800e54c <xTaskCreateStatic>
 800e95a:	4603      	mov	r3, r0
 800e95c:	4a23      	ldr	r2, [pc, #140]	; (800e9ec <vTaskStartScheduler+0xc8>)
 800e95e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e960:	4b22      	ldr	r3, [pc, #136]	; (800e9ec <vTaskStartScheduler+0xc8>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d002      	beq.n	800e96e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e968:	2301      	movs	r3, #1
 800e96a:	617b      	str	r3, [r7, #20]
 800e96c:	e001      	b.n	800e972 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e96e:	2300      	movs	r3, #0
 800e970:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	2b01      	cmp	r3, #1
 800e976:	d102      	bne.n	800e97e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e978:	f000 fe30 	bl	800f5dc <xTimerCreateTimerTask>
 800e97c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	2b01      	cmp	r3, #1
 800e982:	d11b      	bne.n	800e9bc <vTaskStartScheduler+0x98>
	__asm volatile
 800e984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e988:	f383 8811 	msr	BASEPRI, r3
 800e98c:	f3bf 8f6f 	isb	sy
 800e990:	f3bf 8f4f 	dsb	sy
 800e994:	613b      	str	r3, [r7, #16]
}
 800e996:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e998:	4b15      	ldr	r3, [pc, #84]	; (800e9f0 <vTaskStartScheduler+0xcc>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	3354      	adds	r3, #84	; 0x54
 800e99e:	4a15      	ldr	r2, [pc, #84]	; (800e9f4 <vTaskStartScheduler+0xd0>)
 800e9a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e9a2:	4b15      	ldr	r3, [pc, #84]	; (800e9f8 <vTaskStartScheduler+0xd4>)
 800e9a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e9aa:	4b14      	ldr	r3, [pc, #80]	; (800e9fc <vTaskStartScheduler+0xd8>)
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e9b0:	4b13      	ldr	r3, [pc, #76]	; (800ea00 <vTaskStartScheduler+0xdc>)
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e9b6:	f001 f9eb 	bl	800fd90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e9ba:	e00e      	b.n	800e9da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9c2:	d10a      	bne.n	800e9da <vTaskStartScheduler+0xb6>
	__asm volatile
 800e9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c8:	f383 8811 	msr	BASEPRI, r3
 800e9cc:	f3bf 8f6f 	isb	sy
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	60fb      	str	r3, [r7, #12]
}
 800e9d6:	bf00      	nop
 800e9d8:	e7fe      	b.n	800e9d8 <vTaskStartScheduler+0xb4>
}
 800e9da:	bf00      	nop
 800e9dc:	3718      	adds	r7, #24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	08010764 	.word	0x08010764
 800e9e8:	0800f04d 	.word	0x0800f04d
 800e9ec:	20001950 	.word	0x20001950
 800e9f0:	20001458 	.word	0x20001458
 800e9f4:	20000020 	.word	0x20000020
 800e9f8:	2000194c 	.word	0x2000194c
 800e9fc:	20001938 	.word	0x20001938
 800ea00:	20001930 	.word	0x20001930

0800ea04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ea04:	b480      	push	{r7}
 800ea06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ea08:	4b04      	ldr	r3, [pc, #16]	; (800ea1c <vTaskSuspendAll+0x18>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	4a03      	ldr	r2, [pc, #12]	; (800ea1c <vTaskSuspendAll+0x18>)
 800ea10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ea12:	bf00      	nop
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr
 800ea1c:	20001954 	.word	0x20001954

0800ea20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ea26:	2300      	movs	r3, #0
 800ea28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ea2e:	4b42      	ldr	r3, [pc, #264]	; (800eb38 <xTaskResumeAll+0x118>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d10a      	bne.n	800ea4c <xTaskResumeAll+0x2c>
	__asm volatile
 800ea36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3a:	f383 8811 	msr	BASEPRI, r3
 800ea3e:	f3bf 8f6f 	isb	sy
 800ea42:	f3bf 8f4f 	dsb	sy
 800ea46:	603b      	str	r3, [r7, #0]
}
 800ea48:	bf00      	nop
 800ea4a:	e7fe      	b.n	800ea4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ea4c:	f001 fa42 	bl	800fed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ea50:	4b39      	ldr	r3, [pc, #228]	; (800eb38 <xTaskResumeAll+0x118>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	4a38      	ldr	r2, [pc, #224]	; (800eb38 <xTaskResumeAll+0x118>)
 800ea58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea5a:	4b37      	ldr	r3, [pc, #220]	; (800eb38 <xTaskResumeAll+0x118>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d162      	bne.n	800eb28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ea62:	4b36      	ldr	r3, [pc, #216]	; (800eb3c <xTaskResumeAll+0x11c>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d05e      	beq.n	800eb28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea6a:	e02f      	b.n	800eacc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea6c:	4b34      	ldr	r3, [pc, #208]	; (800eb40 <xTaskResumeAll+0x120>)
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	3318      	adds	r3, #24
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fe fc79 	bl	800d370 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	3304      	adds	r3, #4
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7fe fc74 	bl	800d370 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea8c:	4b2d      	ldr	r3, [pc, #180]	; (800eb44 <xTaskResumeAll+0x124>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d903      	bls.n	800ea9c <xTaskResumeAll+0x7c>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea98:	4a2a      	ldr	r2, [pc, #168]	; (800eb44 <xTaskResumeAll+0x124>)
 800ea9a:	6013      	str	r3, [r2, #0]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	4413      	add	r3, r2
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	4a27      	ldr	r2, [pc, #156]	; (800eb48 <xTaskResumeAll+0x128>)
 800eaaa:	441a      	add	r2, r3
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	3304      	adds	r3, #4
 800eab0:	4619      	mov	r1, r3
 800eab2:	4610      	mov	r0, r2
 800eab4:	f7fe fbff 	bl	800d2b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eabc:	4b23      	ldr	r3, [pc, #140]	; (800eb4c <xTaskResumeAll+0x12c>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d302      	bcc.n	800eacc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800eac6:	4b22      	ldr	r3, [pc, #136]	; (800eb50 <xTaskResumeAll+0x130>)
 800eac8:	2201      	movs	r2, #1
 800eaca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eacc:	4b1c      	ldr	r3, [pc, #112]	; (800eb40 <xTaskResumeAll+0x120>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1cb      	bne.n	800ea6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eada:	f000 fb71 	bl	800f1c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eade:	4b1d      	ldr	r3, [pc, #116]	; (800eb54 <xTaskResumeAll+0x134>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d010      	beq.n	800eb0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eaea:	f000 f859 	bl	800eba0 <xTaskIncrementTick>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d002      	beq.n	800eafa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800eaf4:	4b16      	ldr	r3, [pc, #88]	; (800eb50 <xTaskResumeAll+0x130>)
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	3b01      	subs	r3, #1
 800eafe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1f1      	bne.n	800eaea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800eb06:	4b13      	ldr	r3, [pc, #76]	; (800eb54 <xTaskResumeAll+0x134>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eb0c:	4b10      	ldr	r3, [pc, #64]	; (800eb50 <xTaskResumeAll+0x130>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d009      	beq.n	800eb28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eb14:	2301      	movs	r3, #1
 800eb16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eb18:	4b0f      	ldr	r3, [pc, #60]	; (800eb58 <xTaskResumeAll+0x138>)
 800eb1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb1e:	601a      	str	r2, [r3, #0]
 800eb20:	f3bf 8f4f 	dsb	sy
 800eb24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb28:	f001 fa04 	bl	800ff34 <vPortExitCritical>

	return xAlreadyYielded;
 800eb2c:	68bb      	ldr	r3, [r7, #8]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	20001954 	.word	0x20001954
 800eb3c:	2000192c 	.word	0x2000192c
 800eb40:	200018ec 	.word	0x200018ec
 800eb44:	20001934 	.word	0x20001934
 800eb48:	2000145c 	.word	0x2000145c
 800eb4c:	20001458 	.word	0x20001458
 800eb50:	20001940 	.word	0x20001940
 800eb54:	2000193c 	.word	0x2000193c
 800eb58:	e000ed04 	.word	0xe000ed04

0800eb5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eb62:	4b05      	ldr	r3, [pc, #20]	; (800eb78 <xTaskGetTickCount+0x1c>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eb68:	687b      	ldr	r3, [r7, #4]
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	370c      	adds	r7, #12
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	20001930 	.word	0x20001930

0800eb7c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb82:	f001 fa89 	bl	8010098 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800eb86:	2300      	movs	r3, #0
 800eb88:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800eb8a:	4b04      	ldr	r3, [pc, #16]	; (800eb9c <xTaskGetTickCountFromISR+0x20>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eb90:	683b      	ldr	r3, [r7, #0]
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3708      	adds	r7, #8
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20001930 	.word	0x20001930

0800eba0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eba6:	2300      	movs	r3, #0
 800eba8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebaa:	4b4f      	ldr	r3, [pc, #316]	; (800ece8 <xTaskIncrementTick+0x148>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f040 808f 	bne.w	800ecd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ebb4:	4b4d      	ldr	r3, [pc, #308]	; (800ecec <xTaskIncrementTick+0x14c>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ebbc:	4a4b      	ldr	r2, [pc, #300]	; (800ecec <xTaskIncrementTick+0x14c>)
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d120      	bne.n	800ec0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ebc8:	4b49      	ldr	r3, [pc, #292]	; (800ecf0 <xTaskIncrementTick+0x150>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d00a      	beq.n	800ebe8 <xTaskIncrementTick+0x48>
	__asm volatile
 800ebd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd6:	f383 8811 	msr	BASEPRI, r3
 800ebda:	f3bf 8f6f 	isb	sy
 800ebde:	f3bf 8f4f 	dsb	sy
 800ebe2:	603b      	str	r3, [r7, #0]
}
 800ebe4:	bf00      	nop
 800ebe6:	e7fe      	b.n	800ebe6 <xTaskIncrementTick+0x46>
 800ebe8:	4b41      	ldr	r3, [pc, #260]	; (800ecf0 <xTaskIncrementTick+0x150>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	60fb      	str	r3, [r7, #12]
 800ebee:	4b41      	ldr	r3, [pc, #260]	; (800ecf4 <xTaskIncrementTick+0x154>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a3f      	ldr	r2, [pc, #252]	; (800ecf0 <xTaskIncrementTick+0x150>)
 800ebf4:	6013      	str	r3, [r2, #0]
 800ebf6:	4a3f      	ldr	r2, [pc, #252]	; (800ecf4 <xTaskIncrementTick+0x154>)
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	6013      	str	r3, [r2, #0]
 800ebfc:	4b3e      	ldr	r3, [pc, #248]	; (800ecf8 <xTaskIncrementTick+0x158>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	3301      	adds	r3, #1
 800ec02:	4a3d      	ldr	r2, [pc, #244]	; (800ecf8 <xTaskIncrementTick+0x158>)
 800ec04:	6013      	str	r3, [r2, #0]
 800ec06:	f000 fadb 	bl	800f1c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ec0a:	4b3c      	ldr	r3, [pc, #240]	; (800ecfc <xTaskIncrementTick+0x15c>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	693a      	ldr	r2, [r7, #16]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d349      	bcc.n	800eca8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec14:	4b36      	ldr	r3, [pc, #216]	; (800ecf0 <xTaskIncrementTick+0x150>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d104      	bne.n	800ec28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec1e:	4b37      	ldr	r3, [pc, #220]	; (800ecfc <xTaskIncrementTick+0x15c>)
 800ec20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec24:	601a      	str	r2, [r3, #0]
					break;
 800ec26:	e03f      	b.n	800eca8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec28:	4b31      	ldr	r3, [pc, #196]	; (800ecf0 <xTaskIncrementTick+0x150>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	68db      	ldr	r3, [r3, #12]
 800ec30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ec38:	693a      	ldr	r2, [r7, #16]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d203      	bcs.n	800ec48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ec40:	4a2e      	ldr	r2, [pc, #184]	; (800ecfc <xTaskIncrementTick+0x15c>)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ec46:	e02f      	b.n	800eca8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	3304      	adds	r3, #4
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7fe fb8f 	bl	800d370 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d004      	beq.n	800ec64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	3318      	adds	r3, #24
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fe fb86 	bl	800d370 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec68:	4b25      	ldr	r3, [pc, #148]	; (800ed00 <xTaskIncrementTick+0x160>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d903      	bls.n	800ec78 <xTaskIncrementTick+0xd8>
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec74:	4a22      	ldr	r2, [pc, #136]	; (800ed00 <xTaskIncrementTick+0x160>)
 800ec76:	6013      	str	r3, [r2, #0]
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	4413      	add	r3, r2
 800ec82:	009b      	lsls	r3, r3, #2
 800ec84:	4a1f      	ldr	r2, [pc, #124]	; (800ed04 <xTaskIncrementTick+0x164>)
 800ec86:	441a      	add	r2, r3
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	4610      	mov	r0, r2
 800ec90:	f7fe fb11 	bl	800d2b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec98:	4b1b      	ldr	r3, [pc, #108]	; (800ed08 <xTaskIncrementTick+0x168>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d3b8      	bcc.n	800ec14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eca2:	2301      	movs	r3, #1
 800eca4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eca6:	e7b5      	b.n	800ec14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eca8:	4b17      	ldr	r3, [pc, #92]	; (800ed08 <xTaskIncrementTick+0x168>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecae:	4915      	ldr	r1, [pc, #84]	; (800ed04 <xTaskIncrementTick+0x164>)
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4413      	add	r3, r2
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	440b      	add	r3, r1
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d901      	bls.n	800ecc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ecc4:	4b11      	ldr	r3, [pc, #68]	; (800ed0c <xTaskIncrementTick+0x16c>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d007      	beq.n	800ecdc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800eccc:	2301      	movs	r3, #1
 800ecce:	617b      	str	r3, [r7, #20]
 800ecd0:	e004      	b.n	800ecdc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ecd2:	4b0f      	ldr	r3, [pc, #60]	; (800ed10 <xTaskIncrementTick+0x170>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	4a0d      	ldr	r2, [pc, #52]	; (800ed10 <xTaskIncrementTick+0x170>)
 800ecda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ecdc:	697b      	ldr	r3, [r7, #20]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3718      	adds	r7, #24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	20001954 	.word	0x20001954
 800ecec:	20001930 	.word	0x20001930
 800ecf0:	200018e4 	.word	0x200018e4
 800ecf4:	200018e8 	.word	0x200018e8
 800ecf8:	20001944 	.word	0x20001944
 800ecfc:	2000194c 	.word	0x2000194c
 800ed00:	20001934 	.word	0x20001934
 800ed04:	2000145c 	.word	0x2000145c
 800ed08:	20001458 	.word	0x20001458
 800ed0c:	20001940 	.word	0x20001940
 800ed10:	2000193c 	.word	0x2000193c

0800ed14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ed14:	b480      	push	{r7}
 800ed16:	b085      	sub	sp, #20
 800ed18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ed1a:	4b2a      	ldr	r3, [pc, #168]	; (800edc4 <vTaskSwitchContext+0xb0>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d003      	beq.n	800ed2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ed22:	4b29      	ldr	r3, [pc, #164]	; (800edc8 <vTaskSwitchContext+0xb4>)
 800ed24:	2201      	movs	r2, #1
 800ed26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ed28:	e046      	b.n	800edb8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ed2a:	4b27      	ldr	r3, [pc, #156]	; (800edc8 <vTaskSwitchContext+0xb4>)
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed30:	4b26      	ldr	r3, [pc, #152]	; (800edcc <vTaskSwitchContext+0xb8>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	60fb      	str	r3, [r7, #12]
 800ed36:	e010      	b.n	800ed5a <vTaskSwitchContext+0x46>
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d10a      	bne.n	800ed54 <vTaskSwitchContext+0x40>
	__asm volatile
 800ed3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed42:	f383 8811 	msr	BASEPRI, r3
 800ed46:	f3bf 8f6f 	isb	sy
 800ed4a:	f3bf 8f4f 	dsb	sy
 800ed4e:	607b      	str	r3, [r7, #4]
}
 800ed50:	bf00      	nop
 800ed52:	e7fe      	b.n	800ed52 <vTaskSwitchContext+0x3e>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3b01      	subs	r3, #1
 800ed58:	60fb      	str	r3, [r7, #12]
 800ed5a:	491d      	ldr	r1, [pc, #116]	; (800edd0 <vTaskSwitchContext+0xbc>)
 800ed5c:	68fa      	ldr	r2, [r7, #12]
 800ed5e:	4613      	mov	r3, r2
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	4413      	add	r3, r2
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	440b      	add	r3, r1
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d0e4      	beq.n	800ed38 <vTaskSwitchContext+0x24>
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	4613      	mov	r3, r2
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	4413      	add	r3, r2
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	4a15      	ldr	r2, [pc, #84]	; (800edd0 <vTaskSwitchContext+0xbc>)
 800ed7a:	4413      	add	r3, r2
 800ed7c:	60bb      	str	r3, [r7, #8]
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	685a      	ldr	r2, [r3, #4]
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	605a      	str	r2, [r3, #4]
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	685a      	ldr	r2, [r3, #4]
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	3308      	adds	r3, #8
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d104      	bne.n	800ed9e <vTaskSwitchContext+0x8a>
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	685a      	ldr	r2, [r3, #4]
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	605a      	str	r2, [r3, #4]
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	4a0b      	ldr	r2, [pc, #44]	; (800edd4 <vTaskSwitchContext+0xc0>)
 800eda6:	6013      	str	r3, [r2, #0]
 800eda8:	4a08      	ldr	r2, [pc, #32]	; (800edcc <vTaskSwitchContext+0xb8>)
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800edae:	4b09      	ldr	r3, [pc, #36]	; (800edd4 <vTaskSwitchContext+0xc0>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	3354      	adds	r3, #84	; 0x54
 800edb4:	4a08      	ldr	r2, [pc, #32]	; (800edd8 <vTaskSwitchContext+0xc4>)
 800edb6:	6013      	str	r3, [r2, #0]
}
 800edb8:	bf00      	nop
 800edba:	3714      	adds	r7, #20
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr
 800edc4:	20001954 	.word	0x20001954
 800edc8:	20001940 	.word	0x20001940
 800edcc:	20001934 	.word	0x20001934
 800edd0:	2000145c 	.word	0x2000145c
 800edd4:	20001458 	.word	0x20001458
 800edd8:	20000020 	.word	0x20000020

0800eddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10a      	bne.n	800ee02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800edec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf0:	f383 8811 	msr	BASEPRI, r3
 800edf4:	f3bf 8f6f 	isb	sy
 800edf8:	f3bf 8f4f 	dsb	sy
 800edfc:	60fb      	str	r3, [r7, #12]
}
 800edfe:	bf00      	nop
 800ee00:	e7fe      	b.n	800ee00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee02:	4b07      	ldr	r3, [pc, #28]	; (800ee20 <vTaskPlaceOnEventList+0x44>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3318      	adds	r3, #24
 800ee08:	4619      	mov	r1, r3
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f7fe fa77 	bl	800d2fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee10:	2101      	movs	r1, #1
 800ee12:	6838      	ldr	r0, [r7, #0]
 800ee14:	f000 fb8e 	bl	800f534 <prvAddCurrentTaskToDelayedList>
}
 800ee18:	bf00      	nop
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	20001458 	.word	0x20001458

0800ee24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b086      	sub	sp, #24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d10a      	bne.n	800ee4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ee36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3a:	f383 8811 	msr	BASEPRI, r3
 800ee3e:	f3bf 8f6f 	isb	sy
 800ee42:	f3bf 8f4f 	dsb	sy
 800ee46:	617b      	str	r3, [r7, #20]
}
 800ee48:	bf00      	nop
 800ee4a:	e7fe      	b.n	800ee4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee4c:	4b0a      	ldr	r3, [pc, #40]	; (800ee78 <vTaskPlaceOnEventListRestricted+0x54>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	3318      	adds	r3, #24
 800ee52:	4619      	mov	r1, r3
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	f7fe fa2e 	bl	800d2b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d002      	beq.n	800ee66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ee60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ee66:	6879      	ldr	r1, [r7, #4]
 800ee68:	68b8      	ldr	r0, [r7, #8]
 800ee6a:	f000 fb63 	bl	800f534 <prvAddCurrentTaskToDelayedList>
	}
 800ee6e:	bf00      	nop
 800ee70:	3718      	adds	r7, #24
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	20001458 	.word	0x20001458

0800ee7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10a      	bne.n	800eea8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ee92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee96:	f383 8811 	msr	BASEPRI, r3
 800ee9a:	f3bf 8f6f 	isb	sy
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	60fb      	str	r3, [r7, #12]
}
 800eea4:	bf00      	nop
 800eea6:	e7fe      	b.n	800eea6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	3318      	adds	r3, #24
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7fe fa5f 	bl	800d370 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eeb2:	4b1e      	ldr	r3, [pc, #120]	; (800ef2c <xTaskRemoveFromEventList+0xb0>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d11d      	bne.n	800eef6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	3304      	adds	r3, #4
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fe fa56 	bl	800d370 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec8:	4b19      	ldr	r3, [pc, #100]	; (800ef30 <xTaskRemoveFromEventList+0xb4>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	429a      	cmp	r2, r3
 800eece:	d903      	bls.n	800eed8 <xTaskRemoveFromEventList+0x5c>
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed4:	4a16      	ldr	r2, [pc, #88]	; (800ef30 <xTaskRemoveFromEventList+0xb4>)
 800eed6:	6013      	str	r3, [r2, #0]
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eedc:	4613      	mov	r3, r2
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	4413      	add	r3, r2
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	4a13      	ldr	r2, [pc, #76]	; (800ef34 <xTaskRemoveFromEventList+0xb8>)
 800eee6:	441a      	add	r2, r3
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	3304      	adds	r3, #4
 800eeec:	4619      	mov	r1, r3
 800eeee:	4610      	mov	r0, r2
 800eef0:	f7fe f9e1 	bl	800d2b6 <vListInsertEnd>
 800eef4:	e005      	b.n	800ef02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	3318      	adds	r3, #24
 800eefa:	4619      	mov	r1, r3
 800eefc:	480e      	ldr	r0, [pc, #56]	; (800ef38 <xTaskRemoveFromEventList+0xbc>)
 800eefe:	f7fe f9da 	bl	800d2b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef06:	4b0d      	ldr	r3, [pc, #52]	; (800ef3c <xTaskRemoveFromEventList+0xc0>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d905      	bls.n	800ef1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ef10:	2301      	movs	r3, #1
 800ef12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ef14:	4b0a      	ldr	r3, [pc, #40]	; (800ef40 <xTaskRemoveFromEventList+0xc4>)
 800ef16:	2201      	movs	r2, #1
 800ef18:	601a      	str	r2, [r3, #0]
 800ef1a:	e001      	b.n	800ef20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ef20:	697b      	ldr	r3, [r7, #20]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3718      	adds	r7, #24
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	20001954 	.word	0x20001954
 800ef30:	20001934 	.word	0x20001934
 800ef34:	2000145c 	.word	0x2000145c
 800ef38:	200018ec 	.word	0x200018ec
 800ef3c:	20001458 	.word	0x20001458
 800ef40:	20001940 	.word	0x20001940

0800ef44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ef4c:	4b06      	ldr	r3, [pc, #24]	; (800ef68 <vTaskInternalSetTimeOutState+0x24>)
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ef54:	4b05      	ldr	r3, [pc, #20]	; (800ef6c <vTaskInternalSetTimeOutState+0x28>)
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	605a      	str	r2, [r3, #4]
}
 800ef5c:	bf00      	nop
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	20001944 	.word	0x20001944
 800ef6c:	20001930 	.word	0x20001930

0800ef70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b088      	sub	sp, #32
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d10a      	bne.n	800ef96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef84:	f383 8811 	msr	BASEPRI, r3
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	f3bf 8f4f 	dsb	sy
 800ef90:	613b      	str	r3, [r7, #16]
}
 800ef92:	bf00      	nop
 800ef94:	e7fe      	b.n	800ef94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d10a      	bne.n	800efb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ef9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa0:	f383 8811 	msr	BASEPRI, r3
 800efa4:	f3bf 8f6f 	isb	sy
 800efa8:	f3bf 8f4f 	dsb	sy
 800efac:	60fb      	str	r3, [r7, #12]
}
 800efae:	bf00      	nop
 800efb0:	e7fe      	b.n	800efb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800efb2:	f000 ff8f 	bl	800fed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800efb6:	4b1d      	ldr	r3, [pc, #116]	; (800f02c <xTaskCheckForTimeOut+0xbc>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	69ba      	ldr	r2, [r7, #24]
 800efc2:	1ad3      	subs	r3, r2, r3
 800efc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efce:	d102      	bne.n	800efd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800efd0:	2300      	movs	r3, #0
 800efd2:	61fb      	str	r3, [r7, #28]
 800efd4:	e023      	b.n	800f01e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	4b15      	ldr	r3, [pc, #84]	; (800f030 <xTaskCheckForTimeOut+0xc0>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d007      	beq.n	800eff2 <xTaskCheckForTimeOut+0x82>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	69ba      	ldr	r2, [r7, #24]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d302      	bcc.n	800eff2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800efec:	2301      	movs	r3, #1
 800efee:	61fb      	str	r3, [r7, #28]
 800eff0:	e015      	b.n	800f01e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	697a      	ldr	r2, [r7, #20]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d20b      	bcs.n	800f014 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	1ad2      	subs	r2, r2, r3
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f7ff ff9b 	bl	800ef44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f00e:	2300      	movs	r3, #0
 800f010:	61fb      	str	r3, [r7, #28]
 800f012:	e004      	b.n	800f01e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	2200      	movs	r2, #0
 800f018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f01a:	2301      	movs	r3, #1
 800f01c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f01e:	f000 ff89 	bl	800ff34 <vPortExitCritical>

	return xReturn;
 800f022:	69fb      	ldr	r3, [r7, #28]
}
 800f024:	4618      	mov	r0, r3
 800f026:	3720      	adds	r7, #32
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	20001930 	.word	0x20001930
 800f030:	20001944 	.word	0x20001944

0800f034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f034:	b480      	push	{r7}
 800f036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f038:	4b03      	ldr	r3, [pc, #12]	; (800f048 <vTaskMissedYield+0x14>)
 800f03a:	2201      	movs	r2, #1
 800f03c:	601a      	str	r2, [r3, #0]
}
 800f03e:	bf00      	nop
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr
 800f048:	20001940 	.word	0x20001940

0800f04c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f054:	f000 f852 	bl	800f0fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f058:	4b06      	ldr	r3, [pc, #24]	; (800f074 <prvIdleTask+0x28>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d9f9      	bls.n	800f054 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f060:	4b05      	ldr	r3, [pc, #20]	; (800f078 <prvIdleTask+0x2c>)
 800f062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f066:	601a      	str	r2, [r3, #0]
 800f068:	f3bf 8f4f 	dsb	sy
 800f06c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f070:	e7f0      	b.n	800f054 <prvIdleTask+0x8>
 800f072:	bf00      	nop
 800f074:	2000145c 	.word	0x2000145c
 800f078:	e000ed04 	.word	0xe000ed04

0800f07c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f082:	2300      	movs	r3, #0
 800f084:	607b      	str	r3, [r7, #4]
 800f086:	e00c      	b.n	800f0a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	4613      	mov	r3, r2
 800f08c:	009b      	lsls	r3, r3, #2
 800f08e:	4413      	add	r3, r2
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	4a12      	ldr	r2, [pc, #72]	; (800f0dc <prvInitialiseTaskLists+0x60>)
 800f094:	4413      	add	r3, r2
 800f096:	4618      	mov	r0, r3
 800f098:	f7fe f8e0 	bl	800d25c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	607b      	str	r3, [r7, #4]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2b37      	cmp	r3, #55	; 0x37
 800f0a6:	d9ef      	bls.n	800f088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f0a8:	480d      	ldr	r0, [pc, #52]	; (800f0e0 <prvInitialiseTaskLists+0x64>)
 800f0aa:	f7fe f8d7 	bl	800d25c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f0ae:	480d      	ldr	r0, [pc, #52]	; (800f0e4 <prvInitialiseTaskLists+0x68>)
 800f0b0:	f7fe f8d4 	bl	800d25c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f0b4:	480c      	ldr	r0, [pc, #48]	; (800f0e8 <prvInitialiseTaskLists+0x6c>)
 800f0b6:	f7fe f8d1 	bl	800d25c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f0ba:	480c      	ldr	r0, [pc, #48]	; (800f0ec <prvInitialiseTaskLists+0x70>)
 800f0bc:	f7fe f8ce 	bl	800d25c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f0c0:	480b      	ldr	r0, [pc, #44]	; (800f0f0 <prvInitialiseTaskLists+0x74>)
 800f0c2:	f7fe f8cb 	bl	800d25c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f0c6:	4b0b      	ldr	r3, [pc, #44]	; (800f0f4 <prvInitialiseTaskLists+0x78>)
 800f0c8:	4a05      	ldr	r2, [pc, #20]	; (800f0e0 <prvInitialiseTaskLists+0x64>)
 800f0ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f0cc:	4b0a      	ldr	r3, [pc, #40]	; (800f0f8 <prvInitialiseTaskLists+0x7c>)
 800f0ce:	4a05      	ldr	r2, [pc, #20]	; (800f0e4 <prvInitialiseTaskLists+0x68>)
 800f0d0:	601a      	str	r2, [r3, #0]
}
 800f0d2:	bf00      	nop
 800f0d4:	3708      	adds	r7, #8
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	2000145c 	.word	0x2000145c
 800f0e0:	200018bc 	.word	0x200018bc
 800f0e4:	200018d0 	.word	0x200018d0
 800f0e8:	200018ec 	.word	0x200018ec
 800f0ec:	20001900 	.word	0x20001900
 800f0f0:	20001918 	.word	0x20001918
 800f0f4:	200018e4 	.word	0x200018e4
 800f0f8:	200018e8 	.word	0x200018e8

0800f0fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f102:	e019      	b.n	800f138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f104:	f000 fee6 	bl	800fed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f108:	4b10      	ldr	r3, [pc, #64]	; (800f14c <prvCheckTasksWaitingTermination+0x50>)
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	3304      	adds	r3, #4
 800f114:	4618      	mov	r0, r3
 800f116:	f7fe f92b 	bl	800d370 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f11a:	4b0d      	ldr	r3, [pc, #52]	; (800f150 <prvCheckTasksWaitingTermination+0x54>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3b01      	subs	r3, #1
 800f120:	4a0b      	ldr	r2, [pc, #44]	; (800f150 <prvCheckTasksWaitingTermination+0x54>)
 800f122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f124:	4b0b      	ldr	r3, [pc, #44]	; (800f154 <prvCheckTasksWaitingTermination+0x58>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	3b01      	subs	r3, #1
 800f12a:	4a0a      	ldr	r2, [pc, #40]	; (800f154 <prvCheckTasksWaitingTermination+0x58>)
 800f12c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f12e:	f000 ff01 	bl	800ff34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 f810 	bl	800f158 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f138:	4b06      	ldr	r3, [pc, #24]	; (800f154 <prvCheckTasksWaitingTermination+0x58>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d1e1      	bne.n	800f104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f140:	bf00      	nop
 800f142:	bf00      	nop
 800f144:	3708      	adds	r7, #8
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	20001900 	.word	0x20001900
 800f150:	2000192c 	.word	0x2000192c
 800f154:	20001914 	.word	0x20001914

0800f158 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	3354      	adds	r3, #84	; 0x54
 800f164:	4618      	mov	r0, r3
 800f166:	f001 fa0b 	bl	8010580 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f170:	2b00      	cmp	r3, #0
 800f172:	d108      	bne.n	800f186 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f178:	4618      	mov	r0, r3
 800f17a:	f001 f899 	bl	80102b0 <vPortFree>
				vPortFree( pxTCB );
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f001 f896 	bl	80102b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f184:	e018      	b.n	800f1b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d103      	bne.n	800f198 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f001 f88d 	bl	80102b0 <vPortFree>
	}
 800f196:	e00f      	b.n	800f1b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f19e:	2b02      	cmp	r3, #2
 800f1a0:	d00a      	beq.n	800f1b8 <prvDeleteTCB+0x60>
	__asm volatile
 800f1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a6:	f383 8811 	msr	BASEPRI, r3
 800f1aa:	f3bf 8f6f 	isb	sy
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	60fb      	str	r3, [r7, #12]
}
 800f1b4:	bf00      	nop
 800f1b6:	e7fe      	b.n	800f1b6 <prvDeleteTCB+0x5e>
	}
 800f1b8:	bf00      	nop
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1c6:	4b0c      	ldr	r3, [pc, #48]	; (800f1f8 <prvResetNextTaskUnblockTime+0x38>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d104      	bne.n	800f1da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f1d0:	4b0a      	ldr	r3, [pc, #40]	; (800f1fc <prvResetNextTaskUnblockTime+0x3c>)
 800f1d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f1d8:	e008      	b.n	800f1ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1da:	4b07      	ldr	r3, [pc, #28]	; (800f1f8 <prvResetNextTaskUnblockTime+0x38>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	4a04      	ldr	r2, [pc, #16]	; (800f1fc <prvResetNextTaskUnblockTime+0x3c>)
 800f1ea:	6013      	str	r3, [r2, #0]
}
 800f1ec:	bf00      	nop
 800f1ee:	370c      	adds	r7, #12
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr
 800f1f8:	200018e4 	.word	0x200018e4
 800f1fc:	2000194c 	.word	0x2000194c

0800f200 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f200:	b480      	push	{r7}
 800f202:	b083      	sub	sp, #12
 800f204:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f206:	4b05      	ldr	r3, [pc, #20]	; (800f21c <xTaskGetCurrentTaskHandle+0x1c>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f20c:	687b      	ldr	r3, [r7, #4]
	}
 800f20e:	4618      	mov	r0, r3
 800f210:	370c      	adds	r7, #12
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	20001458 	.word	0x20001458

0800f220 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f226:	4b0b      	ldr	r3, [pc, #44]	; (800f254 <xTaskGetSchedulerState+0x34>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d102      	bne.n	800f234 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f22e:	2301      	movs	r3, #1
 800f230:	607b      	str	r3, [r7, #4]
 800f232:	e008      	b.n	800f246 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f234:	4b08      	ldr	r3, [pc, #32]	; (800f258 <xTaskGetSchedulerState+0x38>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d102      	bne.n	800f242 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f23c:	2302      	movs	r3, #2
 800f23e:	607b      	str	r3, [r7, #4]
 800f240:	e001      	b.n	800f246 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f242:	2300      	movs	r3, #0
 800f244:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f246:	687b      	ldr	r3, [r7, #4]
	}
 800f248:	4618      	mov	r0, r3
 800f24a:	370c      	adds	r7, #12
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr
 800f254:	20001938 	.word	0x20001938
 800f258:	20001954 	.word	0x20001954

0800f25c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f268:	2300      	movs	r3, #0
 800f26a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d051      	beq.n	800f316 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f276:	4b2a      	ldr	r3, [pc, #168]	; (800f320 <xTaskPriorityInherit+0xc4>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d241      	bcs.n	800f304 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	699b      	ldr	r3, [r3, #24]
 800f284:	2b00      	cmp	r3, #0
 800f286:	db06      	blt.n	800f296 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f288:	4b25      	ldr	r3, [pc, #148]	; (800f320 <xTaskPriorityInherit+0xc4>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	6959      	ldr	r1, [r3, #20]
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f29e:	4613      	mov	r3, r2
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	4413      	add	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	4a1f      	ldr	r2, [pc, #124]	; (800f324 <xTaskPriorityInherit+0xc8>)
 800f2a8:	4413      	add	r3, r2
 800f2aa:	4299      	cmp	r1, r3
 800f2ac:	d122      	bne.n	800f2f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	3304      	adds	r3, #4
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fe f85c 	bl	800d370 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f2b8:	4b19      	ldr	r3, [pc, #100]	; (800f320 <xTaskPriorityInherit+0xc4>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c6:	4b18      	ldr	r3, [pc, #96]	; (800f328 <xTaskPriorityInherit+0xcc>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d903      	bls.n	800f2d6 <xTaskPriorityInherit+0x7a>
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2d2:	4a15      	ldr	r2, [pc, #84]	; (800f328 <xTaskPriorityInherit+0xcc>)
 800f2d4:	6013      	str	r3, [r2, #0]
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2da:	4613      	mov	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	4a10      	ldr	r2, [pc, #64]	; (800f324 <xTaskPriorityInherit+0xc8>)
 800f2e4:	441a      	add	r2, r3
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	3304      	adds	r3, #4
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	4610      	mov	r0, r2
 800f2ee:	f7fd ffe2 	bl	800d2b6 <vListInsertEnd>
 800f2f2:	e004      	b.n	800f2fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f2f4:	4b0a      	ldr	r3, [pc, #40]	; (800f320 <xTaskPriorityInherit+0xc4>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f2fe:	2301      	movs	r3, #1
 800f300:	60fb      	str	r3, [r7, #12]
 800f302:	e008      	b.n	800f316 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f308:	4b05      	ldr	r3, [pc, #20]	; (800f320 <xTaskPriorityInherit+0xc4>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f30e:	429a      	cmp	r2, r3
 800f310:	d201      	bcs.n	800f316 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f312:	2301      	movs	r3, #1
 800f314:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f316:	68fb      	ldr	r3, [r7, #12]
	}
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	20001458 	.word	0x20001458
 800f324:	2000145c 	.word	0x2000145c
 800f328:	20001934 	.word	0x20001934

0800f32c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b086      	sub	sp, #24
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f338:	2300      	movs	r3, #0
 800f33a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d056      	beq.n	800f3f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f342:	4b2e      	ldr	r3, [pc, #184]	; (800f3fc <xTaskPriorityDisinherit+0xd0>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	693a      	ldr	r2, [r7, #16]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d00a      	beq.n	800f362 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f350:	f383 8811 	msr	BASEPRI, r3
 800f354:	f3bf 8f6f 	isb	sy
 800f358:	f3bf 8f4f 	dsb	sy
 800f35c:	60fb      	str	r3, [r7, #12]
}
 800f35e:	bf00      	nop
 800f360:	e7fe      	b.n	800f360 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f366:	2b00      	cmp	r3, #0
 800f368:	d10a      	bne.n	800f380 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	60bb      	str	r3, [r7, #8]
}
 800f37c:	bf00      	nop
 800f37e:	e7fe      	b.n	800f37e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f384:	1e5a      	subs	r2, r3, #1
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f392:	429a      	cmp	r2, r3
 800f394:	d02c      	beq.n	800f3f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d128      	bne.n	800f3f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	3304      	adds	r3, #4
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fd ffe4 	bl	800d370 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3c0:	4b0f      	ldr	r3, [pc, #60]	; (800f400 <xTaskPriorityDisinherit+0xd4>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d903      	bls.n	800f3d0 <xTaskPriorityDisinherit+0xa4>
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3cc:	4a0c      	ldr	r2, [pc, #48]	; (800f400 <xTaskPriorityDisinherit+0xd4>)
 800f3ce:	6013      	str	r3, [r2, #0]
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	4413      	add	r3, r2
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	4a09      	ldr	r2, [pc, #36]	; (800f404 <xTaskPriorityDisinherit+0xd8>)
 800f3de:	441a      	add	r2, r3
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	4610      	mov	r0, r2
 800f3e8:	f7fd ff65 	bl	800d2b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f3f0:	697b      	ldr	r3, [r7, #20]
	}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3718      	adds	r7, #24
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
 800f3fa:	bf00      	nop
 800f3fc:	20001458 	.word	0x20001458
 800f400:	20001934 	.word	0x20001934
 800f404:	2000145c 	.word	0x2000145c

0800f408 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b088      	sub	sp, #32
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f416:	2301      	movs	r3, #1
 800f418:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d06a      	beq.n	800f4f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f424:	2b00      	cmp	r3, #0
 800f426:	d10a      	bne.n	800f43e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f42c:	f383 8811 	msr	BASEPRI, r3
 800f430:	f3bf 8f6f 	isb	sy
 800f434:	f3bf 8f4f 	dsb	sy
 800f438:	60fb      	str	r3, [r7, #12]
}
 800f43a:	bf00      	nop
 800f43c:	e7fe      	b.n	800f43c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f442:	683a      	ldr	r2, [r7, #0]
 800f444:	429a      	cmp	r2, r3
 800f446:	d902      	bls.n	800f44e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	61fb      	str	r3, [r7, #28]
 800f44c:	e002      	b.n	800f454 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f452:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f458:	69fa      	ldr	r2, [r7, #28]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d04b      	beq.n	800f4f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f462:	697a      	ldr	r2, [r7, #20]
 800f464:	429a      	cmp	r2, r3
 800f466:	d146      	bne.n	800f4f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f468:	4b25      	ldr	r3, [pc, #148]	; (800f500 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	69ba      	ldr	r2, [r7, #24]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d10a      	bne.n	800f488 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f476:	f383 8811 	msr	BASEPRI, r3
 800f47a:	f3bf 8f6f 	isb	sy
 800f47e:	f3bf 8f4f 	dsb	sy
 800f482:	60bb      	str	r3, [r7, #8]
}
 800f484:	bf00      	nop
 800f486:	e7fe      	b.n	800f486 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f488:	69bb      	ldr	r3, [r7, #24]
 800f48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f48c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	69fa      	ldr	r2, [r7, #28]
 800f492:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f494:	69bb      	ldr	r3, [r7, #24]
 800f496:	699b      	ldr	r3, [r3, #24]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	db04      	blt.n	800f4a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f4a2:	69bb      	ldr	r3, [r7, #24]
 800f4a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	6959      	ldr	r1, [r3, #20]
 800f4aa:	693a      	ldr	r2, [r7, #16]
 800f4ac:	4613      	mov	r3, r2
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	4413      	add	r3, r2
 800f4b2:	009b      	lsls	r3, r3, #2
 800f4b4:	4a13      	ldr	r2, [pc, #76]	; (800f504 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f4b6:	4413      	add	r3, r2
 800f4b8:	4299      	cmp	r1, r3
 800f4ba:	d11c      	bne.n	800f4f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	3304      	adds	r3, #4
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7fd ff55 	bl	800d370 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ca:	4b0f      	ldr	r3, [pc, #60]	; (800f508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d903      	bls.n	800f4da <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d6:	4a0c      	ldr	r2, [pc, #48]	; (800f508 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f4d8:	6013      	str	r3, [r2, #0]
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4de:	4613      	mov	r3, r2
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	4413      	add	r3, r2
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	4a07      	ldr	r2, [pc, #28]	; (800f504 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f4e8:	441a      	add	r2, r3
 800f4ea:	69bb      	ldr	r3, [r7, #24]
 800f4ec:	3304      	adds	r3, #4
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	4610      	mov	r0, r2
 800f4f2:	f7fd fee0 	bl	800d2b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f4f6:	bf00      	nop
 800f4f8:	3720      	adds	r7, #32
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	20001458 	.word	0x20001458
 800f504:	2000145c 	.word	0x2000145c
 800f508:	20001934 	.word	0x20001934

0800f50c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f50c:	b480      	push	{r7}
 800f50e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f510:	4b07      	ldr	r3, [pc, #28]	; (800f530 <pvTaskIncrementMutexHeldCount+0x24>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d004      	beq.n	800f522 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f518:	4b05      	ldr	r3, [pc, #20]	; (800f530 <pvTaskIncrementMutexHeldCount+0x24>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f51e:	3201      	adds	r2, #1
 800f520:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f522:	4b03      	ldr	r3, [pc, #12]	; (800f530 <pvTaskIncrementMutexHeldCount+0x24>)
 800f524:	681b      	ldr	r3, [r3, #0]
	}
 800f526:	4618      	mov	r0, r3
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr
 800f530:	20001458 	.word	0x20001458

0800f534 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f53e:	4b21      	ldr	r3, [pc, #132]	; (800f5c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f544:	4b20      	ldr	r3, [pc, #128]	; (800f5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	3304      	adds	r3, #4
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7fd ff10 	bl	800d370 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f556:	d10a      	bne.n	800f56e <prvAddCurrentTaskToDelayedList+0x3a>
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d007      	beq.n	800f56e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f55e:	4b1a      	ldr	r3, [pc, #104]	; (800f5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	3304      	adds	r3, #4
 800f564:	4619      	mov	r1, r3
 800f566:	4819      	ldr	r0, [pc, #100]	; (800f5cc <prvAddCurrentTaskToDelayedList+0x98>)
 800f568:	f7fd fea5 	bl	800d2b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f56c:	e026      	b.n	800f5bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4413      	add	r3, r2
 800f574:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f576:	4b14      	ldr	r3, [pc, #80]	; (800f5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68ba      	ldr	r2, [r7, #8]
 800f57c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f57e:	68ba      	ldr	r2, [r7, #8]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	429a      	cmp	r2, r3
 800f584:	d209      	bcs.n	800f59a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f586:	4b12      	ldr	r3, [pc, #72]	; (800f5d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	4b0f      	ldr	r3, [pc, #60]	; (800f5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	3304      	adds	r3, #4
 800f590:	4619      	mov	r1, r3
 800f592:	4610      	mov	r0, r2
 800f594:	f7fd feb3 	bl	800d2fe <vListInsert>
}
 800f598:	e010      	b.n	800f5bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f59a:	4b0e      	ldr	r3, [pc, #56]	; (800f5d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	4b0a      	ldr	r3, [pc, #40]	; (800f5c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	3304      	adds	r3, #4
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	4610      	mov	r0, r2
 800f5a8:	f7fd fea9 	bl	800d2fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f5ac:	4b0a      	ldr	r3, [pc, #40]	; (800f5d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	68ba      	ldr	r2, [r7, #8]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d202      	bcs.n	800f5bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f5b6:	4a08      	ldr	r2, [pc, #32]	; (800f5d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	6013      	str	r3, [r2, #0]
}
 800f5bc:	bf00      	nop
 800f5be:	3710      	adds	r7, #16
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	20001930 	.word	0x20001930
 800f5c8:	20001458 	.word	0x20001458
 800f5cc:	20001918 	.word	0x20001918
 800f5d0:	200018e8 	.word	0x200018e8
 800f5d4:	200018e4 	.word	0x200018e4
 800f5d8:	2000194c 	.word	0x2000194c

0800f5dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b08a      	sub	sp, #40	; 0x28
 800f5e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f5e6:	f000 fb07 	bl	800fbf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f5ea:	4b1c      	ldr	r3, [pc, #112]	; (800f65c <xTimerCreateTimerTask+0x80>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d021      	beq.n	800f636 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f5fa:	1d3a      	adds	r2, r7, #4
 800f5fc:	f107 0108 	add.w	r1, r7, #8
 800f600:	f107 030c 	add.w	r3, r7, #12
 800f604:	4618      	mov	r0, r3
 800f606:	f7fd fe0f 	bl	800d228 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f60a:	6879      	ldr	r1, [r7, #4]
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	9202      	str	r2, [sp, #8]
 800f612:	9301      	str	r3, [sp, #4]
 800f614:	2302      	movs	r3, #2
 800f616:	9300      	str	r3, [sp, #0]
 800f618:	2300      	movs	r3, #0
 800f61a:	460a      	mov	r2, r1
 800f61c:	4910      	ldr	r1, [pc, #64]	; (800f660 <xTimerCreateTimerTask+0x84>)
 800f61e:	4811      	ldr	r0, [pc, #68]	; (800f664 <xTimerCreateTimerTask+0x88>)
 800f620:	f7fe ff94 	bl	800e54c <xTaskCreateStatic>
 800f624:	4603      	mov	r3, r0
 800f626:	4a10      	ldr	r2, [pc, #64]	; (800f668 <xTimerCreateTimerTask+0x8c>)
 800f628:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f62a:	4b0f      	ldr	r3, [pc, #60]	; (800f668 <xTimerCreateTimerTask+0x8c>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f632:	2301      	movs	r3, #1
 800f634:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d10a      	bne.n	800f652 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f640:	f383 8811 	msr	BASEPRI, r3
 800f644:	f3bf 8f6f 	isb	sy
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	613b      	str	r3, [r7, #16]
}
 800f64e:	bf00      	nop
 800f650:	e7fe      	b.n	800f650 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f652:	697b      	ldr	r3, [r7, #20]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3718      	adds	r7, #24
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	20001988 	.word	0x20001988
 800f660:	0801076c 	.word	0x0801076c
 800f664:	0800f7a1 	.word	0x0800f7a1
 800f668:	2000198c 	.word	0x2000198c

0800f66c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b08a      	sub	sp, #40	; 0x28
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	607a      	str	r2, [r7, #4]
 800f678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f67a:	2300      	movs	r3, #0
 800f67c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d10a      	bne.n	800f69a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f688:	f383 8811 	msr	BASEPRI, r3
 800f68c:	f3bf 8f6f 	isb	sy
 800f690:	f3bf 8f4f 	dsb	sy
 800f694:	623b      	str	r3, [r7, #32]
}
 800f696:	bf00      	nop
 800f698:	e7fe      	b.n	800f698 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f69a:	4b1a      	ldr	r3, [pc, #104]	; (800f704 <xTimerGenericCommand+0x98>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d02a      	beq.n	800f6f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	2b05      	cmp	r3, #5
 800f6b2:	dc18      	bgt.n	800f6e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f6b4:	f7ff fdb4 	bl	800f220 <xTaskGetSchedulerState>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d109      	bne.n	800f6d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f6be:	4b11      	ldr	r3, [pc, #68]	; (800f704 <xTimerGenericCommand+0x98>)
 800f6c0:	6818      	ldr	r0, [r3, #0]
 800f6c2:	f107 0110 	add.w	r1, r7, #16
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ca:	f7fe f8d9 	bl	800d880 <xQueueGenericSend>
 800f6ce:	6278      	str	r0, [r7, #36]	; 0x24
 800f6d0:	e012      	b.n	800f6f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f6d2:	4b0c      	ldr	r3, [pc, #48]	; (800f704 <xTimerGenericCommand+0x98>)
 800f6d4:	6818      	ldr	r0, [r3, #0]
 800f6d6:	f107 0110 	add.w	r1, r7, #16
 800f6da:	2300      	movs	r3, #0
 800f6dc:	2200      	movs	r2, #0
 800f6de:	f7fe f8cf 	bl	800d880 <xQueueGenericSend>
 800f6e2:	6278      	str	r0, [r7, #36]	; 0x24
 800f6e4:	e008      	b.n	800f6f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f6e6:	4b07      	ldr	r3, [pc, #28]	; (800f704 <xTimerGenericCommand+0x98>)
 800f6e8:	6818      	ldr	r0, [r3, #0]
 800f6ea:	f107 0110 	add.w	r1, r7, #16
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	f7fe f9c3 	bl	800da7c <xQueueGenericSendFromISR>
 800f6f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3728      	adds	r7, #40	; 0x28
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}
 800f702:	bf00      	nop
 800f704:	20001988 	.word	0x20001988

0800f708 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b088      	sub	sp, #32
 800f70c:	af02      	add	r7, sp, #8
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f712:	4b22      	ldr	r3, [pc, #136]	; (800f79c <prvProcessExpiredTimer+0x94>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	3304      	adds	r3, #4
 800f720:	4618      	mov	r0, r3
 800f722:	f7fd fe25 	bl	800d370 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f72c:	f003 0304 	and.w	r3, r3, #4
 800f730:	2b00      	cmp	r3, #0
 800f732:	d022      	beq.n	800f77a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	699a      	ldr	r2, [r3, #24]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	18d1      	adds	r1, r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	683a      	ldr	r2, [r7, #0]
 800f740:	6978      	ldr	r0, [r7, #20]
 800f742:	f000 f8d1 	bl	800f8e8 <prvInsertTimerInActiveList>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d01f      	beq.n	800f78c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f74c:	2300      	movs	r3, #0
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	2300      	movs	r3, #0
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	2100      	movs	r1, #0
 800f756:	6978      	ldr	r0, [r7, #20]
 800f758:	f7ff ff88 	bl	800f66c <xTimerGenericCommand>
 800f75c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d113      	bne.n	800f78c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f768:	f383 8811 	msr	BASEPRI, r3
 800f76c:	f3bf 8f6f 	isb	sy
 800f770:	f3bf 8f4f 	dsb	sy
 800f774:	60fb      	str	r3, [r7, #12]
}
 800f776:	bf00      	nop
 800f778:	e7fe      	b.n	800f778 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f780:	f023 0301 	bic.w	r3, r3, #1
 800f784:	b2da      	uxtb	r2, r3
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	6a1b      	ldr	r3, [r3, #32]
 800f790:	6978      	ldr	r0, [r7, #20]
 800f792:	4798      	blx	r3
}
 800f794:	bf00      	nop
 800f796:	3718      	adds	r7, #24
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	20001980 	.word	0x20001980

0800f7a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7a8:	f107 0308 	add.w	r3, r7, #8
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f000 f857 	bl	800f860 <prvGetNextExpireTime>
 800f7b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	68f8      	ldr	r0, [r7, #12]
 800f7ba:	f000 f803 	bl	800f7c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f7be:	f000 f8d5 	bl	800f96c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7c2:	e7f1      	b.n	800f7a8 <prvTimerTask+0x8>

0800f7c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f7ce:	f7ff f919 	bl	800ea04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7d2:	f107 0308 	add.w	r3, r7, #8
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f000 f866 	bl	800f8a8 <prvSampleTimeNow>
 800f7dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d130      	bne.n	800f846 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d10a      	bne.n	800f800 <prvProcessTimerOrBlockTask+0x3c>
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d806      	bhi.n	800f800 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f7f2:	f7ff f915 	bl	800ea20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f7f6:	68f9      	ldr	r1, [r7, #12]
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7ff ff85 	bl	800f708 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f7fe:	e024      	b.n	800f84a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d008      	beq.n	800f818 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f806:	4b13      	ldr	r3, [pc, #76]	; (800f854 <prvProcessTimerOrBlockTask+0x90>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d101      	bne.n	800f814 <prvProcessTimerOrBlockTask+0x50>
 800f810:	2301      	movs	r3, #1
 800f812:	e000      	b.n	800f816 <prvProcessTimerOrBlockTask+0x52>
 800f814:	2300      	movs	r3, #0
 800f816:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f818:	4b0f      	ldr	r3, [pc, #60]	; (800f858 <prvProcessTimerOrBlockTask+0x94>)
 800f81a:	6818      	ldr	r0, [r3, #0]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	1ad3      	subs	r3, r2, r3
 800f822:	683a      	ldr	r2, [r7, #0]
 800f824:	4619      	mov	r1, r3
 800f826:	f7fe fe5d 	bl	800e4e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f82a:	f7ff f8f9 	bl	800ea20 <xTaskResumeAll>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d10a      	bne.n	800f84a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f834:	4b09      	ldr	r3, [pc, #36]	; (800f85c <prvProcessTimerOrBlockTask+0x98>)
 800f836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f83a:	601a      	str	r2, [r3, #0]
 800f83c:	f3bf 8f4f 	dsb	sy
 800f840:	f3bf 8f6f 	isb	sy
}
 800f844:	e001      	b.n	800f84a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f846:	f7ff f8eb 	bl	800ea20 <xTaskResumeAll>
}
 800f84a:	bf00      	nop
 800f84c:	3710      	adds	r7, #16
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	20001984 	.word	0x20001984
 800f858:	20001988 	.word	0x20001988
 800f85c:	e000ed04 	.word	0xe000ed04

0800f860 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f860:	b480      	push	{r7}
 800f862:	b085      	sub	sp, #20
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f868:	4b0e      	ldr	r3, [pc, #56]	; (800f8a4 <prvGetNextExpireTime+0x44>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d101      	bne.n	800f876 <prvGetNextExpireTime+0x16>
 800f872:	2201      	movs	r2, #1
 800f874:	e000      	b.n	800f878 <prvGetNextExpireTime+0x18>
 800f876:	2200      	movs	r2, #0
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d105      	bne.n	800f890 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f884:	4b07      	ldr	r3, [pc, #28]	; (800f8a4 <prvGetNextExpireTime+0x44>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	60fb      	str	r3, [r7, #12]
 800f88e:	e001      	b.n	800f894 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f890:	2300      	movs	r3, #0
 800f892:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f894:	68fb      	ldr	r3, [r7, #12]
}
 800f896:	4618      	mov	r0, r3
 800f898:	3714      	adds	r7, #20
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr
 800f8a2:	bf00      	nop
 800f8a4:	20001980 	.word	0x20001980

0800f8a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f8b0:	f7ff f954 	bl	800eb5c <xTaskGetTickCount>
 800f8b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f8b6:	4b0b      	ldr	r3, [pc, #44]	; (800f8e4 <prvSampleTimeNow+0x3c>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	68fa      	ldr	r2, [r7, #12]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d205      	bcs.n	800f8cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f8c0:	f000 f936 	bl	800fb30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	601a      	str	r2, [r3, #0]
 800f8ca:	e002      	b.n	800f8d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f8d2:	4a04      	ldr	r2, [pc, #16]	; (800f8e4 <prvSampleTimeNow+0x3c>)
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3710      	adds	r7, #16
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	20001990 	.word	0x20001990

0800f8e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b086      	sub	sp, #24
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]
 800f8f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	68ba      	ldr	r2, [r7, #8]
 800f8fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f906:	68ba      	ldr	r2, [r7, #8]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d812      	bhi.n	800f934 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	1ad2      	subs	r2, r2, r3
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	699b      	ldr	r3, [r3, #24]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d302      	bcc.n	800f922 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f91c:	2301      	movs	r3, #1
 800f91e:	617b      	str	r3, [r7, #20]
 800f920:	e01b      	b.n	800f95a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f922:	4b10      	ldr	r3, [pc, #64]	; (800f964 <prvInsertTimerInActiveList+0x7c>)
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	3304      	adds	r3, #4
 800f92a:	4619      	mov	r1, r3
 800f92c:	4610      	mov	r0, r2
 800f92e:	f7fd fce6 	bl	800d2fe <vListInsert>
 800f932:	e012      	b.n	800f95a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d206      	bcs.n	800f94a <prvInsertTimerInActiveList+0x62>
 800f93c:	68ba      	ldr	r2, [r7, #8]
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	429a      	cmp	r2, r3
 800f942:	d302      	bcc.n	800f94a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f944:	2301      	movs	r3, #1
 800f946:	617b      	str	r3, [r7, #20]
 800f948:	e007      	b.n	800f95a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f94a:	4b07      	ldr	r3, [pc, #28]	; (800f968 <prvInsertTimerInActiveList+0x80>)
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	3304      	adds	r3, #4
 800f952:	4619      	mov	r1, r3
 800f954:	4610      	mov	r0, r2
 800f956:	f7fd fcd2 	bl	800d2fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f95a:	697b      	ldr	r3, [r7, #20]
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3718      	adds	r7, #24
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	20001984 	.word	0x20001984
 800f968:	20001980 	.word	0x20001980

0800f96c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b08e      	sub	sp, #56	; 0x38
 800f970:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f972:	e0ca      	b.n	800fb0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2b00      	cmp	r3, #0
 800f978:	da18      	bge.n	800f9ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f97a:	1d3b      	adds	r3, r7, #4
 800f97c:	3304      	adds	r3, #4
 800f97e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f982:	2b00      	cmp	r3, #0
 800f984:	d10a      	bne.n	800f99c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f98a:	f383 8811 	msr	BASEPRI, r3
 800f98e:	f3bf 8f6f 	isb	sy
 800f992:	f3bf 8f4f 	dsb	sy
 800f996:	61fb      	str	r3, [r7, #28]
}
 800f998:	bf00      	nop
 800f99a:	e7fe      	b.n	800f99a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9a2:	6850      	ldr	r0, [r2, #4]
 800f9a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9a6:	6892      	ldr	r2, [r2, #8]
 800f9a8:	4611      	mov	r1, r2
 800f9aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f2c0 80aa 	blt.w	800fb08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ba:	695b      	ldr	r3, [r3, #20]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d004      	beq.n	800f9ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fd fcd3 	bl	800d370 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9ca:	463b      	mov	r3, r7
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7ff ff6b 	bl	800f8a8 <prvSampleTimeNow>
 800f9d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2b09      	cmp	r3, #9
 800f9d8:	f200 8097 	bhi.w	800fb0a <prvProcessReceivedCommands+0x19e>
 800f9dc:	a201      	add	r2, pc, #4	; (adr r2, 800f9e4 <prvProcessReceivedCommands+0x78>)
 800f9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e2:	bf00      	nop
 800f9e4:	0800fa0d 	.word	0x0800fa0d
 800f9e8:	0800fa0d 	.word	0x0800fa0d
 800f9ec:	0800fa0d 	.word	0x0800fa0d
 800f9f0:	0800fa81 	.word	0x0800fa81
 800f9f4:	0800fa95 	.word	0x0800fa95
 800f9f8:	0800fadf 	.word	0x0800fadf
 800f9fc:	0800fa0d 	.word	0x0800fa0d
 800fa00:	0800fa0d 	.word	0x0800fa0d
 800fa04:	0800fa81 	.word	0x0800fa81
 800fa08:	0800fa95 	.word	0x0800fa95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa12:	f043 0301 	orr.w	r3, r3, #1
 800fa16:	b2da      	uxtb	r2, r3
 800fa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa22:	699b      	ldr	r3, [r3, #24]
 800fa24:	18d1      	adds	r1, r2, r3
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa2c:	f7ff ff5c 	bl	800f8e8 <prvInsertTimerInActiveList>
 800fa30:	4603      	mov	r3, r0
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d069      	beq.n	800fb0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa44:	f003 0304 	and.w	r3, r3, #4
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d05e      	beq.n	800fb0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fa4c:	68ba      	ldr	r2, [r7, #8]
 800fa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa50:	699b      	ldr	r3, [r3, #24]
 800fa52:	441a      	add	r2, r3
 800fa54:	2300      	movs	r3, #0
 800fa56:	9300      	str	r3, [sp, #0]
 800fa58:	2300      	movs	r3, #0
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa5e:	f7ff fe05 	bl	800f66c <xTimerGenericCommand>
 800fa62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa64:	6a3b      	ldr	r3, [r7, #32]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d14f      	bne.n	800fb0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6e:	f383 8811 	msr	BASEPRI, r3
 800fa72:	f3bf 8f6f 	isb	sy
 800fa76:	f3bf 8f4f 	dsb	sy
 800fa7a:	61bb      	str	r3, [r7, #24]
}
 800fa7c:	bf00      	nop
 800fa7e:	e7fe      	b.n	800fa7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa86:	f023 0301 	bic.w	r3, r3, #1
 800fa8a:	b2da      	uxtb	r2, r3
 800fa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fa92:	e03a      	b.n	800fb0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa9a:	f043 0301 	orr.w	r3, r3, #1
 800fa9e:	b2da      	uxtb	r2, r3
 800faa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800faa6:	68ba      	ldr	r2, [r7, #8]
 800faa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800faac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faae:	699b      	ldr	r3, [r3, #24]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d10a      	bne.n	800faca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab8:	f383 8811 	msr	BASEPRI, r3
 800fabc:	f3bf 8f6f 	isb	sy
 800fac0:	f3bf 8f4f 	dsb	sy
 800fac4:	617b      	str	r3, [r7, #20]
}
 800fac6:	bf00      	nop
 800fac8:	e7fe      	b.n	800fac8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800faca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800facc:	699a      	ldr	r2, [r3, #24]
 800face:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad0:	18d1      	adds	r1, r2, r3
 800fad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fad8:	f7ff ff06 	bl	800f8e8 <prvInsertTimerInActiveList>
					break;
 800fadc:	e015      	b.n	800fb0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fae4:	f003 0302 	and.w	r3, r3, #2
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d103      	bne.n	800faf4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800faec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800faee:	f000 fbdf 	bl	80102b0 <vPortFree>
 800faf2:	e00a      	b.n	800fb0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800faf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fafa:	f023 0301 	bic.w	r3, r3, #1
 800fafe:	b2da      	uxtb	r2, r3
 800fb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fb06:	e000      	b.n	800fb0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fb08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb0a:	4b08      	ldr	r3, [pc, #32]	; (800fb2c <prvProcessReceivedCommands+0x1c0>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	1d39      	adds	r1, r7, #4
 800fb10:	2200      	movs	r2, #0
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fe f8da 	bl	800dccc <xQueueReceive>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	f47f af2a 	bne.w	800f974 <prvProcessReceivedCommands+0x8>
	}
}
 800fb20:	bf00      	nop
 800fb22:	bf00      	nop
 800fb24:	3730      	adds	r7, #48	; 0x30
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	20001988 	.word	0x20001988

0800fb30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b088      	sub	sp, #32
 800fb34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb36:	e048      	b.n	800fbca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb38:	4b2d      	ldr	r3, [pc, #180]	; (800fbf0 <prvSwitchTimerLists+0xc0>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb42:	4b2b      	ldr	r3, [pc, #172]	; (800fbf0 <prvSwitchTimerLists+0xc0>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	68db      	ldr	r3, [r3, #12]
 800fb4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	3304      	adds	r3, #4
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7fd fc0d 	bl	800d370 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	6a1b      	ldr	r3, [r3, #32]
 800fb5a:	68f8      	ldr	r0, [r7, #12]
 800fb5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb64:	f003 0304 	and.w	r3, r3, #4
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d02e      	beq.n	800fbca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	699b      	ldr	r3, [r3, #24]
 800fb70:	693a      	ldr	r2, [r7, #16]
 800fb72:	4413      	add	r3, r2
 800fb74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb76:	68ba      	ldr	r2, [r7, #8]
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d90e      	bls.n	800fb9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	68ba      	ldr	r2, [r7, #8]
 800fb82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	68fa      	ldr	r2, [r7, #12]
 800fb88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb8a:	4b19      	ldr	r3, [pc, #100]	; (800fbf0 <prvSwitchTimerLists+0xc0>)
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	3304      	adds	r3, #4
 800fb92:	4619      	mov	r1, r3
 800fb94:	4610      	mov	r0, r2
 800fb96:	f7fd fbb2 	bl	800d2fe <vListInsert>
 800fb9a:	e016      	b.n	800fbca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	2300      	movs	r3, #0
 800fba2:	693a      	ldr	r2, [r7, #16]
 800fba4:	2100      	movs	r1, #0
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	f7ff fd60 	bl	800f66c <xTimerGenericCommand>
 800fbac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d10a      	bne.n	800fbca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb8:	f383 8811 	msr	BASEPRI, r3
 800fbbc:	f3bf 8f6f 	isb	sy
 800fbc0:	f3bf 8f4f 	dsb	sy
 800fbc4:	603b      	str	r3, [r7, #0]
}
 800fbc6:	bf00      	nop
 800fbc8:	e7fe      	b.n	800fbc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbca:	4b09      	ldr	r3, [pc, #36]	; (800fbf0 <prvSwitchTimerLists+0xc0>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d1b1      	bne.n	800fb38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fbd4:	4b06      	ldr	r3, [pc, #24]	; (800fbf0 <prvSwitchTimerLists+0xc0>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fbda:	4b06      	ldr	r3, [pc, #24]	; (800fbf4 <prvSwitchTimerLists+0xc4>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	4a04      	ldr	r2, [pc, #16]	; (800fbf0 <prvSwitchTimerLists+0xc0>)
 800fbe0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fbe2:	4a04      	ldr	r2, [pc, #16]	; (800fbf4 <prvSwitchTimerLists+0xc4>)
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	6013      	str	r3, [r2, #0]
}
 800fbe8:	bf00      	nop
 800fbea:	3718      	adds	r7, #24
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	20001980 	.word	0x20001980
 800fbf4:	20001984 	.word	0x20001984

0800fbf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fbfe:	f000 f969 	bl	800fed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fc02:	4b15      	ldr	r3, [pc, #84]	; (800fc58 <prvCheckForValidListAndQueue+0x60>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d120      	bne.n	800fc4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fc0a:	4814      	ldr	r0, [pc, #80]	; (800fc5c <prvCheckForValidListAndQueue+0x64>)
 800fc0c:	f7fd fb26 	bl	800d25c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fc10:	4813      	ldr	r0, [pc, #76]	; (800fc60 <prvCheckForValidListAndQueue+0x68>)
 800fc12:	f7fd fb23 	bl	800d25c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc16:	4b13      	ldr	r3, [pc, #76]	; (800fc64 <prvCheckForValidListAndQueue+0x6c>)
 800fc18:	4a10      	ldr	r2, [pc, #64]	; (800fc5c <prvCheckForValidListAndQueue+0x64>)
 800fc1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fc1c:	4b12      	ldr	r3, [pc, #72]	; (800fc68 <prvCheckForValidListAndQueue+0x70>)
 800fc1e:	4a10      	ldr	r2, [pc, #64]	; (800fc60 <prvCheckForValidListAndQueue+0x68>)
 800fc20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc22:	2300      	movs	r3, #0
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	4b11      	ldr	r3, [pc, #68]	; (800fc6c <prvCheckForValidListAndQueue+0x74>)
 800fc28:	4a11      	ldr	r2, [pc, #68]	; (800fc70 <prvCheckForValidListAndQueue+0x78>)
 800fc2a:	2110      	movs	r1, #16
 800fc2c:	200a      	movs	r0, #10
 800fc2e:	f7fd fc31 	bl	800d494 <xQueueGenericCreateStatic>
 800fc32:	4603      	mov	r3, r0
 800fc34:	4a08      	ldr	r2, [pc, #32]	; (800fc58 <prvCheckForValidListAndQueue+0x60>)
 800fc36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fc38:	4b07      	ldr	r3, [pc, #28]	; (800fc58 <prvCheckForValidListAndQueue+0x60>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d005      	beq.n	800fc4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc40:	4b05      	ldr	r3, [pc, #20]	; (800fc58 <prvCheckForValidListAndQueue+0x60>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	490b      	ldr	r1, [pc, #44]	; (800fc74 <prvCheckForValidListAndQueue+0x7c>)
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7fe fbf8 	bl	800e43c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc4c:	f000 f972 	bl	800ff34 <vPortExitCritical>
}
 800fc50:	bf00      	nop
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
 800fc56:	bf00      	nop
 800fc58:	20001988 	.word	0x20001988
 800fc5c:	20001958 	.word	0x20001958
 800fc60:	2000196c 	.word	0x2000196c
 800fc64:	20001980 	.word	0x20001980
 800fc68:	20001984 	.word	0x20001984
 800fc6c:	20001a34 	.word	0x20001a34
 800fc70:	20001994 	.word	0x20001994
 800fc74:	08010774 	.word	0x08010774

0800fc78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b085      	sub	sp, #20
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	3b04      	subs	r3, #4
 800fc88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fc90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	3b04      	subs	r3, #4
 800fc96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	f023 0201 	bic.w	r2, r3, #1
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	3b04      	subs	r3, #4
 800fca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fca8:	4a0c      	ldr	r2, [pc, #48]	; (800fcdc <pxPortInitialiseStack+0x64>)
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	3b14      	subs	r3, #20
 800fcb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fcb4:	687a      	ldr	r2, [r7, #4]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	3b04      	subs	r3, #4
 800fcbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f06f 0202 	mvn.w	r2, #2
 800fcc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	3b20      	subs	r3, #32
 800fccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fcce:	68fb      	ldr	r3, [r7, #12]
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3714      	adds	r7, #20
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr
 800fcdc:	0800fce1 	.word	0x0800fce1

0800fce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fce0:	b480      	push	{r7}
 800fce2:	b085      	sub	sp, #20
 800fce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fce6:	2300      	movs	r3, #0
 800fce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fcea:	4b12      	ldr	r3, [pc, #72]	; (800fd34 <prvTaskExitError+0x54>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcf2:	d00a      	beq.n	800fd0a <prvTaskExitError+0x2a>
	__asm volatile
 800fcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf8:	f383 8811 	msr	BASEPRI, r3
 800fcfc:	f3bf 8f6f 	isb	sy
 800fd00:	f3bf 8f4f 	dsb	sy
 800fd04:	60fb      	str	r3, [r7, #12]
}
 800fd06:	bf00      	nop
 800fd08:	e7fe      	b.n	800fd08 <prvTaskExitError+0x28>
	__asm volatile
 800fd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0e:	f383 8811 	msr	BASEPRI, r3
 800fd12:	f3bf 8f6f 	isb	sy
 800fd16:	f3bf 8f4f 	dsb	sy
 800fd1a:	60bb      	str	r3, [r7, #8]
}
 800fd1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fd1e:	bf00      	nop
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d0fc      	beq.n	800fd20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fd26:	bf00      	nop
 800fd28:	bf00      	nop
 800fd2a:	3714      	adds	r7, #20
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr
 800fd34:	2000001c 	.word	0x2000001c
	...

0800fd40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd40:	4b07      	ldr	r3, [pc, #28]	; (800fd60 <pxCurrentTCBConst2>)
 800fd42:	6819      	ldr	r1, [r3, #0]
 800fd44:	6808      	ldr	r0, [r1, #0]
 800fd46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4a:	f380 8809 	msr	PSP, r0
 800fd4e:	f3bf 8f6f 	isb	sy
 800fd52:	f04f 0000 	mov.w	r0, #0
 800fd56:	f380 8811 	msr	BASEPRI, r0
 800fd5a:	4770      	bx	lr
 800fd5c:	f3af 8000 	nop.w

0800fd60 <pxCurrentTCBConst2>:
 800fd60:	20001458 	.word	0x20001458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd64:	bf00      	nop
 800fd66:	bf00      	nop

0800fd68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd68:	4808      	ldr	r0, [pc, #32]	; (800fd8c <prvPortStartFirstTask+0x24>)
 800fd6a:	6800      	ldr	r0, [r0, #0]
 800fd6c:	6800      	ldr	r0, [r0, #0]
 800fd6e:	f380 8808 	msr	MSP, r0
 800fd72:	f04f 0000 	mov.w	r0, #0
 800fd76:	f380 8814 	msr	CONTROL, r0
 800fd7a:	b662      	cpsie	i
 800fd7c:	b661      	cpsie	f
 800fd7e:	f3bf 8f4f 	dsb	sy
 800fd82:	f3bf 8f6f 	isb	sy
 800fd86:	df00      	svc	0
 800fd88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd8a:	bf00      	nop
 800fd8c:	e000ed08 	.word	0xe000ed08

0800fd90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b086      	sub	sp, #24
 800fd94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fd96:	4b46      	ldr	r3, [pc, #280]	; (800feb0 <xPortStartScheduler+0x120>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	4a46      	ldr	r2, [pc, #280]	; (800feb4 <xPortStartScheduler+0x124>)
 800fd9c:	4293      	cmp	r3, r2
 800fd9e:	d10a      	bne.n	800fdb6 <xPortStartScheduler+0x26>
	__asm volatile
 800fda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda4:	f383 8811 	msr	BASEPRI, r3
 800fda8:	f3bf 8f6f 	isb	sy
 800fdac:	f3bf 8f4f 	dsb	sy
 800fdb0:	613b      	str	r3, [r7, #16]
}
 800fdb2:	bf00      	nop
 800fdb4:	e7fe      	b.n	800fdb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fdb6:	4b3e      	ldr	r3, [pc, #248]	; (800feb0 <xPortStartScheduler+0x120>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a3f      	ldr	r2, [pc, #252]	; (800feb8 <xPortStartScheduler+0x128>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d10a      	bne.n	800fdd6 <xPortStartScheduler+0x46>
	__asm volatile
 800fdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc4:	f383 8811 	msr	BASEPRI, r3
 800fdc8:	f3bf 8f6f 	isb	sy
 800fdcc:	f3bf 8f4f 	dsb	sy
 800fdd0:	60fb      	str	r3, [r7, #12]
}
 800fdd2:	bf00      	nop
 800fdd4:	e7fe      	b.n	800fdd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fdd6:	4b39      	ldr	r3, [pc, #228]	; (800febc <xPortStartScheduler+0x12c>)
 800fdd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	22ff      	movs	r2, #255	; 0xff
 800fde6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fdf0:	78fb      	ldrb	r3, [r7, #3]
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fdf8:	b2da      	uxtb	r2, r3
 800fdfa:	4b31      	ldr	r3, [pc, #196]	; (800fec0 <xPortStartScheduler+0x130>)
 800fdfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fdfe:	4b31      	ldr	r3, [pc, #196]	; (800fec4 <xPortStartScheduler+0x134>)
 800fe00:	2207      	movs	r2, #7
 800fe02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe04:	e009      	b.n	800fe1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fe06:	4b2f      	ldr	r3, [pc, #188]	; (800fec4 <xPortStartScheduler+0x134>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	4a2d      	ldr	r2, [pc, #180]	; (800fec4 <xPortStartScheduler+0x134>)
 800fe0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe10:	78fb      	ldrb	r3, [r7, #3]
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	005b      	lsls	r3, r3, #1
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe1a:	78fb      	ldrb	r3, [r7, #3]
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe22:	2b80      	cmp	r3, #128	; 0x80
 800fe24:	d0ef      	beq.n	800fe06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe26:	4b27      	ldr	r3, [pc, #156]	; (800fec4 <xPortStartScheduler+0x134>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f1c3 0307 	rsb	r3, r3, #7
 800fe2e:	2b04      	cmp	r3, #4
 800fe30:	d00a      	beq.n	800fe48 <xPortStartScheduler+0xb8>
	__asm volatile
 800fe32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe36:	f383 8811 	msr	BASEPRI, r3
 800fe3a:	f3bf 8f6f 	isb	sy
 800fe3e:	f3bf 8f4f 	dsb	sy
 800fe42:	60bb      	str	r3, [r7, #8]
}
 800fe44:	bf00      	nop
 800fe46:	e7fe      	b.n	800fe46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe48:	4b1e      	ldr	r3, [pc, #120]	; (800fec4 <xPortStartScheduler+0x134>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	021b      	lsls	r3, r3, #8
 800fe4e:	4a1d      	ldr	r2, [pc, #116]	; (800fec4 <xPortStartScheduler+0x134>)
 800fe50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe52:	4b1c      	ldr	r3, [pc, #112]	; (800fec4 <xPortStartScheduler+0x134>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fe5a:	4a1a      	ldr	r2, [pc, #104]	; (800fec4 <xPortStartScheduler+0x134>)
 800fe5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	b2da      	uxtb	r2, r3
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe66:	4b18      	ldr	r3, [pc, #96]	; (800fec8 <xPortStartScheduler+0x138>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4a17      	ldr	r2, [pc, #92]	; (800fec8 <xPortStartScheduler+0x138>)
 800fe6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe72:	4b15      	ldr	r3, [pc, #84]	; (800fec8 <xPortStartScheduler+0x138>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	4a14      	ldr	r2, [pc, #80]	; (800fec8 <xPortStartScheduler+0x138>)
 800fe78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe7e:	f000 f8dd 	bl	801003c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe82:	4b12      	ldr	r3, [pc, #72]	; (800fecc <xPortStartScheduler+0x13c>)
 800fe84:	2200      	movs	r2, #0
 800fe86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fe88:	f000 f8fc 	bl	8010084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe8c:	4b10      	ldr	r3, [pc, #64]	; (800fed0 <xPortStartScheduler+0x140>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a0f      	ldr	r2, [pc, #60]	; (800fed0 <xPortStartScheduler+0x140>)
 800fe92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fe96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fe98:	f7ff ff66 	bl	800fd68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fe9c:	f7fe ff3a 	bl	800ed14 <vTaskSwitchContext>
	prvTaskExitError();
 800fea0:	f7ff ff1e 	bl	800fce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fea4:	2300      	movs	r3, #0
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3718      	adds	r7, #24
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	e000ed00 	.word	0xe000ed00
 800feb4:	410fc271 	.word	0x410fc271
 800feb8:	410fc270 	.word	0x410fc270
 800febc:	e000e400 	.word	0xe000e400
 800fec0:	20001a84 	.word	0x20001a84
 800fec4:	20001a88 	.word	0x20001a88
 800fec8:	e000ed20 	.word	0xe000ed20
 800fecc:	2000001c 	.word	0x2000001c
 800fed0:	e000ef34 	.word	0xe000ef34

0800fed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fed4:	b480      	push	{r7}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
	__asm volatile
 800feda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fede:	f383 8811 	msr	BASEPRI, r3
 800fee2:	f3bf 8f6f 	isb	sy
 800fee6:	f3bf 8f4f 	dsb	sy
 800feea:	607b      	str	r3, [r7, #4]
}
 800feec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800feee:	4b0f      	ldr	r3, [pc, #60]	; (800ff2c <vPortEnterCritical+0x58>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	3301      	adds	r3, #1
 800fef4:	4a0d      	ldr	r2, [pc, #52]	; (800ff2c <vPortEnterCritical+0x58>)
 800fef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fef8:	4b0c      	ldr	r3, [pc, #48]	; (800ff2c <vPortEnterCritical+0x58>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d10f      	bne.n	800ff20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff00:	4b0b      	ldr	r3, [pc, #44]	; (800ff30 <vPortEnterCritical+0x5c>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d00a      	beq.n	800ff20 <vPortEnterCritical+0x4c>
	__asm volatile
 800ff0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0e:	f383 8811 	msr	BASEPRI, r3
 800ff12:	f3bf 8f6f 	isb	sy
 800ff16:	f3bf 8f4f 	dsb	sy
 800ff1a:	603b      	str	r3, [r7, #0]
}
 800ff1c:	bf00      	nop
 800ff1e:	e7fe      	b.n	800ff1e <vPortEnterCritical+0x4a>
	}
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	2000001c 	.word	0x2000001c
 800ff30:	e000ed04 	.word	0xe000ed04

0800ff34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ff3a:	4b12      	ldr	r3, [pc, #72]	; (800ff84 <vPortExitCritical+0x50>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d10a      	bne.n	800ff58 <vPortExitCritical+0x24>
	__asm volatile
 800ff42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff46:	f383 8811 	msr	BASEPRI, r3
 800ff4a:	f3bf 8f6f 	isb	sy
 800ff4e:	f3bf 8f4f 	dsb	sy
 800ff52:	607b      	str	r3, [r7, #4]
}
 800ff54:	bf00      	nop
 800ff56:	e7fe      	b.n	800ff56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ff58:	4b0a      	ldr	r3, [pc, #40]	; (800ff84 <vPortExitCritical+0x50>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	3b01      	subs	r3, #1
 800ff5e:	4a09      	ldr	r2, [pc, #36]	; (800ff84 <vPortExitCritical+0x50>)
 800ff60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff62:	4b08      	ldr	r3, [pc, #32]	; (800ff84 <vPortExitCritical+0x50>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d105      	bne.n	800ff76 <vPortExitCritical+0x42>
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	f383 8811 	msr	BASEPRI, r3
}
 800ff74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff76:	bf00      	nop
 800ff78:	370c      	adds	r7, #12
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	2000001c 	.word	0x2000001c
	...

0800ff90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ff90:	f3ef 8009 	mrs	r0, PSP
 800ff94:	f3bf 8f6f 	isb	sy
 800ff98:	4b15      	ldr	r3, [pc, #84]	; (800fff0 <pxCurrentTCBConst>)
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	f01e 0f10 	tst.w	lr, #16
 800ffa0:	bf08      	it	eq
 800ffa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ffa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffaa:	6010      	str	r0, [r2, #0]
 800ffac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ffb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ffb4:	f380 8811 	msr	BASEPRI, r0
 800ffb8:	f3bf 8f4f 	dsb	sy
 800ffbc:	f3bf 8f6f 	isb	sy
 800ffc0:	f7fe fea8 	bl	800ed14 <vTaskSwitchContext>
 800ffc4:	f04f 0000 	mov.w	r0, #0
 800ffc8:	f380 8811 	msr	BASEPRI, r0
 800ffcc:	bc09      	pop	{r0, r3}
 800ffce:	6819      	ldr	r1, [r3, #0]
 800ffd0:	6808      	ldr	r0, [r1, #0]
 800ffd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd6:	f01e 0f10 	tst.w	lr, #16
 800ffda:	bf08      	it	eq
 800ffdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ffe0:	f380 8809 	msr	PSP, r0
 800ffe4:	f3bf 8f6f 	isb	sy
 800ffe8:	4770      	bx	lr
 800ffea:	bf00      	nop
 800ffec:	f3af 8000 	nop.w

0800fff0 <pxCurrentTCBConst>:
 800fff0:	20001458 	.word	0x20001458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fff4:	bf00      	nop
 800fff6:	bf00      	nop

0800fff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
	__asm volatile
 800fffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010002:	f383 8811 	msr	BASEPRI, r3
 8010006:	f3bf 8f6f 	isb	sy
 801000a:	f3bf 8f4f 	dsb	sy
 801000e:	607b      	str	r3, [r7, #4]
}
 8010010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010012:	f7fe fdc5 	bl	800eba0 <xTaskIncrementTick>
 8010016:	4603      	mov	r3, r0
 8010018:	2b00      	cmp	r3, #0
 801001a:	d003      	beq.n	8010024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801001c:	4b06      	ldr	r3, [pc, #24]	; (8010038 <xPortSysTickHandler+0x40>)
 801001e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010022:	601a      	str	r2, [r3, #0]
 8010024:	2300      	movs	r3, #0
 8010026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	f383 8811 	msr	BASEPRI, r3
}
 801002e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010030:	bf00      	nop
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	e000ed04 	.word	0xe000ed04

0801003c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801003c:	b480      	push	{r7}
 801003e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010040:	4b0b      	ldr	r3, [pc, #44]	; (8010070 <vPortSetupTimerInterrupt+0x34>)
 8010042:	2200      	movs	r2, #0
 8010044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010046:	4b0b      	ldr	r3, [pc, #44]	; (8010074 <vPortSetupTimerInterrupt+0x38>)
 8010048:	2200      	movs	r2, #0
 801004a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801004c:	4b0a      	ldr	r3, [pc, #40]	; (8010078 <vPortSetupTimerInterrupt+0x3c>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4a0a      	ldr	r2, [pc, #40]	; (801007c <vPortSetupTimerInterrupt+0x40>)
 8010052:	fba2 2303 	umull	r2, r3, r2, r3
 8010056:	099b      	lsrs	r3, r3, #6
 8010058:	4a09      	ldr	r2, [pc, #36]	; (8010080 <vPortSetupTimerInterrupt+0x44>)
 801005a:	3b01      	subs	r3, #1
 801005c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801005e:	4b04      	ldr	r3, [pc, #16]	; (8010070 <vPortSetupTimerInterrupt+0x34>)
 8010060:	2207      	movs	r2, #7
 8010062:	601a      	str	r2, [r3, #0]
}
 8010064:	bf00      	nop
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	e000e010 	.word	0xe000e010
 8010074:	e000e018 	.word	0xe000e018
 8010078:	20000010 	.word	0x20000010
 801007c:	10624dd3 	.word	0x10624dd3
 8010080:	e000e014 	.word	0xe000e014

08010084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010094 <vPortEnableVFP+0x10>
 8010088:	6801      	ldr	r1, [r0, #0]
 801008a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801008e:	6001      	str	r1, [r0, #0]
 8010090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010092:	bf00      	nop
 8010094:	e000ed88 	.word	0xe000ed88

08010098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010098:	b480      	push	{r7}
 801009a:	b085      	sub	sp, #20
 801009c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801009e:	f3ef 8305 	mrs	r3, IPSR
 80100a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2b0f      	cmp	r3, #15
 80100a8:	d914      	bls.n	80100d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80100aa:	4a17      	ldr	r2, [pc, #92]	; (8010108 <vPortValidateInterruptPriority+0x70>)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	4413      	add	r3, r2
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80100b4:	4b15      	ldr	r3, [pc, #84]	; (801010c <vPortValidateInterruptPriority+0x74>)
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	7afa      	ldrb	r2, [r7, #11]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d20a      	bcs.n	80100d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80100be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c2:	f383 8811 	msr	BASEPRI, r3
 80100c6:	f3bf 8f6f 	isb	sy
 80100ca:	f3bf 8f4f 	dsb	sy
 80100ce:	607b      	str	r3, [r7, #4]
}
 80100d0:	bf00      	nop
 80100d2:	e7fe      	b.n	80100d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80100d4:	4b0e      	ldr	r3, [pc, #56]	; (8010110 <vPortValidateInterruptPriority+0x78>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80100dc:	4b0d      	ldr	r3, [pc, #52]	; (8010114 <vPortValidateInterruptPriority+0x7c>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d90a      	bls.n	80100fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80100e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e8:	f383 8811 	msr	BASEPRI, r3
 80100ec:	f3bf 8f6f 	isb	sy
 80100f0:	f3bf 8f4f 	dsb	sy
 80100f4:	603b      	str	r3, [r7, #0]
}
 80100f6:	bf00      	nop
 80100f8:	e7fe      	b.n	80100f8 <vPortValidateInterruptPriority+0x60>
	}
 80100fa:	bf00      	nop
 80100fc:	3714      	adds	r7, #20
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	e000e3f0 	.word	0xe000e3f0
 801010c:	20001a84 	.word	0x20001a84
 8010110:	e000ed0c 	.word	0xe000ed0c
 8010114:	20001a88 	.word	0x20001a88

08010118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b08a      	sub	sp, #40	; 0x28
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010120:	2300      	movs	r3, #0
 8010122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010124:	f7fe fc6e 	bl	800ea04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010128:	4b5b      	ldr	r3, [pc, #364]	; (8010298 <pvPortMalloc+0x180>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d101      	bne.n	8010134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010130:	f000 f920 	bl	8010374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010134:	4b59      	ldr	r3, [pc, #356]	; (801029c <pvPortMalloc+0x184>)
 8010136:	681a      	ldr	r2, [r3, #0]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	4013      	ands	r3, r2
 801013c:	2b00      	cmp	r3, #0
 801013e:	f040 8093 	bne.w	8010268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d01d      	beq.n	8010184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010148:	2208      	movs	r2, #8
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	4413      	add	r3, r2
 801014e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f003 0307 	and.w	r3, r3, #7
 8010156:	2b00      	cmp	r3, #0
 8010158:	d014      	beq.n	8010184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f023 0307 	bic.w	r3, r3, #7
 8010160:	3308      	adds	r3, #8
 8010162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f003 0307 	and.w	r3, r3, #7
 801016a:	2b00      	cmp	r3, #0
 801016c:	d00a      	beq.n	8010184 <pvPortMalloc+0x6c>
	__asm volatile
 801016e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010172:	f383 8811 	msr	BASEPRI, r3
 8010176:	f3bf 8f6f 	isb	sy
 801017a:	f3bf 8f4f 	dsb	sy
 801017e:	617b      	str	r3, [r7, #20]
}
 8010180:	bf00      	nop
 8010182:	e7fe      	b.n	8010182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d06e      	beq.n	8010268 <pvPortMalloc+0x150>
 801018a:	4b45      	ldr	r3, [pc, #276]	; (80102a0 <pvPortMalloc+0x188>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	429a      	cmp	r2, r3
 8010192:	d869      	bhi.n	8010268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010194:	4b43      	ldr	r3, [pc, #268]	; (80102a4 <pvPortMalloc+0x18c>)
 8010196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010198:	4b42      	ldr	r3, [pc, #264]	; (80102a4 <pvPortMalloc+0x18c>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801019e:	e004      	b.n	80101aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80101a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80101a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d903      	bls.n	80101bc <pvPortMalloc+0xa4>
 80101b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d1f1      	bne.n	80101a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80101bc:	4b36      	ldr	r3, [pc, #216]	; (8010298 <pvPortMalloc+0x180>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d050      	beq.n	8010268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80101c6:	6a3b      	ldr	r3, [r7, #32]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2208      	movs	r2, #8
 80101cc:	4413      	add	r3, r2
 80101ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80101d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	6a3b      	ldr	r3, [r7, #32]
 80101d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80101d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101da:	685a      	ldr	r2, [r3, #4]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	1ad2      	subs	r2, r2, r3
 80101e0:	2308      	movs	r3, #8
 80101e2:	005b      	lsls	r3, r3, #1
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d91f      	bls.n	8010228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80101e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	4413      	add	r3, r2
 80101ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	f003 0307 	and.w	r3, r3, #7
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d00a      	beq.n	8010210 <pvPortMalloc+0xf8>
	__asm volatile
 80101fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101fe:	f383 8811 	msr	BASEPRI, r3
 8010202:	f3bf 8f6f 	isb	sy
 8010206:	f3bf 8f4f 	dsb	sy
 801020a:	613b      	str	r3, [r7, #16]
}
 801020c:	bf00      	nop
 801020e:	e7fe      	b.n	801020e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010212:	685a      	ldr	r2, [r3, #4]
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	1ad2      	subs	r2, r2, r3
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021e:	687a      	ldr	r2, [r7, #4]
 8010220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010222:	69b8      	ldr	r0, [r7, #24]
 8010224:	f000 f908 	bl	8010438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010228:	4b1d      	ldr	r3, [pc, #116]	; (80102a0 <pvPortMalloc+0x188>)
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	1ad3      	subs	r3, r2, r3
 8010232:	4a1b      	ldr	r2, [pc, #108]	; (80102a0 <pvPortMalloc+0x188>)
 8010234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010236:	4b1a      	ldr	r3, [pc, #104]	; (80102a0 <pvPortMalloc+0x188>)
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	4b1b      	ldr	r3, [pc, #108]	; (80102a8 <pvPortMalloc+0x190>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	429a      	cmp	r2, r3
 8010240:	d203      	bcs.n	801024a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010242:	4b17      	ldr	r3, [pc, #92]	; (80102a0 <pvPortMalloc+0x188>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4a18      	ldr	r2, [pc, #96]	; (80102a8 <pvPortMalloc+0x190>)
 8010248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024c:	685a      	ldr	r2, [r3, #4]
 801024e:	4b13      	ldr	r3, [pc, #76]	; (801029c <pvPortMalloc+0x184>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	431a      	orrs	r2, r3
 8010254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025a:	2200      	movs	r2, #0
 801025c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801025e:	4b13      	ldr	r3, [pc, #76]	; (80102ac <pvPortMalloc+0x194>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	3301      	adds	r3, #1
 8010264:	4a11      	ldr	r2, [pc, #68]	; (80102ac <pvPortMalloc+0x194>)
 8010266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010268:	f7fe fbda 	bl	800ea20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	f003 0307 	and.w	r3, r3, #7
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00a      	beq.n	801028c <pvPortMalloc+0x174>
	__asm volatile
 8010276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027a:	f383 8811 	msr	BASEPRI, r3
 801027e:	f3bf 8f6f 	isb	sy
 8010282:	f3bf 8f4f 	dsb	sy
 8010286:	60fb      	str	r3, [r7, #12]
}
 8010288:	bf00      	nop
 801028a:	e7fe      	b.n	801028a <pvPortMalloc+0x172>
	return pvReturn;
 801028c:	69fb      	ldr	r3, [r7, #28]
}
 801028e:	4618      	mov	r0, r3
 8010290:	3728      	adds	r7, #40	; 0x28
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	2000264c 	.word	0x2000264c
 801029c:	20002660 	.word	0x20002660
 80102a0:	20002650 	.word	0x20002650
 80102a4:	20002644 	.word	0x20002644
 80102a8:	20002654 	.word	0x20002654
 80102ac:	20002658 	.word	0x20002658

080102b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b086      	sub	sp, #24
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d04d      	beq.n	801035e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80102c2:	2308      	movs	r3, #8
 80102c4:	425b      	negs	r3, r3
 80102c6:	697a      	ldr	r2, [r7, #20]
 80102c8:	4413      	add	r3, r2
 80102ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	685a      	ldr	r2, [r3, #4]
 80102d4:	4b24      	ldr	r3, [pc, #144]	; (8010368 <vPortFree+0xb8>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4013      	ands	r3, r2
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d10a      	bne.n	80102f4 <vPortFree+0x44>
	__asm volatile
 80102de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e2:	f383 8811 	msr	BASEPRI, r3
 80102e6:	f3bf 8f6f 	isb	sy
 80102ea:	f3bf 8f4f 	dsb	sy
 80102ee:	60fb      	str	r3, [r7, #12]
}
 80102f0:	bf00      	nop
 80102f2:	e7fe      	b.n	80102f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d00a      	beq.n	8010312 <vPortFree+0x62>
	__asm volatile
 80102fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010300:	f383 8811 	msr	BASEPRI, r3
 8010304:	f3bf 8f6f 	isb	sy
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	60bb      	str	r3, [r7, #8]
}
 801030e:	bf00      	nop
 8010310:	e7fe      	b.n	8010310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	685a      	ldr	r2, [r3, #4]
 8010316:	4b14      	ldr	r3, [pc, #80]	; (8010368 <vPortFree+0xb8>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4013      	ands	r3, r2
 801031c:	2b00      	cmp	r3, #0
 801031e:	d01e      	beq.n	801035e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d11a      	bne.n	801035e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	685a      	ldr	r2, [r3, #4]
 801032c:	4b0e      	ldr	r3, [pc, #56]	; (8010368 <vPortFree+0xb8>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	43db      	mvns	r3, r3
 8010332:	401a      	ands	r2, r3
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010338:	f7fe fb64 	bl	800ea04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	685a      	ldr	r2, [r3, #4]
 8010340:	4b0a      	ldr	r3, [pc, #40]	; (801036c <vPortFree+0xbc>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4413      	add	r3, r2
 8010346:	4a09      	ldr	r2, [pc, #36]	; (801036c <vPortFree+0xbc>)
 8010348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801034a:	6938      	ldr	r0, [r7, #16]
 801034c:	f000 f874 	bl	8010438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010350:	4b07      	ldr	r3, [pc, #28]	; (8010370 <vPortFree+0xc0>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	3301      	adds	r3, #1
 8010356:	4a06      	ldr	r2, [pc, #24]	; (8010370 <vPortFree+0xc0>)
 8010358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801035a:	f7fe fb61 	bl	800ea20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801035e:	bf00      	nop
 8010360:	3718      	adds	r7, #24
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	20002660 	.word	0x20002660
 801036c:	20002650 	.word	0x20002650
 8010370:	2000265c 	.word	0x2000265c

08010374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801037a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801037e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010380:	4b27      	ldr	r3, [pc, #156]	; (8010420 <prvHeapInit+0xac>)
 8010382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f003 0307 	and.w	r3, r3, #7
 801038a:	2b00      	cmp	r3, #0
 801038c:	d00c      	beq.n	80103a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	3307      	adds	r3, #7
 8010392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f023 0307 	bic.w	r3, r3, #7
 801039a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801039c:	68ba      	ldr	r2, [r7, #8]
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	4a1f      	ldr	r2, [pc, #124]	; (8010420 <prvHeapInit+0xac>)
 80103a4:	4413      	add	r3, r2
 80103a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80103ac:	4a1d      	ldr	r2, [pc, #116]	; (8010424 <prvHeapInit+0xb0>)
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80103b2:	4b1c      	ldr	r3, [pc, #112]	; (8010424 <prvHeapInit+0xb0>)
 80103b4:	2200      	movs	r2, #0
 80103b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	68ba      	ldr	r2, [r7, #8]
 80103bc:	4413      	add	r3, r2
 80103be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80103c0:	2208      	movs	r2, #8
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	1a9b      	subs	r3, r3, r2
 80103c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f023 0307 	bic.w	r3, r3, #7
 80103ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	4a15      	ldr	r2, [pc, #84]	; (8010428 <prvHeapInit+0xb4>)
 80103d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80103d6:	4b14      	ldr	r3, [pc, #80]	; (8010428 <prvHeapInit+0xb4>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	2200      	movs	r2, #0
 80103dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80103de:	4b12      	ldr	r3, [pc, #72]	; (8010428 <prvHeapInit+0xb4>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	2200      	movs	r2, #0
 80103e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	1ad2      	subs	r2, r2, r3
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80103f4:	4b0c      	ldr	r3, [pc, #48]	; (8010428 <prvHeapInit+0xb4>)
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	4a0a      	ldr	r2, [pc, #40]	; (801042c <prvHeapInit+0xb8>)
 8010402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	4a09      	ldr	r2, [pc, #36]	; (8010430 <prvHeapInit+0xbc>)
 801040a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801040c:	4b09      	ldr	r3, [pc, #36]	; (8010434 <prvHeapInit+0xc0>)
 801040e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010412:	601a      	str	r2, [r3, #0]
}
 8010414:	bf00      	nop
 8010416:	3714      	adds	r7, #20
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr
 8010420:	20001a8c 	.word	0x20001a8c
 8010424:	20002644 	.word	0x20002644
 8010428:	2000264c 	.word	0x2000264c
 801042c:	20002654 	.word	0x20002654
 8010430:	20002650 	.word	0x20002650
 8010434:	20002660 	.word	0x20002660

08010438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010438:	b480      	push	{r7}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010440:	4b28      	ldr	r3, [pc, #160]	; (80104e4 <prvInsertBlockIntoFreeList+0xac>)
 8010442:	60fb      	str	r3, [r7, #12]
 8010444:	e002      	b.n	801044c <prvInsertBlockIntoFreeList+0x14>
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	60fb      	str	r3, [r7, #12]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	687a      	ldr	r2, [r7, #4]
 8010452:	429a      	cmp	r2, r3
 8010454:	d8f7      	bhi.n	8010446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	68ba      	ldr	r2, [r7, #8]
 8010460:	4413      	add	r3, r2
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	429a      	cmp	r2, r3
 8010466:	d108      	bne.n	801047a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	685a      	ldr	r2, [r3, #4]
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	441a      	add	r2, r3
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	68ba      	ldr	r2, [r7, #8]
 8010484:	441a      	add	r2, r3
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	429a      	cmp	r2, r3
 801048c:	d118      	bne.n	80104c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	4b15      	ldr	r3, [pc, #84]	; (80104e8 <prvInsertBlockIntoFreeList+0xb0>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	429a      	cmp	r2, r3
 8010498:	d00d      	beq.n	80104b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	685a      	ldr	r2, [r3, #4]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	441a      	add	r2, r3
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	601a      	str	r2, [r3, #0]
 80104b4:	e008      	b.n	80104c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80104b6:	4b0c      	ldr	r3, [pc, #48]	; (80104e8 <prvInsertBlockIntoFreeList+0xb0>)
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	601a      	str	r2, [r3, #0]
 80104be:	e003      	b.n	80104c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681a      	ldr	r2, [r3, #0]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80104c8:	68fa      	ldr	r2, [r7, #12]
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d002      	beq.n	80104d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104d6:	bf00      	nop
 80104d8:	3714      	adds	r7, #20
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr
 80104e2:	bf00      	nop
 80104e4:	20002644 	.word	0x20002644
 80104e8:	2000264c 	.word	0x2000264c

080104ec <__libc_init_array>:
 80104ec:	b570      	push	{r4, r5, r6, lr}
 80104ee:	4d0d      	ldr	r5, [pc, #52]	; (8010524 <__libc_init_array+0x38>)
 80104f0:	4c0d      	ldr	r4, [pc, #52]	; (8010528 <__libc_init_array+0x3c>)
 80104f2:	1b64      	subs	r4, r4, r5
 80104f4:	10a4      	asrs	r4, r4, #2
 80104f6:	2600      	movs	r6, #0
 80104f8:	42a6      	cmp	r6, r4
 80104fa:	d109      	bne.n	8010510 <__libc_init_array+0x24>
 80104fc:	4d0b      	ldr	r5, [pc, #44]	; (801052c <__libc_init_array+0x40>)
 80104fe:	4c0c      	ldr	r4, [pc, #48]	; (8010530 <__libc_init_array+0x44>)
 8010500:	f000 f8f2 	bl	80106e8 <_init>
 8010504:	1b64      	subs	r4, r4, r5
 8010506:	10a4      	asrs	r4, r4, #2
 8010508:	2600      	movs	r6, #0
 801050a:	42a6      	cmp	r6, r4
 801050c:	d105      	bne.n	801051a <__libc_init_array+0x2e>
 801050e:	bd70      	pop	{r4, r5, r6, pc}
 8010510:	f855 3b04 	ldr.w	r3, [r5], #4
 8010514:	4798      	blx	r3
 8010516:	3601      	adds	r6, #1
 8010518:	e7ee      	b.n	80104f8 <__libc_init_array+0xc>
 801051a:	f855 3b04 	ldr.w	r3, [r5], #4
 801051e:	4798      	blx	r3
 8010520:	3601      	adds	r6, #1
 8010522:	e7f2      	b.n	801050a <__libc_init_array+0x1e>
 8010524:	08010930 	.word	0x08010930
 8010528:	08010930 	.word	0x08010930
 801052c:	08010930 	.word	0x08010930
 8010530:	08010934 	.word	0x08010934

08010534 <__retarget_lock_acquire_recursive>:
 8010534:	4770      	bx	lr

08010536 <__retarget_lock_release_recursive>:
 8010536:	4770      	bx	lr

08010538 <memcpy>:
 8010538:	440a      	add	r2, r1
 801053a:	4291      	cmp	r1, r2
 801053c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010540:	d100      	bne.n	8010544 <memcpy+0xc>
 8010542:	4770      	bx	lr
 8010544:	b510      	push	{r4, lr}
 8010546:	f811 4b01 	ldrb.w	r4, [r1], #1
 801054a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801054e:	4291      	cmp	r1, r2
 8010550:	d1f9      	bne.n	8010546 <memcpy+0xe>
 8010552:	bd10      	pop	{r4, pc}

08010554 <memset>:
 8010554:	4402      	add	r2, r0
 8010556:	4603      	mov	r3, r0
 8010558:	4293      	cmp	r3, r2
 801055a:	d100      	bne.n	801055e <memset+0xa>
 801055c:	4770      	bx	lr
 801055e:	f803 1b01 	strb.w	r1, [r3], #1
 8010562:	e7f9      	b.n	8010558 <memset+0x4>

08010564 <cleanup_glue>:
 8010564:	b538      	push	{r3, r4, r5, lr}
 8010566:	460c      	mov	r4, r1
 8010568:	6809      	ldr	r1, [r1, #0]
 801056a:	4605      	mov	r5, r0
 801056c:	b109      	cbz	r1, 8010572 <cleanup_glue+0xe>
 801056e:	f7ff fff9 	bl	8010564 <cleanup_glue>
 8010572:	4621      	mov	r1, r4
 8010574:	4628      	mov	r0, r5
 8010576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801057a:	f000 b869 	b.w	8010650 <_free_r>
	...

08010580 <_reclaim_reent>:
 8010580:	4b2c      	ldr	r3, [pc, #176]	; (8010634 <_reclaim_reent+0xb4>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	4283      	cmp	r3, r0
 8010586:	b570      	push	{r4, r5, r6, lr}
 8010588:	4604      	mov	r4, r0
 801058a:	d051      	beq.n	8010630 <_reclaim_reent+0xb0>
 801058c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801058e:	b143      	cbz	r3, 80105a2 <_reclaim_reent+0x22>
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d14a      	bne.n	801062c <_reclaim_reent+0xac>
 8010596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010598:	6819      	ldr	r1, [r3, #0]
 801059a:	b111      	cbz	r1, 80105a2 <_reclaim_reent+0x22>
 801059c:	4620      	mov	r0, r4
 801059e:	f000 f857 	bl	8010650 <_free_r>
 80105a2:	6961      	ldr	r1, [r4, #20]
 80105a4:	b111      	cbz	r1, 80105ac <_reclaim_reent+0x2c>
 80105a6:	4620      	mov	r0, r4
 80105a8:	f000 f852 	bl	8010650 <_free_r>
 80105ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80105ae:	b111      	cbz	r1, 80105b6 <_reclaim_reent+0x36>
 80105b0:	4620      	mov	r0, r4
 80105b2:	f000 f84d 	bl	8010650 <_free_r>
 80105b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80105b8:	b111      	cbz	r1, 80105c0 <_reclaim_reent+0x40>
 80105ba:	4620      	mov	r0, r4
 80105bc:	f000 f848 	bl	8010650 <_free_r>
 80105c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80105c2:	b111      	cbz	r1, 80105ca <_reclaim_reent+0x4a>
 80105c4:	4620      	mov	r0, r4
 80105c6:	f000 f843 	bl	8010650 <_free_r>
 80105ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80105cc:	b111      	cbz	r1, 80105d4 <_reclaim_reent+0x54>
 80105ce:	4620      	mov	r0, r4
 80105d0:	f000 f83e 	bl	8010650 <_free_r>
 80105d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80105d6:	b111      	cbz	r1, 80105de <_reclaim_reent+0x5e>
 80105d8:	4620      	mov	r0, r4
 80105da:	f000 f839 	bl	8010650 <_free_r>
 80105de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80105e0:	b111      	cbz	r1, 80105e8 <_reclaim_reent+0x68>
 80105e2:	4620      	mov	r0, r4
 80105e4:	f000 f834 	bl	8010650 <_free_r>
 80105e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105ea:	b111      	cbz	r1, 80105f2 <_reclaim_reent+0x72>
 80105ec:	4620      	mov	r0, r4
 80105ee:	f000 f82f 	bl	8010650 <_free_r>
 80105f2:	69a3      	ldr	r3, [r4, #24]
 80105f4:	b1e3      	cbz	r3, 8010630 <_reclaim_reent+0xb0>
 80105f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80105f8:	4620      	mov	r0, r4
 80105fa:	4798      	blx	r3
 80105fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80105fe:	b1b9      	cbz	r1, 8010630 <_reclaim_reent+0xb0>
 8010600:	4620      	mov	r0, r4
 8010602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010606:	f7ff bfad 	b.w	8010564 <cleanup_glue>
 801060a:	5949      	ldr	r1, [r1, r5]
 801060c:	b941      	cbnz	r1, 8010620 <_reclaim_reent+0xa0>
 801060e:	3504      	adds	r5, #4
 8010610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010612:	2d80      	cmp	r5, #128	; 0x80
 8010614:	68d9      	ldr	r1, [r3, #12]
 8010616:	d1f8      	bne.n	801060a <_reclaim_reent+0x8a>
 8010618:	4620      	mov	r0, r4
 801061a:	f000 f819 	bl	8010650 <_free_r>
 801061e:	e7ba      	b.n	8010596 <_reclaim_reent+0x16>
 8010620:	680e      	ldr	r6, [r1, #0]
 8010622:	4620      	mov	r0, r4
 8010624:	f000 f814 	bl	8010650 <_free_r>
 8010628:	4631      	mov	r1, r6
 801062a:	e7ef      	b.n	801060c <_reclaim_reent+0x8c>
 801062c:	2500      	movs	r5, #0
 801062e:	e7ef      	b.n	8010610 <_reclaim_reent+0x90>
 8010630:	bd70      	pop	{r4, r5, r6, pc}
 8010632:	bf00      	nop
 8010634:	20000020 	.word	0x20000020

08010638 <__malloc_lock>:
 8010638:	4801      	ldr	r0, [pc, #4]	; (8010640 <__malloc_lock+0x8>)
 801063a:	f7ff bf7b 	b.w	8010534 <__retarget_lock_acquire_recursive>
 801063e:	bf00      	nop
 8010640:	20002664 	.word	0x20002664

08010644 <__malloc_unlock>:
 8010644:	4801      	ldr	r0, [pc, #4]	; (801064c <__malloc_unlock+0x8>)
 8010646:	f7ff bf76 	b.w	8010536 <__retarget_lock_release_recursive>
 801064a:	bf00      	nop
 801064c:	20002664 	.word	0x20002664

08010650 <_free_r>:
 8010650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010652:	2900      	cmp	r1, #0
 8010654:	d044      	beq.n	80106e0 <_free_r+0x90>
 8010656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801065a:	9001      	str	r0, [sp, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	f1a1 0404 	sub.w	r4, r1, #4
 8010662:	bfb8      	it	lt
 8010664:	18e4      	addlt	r4, r4, r3
 8010666:	f7ff ffe7 	bl	8010638 <__malloc_lock>
 801066a:	4a1e      	ldr	r2, [pc, #120]	; (80106e4 <_free_r+0x94>)
 801066c:	9801      	ldr	r0, [sp, #4]
 801066e:	6813      	ldr	r3, [r2, #0]
 8010670:	b933      	cbnz	r3, 8010680 <_free_r+0x30>
 8010672:	6063      	str	r3, [r4, #4]
 8010674:	6014      	str	r4, [r2, #0]
 8010676:	b003      	add	sp, #12
 8010678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801067c:	f7ff bfe2 	b.w	8010644 <__malloc_unlock>
 8010680:	42a3      	cmp	r3, r4
 8010682:	d908      	bls.n	8010696 <_free_r+0x46>
 8010684:	6825      	ldr	r5, [r4, #0]
 8010686:	1961      	adds	r1, r4, r5
 8010688:	428b      	cmp	r3, r1
 801068a:	bf01      	itttt	eq
 801068c:	6819      	ldreq	r1, [r3, #0]
 801068e:	685b      	ldreq	r3, [r3, #4]
 8010690:	1949      	addeq	r1, r1, r5
 8010692:	6021      	streq	r1, [r4, #0]
 8010694:	e7ed      	b.n	8010672 <_free_r+0x22>
 8010696:	461a      	mov	r2, r3
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	b10b      	cbz	r3, 80106a0 <_free_r+0x50>
 801069c:	42a3      	cmp	r3, r4
 801069e:	d9fa      	bls.n	8010696 <_free_r+0x46>
 80106a0:	6811      	ldr	r1, [r2, #0]
 80106a2:	1855      	adds	r5, r2, r1
 80106a4:	42a5      	cmp	r5, r4
 80106a6:	d10b      	bne.n	80106c0 <_free_r+0x70>
 80106a8:	6824      	ldr	r4, [r4, #0]
 80106aa:	4421      	add	r1, r4
 80106ac:	1854      	adds	r4, r2, r1
 80106ae:	42a3      	cmp	r3, r4
 80106b0:	6011      	str	r1, [r2, #0]
 80106b2:	d1e0      	bne.n	8010676 <_free_r+0x26>
 80106b4:	681c      	ldr	r4, [r3, #0]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	6053      	str	r3, [r2, #4]
 80106ba:	4421      	add	r1, r4
 80106bc:	6011      	str	r1, [r2, #0]
 80106be:	e7da      	b.n	8010676 <_free_r+0x26>
 80106c0:	d902      	bls.n	80106c8 <_free_r+0x78>
 80106c2:	230c      	movs	r3, #12
 80106c4:	6003      	str	r3, [r0, #0]
 80106c6:	e7d6      	b.n	8010676 <_free_r+0x26>
 80106c8:	6825      	ldr	r5, [r4, #0]
 80106ca:	1961      	adds	r1, r4, r5
 80106cc:	428b      	cmp	r3, r1
 80106ce:	bf04      	itt	eq
 80106d0:	6819      	ldreq	r1, [r3, #0]
 80106d2:	685b      	ldreq	r3, [r3, #4]
 80106d4:	6063      	str	r3, [r4, #4]
 80106d6:	bf04      	itt	eq
 80106d8:	1949      	addeq	r1, r1, r5
 80106da:	6021      	streq	r1, [r4, #0]
 80106dc:	6054      	str	r4, [r2, #4]
 80106de:	e7ca      	b.n	8010676 <_free_r+0x26>
 80106e0:	b003      	add	sp, #12
 80106e2:	bd30      	pop	{r4, r5, pc}
 80106e4:	20002668 	.word	0x20002668

080106e8 <_init>:
 80106e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ea:	bf00      	nop
 80106ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106ee:	bc08      	pop	{r3}
 80106f0:	469e      	mov	lr, r3
 80106f2:	4770      	bx	lr

080106f4 <_fini>:
 80106f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f6:	bf00      	nop
 80106f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106fa:	bc08      	pop	{r3}
 80106fc:	469e      	mov	lr, r3
 80106fe:	4770      	bx	lr
