
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d390  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800d550  0800d550  0001d550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d69c  0800d69c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d69c  0800d69c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d69c  0800d69c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d69c  0800d69c  0001d69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6a0  0800d6a0  0001d6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d6a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d54  2000007c  0800d720  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001dd0  0800d720  00021dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002db14  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aec  00000000  00000000  0004dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025b0  00000000  00000000  000536b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002338  00000000  00000000  00055c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038bae  00000000  00000000  00057f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cfb5  00000000  00000000  00090b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014fd71  00000000  00000000  000bdafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020d86c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a318  00000000  00000000  0020d8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d538 	.word	0x0800d538

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000080 	.word	0x20000080
 80001fc:	0800d538 	.word	0x0800d538

08000200 <ADC_Init>:
/* USER CODE BEGIN PV */



//initialize ADC thread
void ADC_Init(void *argument) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	60fb      	str	r3, [r7, #12]
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 800020c:	4a08      	ldr	r2, [pc, #32]	; (8000230 <ADC_Init+0x30>)
 800020e:	2101      	movs	r1, #1
 8000210:	2001      	movs	r0, #1
 8000212:	f009 fd8b 	bl	8009d2c <osSemaphoreNew>
 8000216:	4603      	mov	r3, r0
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <ADC_Init+0x34>)
 800021a:	6013      	str	r3, [r2, #0]
	//start to collect ADC signals into ADC buffer through the DMA
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 800021c:	2209      	movs	r2, #9
 800021e:	4906      	ldr	r1, [pc, #24]	; (8000238 <ADC_Init+0x38>)
 8000220:	68f8      	ldr	r0, [r7, #12]
 8000222:	f001 fd3f 	bl	8001ca4 <HAL_ADC_Start_DMA>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	0800d588 	.word	0x0800d588
 8000234:	200000b8 	.word	0x200000b8
 8000238:	20000098 	.word	0x20000098

0800023c <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	// average the ADC values from 3 consecutive samples and convert them into the analog values with the formula (VREF-GND)/ADC_BIT_RESOLUTION
	//// analog values from adc bit sample = (VREF-GND)*ADC_bits/4095
	for(int i = 0 ; i < 3; i++) {
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e039      	b.n	80002be <HAL_ADC_ConvCpltCallback+0x82>
		ADC_buffer_processed[i] = ((vref-gnd)/adc_reso)*(((float)ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3);
 800024a:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <HAL_ADC_ConvCpltCallback+0x9c>)
 800024c:	ed93 7a00 	vldr	s14, [r3]
 8000250:	4b22      	ldr	r3, [pc, #136]	; (80002dc <HAL_ADC_ConvCpltCallback+0xa0>)
 8000252:	edd3 7a00 	vldr	s15, [r3]
 8000256:	ee77 6a67 	vsub.f32	s13, s14, s15
 800025a:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <HAL_ADC_ConvCpltCallback+0xa4>)
 800025c:	edd3 7a00 	vldr	s15, [r3]
 8000260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000264:	4a1f      	ldr	r2, [pc, #124]	; (80002e4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800026c:	ee07 3a90 	vmov	s15, r3
 8000270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	3303      	adds	r3, #3
 8000278:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <HAL_ADC_ConvCpltCallback+0xa8>)
 800027a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800027e:	ee07 3a90 	vmov	s15, r3
 8000282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000286:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	3306      	adds	r3, #6
 800028e:	4a15      	ldr	r2, [pc, #84]	; (80002e4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000294:	ee07 3a90 	vmov	s15, r3
 8000298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800029c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80002a0:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80002a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80002a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002ac:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <HAL_ADC_ConvCpltCallback+0xac>)
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4413      	add	r3, r2
 80002b4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3; i++) {
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	3301      	adds	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	2b02      	cmp	r3, #2
 80002c2:	ddc2      	ble.n	800024a <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <HAL_ADC_ConvCpltCallback+0xb0>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f009 fe0b 	bl	8009ee4 <osSemaphoreRelease>
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000000 	.word	0x20000000
 80002dc:	2000010c 	.word	0x2000010c
 80002e0:	20000004 	.word	0x20000004
 80002e4:	20000098 	.word	0x20000098
 80002e8:	200000ac 	.word	0x200000ac
 80002ec:	200000b8 	.word	0x200000b8

080002f0 <state_machine_init>:

void controller_state_machine(void *args);



void state_machine_init(void){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	thr_1 = osThreadNew(controller_state_machine, &hadc1, &thr_1_attributes);
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <state_machine_init+0x18>)
 80002f6:	4905      	ldr	r1, [pc, #20]	; (800030c <state_machine_init+0x1c>)
 80002f8:	4805      	ldr	r0, [pc, #20]	; (8000310 <state_machine_init+0x20>)
 80002fa:	f009 fc6a 	bl	8009bd2 <osThreadNew>
 80002fe:	4603      	mov	r3, r0
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <state_machine_init+0x24>)
 8000302:	6013      	str	r3, [r2, #0]
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	0800d598 	.word	0x0800d598
 800030c:	20000118 	.word	0x20000118
 8000310:	08000319 	.word	0x08000319
 8000314:	20000110 	.word	0x20000110

08000318 <controller_state_machine>:

void controller_state_machine(void *args){
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
		pp=ADC_buffer_processed[0];
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <controller_state_machine+0x30>)
 8000322:	edd3 7a00 	vldr	s15, [r3]
 8000326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800032a:	ee17 2a90 	vmov	r2, s15
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <controller_state_machine+0x34>)
 8000330:	601a      	str	r2, [r3, #0]
	  for(;;)
	  {
		  osSemaphoreAcquire(ADC_semHandle, 1);
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <controller_state_machine+0x38>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2101      	movs	r1, #1
 8000338:	4618      	mov	r0, r3
 800033a:	f009 fd81 	bl	8009e40 <osSemaphoreAcquire>
	    osDelay(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f009 fcd9 	bl	8009cf6 <osDelay>
		  osSemaphoreAcquire(ADC_semHandle, 1);
 8000344:	e7f5      	b.n	8000332 <controller_state_machine+0x1a>
 8000346:	bf00      	nop
 8000348:	200000ac 	.word	0x200000ac
 800034c:	20000114 	.word	0x20000114
 8000350:	200000b8 	.word	0x200000b8

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f001 f90d 	bl	8001576 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f82c 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 fa66 	bl	8000830 <MX_GPIO_Init>
  MX_DMA_Init();
 8000364:	f000 f9d4 	bl	8000710 <MX_DMA_Init>
  MX_FMC_Init();
 8000368:	f000 f9fc 	bl	8000764 <MX_FMC_Init>
  MX_I2C1_Init();
 800036c:	f000 f930 	bl	80005d0 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8000370:	f000 f96e 	bl	8000650 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000374:	f000 f98e 	bl	8000694 <MX_SPI2_Init>
  MX_CAN1_Init();
 8000378:	f000 f8f4 	bl	8000564 <MX_CAN1_Init>
  MX_ADC1_Init();
 800037c:	f000 f86a 	bl	8000454 <MX_ADC1_Init>
  MX_FATFS_Init();
 8000380:	f009 f8a8 	bl	80094d4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000384:	f009 fba4 	bl	8009ad0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000388:	4a07      	ldr	r2, [pc, #28]	; (80003a8 <main+0x54>)
 800038a:	2100      	movs	r1, #0
 800038c:	4807      	ldr	r0, [pc, #28]	; (80003ac <main+0x58>)
 800038e:	f009 fc20 	bl	8009bd2 <osThreadNew>
 8000392:	4603      	mov	r3, r0
 8000394:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <main+0x5c>)
 8000396:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init(&hadc1);
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <main+0x60>)
 800039a:	f7ff ff31 	bl	8000200 <ADC_Init>
  //SD_init();
  state_machine_init();
 800039e:	f7ff ffa7 	bl	80002f0 <state_machine_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003a2:	f009 fbdb 	bl	8009b5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <main+0x52>
 80003a8:	0800d5bc 	.word	0x0800d5bc
 80003ac:	08000ccd 	.word	0x08000ccd
 80003b0:	20000390 	.word	0x20000390
 80003b4:	20000118 	.word	0x20000118

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b096      	sub	sp, #88	; 0x58
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	2244      	movs	r2, #68	; 0x44
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f00c ffec 	bl	800d3a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	463b      	mov	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80003da:	2000      	movs	r0, #0
 80003dc:	f003 fb58 	bl	8003a90 <HAL_PWREx_ControlVoltageScaling>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x32>
  {
    Error_Handler();
 80003e6:	f000 fc8b 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ea:	2301      	movs	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f4:	2302      	movs	r3, #2
 80003f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f8:	2303      	movs	r3, #3
 80003fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80003fc:	2302      	movs	r3, #2
 80003fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000400:	231e      	movs	r3, #30
 8000402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000404:	2302      	movs	r3, #2
 8000406:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000408:	2302      	movs	r3, #2
 800040a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800040c:	2302      	movs	r3, #2
 800040e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	4618      	mov	r0, r3
 8000416:	f003 fbef 	bl	8003bf8 <HAL_RCC_OscConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000420:	f000 fc6e 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000424:	230f      	movs	r3, #15
 8000426:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000428:	2303      	movs	r3, #3
 800042a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000438:	463b      	mov	r3, r7
 800043a:	2105      	movs	r1, #5
 800043c:	4618      	mov	r0, r3
 800043e:	f003 fff5 	bl	800442c <HAL_RCC_ClockConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000448:	f000 fc5a 	bl	8000d00 <Error_Handler>
  }
}
 800044c:	bf00      	nop
 800044e:	3758      	adds	r7, #88	; 0x58
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800045a:	463b      	mov	r3, r7
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
 8000468:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800046a:	4b39      	ldr	r3, [pc, #228]	; (8000550 <MX_ADC1_Init+0xfc>)
 800046c:	4a39      	ldr	r2, [pc, #228]	; (8000554 <MX_ADC1_Init+0x100>)
 800046e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000470:	4b37      	ldr	r3, [pc, #220]	; (8000550 <MX_ADC1_Init+0xfc>)
 8000472:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000476:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000478:	4b35      	ldr	r3, [pc, #212]	; (8000550 <MX_ADC1_Init+0xfc>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800047e:	4b34      	ldr	r3, [pc, #208]	; (8000550 <MX_ADC1_Init+0xfc>)
 8000480:	2200      	movs	r2, #0
 8000482:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000484:	4b32      	ldr	r3, [pc, #200]	; (8000550 <MX_ADC1_Init+0xfc>)
 8000486:	2201      	movs	r2, #1
 8000488:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800048a:	4b31      	ldr	r3, [pc, #196]	; (8000550 <MX_ADC1_Init+0xfc>)
 800048c:	2208      	movs	r2, #8
 800048e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000490:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <MX_ADC1_Init+0xfc>)
 8000492:	2200      	movs	r2, #0
 8000494:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000496:	4b2e      	ldr	r3, [pc, #184]	; (8000550 <MX_ADC1_Init+0xfc>)
 8000498:	2201      	movs	r2, #1
 800049a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800049c:	4b2c      	ldr	r3, [pc, #176]	; (8000550 <MX_ADC1_Init+0xfc>)
 800049e:	2203      	movs	r2, #3
 80004a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004a2:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <MX_ADC1_Init+0xfc>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004aa:	4b29      	ldr	r3, [pc, #164]	; (8000550 <MX_ADC1_Init+0xfc>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004b0:	4b27      	ldr	r3, [pc, #156]	; (8000550 <MX_ADC1_Init+0xfc>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80004b6:	4b26      	ldr	r3, [pc, #152]	; (8000550 <MX_ADC1_Init+0xfc>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004be:	4b24      	ldr	r3, [pc, #144]	; (8000550 <MX_ADC1_Init+0xfc>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004c4:	4b22      	ldr	r3, [pc, #136]	; (8000550 <MX_ADC1_Init+0xfc>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80004cc:	4b20      	ldr	r3, [pc, #128]	; (8000550 <MX_ADC1_Init+0xfc>)
 80004ce:	2204      	movs	r2, #4
 80004d0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004d2:	481f      	ldr	r0, [pc, #124]	; (8000550 <MX_ADC1_Init+0xfc>)
 80004d4:	f001 fa9a 	bl	8001a0c <HAL_ADC_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80004de:	f000 fc0f 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004e2:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <MX_ADC1_Init+0x104>)
 80004e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e6:	2306      	movs	r3, #6
 80004e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80004ea:	2305      	movs	r3, #5
 80004ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ee:	237f      	movs	r3, #127	; 0x7f
 80004f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004f2:	2304      	movs	r3, #4
 80004f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004fa:	463b      	mov	r3, r7
 80004fc:	4619      	mov	r1, r3
 80004fe:	4814      	ldr	r0, [pc, #80]	; (8000550 <MX_ADC1_Init+0xfc>)
 8000500:	f001 fe26 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800050a:	f000 fbf9 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <MX_ADC1_Init+0x108>)
 8000510:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000512:	230c      	movs	r3, #12
 8000514:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	4619      	mov	r1, r3
 800051a:	480d      	ldr	r0, [pc, #52]	; (8000550 <MX_ADC1_Init+0xfc>)
 800051c:	f001 fe18 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000526:	f000 fbeb 	bl	8000d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <MX_ADC1_Init+0x10c>)
 800052c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800052e:	2312      	movs	r3, #18
 8000530:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000532:	463b      	mov	r3, r7
 8000534:	4619      	mov	r1, r3
 8000536:	4806      	ldr	r0, [pc, #24]	; (8000550 <MX_ADC1_Init+0xfc>)
 8000538:	f001 fe0a 	bl	8002150 <HAL_ADC_ConfigChannel>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000542:	f000 fbdd 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000118 	.word	0x20000118
 8000554:	50040000 	.word	0x50040000
 8000558:	14f00020 	.word	0x14f00020
 800055c:	19200040 	.word	0x19200040
 8000560:	1d500080 	.word	0x1d500080

08000564 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <MX_CAN1_Init+0x64>)
 800056a:	4a18      	ldr	r2, [pc, #96]	; (80005cc <MX_CAN1_Init+0x68>)
 800056c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_CAN1_Init+0x64>)
 8000570:	2214      	movs	r2, #20
 8000572:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_CAN1_Init+0x64>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_CAN1_Init+0x64>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_CAN1_Init+0x64>)
 8000582:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000586:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_CAN1_Init+0x64>)
 800058a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800058e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_CAN1_Init+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <MX_CAN1_Init+0x64>)
 8000598:	2200      	movs	r2, #0
 800059a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <MX_CAN1_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_CAN1_Init+0x64>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <MX_CAN1_Init+0x64>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_CAN1_Init+0x64>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <MX_CAN1_Init+0x64>)
 80005b6:	f002 fb13 	bl	8002be0 <HAL_CAN_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005c0:	f000 fb9e 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200001e0 	.word	0x200001e0
 80005cc:	40006400 	.word	0x40006400

080005d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <MX_I2C1_Init+0x74>)
 80005d6:	4a1c      	ldr	r2, [pc, #112]	; (8000648 <MX_I2C1_Init+0x78>)
 80005d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <MX_I2C1_Init+0x74>)
 80005dc:	4a1b      	ldr	r2, [pc, #108]	; (800064c <MX_I2C1_Init+0x7c>)
 80005de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_I2C1_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_I2C1_Init+0x74>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_I2C1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_I2C1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_I2C1_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_I2C1_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800060a:	480e      	ldr	r0, [pc, #56]	; (8000644 <MX_I2C1_Init+0x74>)
 800060c:	f003 f8fa 	bl	8003804 <HAL_I2C_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000616:	f000 fb73 	bl	8000d00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800061a:	2100      	movs	r1, #0
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <MX_I2C1_Init+0x74>)
 800061e:	f003 f980 	bl	8003922 <HAL_I2CEx_ConfigAnalogFilter>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000628:	f000 fb6a 	bl	8000d00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800062c:	2100      	movs	r1, #0
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_I2C1_Init+0x74>)
 8000630:	f003 f9c2 	bl	80039b8 <HAL_I2CEx_ConfigDigitalFilter>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800063a:	f000 fb61 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000208 	.word	0x20000208
 8000648:	40005400 	.word	0x40005400
 800064c:	307075b1 	.word	0x307075b1

08000650 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000654:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_SDMMC1_SD_Init+0x3c>)
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <MX_SDMMC1_SD_Init+0x40>)
 8000658:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_SDMMC1_SD_Init+0x3c>)
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_SDMMC1_SD_Init+0x3c>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_SDMMC1_SD_Init+0x3c>)
 8000668:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_SDMMC1_SD_Init+0x3c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_SDMMC1_SD_Init+0x3c>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <MX_SDMMC1_SD_Init+0x3c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	2000025c 	.word	0x2000025c
 8000690:	50062400 	.word	0x50062400

08000694 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_SPI2_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <MX_SPI2_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_SPI2_Init+0x74>)
 80006a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_SPI2_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_SPI2_Init+0x74>)
 80006ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_SPI2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_SPI2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_SPI2_Init+0x74>)
 80006c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_SPI2_Init+0x74>)
 80006ca:	2208      	movs	r2, #8
 80006cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_SPI2_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_SPI2_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_SPI2_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_SPI2_Init+0x74>)
 80006e2:	2207      	movs	r2, #7
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_SPI2_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_SPI2_Init+0x74>)
 80006ee:	2208      	movs	r2, #8
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_SPI2_Init+0x74>)
 80006f4:	f007 fc25 	bl	8007f42 <HAL_SPI_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 faff 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200002dc 	.word	0x200002dc
 800070c:	40003800 	.word	0x40003800

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_DMA_Init+0x50>)
 8000718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800071a:	4a11      	ldr	r2, [pc, #68]	; (8000760 <MX_DMA_Init+0x50>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6493      	str	r3, [r2, #72]	; 0x48
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_DMA_Init+0x50>)
 8000724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_DMA_Init+0x50>)
 8000730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000732:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <MX_DMA_Init+0x50>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6493      	str	r3, [r2, #72]	; 0x48
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_DMA_Init+0x50>)
 800073c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2105      	movs	r1, #5
 800074a:	200e      	movs	r0, #14
 800074c:	f002 fbfc 	bl	8002f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000750:	200e      	movs	r0, #14
 8000752:	f002 fc15 	bl	8002f80 <HAL_NVIC_EnableIRQ>

}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2220      	movs	r2, #32
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f00c fe17 	bl	800d3a4 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000776:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <MX_FMC_Init+0xc4>)
 8000778:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800077c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800077e:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <MX_FMC_Init+0xc4>)
 8000780:	4a2a      	ldr	r2, [pc, #168]	; (800082c <MX_FMC_Init+0xc8>)
 8000782:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000784:	4b28      	ldr	r3, [pc, #160]	; (8000828 <MX_FMC_Init+0xc4>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800078a:	4b27      	ldr	r3, [pc, #156]	; (8000828 <MX_FMC_Init+0xc4>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <MX_FMC_Init+0xc4>)
 8000792:	2204      	movs	r2, #4
 8000794:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000796:	4b24      	ldr	r3, [pc, #144]	; (8000828 <MX_FMC_Init+0xc4>)
 8000798:	2210      	movs	r2, #16
 800079a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <MX_FMC_Init+0xc4>)
 800079e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80007a4:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MX_FMC_Init+0xc4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_FMC_Init+0xc4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_FMC_Init+0xc4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_FMC_Init+0xc4>)
 80007b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007bc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_FMC_Init+0xc4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_FMC_Init+0xc4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_FMC_Init+0xc4>)
 80007cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_FMC_Init+0xc4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_FMC_Init+0xc4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_FMC_Init+0xc4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_FMC_Init+0xc4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80007ea:	230f      	movs	r3, #15
 80007ec:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80007ee:	230f      	movs	r3, #15
 80007f0:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80007f2:	23ff      	movs	r3, #255	; 0xff
 80007f4:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80007fa:	230f      	movs	r3, #15
 80007fc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80007fe:	2310      	movs	r3, #16
 8000800:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_FMC_Init+0xc4>)
 8000812:	f007 fc39 	bl	8008088 <HAL_SRAM_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 800081c:	f000 fa70 	bl	8000d00 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000340 	.word	0x20000340
 800082c:	a0000104 	.word	0xa0000104

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000846:	4bb2      	ldr	r3, [pc, #712]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4ab1      	ldr	r2, [pc, #708]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 800084c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4baf      	ldr	r3, [pc, #700]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800085a:	623b      	str	r3, [r7, #32]
 800085c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	4bac      	ldr	r3, [pc, #688]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4aab      	ldr	r2, [pc, #684]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4ba9      	ldr	r3, [pc, #676]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	61fb      	str	r3, [r7, #28]
 8000874:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000876:	4ba6      	ldr	r3, [pc, #664]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4aa5      	ldr	r2, [pc, #660]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 800087c:	f043 0310 	orr.w	r3, r3, #16
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4ba3      	ldr	r3, [pc, #652]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4ba0      	ldr	r3, [pc, #640]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a9f      	ldr	r2, [pc, #636]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b9d      	ldr	r3, [pc, #628]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b9a      	ldr	r3, [pc, #616]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a99      	ldr	r2, [pc, #612]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b97      	ldr	r3, [pc, #604]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008be:	4b94      	ldr	r3, [pc, #592]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a93      	ldr	r2, [pc, #588]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 80008c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b91      	ldr	r3, [pc, #580]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80008d6:	f003 f97f 	bl	8003bd8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	4b8d      	ldr	r3, [pc, #564]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a8c      	ldr	r2, [pc, #560]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b8a      	ldr	r3, [pc, #552]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b87      	ldr	r3, [pc, #540]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a86      	ldr	r2, [pc, #536]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b84      	ldr	r3, [pc, #528]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b81      	ldr	r3, [pc, #516]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a80      	ldr	r2, [pc, #512]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b7e      	ldr	r3, [pc, #504]	; (8000b10 <MX_GPIO_Init+0x2e0>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0320 	and.w	r3, r3, #32
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f244 0114 	movw	r1, #16404	; 0x4014
 8000928:	487a      	ldr	r0, [pc, #488]	; (8000b14 <MX_GPIO_Init+0x2e4>)
 800092a:	f002 ff53 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	4878      	ldr	r0, [pc, #480]	; (8000b18 <MX_GPIO_Init+0x2e8>)
 8000936:	f002 ff4d 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f002 ff47 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2104      	movs	r1, #4
 800094a:	4874      	ldr	r0, [pc, #464]	; (8000b1c <MX_GPIO_Init+0x2ec>)
 800094c:	f002 ff42 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000950:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000962:	2305      	movs	r3, #5
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	486c      	ldr	r0, [pc, #432]	; (8000b20 <MX_GPIO_Init+0x2f0>)
 800096e:	f002 fd87 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000972:	f244 0314 	movw	r3, #16404	; 0x4014
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	4862      	ldr	r0, [pc, #392]	; (8000b14 <MX_GPIO_Init+0x2e4>)
 800098c:	f002 fd78 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000990:	2310      	movs	r3, #16
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009a0:	2302      	movs	r3, #2
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	4619      	mov	r1, r3
 80009aa:	485c      	ldr	r0, [pc, #368]	; (8000b1c <MX_GPIO_Init+0x2ec>)
 80009ac:	f002 fd68 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 80009b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009c2:	2307      	movs	r3, #7
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f002 fd56 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80009d4:	23b0      	movs	r3, #176	; 0xb0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80009e4:	230a      	movs	r3, #10
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	484c      	ldr	r0, [pc, #304]	; (8000b20 <MX_GPIO_Init+0x2f0>)
 80009f0:	f002 fd46 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 80009f4:	f44f 7308 	mov.w	r3, #544	; 0x220
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a06:	230d      	movs	r3, #13
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4842      	ldr	r0, [pc, #264]	; (8000b1c <MX_GPIO_Init+0x2ec>)
 8000a12:	f002 fd35 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000a16:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000a28:	2305      	movs	r3, #5
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	483c      	ldr	r0, [pc, #240]	; (8000b24 <MX_GPIO_Init+0x2f4>)
 8000a34:	f002 fd24 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4834      	ldr	r0, [pc, #208]	; (8000b20 <MX_GPIO_Init+0x2f0>)
 8000a4e:	f002 fd17 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000a52:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000a64:	230a      	movs	r3, #10
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4829      	ldr	r0, [pc, #164]	; (8000b14 <MX_GPIO_Init+0x2e4>)
 8000a70:	f002 fd06 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000a86:	2303      	movs	r3, #3
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4820      	ldr	r0, [pc, #128]	; (8000b14 <MX_GPIO_Init+0x2e4>)
 8000a92:	f002 fcf5 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000a96:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4818      	ldr	r0, [pc, #96]	; (8000b14 <MX_GPIO_Init+0x2e4>)
 8000ab4:	f002 fce4 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8000ab8:	2364      	movs	r3, #100	; 0x64
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000ac8:	230d      	movs	r3, #13
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4815      	ldr	r0, [pc, #84]	; (8000b28 <MX_GPIO_Init+0x2f8>)
 8000ad4:	f002 fcd4 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 8000ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aea:	230a      	movs	r3, #10
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f002 fcc2 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8000b0e:	e00d      	b.n	8000b2c <MX_GPIO_Init+0x2fc>
 8000b10:	40021000 	.word	0x40021000
 8000b14:	48001c00 	.word	0x48001c00
 8000b18:	48000800 	.word	0x48000800
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	48002000 	.word	0x48002000
 8000b24:	48001800 	.word	0x48001800
 8000b28:	48001000 	.word	0x48001000
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	4862      	ldr	r0, [pc, #392]	; (8000cbc <MX_GPIO_Init+0x48c>)
 8000b34:	f002 fca4 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000b38:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3e:	2312      	movs	r3, #18
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	485a      	ldr	r0, [pc, #360]	; (8000cc0 <MX_GPIO_Init+0x490>)
 8000b56:	f002 fc93 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000b5a:	2340      	movs	r3, #64	; 0x40
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4853      	ldr	r0, [pc, #332]	; (8000cbc <MX_GPIO_Init+0x48c>)
 8000b70:	f002 fc86 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000b74:	2384      	movs	r3, #132	; 0x84
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b84:	2306      	movs	r3, #6
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	484b      	ldr	r0, [pc, #300]	; (8000cbc <MX_GPIO_Init+0x48c>)
 8000b90:	f002 fc76 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8000b94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4844      	ldr	r0, [pc, #272]	; (8000cc4 <MX_GPIO_Init+0x494>)
 8000bb2:	f002 fc65 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	483a      	ldr	r0, [pc, #232]	; (8000cbc <MX_GPIO_Init+0x48c>)
 8000bd2:	f002 fc55 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bd6:	2320      	movs	r3, #32
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bec:	f002 fc48 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000bf0:	2340      	movs	r3, #64	; 0x40
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f002 fc39 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000c0e:	2308      	movs	r3, #8
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f002 fc28 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000c42:	230b      	movs	r3, #11
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481e      	ldr	r0, [pc, #120]	; (8000cc8 <MX_GPIO_Init+0x498>)
 8000c4e:	f002 fc17 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000c52:	2310      	movs	r3, #16
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c62:	230a      	movs	r3, #10
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f002 fc06 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000c74:	2304      	movs	r3, #4
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480e      	ldr	r0, [pc, #56]	; (8000cc4 <MX_GPIO_Init+0x494>)
 8000c8c:	f002 fbf8 	bl	8003480 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ca2:	2306      	movs	r3, #6
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_GPIO_Init+0x494>)
 8000cae:	f002 fbe7 	bl	8003480 <HAL_GPIO_Init>

}
 8000cb2:	bf00      	nop
 8000cb4:	3738      	adds	r7, #56	; 0x38
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	48001800 	.word	0x48001800
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	48001400 	.word	0x48001400

08000ccc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f009 f80e 	bl	8009cf6 <osDelay>
 8000cda:	e7fb      	b.n	8000cd4 <StartDefaultTask+0x8>

08000cdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d101      	bne.n	8000cf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cee:	f000 fc5b 	bl	80015a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40001000 	.word	0x40001000

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6593      	str	r3, [r2, #88]	; 0x58
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	210f      	movs	r1, #15
 8000d46:	f06f 0001 	mvn.w	r0, #1
 8000d4a:	f002 f8fd 	bl	8002f48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0b2      	sub	sp, #200	; 0xc8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	229c      	movs	r2, #156	; 0x9c
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f00c fb11 	bl	800d3a4 <memset>
  if(hadc->Instance==ADC1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a5d      	ldr	r2, [pc, #372]	; (8000efc <HAL_ADC_MspInit+0x1a0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	f040 80b2 	bne.w	8000ef2 <HAL_ADC_MspInit+0x196>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000da4:	2308      	movs	r3, #8
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000db4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 fe20 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000dca:	f7ff ff99 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dce:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a4b      	ldr	r2, [pc, #300]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000dd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4b46      	ldr	r3, [pc, #280]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a45      	ldr	r2, [pc, #276]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a3f      	ldr	r2, [pc, #252]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a39      	ldr	r2, [pc, #228]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <HAL_ADC_MspInit+0x1a4>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000e2e:	2318      	movs	r3, #24
 8000e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e34:	230b      	movs	r3, #11
 8000e36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e44:	4619      	mov	r1, r3
 8000e46:	482f      	ldr	r0, [pc, #188]	; (8000f04 <HAL_ADC_MspInit+0x1a8>)
 8000e48:	f002 fb1a 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8000e4c:	2387      	movs	r3, #135	; 0x87
 8000e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e52:	230b      	movs	r3, #11
 8000e54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f002 fb0a 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e72:	230b      	movs	r3, #11
 8000e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4820      	ldr	r0, [pc, #128]	; (8000f08 <HAL_ADC_MspInit+0x1ac>)
 8000e86:	f002 fafb 	bl	8003480 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000e8c:	4a20      	ldr	r2, [pc, #128]	; (8000f10 <HAL_ADC_MspInit+0x1b4>)
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000e92:	2205      	movs	r2, #5
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000eba:	2220      	movs	r2, #32
 8000ebc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000ec0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000ec4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000ec8:	f002 f868 	bl	8002f9c <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_ADC_MspInit+0x17a>
    {
      Error_Handler();
 8000ed2:	f7ff ff15 	bl	8000d00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000eda:	651a      	str	r2, [r3, #80]	; 0x50
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_ADC_MspInit+0x1b0>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2012      	movs	r0, #18
 8000ee8:	f002 f82e 	bl	8002f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000eec:	2012      	movs	r0, #18
 8000eee:	f002 f847 	bl	8002f80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	37c8      	adds	r7, #200	; 0xc8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	50040000 	.word	0x50040000
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	20000180 	.word	0x20000180
 8000f10:	40020044 	.word	0x40020044

08000f14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <HAL_CAN_MspInit+0x80>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d129      	bne.n	8000f8a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_CAN_MspInit+0x84>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_CAN_MspInit+0x84>)
 8000f3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f40:	6593      	str	r3, [r2, #88]	; 0x58
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_CAN_MspInit+0x84>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_CAN_MspInit+0x84>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <HAL_CAN_MspInit+0x84>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <HAL_CAN_MspInit+0x84>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8000f66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f78:	2309      	movs	r3, #9
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f002 fa7b 	bl	8003480 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	; 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40006400 	.word	0x40006400
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0b2      	sub	sp, #200	; 0xc8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	229c      	movs	r2, #156	; 0x9c
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f00c f9f1 	bl	800d3a4 <memset>
  if(hi2c->Instance==I2C1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a33      	ldr	r2, [pc, #204]	; (8001094 <HAL_I2C_MspInit+0xf8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d15e      	bne.n	800108a <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fcc:	2340      	movs	r3, #64	; 0x40
 8000fce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 fd13 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fe4:	f7ff fe8c 	bl	8000d00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <HAL_I2C_MspInit+0xfc>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	4a2a      	ldr	r2, [pc, #168]	; (8001098 <HAL_I2C_MspInit+0xfc>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <HAL_I2C_MspInit+0xfc>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <HAL_I2C_MspInit+0xfc>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	4a24      	ldr	r2, [pc, #144]	; (8001098 <HAL_I2C_MspInit+0xfc>)
 8001006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800100a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <HAL_I2C_MspInit+0xfc>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001018:	f002 fdde 	bl	8003bd8 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 800101c:	2340      	movs	r3, #64	; 0x40
 800101e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001022:	2312      	movs	r3, #18
 8001024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001028:	2301      	movs	r3, #1
 800102a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001034:	2304      	movs	r3, #4
 8001036:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800103e:	4619      	mov	r1, r3
 8001040:	4816      	ldr	r0, [pc, #88]	; (800109c <HAL_I2C_MspInit+0x100>)
 8001042:	f002 fa1d 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8001046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104e:	2312      	movs	r3, #18
 8001050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001054:	2301      	movs	r3, #1
 8001056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001060:	2304      	movs	r3, #4
 8001062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800106a:	4619      	mov	r1, r3
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <HAL_I2C_MspInit+0x104>)
 800106e:	f002 fa07 	bl	8003480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_I2C_MspInit+0xfc>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_I2C_MspInit+0xfc>)
 8001078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_I2C_MspInit+0xfc>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	37c8      	adds	r7, #200	; 0xc8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40005400 	.word	0x40005400
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400
 80010a0:	48001800 	.word	0x48001800

080010a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0b2      	sub	sp, #200	; 0xc8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	229c      	movs	r2, #156	; 0x9c
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f00c f96d 	bl	800d3a4 <memset>
  if(hsd->Instance==SDMMC1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a37      	ldr	r2, [pc, #220]	; (80011ac <HAL_SD_MspInit+0x108>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d167      	bne.n	80011a4 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80010d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80010da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fc8c 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80010f2:	f7ff fe05 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010f6:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <HAL_SD_MspInit+0x10c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a2d      	ldr	r2, [pc, #180]	; (80011b0 <HAL_SD_MspInit+0x10c>)
 80010fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <HAL_SD_MspInit+0x10c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <HAL_SD_MspInit+0x10c>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a27      	ldr	r2, [pc, #156]	; (80011b0 <HAL_SD_MspInit+0x10c>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <HAL_SD_MspInit+0x10c>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <HAL_SD_MspInit+0x10c>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <HAL_SD_MspInit+0x10c>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <HAL_SD_MspInit+0x10c>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800113e:	2304      	movs	r3, #4
 8001140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001156:	230c      	movs	r3, #12
 8001158:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001160:	4619      	mov	r1, r3
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <HAL_SD_MspInit+0x110>)
 8001164:	f002 f98c 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001168:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800116c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001182:	230c      	movs	r3, #12
 8001184:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800118c:	4619      	mov	r1, r3
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <HAL_SD_MspInit+0x114>)
 8001190:	f002 f976 	bl	8003480 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2105      	movs	r1, #5
 8001198:	2031      	movs	r0, #49	; 0x31
 800119a:	f001 fed5 	bl	8002f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800119e:	2031      	movs	r0, #49	; 0x31
 80011a0:	f001 feee 	bl	8002f80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	37c8      	adds	r7, #200	; 0xc8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	50062400 	.word	0x50062400
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000c00 	.word	0x48000c00
 80011b8:	48000800 	.word	0x48000800

080011bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a25      	ldr	r2, [pc, #148]	; (8001270 <HAL_SPI_MspInit+0xb4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d144      	bne.n	8001268 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011de:	4b25      	ldr	r3, [pc, #148]	; (8001274 <HAL_SPI_MspInit+0xb8>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a24      	ldr	r2, [pc, #144]	; (8001274 <HAL_SPI_MspInit+0xb8>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <HAL_SPI_MspInit+0xb8>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_SPI_MspInit+0xb8>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <HAL_SPI_MspInit+0xb8>)
 80011fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_SPI_MspInit+0xb8>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_SPI_MspInit+0xb8>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a18      	ldr	r2, [pc, #96]	; (8001274 <HAL_SPI_MspInit+0xb8>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_SPI_MspInit+0xb8>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 8001226:	2301      	movs	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001236:	2305      	movs	r3, #5
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <HAL_SPI_MspInit+0xbc>)
 8001242:	f002 f91d 	bl	8003480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001246:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001258:	2305      	movs	r3, #5
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <HAL_SPI_MspInit+0xc0>)
 8001264:	f002 f90c 	bl	8003480 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40003800 	.word	0x40003800
 8001274:	40021000 	.word	0x40021000
 8001278:	48002000 	.word	0x48002000
 800127c:	48000400 	.word	0x48000400

08001280 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001294:	4b32      	ldr	r3, [pc, #200]	; (8001360 <HAL_FMC_MspInit+0xe0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d15d      	bne.n	8001358 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 800129c:	4b30      	ldr	r3, [pc, #192]	; (8001360 <HAL_FMC_MspInit+0xe0>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_FMC_MspInit+0xe4>)
 80012a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012a6:	4a2f      	ldr	r2, [pc, #188]	; (8001364 <HAL_FMC_MspInit+0xe4>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6513      	str	r3, [r2, #80]	; 0x50
 80012ae:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <HAL_FMC_MspInit+0xe4>)
 80012b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 80012ba:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80012be:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012cc:	230c      	movs	r3, #12
 80012ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <HAL_FMC_MspInit+0xe8>)
 80012d6:	f002 f8d3 	bl	8003480 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 80012da:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80012de:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ec:	230c      	movs	r3, #12
 80012ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	481d      	ldr	r0, [pc, #116]	; (800136c <HAL_FMC_MspInit+0xec>)
 80012f6:	f002 f8c3 	bl	8003480 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800130a:	230c      	movs	r3, #12
 800130c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4817      	ldr	r0, [pc, #92]	; (8001370 <HAL_FMC_MspInit+0xf0>)
 8001314:	f002 f8b4 	bl	8003480 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001318:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800131c:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800132a:	230c      	movs	r3, #12
 800132c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4810      	ldr	r0, [pc, #64]	; (8001374 <HAL_FMC_MspInit+0xf4>)
 8001334:	f002 f8a4 	bl	8003480 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001338:	233f      	movs	r3, #63	; 0x3f
 800133a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001348:	230c      	movs	r3, #12
 800134a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <HAL_FMC_MspInit+0xf8>)
 8001352:	f002 f895 	bl	8003480 <HAL_GPIO_Init>
 8001356:	e000      	b.n	800135a <HAL_FMC_MspInit+0xda>
    return;
 8001358:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000394 	.word	0x20000394
 8001364:	40021000 	.word	0x40021000
 8001368:	48001000 	.word	0x48001000
 800136c:	48000c00 	.word	0x48000c00
 8001370:	48000400 	.word	0x48000400
 8001374:	48001400 	.word	0x48001400
 8001378:	48001800 	.word	0x48001800

0800137c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001384:	f7ff ff7c 	bl	8001280 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_InitTick+0xe0>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	4a33      	ldr	r2, [pc, #204]	; (8001470 <HAL_InitTick+0xe0>)
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	6593      	str	r3, [r2, #88]	; 0x58
 80013aa:	4b31      	ldr	r3, [pc, #196]	; (8001470 <HAL_InitTick+0xe0>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013b6:	f107 0210 	add.w	r2, r7, #16
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fa2f 	bl	8004824 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d103      	bne.n	80013d8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013d0:	f003 f9fc 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 80013d4:	6378      	str	r0, [r7, #52]	; 0x34
 80013d6:	e004      	b.n	80013e2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013d8:	f003 f9f8 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 80013dc:	4603      	mov	r3, r0
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e4:	4a23      	ldr	r2, [pc, #140]	; (8001474 <HAL_InitTick+0xe4>)
 80013e6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ea:	0c9b      	lsrs	r3, r3, #18
 80013ec:	3b01      	subs	r3, #1
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_InitTick+0xe8>)
 80013f2:	4a22      	ldr	r2, [pc, #136]	; (800147c <HAL_InitTick+0xec>)
 80013f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_InitTick+0xe8>)
 80013f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013fc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013fe:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <HAL_InitTick+0xe8>)
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_InitTick+0xe8>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_InitTick+0xe8>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_InitTick+0xe8>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001416:	4818      	ldr	r0, [pc, #96]	; (8001478 <HAL_InitTick+0xe8>)
 8001418:	f006 fe7e 	bl	8008118 <HAL_TIM_Base_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001422:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001426:	2b00      	cmp	r3, #0
 8001428:	d11b      	bne.n	8001462 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800142a:	4813      	ldr	r0, [pc, #76]	; (8001478 <HAL_InitTick+0xe8>)
 800142c:	f006 fed6 	bl	80081dc <HAL_TIM_Base_Start_IT>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001436:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800143a:	2b00      	cmp	r3, #0
 800143c:	d111      	bne.n	8001462 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800143e:	2036      	movs	r0, #54	; 0x36
 8001440:	f001 fd9e 	bl	8002f80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	d808      	bhi.n	800145c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800144a:	2200      	movs	r2, #0
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	2036      	movs	r0, #54	; 0x36
 8001450:	f001 fd7a 	bl	8002f48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001454:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_InitTick+0xf0>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e002      	b.n	8001462 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001466:	4618      	mov	r0, r3
 8001468:	3738      	adds	r7, #56	; 0x38
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	431bde83 	.word	0x431bde83
 8001478:	20000398 	.word	0x20000398
 800147c:	40001000 	.word	0x40001000
 8001480:	2000000c 	.word	0x2000000c

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <DMA1_Channel4_IRQHandler+0x10>)
 80014b6:	f001 fe94 	bl	80031e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000180 	.word	0x20000180

080014c4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <ADC1_IRQHandler+0x10>)
 80014ca:	f000 fc6f 	bl	8001dac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000118 	.word	0x20000118

080014d8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <SDMMC1_IRQHandler+0x10>)
 80014de:	f005 fab3 	bl	8006a48 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000025c 	.word	0x2000025c

080014ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TIM6_DAC_IRQHandler+0x10>)
 80014f2:	f006 fee3 	bl	80082bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000398 	.word	0x20000398

08001500 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <SystemInit+0x20>)
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <SystemInit+0x20>)
 800150c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800155c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001528:	f7ff ffea 	bl	8001500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <LoopForever+0x6>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <LoopForever+0xe>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <LoopForever+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001552:	f00b fef3 	bl	800d33c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001556:	f7fe fefd 	bl	8000354 <main>

0800155a <LoopForever>:

LoopForever:
    b LoopForever
 800155a:	e7fe      	b.n	800155a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800155c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001568:	0800d6a4 	.word	0x0800d6a4
  ldr r2, =_sbss
 800156c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001570:	20001dd0 	.word	0x20001dd0

08001574 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <CAN1_RX0_IRQHandler>

08001576 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f001 fcd6 	bl	8002f32 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001586:	200f      	movs	r0, #15
 8001588:	f7ff ff02 	bl	8001390 <HAL_InitTick>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	e001      	b.n	800159c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001598:	f7ff fbb8 	bl	8000d0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800159c:	79fb      	ldrb	r3, [r7, #7]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000010 	.word	0x20000010
 80015cc:	200003e4 	.word	0x200003e4

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200003e4 	.word	0x200003e4

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000010 	.word	0x20000010

08001630 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	609a      	str	r2, [r3, #8]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3360      	adds	r3, #96	; 0x60
 80016aa:	461a      	mov	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <LL_ADC_SetOffset+0x44>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	4313      	orrs	r3, r2
 80016c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	03fff000 	.word	0x03fff000

080016e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3360      	adds	r3, #96	; 0x60
 80016ee:	461a      	mov	r2, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3360      	adds	r3, #96	; 0x60
 800171c:	461a      	mov	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	431a      	orrs	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	615a      	str	r2, [r3, #20]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800178e:	b480      	push	{r7}
 8001790:	b087      	sub	sp, #28
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3330      	adds	r3, #48	; 0x30
 800179e:	461a      	mov	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	4413      	add	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	211f      	movs	r1, #31
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	401a      	ands	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	0e9b      	lsrs	r3, r3, #26
 80017c6:	f003 011f 	and.w	r1, r3, #31
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3314      	adds	r3, #20
 800181c:	461a      	mov	r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	0e5b      	lsrs	r3, r3, #25
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	4413      	add	r3, r2
 800182a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	0d1b      	lsrs	r3, r3, #20
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2107      	movs	r1, #7
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	401a      	ands	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	0d1b      	lsrs	r3, r3, #20
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	431a      	orrs	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001856:	bf00      	nop
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0318 	and.w	r3, r3, #24
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001888:	40d9      	lsrs	r1, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	400b      	ands	r3, r1
 800188e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001892:	431a      	orrs	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	0007ffff 	.word	0x0007ffff

080018ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6093      	str	r3, [r2, #8]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018e4:	d101      	bne.n	80018ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800190c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001934:	d101      	bne.n	800193a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001958:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <LL_ADC_IsEnabled+0x18>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <LL_ADC_IsEnabled+0x1a>
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019aa:	f043 0204 	orr.w	r2, r3, #4
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d101      	bne.n	80019d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d101      	bne.n	80019fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e12f      	b.n	8001c86 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff f991 	bl	8000d5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff3f 	bl	80018d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff25 	bl	80018ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff5a 	bl	8001920 <LL_ADC_IsInternalRegulatorEnabled>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d115      	bne.n	8001a9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff3e 	bl	80018f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a7c:	4b84      	ldr	r3, [pc, #528]	; (8001c90 <HAL_ADC_Init+0x284>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	4a84      	ldr	r2, [pc, #528]	; (8001c94 <HAL_ADC_Init+0x288>)
 8001a84:	fba2 2303 	umull	r2, r3, r2, r3
 8001a88:	099b      	lsrs	r3, r3, #6
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a90:	e002      	b.n	8001a98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f9      	bne.n	8001a92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff3c 	bl	8001920 <LL_ADC_IsInternalRegulatorEnabled>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10d      	bne.n	8001aca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	f043 0210 	orr.w	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff75 	bl	80019be <LL_ADC_REG_IsConversionOngoing>
 8001ad4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 80c8 	bne.w	8001c74 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 80c4 	bne.w	8001c74 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001af4:	f043 0202 	orr.w	r2, r3, #2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff35 	bl	8001970 <LL_ADC_IsEnabled>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10b      	bne.n	8001b24 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b0c:	4862      	ldr	r0, [pc, #392]	; (8001c98 <HAL_ADC_Init+0x28c>)
 8001b0e:	f7ff ff2f 	bl	8001970 <LL_ADC_IsEnabled>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	485f      	ldr	r0, [pc, #380]	; (8001c9c <HAL_ADC_Init+0x290>)
 8001b20:	f7ff fd86 	bl	8001630 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7e5b      	ldrb	r3, [r3, #25]
 8001b28:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b2e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b42:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d106      	bne.n	8001b60 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	3b01      	subs	r3, #1
 8001b58:	045b      	lsls	r3, r3, #17
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d009      	beq.n	8001b7c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_ADC_Init+0x294>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff12 	bl	80019be <LL_ADC_REG_IsConversionOngoing>
 8001b9a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff1f 	bl	80019e4 <LL_ADC_INJ_IsConversionOngoing>
 8001ba6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d140      	bne.n	8001c30 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d13d      	bne.n	8001c30 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7e1b      	ldrb	r3, [r3, #24]
 8001bbc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bbe:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bc6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bd6:	f023 0306 	bic.w	r3, r3, #6
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d118      	bne.n	8001c20 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c04:	4311      	orrs	r1, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c0a:	4311      	orrs	r1, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c10:	430a      	orrs	r2, r1
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	611a      	str	r2, [r3, #16]
 8001c1e:	e007      	b.n	8001c30 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d10c      	bne.n	8001c52 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f023 010f 	bic.w	r1, r3, #15
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	1e5a      	subs	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c50:	e007      	b.n	8001c62 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 020f 	bic.w	r2, r2, #15
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f023 0303 	bic.w	r3, r3, #3
 8001c6a:	f043 0201 	orr.w	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	659a      	str	r2, [r3, #88]	; 0x58
 8001c72:	e007      	b.n	8001c84 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	f043 0210 	orr.w	r2, r3, #16
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c84:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008
 8001c94:	053e2d63 	.word	0x053e2d63
 8001c98:	50040000 	.word	0x50040000
 8001c9c:	50040300 	.word	0x50040300
 8001ca0:	fff0c007 	.word	0xfff0c007

08001ca4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fe82 	bl	80019be <LL_ADC_REG_IsConversionOngoing>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d167      	bne.n	8001d90 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_Start_DMA+0x2a>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e063      	b.n	8001d96 <HAL_ADC_Start_DMA+0xf2>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 fe36 	bl	8002948 <ADC_Enable>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d14f      	bne.n	8001d86 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	f023 0206 	bic.w	r2, r3, #6
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d12:	e002      	b.n	8001d1a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1e:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <HAL_ADC_Start_DMA+0xfc>)
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d26:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <HAL_ADC_Start_DMA+0x100>)
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <HAL_ADC_Start_DMA+0x104>)
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	221c      	movs	r2, #28
 8001d38:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0210 	orr.w	r2, r2, #16
 8001d50:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3340      	adds	r3, #64	; 0x40
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f001 f9bb 	bl	80030ec <HAL_DMA_Start_IT>
 8001d76:	4603      	mov	r3, r0
 8001d78:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fe09 	bl	8001996 <LL_ADC_REG_StartConversion>
 8001d84:	e006      	b.n	8001d94 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001d8e:	e001      	b.n	8001d94 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
 8001d92:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	08002a55 	.word	0x08002a55
 8001da4:	08002b2d 	.word	0x08002b2d
 8001da8:	08002b49 	.word	0x08002b49

08001dac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d017      	beq.n	8001e02 <HAL_ADC_IRQHandler+0x56>
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d012      	beq.n	8001e02 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d105      	bne.n	8001df4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fee9 	bl	8002bcc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d004      	beq.n	8001e16 <HAL_ADC_IRQHandler+0x6a>
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d05e      	beq.n	8001ede <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d059      	beq.n	8001ede <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fc8e 	bl	8001768 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d03e      	beq.n	8001ed0 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d135      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d12e      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fda1 	bl	80019be <LL_ADC_REG_IsConversionOngoing>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d11a      	bne.n	8001eb8 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 020c 	bic.w	r2, r2, #12
 8001e90:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d112      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	659a      	str	r2, [r3, #88]	; 0x58
 8001eb6:	e00b      	b.n	8001ed0 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	f043 0210 	orr.w	r2, r3, #16
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7fe f9b3 	bl	800023c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	220c      	movs	r2, #12
 8001edc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <HAL_ADC_IRQHandler+0x146>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d072      	beq.n	8001fe2 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d06d      	beq.n	8001fe2 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fc5f 	bl	80017e6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001f28:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fc1a 	bl	8001768 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f34:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d047      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_ADC_IRQHandler+0x1b2>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d03f      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d13a      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d133      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d12e      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fd32 	bl	80019e4 <LL_ADC_INJ_IsConversionOngoing>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11a      	bne.n	8001fbc <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f94:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d112      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f043 0201 	orr.w	r2, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	659a      	str	r2, [r3, #88]	; 0x58
 8001fba:	e00b      	b.n	8001fd4 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	f043 0210 	orr.w	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fdd1 	bl	8002b7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2260      	movs	r2, #96	; 0x60
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d011      	beq.n	8002010 <HAL_ADC_IRQHandler+0x264>
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f890 	bl	8002128 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <HAL_ADC_IRQHandler+0x294>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fdb7 	bl	8002ba4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800203e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002046:	2b00      	cmp	r3, #0
 8002048:	d012      	beq.n	8002070 <HAL_ADC_IRQHandler+0x2c4>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00d      	beq.n	8002070 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 fda9 	bl	8002bb8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	d02a      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x324>
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d025      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800208c:	2301      	movs	r3, #1
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	e008      	b.n	80020a4 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80020a0:	2301      	movs	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10e      	bne.n	80020c8 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	f043 0202 	orr.w	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f83a 	bl	800213c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2210      	movs	r2, #16
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d018      	beq.n	800210c <HAL_ADC_IRQHandler+0x360>
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	f043 0208 	orr.w	r2, r3, #8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002104:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fd42 	bl	8002b90 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800210c:	bf00      	nop
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0b6      	sub	sp, #216	; 0xd8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x22>
 800216e:	2302      	movs	r3, #2
 8002170:	e3d5      	b.n	800291e <HAL_ADC_ConfigChannel+0x7ce>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fc1d 	bl	80019be <LL_ADC_REG_IsConversionOngoing>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 83ba 	bne.w	8002900 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d824      	bhi.n	80021de <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	3b02      	subs	r3, #2
 800219a:	2b03      	cmp	r3, #3
 800219c:	d81b      	bhi.n	80021d6 <HAL_ADC_ConfigChannel+0x86>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <HAL_ADC_ConfigChannel+0x54>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021bd 	.word	0x080021bd
 80021ac:	080021c5 	.word	0x080021c5
 80021b0:	080021cd 	.word	0x080021cd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	220c      	movs	r2, #12
 80021b8:	605a      	str	r2, [r3, #4]
          break;
 80021ba:	e011      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2212      	movs	r2, #18
 80021c0:	605a      	str	r2, [r3, #4]
          break;
 80021c2:	e00d      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2218      	movs	r2, #24
 80021c8:	605a      	str	r2, [r3, #4]
          break;
 80021ca:	e009      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d2:	605a      	str	r2, [r3, #4]
          break;
 80021d4:	e004      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2206      	movs	r2, #6
 80021da:	605a      	str	r2, [r3, #4]
          break;
 80021dc:	e000      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80021de:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	f7ff face 	bl	800178e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fbe1 	bl	80019be <LL_ADC_REG_IsConversionOngoing>
 80021fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fbed 	bl	80019e4 <LL_ADC_INJ_IsConversionOngoing>
 800220a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800220e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002212:	2b00      	cmp	r3, #0
 8002214:	f040 81c1 	bne.w	800259a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002218:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 81bc 	bne.w	800259a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800222a:	d10f      	bne.n	800224c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	f7ff fae8 	bl	800180c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fa7c 	bl	8001742 <LL_ADC_SetSamplingTimeCommonConfig>
 800224a:	e00e      	b.n	800226a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	461a      	mov	r2, r3
 800225a:	f7ff fad7 	bl	800180c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fa6c 	bl	8001742 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d00a      	beq.n	80022a2 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6919      	ldr	r1, [r3, #16]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800229c:	f7ff f9fc 	bl	8001698 <LL_ADC_SetOffset>
 80022a0:	e17b      	b.n	800259a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fa19 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10a      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x17e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fa0e 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	e01e      	b.n	800230c <HAL_ADC_ConfigChannel+0x1bc>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fa03 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 80022da:	4603      	mov	r3, r0
 80022dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e004      	b.n	800230a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1d4>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	e018      	b.n	8002356 <HAL_ADC_ConfigChannel+0x206>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800233c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002348:	2320      	movs	r3, #32
 800234a:	e004      	b.n	8002356 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800234c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002356:	429a      	cmp	r2, r3
 8002358:	d106      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff f9d2 	bl	800170c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2101      	movs	r1, #1
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f9b6 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x244>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2101      	movs	r1, #1
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f9ab 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	0e9b      	lsrs	r3, r3, #26
 800238e:	f003 021f 	and.w	r2, r3, #31
 8002392:	e01e      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x282>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2101      	movs	r1, #1
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f9a0 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80023c2:	2320      	movs	r3, #32
 80023c4:	e004      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80023c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x29a>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	0e9b      	lsrs	r3, r3, #26
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	e018      	b.n	800241c <HAL_ADC_ConfigChannel+0x2cc>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800240e:	2320      	movs	r3, #32
 8002410:	e004      	b.n	800241c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800241c:	429a      	cmp	r2, r3
 800241e:	d106      	bne.n	800242e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2200      	movs	r2, #0
 8002426:	2101      	movs	r1, #1
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff f96f 	bl	800170c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2102      	movs	r1, #2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f953 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <HAL_ADC_ConfigChannel+0x30a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2102      	movs	r1, #2
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f948 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	0e9b      	lsrs	r3, r3, #26
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	e01e      	b.n	8002498 <HAL_ADC_ConfigChannel+0x348>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2102      	movs	r1, #2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff f93d 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800247c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002488:	2320      	movs	r3, #32
 800248a:	e004      	b.n	8002496 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800248c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x360>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	e016      	b.n	80024de <HAL_ADC_ConfigChannel+0x38e>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80024d0:	2320      	movs	r3, #32
 80024d2:	e004      	b.n	80024de <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80024d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024de:	429a      	cmp	r2, r3
 80024e0:	d106      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	2102      	movs	r1, #2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f90e 	bl	800170c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2103      	movs	r1, #3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff f8f2 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <HAL_ADC_ConfigChannel+0x3cc>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2103      	movs	r1, #3
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f8e7 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	f003 021f 	and.w	r2, r3, #31
 800251a:	e017      	b.n	800254c <HAL_ADC_ConfigChannel+0x3fc>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2103      	movs	r1, #3
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f8dc 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 8002528:	4603      	mov	r3, r0
 800252a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002536:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800253e:	2320      	movs	r3, #32
 8002540:	e003      	b.n	800254a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x414>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	e011      	b.n	8002588 <HAL_ADC_ConfigChannel+0x438>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002574:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800257c:	2320      	movs	r3, #32
 800257e:	e003      	b.n	8002588 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002588:	429a      	cmp	r2, r3
 800258a:	d106      	bne.n	800259a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2200      	movs	r2, #0
 8002592:	2103      	movs	r1, #3
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff f8b9 	bl	800170c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff f9e6 	bl	8001970 <LL_ADC_IsEnabled>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f040 8140 	bne.w	800282c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	461a      	mov	r2, r3
 80025ba:	f7ff f953 	bl	8001864 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4a8f      	ldr	r2, [pc, #572]	; (8002800 <HAL_ADC_ConfigChannel+0x6b0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	f040 8131 	bne.w	800282c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10b      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x4a2>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0e9b      	lsrs	r3, r3, #26
 80025e0:	3301      	adds	r3, #1
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2b09      	cmp	r3, #9
 80025e8:	bf94      	ite	ls
 80025ea:	2301      	movls	r3, #1
 80025ec:	2300      	movhi	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	e019      	b.n	8002626 <HAL_ADC_ConfigChannel+0x4d6>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002602:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800260a:	2320      	movs	r3, #32
 800260c:	e003      	b.n	8002616 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800260e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2b09      	cmp	r3, #9
 800261e:	bf94      	ite	ls
 8002620:	2301      	movls	r3, #1
 8002622:	2300      	movhi	r3, #0
 8002624:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002626:	2b00      	cmp	r3, #0
 8002628:	d079      	beq.n	800271e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d107      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x4f6>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	3301      	adds	r3, #1
 800263e:	069b      	lsls	r3, r3, #26
 8002640:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002644:	e015      	b.n	8002672 <HAL_ADC_ConfigChannel+0x522>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002656:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800265e:	2320      	movs	r3, #32
 8002660:	e003      	b.n	800266a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	3301      	adds	r3, #1
 800266c:	069b      	lsls	r3, r3, #26
 800266e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x542>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0e9b      	lsrs	r3, r3, #26
 8002684:	3301      	adds	r3, #1
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	e017      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x572>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80026aa:	2320      	movs	r3, #32
 80026ac:	e003      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80026ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	ea42 0103 	orr.w	r1, r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10a      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x598>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	3301      	adds	r3, #1
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	051b      	lsls	r3, r3, #20
 80026e6:	e018      	b.n	800271a <HAL_ADC_ConfigChannel+0x5ca>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002700:	2320      	movs	r3, #32
 8002702:	e003      	b.n	800270c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	3301      	adds	r3, #1
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271a:	430b      	orrs	r3, r1
 800271c:	e081      	b.n	8002822 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <HAL_ADC_ConfigChannel+0x5ea>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	3301      	adds	r3, #1
 8002732:	069b      	lsls	r3, r3, #26
 8002734:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002738:	e015      	b.n	8002766 <HAL_ADC_ConfigChannel+0x616>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002752:	2320      	movs	r3, #32
 8002754:	e003      	b.n	800275e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	3301      	adds	r3, #1
 8002760:	069b      	lsls	r3, r3, #26
 8002762:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x636>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	3301      	adds	r3, #1
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	e017      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x666>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	61fb      	str	r3, [r7, #28]
  return result;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800279e:	2320      	movs	r3, #32
 80027a0:	e003      	b.n	80027aa <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	ea42 0103 	orr.w	r1, r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10d      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x692>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0e9b      	lsrs	r3, r3, #26
 80027cc:	3301      	adds	r3, #1
 80027ce:	f003 021f 	and.w	r2, r3, #31
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	3b1e      	subs	r3, #30
 80027da:	051b      	lsls	r3, r3, #20
 80027dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e0:	e01e      	b.n	8002820 <HAL_ADC_ConfigChannel+0x6d0>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	613b      	str	r3, [r7, #16]
  return result;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e006      	b.n	800280c <HAL_ADC_ConfigChannel+0x6bc>
 80027fe:	bf00      	nop
 8002800:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	3301      	adds	r3, #1
 800280e:	f003 021f 	and.w	r2, r3, #31
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	3b1e      	subs	r3, #30
 800281a:	051b      	lsls	r3, r3, #20
 800281c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002820:	430b      	orrs	r3, r1
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	6892      	ldr	r2, [r2, #8]
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe fff0 	bl	800180c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_ADC_ConfigChannel+0x7d8>)
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d06c      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002838:	483c      	ldr	r0, [pc, #240]	; (800292c <HAL_ADC_ConfigChannel+0x7dc>)
 800283a:	f7fe ff1f 	bl	800167c <LL_ADC_GetCommonPathInternalCh>
 800283e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a3a      	ldr	r2, [pc, #232]	; (8002930 <HAL_ADC_ConfigChannel+0x7e0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d127      	bne.n	800289c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800284c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d121      	bne.n	800289c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a35      	ldr	r2, [pc, #212]	; (8002934 <HAL_ADC_ConfigChannel+0x7e4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d157      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002866:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800286a:	4619      	mov	r1, r3
 800286c:	482f      	ldr	r0, [pc, #188]	; (800292c <HAL_ADC_ConfigChannel+0x7dc>)
 800286e:	f7fe fef2 	bl	8001656 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_ADC_ConfigChannel+0x7e8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_ADC_ConfigChannel+0x7ec>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800288c:	e002      	b.n	8002894 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3b01      	subs	r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800289a:	e03a      	b.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <HAL_ADC_ConfigChannel+0x7f0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d113      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x77e>
 80028a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10d      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <HAL_ADC_ConfigChannel+0x7e4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d12a      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c4:	4619      	mov	r1, r3
 80028c6:	4819      	ldr	r0, [pc, #100]	; (800292c <HAL_ADC_ConfigChannel+0x7dc>)
 80028c8:	f7fe fec5 	bl	8001656 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028cc:	e021      	b.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <HAL_ADC_ConfigChannel+0x7f4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d11c      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d116      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a12      	ldr	r2, [pc, #72]	; (8002934 <HAL_ADC_ConfigChannel+0x7e4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d111      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f6:	4619      	mov	r1, r3
 80028f8:	480c      	ldr	r0, [pc, #48]	; (800292c <HAL_ADC_ConfigChannel+0x7dc>)
 80028fa:	f7fe feac 	bl	8001656 <LL_ADC_SetCommonPathInternalCh>
 80028fe:	e008      	b.n	8002912 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800291a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800291e:	4618      	mov	r0, r3
 8002920:	37d8      	adds	r7, #216	; 0xd8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	80080000 	.word	0x80080000
 800292c:	50040300 	.word	0x50040300
 8002930:	c7520000 	.word	0xc7520000
 8002934:	50040000 	.word	0x50040000
 8002938:	20000008 	.word	0x20000008
 800293c:	053e2d63 	.word	0x053e2d63
 8002940:	cb840000 	.word	0xcb840000
 8002944:	80000001 	.word	0x80000001

08002948 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff f809 	bl	8001970 <LL_ADC_IsEnabled>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d169      	bne.n	8002a38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <ADC_Enable+0xfc>)
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00d      	beq.n	800298e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f043 0210 	orr.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e055      	b.n	8002a3a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe ffd8 	bl	8001948 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002998:	482b      	ldr	r0, [pc, #172]	; (8002a48 <ADC_Enable+0x100>)
 800299a:	f7fe fe6f 	bl	800167c <LL_ADC_GetCommonPathInternalCh>
 800299e:	4603      	mov	r3, r0
 80029a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a8:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <ADC_Enable+0x104>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <ADC_Enable+0x108>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80029c2:	e002      	b.n	80029ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f9      	bne.n	80029c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029d0:	f7fe fdfe 	bl	80015d0 <HAL_GetTick>
 80029d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029d6:	e028      	b.n	8002a2a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe ffc7 	bl	8001970 <LL_ADC_IsEnabled>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d104      	bne.n	80029f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe ffab 	bl	8001948 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029f2:	f7fe fded 	bl	80015d0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d914      	bls.n	8002a2a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d00d      	beq.n	8002a2a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f043 0210 	orr.w	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e007      	b.n	8002a3a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d1cf      	bne.n	80029d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	8000003f 	.word	0x8000003f
 8002a48:	50040300 	.word	0x50040300
 8002a4c:	20000008 	.word	0x20000008
 8002a50:	053e2d63 	.word	0x053e2d63

08002a54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d14b      	bne.n	8002b06 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d021      	beq.n	8002acc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe fe6b 	bl	8001768 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d032      	beq.n	8002afe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d12b      	bne.n	8002afe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11f      	bne.n	8002afe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	659a      	str	r2, [r3, #88]	; 0x58
 8002aca:	e018      	b.n	8002afe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d111      	bne.n	8002afe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d105      	bne.n	8002afe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f7fd fb9c 	bl	800023c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b04:	e00e      	b.n	8002b24 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f7ff fb12 	bl	800213c <HAL_ADC_ErrorCallback>
}
 8002b18:	e004      	b.n	8002b24 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f7ff faea 	bl	8002114 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	f043 0204 	orr.w	r2, r3, #4
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff fae4 	bl	800213c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0ed      	b.n	8002dce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe f988 	bl	8000f14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c14:	f7fe fcdc 	bl	80015d0 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c1a:	e012      	b.n	8002c42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c1c:	f7fe fcd8 	bl	80015d0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b0a      	cmp	r3, #10
 8002c28:	d90b      	bls.n	8002c42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2205      	movs	r2, #5
 8002c3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0c5      	b.n	8002dce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0e5      	beq.n	8002c1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0202 	bic.w	r2, r2, #2
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c60:	f7fe fcb6 	bl	80015d0 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c66:	e012      	b.n	8002c8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c68:	f7fe fcb2 	bl	80015d0 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b0a      	cmp	r3, #10
 8002c74:	d90b      	bls.n	8002c8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2205      	movs	r2, #5
 8002c86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e09f      	b.n	8002dce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e5      	bne.n	8002c68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d108      	bne.n	8002cb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e007      	b.n	8002cc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7e5b      	ldrb	r3, [r3, #25]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d108      	bne.n	8002ce0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e007      	b.n	8002cf0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7e9b      	ldrb	r3, [r3, #26]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d108      	bne.n	8002d0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0220 	orr.w	r2, r2, #32
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e007      	b.n	8002d1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0220 	bic.w	r2, r2, #32
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7edb      	ldrb	r3, [r3, #27]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d108      	bne.n	8002d34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0210 	bic.w	r2, r2, #16
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e007      	b.n	8002d44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0210 	orr.w	r2, r2, #16
 8002d42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7f1b      	ldrb	r3, [r3, #28]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d108      	bne.n	8002d5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0208 	orr.w	r2, r2, #8
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e007      	b.n	8002d6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0208 	bic.w	r2, r2, #8
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7f5b      	ldrb	r3, [r3, #29]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d108      	bne.n	8002d88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0204 	orr.w	r2, r2, #4
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e007      	b.n	8002d98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0204 	bic.w	r2, r2, #4
 8002d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	ea42 0103 	orr.w	r1, r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	1e5a      	subs	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df4:	4013      	ands	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0a:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <__NVIC_SetPriorityGrouping+0x44>)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	60d3      	str	r3, [r2, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <__NVIC_GetPriorityGrouping+0x18>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	f003 0307 	and.w	r3, r3, #7
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	db0b      	blt.n	8002e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	4907      	ldr	r1, [pc, #28]	; (8002e74 <__NVIC_EnableIRQ+0x38>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000e100 	.word	0xe000e100

08002e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	db0a      	blt.n	8002ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	490c      	ldr	r1, [pc, #48]	; (8002ec4 <__NVIC_SetPriority+0x4c>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea0:	e00a      	b.n	8002eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4908      	ldr	r1, [pc, #32]	; (8002ec8 <__NVIC_SetPriority+0x50>)
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	3b04      	subs	r3, #4
 8002eb0:	0112      	lsls	r2, r2, #4
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	761a      	strb	r2, [r3, #24]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000e100 	.word	0xe000e100
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b089      	sub	sp, #36	; 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f1c3 0307 	rsb	r3, r3, #7
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	bf28      	it	cs
 8002eea:	2304      	movcs	r3, #4
 8002eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d902      	bls.n	8002efc <NVIC_EncodePriority+0x30>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3b03      	subs	r3, #3
 8002efa:	e000      	b.n	8002efe <NVIC_EncodePriority+0x32>
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	401a      	ands	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43d9      	mvns	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	4313      	orrs	r3, r2
         );
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3724      	adds	r7, #36	; 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ff4c 	bl	8002dd8 <__NVIC_SetPriorityGrouping>
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5a:	f7ff ff61 	bl	8002e20 <__NVIC_GetPriorityGrouping>
 8002f5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	6978      	ldr	r0, [r7, #20]
 8002f66:	f7ff ffb1 	bl	8002ecc <NVIC_EncodePriority>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ff80 	bl	8002e78 <__NVIC_SetPriority>
}
 8002f78:	bf00      	nop
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff54 	bl	8002e3c <__NVIC_EnableIRQ>
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e08d      	b.n	80030ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_DMA_Init+0x138>)
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d80f      	bhi.n	8002fda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4b45      	ldr	r3, [pc, #276]	; (80030d8 <HAL_DMA_Init+0x13c>)
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a45      	ldr	r2, [pc, #276]	; (80030dc <HAL_DMA_Init+0x140>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	009a      	lsls	r2, r3, #2
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a42      	ldr	r2, [pc, #264]	; (80030e0 <HAL_DMA_Init+0x144>)
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
 8002fd8:	e00e      	b.n	8002ff8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <HAL_DMA_Init+0x148>)
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a3d      	ldr	r2, [pc, #244]	; (80030dc <HAL_DMA_Init+0x140>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	009a      	lsls	r2, r3, #2
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a3c      	ldr	r2, [pc, #240]	; (80030e8 <HAL_DMA_Init+0x14c>)
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800301c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f9b6 	bl	80033bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003058:	d102      	bne.n	8003060 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003074:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d010      	beq.n	80030a0 <HAL_DMA_Init+0x104>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d80c      	bhi.n	80030a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f9d6 	bl	8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	e008      	b.n	80030b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40020407 	.word	0x40020407
 80030d8:	bffdfff8 	.word	0xbffdfff8
 80030dc:	cccccccd 	.word	0xcccccccd
 80030e0:	40020000 	.word	0x40020000
 80030e4:	bffdfbf8 	.word	0xbffdfbf8
 80030e8:	40020400 	.word	0x40020400

080030ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_DMA_Start_IT+0x20>
 8003108:	2302      	movs	r3, #2
 800310a:	e066      	b.n	80031da <HAL_DMA_Start_IT+0xee>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d155      	bne.n	80031cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f8fb 	bl	8003340 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	2b00      	cmp	r3, #0
 8003150:	d008      	beq.n	8003164 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 020e 	orr.w	r2, r2, #14
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e00f      	b.n	8003184 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0204 	bic.w	r2, r2, #4
 8003172:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 020a 	orr.w	r2, r2, #10
 8003182:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e005      	b.n	80031d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
 80031d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f003 031c 	and.w	r3, r3, #28
 8003202:	2204      	movs	r2, #4
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d026      	beq.n	800325c <HAL_DMA_IRQHandler+0x7a>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d021      	beq.n	800325c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d107      	bne.n	8003236 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0204 	bic.w	r2, r2, #4
 8003234:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f003 021c 	and.w	r2, r3, #28
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2104      	movs	r1, #4
 8003244:	fa01 f202 	lsl.w	r2, r1, r2
 8003248:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	2b00      	cmp	r3, #0
 8003250:	d071      	beq.n	8003336 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800325a:	e06c      	b.n	8003336 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	f003 031c 	and.w	r3, r3, #28
 8003264:	2202      	movs	r2, #2
 8003266:	409a      	lsls	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d02e      	beq.n	80032ce <HAL_DMA_IRQHandler+0xec>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d029      	beq.n	80032ce <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 020a 	bic.w	r2, r2, #10
 8003296:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	f003 021c 	and.w	r2, r3, #28
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	2102      	movs	r1, #2
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d038      	beq.n	8003336 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032cc:	e033      	b.n	8003336 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f003 031c 	and.w	r3, r3, #28
 80032d6:	2208      	movs	r2, #8
 80032d8:	409a      	lsls	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02a      	beq.n	8003338 <HAL_DMA_IRQHandler+0x156>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d025      	beq.n	8003338 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 020e 	bic.w	r2, r2, #14
 80032fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	f003 021c 	and.w	r2, r3, #28
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f202 	lsl.w	r2, r1, r2
 800330e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332a:	2b00      	cmp	r3, #0
 800332c:	d004      	beq.n	8003338 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003336:	bf00      	nop
 8003338:	bf00      	nop
}
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003356:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003368:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f003 021c 	and.w	r2, r3, #28
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2101      	movs	r1, #1
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b10      	cmp	r3, #16
 800338c:	d108      	bne.n	80033a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800339e:	e007      	b.n	80033b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	60da      	str	r2, [r3, #12]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b17      	ldr	r3, [pc, #92]	; (8003428 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d80a      	bhi.n	80033e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033dc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6493      	str	r3, [r2, #72]	; 0x48
 80033e4:	e007      	b.n	80033f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	009a      	lsls	r2, r3, #2
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80033f0:	4413      	add	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	3b08      	subs	r3, #8
 80033fe:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800340c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2201      	movs	r2, #1
 8003416:	409a      	lsls	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40020407 	.word	0x40020407
 800342c:	4002081c 	.word	0x4002081c
 8003430:	cccccccd 	.word	0xcccccccd
 8003434:	40020880 	.word	0x40020880

08003438 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a08      	ldr	r2, [pc, #32]	; (800347c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800345a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3b01      	subs	r3, #1
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2201      	movs	r2, #1
 8003466:	409a      	lsls	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	1000823f 	.word	0x1000823f
 800347c:	40020940 	.word	0x40020940

08003480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348e:	e166      	b.n	800375e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8158 	beq.w	8003758 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d005      	beq.n	80034c0 <HAL_GPIO_Init+0x40>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d130      	bne.n	8003522 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034f6:	2201      	movs	r2, #1
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f003 0201 	and.w	r2, r3, #1
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b03      	cmp	r3, #3
 800352c:	d017      	beq.n	800355e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	2203      	movs	r2, #3
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4013      	ands	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d123      	bne.n	80035b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	08da      	lsrs	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3208      	adds	r2, #8
 8003572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	220f      	movs	r2, #15
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	08da      	lsrs	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3208      	adds	r2, #8
 80035ac:	6939      	ldr	r1, [r7, #16]
 80035ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 0203 	and.w	r2, r3, #3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80b2 	beq.w	8003758 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f4:	4b61      	ldr	r3, [pc, #388]	; (800377c <HAL_GPIO_Init+0x2fc>)
 80035f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f8:	4a60      	ldr	r2, [pc, #384]	; (800377c <HAL_GPIO_Init+0x2fc>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6613      	str	r3, [r2, #96]	; 0x60
 8003600:	4b5e      	ldr	r3, [pc, #376]	; (800377c <HAL_GPIO_Init+0x2fc>)
 8003602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800360c:	4a5c      	ldr	r2, [pc, #368]	; (8003780 <HAL_GPIO_Init+0x300>)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	3302      	adds	r3, #2
 8003614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003618:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	220f      	movs	r2, #15
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003636:	d02b      	beq.n	8003690 <HAL_GPIO_Init+0x210>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a52      	ldr	r2, [pc, #328]	; (8003784 <HAL_GPIO_Init+0x304>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d025      	beq.n	800368c <HAL_GPIO_Init+0x20c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a51      	ldr	r2, [pc, #324]	; (8003788 <HAL_GPIO_Init+0x308>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d01f      	beq.n	8003688 <HAL_GPIO_Init+0x208>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a50      	ldr	r2, [pc, #320]	; (800378c <HAL_GPIO_Init+0x30c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d019      	beq.n	8003684 <HAL_GPIO_Init+0x204>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a4f      	ldr	r2, [pc, #316]	; (8003790 <HAL_GPIO_Init+0x310>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d013      	beq.n	8003680 <HAL_GPIO_Init+0x200>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a4e      	ldr	r2, [pc, #312]	; (8003794 <HAL_GPIO_Init+0x314>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00d      	beq.n	800367c <HAL_GPIO_Init+0x1fc>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a4d      	ldr	r2, [pc, #308]	; (8003798 <HAL_GPIO_Init+0x318>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d007      	beq.n	8003678 <HAL_GPIO_Init+0x1f8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a4c      	ldr	r2, [pc, #304]	; (800379c <HAL_GPIO_Init+0x31c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_GPIO_Init+0x1f4>
 8003670:	2307      	movs	r3, #7
 8003672:	e00e      	b.n	8003692 <HAL_GPIO_Init+0x212>
 8003674:	2308      	movs	r3, #8
 8003676:	e00c      	b.n	8003692 <HAL_GPIO_Init+0x212>
 8003678:	2306      	movs	r3, #6
 800367a:	e00a      	b.n	8003692 <HAL_GPIO_Init+0x212>
 800367c:	2305      	movs	r3, #5
 800367e:	e008      	b.n	8003692 <HAL_GPIO_Init+0x212>
 8003680:	2304      	movs	r3, #4
 8003682:	e006      	b.n	8003692 <HAL_GPIO_Init+0x212>
 8003684:	2303      	movs	r3, #3
 8003686:	e004      	b.n	8003692 <HAL_GPIO_Init+0x212>
 8003688:	2302      	movs	r3, #2
 800368a:	e002      	b.n	8003692 <HAL_GPIO_Init+0x212>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_GPIO_Init+0x212>
 8003690:	2300      	movs	r3, #0
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	f002 0203 	and.w	r2, r2, #3
 8003698:	0092      	lsls	r2, r2, #2
 800369a:	4093      	lsls	r3, r2
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036a2:	4937      	ldr	r1, [pc, #220]	; (8003780 <HAL_GPIO_Init+0x300>)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	3302      	adds	r3, #2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036b0:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_GPIO_Init+0x320>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d4:	4a32      	ldr	r2, [pc, #200]	; (80037a0 <HAL_GPIO_Init+0x320>)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_GPIO_Init+0x320>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036fe:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <HAL_GPIO_Init+0x320>)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003704:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_GPIO_Init+0x320>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_GPIO_Init+0x320>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800372e:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <HAL_GPIO_Init+0x320>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003752:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <HAL_GPIO_Init+0x320>)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3301      	adds	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	f47f ae91 	bne.w	8003490 <HAL_GPIO_Init+0x10>
  }
}
 800376e:	bf00      	nop
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40021000 	.word	0x40021000
 8003780:	40010000 	.word	0x40010000
 8003784:	48000400 	.word	0x48000400
 8003788:	48000800 	.word	0x48000800
 800378c:	48000c00 	.word	0x48000c00
 8003790:	48001000 	.word	0x48001000
 8003794:	48001400 	.word	0x48001400
 8003798:	48001800 	.word	0x48001800
 800379c:	48001c00 	.word	0x48001c00
 80037a0:	40010400 	.word	0x40010400

080037a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	e001      	b.n	80037c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	807b      	strh	r3, [r7, #2]
 80037e0:	4613      	mov	r3, r2
 80037e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e4:	787b      	ldrb	r3, [r7, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037f0:	e002      	b.n	80037f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e081      	b.n	800391a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fbb6 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	; 0x24
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003854:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003864:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	e006      	b.n	800388c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800388a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d104      	bne.n	800389e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800389c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69d9      	ldr	r1, [r3, #28]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b20      	cmp	r3, #32
 8003936:	d138      	bne.n	80039aa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003942:	2302      	movs	r3, #2
 8003944:	e032      	b.n	80039ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2224      	movs	r2, #36	; 0x24
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003974:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6819      	ldr	r1, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d139      	bne.n	8003a42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039d8:	2302      	movs	r3, #2
 80039da:	e033      	b.n	8003a44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2224      	movs	r2, #36	; 0x24
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e000      	b.n	8003a44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
  }
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a54:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a60:	d102      	bne.n	8003a68 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a66:	e00b      	b.n	8003a80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003a68:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a76:	d102      	bne.n	8003a7e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a7c:	e000      	b.n	8003a80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a7e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40007000 	.word	0x40007000

08003a90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d141      	bne.n	8003b22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d131      	bne.n	8003b10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aac:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab2:	4a46      	ldr	r2, [pc, #280]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ac4:	4a41      	ldr	r2, [pc, #260]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003acc:	4b40      	ldr	r3, [pc, #256]	; (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2232      	movs	r2, #50	; 0x32
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	4a3f      	ldr	r2, [pc, #252]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	0c9b      	lsrs	r3, r3, #18
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ae2:	e002      	b.n	8003aea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aea:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af6:	d102      	bne.n	8003afe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f2      	bne.n	8003ae4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0a:	d158      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e057      	b.n	8003bc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b10:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b16:	4a2d      	ldr	r2, [pc, #180]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b20:	e04d      	b.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b28:	d141      	bne.n	8003bae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b2a:	4b28      	ldr	r3, [pc, #160]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b36:	d131      	bne.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b38:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b3e:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b48:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b50:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2232      	movs	r2, #50	; 0x32
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	0c9b      	lsrs	r3, r3, #18
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b6e:	e002      	b.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	d102      	bne.n	8003b8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f2      	bne.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b96:	d112      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e011      	b.n	8003bc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bac:	e007      	b.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bb6:	4a05      	ldr	r2, [pc, #20]	; (8003bcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bbc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	20000008 	.word	0x20000008
 8003bd4:	431bde83 	.word	0x431bde83

08003bd8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be6:	6053      	str	r3, [r2, #4]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40007000 	.word	0x40007000

08003bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f000 bc08 	b.w	800441c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0c:	4b96      	ldr	r3, [pc, #600]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c16:	4b94      	ldr	r3, [pc, #592]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80e4 	beq.w	8003df6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4c>
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	f040 808b 	bne.w	8003d52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	f040 8087 	bne.w	8003d52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c44:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_OscConfig+0x64>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e3df      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	4b81      	ldr	r3, [pc, #516]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_RCC_OscConfig+0x7e>
 8003c6c:	4b7e      	ldr	r3, [pc, #504]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c74:	e005      	b.n	8003c82 <HAL_RCC_OscConfig+0x8a>
 8003c76:	4b7c      	ldr	r3, [pc, #496]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d223      	bcs.n	8003cce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fdfc 	bl	8004888 <RCC_SetFlashLatencyFromMSIRange>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e3c0      	b.n	800441c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c9a:	4b73      	ldr	r3, [pc, #460]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a72      	ldr	r2, [pc, #456]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	f043 0308 	orr.w	r3, r3, #8
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b70      	ldr	r3, [pc, #448]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	496d      	ldr	r1, [pc, #436]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cb8:	4b6b      	ldr	r3, [pc, #428]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	4968      	ldr	r1, [pc, #416]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
 8003ccc:	e025      	b.n	8003d1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cce:	4b66      	ldr	r3, [pc, #408]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cd4:	f043 0308 	orr.w	r3, r3, #8
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4960      	ldr	r1, [pc, #384]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cec:	4b5e      	ldr	r3, [pc, #376]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	495b      	ldr	r1, [pc, #364]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fdbc 	bl	8004888 <RCC_SetFlashLatencyFromMSIRange>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e380      	b.n	800441c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d1a:	f000 fcc1 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b51      	ldr	r3, [pc, #324]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	4950      	ldr	r1, [pc, #320]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d2c:	5ccb      	ldrb	r3, [r1, r3]
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	4a4e      	ldr	r2, [pc, #312]	; (8003e70 <HAL_RCC_OscConfig+0x278>)
 8003d38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d3a:	4b4e      	ldr	r3, [pc, #312]	; (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd fb26 	bl	8001390 <HAL_InitTick>
 8003d44:	4603      	mov	r3, r0
 8003d46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d052      	beq.n	8003df4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	e364      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d032      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d5a:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d66:	f7fd fc33 	bl	80015d0 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d6e:	f7fd fc2f 	bl	80015d0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e34d      	b.n	800441c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d80:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d8c:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a35      	ldr	r2, [pc, #212]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d92:	f043 0308 	orr.w	r3, r3, #8
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b33      	ldr	r3, [pc, #204]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4930      	ldr	r1, [pc, #192]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003daa:	4b2f      	ldr	r3, [pc, #188]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	492b      	ldr	r1, [pc, #172]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	604b      	str	r3, [r1, #4]
 8003dbe:	e01a      	b.n	8003df6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dc0:	4b29      	ldr	r3, [pc, #164]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dcc:	f7fd fc00 	bl	80015d0 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dd4:	f7fd fbfc 	bl	80015d0 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e31a      	b.n	800441c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x1dc>
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003df4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d073      	beq.n	8003eea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_OscConfig+0x21c>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	d10e      	bne.n	8003e2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d063      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x2f0>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d15f      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e2f7      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x24c>
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a0b      	ldr	r2, [pc, #44]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e025      	b.n	8003e90 <HAL_RCC_OscConfig+0x298>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	d114      	bne.n	8003e78 <HAL_RCC_OscConfig+0x280>
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a02      	ldr	r2, [pc, #8]	; (8003e68 <HAL_RCC_OscConfig+0x270>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e013      	b.n	8003e90 <HAL_RCC_OscConfig+0x298>
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	0800d5e0 	.word	0x0800d5e0
 8003e70:	20000008 	.word	0x20000008
 8003e74:	2000000c 	.word	0x2000000c
 8003e78:	4ba0      	ldr	r3, [pc, #640]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a9f      	ldr	r2, [pc, #636]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	4b9d      	ldr	r3, [pc, #628]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a9c      	ldr	r2, [pc, #624]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fd fb9a 	bl	80015d0 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fd fb96 	bl	80015d0 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e2b4      	b.n	800441c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb2:	4b92      	ldr	r3, [pc, #584]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x2a8>
 8003ebe:	e014      	b.n	8003eea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fb86 	bl	80015d0 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec8:	f7fd fb82 	bl	80015d0 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e2a0      	b.n	800441c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eda:	4b88      	ldr	r3, [pc, #544]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2d0>
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d060      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_OscConfig+0x310>
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d119      	bne.n	8003f36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d116      	bne.n	8003f36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f08:	4b7c      	ldr	r3, [pc, #496]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_OscConfig+0x328>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e27d      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f20:	4b76      	ldr	r3, [pc, #472]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	4973      	ldr	r1, [pc, #460]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f34:	e040      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d023      	beq.n	8003f86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f3e:	4b6f      	ldr	r3, [pc, #444]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6e      	ldr	r2, [pc, #440]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fd fb41 	bl	80015d0 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f52:	f7fd fb3d 	bl	80015d0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e25b      	b.n	800441c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f64:	4b65      	ldr	r3, [pc, #404]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	4b62      	ldr	r3, [pc, #392]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	495f      	ldr	r1, [pc, #380]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	e018      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f86:	4b5d      	ldr	r3, [pc, #372]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a5c      	ldr	r2, [pc, #368]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7fd fb1d 	bl	80015d0 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9a:	f7fd fb19 	bl	80015d0 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e237      	b.n	800441c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fac:	4b53      	ldr	r3, [pc, #332]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d03c      	beq.n	800403e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01c      	beq.n	8004006 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fcc:	4b4b      	ldr	r3, [pc, #300]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd2:	4a4a      	ldr	r2, [pc, #296]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fd faf8 	bl	80015d0 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fd faf4 	bl	80015d0 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e212      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8003ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ef      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x3ec>
 8004004:	e01b      	b.n	800403e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004006:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400c:	4a3b      	ldr	r2, [pc, #236]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004016:	f7fd fadb 	bl	80015d0 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401e:	f7fd fad7 	bl	80015d0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e1f5      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004030:	4b32      	ldr	r3, [pc, #200]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ef      	bne.n	800401e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80a6 	beq.w	8004198 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404c:	2300      	movs	r3, #0
 800404e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004050:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405c:	4b27      	ldr	r3, [pc, #156]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004066:	6593      	str	r3, [r2, #88]	; 0x58
 8004068:	4b24      	ldr	r3, [pc, #144]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d118      	bne.n	80040b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004084:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004090:	f7fd fa9e 	bl	80015d0 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004098:	f7fd fa9a 	bl	80015d0 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e1b8      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_RCC_OscConfig+0x508>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d108      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4d8>
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ce:	e029      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	d115      	bne.n	8004104 <HAL_RCC_OscConfig+0x50c>
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a03      	ldr	r2, [pc, #12]	; (80040fc <HAL_RCC_OscConfig+0x504>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f8:	e014      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	40007000 	.word	0x40007000
 8004104:	4b9d      	ldr	r3, [pc, #628]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	4a9c      	ldr	r2, [pc, #624]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004114:	4b99      	ldr	r3, [pc, #612]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	4a98      	ldr	r2, [pc, #608]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d016      	beq.n	800415a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fd fa50 	bl	80015d0 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004134:	f7fd fa4c 	bl	80015d0 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e168      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800414a:	4b8c      	ldr	r3, [pc, #560]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ed      	beq.n	8004134 <HAL_RCC_OscConfig+0x53c>
 8004158:	e015      	b.n	8004186 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415a:	f7fd fa39 	bl	80015d0 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fd fa35 	bl	80015d0 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e151      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004178:	4b80      	ldr	r3, [pc, #512]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ed      	bne.n	8004162 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004186:	7ffb      	ldrb	r3, [r7, #31]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418c:	4b7b      	ldr	r3, [pc, #492]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	4a7a      	ldr	r2, [pc, #488]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004196:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d03c      	beq.n	800421e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041ac:	4b73      	ldr	r3, [pc, #460]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80041ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041b2:	4a72      	ldr	r2, [pc, #456]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fd fa08 	bl	80015d0 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041c4:	f7fd fa04 	bl	80015d0 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e122      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041d6:	4b69      	ldr	r3, [pc, #420]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80041d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ef      	beq.n	80041c4 <HAL_RCC_OscConfig+0x5cc>
 80041e4:	e01b      	b.n	800421e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80041e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ec:	4a63      	ldr	r2, [pc, #396]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fd f9eb 	bl	80015d0 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041fe:	f7fd f9e7 	bl	80015d0 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e105      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004210:	4b5a      	ldr	r3, [pc, #360]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1ef      	bne.n	80041fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80f9 	beq.w	800441a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	2b02      	cmp	r3, #2
 800422e:	f040 80cf 	bne.w	80043d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004232:	4b52      	ldr	r3, [pc, #328]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f003 0203 	and.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	429a      	cmp	r2, r3
 8004244:	d12c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	3b01      	subs	r3, #1
 8004252:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d123      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d11b      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004274:	429a      	cmp	r2, r3
 8004276:	d113      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	3b01      	subs	r3, #1
 8004286:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d109      	bne.n	80042a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	3b01      	subs	r3, #1
 800429a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d071      	beq.n	8004384 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	d068      	beq.n	8004378 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042a6:	4b35      	ldr	r3, [pc, #212]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d105      	bne.n	80042be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042b2:	4b32      	ldr	r3, [pc, #200]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e0ac      	b.n	800441c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042c2:	4b2e      	ldr	r3, [pc, #184]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a2d      	ldr	r2, [pc, #180]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042ce:	f7fd f97f 	bl	80015d0 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d6:	f7fd f97b 	bl	80015d0 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e099      	b.n	800441c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e8:	4b24      	ldr	r3, [pc, #144]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f0      	bne.n	80042d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f4:	4b21      	ldr	r3, [pc, #132]	; (800437c <HAL_RCC_OscConfig+0x784>)
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	4b21      	ldr	r3, [pc, #132]	; (8004380 <HAL_RCC_OscConfig+0x788>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004304:	3a01      	subs	r2, #1
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800430e:	0212      	lsls	r2, r2, #8
 8004310:	4311      	orrs	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004316:	0852      	lsrs	r2, r2, #1
 8004318:	3a01      	subs	r2, #1
 800431a:	0552      	lsls	r2, r2, #21
 800431c:	4311      	orrs	r1, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004322:	0852      	lsrs	r2, r2, #1
 8004324:	3a01      	subs	r2, #1
 8004326:	0652      	lsls	r2, r2, #25
 8004328:	4311      	orrs	r1, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800432e:	06d2      	lsls	r2, r2, #27
 8004330:	430a      	orrs	r2, r1
 8004332:	4912      	ldr	r1, [pc, #72]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004334:	4313      	orrs	r3, r2
 8004336:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004338:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0f      	ldr	r2, [pc, #60]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800433e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004342:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004344:	4b0d      	ldr	r3, [pc, #52]	; (800437c <HAL_RCC_OscConfig+0x784>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a0c      	ldr	r2, [pc, #48]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004350:	f7fd f93e 	bl	80015d0 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004358:	f7fd f93a 	bl	80015d0 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e058      	b.n	800441c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436a:	4b04      	ldr	r3, [pc, #16]	; (800437c <HAL_RCC_OscConfig+0x784>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004376:	e050      	b.n	800441a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e04f      	b.n	800441c <HAL_RCC_OscConfig+0x824>
 800437c:	40021000 	.word	0x40021000
 8004380:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <HAL_RCC_OscConfig+0x82c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d144      	bne.n	800441a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004390:	4b24      	ldr	r3, [pc, #144]	; (8004424 <HAL_RCC_OscConfig+0x82c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a23      	ldr	r2, [pc, #140]	; (8004424 <HAL_RCC_OscConfig+0x82c>)
 8004396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800439c:	4b21      	ldr	r3, [pc, #132]	; (8004424 <HAL_RCC_OscConfig+0x82c>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a20      	ldr	r2, [pc, #128]	; (8004424 <HAL_RCC_OscConfig+0x82c>)
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043a8:	f7fd f912 	bl	80015d0 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fd f90e 	bl	80015d0 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e02c      	b.n	800441c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c2:	4b18      	ldr	r3, [pc, #96]	; (8004424 <HAL_RCC_OscConfig+0x82c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x7b8>
 80043ce:	e024      	b.n	800441a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b0c      	cmp	r3, #12
 80043d4:	d01f      	beq.n	8004416 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b13      	ldr	r3, [pc, #76]	; (8004424 <HAL_RCC_OscConfig+0x82c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <HAL_RCC_OscConfig+0x82c>)
 80043dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fd f8f5 	bl	80015d0 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fd f8f1 	bl	80015d0 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e00f      	b.n	800441c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_RCC_OscConfig+0x82c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f0      	bne.n	80043ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_RCC_OscConfig+0x82c>)
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	4905      	ldr	r1, [pc, #20]	; (8004424 <HAL_RCC_OscConfig+0x82c>)
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCC_OscConfig+0x830>)
 8004410:	4013      	ands	r3, r2
 8004412:	60cb      	str	r3, [r1, #12]
 8004414:	e001      	b.n	800441a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	feeefffc 	.word	0xfeeefffc

0800442c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e11d      	b.n	8004680 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004444:	4b90      	ldr	r3, [pc, #576]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d910      	bls.n	8004474 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b8d      	ldr	r3, [pc, #564]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 020f 	bic.w	r2, r3, #15
 800445a:	498b      	ldr	r1, [pc, #556]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	4313      	orrs	r3, r2
 8004460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004462:	4b89      	ldr	r3, [pc, #548]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e105      	b.n	8004680 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d010      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	4b81      	ldr	r3, [pc, #516]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448c:	429a      	cmp	r2, r3
 800448e:	d908      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004490:	4b7e      	ldr	r3, [pc, #504]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	497b      	ldr	r1, [pc, #492]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d079      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d11e      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b6:	4b75      	ldr	r3, [pc, #468]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e0dc      	b.n	8004680 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80044c6:	f000 fa39 	bl	800493c <RCC_GetSysClockFreqFromPLLSource>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4a70      	ldr	r2, [pc, #448]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d946      	bls.n	8004560 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044d2:	4b6e      	ldr	r3, [pc, #440]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d140      	bne.n	8004560 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044de:	4b6b      	ldr	r3, [pc, #428]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e6:	4a69      	ldr	r2, [pc, #420]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e035      	b.n	8004560 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d107      	bne.n	800450c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fc:	4b63      	ldr	r3, [pc, #396]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d115      	bne.n	8004534 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0b9      	b.n	8004680 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d107      	bne.n	8004524 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004514:	4b5d      	ldr	r3, [pc, #372]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0ad      	b.n	8004680 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004524:	4b59      	ldr	r3, [pc, #356]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0a5      	b.n	8004680 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004534:	f000 f8b4 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8004538:	4603      	mov	r3, r0
 800453a:	4a55      	ldr	r2, [pc, #340]	; (8004690 <HAL_RCC_ClockConfig+0x264>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d90f      	bls.n	8004560 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004540:	4b52      	ldr	r3, [pc, #328]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800454c:	4b4f      	ldr	r3, [pc, #316]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004554:	4a4d      	ldr	r2, [pc, #308]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004560:	4b4a      	ldr	r3, [pc, #296]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 0203 	bic.w	r2, r3, #3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4947      	ldr	r1, [pc, #284]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004572:	f7fd f82d 	bl	80015d0 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004578:	e00a      	b.n	8004590 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457a:	f7fd f829 	bl	80015d0 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	; 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e077      	b.n	8004680 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004590:	4b3e      	ldr	r3, [pc, #248]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 020c 	and.w	r2, r3, #12
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	429a      	cmp	r2, r3
 80045a0:	d1eb      	bne.n	800457a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b80      	cmp	r3, #128	; 0x80
 80045a6:	d105      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045a8:	4b38      	ldr	r3, [pc, #224]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	4a37      	ldr	r2, [pc, #220]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d010      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	4b31      	ldr	r3, [pc, #196]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d208      	bcs.n	80045e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d0:	4b2e      	ldr	r3, [pc, #184]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	492b      	ldr	r1, [pc, #172]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e2:	4b29      	ldr	r3, [pc, #164]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d210      	bcs.n	8004612 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f0:	4b25      	ldr	r3, [pc, #148]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 020f 	bic.w	r2, r3, #15
 80045f8:	4923      	ldr	r1, [pc, #140]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004600:	4b21      	ldr	r3, [pc, #132]	; (8004688 <HAL_RCC_ClockConfig+0x25c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e036      	b.n	8004680 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800461e:	4b1b      	ldr	r3, [pc, #108]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4918      	ldr	r1, [pc, #96]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 800462c:	4313      	orrs	r3, r2
 800462e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d009      	beq.n	8004650 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800463c:	4b13      	ldr	r3, [pc, #76]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4910      	ldr	r1, [pc, #64]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 800464c:	4313      	orrs	r3, r2
 800464e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004650:	f000 f826 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <HAL_RCC_ClockConfig+0x260>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	490c      	ldr	r1, [pc, #48]	; (8004694 <HAL_RCC_ClockConfig+0x268>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
 800466c:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <HAL_RCC_ClockConfig+0x26c>)
 800466e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <HAL_RCC_ClockConfig+0x270>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7fc fe8b 	bl	8001390 <HAL_InitTick>
 800467a:	4603      	mov	r3, r0
 800467c:	73fb      	strb	r3, [r7, #15]

  return status;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40022000 	.word	0x40022000
 800468c:	40021000 	.word	0x40021000
 8004690:	04c4b400 	.word	0x04c4b400
 8004694:	0800d5e0 	.word	0x0800d5e0
 8004698:	20000008 	.word	0x20000008
 800469c:	2000000c 	.word	0x2000000c

080046a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b089      	sub	sp, #36	; 0x24
 80046a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	2300      	movs	r3, #0
 80046ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ae:	4b3e      	ldr	r3, [pc, #248]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046b8:	4b3b      	ldr	r3, [pc, #236]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x34>
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b0c      	cmp	r3, #12
 80046cc:	d121      	bne.n	8004712 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d11e      	bne.n	8004712 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046d4:	4b34      	ldr	r3, [pc, #208]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046e0:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	e005      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046f0:	4b2d      	ldr	r3, [pc, #180]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046fc:	4a2b      	ldr	r2, [pc, #172]	; (80047ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004704:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10d      	bne.n	8004728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004710:	e00a      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d102      	bne.n	800471e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004718:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	e004      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d101      	bne.n	8004728 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004724:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004726:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b0c      	cmp	r3, #12
 800472c:	d134      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800472e:	4b1e      	ldr	r3, [pc, #120]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d003      	beq.n	8004746 <HAL_RCC_GetSysClockFreq+0xa6>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b03      	cmp	r3, #3
 8004742:	d003      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0xac>
 8004744:	e005      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004746:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004748:	617b      	str	r3, [r7, #20]
      break;
 800474a:	e005      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800474c:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800474e:	617b      	str	r3, [r7, #20]
      break;
 8004750:	e002      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	617b      	str	r3, [r7, #20]
      break;
 8004756:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004758:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	3301      	adds	r3, #1
 8004764:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	fb03 f202 	mul.w	r2, r3, r2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800477e:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	0e5b      	lsrs	r3, r3, #25
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	3301      	adds	r3, #1
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004798:	69bb      	ldr	r3, [r7, #24]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3724      	adds	r7, #36	; 0x24
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000
 80047ac:	0800d5f8 	.word	0x0800d5f8
 80047b0:	00f42400 	.word	0x00f42400

080047b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b8:	4b03      	ldr	r3, [pc, #12]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047ba:	681b      	ldr	r3, [r3, #0]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	20000008 	.word	0x20000008

080047cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047d0:	f7ff fff0 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 80047d4:	4602      	mov	r2, r0
 80047d6:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	4904      	ldr	r1, [pc, #16]	; (80047f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047e2:	5ccb      	ldrb	r3, [r1, r3]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000
 80047f4:	0800d5f0 	.word	0x0800d5f0

080047f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047fc:	f7ff ffda 	bl	80047b4 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0adb      	lsrs	r3, r3, #11
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4904      	ldr	r1, [pc, #16]	; (8004820 <HAL_RCC_GetPCLK2Freq+0x28>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004818:	4618      	mov	r0, r3
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40021000 	.word	0x40021000
 8004820:	0800d5f0 	.word	0x0800d5f0

08004824 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	220f      	movs	r2, #15
 8004832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_RCC_GetClockConfig+0x5c>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <HAL_RCC_GetClockConfig+0x5c>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <HAL_RCC_GetClockConfig+0x5c>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004858:	4b09      	ldr	r3, [pc, #36]	; (8004880 <HAL_RCC_GetClockConfig+0x5c>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	08db      	lsrs	r3, r3, #3
 800485e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <HAL_RCC_GetClockConfig+0x60>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 020f 	and.w	r2, r3, #15
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	601a      	str	r2, [r3, #0]
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000
 8004884:	40022000 	.word	0x40022000

08004888 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004894:	4b27      	ldr	r3, [pc, #156]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048a0:	f7ff f8d6 	bl	8003a50 <HAL_PWREx_GetVoltageRange>
 80048a4:	6178      	str	r0, [r7, #20]
 80048a6:	e014      	b.n	80048d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048a8:	4b22      	ldr	r3, [pc, #136]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	4a21      	ldr	r2, [pc, #132]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6593      	str	r3, [r2, #88]	; 0x58
 80048b4:	4b1f      	ldr	r3, [pc, #124]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048c0:	f7ff f8c6 	bl	8003a50 <HAL_PWREx_GetVoltageRange>
 80048c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048c6:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	4a1a      	ldr	r2, [pc, #104]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d8:	d10b      	bne.n	80048f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b80      	cmp	r3, #128	; 0x80
 80048de:	d913      	bls.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2ba0      	cmp	r3, #160	; 0xa0
 80048e4:	d902      	bls.n	80048ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048e6:	2302      	movs	r3, #2
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	e00d      	b.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048ec:	2301      	movs	r3, #1
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	e00a      	b.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b7f      	cmp	r3, #127	; 0x7f
 80048f6:	d902      	bls.n	80048fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80048f8:	2302      	movs	r3, #2
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	e004      	b.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b70      	cmp	r3, #112	; 0x70
 8004902:	d101      	bne.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004904:	2301      	movs	r3, #1
 8004906:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f023 020f 	bic.w	r2, r3, #15
 8004910:	4909      	ldr	r1, [pc, #36]	; (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	429a      	cmp	r2, r3
 8004924:	d001      	beq.n	800492a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40021000 	.word	0x40021000
 8004938:	40022000 	.word	0x40022000

0800493c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004942:	4b2d      	ldr	r3, [pc, #180]	; (80049f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b03      	cmp	r3, #3
 8004950:	d00b      	beq.n	800496a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d825      	bhi.n	80049a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d008      	beq.n	8004970 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d11f      	bne.n	80049a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004964:	4b25      	ldr	r3, [pc, #148]	; (80049fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004966:	613b      	str	r3, [r7, #16]
    break;
 8004968:	e01f      	b.n	80049aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800496a:	4b24      	ldr	r3, [pc, #144]	; (80049fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800496c:	613b      	str	r3, [r7, #16]
    break;
 800496e:	e01c      	b.n	80049aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004970:	4b21      	ldr	r3, [pc, #132]	; (80049f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d107      	bne.n	800498c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800497c:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800497e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e005      	b.n	8004998 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800498c:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a0:	613b      	str	r3, [r7, #16]
    break;
 80049a2:	e002      	b.n	80049aa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	613b      	str	r3, [r7, #16]
    break;
 80049a8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049aa:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	091b      	lsrs	r3, r3, #4
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	3301      	adds	r3, #1
 80049b6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	fb03 f202 	mul.w	r2, r3, r2
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	0e5b      	lsrs	r3, r3, #25
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	3301      	adds	r3, #1
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80049ea:	683b      	ldr	r3, [r7, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	40021000 	.word	0x40021000
 80049fc:	00f42400 	.word	0x00f42400
 8004a00:	0800d5f8 	.word	0x0800d5f8

08004a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a10:	2300      	movs	r3, #0
 8004a12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d040      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d02a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a28:	2b80      	cmp	r3, #128	; 0x80
 8004a2a:	d825      	bhi.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a2c:	2b60      	cmp	r3, #96	; 0x60
 8004a2e:	d026      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a30:	2b60      	cmp	r3, #96	; 0x60
 8004a32:	d821      	bhi.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d006      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d81d      	bhi.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d010      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004a44:	e018      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a46:	4b89      	ldr	r3, [pc, #548]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	4a88      	ldr	r2, [pc, #544]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a50:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a52:	e015      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fa82 	bl	8005f64 <RCCEx_PLLSAI1_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a64:	e00c      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3320      	adds	r3, #32
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 fb6d 	bl	800614c <RCCEx_PLLSAI2_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a76:	e003      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	74fb      	strb	r3, [r7, #19]
      break;
 8004a7c:	e000      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10b      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a86:	4b79      	ldr	r3, [pc, #484]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a8c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a94:	4975      	ldr	r1, [pc, #468]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004a9c:	e001      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9e:	7cfb      	ldrb	r3, [r7, #19]
 8004aa0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d047      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d030      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abc:	d82a      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac2:	d02a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ac8:	d824      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad4:	d81e      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ade:	d010      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ae0:	e018      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ae2:	4b62      	ldr	r3, [pc, #392]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	4a61      	ldr	r2, [pc, #388]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aec:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aee:	e015      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fa34 	bl	8005f64 <RCCEx_PLLSAI1_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b00:	e00c      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3320      	adds	r3, #32
 8004b06:	2100      	movs	r1, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 fb1f 	bl	800614c <RCCEx_PLLSAI2_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b12:	e003      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	74fb      	strb	r3, [r7, #19]
      break;
 8004b18:	e000      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b1c:	7cfb      	ldrb	r3, [r7, #19]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b22:	4b52      	ldr	r3, [pc, #328]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	494e      	ldr	r1, [pc, #312]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b38:	e001      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 809f 	beq.w	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b50:	4b46      	ldr	r3, [pc, #280]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b60:	2300      	movs	r3, #0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00d      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b66:	4b41      	ldr	r3, [pc, #260]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6a:	4a40      	ldr	r2, [pc, #256]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6593      	str	r3, [r2, #88]	; 0x58
 8004b72:	4b3e      	ldr	r3, [pc, #248]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b82:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a3a      	ldr	r2, [pc, #232]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b8e:	f7fc fd1f 	bl	80015d0 <HAL_GetTick>
 8004b92:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b94:	e009      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b96:	f7fc fd1b 	bl	80015d0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d902      	bls.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ba8:	e005      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004baa:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ef      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004bb6:	7cfb      	ldrb	r3, [r7, #19]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d15b      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bbc:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01f      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d019      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bda:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004be6:	4b21      	ldr	r3, [pc, #132]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bf6:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	4a1b      	ldr	r2, [pc, #108]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c06:	4a19      	ldr	r2, [pc, #100]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d016      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fc fcda 	bl	80015d0 <HAL_GetTick>
 8004c1c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c20:	f7fc fcd6 	bl	80015d0 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d902      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	74fb      	strb	r3, [r7, #19]
            break;
 8004c36:	e006      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0ec      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10c      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c5c:	4903      	ldr	r1, [pc, #12]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c64:	e008      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	74bb      	strb	r3, [r7, #18]
 8004c6a:	e005      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	7cfb      	ldrb	r3, [r7, #19]
 8004c76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c78:	7c7b      	ldrb	r3, [r7, #17]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d105      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c7e:	4ba0      	ldr	r3, [pc, #640]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	4a9f      	ldr	r2, [pc, #636]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c96:	4b9a      	ldr	r3, [pc, #616]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f023 0203 	bic.w	r2, r3, #3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca4:	4996      	ldr	r1, [pc, #600]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cb8:	4b91      	ldr	r3, [pc, #580]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	f023 020c 	bic.w	r2, r3, #12
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	498e      	ldr	r1, [pc, #568]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cda:	4b89      	ldr	r3, [pc, #548]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce8:	4985      	ldr	r1, [pc, #532]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cfc:	4b80      	ldr	r3, [pc, #512]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0a:	497d      	ldr	r1, [pc, #500]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d1e:	4b78      	ldr	r3, [pc, #480]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2c:	4974      	ldr	r1, [pc, #464]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d40:	4b6f      	ldr	r3, [pc, #444]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4e:	496c      	ldr	r1, [pc, #432]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d62:	4b67      	ldr	r3, [pc, #412]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d70:	4963      	ldr	r1, [pc, #396]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d84:	4b5e      	ldr	r3, [pc, #376]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d92:	495b      	ldr	r1, [pc, #364]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004da6:	4b56      	ldr	r3, [pc, #344]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db4:	4952      	ldr	r1, [pc, #328]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dc8:	4b4d      	ldr	r3, [pc, #308]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd6:	494a      	ldr	r1, [pc, #296]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dea:	4b45      	ldr	r3, [pc, #276]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df8:	4941      	ldr	r1, [pc, #260]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e0c:	4b3c      	ldr	r3, [pc, #240]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e12:	f023 0203 	bic.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1a:	4939      	ldr	r1, [pc, #228]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d028      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e2e:	4b34      	ldr	r3, [pc, #208]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3c:	4930      	ldr	r1, [pc, #192]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e4c:	d106      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e4e:	4b2c      	ldr	r3, [pc, #176]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	4a2b      	ldr	r2, [pc, #172]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e58:	60d3      	str	r3, [r2, #12]
 8004e5a:	e011      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f001 f879 	bl	8005f64 <RCCEx_PLLSAI1_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d04d      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e94:	d108      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004e96:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e9c:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004ea6:	e012      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ea8:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eae:	4a14      	ldr	r2, [pc, #80]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec6:	490e      	ldr	r1, [pc, #56]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed6:	d106      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee2:	60d3      	str	r3, [r2, #12]
 8004ee4:	e020      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eee:	d109      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a02      	ldr	r2, [pc, #8]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efa:	60d3      	str	r3, [r2, #12]
 8004efc:	e014      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3304      	adds	r3, #4
 8004f12:	2101      	movs	r1, #1
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 f825 	bl	8005f64 <RCCEx_PLLSAI1_Config>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f1e:	7cfb      	ldrb	r3, [r7, #19]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004f24:	7cfb      	ldrb	r3, [r7, #19]
 8004f26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d028      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f34:	4b7a      	ldr	r3, [pc, #488]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f42:	4977      	ldr	r1, [pc, #476]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f52:	d106      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f54:	4b72      	ldr	r3, [pc, #456]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4a71      	ldr	r2, [pc, #452]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f5e:	60d3      	str	r3, [r2, #12]
 8004f60:	e011      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	2101      	movs	r1, #1
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fff6 	bl	8005f64 <RCCEx_PLLSAI1_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f82:	7cfb      	ldrb	r3, [r7, #19]
 8004f84:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01e      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f92:	4b63      	ldr	r3, [pc, #396]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa2:	495f      	ldr	r1, [pc, #380]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	2102      	movs	r1, #2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 ffd1 	bl	8005f64 <RCCEx_PLLSAI1_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fc6:	7cfb      	ldrb	r3, [r7, #19]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004fcc:	7cfb      	ldrb	r3, [r7, #19]
 8004fce:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fdc:	4b50      	ldr	r3, [pc, #320]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fe2:	f023 0204 	bic.w	r2, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fec:	494c      	ldr	r1, [pc, #304]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00b      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005000:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005006:	f023 0218 	bic.w	r2, r3, #24
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	4943      	ldr	r1, [pc, #268]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d035      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005024:	4b3e      	ldr	r3, [pc, #248]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a3d      	ldr	r2, [pc, #244]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800502a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800502e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005030:	f7fc face 	bl	80015d0 <HAL_GetTick>
 8005034:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005036:	e009      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005038:	f7fc faca 	bl	80015d0 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d902      	bls.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	74fb      	strb	r3, [r7, #19]
        break;
 800504a:	e005      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800504c:	4b34      	ldr	r3, [pc, #208]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1ef      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d113      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800505e:	4b30      	ldr	r3, [pc, #192]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005060:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506e:	492c      	ldr	r1, [pc, #176]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3320      	adds	r3, #32
 800507a:	2102      	movs	r1, #2
 800507c:	4618      	mov	r0, r3
 800507e:	f001 f865 	bl	800614c <RCCEx_PLLSAI2_Config>
 8005082:	4603      	mov	r3, r0
 8005084:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005086:	7cfb      	ldrb	r3, [r7, #19]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800508c:	7cfb      	ldrb	r3, [r7, #19]
 800508e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01e      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800509c:	4b20      	ldr	r3, [pc, #128]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800509e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	491c      	ldr	r1, [pc, #112]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050be:	d10c      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3320      	adds	r3, #32
 80050c4:	2101      	movs	r1, #1
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 f840 	bl	800614c <RCCEx_PLLSAI2_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80050d6:	7cfb      	ldrb	r3, [r7, #19]
 80050d8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d017      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80050e6:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f6:	490a      	ldr	r1, [pc, #40]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005104:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005108:	d105      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	4a04      	ldr	r2, [pc, #16]	; (8005120 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005114:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005116:	7cbb      	ldrb	r3, [r7, #18]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000

08005124 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005136:	d13e      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005138:	4bb6      	ldr	r3, [pc, #728]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005142:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800514a:	d028      	beq.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005152:	f200 86f2 	bhi.w	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800515c:	d005      	beq.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005164:	d00e      	beq.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005166:	f000 bee8 	b.w	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800516a:	4baa      	ldr	r3, [pc, #680]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b02      	cmp	r3, #2
 8005176:	f040 86e2 	bne.w	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 800517a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517e:	61fb      	str	r3, [r7, #28]
      break;
 8005180:	f000 bedd 	b.w	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005184:	4ba3      	ldr	r3, [pc, #652]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	f040 86d7 	bne.w	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8005194:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005198:	61fb      	str	r3, [r7, #28]
      break;
 800519a:	f000 bed2 	b.w	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800519e:	4b9d      	ldr	r3, [pc, #628]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051aa:	f040 86cc 	bne.w	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 80051ae:	4b9a      	ldr	r3, [pc, #616]	; (8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80051b0:	61fb      	str	r3, [r7, #28]
      break;
 80051b2:	f000 bec8 	b.w	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051b6:	4b97      	ldr	r3, [pc, #604]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d036      	beq.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d840      	bhi.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d003      	beq.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d020      	beq.n	800521a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80051d8:	e039      	b.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80051da:	4b8e      	ldr	r3, [pc, #568]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d116      	bne.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80051e6:	4b8b      	ldr	r3, [pc, #556]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d005      	beq.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80051f2:	4b88      	ldr	r3, [pc, #544]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	e005      	b.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80051fe:	4b85      	ldr	r3, [pc, #532]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005204:	0a1b      	lsrs	r3, r3, #8
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	4a84      	ldr	r2, [pc, #528]	; (800541c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800520c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005210:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005212:	e01f      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	61bb      	str	r3, [r7, #24]
      break;
 8005218:	e01c      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800521a:	4b7e      	ldr	r3, [pc, #504]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005226:	d102      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005228:	4b7d      	ldr	r3, [pc, #500]	; (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800522a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800522c:	e012      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
      break;
 8005232:	e00f      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005234:	4b77      	ldr	r3, [pc, #476]	; (8005414 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005240:	d102      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005242:	4b77      	ldr	r3, [pc, #476]	; (8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005244:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005246:	e005      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	61bb      	str	r3, [r7, #24]
      break;
 800524c:	e002      	b.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	61bb      	str	r3, [r7, #24]
      break;
 8005252:	bf00      	nop
    }

    switch(PeriphClk)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800525a:	f000 8604 	beq.w	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005264:	f200 8671 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800526e:	f000 8467 	beq.w	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005278:	f200 8667 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005282:	f000 852f 	beq.w	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800528c:	f200 865d 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005296:	f000 8185 	beq.w	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052a0:	f200 8653 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052aa:	f000 80cb 	beq.w	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052b4:	f200 8649 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052be:	f000 842e 	beq.w	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c8:	f200 863f 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052d2:	f000 83e2 	beq.w	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052dc:	f200 8635 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e6:	f000 80ad 	beq.w	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f0:	f200 862b 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fa:	f000 809b 	beq.w	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005304:	f200 8621 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530e:	f000 8089 	beq.w	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005318:	f200 8617 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005322:	f000 8552 	beq.w	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532c:	f200 860d 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005336:	f000 84fe 	beq.w	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005340:	f200 8603 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534a:	f000 849f 	beq.w	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005354:	f200 85f9 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b80      	cmp	r3, #128	; 0x80
 800535c:	f000 846a 	beq.w	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	f200 85f1 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b20      	cmp	r3, #32
 800536c:	d84c      	bhi.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 85ea 	beq.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3b01      	subs	r3, #1
 800537a:	2b1f      	cmp	r3, #31
 800537c:	f200 85e5 	bhi.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005380:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005386:	bf00      	nop
 8005388:	08005799 	.word	0x08005799
 800538c:	08005807 	.word	0x08005807
 8005390:	08005f4b 	.word	0x08005f4b
 8005394:	0800589b 	.word	0x0800589b
 8005398:	08005f4b 	.word	0x08005f4b
 800539c:	08005f4b 	.word	0x08005f4b
 80053a0:	08005f4b 	.word	0x08005f4b
 80053a4:	08005913 	.word	0x08005913
 80053a8:	08005f4b 	.word	0x08005f4b
 80053ac:	08005f4b 	.word	0x08005f4b
 80053b0:	08005f4b 	.word	0x08005f4b
 80053b4:	08005f4b 	.word	0x08005f4b
 80053b8:	08005f4b 	.word	0x08005f4b
 80053bc:	08005f4b 	.word	0x08005f4b
 80053c0:	08005f4b 	.word	0x08005f4b
 80053c4:	08005997 	.word	0x08005997
 80053c8:	08005f4b 	.word	0x08005f4b
 80053cc:	08005f4b 	.word	0x08005f4b
 80053d0:	08005f4b 	.word	0x08005f4b
 80053d4:	08005f4b 	.word	0x08005f4b
 80053d8:	08005f4b 	.word	0x08005f4b
 80053dc:	08005f4b 	.word	0x08005f4b
 80053e0:	08005f4b 	.word	0x08005f4b
 80053e4:	08005f4b 	.word	0x08005f4b
 80053e8:	08005f4b 	.word	0x08005f4b
 80053ec:	08005f4b 	.word	0x08005f4b
 80053f0:	08005f4b 	.word	0x08005f4b
 80053f4:	08005f4b 	.word	0x08005f4b
 80053f8:	08005f4b 	.word	0x08005f4b
 80053fc:	08005f4b 	.word	0x08005f4b
 8005400:	08005f4b 	.word	0x08005f4b
 8005404:	08005a19 	.word	0x08005a19
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b40      	cmp	r3, #64	; 0x40
 800540c:	f000 83e6 	beq.w	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005410:	f000 bd9b 	b.w	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8005414:	40021000 	.word	0x40021000
 8005418:	0007a120 	.word	0x0007a120
 800541c:	0800d5f8 	.word	0x0800d5f8
 8005420:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005424:	69b9      	ldr	r1, [r7, #24]
 8005426:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800542a:	f000 ff83 	bl	8006334 <RCCEx_GetSAIxPeriphCLKFreq>
 800542e:	61f8      	str	r0, [r7, #28]
      break;
 8005430:	f000 bd8e 	b.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005434:	69b9      	ldr	r1, [r7, #24]
 8005436:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800543a:	f000 ff7b 	bl	8006334 <RCCEx_GetSAIxPeriphCLKFreq>
 800543e:	61f8      	str	r0, [r7, #28]
      break;
 8005440:	f000 bd86 	b.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005444:	4b9a      	ldr	r3, [pc, #616]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005456:	d015      	beq.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800545e:	f200 8092 	bhi.w	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005468:	d029      	beq.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005470:	f200 8089 	bhi.w	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d07b      	beq.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005480:	d04a      	beq.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8005482:	e080      	b.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005484:	4b8a      	ldr	r3, [pc, #552]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b02      	cmp	r3, #2
 800548e:	d17d      	bne.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005490:	4b87      	ldr	r3, [pc, #540]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 800549c:	4b84      	ldr	r3, [pc, #528]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	e005      	b.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80054a8:	4b81      	ldr	r3, [pc, #516]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	4a7f      	ldr	r2, [pc, #508]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80054b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ba:	61fb      	str	r3, [r7, #28]
          break;
 80054bc:	e066      	b.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80054be:	4b7c      	ldr	r3, [pc, #496]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ca:	d162      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80054cc:	4b78      	ldr	r3, [pc, #480]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d8:	d15b      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80054da:	4b75      	ldr	r3, [pc, #468]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054e4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	fb03 f202 	mul.w	r2, r3, r2
 80054ee:	4b70      	ldr	r3, [pc, #448]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	3301      	adds	r3, #1
 80054fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fe:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005500:	4b6b      	ldr	r3, [pc, #428]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	0d5b      	lsrs	r3, r3, #21
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	3301      	adds	r3, #1
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	61fb      	str	r3, [r7, #28]
          break;
 8005516:	e03c      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005518:	4b65      	ldr	r3, [pc, #404]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005524:	d138      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005526:	4b62      	ldr	r3, [pc, #392]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800552e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005532:	d131      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005534:	4b5e      	ldr	r3, [pc, #376]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	fb03 f202 	mul.w	r2, r3, r2
 8005548:	4b59      	ldr	r3, [pc, #356]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	3301      	adds	r3, #1
 8005554:	fbb2 f3f3 	udiv	r3, r2, r3
 8005558:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800555a:	4b55      	ldr	r3, [pc, #340]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	0d5b      	lsrs	r3, r3, #21
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	3301      	adds	r3, #1
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	fbb2 f3f3 	udiv	r3, r2, r3
 800556e:	61fb      	str	r3, [r7, #28]
          break;
 8005570:	e012      	b.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005572:	4b4f      	ldr	r3, [pc, #316]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b02      	cmp	r3, #2
 800557e:	d10e      	bne.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8005580:	4b4d      	ldr	r3, [pc, #308]	; (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005582:	61fb      	str	r3, [r7, #28]
          break;
 8005584:	e00b      	b.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8005586:	bf00      	nop
 8005588:	f000 bce2 	b.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800558c:	bf00      	nop
 800558e:	f000 bcdf 	b.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005592:	bf00      	nop
 8005594:	f000 bcdc 	b.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005598:	bf00      	nop
 800559a:	f000 bcd9 	b.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800559e:	bf00      	nop
        break;
 80055a0:	f000 bcd6 	b.w	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80055a4:	4b42      	ldr	r3, [pc, #264]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b2:	d13d      	bne.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80055b4:	4b3e      	ldr	r3, [pc, #248]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055c0:	f040 84c5 	bne.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80055c4:	4b3a      	ldr	r3, [pc, #232]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d0:	f040 84bd 	bne.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80055d4:	4b36      	ldr	r3, [pc, #216]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	0a1b      	lsrs	r3, r3, #8
 80055da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055de:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	fb03 f202 	mul.w	r2, r3, r2
 80055e8:	4b31      	ldr	r3, [pc, #196]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	091b      	lsrs	r3, r3, #4
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	3301      	adds	r3, #1
 80055f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80055fa:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	0edb      	lsrs	r3, r3, #27
 8005600:	f003 031f 	and.w	r3, r3, #31
 8005604:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800560c:	4b28      	ldr	r3, [pc, #160]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8005618:	2311      	movs	r3, #17
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e001      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 800561e:	2307      	movs	r3, #7
 8005620:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	61fb      	str	r3, [r7, #28]
      break;
 800562c:	f000 bc8f 	b.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005630:	4b1f      	ldr	r3, [pc, #124]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005636:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005642:	d016      	beq.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800564a:	f200 809b 	bhi.w	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005654:	d032      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565c:	f200 8092 	bhi.w	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 8084 	beq.w	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800566e:	d052      	beq.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8005670:	e088      	b.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005672:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b02      	cmp	r3, #2
 800567c:	f040 8084 	bne.w	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800568c:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	e005      	b.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800569a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800569e:	0a1b      	lsrs	r3, r3, #8
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	4a03      	ldr	r2, [pc, #12]	; (80056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056aa:	61fb      	str	r3, [r7, #28]
          break;
 80056ac:	e06c      	b.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80056ae:	bf00      	nop
 80056b0:	40021000 	.word	0x40021000
 80056b4:	0800d5f8 	.word	0x0800d5f8
 80056b8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80056bc:	4ba5      	ldr	r3, [pc, #660]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c8:	d160      	bne.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80056ca:	4ba2      	ldr	r3, [pc, #648]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056d6:	d159      	bne.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80056d8:	4b9e      	ldr	r3, [pc, #632]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	0a1b      	lsrs	r3, r3, #8
 80056de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	fb03 f202 	mul.w	r2, r3, r2
 80056ec:	4b99      	ldr	r3, [pc, #612]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	091b      	lsrs	r3, r3, #4
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	3301      	adds	r3, #1
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80056fe:	4b95      	ldr	r3, [pc, #596]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	0d5b      	lsrs	r3, r3, #21
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	3301      	adds	r3, #1
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005712:	61fb      	str	r3, [r7, #28]
          break;
 8005714:	e03a      	b.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8005716:	4b8f      	ldr	r3, [pc, #572]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800571e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005722:	d135      	bne.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005724:	4b8b      	ldr	r3, [pc, #556]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800572c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005730:	d12e      	bne.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005732:	4b88      	ldr	r3, [pc, #544]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	fb03 f202 	mul.w	r2, r3, r2
 8005746:	4b83      	ldr	r3, [pc, #524]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	091b      	lsrs	r3, r3, #4
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	3301      	adds	r3, #1
 8005752:	fbb2 f3f3 	udiv	r3, r2, r3
 8005756:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8005758:	4b7e      	ldr	r3, [pc, #504]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	0d5b      	lsrs	r3, r3, #21
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	3301      	adds	r3, #1
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	61fb      	str	r3, [r7, #28]
          break;
 800576e:	e00f      	b.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005770:	4b78      	ldr	r3, [pc, #480]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b02      	cmp	r3, #2
 800577c:	d10a      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800577e:	4b76      	ldr	r3, [pc, #472]	; (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005780:	61fb      	str	r3, [r7, #28]
          break;
 8005782:	e007      	b.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8005784:	bf00      	nop
 8005786:	e3e2      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005788:	bf00      	nop
 800578a:	e3e0      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800578c:	bf00      	nop
 800578e:	e3de      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005790:	bf00      	nop
 8005792:	e3dc      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8005794:	bf00      	nop
      break;
 8005796:	e3da      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005798:	4b6e      	ldr	r3, [pc, #440]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d827      	bhi.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 80057aa:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	080057c1 	.word	0x080057c1
 80057b4:	080057c9 	.word	0x080057c9
 80057b8:	080057d1 	.word	0x080057d1
 80057bc:	080057e5 	.word	0x080057e5
          frequency = HAL_RCC_GetPCLK2Freq();
 80057c0:	f7ff f81a 	bl	80047f8 <HAL_RCC_GetPCLK2Freq>
 80057c4:	61f8      	str	r0, [r7, #28]
          break;
 80057c6:	e01d      	b.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 80057c8:	f7fe ff6a 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 80057cc:	61f8      	str	r0, [r7, #28]
          break;
 80057ce:	e019      	b.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057d0:	4b60      	ldr	r3, [pc, #384]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057dc:	d10f      	bne.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 80057de:	4b5f      	ldr	r3, [pc, #380]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80057e0:	61fb      	str	r3, [r7, #28]
          break;
 80057e2:	e00c      	b.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057e4:	4b5b      	ldr	r3, [pc, #364]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d107      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 80057f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057f6:	61fb      	str	r3, [r7, #28]
          break;
 80057f8:	e003      	b.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 80057fa:	bf00      	nop
 80057fc:	e3a8      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80057fe:	bf00      	nop
 8005800:	e3a6      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005802:	bf00      	nop
        break;
 8005804:	e3a4      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005806:	4b53      	ldr	r3, [pc, #332]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b0c      	cmp	r3, #12
 8005816:	d83a      	bhi.n	800588e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005855 	.word	0x08005855
 8005824:	0800588f 	.word	0x0800588f
 8005828:	0800588f 	.word	0x0800588f
 800582c:	0800588f 	.word	0x0800588f
 8005830:	0800585d 	.word	0x0800585d
 8005834:	0800588f 	.word	0x0800588f
 8005838:	0800588f 	.word	0x0800588f
 800583c:	0800588f 	.word	0x0800588f
 8005840:	08005865 	.word	0x08005865
 8005844:	0800588f 	.word	0x0800588f
 8005848:	0800588f 	.word	0x0800588f
 800584c:	0800588f 	.word	0x0800588f
 8005850:	08005879 	.word	0x08005879
          frequency = HAL_RCC_GetPCLK1Freq();
 8005854:	f7fe ffba 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8005858:	61f8      	str	r0, [r7, #28]
          break;
 800585a:	e01d      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 800585c:	f7fe ff20 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8005860:	61f8      	str	r0, [r7, #28]
          break;
 8005862:	e019      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005864:	4b3b      	ldr	r3, [pc, #236]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800586c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005870:	d10f      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8005872:	4b3a      	ldr	r3, [pc, #232]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005874:	61fb      	str	r3, [r7, #28]
          break;
 8005876:	e00c      	b.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005878:	4b36      	ldr	r3, [pc, #216]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b02      	cmp	r3, #2
 8005884:	d107      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8005886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588a:	61fb      	str	r3, [r7, #28]
          break;
 800588c:	e003      	b.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800588e:	bf00      	nop
 8005890:	e35e      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005892:	bf00      	nop
 8005894:	e35c      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005896:	bf00      	nop
        break;
 8005898:	e35a      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800589a:	4b2e      	ldr	r3, [pc, #184]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b30      	cmp	r3, #48	; 0x30
 80058aa:	d021      	beq.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b30      	cmp	r3, #48	; 0x30
 80058b0:	d829      	bhi.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d011      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d823      	bhi.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b10      	cmp	r3, #16
 80058c8:	d004      	beq.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 80058ca:	e01c      	b.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80058cc:	f7fe ff7e 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 80058d0:	61f8      	str	r0, [r7, #28]
          break;
 80058d2:	e01d      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80058d4:	f7fe fee4 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 80058d8:	61f8      	str	r0, [r7, #28]
          break;
 80058da:	e019      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e8:	d10f      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 80058ea:	4b1c      	ldr	r3, [pc, #112]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80058ec:	61fb      	str	r3, [r7, #28]
          break;
 80058ee:	e00c      	b.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058f0:	4b18      	ldr	r3, [pc, #96]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d107      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005902:	61fb      	str	r3, [r7, #28]
          break;
 8005904:	e003      	b.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8005906:	bf00      	nop
 8005908:	e322      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800590a:	bf00      	nop
 800590c:	e320      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800590e:	bf00      	nop
        break;
 8005910:	e31e      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005912:	4b10      	ldr	r3, [pc, #64]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005918:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2bc0      	cmp	r3, #192	; 0xc0
 8005922:	d027      	beq.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2bc0      	cmp	r3, #192	; 0xc0
 8005928:	d82f      	bhi.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b80      	cmp	r3, #128	; 0x80
 800592e:	d017      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b80      	cmp	r3, #128	; 0x80
 8005934:	d829      	bhi.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d004      	beq.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8005942:	e022      	b.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005944:	f7fe ff42 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8005948:	61f8      	str	r0, [r7, #28]
          break;
 800594a:	e023      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 800594c:	f7fe fea8 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8005950:	61f8      	str	r0, [r7, #28]
          break;
 8005952:	e01f      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005954:	40021000 	.word	0x40021000
 8005958:	02dc6c00 	.word	0x02dc6c00
 800595c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005960:	4b9b      	ldr	r3, [pc, #620]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596c:	d10f      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800596e:	4b99      	ldr	r3, [pc, #612]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005970:	61fb      	str	r3, [r7, #28]
          break;
 8005972:	e00c      	b.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005974:	4b96      	ldr	r3, [pc, #600]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b02      	cmp	r3, #2
 8005980:	d107      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8005982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005986:	61fb      	str	r3, [r7, #28]
          break;
 8005988:	e003      	b.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800598a:	bf00      	nop
 800598c:	e2e0      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800598e:	bf00      	nop
 8005990:	e2de      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005992:	bf00      	nop
        break;
 8005994:	e2dc      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005996:	4b8e      	ldr	r3, [pc, #568]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a8:	d025      	beq.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059b0:	d82c      	bhi.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b8:	d013      	beq.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c0:	d824      	bhi.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d004      	beq.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ce:	d004      	beq.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 80059d0:	e01c      	b.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80059d2:	f7fe fefb 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 80059d6:	61f8      	str	r0, [r7, #28]
          break;
 80059d8:	e01d      	b.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 80059da:	f7fe fe61 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 80059de:	61f8      	str	r0, [r7, #28]
          break;
 80059e0:	e019      	b.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059e2:	4b7b      	ldr	r3, [pc, #492]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ee:	d10f      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 80059f0:	4b78      	ldr	r3, [pc, #480]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80059f2:	61fb      	str	r3, [r7, #28]
          break;
 80059f4:	e00c      	b.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80059f6:	4b76      	ldr	r3, [pc, #472]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80059f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d107      	bne.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8005a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a08:	61fb      	str	r3, [r7, #28]
          break;
 8005a0a:	e003      	b.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8005a0c:	bf00      	nop
 8005a0e:	e29f      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a10:	bf00      	nop
 8005a12:	e29d      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a14:	bf00      	nop
        break;
 8005a16:	e29b      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005a18:	4b6d      	ldr	r3, [pc, #436]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a2a:	d025      	beq.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a32:	d82c      	bhi.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a3a:	d013      	beq.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a42:	d824      	bhi.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a50:	d004      	beq.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8005a52:	e01c      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a54:	f7fe feba 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8005a58:	61f8      	str	r0, [r7, #28]
          break;
 8005a5a:	e01d      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a5c:	f7fe fe20 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8005a60:	61f8      	str	r0, [r7, #28]
          break;
 8005a62:	e019      	b.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a64:	4b5a      	ldr	r3, [pc, #360]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a70:	d10f      	bne.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8005a72:	4b58      	ldr	r3, [pc, #352]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005a74:	61fb      	str	r3, [r7, #28]
          break;
 8005a76:	e00c      	b.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a78:	4b55      	ldr	r3, [pc, #340]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d107      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8005a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a8a:	61fb      	str	r3, [r7, #28]
          break;
 8005a8c:	e003      	b.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8005a8e:	bf00      	nop
 8005a90:	e25e      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a92:	bf00      	nop
 8005a94:	e25c      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005a96:	bf00      	nop
        break;
 8005a98:	e25a      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005a9a:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aac:	d007      	beq.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ab4:	d12f      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ab6:	f7fe fdf3 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8005aba:	61f8      	str	r0, [r7, #28]
          break;
 8005abc:	e02e      	b.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8005abe:	4b44      	ldr	r3, [pc, #272]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aca:	d126      	bne.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8005acc:	4b40      	ldr	r3, [pc, #256]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d020      	beq.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005ad8:	4b3d      	ldr	r3, [pc, #244]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	0a1b      	lsrs	r3, r3, #8
 8005ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	fb03 f202 	mul.w	r2, r3, r2
 8005aec:	4b38      	ldr	r3, [pc, #224]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	091b      	lsrs	r3, r3, #4
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	3301      	adds	r3, #1
 8005af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8005afe:	4b34      	ldr	r3, [pc, #208]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	0e5b      	lsrs	r3, r3, #25
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	3301      	adds	r3, #1
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	61fb      	str	r3, [r7, #28]
          break;
 8005b14:	e001      	b.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8005b16:	bf00      	nop
 8005b18:	e21a      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005b1a:	bf00      	nop
        break;
 8005b1c:	e218      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005b30:	f7fe fe62 	bl	80047f8 <HAL_RCC_GetPCLK2Freq>
 8005b34:	61f8      	str	r0, [r7, #28]
        break;
 8005b36:	e20b      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005b38:	f7fe fdb2 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8005b3c:	61f8      	str	r0, [r7, #28]
        break;
 8005b3e:	e207      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005b40:	4b23      	ldr	r3, [pc, #140]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b46:	f003 0318 	and.w	r3, r3, #24
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d010      	beq.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d834      	bhi.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d024      	beq.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8005b64:	e02d      	b.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005b66:	69b9      	ldr	r1, [r7, #24]
 8005b68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b6c:	f000 fbe2 	bl	8006334 <RCCEx_GetSAIxPeriphCLKFreq>
 8005b70:	61f8      	str	r0, [r7, #28]
          break;
 8005b72:	e02b      	b.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005b74:	4b16      	ldr	r3, [pc, #88]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d122      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005b80:	4b13      	ldr	r3, [pc, #76]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8005b8c:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	e005      	b.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005b98:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9e:	0a1b      	lsrs	r3, r3, #8
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	4a0c      	ldr	r2, [pc, #48]	; (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8005ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005baa:	61fb      	str	r3, [r7, #28]
          break;
 8005bac:	e00b      	b.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bae:	4b08      	ldr	r3, [pc, #32]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d106      	bne.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8005bbe:	61fb      	str	r3, [r7, #28]
          break;
 8005bc0:	e003      	b.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8005bc2:	bf00      	nop
 8005bc4:	e1c4      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005bc6:	bf00      	nop
 8005bc8:	e1c2      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005bca:	bf00      	nop
        break;
 8005bcc:	e1c0      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8005bce:	bf00      	nop
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	00f42400 	.word	0x00f42400
 8005bd8:	0800d5f8 	.word	0x0800d5f8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005bdc:	4b96      	ldr	r3, [pc, #600]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bee:	d013      	beq.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf6:	d819      	bhi.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c04:	d004      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8005c06:	e011      	b.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c08:	f7fe fde0 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8005c0c:	61f8      	str	r0, [r7, #28]
          break;
 8005c0e:	e010      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c10:	f7fe fd46 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8005c14:	61f8      	str	r0, [r7, #28]
          break;
 8005c16:	e00c      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c18:	4b87      	ldr	r3, [pc, #540]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d104      	bne.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8005c26:	4b85      	ldr	r3, [pc, #532]	; (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c28:	61fb      	str	r3, [r7, #28]
          break;
 8005c2a:	e001      	b.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8005c2c:	bf00      	nop
 8005c2e:	e18f      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c30:	bf00      	nop
        break;
 8005c32:	e18d      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005c34:	4b80      	ldr	r3, [pc, #512]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c46:	d013      	beq.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4e:	d819      	bhi.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d004      	beq.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c5c:	d004      	beq.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8005c5e:	e011      	b.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c60:	f7fe fdb4 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8005c64:	61f8      	str	r0, [r7, #28]
          break;
 8005c66:	e010      	b.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8005c68:	f7fe fd1a 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8005c6c:	61f8      	str	r0, [r7, #28]
          break;
 8005c6e:	e00c      	b.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c70:	4b71      	ldr	r3, [pc, #452]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7c:	d104      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8005c7e:	4b6f      	ldr	r3, [pc, #444]	; (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005c80:	61fb      	str	r3, [r7, #28]
          break;
 8005c82:	e001      	b.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8005c84:	bf00      	nop
 8005c86:	e163      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005c88:	bf00      	nop
        break;
 8005c8a:	e161      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005c8c:	4b6a      	ldr	r3, [pc, #424]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c9e:	d013      	beq.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ca6:	d819      	bhi.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d004      	beq.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb4:	d004      	beq.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8005cb6:	e011      	b.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cb8:	f7fe fd88 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8005cbc:	61f8      	str	r0, [r7, #28]
          break;
 8005cbe:	e010      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cc0:	f7fe fcee 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8005cc4:	61f8      	str	r0, [r7, #28]
          break;
 8005cc6:	e00c      	b.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cc8:	4b5b      	ldr	r3, [pc, #364]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd4:	d104      	bne.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8005cd6:	4b59      	ldr	r3, [pc, #356]	; (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005cd8:	61fb      	str	r3, [r7, #28]
          break;
 8005cda:	e001      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8005cdc:	bf00      	nop
 8005cde:	e137      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005ce0:	bf00      	nop
        break;
 8005ce2:	e135      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005ce4:	4b54      	ldr	r3, [pc, #336]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d011      	beq.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d818      	bhi.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d004      	beq.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8005d08:	e011      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d0a:	f7fe fd5f 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8005d0e:	61f8      	str	r0, [r7, #28]
          break;
 8005d10:	e010      	b.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d12:	f7fe fcc5 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8005d16:	61f8      	str	r0, [r7, #28]
          break;
 8005d18:	e00c      	b.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d1a:	4b47      	ldr	r3, [pc, #284]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d26:	d104      	bne.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8005d28:	4b44      	ldr	r3, [pc, #272]	; (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005d2a:	61fb      	str	r3, [r7, #28]
          break;
 8005d2c:	e001      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8005d2e:	bf00      	nop
 8005d30:	e10e      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005d32:	bf00      	nop
        break;
 8005d34:	e10c      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005d36:	4b40      	ldr	r3, [pc, #256]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d48:	d02c      	beq.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d50:	d833      	bhi.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d58:	d01a      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d60:	d82b      	bhi.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d6e:	d004      	beq.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8005d70:	e023      	b.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d72:	f7fe fd2b 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8005d76:	61f8      	str	r0, [r7, #28]
          break;
 8005d78:	e026      	b.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d11a      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8005d88:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d8c:	61fb      	str	r3, [r7, #28]
          break;
 8005d8e:	e016      	b.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d90:	4b29      	ldr	r3, [pc, #164]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9c:	d111      	bne.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8005d9e:	4b27      	ldr	r3, [pc, #156]	; (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005da0:	61fb      	str	r3, [r7, #28]
          break;
 8005da2:	e00e      	b.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005da4:	4b24      	ldr	r3, [pc, #144]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d109      	bne.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8005db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db6:	61fb      	str	r3, [r7, #28]
          break;
 8005db8:	e005      	b.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8005dba:	bf00      	nop
 8005dbc:	e0c8      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005dbe:	bf00      	nop
 8005dc0:	e0c6      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005dc2:	bf00      	nop
 8005dc4:	e0c4      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005dc6:	bf00      	nop
        break;
 8005dc8:	e0c2      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005dca:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ddc:	d030      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005de4:	d837      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dec:	d01a      	beq.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005df4:	d82f      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d004      	beq.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e02:	d004      	beq.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8005e04:	e027      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e06:	f7fe fce1 	bl	80047cc <HAL_RCC_GetPCLK1Freq>
 8005e0a:	61f8      	str	r0, [r7, #28]
          break;
 8005e0c:	e02a      	b.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d11e      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8005e1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e20:	61fb      	str	r3, [r7, #28]
          break;
 8005e22:	e01a      	b.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e24:	4b04      	ldr	r3, [pc, #16]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e30:	d115      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8005e32:	4b02      	ldr	r3, [pc, #8]	; (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8005e34:	61fb      	str	r3, [r7, #28]
          break;
 8005e36:	e012      	b.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e40:	4b46      	ldr	r3, [pc, #280]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d109      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8005e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e52:	61fb      	str	r3, [r7, #28]
          break;
 8005e54:	e005      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8005e56:	bf00      	nop
 8005e58:	e07a      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e5a:	bf00      	nop
 8005e5c:	e078      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e5e:	bf00      	nop
 8005e60:	e076      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005e62:	bf00      	nop
        break;
 8005e64:	e074      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005e66:	4b3d      	ldr	r3, [pc, #244]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e78:	d02c      	beq.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e80:	d855      	bhi.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e8e:	d004      	beq.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8005e90:	e04d      	b.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e92:	f7fe fc05 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8005e96:	61f8      	str	r0, [r7, #28]
          break;
 8005e98:	e04e      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005e9a:	4b30      	ldr	r3, [pc, #192]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d145      	bne.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005ea6:	4b2d      	ldr	r3, [pc, #180]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8005eb2:	4b2a      	ldr	r3, [pc, #168]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	091b      	lsrs	r3, r3, #4
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	e005      	b.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8005ebe:	4b27      	ldr	r3, [pc, #156]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec4:	0a1b      	lsrs	r3, r3, #8
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	4a25      	ldr	r2, [pc, #148]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8005ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed0:	61fb      	str	r3, [r7, #28]
          break;
 8005ed2:	e02e      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005ed4:	4b21      	ldr	r3, [pc, #132]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005edc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ee0:	d129      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005ee2:	4b1e      	ldr	r3, [pc, #120]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eee:	d122      	bne.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ef0:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	0a1b      	lsrs	r3, r3, #8
 8005ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005efa:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	fb03 f202 	mul.w	r2, r3, r2
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	3301      	adds	r3, #1
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005f16:	4b11      	ldr	r3, [pc, #68]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	0d5b      	lsrs	r3, r3, #21
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	3301      	adds	r3, #1
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	61fb      	str	r3, [r7, #28]
          break;
 8005f2c:	e003      	b.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8005f2e:	bf00      	nop
 8005f30:	e00e      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005f32:	bf00      	nop
 8005f34:	e00c      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005f36:	bf00      	nop
        break;
 8005f38:	e00a      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005f3a:	bf00      	nop
 8005f3c:	e008      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005f3e:	bf00      	nop
 8005f40:	e006      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005f42:	bf00      	nop
 8005f44:	e004      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005f46:	bf00      	nop
 8005f48:	e002      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005f4e:	bf00      	nop
    }
  }

  return(frequency);
 8005f50:	69fb      	ldr	r3, [r7, #28]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3720      	adds	r7, #32
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	0800d5f8 	.word	0x0800d5f8

08005f64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f72:	4b72      	ldr	r3, [pc, #456]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00e      	beq.n	8005f9c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f7e:	4b6f      	ldr	r3, [pc, #444]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f003 0203 	and.w	r2, r3, #3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d103      	bne.n	8005f96 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
       ||
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d142      	bne.n	800601c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	73fb      	strb	r3, [r7, #15]
 8005f9a:	e03f      	b.n	800601c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d018      	beq.n	8005fd6 <RCCEx_PLLSAI1_Config+0x72>
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d825      	bhi.n	8005ff4 <RCCEx_PLLSAI1_Config+0x90>
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d002      	beq.n	8005fb2 <RCCEx_PLLSAI1_Config+0x4e>
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d009      	beq.n	8005fc4 <RCCEx_PLLSAI1_Config+0x60>
 8005fb0:	e020      	b.n	8005ff4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fb2:	4b62      	ldr	r3, [pc, #392]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d11d      	bne.n	8005ffa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fc2:	e01a      	b.n	8005ffa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fc4:	4b5d      	ldr	r3, [pc, #372]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d116      	bne.n	8005ffe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fd4:	e013      	b.n	8005ffe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fd6:	4b59      	ldr	r3, [pc, #356]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10f      	bne.n	8006002 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fe2:	4b56      	ldr	r3, [pc, #344]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ff2:	e006      	b.n	8006002 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff8:	e004      	b.n	8006004 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e002      	b.n	8006004 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006002:	bf00      	nop
    }

    if(status == HAL_OK)
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d108      	bne.n	800601c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800600a:	4b4c      	ldr	r3, [pc, #304]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f023 0203 	bic.w	r2, r3, #3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4949      	ldr	r1, [pc, #292]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006018:	4313      	orrs	r3, r2
 800601a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 8086 	bne.w	8006130 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006024:	4b45      	ldr	r3, [pc, #276]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a44      	ldr	r2, [pc, #272]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 800602a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800602e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006030:	f7fb face 	bl	80015d0 <HAL_GetTick>
 8006034:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006036:	e009      	b.n	800604c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006038:	f7fb faca 	bl	80015d0 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d902      	bls.n	800604c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	73fb      	strb	r3, [r7, #15]
        break;
 800604a:	e005      	b.n	8006058 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800604c:	4b3b      	ldr	r3, [pc, #236]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1ef      	bne.n	8006038 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d168      	bne.n	8006130 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d113      	bne.n	800608c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006064:	4b35      	ldr	r3, [pc, #212]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	4b35      	ldr	r3, [pc, #212]	; (8006140 <RCCEx_PLLSAI1_Config+0x1dc>)
 800606a:	4013      	ands	r3, r2
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6892      	ldr	r2, [r2, #8]
 8006070:	0211      	lsls	r1, r2, #8
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68d2      	ldr	r2, [r2, #12]
 8006076:	06d2      	lsls	r2, r2, #27
 8006078:	4311      	orrs	r1, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6852      	ldr	r2, [r2, #4]
 800607e:	3a01      	subs	r2, #1
 8006080:	0112      	lsls	r2, r2, #4
 8006082:	430a      	orrs	r2, r1
 8006084:	492d      	ldr	r1, [pc, #180]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006086:	4313      	orrs	r3, r2
 8006088:	610b      	str	r3, [r1, #16]
 800608a:	e02d      	b.n	80060e8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d115      	bne.n	80060be <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006092:	4b2a      	ldr	r3, [pc, #168]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006094:	691a      	ldr	r2, [r3, #16]
 8006096:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006098:	4013      	ands	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6892      	ldr	r2, [r2, #8]
 800609e:	0211      	lsls	r1, r2, #8
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	6912      	ldr	r2, [r2, #16]
 80060a4:	0852      	lsrs	r2, r2, #1
 80060a6:	3a01      	subs	r2, #1
 80060a8:	0552      	lsls	r2, r2, #21
 80060aa:	4311      	orrs	r1, r2
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6852      	ldr	r2, [r2, #4]
 80060b0:	3a01      	subs	r2, #1
 80060b2:	0112      	lsls	r2, r2, #4
 80060b4:	430a      	orrs	r2, r1
 80060b6:	4921      	ldr	r1, [pc, #132]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	610b      	str	r3, [r1, #16]
 80060bc:	e014      	b.n	80060e8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060be:	4b1f      	ldr	r3, [pc, #124]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	4b21      	ldr	r3, [pc, #132]	; (8006148 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6892      	ldr	r2, [r2, #8]
 80060ca:	0211      	lsls	r1, r2, #8
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6952      	ldr	r2, [r2, #20]
 80060d0:	0852      	lsrs	r2, r2, #1
 80060d2:	3a01      	subs	r2, #1
 80060d4:	0652      	lsls	r2, r2, #25
 80060d6:	4311      	orrs	r1, r2
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6852      	ldr	r2, [r2, #4]
 80060dc:	3a01      	subs	r2, #1
 80060de:	0112      	lsls	r2, r2, #4
 80060e0:	430a      	orrs	r2, r1
 80060e2:	4916      	ldr	r1, [pc, #88]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80060e8:	4b14      	ldr	r3, [pc, #80]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a13      	ldr	r2, [pc, #76]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 80060ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f4:	f7fb fa6c 	bl	80015d0 <HAL_GetTick>
 80060f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060fa:	e009      	b.n	8006110 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060fc:	f7fb fa68 	bl	80015d0 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d902      	bls.n	8006110 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	73fb      	strb	r3, [r7, #15]
          break;
 800610e:	e005      	b.n	800611c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006110:	4b0a      	ldr	r3, [pc, #40]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0ef      	beq.n	80060fc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	4904      	ldr	r1, [pc, #16]	; (800613c <RCCEx_PLLSAI1_Config+0x1d8>)
 800612c:	4313      	orrs	r3, r2
 800612e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40021000 	.word	0x40021000
 8006140:	07ff800f 	.word	0x07ff800f
 8006144:	ff9f800f 	.word	0xff9f800f
 8006148:	f9ff800f 	.word	0xf9ff800f

0800614c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800615a:	4b72      	ldr	r3, [pc, #456]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00e      	beq.n	8006184 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006166:	4b6f      	ldr	r3, [pc, #444]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f003 0203 	and.w	r2, r3, #3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d103      	bne.n	800617e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
       ||
 800617a:	2b00      	cmp	r3, #0
 800617c:	d142      	bne.n	8006204 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	73fb      	strb	r3, [r7, #15]
 8006182:	e03f      	b.n	8006204 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b03      	cmp	r3, #3
 800618a:	d018      	beq.n	80061be <RCCEx_PLLSAI2_Config+0x72>
 800618c:	2b03      	cmp	r3, #3
 800618e:	d825      	bhi.n	80061dc <RCCEx_PLLSAI2_Config+0x90>
 8006190:	2b01      	cmp	r3, #1
 8006192:	d002      	beq.n	800619a <RCCEx_PLLSAI2_Config+0x4e>
 8006194:	2b02      	cmp	r3, #2
 8006196:	d009      	beq.n	80061ac <RCCEx_PLLSAI2_Config+0x60>
 8006198:	e020      	b.n	80061dc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800619a:	4b62      	ldr	r3, [pc, #392]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d11d      	bne.n	80061e2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061aa:	e01a      	b.n	80061e2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061ac:	4b5d      	ldr	r3, [pc, #372]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d116      	bne.n	80061e6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061bc:	e013      	b.n	80061e6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80061be:	4b59      	ldr	r3, [pc, #356]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10f      	bne.n	80061ea <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80061ca:	4b56      	ldr	r3, [pc, #344]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d109      	bne.n	80061ea <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061da:	e006      	b.n	80061ea <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
      break;
 80061e0:	e004      	b.n	80061ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80061e2:	bf00      	nop
 80061e4:	e002      	b.n	80061ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80061ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d108      	bne.n	8006204 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80061f2:	4b4c      	ldr	r3, [pc, #304]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f023 0203 	bic.w	r2, r3, #3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4949      	ldr	r1, [pc, #292]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006200:	4313      	orrs	r3, r2
 8006202:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 8086 	bne.w	8006318 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800620c:	4b45      	ldr	r3, [pc, #276]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a44      	ldr	r2, [pc, #272]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006218:	f7fb f9da 	bl	80015d0 <HAL_GetTick>
 800621c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800621e:	e009      	b.n	8006234 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006220:	f7fb f9d6 	bl	80015d0 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d902      	bls.n	8006234 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	73fb      	strb	r3, [r7, #15]
        break;
 8006232:	e005      	b.n	8006240 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006234:	4b3b      	ldr	r3, [pc, #236]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1ef      	bne.n	8006220 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d168      	bne.n	8006318 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d113      	bne.n	8006274 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800624c:	4b35      	ldr	r3, [pc, #212]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 800624e:	695a      	ldr	r2, [r3, #20]
 8006250:	4b35      	ldr	r3, [pc, #212]	; (8006328 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006252:	4013      	ands	r3, r2
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6892      	ldr	r2, [r2, #8]
 8006258:	0211      	lsls	r1, r2, #8
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	68d2      	ldr	r2, [r2, #12]
 800625e:	06d2      	lsls	r2, r2, #27
 8006260:	4311      	orrs	r1, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6852      	ldr	r2, [r2, #4]
 8006266:	3a01      	subs	r2, #1
 8006268:	0112      	lsls	r2, r2, #4
 800626a:	430a      	orrs	r2, r1
 800626c:	492d      	ldr	r1, [pc, #180]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 800626e:	4313      	orrs	r3, r2
 8006270:	614b      	str	r3, [r1, #20]
 8006272:	e02d      	b.n	80062d0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d115      	bne.n	80062a6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800627a:	4b2a      	ldr	r3, [pc, #168]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 800627c:	695a      	ldr	r2, [r3, #20]
 800627e:	4b2b      	ldr	r3, [pc, #172]	; (800632c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006280:	4013      	ands	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6892      	ldr	r2, [r2, #8]
 8006286:	0211      	lsls	r1, r2, #8
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6912      	ldr	r2, [r2, #16]
 800628c:	0852      	lsrs	r2, r2, #1
 800628e:	3a01      	subs	r2, #1
 8006290:	0552      	lsls	r2, r2, #21
 8006292:	4311      	orrs	r1, r2
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6852      	ldr	r2, [r2, #4]
 8006298:	3a01      	subs	r2, #1
 800629a:	0112      	lsls	r2, r2, #4
 800629c:	430a      	orrs	r2, r1
 800629e:	4921      	ldr	r1, [pc, #132]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	614b      	str	r3, [r1, #20]
 80062a4:	e014      	b.n	80062d0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062a6:	4b1f      	ldr	r3, [pc, #124]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062a8:	695a      	ldr	r2, [r3, #20]
 80062aa:	4b21      	ldr	r3, [pc, #132]	; (8006330 <RCCEx_PLLSAI2_Config+0x1e4>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6892      	ldr	r2, [r2, #8]
 80062b2:	0211      	lsls	r1, r2, #8
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6952      	ldr	r2, [r2, #20]
 80062b8:	0852      	lsrs	r2, r2, #1
 80062ba:	3a01      	subs	r2, #1
 80062bc:	0652      	lsls	r2, r2, #25
 80062be:	4311      	orrs	r1, r2
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6852      	ldr	r2, [r2, #4]
 80062c4:	3a01      	subs	r2, #1
 80062c6:	0112      	lsls	r2, r2, #4
 80062c8:	430a      	orrs	r2, r1
 80062ca:	4916      	ldr	r1, [pc, #88]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80062d0:	4b14      	ldr	r3, [pc, #80]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a13      	ldr	r2, [pc, #76]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062dc:	f7fb f978 	bl	80015d0 <HAL_GetTick>
 80062e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062e2:	e009      	b.n	80062f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062e4:	f7fb f974 	bl	80015d0 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d902      	bls.n	80062f8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	73fb      	strb	r3, [r7, #15]
          break;
 80062f6:	e005      	b.n	8006304 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0ef      	beq.n	80062e4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800630a:	4b06      	ldr	r3, [pc, #24]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 800630c:	695a      	ldr	r2, [r3, #20]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	4904      	ldr	r1, [pc, #16]	; (8006324 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006314:	4313      	orrs	r3, r2
 8006316:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	40021000 	.word	0x40021000
 8006328:	07ff800f 	.word	0x07ff800f
 800632c:	ff9f800f 	.word	0xff9f800f
 8006330:	f9ff800f 	.word	0xf9ff800f

08006334 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	; 0x24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006350:	d10b      	bne.n	800636a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006352:	4b7e      	ldr	r3, [pc, #504]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006354:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006358:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800635c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	2b60      	cmp	r3, #96	; 0x60
 8006362:	d112      	bne.n	800638a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006364:	4b7a      	ldr	r3, [pc, #488]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	e00f      	b.n	800638a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006370:	d10b      	bne.n	800638a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006372:	4b76      	ldr	r3, [pc, #472]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006378:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800637c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006384:	d101      	bne.n	800638a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006386:	4b72      	ldr	r3, [pc, #456]	; (8006550 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006388:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 80d6 	bne.w	800653e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d003      	beq.n	80063a4 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a2:	d13b      	bne.n	800641c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80063a4:	4b69      	ldr	r3, [pc, #420]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063b0:	f040 80c4 	bne.w	800653c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80063b4:	4b65      	ldr	r3, [pc, #404]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 80bd 	beq.w	800653c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80063c2:	4b62      	ldr	r3, [pc, #392]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	091b      	lsrs	r3, r3, #4
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	3301      	adds	r3, #1
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063d6:	4b5d      	ldr	r3, [pc, #372]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	0a1b      	lsrs	r3, r3, #8
 80063dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80063e2:	4b5a      	ldr	r3, [pc, #360]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	0edb      	lsrs	r3, r3, #27
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80063f4:	4b55      	ldr	r3, [pc, #340]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006400:	2311      	movs	r3, #17
 8006402:	617b      	str	r3, [r7, #20]
 8006404:	e001      	b.n	800640a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006406:	2307      	movs	r3, #7
 8006408:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	fb03 f202 	mul.w	r2, r3, r2
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	fbb2 f3f3 	udiv	r3, r2, r3
 8006418:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800641a:	e08f      	b.n	800653c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d13a      	bne.n	8006498 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006422:	4b4a      	ldr	r3, [pc, #296]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800642a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800642e:	f040 8086 	bne.w	800653e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006432:	4b46      	ldr	r3, [pc, #280]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d07f      	beq.n	800653e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800643e:	4b43      	ldr	r3, [pc, #268]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	091b      	lsrs	r3, r3, #4
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	3301      	adds	r3, #1
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006450:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006452:	4b3e      	ldr	r3, [pc, #248]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	0a1b      	lsrs	r3, r3, #8
 8006458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800645e:	4b3b      	ldr	r3, [pc, #236]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	0edb      	lsrs	r3, r3, #27
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006470:	4b36      	ldr	r3, [pc, #216]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800647c:	2311      	movs	r3, #17
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	e001      	b.n	8006486 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006482:	2307      	movs	r3, #7
 8006484:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	fb03 f202 	mul.w	r2, r3, r2
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	fbb2 f3f3 	udiv	r3, r2, r3
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	e052      	b.n	800653e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b80      	cmp	r3, #128	; 0x80
 800649c:	d003      	beq.n	80064a6 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a4:	d109      	bne.n	80064ba <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064a6:	4b29      	ldr	r3, [pc, #164]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b2:	d144      	bne.n	800653e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80064b4:	4b27      	ldr	r3, [pc, #156]	; (8006554 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80064b6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064b8:	e041      	b.n	800653e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d003      	beq.n	80064c8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c6:	d13a      	bne.n	800653e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80064c8:	4b20      	ldr	r3, [pc, #128]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064d4:	d133      	bne.n	800653e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80064d6:	4b1d      	ldr	r3, [pc, #116]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d02d      	beq.n	800653e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80064e2:	4b1a      	ldr	r3, [pc, #104]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	091b      	lsrs	r3, r3, #4
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	3301      	adds	r3, #1
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80064f6:	4b15      	ldr	r3, [pc, #84]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	0a1b      	lsrs	r3, r3, #8
 80064fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006500:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006502:	4b12      	ldr	r3, [pc, #72]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	0edb      	lsrs	r3, r3, #27
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10a      	bne.n	800652a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006514:	4b0d      	ldr	r3, [pc, #52]	; (800654c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8006520:	2311      	movs	r3, #17
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	e001      	b.n	800652a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8006526:	2307      	movs	r3, #7
 8006528:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	fb03 f202 	mul.w	r2, r3, r2
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	fbb2 f3f3 	udiv	r3, r2, r3
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	e000      	b.n	800653e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800653c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800653e:	69fb      	ldr	r3, [r7, #28]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3724      	adds	r7, #36	; 0x24
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40021000 	.word	0x40021000
 8006550:	001fff68 	.word	0x001fff68
 8006554:	00f42400 	.word	0x00f42400

08006558 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e078      	b.n	800665c <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d105      	bne.n	8006582 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fa fd91 	bl	80010a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2203      	movs	r2, #3
 8006586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f86a 	bl	8006664 <HAL_SD_InitCard>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e060      	b.n	800665c <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800659a:	f107 0308 	add.w	r3, r7, #8
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fdb5 	bl	8007110 <HAL_SD_GetCardStatus>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e055      	b.n	800665c <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80065b0:	7e3b      	ldrb	r3, [r7, #24]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80065b6:	7e7b      	ldrb	r3, [r7, #25]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10a      	bne.n	80065da <HAL_SD_Init+0x82>
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <HAL_SD_Init+0x78>
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80065d8:	e00b      	b.n	80065f2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d104      	bne.n	80065ec <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80065ea:	e002      	b.n	80065f2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fe6b 	bl	80072d4 <HAL_SD_ConfigWideBusOperation>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e029      	b.n	800665c <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006608:	f7fa ffe2 	bl	80015d0 <HAL_GetTick>
 800660c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800660e:	e014      	b.n	800663a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006610:	f7fa ffde 	bl	80015d0 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800661e:	d10c      	bne.n	800663a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006626:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e010      	b.n	800665c <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 ff5e 	bl	80074fc <HAL_SD_GetCardState>
 8006640:	4603      	mov	r3, r0
 8006642:	2b04      	cmp	r3, #4
 8006644:	d1e4      	bne.n	8006610 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3728      	adds	r7, #40	; 0x28
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006664:	b5b0      	push	{r4, r5, r7, lr}
 8006666:	b08e      	sub	sp, #56	; 0x38
 8006668:	af04      	add	r7, sp, #16
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800666c:	2300      	movs	r3, #0
 800666e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006674:	2300      	movs	r3, #0
 8006676:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800667c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006680:	f7fe fd50 	bl	8005124 <HAL_RCCEx_GetPeriphCLKFreq>
 8006684:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	d109      	bne.n	80066a0 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e079      	b.n	8006794 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	0a1b      	lsrs	r3, r3, #8
 80066a4:	4a3d      	ldr	r2, [pc, #244]	; (800679c <HAL_SD_InitCard+0x138>)
 80066a6:	fba2 2303 	umull	r2, r3, r2, r3
 80066aa:	091b      	lsrs	r3, r3, #4
 80066ac:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d107      	bne.n	80066cc <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0210 	orr.w	r2, r2, #16
 80066ca:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681d      	ldr	r5, [r3, #0]
 80066d0:	466c      	mov	r4, sp
 80066d2:	f107 0314 	add.w	r3, r7, #20
 80066d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80066de:	f107 0308 	add.w	r3, r7, #8
 80066e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066e4:	4628      	mov	r0, r5
 80066e6:	f002 f90f 	bl	8008908 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f002 f952 	bl	8008998 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006700:	4a27      	ldr	r2, [pc, #156]	; (80067a0 <HAL_SD_InitCard+0x13c>)
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	fbb2 f3f3 	udiv	r3, r2, r3
 8006708:	3301      	adds	r3, #1
 800670a:	4618      	mov	r0, r3
 800670c:	f7fa ff6c 	bl	80015e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 ffd3 	bl	80076bc <SD_PowerON>
 8006716:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	431a      	orrs	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e02e      	b.n	8006794 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 ff00 	bl	800753c <SD_InitCard>
 800673c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e01b      	b.n	8006794 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006764:	4618      	mov	r0, r3
 8006766:	f002 f9ad 	bl	8008ac4 <SDMMC_CmdBlockLength>
 800676a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00f      	beq.n	8006792 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a0b      	ldr	r2, [pc, #44]	; (80067a4 <HAL_SD_InitCard+0x140>)
 8006778:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3728      	adds	r7, #40	; 0x28
 8006798:	46bd      	mov	sp, r7
 800679a:	bdb0      	pop	{r4, r5, r7, pc}
 800679c:	014f8b59 	.word	0x014f8b59
 80067a0:	00012110 	.word	0x00012110
 80067a4:	1fe00fff 	.word	0x1fe00fff

080067a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08c      	sub	sp, #48	; 0x30
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d107      	bne.n	80067d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e08d      	b.n	80068ec <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	f040 8086 	bne.w	80068ea <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	441a      	add	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d907      	bls.n	8006802 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e074      	b.n	80068ec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2203      	movs	r2, #3
 8006806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2200      	movs	r2, #0
 8006810:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	025a      	lsls	r2, r3, #9
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d002      	beq.n	800682e <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	025b      	lsls	r3, r3, #9
 800682c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800682e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006832:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	025b      	lsls	r3, r3, #9
 8006838:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800683a:	2390      	movs	r3, #144	; 0x90
 800683c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800683e:	2302      	movs	r3, #2
 8006840:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006842:	2300      	movs	r3, #0
 8006844:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8006846:	2300      	movs	r3, #0
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f107 0210 	add.w	r2, r7, #16
 8006852:	4611      	mov	r1, r2
 8006854:	4618      	mov	r0, r3
 8006856:	f002 f909 	bl	8008a6c <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006868:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2201      	movs	r2, #1
 8006878:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d90a      	bls.n	8006896 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2282      	movs	r2, #130	; 0x82
 8006884:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800688c:	4618      	mov	r0, r3
 800688e:	f002 f95f 	bl	8008b50 <SDMMC_CmdReadMultiBlock>
 8006892:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006894:	e009      	b.n	80068aa <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2281      	movs	r2, #129	; 0x81
 800689a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068a2:	4618      	mov	r0, r3
 80068a4:	f002 f931 	bl	8008b0a <SDMMC_CmdReadSingleBlock>
 80068a8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d012      	beq.n	80068d6 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a0f      	ldr	r2, [pc, #60]	; (80068f4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80068b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	431a      	orrs	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e00a      	b.n	80068ec <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80068e4:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e000      	b.n	80068ec <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80068ea:	2302      	movs	r3, #2
  }
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3730      	adds	r7, #48	; 0x30
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	1fe00fff 	.word	0x1fe00fff

080068f8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08c      	sub	sp, #48	; 0x30
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d107      	bne.n	8006920 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e08d      	b.n	8006a3c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	f040 8086 	bne.w	8006a3a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	441a      	add	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693e:	429a      	cmp	r2, r3
 8006940:	d907      	bls.n	8006952 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e074      	b.n	8006a3c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2203      	movs	r2, #3
 8006956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2200      	movs	r2, #0
 8006960:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	025a      	lsls	r2, r3, #9
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006974:	2b01      	cmp	r3, #1
 8006976:	d002      	beq.n	800697e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	025b      	lsls	r3, r3, #9
 800697c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800697e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006982:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	025b      	lsls	r3, r3, #9
 8006988:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800698a:	2390      	movs	r3, #144	; 0x90
 800698c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006992:	2300      	movs	r3, #0
 8006994:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006996:	2300      	movs	r3, #0
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f107 0210 	add.w	r2, r7, #16
 80069a2:	4611      	mov	r1, r2
 80069a4:	4618      	mov	r0, r3
 80069a6:	f002 f861 	bl	8008a6c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069b8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2201      	movs	r2, #1
 80069c8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d90a      	bls.n	80069e6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	22a0      	movs	r2, #160	; 0xa0
 80069d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069dc:	4618      	mov	r0, r3
 80069de:	f002 f8fd 	bl	8008bdc <SDMMC_CmdWriteMultiBlock>
 80069e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80069e4:	e009      	b.n	80069fa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2290      	movs	r2, #144	; 0x90
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069f2:	4618      	mov	r0, r3
 80069f4:	f002 f8cf 	bl	8008b96 <SDMMC_CmdWriteSingleBlock>
 80069f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d012      	beq.n	8006a26 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a0f      	ldr	r2, [pc, #60]	; (8006a44 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e00a      	b.n	8006a3c <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006a34:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	e000      	b.n	8006a3c <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8006a3a:	2302      	movs	r3, #2
  }
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3730      	adds	r7, #48	; 0x30
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	1fe00fff 	.word	0x1fe00fff

08006a48 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_SD_IRQHandler+0x2e>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 f98e 	bl	8007d90 <SD_Read_IT>
 8006a74:	e199      	b.n	8006daa <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80ae 	beq.w	8006be2 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6812      	ldr	r2, [r2, #0]
 8006a9a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006a9e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006aa2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac2:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d038      	beq.n	8006b40 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d104      	bne.n	8006ae2 <HAL_SD_IRQHandler+0x9a>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d011      	beq.n	8006b06 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f002 f89c 	bl	8008c24 <SDMMC_CmdStopTransfer>
 8006aec:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d008      	beq.n	8006b06 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f957 	bl	8006db4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a90      	ldr	r2, [pc, #576]	; (8006d4c <HAL_SD_IRQHandler+0x304>)
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d104      	bne.n	8006b30 <HAL_SD_IRQHandler+0xe8>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f002 fd63 	bl	80095fc <HAL_SD_RxCpltCallback>
 8006b36:	e138      	b.n	8006daa <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f002 fd55 	bl	80095e8 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8006b3e:	e134      	b.n	8006daa <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 812f 	beq.w	8006daa <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2200      	movs	r2, #0
 8006b52:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2200      	movs	r2, #0
 8006b62:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d104      	bne.n	8006b78 <HAL_SD_IRQHandler+0x130>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f003 0320 	and.w	r3, r3, #32
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d011      	beq.n	8006b9c <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f002 f851 	bl	8008c24 <SDMMC_CmdStopTransfer>
 8006b82:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d008      	beq.n	8006b9c <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	431a      	orrs	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f90c 	bl	8006db4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <HAL_SD_IRQHandler+0x176>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f002 fd12 	bl	80095e8 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <HAL_SD_IRQHandler+0x192>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80e8 	beq.w	8006daa <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f002 fd0e 	bl	80095fc <HAL_SD_RxCpltCallback>
}
 8006be0:	e0e3      	b.n	8006daa <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_SD_IRQHandler+0x1ba>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 f919 	bl	8007e32 <SD_Write_IT>
 8006c00:	e0d3      	b.n	8006daa <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c08:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 809f 	beq.w	8006d50 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d005      	beq.n	8006c2c <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	f043 0202 	orr.w	r2, r3, #2
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d005      	beq.n	8006c46 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	f043 0208 	orr.w	r2, r3, #8
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	f043 0220 	orr.w	r2, r3, #32
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	f043 0210 	orr.w	r2, r3, #16
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a33      	ldr	r2, [pc, #204]	; (8006d4c <HAL_SD_IRQHandler+0x304>)
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006c90:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cc0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 ffac 	bl	8008c24 <SDMMC_CmdStopTransfer>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ce6:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f852 	bl	8006db4 <HAL_SD_ErrorCallback>
}
 8006d10:	e04b      	b.n	8006daa <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d046      	beq.n	8006daa <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d042      	beq.n	8006daa <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006d32:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f835 	bl	8006db4 <HAL_SD_ErrorCallback>
}
 8006d4a:	e02e      	b.n	8006daa <HAL_SD_IRQHandler+0x362>
 8006d4c:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d025      	beq.n	8006daa <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10c      	bne.n	8006d90 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 f8d4 	bl	8007f2e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8006d86:	e010      	b.n	8006daa <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 f8bc 	bl	8007f06 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8006d8e:	e00c      	b.n	8006daa <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 f8bd 	bl	8007f1a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006da0:	e003      	b.n	8006daa <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 f8a5 	bl	8007ef2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006da8:	e7ff      	b.n	8006daa <HAL_SD_IRQHandler+0x362>
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop

08006db4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd6:	0f9b      	lsrs	r3, r3, #30
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de2:	0e9b      	lsrs	r3, r3, #26
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df4:	0e1b      	lsrs	r3, r3, #24
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e06:	0c1b      	lsrs	r3, r3, #16
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e28:	0d1b      	lsrs	r3, r3, #20
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	f003 030f 	and.w	r3, r3, #15
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e46:	0bdb      	lsrs	r3, r3, #15
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e58:	0b9b      	lsrs	r3, r3, #14
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e6a:	0b5b      	lsrs	r3, r3, #13
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e7c:	0b1b      	lsrs	r3, r3, #12
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d163      	bne.n	8006f60 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e9c:	009a      	lsls	r2, r3, #2
 8006e9e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ea8:	0f92      	lsrs	r2, r2, #30
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb4:	0edb      	lsrs	r3, r3, #27
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ec6:	0e1b      	lsrs	r3, r3, #24
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ed8:	0d5b      	lsrs	r3, r3, #21
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eea:	0c9b      	lsrs	r3, r3, #18
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006efc:	0bdb      	lsrs	r3, r3, #15
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	7e1b      	ldrb	r3, [r3, #24]
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	3302      	adds	r3, #2
 8006f20:	2201      	movs	r2, #1
 8006f22:	fa02 f303 	lsl.w	r3, r2, r3
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006f2a:	fb03 f202 	mul.w	r2, r3, r2
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	7a1b      	ldrb	r3, [r3, #8]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f003 030f 	and.w	r3, r3, #15
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	409a      	lsls	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f4c:	0a52      	lsrs	r2, r2, #9
 8006f4e:	fb03 f202 	mul.w	r2, r3, r2
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f5c:	659a      	str	r2, [r3, #88]	; 0x58
 8006f5e:	e031      	b.n	8006fc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d11d      	bne.n	8006fa4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f6c:	041b      	lsls	r3, r3, #16
 8006f6e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f76:	0c1b      	lsrs	r3, r3, #16
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	3301      	adds	r3, #1
 8006f84:	029a      	lsls	r2, r3, #10
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f98:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	659a      	str	r2, [r3, #88]	; 0x58
 8006fa2:	e00f      	b.n	8006fc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a58      	ldr	r2, [pc, #352]	; (800710c <HAL_SD_GetCardCSD+0x344>)
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e09d      	b.n	8007100 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc8:	0b9b      	lsrs	r3, r3, #14
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fda:	09db      	lsrs	r3, r3, #7
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ffc:	0fdb      	lsrs	r3, r3, #31
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007008:	0f5b      	lsrs	r3, r3, #29
 800700a:	b2db      	uxtb	r3, r3
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	b2da      	uxtb	r2, r3
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800701a:	0e9b      	lsrs	r3, r3, #26
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	b2da      	uxtb	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702c:	0d9b      	lsrs	r3, r3, #22
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	b2da      	uxtb	r2, r3
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703e:	0d5b      	lsrs	r3, r3, #21
 8007040:	b2db      	uxtb	r3, r3
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	b2da      	uxtb	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800705a:	0c1b      	lsrs	r3, r3, #16
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	b2da      	uxtb	r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800706e:	0bdb      	lsrs	r3, r3, #15
 8007070:	b2db      	uxtb	r3, r3
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	b2da      	uxtb	r2, r3
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007082:	0b9b      	lsrs	r3, r3, #14
 8007084:	b2db      	uxtb	r3, r3
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	b2da      	uxtb	r2, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007096:	0b5b      	lsrs	r3, r3, #13
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070aa:	0b1b      	lsrs	r3, r3, #12
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070be:	0a9b      	lsrs	r3, r3, #10
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d2:	0a1b      	lsrs	r3, r3, #8
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	1fe00fff 	.word	0x1fe00fff

08007110 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b094      	sub	sp, #80	; 0x50
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007120:	f107 0308 	add.w	r3, r7, #8
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fbd4 	bl	80078d4 <SD_SendSDStatus>
 800712c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800712e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007130:	2b00      	cmp	r3, #0
 8007132:	d011      	beq.n	8007158 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a4f      	ldr	r2, [pc, #316]	; (8007278 <HAL_SD_GetCardStatus+0x168>)
 800713a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007156:	e070      	b.n	800723a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	099b      	lsrs	r3, r3, #6
 800715c:	b2db      	uxtb	r3, r3
 800715e:	f003 0303 	and.w	r3, r3, #3
 8007162:	b2da      	uxtb	r2, r3
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	b2da      	uxtb	r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	0a1b      	lsrs	r3, r3, #8
 800717c:	b29b      	uxth	r3, r3
 800717e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007182:	b29a      	uxth	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	0e1b      	lsrs	r3, r3, #24
 8007188:	b29b      	uxth	r3, r3
 800718a:	4313      	orrs	r3, r2
 800718c:	b29a      	uxth	r2, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	061a      	lsls	r2, r3, #24
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	021b      	lsls	r3, r3, #8
 800719a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800719e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	0a1b      	lsrs	r3, r3, #8
 80071a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80071a8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	0e1b      	lsrs	r3, r3, #24
 80071ae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	0a1b      	lsrs	r3, r3, #8
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	0d1b      	lsrs	r3, r3, #20
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	0c1b      	lsrs	r3, r3, #16
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4313      	orrs	r3, r2
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	0a9b      	lsrs	r3, r3, #10
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	0a1b      	lsrs	r3, r3, #8
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	b2da      	uxtb	r2, r3
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	091b      	lsrs	r3, r3, #4
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	b2da      	uxtb	r2, r3
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	b2da      	uxtb	r2, r3
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	0e1b      	lsrs	r3, r3, #24
 8007234:	b2da      	uxtb	r2, r3
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007242:	4618      	mov	r0, r3
 8007244:	f001 fc3e 	bl	8008ac4 <SDMMC_CmdBlockLength>
 8007248:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800724a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00d      	beq.n	800726c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a08      	ldr	r2, [pc, #32]	; (8007278 <HAL_SD_GetCardStatus+0x168>)
 8007256:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800725c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800726c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007270:	4618      	mov	r0, r3
 8007272:	3750      	adds	r7, #80	; 0x50
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	1fe00fff 	.word	0x1fe00fff

0800727c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80072d4:	b5b0      	push	{r4, r5, r7, lr}
 80072d6:	b090      	sub	sp, #64	; 0x40
 80072d8:	af04      	add	r7, sp, #16
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2203      	movs	r2, #3
 80072e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d02e      	beq.n	8007352 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072fa:	d106      	bne.n	800730a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	639a      	str	r2, [r3, #56]	; 0x38
 8007308:	e029      	b.n	800735e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007310:	d10a      	bne.n	8007328 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fbd6 	bl	8007ac4 <SD_WideBus_Enable>
 8007318:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
 8007326:	e01a      	b.n	800735e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fc13 	bl	8007b5a <SD_WideBus_Disable>
 8007334:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	639a      	str	r2, [r3, #56]	; 0x38
 8007342:	e00c      	b.n	800735e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	639a      	str	r2, [r3, #56]	; 0x38
 8007350:	e005      	b.n	800735e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	2b00      	cmp	r3, #0
 8007364:	d007      	beq.n	8007376 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a60      	ldr	r2, [pc, #384]	; (80074ec <HAL_SD_ConfigWideBusOperation+0x218>)
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007374:	e097      	b.n	80074a6 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007376:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800737a:	f7fd fed3 	bl	8005124 <HAL_RCCEx_GetPeriphCLKFreq>
 800737e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8086 	beq.w	8007494 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695a      	ldr	r2, [r3, #20]
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	4952      	ldr	r1, [pc, #328]	; (80074f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80073a6:	fba1 1303 	umull	r1, r3, r1, r3
 80073aa:	0e1b      	lsrs	r3, r3, #24
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d303      	bcc.n	80073b8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	61fb      	str	r3, [r7, #28]
 80073b6:	e05a      	b.n	800746e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c0:	d103      	bne.n	80073ca <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	61fb      	str	r3, [r7, #28]
 80073c8:	e051      	b.n	800746e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d2:	d126      	bne.n	8007422 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10e      	bne.n	80073fa <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	4a45      	ldr	r2, [pc, #276]	; (80074f4 <HAL_SD_ConfigWideBusOperation+0x220>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d906      	bls.n	80073f2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	4a42      	ldr	r2, [pc, #264]	; (80074f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	0e5b      	lsrs	r3, r3, #25
 80073ee:	61fb      	str	r3, [r7, #28]
 80073f0:	e03d      	b.n	800746e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	e039      	b.n	800746e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007402:	fbb2 f3f3 	udiv	r3, r2, r3
 8007406:	4a3b      	ldr	r2, [pc, #236]	; (80074f4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d906      	bls.n	800741a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	4a38      	ldr	r2, [pc, #224]	; (80074f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	0e5b      	lsrs	r3, r3, #25
 8007416:	61fb      	str	r3, [r7, #28]
 8007418:	e029      	b.n	800746e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	61fb      	str	r3, [r7, #28]
 8007420:	e025      	b.n	800746e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10e      	bne.n	8007448 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	4a32      	ldr	r2, [pc, #200]	; (80074f8 <HAL_SD_ConfigWideBusOperation+0x224>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d906      	bls.n	8007440 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	4a2e      	ldr	r2, [pc, #184]	; (80074f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007436:	fba2 2303 	umull	r2, r3, r2, r3
 800743a:	0e1b      	lsrs	r3, r3, #24
 800743c:	61fb      	str	r3, [r7, #28]
 800743e:	e016      	b.n	800746e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	e012      	b.n	800746e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007450:	fbb2 f3f3 	udiv	r3, r2, r3
 8007454:	4a28      	ldr	r2, [pc, #160]	; (80074f8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d906      	bls.n	8007468 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	4a24      	ldr	r2, [pc, #144]	; (80074f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800745e:	fba2 2303 	umull	r2, r3, r2, r3
 8007462:	0e1b      	lsrs	r3, r3, #24
 8007464:	61fb      	str	r3, [r7, #28]
 8007466:	e002      	b.n	800746e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681d      	ldr	r5, [r3, #0]
 8007478:	466c      	mov	r4, sp
 800747a:	f107 0318 	add.w	r3, r7, #24
 800747e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007486:	f107 030c 	add.w	r3, r7, #12
 800748a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800748c:	4628      	mov	r0, r5
 800748e:	f001 fa3b 	bl	8008908 <SDMMC_Init>
 8007492:	e008      	b.n	80074a6 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074ae:	4618      	mov	r0, r3
 80074b0:	f001 fb08 	bl	8008ac4 <SDMMC_CmdBlockLength>
 80074b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00c      	beq.n	80074d6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <HAL_SD_ConfigWideBusOperation+0x218>)
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80074de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3730      	adds	r7, #48	; 0x30
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bdb0      	pop	{r4, r5, r7, pc}
 80074ea:	bf00      	nop
 80074ec:	1fe00fff 	.word	0x1fe00fff
 80074f0:	55e63b89 	.word	0x55e63b89
 80074f4:	02faf080 	.word	0x02faf080
 80074f8:	017d7840 	.word	0x017d7840

080074fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007508:	f107 030c 	add.w	r3, r7, #12
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fab0 	bl	8007a74 <SD_SendStatus>
 8007514:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	0a5b      	lsrs	r3, r3, #9
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007532:	693b      	ldr	r3, [r7, #16]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800753c:	b5b0      	push	{r4, r5, r7, lr}
 800753e:	b090      	sub	sp, #64	; 0x40
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007544:	2301      	movs	r3, #1
 8007546:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4618      	mov	r0, r3
 800754e:	f001 fa35 	bl	80089bc <SDMMC_GetPowerState>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007558:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800755c:	e0a9      	b.n	80076b2 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007562:	2b03      	cmp	r3, #3
 8007564:	d02e      	beq.n	80075c4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4618      	mov	r0, r3
 800756c:	f001 fc7a 	bl	8008e64 <SDMMC_CmdSendCID>
 8007570:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <SD_InitCard+0x40>
    {
      return errorstate;
 8007578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757a:	e09a      	b.n	80076b2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f001 fa5f 	bl	8008a46 <SDMMC_GetResponse>
 8007588:	4602      	mov	r2, r0
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2104      	movs	r1, #4
 8007594:	4618      	mov	r0, r3
 8007596:	f001 fa56 	bl	8008a46 <SDMMC_GetResponse>
 800759a:	4602      	mov	r2, r0
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2108      	movs	r1, #8
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fa4d 	bl	8008a46 <SDMMC_GetResponse>
 80075ac:	4602      	mov	r2, r0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	210c      	movs	r1, #12
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 fa44 	bl	8008a46 <SDMMC_GetResponse>
 80075be:	4602      	mov	r2, r0
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d00d      	beq.n	80075e8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f107 020e 	add.w	r2, r7, #14
 80075d4:	4611      	mov	r1, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fc83 	bl	8008ee2 <SDMMC_CmdSetRelAdd>
 80075dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <SD_InitCard+0xac>
    {
      return errorstate;
 80075e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e6:	e064      	b.n	80076b2 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d036      	beq.n	800765e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80075f0:	89fb      	ldrh	r3, [r7, #14]
 80075f2:	461a      	mov	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	4619      	mov	r1, r3
 8007604:	4610      	mov	r0, r2
 8007606:	f001 fc4c 	bl	8008ea2 <SDMMC_CmdSendCSD>
 800760a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800760c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <SD_InitCard+0xda>
    {
      return errorstate;
 8007612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007614:	e04d      	b.n	80076b2 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2100      	movs	r1, #0
 800761c:	4618      	mov	r0, r3
 800761e:	f001 fa12 	bl	8008a46 <SDMMC_GetResponse>
 8007622:	4602      	mov	r2, r0
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2104      	movs	r1, #4
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fa09 	bl	8008a46 <SDMMC_GetResponse>
 8007634:	4602      	mov	r2, r0
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2108      	movs	r1, #8
 8007640:	4618      	mov	r0, r3
 8007642:	f001 fa00 	bl	8008a46 <SDMMC_GetResponse>
 8007646:	4602      	mov	r2, r0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	210c      	movs	r1, #12
 8007652:	4618      	mov	r0, r3
 8007654:	f001 f9f7 	bl	8008a46 <SDMMC_GetResponse>
 8007658:	4602      	mov	r2, r0
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2104      	movs	r1, #4
 8007664:	4618      	mov	r0, r3
 8007666:	f001 f9ee 	bl	8008a46 <SDMMC_GetResponse>
 800766a:	4603      	mov	r3, r0
 800766c:	0d1a      	lsrs	r2, r3, #20
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007672:	f107 0310 	add.w	r3, r7, #16
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff fba5 	bl	8006dc8 <HAL_SD_GetCardCSD>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007688:	e013      	b.n	80076b2 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6819      	ldr	r1, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007692:	041b      	lsls	r3, r3, #16
 8007694:	2200      	movs	r2, #0
 8007696:	461c      	mov	r4, r3
 8007698:	4615      	mov	r5, r2
 800769a:	4622      	mov	r2, r4
 800769c:	462b      	mov	r3, r5
 800769e:	4608      	mov	r0, r1
 80076a0:	f001 faf6 	bl	8008c90 <SDMMC_CmdSelDesel>
 80076a4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80076a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <SD_InitCard+0x174>
  {
    return errorstate;
 80076ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ae:	e000      	b.n	80076b2 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3740      	adds	r7, #64	; 0x40
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080076bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	61fb      	str	r3, [r7, #28]
 80076cc:	2300      	movs	r3, #0
 80076ce:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80076d0:	f7f9 ff7e 	bl	80015d0 <HAL_GetTick>
 80076d4:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fafc 	bl	8008cd8 <SDMMC_CmdGoIdleState>
 80076e0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <SD_PowerON+0x30>
  {
    return errorstate;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	e0ed      	b.n	80078c8 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f001 fb0f 	bl	8008d14 <SDMMC_CmdOperCond>
 80076f6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4618      	mov	r0, r3
 800770a:	f001 fae5 	bl	8008cd8 <SDMMC_CmdGoIdleState>
 800770e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <SD_PowerON+0x64>
    {
      return errorstate;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	e0d6      	b.n	80078c8 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	2b01      	cmp	r3, #1
 8007726:	d137      	bne.n	8007798 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2100      	movs	r1, #0
 800772e:	4618      	mov	r0, r3
 8007730:	f001 fb10 	bl	8008d54 <SDMMC_CmdAppCommand>
 8007734:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d02d      	beq.n	8007798 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800773c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007740:	e0c2      	b.n	80078c8 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2100      	movs	r1, #0
 8007748:	4618      	mov	r0, r3
 800774a:	f001 fb03 	bl	8008d54 <SDMMC_CmdAppCommand>
 800774e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <SD_PowerON+0x9e>
    {
      return errorstate;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	e0b6      	b.n	80078c8 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	495c      	ldr	r1, [pc, #368]	; (80078d0 <SD_PowerON+0x214>)
 8007760:	4618      	mov	r0, r3
 8007762:	f001 fb1a 	bl	8008d9a <SDMMC_CmdAppOperCommand>
 8007766:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800776e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007772:	e0a9      	b.n	80078c8 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2100      	movs	r1, #0
 800777a:	4618      	mov	r0, r3
 800777c:	f001 f963 	bl	8008a46 <SDMMC_GetResponse>
 8007780:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	0fdb      	lsrs	r3, r3, #31
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <SD_PowerON+0xd2>
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <SD_PowerON+0xd4>
 800778e:	2300      	movs	r3, #0
 8007790:	61bb      	str	r3, [r7, #24]

    count++;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3301      	adds	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800779e:	4293      	cmp	r3, r2
 80077a0:	d802      	bhi.n	80077a8 <SD_PowerON+0xec>
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0cc      	beq.n	8007742 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d902      	bls.n	80077b8 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80077b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077b6:	e087      	b.n	80078c8 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d07e      	beq.n	80078c0 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d17a      	bne.n	80078c6 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d075      	beq.n	80078c6 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077e0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f042 0208 	orr.w	r2, r2, #8
 80077f0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f001 fbda 	bl	8008fb0 <SDMMC_CmdVoltageSwitch>
 80077fc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00c      	beq.n	800781e <SD_PowerON+0x162>
        {
          return errorstate;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	e05f      	b.n	80078c8 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007808:	f7f9 fee2 	bl	80015d0 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007816:	d102      	bne.n	800781e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800781c:	e054      	b.n	80078c8 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007824:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800782c:	d1ec      	bne.n	8007808 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007836:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007846:	d002      	beq.n	800784e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007848:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800784c:	e03c      	b.n	80078c8 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800784e:	2001      	movs	r0, #1
 8007850:	f000 fb44 	bl	8007edc <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0204 	orr.w	r2, r2, #4
 8007862:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007864:	e00a      	b.n	800787c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007866:	f7f9 feb3 	bl	80015d0 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007874:	d102      	bne.n	800787c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007876:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800787a:	e025      	b.n	80078c8 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800788a:	d1ec      	bne.n	8007866 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007894:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a4:	d102      	bne.n	80078ac <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80078a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078aa:	e00d      	b.n	80078c8 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2213      	movs	r2, #19
 80078b2:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
 80078be:	e002      	b.n	80078c6 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3720      	adds	r7, #32
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	c1100000 	.word	0xc1100000

080078d4 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08c      	sub	sp, #48	; 0x30
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80078de:	f7f9 fe77 	bl	80015d0 <HAL_GetTick>
 80078e2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2100      	movs	r1, #0
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 f8a9 	bl	8008a46 <SDMMC_GetResponse>
 80078f4:	4603      	mov	r3, r0
 80078f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078fe:	d102      	bne.n	8007906 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007904:	e0b0      	b.n	8007a68 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2140      	movs	r1, #64	; 0x40
 800790c:	4618      	mov	r0, r3
 800790e:	f001 f8d9 	bl	8008ac4 <SDMMC_CmdBlockLength>
 8007912:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	e0a0      	b.n	8007a68 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800792e:	041b      	lsls	r3, r3, #16
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f001 fa0e 	bl	8008d54 <SDMMC_CmdAppCommand>
 8007938:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	e08d      	b.n	8007a68 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800794c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007950:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007952:	2340      	movs	r3, #64	; 0x40
 8007954:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007956:	2360      	movs	r3, #96	; 0x60
 8007958:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800795a:	2302      	movs	r3, #2
 800795c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800795e:	2300      	movs	r3, #0
 8007960:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007962:	2301      	movs	r3, #1
 8007964:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f107 0208 	add.w	r2, r7, #8
 800796e:	4611      	mov	r1, r2
 8007970:	4618      	mov	r0, r3
 8007972:	f001 f87b 	bl	8008a6c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f001 faf6 	bl	8008f6c <SDMMC_CmdStatusRegister>
 8007980:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d02b      	beq.n	80079e0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	e069      	b.n	8007a68 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d013      	beq.n	80079ca <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80079a2:	2300      	movs	r3, #0
 80079a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079a6:	e00d      	b.n	80079c4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 ffd5 	bl	800895c <SDMMC_ReadFIFO>
 80079b2:	4602      	mov	r2, r0
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	601a      	str	r2, [r3, #0]
        pData++;
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	3304      	adds	r3, #4
 80079bc:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 80079be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c0:	3301      	adds	r3, #1
 80079c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	2b07      	cmp	r3, #7
 80079c8:	d9ee      	bls.n	80079a8 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80079ca:	f7f9 fe01 	bl	80015d0 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d8:	d102      	bne.n	80079e0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80079da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079de:	e043      	b.n	8007a68 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0d2      	beq.n	8007994 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f4:	f003 0308 	and.w	r3, r3, #8
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80079fc:	2308      	movs	r3, #8
 80079fe:	e033      	b.n	8007a68 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	e02a      	b.n	8007a68 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a18:	f003 0320 	and.w	r3, r3, #32
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d017      	beq.n	8007a50 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007a20:	2320      	movs	r3, #32
 8007a22:	e021      	b.n	8007a68 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 ff97 	bl	800895c <SDMMC_ReadFIFO>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	601a      	str	r2, [r3, #0]
    pData++;
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	3304      	adds	r3, #4
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007a3a:	f7f9 fdc9 	bl	80015d0 <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a48:	d102      	bne.n	8007a50 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007a4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a4e:	e00b      	b.n	8007a68 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e2      	bne.n	8007a24 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a03      	ldr	r2, [pc, #12]	; (8007a70 <SD_SendSDStatus+0x19c>)
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3730      	adds	r7, #48	; 0x30
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	18000f3a 	.word	0x18000f3a

08007a74 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a88:	e018      	b.n	8007abc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f001 fa45 	bl	8008f26 <SDMMC_CmdSendStatus>
 8007a9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	e009      	b.n	8007abc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 ffc9 	bl	8008a46 <SDMMC_GetResponse>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4618      	mov	r0, r3
 8007adc:	f000 ffb3 	bl	8008a46 <SDMMC_GetResponse>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007aea:	d102      	bne.n	8007af2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007aec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007af0:	e02f      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f879 	bl	8007bf0 <SD_FindSCR>
 8007afe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	e023      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01c      	beq.n	8007b4e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b1c:	041b      	lsls	r3, r3, #16
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f001 f917 	bl	8008d54 <SDMMC_CmdAppCommand>
 8007b26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	e00f      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2102      	movs	r1, #2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 f94e 	bl	8008dda <SDMMC_CmdBusWidth>
 8007b3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	e003      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e001      	b.n	8007b52 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	2300      	movs	r3, #0
 8007b68:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2100      	movs	r1, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 ff68 	bl	8008a46 <SDMMC_GetResponse>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b80:	d102      	bne.n	8007b88 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b86:	e02f      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007b88:	f107 030c 	add.w	r3, r7, #12
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f82e 	bl	8007bf0 <SD_FindSCR>
 8007b94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	e023      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01c      	beq.n	8007be4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb2:	041b      	lsls	r3, r3, #16
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	f001 f8cc 	bl	8008d54 <SDMMC_CmdAppCommand>
 8007bbc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	e00f      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f001 f903 	bl	8008dda <SDMMC_CmdBusWidth>
 8007bd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	e003      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007be0:	2300      	movs	r3, #0
 8007be2:	e001      	b.n	8007be8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007be4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08e      	sub	sp, #56	; 0x38
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007bfa:	f7f9 fce9 	bl	80015d0 <HAL_GetTick>
 8007bfe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007c04:	2300      	movs	r3, #0
 8007c06:	60bb      	str	r3, [r7, #8]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2108      	movs	r1, #8
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 ff54 	bl	8008ac4 <SDMMC_CmdBlockLength>
 8007c1c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	e0ad      	b.n	8007d84 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c30:	041b      	lsls	r3, r3, #16
 8007c32:	4619      	mov	r1, r3
 8007c34:	4610      	mov	r0, r2
 8007c36:	f001 f88d 	bl	8008d54 <SDMMC_CmdAppCommand>
 8007c3a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	e09e      	b.n	8007d84 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c4a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007c4c:	2308      	movs	r3, #8
 8007c4e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007c50:	2330      	movs	r3, #48	; 0x30
 8007c52:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007c54:	2302      	movs	r3, #2
 8007c56:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f107 0210 	add.w	r2, r7, #16
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fefe 	bl	8008a6c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f001 f8d3 	bl	8008e20 <SDMMC_CmdSendSCR>
 8007c7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d027      	beq.n	8007cd2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	e07e      	b.n	8007d84 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d113      	bne.n	8007cbc <SD_FindSCR+0xcc>
 8007c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d110      	bne.n	8007cbc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fe5c 	bl	800895c <SDMMC_ReadFIFO>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fe55 	bl	800895c <SDMMC_ReadFIFO>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	60fb      	str	r3, [r7, #12]
      index++;
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb8:	3301      	adds	r3, #1
 8007cba:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007cbc:	f7f9 fc88 	bl	80015d0 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cca:	d102      	bne.n	8007cd2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007ccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cd0:	e058      	b.n	8007d84 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cd8:	f240 532a 	movw	r3, #1322	; 0x52a
 8007cdc:	4013      	ands	r3, r2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0d1      	beq.n	8007c86 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce8:	f003 0308 	and.w	r3, r3, #8
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d005      	beq.n	8007cfc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2208      	movs	r2, #8
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	e043      	b.n	8007d84 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d12:	2302      	movs	r3, #2
 8007d14:	e036      	b.n	8007d84 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007d2c:	2320      	movs	r3, #32
 8007d2e:	e029      	b.n	8007d84 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <SD_FindSCR+0x19c>)
 8007d36:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	061a      	lsls	r2, r3, #24
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	021b      	lsls	r3, r3, #8
 8007d40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d44:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	0a1b      	lsrs	r3, r3, #8
 8007d4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d4e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	0e1b      	lsrs	r3, r3, #24
 8007d54:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d58:	601a      	str	r2, [r3, #0]
    scr++;
 8007d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	061a      	lsls	r2, r3, #24
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	021b      	lsls	r3, r3, #8
 8007d68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d6c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	0a1b      	lsrs	r3, r3, #8
 8007d72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d76:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	0e1b      	lsrs	r3, r3, #24
 8007d7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3738      	adds	r7, #56	; 0x38
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	18000f3a 	.word	0x18000f3a

08007d90 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d03f      	beq.n	8007e2a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007daa:	2300      	movs	r3, #0
 8007dac:	617b      	str	r3, [r7, #20]
 8007dae:	e033      	b.n	8007e18 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fdd1 	bl	800895c <SDMMC_ReadFIFO>
 8007dba:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	0a1b      	lsrs	r3, r3, #8
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	0c1b      	lsrs	r3, r3, #16
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3301      	adds	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	0e1b      	lsrs	r3, r3, #24
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	3301      	adds	r3, #1
 8007e16:	617b      	str	r3, [r7, #20]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b07      	cmp	r3, #7
 8007e1c:	d9c8      	bls.n	8007db0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007e2a:	bf00      	nop
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b086      	sub	sp, #24
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d043      	beq.n	8007ed4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	e037      	b.n	8007ec2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	021a      	lsls	r2, r3, #8
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3301      	adds	r3, #1
 8007e74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	041a      	lsls	r2, r3, #16
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	061a      	lsls	r2, r3, #24
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f107 0208 	add.w	r2, r7, #8
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fd5d 	bl	8008976 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b07      	cmp	r3, #7
 8007ec6:	d9c4      	bls.n	8007e52 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8007f0e:	bf00      	nop
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e095      	b.n	8008080 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d108      	bne.n	8007f6e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f64:	d009      	beq.n	8007f7a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	61da      	str	r2, [r3, #28]
 8007f6c:	e005      	b.n	8007f7a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d106      	bne.n	8007f9a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7f9 f911 	bl	80011bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fba:	d902      	bls.n	8007fc2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	e002      	b.n	8007fc8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fc6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007fd0:	d007      	beq.n	8007fe2 <HAL_SPI_Init+0xa0>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fda:	d002      	beq.n	8007fe2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ff2:	431a      	orrs	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008010:	431a      	orrs	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008024:	ea42 0103 	orr.w	r1, r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	0c1b      	lsrs	r3, r3, #16
 800803e:	f003 0204 	and.w	r2, r3, #4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	f003 0310 	and.w	r3, r3, #16
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	431a      	orrs	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800805e:	ea42 0103 	orr.w	r1, r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e038      	b.n	8008110 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d106      	bne.n	80080b8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f7f9 f962 	bl	800137c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3308      	adds	r3, #8
 80080c0:	4619      	mov	r1, r3
 80080c2:	4610      	mov	r0, r2
 80080c4:	f000 fafa 	bl	80086bc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	461a      	mov	r2, r3
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	f000 fb8c 	bl	80087f0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6858      	ldr	r0, [r3, #4]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	f000 fbd5 	bl	8008894 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	6892      	ldr	r2, [r2, #8]
 80080f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	6892      	ldr	r2, [r2, #8]
 80080fe:	f041 0101 	orr.w	r1, r1, #1
 8008102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e049      	b.n	80081be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f841 	bl	80081c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3304      	adds	r3, #4
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f000 f9f8 	bl	800854c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80081ce:	bf00      	nop
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
	...

080081dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d001      	beq.n	80081f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e04f      	b.n	8008294 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f042 0201 	orr.w	r2, r2, #1
 800820a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a23      	ldr	r2, [pc, #140]	; (80082a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d01d      	beq.n	8008252 <HAL_TIM_Base_Start_IT+0x76>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821e:	d018      	beq.n	8008252 <HAL_TIM_Base_Start_IT+0x76>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a1f      	ldr	r2, [pc, #124]	; (80082a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d013      	beq.n	8008252 <HAL_TIM_Base_Start_IT+0x76>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a1e      	ldr	r2, [pc, #120]	; (80082a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00e      	beq.n	8008252 <HAL_TIM_Base_Start_IT+0x76>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a1c      	ldr	r2, [pc, #112]	; (80082ac <HAL_TIM_Base_Start_IT+0xd0>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d009      	beq.n	8008252 <HAL_TIM_Base_Start_IT+0x76>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a1b      	ldr	r2, [pc, #108]	; (80082b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d004      	beq.n	8008252 <HAL_TIM_Base_Start_IT+0x76>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a19      	ldr	r2, [pc, #100]	; (80082b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d115      	bne.n	800827e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	4b17      	ldr	r3, [pc, #92]	; (80082b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800825a:	4013      	ands	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b06      	cmp	r3, #6
 8008262:	d015      	beq.n	8008290 <HAL_TIM_Base_Start_IT+0xb4>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800826a:	d011      	beq.n	8008290 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0201 	orr.w	r2, r2, #1
 800827a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800827c:	e008      	b.n	8008290 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f042 0201 	orr.w	r2, r2, #1
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e000      	b.n	8008292 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008290:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	40012c00 	.word	0x40012c00
 80082a4:	40000400 	.word	0x40000400
 80082a8:	40000800 	.word	0x40000800
 80082ac:	40000c00 	.word	0x40000c00
 80082b0:	40013400 	.word	0x40013400
 80082b4:	40014000 	.word	0x40014000
 80082b8:	00010007 	.word	0x00010007

080082bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d122      	bne.n	8008318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d11b      	bne.n	8008318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0202 	mvn.w	r2, #2
 80082e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f905 	bl	800850e <HAL_TIM_IC_CaptureCallback>
 8008304:	e005      	b.n	8008312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f8f7 	bl	80084fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f908 	bl	8008522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0304 	and.w	r3, r3, #4
 8008322:	2b04      	cmp	r3, #4
 8008324:	d122      	bne.n	800836c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b04      	cmp	r3, #4
 8008332:	d11b      	bne.n	800836c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0204 	mvn.w	r2, #4
 800833c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2202      	movs	r2, #2
 8008342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f8db 	bl	800850e <HAL_TIM_IC_CaptureCallback>
 8008358:	e005      	b.n	8008366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f8cd 	bl	80084fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f8de 	bl	8008522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b08      	cmp	r3, #8
 8008378:	d122      	bne.n	80083c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b08      	cmp	r3, #8
 8008386:	d11b      	bne.n	80083c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0208 	mvn.w	r2, #8
 8008390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2204      	movs	r2, #4
 8008396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f8b1 	bl	800850e <HAL_TIM_IC_CaptureCallback>
 80083ac:	e005      	b.n	80083ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f8a3 	bl	80084fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f8b4 	bl	8008522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0310 	and.w	r3, r3, #16
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	d122      	bne.n	8008414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b10      	cmp	r3, #16
 80083da:	d11b      	bne.n	8008414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0210 	mvn.w	r2, #16
 80083e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2208      	movs	r2, #8
 80083ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f887 	bl	800850e <HAL_TIM_IC_CaptureCallback>
 8008400:	e005      	b.n	800840e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f879 	bl	80084fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f88a 	bl	8008522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b01      	cmp	r3, #1
 8008420:	d10e      	bne.n	8008440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b01      	cmp	r3, #1
 800842e:	d107      	bne.n	8008440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f06f 0201 	mvn.w	r2, #1
 8008438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7f8 fc4e 	bl	8000cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844a:	2b80      	cmp	r3, #128	; 0x80
 800844c:	d10e      	bne.n	800846c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008458:	2b80      	cmp	r3, #128	; 0x80
 800845a:	d107      	bne.n	800846c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f914 	bl	8008694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847a:	d10e      	bne.n	800849a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008486:	2b80      	cmp	r3, #128	; 0x80
 8008488:	d107      	bne.n	800849a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f907 	bl	80086a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a4:	2b40      	cmp	r3, #64	; 0x40
 80084a6:	d10e      	bne.n	80084c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b2:	2b40      	cmp	r3, #64	; 0x40
 80084b4:	d107      	bne.n	80084c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f838 	bl	8008536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	f003 0320 	and.w	r3, r3, #32
 80084d0:	2b20      	cmp	r3, #32
 80084d2:	d10e      	bne.n	80084f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f003 0320 	and.w	r3, r3, #32
 80084de:	2b20      	cmp	r3, #32
 80084e0:	d107      	bne.n	80084f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f06f 0220 	mvn.w	r2, #32
 80084ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f8c7 	bl	8008680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800853e:	bf00      	nop
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
	...

0800854c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a40      	ldr	r2, [pc, #256]	; (8008660 <TIM_Base_SetConfig+0x114>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d013      	beq.n	800858c <TIM_Base_SetConfig+0x40>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856a:	d00f      	beq.n	800858c <TIM_Base_SetConfig+0x40>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a3d      	ldr	r2, [pc, #244]	; (8008664 <TIM_Base_SetConfig+0x118>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d00b      	beq.n	800858c <TIM_Base_SetConfig+0x40>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a3c      	ldr	r2, [pc, #240]	; (8008668 <TIM_Base_SetConfig+0x11c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d007      	beq.n	800858c <TIM_Base_SetConfig+0x40>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a3b      	ldr	r2, [pc, #236]	; (800866c <TIM_Base_SetConfig+0x120>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d003      	beq.n	800858c <TIM_Base_SetConfig+0x40>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a3a      	ldr	r2, [pc, #232]	; (8008670 <TIM_Base_SetConfig+0x124>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d108      	bne.n	800859e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	4313      	orrs	r3, r2
 800859c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a2f      	ldr	r2, [pc, #188]	; (8008660 <TIM_Base_SetConfig+0x114>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d01f      	beq.n	80085e6 <TIM_Base_SetConfig+0x9a>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ac:	d01b      	beq.n	80085e6 <TIM_Base_SetConfig+0x9a>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a2c      	ldr	r2, [pc, #176]	; (8008664 <TIM_Base_SetConfig+0x118>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d017      	beq.n	80085e6 <TIM_Base_SetConfig+0x9a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a2b      	ldr	r2, [pc, #172]	; (8008668 <TIM_Base_SetConfig+0x11c>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d013      	beq.n	80085e6 <TIM_Base_SetConfig+0x9a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a2a      	ldr	r2, [pc, #168]	; (800866c <TIM_Base_SetConfig+0x120>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00f      	beq.n	80085e6 <TIM_Base_SetConfig+0x9a>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a29      	ldr	r2, [pc, #164]	; (8008670 <TIM_Base_SetConfig+0x124>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00b      	beq.n	80085e6 <TIM_Base_SetConfig+0x9a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a28      	ldr	r2, [pc, #160]	; (8008674 <TIM_Base_SetConfig+0x128>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d007      	beq.n	80085e6 <TIM_Base_SetConfig+0x9a>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a27      	ldr	r2, [pc, #156]	; (8008678 <TIM_Base_SetConfig+0x12c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d003      	beq.n	80085e6 <TIM_Base_SetConfig+0x9a>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a26      	ldr	r2, [pc, #152]	; (800867c <TIM_Base_SetConfig+0x130>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d108      	bne.n	80085f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a10      	ldr	r2, [pc, #64]	; (8008660 <TIM_Base_SetConfig+0x114>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d00f      	beq.n	8008644 <TIM_Base_SetConfig+0xf8>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a12      	ldr	r2, [pc, #72]	; (8008670 <TIM_Base_SetConfig+0x124>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d00b      	beq.n	8008644 <TIM_Base_SetConfig+0xf8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a11      	ldr	r2, [pc, #68]	; (8008674 <TIM_Base_SetConfig+0x128>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d007      	beq.n	8008644 <TIM_Base_SetConfig+0xf8>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a10      	ldr	r2, [pc, #64]	; (8008678 <TIM_Base_SetConfig+0x12c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d003      	beq.n	8008644 <TIM_Base_SetConfig+0xf8>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a0f      	ldr	r2, [pc, #60]	; (800867c <TIM_Base_SetConfig+0x130>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d103      	bne.n	800864c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	691a      	ldr	r2, [r3, #16]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	615a      	str	r2, [r3, #20]
}
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	40012c00 	.word	0x40012c00
 8008664:	40000400 	.word	0x40000400
 8008668:	40000800 	.word	0x40000800
 800866c:	40000c00 	.word	0x40000c00
 8008670:	40013400 	.word	0x40013400
 8008674:	40014000 	.word	0x40014000
 8008678:	40014400 	.word	0x40014400
 800867c:	40014800 	.word	0x40014800

08008680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	6812      	ldr	r2, [r2, #0]
 80086d4:	f023 0101 	bic.w	r1, r3, #1
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b08      	cmp	r3, #8
 80086e4:	d102      	bne.n	80086ec <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80086e6:	2340      	movs	r3, #64	; 0x40
 80086e8:	617b      	str	r3, [r7, #20]
 80086ea:	e001      	b.n	80086f0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80086ec:	2300      	movs	r3, #0
 80086ee:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80086fc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008702:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008708:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800870e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008714:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800871a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008720:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008726:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800872c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8008732:	4313      	orrs	r3, r2
 8008734:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	4313      	orrs	r3, r2
 800873e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	4313      	orrs	r3, r2
 8008752:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4313      	orrs	r3, r2
 800875c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800875e:	4b23      	ldr	r3, [pc, #140]	; (80087ec <FMC_NORSRAM_Init+0x130>)
 8008760:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008768:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008770:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008778:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008780:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	43db      	mvns	r3, r3
 8008790:	ea02 0103 	and.w	r1, r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	4319      	orrs	r1, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087aa:	d10c      	bne.n	80087c6 <FMC_NORSRAM_Init+0x10a>
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d008      	beq.n	80087c6 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c0:	431a      	orrs	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d006      	beq.n	80087dc <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d6:	431a      	orrs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	0008fb7f 	.word	0x0008fb7f

080087f0 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	1c5a      	adds	r2, r3, #1
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	011b      	lsls	r3, r3, #4
 8008810:	431a      	orrs	r2, r3
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	021b      	lsls	r3, r3, #8
 8008818:	431a      	orrs	r2, r3
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	079b      	lsls	r3, r3, #30
 8008820:	431a      	orrs	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	041b      	lsls	r3, r3, #16
 8008828:	431a      	orrs	r2, r3
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	3b01      	subs	r3, #1
 8008830:	051b      	lsls	r3, r3, #20
 8008832:	431a      	orrs	r2, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	3b02      	subs	r3, #2
 800883a:	061b      	lsls	r3, r3, #24
 800883c:	ea42 0103 	orr.w	r1, r2, r3
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	3201      	adds	r2, #1
 8008848:	4319      	orrs	r1, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800885c:	d113      	bne.n	8008886 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008866:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	3b01      	subs	r3, #1
 800886e:	051b      	lsls	r3, r3, #20
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	431a      	orrs	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	371c      	adds	r7, #28
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088a8:	d121      	bne.n	80088ee <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b2:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6819      	ldr	r1, [r3, #0]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	011b      	lsls	r3, r3, #4
 80088c0:	4319      	orrs	r1, r3
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	021b      	lsls	r3, r3, #8
 80088c8:	4319      	orrs	r1, r3
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	079b      	lsls	r3, r3, #30
 80088d0:	4319      	orrs	r1, r3
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	4319      	orrs	r1, r3
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	041b      	lsls	r3, r3, #16
 80088de:	430b      	orrs	r3, r1
 80088e0:	ea42 0103 	orr.w	r1, r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80088ec:	e005      	b.n	80088fa <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80088f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008908:	b084      	sub	sp, #16
 800890a:	b480      	push	{r7}
 800890c:	b085      	sub	sp, #20
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	f107 001c 	add.w	r0, r7, #28
 8008916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800891e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008920:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008922:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8008926:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800892a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800892c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800892e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	4313      	orrs	r3, r2
 8008934:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	4b07      	ldr	r3, [pc, #28]	; (8008958 <SDMMC_Init+0x50>)
 800893c:	4013      	ands	r3, r2
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	431a      	orrs	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	b004      	add	sp, #16
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	ffc02c00 	.word	0xffc02c00

0800895c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f043 0203 	orr.w	r2, r3, #3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80089ac:	2002      	movs	r0, #2
 80089ae:	f7f8 fe1b 	bl	80015e8 <HAL_Delay>

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0303 	and.w	r3, r3, #3
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80089fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008a02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <SDMMC_SendCommand+0x50>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	fffee0c0 	.word	0xfffee0c0

08008a2c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	b2db      	uxtb	r3, r3
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b085      	sub	sp, #20
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3314      	adds	r3, #20
 8008a54:	461a      	mov	r2, r3
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	4413      	add	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a92:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008a98:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008a9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0

}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008ad2:	2310      	movs	r3, #16
 8008ad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008adc:	2300      	movs	r3, #0
 8008ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ae4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ae6:	f107 0308 	add.w	r3, r7, #8
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff ff73 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af6:	2110      	movs	r1, #16
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fa7b 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008afe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b00:	69fb      	ldr	r3, [r7, #28]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b088      	sub	sp, #32
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008b18:	2311      	movs	r3, #17
 8008b1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b2c:	f107 0308 	add.w	r3, r7, #8
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff ff50 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3c:	2111      	movs	r1, #17
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fa58 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008b44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b46:	69fb      	ldr	r3, [r7, #28]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3720      	adds	r7, #32
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b088      	sub	sp, #32
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008b5e:	2312      	movs	r3, #18
 8008b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b72:	f107 0308 	add.w	r3, r7, #8
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff ff2d 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b82:	2112      	movs	r1, #18
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fa35 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008b8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3720      	adds	r7, #32
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b088      	sub	sp, #32
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008ba4:	2318      	movs	r3, #24
 8008ba6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bb8:	f107 0308 	add.w	r3, r7, #8
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7ff ff0a 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc8:	2118      	movs	r1, #24
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa12 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008bd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bd2:	69fb      	ldr	r3, [r7, #28]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3720      	adds	r7, #32
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008bea:	2319      	movs	r3, #25
 8008bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bfe:	f107 0308 	add.w	r3, r7, #8
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff fee7 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c0e:	2119      	movs	r1, #25
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f9ef 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008c16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c18:	69fb      	ldr	r3, [r7, #28]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3720      	adds	r7, #32
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b088      	sub	sp, #32
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008c30:	230c      	movs	r3, #12
 8008c32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c42:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c5c:	f107 0308 	add.w	r3, r7, #8
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff feb8 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008c68:	4a08      	ldr	r2, [pc, #32]	; (8008c8c <SDMMC_CmdStopTransfer+0x68>)
 8008c6a:	210c      	movs	r1, #12
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f9c1 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008c72:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008c80:	69fb      	ldr	r3, [r7, #28]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3720      	adds	r7, #32
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	05f5e100 	.word	0x05f5e100

08008c90 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08a      	sub	sp, #40	; 0x28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008ca0:	2307      	movs	r3, #7
 8008ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ca8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008caa:	2300      	movs	r3, #0
 8008cac:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cb2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cb4:	f107 0310 	add.w	r3, r7, #16
 8008cb8:	4619      	mov	r1, r3
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f7ff fe8c 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cc4:	2107      	movs	r1, #7
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 f994 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008ccc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3728      	adds	r7, #40	; 0x28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b088      	sub	sp, #32
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cec:	2300      	movs	r3, #0
 8008cee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008cf6:	f107 0308 	add.w	r3, r7, #8
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff fe6b 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fbb8 	bl	8009478 <SDMMC_GetCmdError>
 8008d08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d0a:	69fb      	ldr	r3, [r7, #28]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3720      	adds	r7, #32
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008d1c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008d20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008d22:	2308      	movs	r3, #8
 8008d24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d36:	f107 0308 	add.w	r3, r7, #8
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff fe4b 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fb4a 	bl	80093dc <SDMMC_GetCmdResp7>
 8008d48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d4a:	69fb      	ldr	r3, [r7, #28]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3720      	adds	r7, #32
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008d62:	2337      	movs	r3, #55	; 0x37
 8008d64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d76:	f107 0308 	add.w	r3, r7, #8
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff fe2b 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d86:	2137      	movs	r1, #55	; 0x37
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f933 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008d8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d90:	69fb      	ldr	r3, [r7, #28]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3720      	adds	r7, #32
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b088      	sub	sp, #32
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008da8:	2329      	movs	r3, #41	; 0x29
 8008daa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008db0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dbc:	f107 0308 	add.w	r3, r7, #8
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff fe08 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fa4f 	bl	800926c <SDMMC_GetCmdResp3>
 8008dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3720      	adds	r7, #32
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b088      	sub	sp, #32
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008de8:	2306      	movs	r3, #6
 8008dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008df2:	2300      	movs	r3, #0
 8008df4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dfc:	f107 0308 	add.w	r3, r7, #8
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff fde8 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e0c:	2106      	movs	r1, #6
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f8f0 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008e14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e16:	69fb      	ldr	r3, [r7, #28]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3720      	adds	r7, #32
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008e2c:	2333      	movs	r3, #51	; 0x33
 8008e2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e40:	f107 0308 	add.w	r3, r7, #8
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff fdc6 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e50:	2133      	movs	r1, #51	; 0x33
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f8ce 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008e58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e5a:	69fb      	ldr	r3, [r7, #28]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3720      	adds	r7, #32
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008e70:	2302      	movs	r3, #2
 8008e72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e84:	f107 0308 	add.w	r3, r7, #8
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff fda4 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f9a1 	bl	80091d8 <SDMMC_GetCmdResp2>
 8008e96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e98:	69fb      	ldr	r3, [r7, #28]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3720      	adds	r7, #32
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b088      	sub	sp, #32
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008eb0:	2309      	movs	r3, #9
 8008eb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008eb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008eb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ec2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ec4:	f107 0308 	add.w	r3, r7, #8
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7ff fd84 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f981 	bl	80091d8 <SDMMC_GetCmdResp2>
 8008ed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3720      	adds	r7, #32
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b088      	sub	sp, #32
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008efa:	2300      	movs	r3, #0
 8008efc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f04:	f107 0308 	add.w	r3, r7, #8
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff fd64 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	2103      	movs	r1, #3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f9e9 	bl	80092ec <SDMMC_GetCmdResp6>
 8008f1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3720      	adds	r7, #32
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b088      	sub	sp, #32
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008f34:	230d      	movs	r3, #13
 8008f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f48:	f107 0308 	add.w	r3, r7, #8
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff fd42 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f58:	210d      	movs	r1, #13
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f84a 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008f60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f62:	69fb      	ldr	r3, [r7, #28]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008f78:	230d      	movs	r3, #13
 8008f7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f82:	2300      	movs	r3, #0
 8008f84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f8c:	f107 0308 	add.w	r3, r7, #8
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff fd20 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9c:	210d      	movs	r1, #13
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f828 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008fa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fa6:	69fb      	ldr	r3, [r7, #28]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3720      	adds	r7, #32
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b088      	sub	sp, #32
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8008fbc:	230b      	movs	r3, #11
 8008fbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fd0:	f107 0308 	add.w	r3, r7, #8
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff fcfe 	bl	80089d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8008fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fe0:	210b      	movs	r1, #11
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f806 	bl	8008ff4 <SDMMC_GetCmdResp1>
 8008fe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fea:	69fb      	ldr	r3, [r7, #28]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3720      	adds	r7, #32
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009002:	4b70      	ldr	r3, [pc, #448]	; (80091c4 <SDMMC_GetCmdResp1+0x1d0>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a70      	ldr	r2, [pc, #448]	; (80091c8 <SDMMC_GetCmdResp1+0x1d4>)
 8009008:	fba2 2303 	umull	r2, r3, r2, r3
 800900c:	0a5a      	lsrs	r2, r3, #9
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	fb02 f303 	mul.w	r3, r2, r3
 8009014:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	1e5a      	subs	r2, r3, #1
 800901a:	61fa      	str	r2, [r7, #28]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d102      	bne.n	8009026 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009020:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009024:	e0c9      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	4b67      	ldr	r3, [pc, #412]	; (80091cc <SDMMC_GetCmdResp1+0x1d8>)
 8009030:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0ef      	beq.n	8009016 <SDMMC_GetCmdResp1+0x22>
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1ea      	bne.n	8009016 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b00      	cmp	r3, #0
 800904a:	d004      	beq.n	8009056 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2204      	movs	r2, #4
 8009050:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009052:	2304      	movs	r3, #4
 8009054:	e0b1      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d004      	beq.n	800906c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2201      	movs	r2, #1
 8009066:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009068:	2301      	movs	r3, #1
 800906a:	e0a6      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4a58      	ldr	r2, [pc, #352]	; (80091d0 <SDMMC_GetCmdResp1+0x1dc>)
 8009070:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7ff fcda 	bl	8008a2c <SDMMC_GetCommandResponse>
 8009078:	4603      	mov	r3, r0
 800907a:	461a      	mov	r2, r3
 800907c:	7afb      	ldrb	r3, [r7, #11]
 800907e:	4293      	cmp	r3, r2
 8009080:	d001      	beq.n	8009086 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009082:	2301      	movs	r3, #1
 8009084:	e099      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009086:	2100      	movs	r1, #0
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f7ff fcdc 	bl	8008a46 <SDMMC_GetResponse>
 800908e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	4b50      	ldr	r3, [pc, #320]	; (80091d4 <SDMMC_GetCmdResp1+0x1e0>)
 8009094:	4013      	ands	r3, r2
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800909a:	2300      	movs	r3, #0
 800909c:	e08d      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	da02      	bge.n	80090aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80090a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090a8:	e087      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80090b4:	2340      	movs	r3, #64	; 0x40
 80090b6:	e080      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80090c2:	2380      	movs	r3, #128	; 0x80
 80090c4:	e079      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80090d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090d4:	e071      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80090e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090e4:	e069      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80090f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f4:	e061      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009104:	e059      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009114:	e051      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009120:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009124:	e049      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009130:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009134:	e041      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009144:	e039      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009154:	e031      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009160:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009164:	e029      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009170:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009174:	e021      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009180:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009184:	e019      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009190:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009194:	e011      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80091a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80091a4:	e009      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f003 0308 	and.w	r3, r3, #8
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80091b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80091b4:	e001      	b.n	80091ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80091b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3720      	adds	r7, #32
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20000008 	.word	0x20000008
 80091c8:	10624dd3 	.word	0x10624dd3
 80091cc:	00200045 	.word	0x00200045
 80091d0:	002000c5 	.word	0x002000c5
 80091d4:	fdffe008 	.word	0xfdffe008

080091d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091e0:	4b1f      	ldr	r3, [pc, #124]	; (8009260 <SDMMC_GetCmdResp2+0x88>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a1f      	ldr	r2, [pc, #124]	; (8009264 <SDMMC_GetCmdResp2+0x8c>)
 80091e6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ea:	0a5b      	lsrs	r3, r3, #9
 80091ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f0:	fb02 f303 	mul.w	r3, r2, r3
 80091f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	1e5a      	subs	r2, r3, #1
 80091fa:	60fa      	str	r2, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d102      	bne.n	8009206 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009200:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009204:	e026      	b.n	8009254 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0ef      	beq.n	80091f6 <SDMMC_GetCmdResp2+0x1e>
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1ea      	bne.n	80091f6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2204      	movs	r2, #4
 8009230:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009232:	2304      	movs	r3, #4
 8009234:	e00e      	b.n	8009254 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	d004      	beq.n	800924c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009248:	2301      	movs	r3, #1
 800924a:	e003      	b.n	8009254 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a06      	ldr	r2, [pc, #24]	; (8009268 <SDMMC_GetCmdResp2+0x90>)
 8009250:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	20000008 	.word	0x20000008
 8009264:	10624dd3 	.word	0x10624dd3
 8009268:	002000c5 	.word	0x002000c5

0800926c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009274:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <SDMMC_GetCmdResp3+0x74>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a1a      	ldr	r2, [pc, #104]	; (80092e4 <SDMMC_GetCmdResp3+0x78>)
 800927a:	fba2 2303 	umull	r2, r3, r2, r3
 800927e:	0a5b      	lsrs	r3, r3, #9
 8009280:	f241 3288 	movw	r2, #5000	; 0x1388
 8009284:	fb02 f303 	mul.w	r3, r2, r3
 8009288:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	1e5a      	subs	r2, r3, #1
 800928e:	60fa      	str	r2, [r7, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d102      	bne.n	800929a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009294:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009298:	e01b      	b.n	80092d2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0ef      	beq.n	800928a <SDMMC_GetCmdResp3+0x1e>
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1ea      	bne.n	800928a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d004      	beq.n	80092ca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2204      	movs	r2, #4
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092c6:	2304      	movs	r3, #4
 80092c8:	e003      	b.n	80092d2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a06      	ldr	r2, [pc, #24]	; (80092e8 <SDMMC_GetCmdResp3+0x7c>)
 80092ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	20000008 	.word	0x20000008
 80092e4:	10624dd3 	.word	0x10624dd3
 80092e8:	002000c5 	.word	0x002000c5

080092ec <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	460b      	mov	r3, r1
 80092f6:	607a      	str	r2, [r7, #4]
 80092f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092fa:	4b35      	ldr	r3, [pc, #212]	; (80093d0 <SDMMC_GetCmdResp6+0xe4>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a35      	ldr	r2, [pc, #212]	; (80093d4 <SDMMC_GetCmdResp6+0xe8>)
 8009300:	fba2 2303 	umull	r2, r3, r2, r3
 8009304:	0a5b      	lsrs	r3, r3, #9
 8009306:	f241 3288 	movw	r2, #5000	; 0x1388
 800930a:	fb02 f303 	mul.w	r3, r2, r3
 800930e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	1e5a      	subs	r2, r3, #1
 8009314:	61fa      	str	r2, [r7, #28]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d102      	bne.n	8009320 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800931a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800931e:	e052      	b.n	80093c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009324:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0ef      	beq.n	8009310 <SDMMC_GetCmdResp6+0x24>
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1ea      	bne.n	8009310 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	f003 0304 	and.w	r3, r3, #4
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2204      	movs	r2, #4
 800934a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800934c:	2304      	movs	r3, #4
 800934e:	e03a      	b.n	80093c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	2b00      	cmp	r3, #0
 800935a:	d004      	beq.n	8009366 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2201      	movs	r2, #1
 8009360:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009362:	2301      	movs	r3, #1
 8009364:	e02f      	b.n	80093c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f7ff fb60 	bl	8008a2c <SDMMC_GetCommandResponse>
 800936c:	4603      	mov	r3, r0
 800936e:	461a      	mov	r2, r3
 8009370:	7afb      	ldrb	r3, [r7, #11]
 8009372:	4293      	cmp	r3, r2
 8009374:	d001      	beq.n	800937a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009376:	2301      	movs	r3, #1
 8009378:	e025      	b.n	80093c6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4a16      	ldr	r2, [pc, #88]	; (80093d8 <SDMMC_GetCmdResp6+0xec>)
 800937e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009380:	2100      	movs	r1, #0
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff fb5f 	bl	8008a46 <SDMMC_GetResponse>
 8009388:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d106      	bne.n	80093a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	0c1b      	lsrs	r3, r3, #16
 8009398:	b29a      	uxth	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800939e:	2300      	movs	r3, #0
 80093a0:	e011      	b.n	80093c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093b0:	e009      	b.n	80093c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093c0:	e001      	b.n	80093c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20000008 	.word	0x20000008
 80093d4:	10624dd3 	.word	0x10624dd3
 80093d8:	002000c5 	.word	0x002000c5

080093dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093e4:	4b22      	ldr	r3, [pc, #136]	; (8009470 <SDMMC_GetCmdResp7+0x94>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a22      	ldr	r2, [pc, #136]	; (8009474 <SDMMC_GetCmdResp7+0x98>)
 80093ea:	fba2 2303 	umull	r2, r3, r2, r3
 80093ee:	0a5b      	lsrs	r3, r3, #9
 80093f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f4:	fb02 f303 	mul.w	r3, r2, r3
 80093f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	1e5a      	subs	r2, r3, #1
 80093fe:	60fa      	str	r2, [r7, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d102      	bne.n	800940a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009404:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009408:	e02c      	b.n	8009464 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0ef      	beq.n	80093fa <SDMMC_GetCmdResp7+0x1e>
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1ea      	bne.n	80093fa <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b00      	cmp	r3, #0
 800942e:	d004      	beq.n	800943a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2204      	movs	r2, #4
 8009434:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009436:	2304      	movs	r3, #4
 8009438:	e014      	b.n	8009464 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	d004      	beq.n	8009450 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800944c:	2301      	movs	r3, #1
 800944e:	e009      	b.n	8009464 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2240      	movs	r2, #64	; 0x40
 8009460:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009462:	2300      	movs	r3, #0

}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	20000008 	.word	0x20000008
 8009474:	10624dd3 	.word	0x10624dd3

08009478 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009480:	4b11      	ldr	r3, [pc, #68]	; (80094c8 <SDMMC_GetCmdError+0x50>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a11      	ldr	r2, [pc, #68]	; (80094cc <SDMMC_GetCmdError+0x54>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	0a5b      	lsrs	r3, r3, #9
 800948c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009490:	fb02 f303 	mul.w	r3, r2, r3
 8009494:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	1e5a      	subs	r2, r3, #1
 800949a:	60fa      	str	r2, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094a4:	e009      	b.n	80094ba <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0f1      	beq.n	8009496 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a06      	ldr	r2, [pc, #24]	; (80094d0 <SDMMC_GetCmdError+0x58>)
 80094b6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	20000008 	.word	0x20000008
 80094cc:	10624dd3 	.word	0x10624dd3
 80094d0:	002000c5 	.word	0x002000c5

080094d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80094d8:	4904      	ldr	r1, [pc, #16]	; (80094ec <MX_FATFS_Init+0x18>)
 80094da:	4805      	ldr	r0, [pc, #20]	; (80094f0 <MX_FATFS_Init+0x1c>)
 80094dc:	f000 faa4 	bl	8009a28 <FATFS_LinkDriver>
 80094e0:	4603      	mov	r3, r0
 80094e2:	461a      	mov	r2, r3
 80094e4:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <MX_FATFS_Init+0x20>)
 80094e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80094e8:	bf00      	nop
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	200003ec 	.word	0x200003ec
 80094f0:	0800d628 	.word	0x0800d628
 80094f4:	200003e8 	.word	0x200003e8

080094f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009502:	f000 f885 	bl	8009610 <BSP_SD_IsDetected>
 8009506:	4603      	mov	r3, r0
 8009508:	2b01      	cmp	r3, #1
 800950a:	d001      	beq.n	8009510 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800950c:	2302      	movs	r3, #2
 800950e:	e012      	b.n	8009536 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009510:	480b      	ldr	r0, [pc, #44]	; (8009540 <BSP_SD_Init+0x48>)
 8009512:	f7fd f821 	bl	8006558 <HAL_SD_Init>
 8009516:	4603      	mov	r3, r0
 8009518:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800951a:	79fb      	ldrb	r3, [r7, #7]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d109      	bne.n	8009534 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009524:	4806      	ldr	r0, [pc, #24]	; (8009540 <BSP_SD_Init+0x48>)
 8009526:	f7fd fed5 	bl	80072d4 <HAL_SD_ConfigWideBusOperation>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009534:	79fb      	ldrb	r3, [r7, #7]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	2000025c 	.word	0x2000025c

08009544 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	68f9      	ldr	r1, [r7, #12]
 800955a:	4806      	ldr	r0, [pc, #24]	; (8009574 <BSP_SD_ReadBlocks_DMA+0x30>)
 800955c:	f7fd f924 	bl	80067a8 <HAL_SD_ReadBlocks_DMA>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800956a:	7dfb      	ldrb	r3, [r7, #23]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	2000025c 	.word	0x2000025c

08009578 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	68f9      	ldr	r1, [r7, #12]
 800958e:	4806      	ldr	r0, [pc, #24]	; (80095a8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009590:	f7fd f9b2 	bl	80068f8 <HAL_SD_WriteBlocks_DMA>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	2000025c 	.word	0x2000025c

080095ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80095b0:	4805      	ldr	r0, [pc, #20]	; (80095c8 <BSP_SD_GetCardState+0x1c>)
 80095b2:	f7fd ffa3 	bl	80074fc <HAL_SD_GetCardState>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	bf14      	ite	ne
 80095bc:	2301      	movne	r3, #1
 80095be:	2300      	moveq	r3, #0
 80095c0:	b2db      	uxtb	r3, r3
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	2000025c 	.word	0x2000025c

080095cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	4803      	ldr	r0, [pc, #12]	; (80095e4 <BSP_SD_GetCardInfo+0x18>)
 80095d8:	f7fd fe50 	bl	800727c <HAL_SD_GetCardInfo>
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	2000025c 	.word	0x2000025c

080095e8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80095f0:	f000 f9aa 	bl	8009948 <BSP_SD_WriteCpltCallback>
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009604:	f000 f9b2 	bl	800996c <BSP_SD_ReadCpltCallback>
}
 8009608:	bf00      	nop
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009616:	2301      	movs	r3, #1
 8009618:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800961a:	f000 f80b 	bl	8009634 <BSP_PlatformIsDetected>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009624:	2300      	movs	r3, #0
 8009626:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	b2db      	uxtb	r3, r3
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800963a:	2301      	movs	r3, #1
 800963c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800963e:	2120      	movs	r1, #32
 8009640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009644:	f7fa f8ae 	bl	80037a4 <HAL_GPIO_ReadPin>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800964e:	2300      	movs	r3, #0
 8009650:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009652:	79fb      	ldrb	r3, [r7, #7]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8009664:	f000 faa0 	bl	8009ba8 <osKernelGetTickCount>
 8009668:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800966a:	e006      	b.n	800967a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800966c:	f7ff ff9e 	bl	80095ac <BSP_SD_GetCardState>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009676:	2300      	movs	r3, #0
 8009678:	e009      	b.n	800968e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800967a:	f000 fa95 	bl	8009ba8 <osKernelGetTickCount>
 800967e:	4602      	mov	r2, r0
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	429a      	cmp	r2, r3
 8009688:	d8f0      	bhi.n	800966c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800968a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80096a2:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <SD_CheckStatus+0x38>)
 80096a4:	2201      	movs	r2, #1
 80096a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80096a8:	f7ff ff80 	bl	80095ac <BSP_SD_GetCardState>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d107      	bne.n	80096c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80096b2:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <SD_CheckStatus+0x38>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	f023 0301 	bic.w	r3, r3, #1
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <SD_CheckStatus+0x38>)
 80096c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80096c2:	4b03      	ldr	r3, [pc, #12]	; (80096d0 <SD_CheckStatus+0x38>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	b2db      	uxtb	r3, r3
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	20000011 	.word	0x20000011

080096d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80096de:	4b1c      	ldr	r3, [pc, #112]	; (8009750 <SD_initialize+0x7c>)
 80096e0:	2201      	movs	r2, #1
 80096e2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80096e4:	f000 fa18 	bl	8009b18 <osKernelGetState>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d129      	bne.n	8009742 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80096ee:	f7ff ff03 	bl	80094f8 <BSP_SD_Init>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d107      	bne.n	8009708 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80096f8:	79fb      	ldrb	r3, [r7, #7]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7ff ffcc 	bl	8009698 <SD_CheckStatus>
 8009700:	4603      	mov	r3, r0
 8009702:	461a      	mov	r2, r3
 8009704:	4b12      	ldr	r3, [pc, #72]	; (8009750 <SD_initialize+0x7c>)
 8009706:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009708:	4b11      	ldr	r3, [pc, #68]	; (8009750 <SD_initialize+0x7c>)
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b01      	cmp	r3, #1
 8009710:	d017      	beq.n	8009742 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8009712:	4b10      	ldr	r3, [pc, #64]	; (8009754 <SD_initialize+0x80>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d107      	bne.n	800972a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800971a:	2200      	movs	r2, #0
 800971c:	2102      	movs	r1, #2
 800971e:	200a      	movs	r0, #10
 8009720:	f000 fc24 	bl	8009f6c <osMessageQueueNew>
 8009724:	4603      	mov	r3, r0
 8009726:	4a0b      	ldr	r2, [pc, #44]	; (8009754 <SD_initialize+0x80>)
 8009728:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800972a:	4b0a      	ldr	r3, [pc, #40]	; (8009754 <SD_initialize+0x80>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d107      	bne.n	8009742 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8009732:	4b07      	ldr	r3, [pc, #28]	; (8009750 <SD_initialize+0x7c>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	b2db      	uxtb	r3, r3
 8009738:	f043 0301 	orr.w	r3, r3, #1
 800973c:	b2da      	uxtb	r2, r3
 800973e:	4b04      	ldr	r3, [pc, #16]	; (8009750 <SD_initialize+0x7c>)
 8009740:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8009742:	4b03      	ldr	r3, [pc, #12]	; (8009750 <SD_initialize+0x7c>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b2db      	uxtb	r3, r3
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20000011 	.word	0x20000011
 8009754:	200003f0 	.word	0x200003f0

08009758 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	4618      	mov	r0, r3
 8009766:	f7ff ff97 	bl	8009698 <SD_CheckStatus>
 800976a:	4603      	mov	r3, r0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b088      	sub	sp, #32
 8009778:	af00      	add	r7, sp, #0
 800977a:	60b9      	str	r1, [r7, #8]
 800977c:	607a      	str	r2, [r7, #4]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009788:	f247 5030 	movw	r0, #30000	; 0x7530
 800978c:	f7ff ff66 	bl	800965c <SD_CheckStatusWithTimeout>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	da01      	bge.n	800979a <SD_read+0x26>
  {
    return res;
 8009796:	7ffb      	ldrb	r3, [r7, #31]
 8009798:	e02f      	b.n	80097fa <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	68b8      	ldr	r0, [r7, #8]
 80097a0:	f7ff fed0 	bl	8009544 <BSP_SD_ReadBlocks_DMA>
 80097a4:	4603      	mov	r3, r0
 80097a6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80097a8:	7fbb      	ldrb	r3, [r7, #30]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d124      	bne.n	80097f8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80097ae:	4b15      	ldr	r3, [pc, #84]	; (8009804 <SD_read+0x90>)
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	f107 0112 	add.w	r1, r7, #18
 80097b6:	f247 5330 	movw	r3, #30000	; 0x7530
 80097ba:	2200      	movs	r2, #0
 80097bc:	f000 fcaa 	bl	800a114 <osMessageQueueGet>
 80097c0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d117      	bne.n	80097f8 <SD_read+0x84>
 80097c8:	8a7b      	ldrh	r3, [r7, #18]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d114      	bne.n	80097f8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80097ce:	f000 f9eb 	bl	8009ba8 <osKernelGetTickCount>
 80097d2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80097d4:	e007      	b.n	80097e6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80097d6:	f7ff fee9 	bl	80095ac <BSP_SD_GetCardState>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d102      	bne.n	80097e6 <SD_read+0x72>
              {
                res = RES_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80097e4:	e008      	b.n	80097f8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80097e6:	f000 f9df 	bl	8009ba8 <osKernelGetTickCount>
 80097ea:	4602      	mov	r2, r0
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d9ee      	bls.n	80097d6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80097f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3720      	adds	r7, #32
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	200003f0 	.word	0x200003f0

08009808 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800981c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009820:	f7ff ff1c 	bl	800965c <SD_CheckStatusWithTimeout>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	da01      	bge.n	800982e <SD_write+0x26>
  {
    return res;
 800982a:	7ffb      	ldrb	r3, [r7, #31]
 800982c:	e02d      	b.n	800988a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	6879      	ldr	r1, [r7, #4]
 8009832:	68b8      	ldr	r0, [r7, #8]
 8009834:	f7ff fea0 	bl	8009578 <BSP_SD_WriteBlocks_DMA>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d124      	bne.n	8009888 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800983e:	4b15      	ldr	r3, [pc, #84]	; (8009894 <SD_write+0x8c>)
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	f107 0112 	add.w	r1, r7, #18
 8009846:	f247 5330 	movw	r3, #30000	; 0x7530
 800984a:	2200      	movs	r2, #0
 800984c:	f000 fc62 	bl	800a114 <osMessageQueueGet>
 8009850:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d117      	bne.n	8009888 <SD_write+0x80>
 8009858:	8a7b      	ldrh	r3, [r7, #18]
 800985a:	2b02      	cmp	r3, #2
 800985c:	d114      	bne.n	8009888 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800985e:	f000 f9a3 	bl	8009ba8 <osKernelGetTickCount>
 8009862:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009864:	e007      	b.n	8009876 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009866:	f7ff fea1 	bl	80095ac <BSP_SD_GetCardState>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d102      	bne.n	8009876 <SD_write+0x6e>
          {
            res = RES_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	77fb      	strb	r3, [r7, #31]
            break;
 8009874:	e008      	b.n	8009888 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009876:	f000 f997 	bl	8009ba8 <osKernelGetTickCount>
 800987a:	4602      	mov	r2, r0
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	f247 522f 	movw	r2, #29999	; 0x752f
 8009884:	4293      	cmp	r3, r2
 8009886:	d9ee      	bls.n	8009866 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009888:	7ffb      	ldrb	r3, [r7, #31]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3720      	adds	r7, #32
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	200003f0 	.word	0x200003f0

08009898 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08c      	sub	sp, #48	; 0x30
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	603a      	str	r2, [r7, #0]
 80098a2:	71fb      	strb	r3, [r7, #7]
 80098a4:	460b      	mov	r3, r1
 80098a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80098ae:	4b25      	ldr	r3, [pc, #148]	; (8009944 <SD_ioctl+0xac>)
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <SD_ioctl+0x28>
 80098bc:	2303      	movs	r3, #3
 80098be:	e03c      	b.n	800993a <SD_ioctl+0xa2>

  switch (cmd)
 80098c0:	79bb      	ldrb	r3, [r7, #6]
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d834      	bhi.n	8009930 <SD_ioctl+0x98>
 80098c6:	a201      	add	r2, pc, #4	; (adr r2, 80098cc <SD_ioctl+0x34>)
 80098c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098cc:	080098dd 	.word	0x080098dd
 80098d0:	080098e5 	.word	0x080098e5
 80098d4:	080098fd 	.word	0x080098fd
 80098d8:	08009917 	.word	0x08009917
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098e2:	e028      	b.n	8009936 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80098e4:	f107 0308 	add.w	r3, r7, #8
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7ff fe6f 	bl	80095cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098ee:	6a3a      	ldr	r2, [r7, #32]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098fa:	e01c      	b.n	8009936 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098fc:	f107 0308 	add.w	r3, r7, #8
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff fe63 	bl	80095cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	b29a      	uxth	r2, r3
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009914:	e00f      	b.n	8009936 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009916:	f107 0308 	add.w	r3, r7, #8
 800991a:	4618      	mov	r0, r3
 800991c:	f7ff fe56 	bl	80095cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	0a5a      	lsrs	r2, r3, #9
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800992e:	e002      	b.n	8009936 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009930:	2304      	movs	r3, #4
 8009932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800993a:	4618      	mov	r0, r3
 800993c:	3730      	adds	r7, #48	; 0x30
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20000011 	.word	0x20000011

08009948 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800994e:	2302      	movs	r3, #2
 8009950:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009952:	4b05      	ldr	r3, [pc, #20]	; (8009968 <BSP_SD_WriteCpltCallback+0x20>)
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	1db9      	adds	r1, r7, #6
 8009958:	2300      	movs	r3, #0
 800995a:	2200      	movs	r2, #0
 800995c:	f000 fb7a 	bl	800a054 <osMessageQueuePut>
#endif
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	200003f0 	.word	0x200003f0

0800996c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8009972:	2301      	movs	r3, #1
 8009974:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8009976:	4b05      	ldr	r3, [pc, #20]	; (800998c <BSP_SD_ReadCpltCallback+0x20>)
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	1db9      	adds	r1, r7, #6
 800997c:	2300      	movs	r3, #0
 800997e:	2200      	movs	r2, #0
 8009980:	f000 fb68 	bl	800a054 <osMessageQueuePut>
#endif
}
 8009984:	bf00      	nop
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	200003f0 	.word	0x200003f0

08009990 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	4613      	mov	r3, r2
 800999c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800999e:	2301      	movs	r3, #1
 80099a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80099a6:	4b1f      	ldr	r3, [pc, #124]	; (8009a24 <FATFS_LinkDriverEx+0x94>)
 80099a8:	7a5b      	ldrb	r3, [r3, #9]
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d131      	bne.n	8009a14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80099b0:	4b1c      	ldr	r3, [pc, #112]	; (8009a24 <FATFS_LinkDriverEx+0x94>)
 80099b2:	7a5b      	ldrb	r3, [r3, #9]
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	461a      	mov	r2, r3
 80099b8:	4b1a      	ldr	r3, [pc, #104]	; (8009a24 <FATFS_LinkDriverEx+0x94>)
 80099ba:	2100      	movs	r1, #0
 80099bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80099be:	4b19      	ldr	r3, [pc, #100]	; (8009a24 <FATFS_LinkDriverEx+0x94>)
 80099c0:	7a5b      	ldrb	r3, [r3, #9]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	4a17      	ldr	r2, [pc, #92]	; (8009a24 <FATFS_LinkDriverEx+0x94>)
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80099ce:	4b15      	ldr	r3, [pc, #84]	; (8009a24 <FATFS_LinkDriverEx+0x94>)
 80099d0:	7a5b      	ldrb	r3, [r3, #9]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	461a      	mov	r2, r3
 80099d6:	4b13      	ldr	r3, [pc, #76]	; (8009a24 <FATFS_LinkDriverEx+0x94>)
 80099d8:	4413      	add	r3, r2
 80099da:	79fa      	ldrb	r2, [r7, #7]
 80099dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80099de:	4b11      	ldr	r3, [pc, #68]	; (8009a24 <FATFS_LinkDriverEx+0x94>)
 80099e0:	7a5b      	ldrb	r3, [r3, #9]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	1c5a      	adds	r2, r3, #1
 80099e6:	b2d1      	uxtb	r1, r2
 80099e8:	4a0e      	ldr	r2, [pc, #56]	; (8009a24 <FATFS_LinkDriverEx+0x94>)
 80099ea:	7251      	strb	r1, [r2, #9]
 80099ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80099ee:	7dbb      	ldrb	r3, [r7, #22]
 80099f0:	3330      	adds	r3, #48	; 0x30
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	3301      	adds	r3, #1
 80099fc:	223a      	movs	r2, #58	; 0x3a
 80099fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	3302      	adds	r3, #2
 8009a04:	222f      	movs	r2, #47	; 0x2f
 8009a06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	3303      	adds	r3, #3
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	371c      	adds	r7, #28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	200003f4 	.word	0x200003f4

08009a28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a32:	2200      	movs	r2, #0
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff ffaa 	bl	8009990 <FATFS_LinkDriverEx>
 8009a3c:	4603      	mov	r3, r0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <__NVIC_SetPriority>:
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	6039      	str	r1, [r7, #0]
 8009a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	db0a      	blt.n	8009a72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	490c      	ldr	r1, [pc, #48]	; (8009a94 <__NVIC_SetPriority+0x4c>)
 8009a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a66:	0112      	lsls	r2, r2, #4
 8009a68:	b2d2      	uxtb	r2, r2
 8009a6a:	440b      	add	r3, r1
 8009a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a70:	e00a      	b.n	8009a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	4908      	ldr	r1, [pc, #32]	; (8009a98 <__NVIC_SetPriority+0x50>)
 8009a78:	79fb      	ldrb	r3, [r7, #7]
 8009a7a:	f003 030f 	and.w	r3, r3, #15
 8009a7e:	3b04      	subs	r3, #4
 8009a80:	0112      	lsls	r2, r2, #4
 8009a82:	b2d2      	uxtb	r2, r2
 8009a84:	440b      	add	r3, r1
 8009a86:	761a      	strb	r2, [r3, #24]
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	e000e100 	.word	0xe000e100
 8009a98:	e000ed00 	.word	0xe000ed00

08009a9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009aa0:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <SysTick_Handler+0x1c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009aa4:	f002 fae4 	bl	800c070 <xTaskGetSchedulerState>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d001      	beq.n	8009ab2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009aae:	f003 f9cb 	bl	800ce48 <xPortSysTickHandler>
  }
}
 8009ab2:	bf00      	nop
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	e000e010 	.word	0xe000e010

08009abc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009abc:	b580      	push	{r7, lr}
 8009abe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	f06f 0004 	mvn.w	r0, #4
 8009ac6:	f7ff ffbf 	bl	8009a48 <__NVIC_SetPriority>
#endif
}
 8009aca:	bf00      	nop
 8009acc:	bd80      	pop	{r7, pc}
	...

08009ad0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ad6:	f3ef 8305 	mrs	r3, IPSR
 8009ada:	603b      	str	r3, [r7, #0]
  return(result);
 8009adc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009ae2:	f06f 0305 	mvn.w	r3, #5
 8009ae6:	607b      	str	r3, [r7, #4]
 8009ae8:	e00c      	b.n	8009b04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009aea:	4b0a      	ldr	r3, [pc, #40]	; (8009b14 <osKernelInitialize+0x44>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d105      	bne.n	8009afe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009af2:	4b08      	ldr	r3, [pc, #32]	; (8009b14 <osKernelInitialize+0x44>)
 8009af4:	2201      	movs	r2, #1
 8009af6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	607b      	str	r3, [r7, #4]
 8009afc:	e002      	b.n	8009b04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b04:	687b      	ldr	r3, [r7, #4]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	20000400 	.word	0x20000400

08009b18 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8009b1e:	f002 faa7 	bl	800c070 <xTaskGetSchedulerState>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d004      	beq.n	8009b32 <osKernelGetState+0x1a>
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d105      	bne.n	8009b38 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	607b      	str	r3, [r7, #4]
      break;
 8009b30:	e00c      	b.n	8009b4c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8009b32:	2303      	movs	r3, #3
 8009b34:	607b      	str	r3, [r7, #4]
      break;
 8009b36:	e009      	b.n	8009b4c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009b38:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <osKernelGetState+0x40>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d102      	bne.n	8009b46 <osKernelGetState+0x2e>
        state = osKernelReady;
 8009b40:	2301      	movs	r3, #1
 8009b42:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009b44:	e001      	b.n	8009b4a <osKernelGetState+0x32>
        state = osKernelInactive;
 8009b46:	2300      	movs	r3, #0
 8009b48:	607b      	str	r3, [r7, #4]
      break;
 8009b4a:	bf00      	nop
  }

  return (state);
 8009b4c:	687b      	ldr	r3, [r7, #4]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000400 	.word	0x20000400

08009b5c <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b62:	f3ef 8305 	mrs	r3, IPSR
 8009b66:	603b      	str	r3, [r7, #0]
  return(result);
 8009b68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b6e:	f06f 0305 	mvn.w	r3, #5
 8009b72:	607b      	str	r3, [r7, #4]
 8009b74:	e010      	b.n	8009b98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b76:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <osKernelStart+0x48>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d109      	bne.n	8009b92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b7e:	f7ff ff9d 	bl	8009abc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b82:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <osKernelStart+0x48>)
 8009b84:	2202      	movs	r2, #2
 8009b86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b88:	f001 fe04 	bl	800b794 <vTaskStartScheduler>
      stat = osOK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	607b      	str	r3, [r7, #4]
 8009b90:	e002      	b.n	8009b98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b98:	687b      	ldr	r3, [r7, #4]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20000400 	.word	0x20000400

08009ba8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bae:	f3ef 8305 	mrs	r3, IPSR
 8009bb2:	603b      	str	r3, [r7, #0]
  return(result);
 8009bb4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009bba:	f001 ff17 	bl	800b9ec <xTaskGetTickCountFromISR>
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	e002      	b.n	8009bc8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009bc2:	f001 ff03 	bl	800b9cc <xTaskGetTickCount>
 8009bc6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009bc8:	687b      	ldr	r3, [r7, #4]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b08e      	sub	sp, #56	; 0x38
 8009bd6:	af04      	add	r7, sp, #16
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009be2:	f3ef 8305 	mrs	r3, IPSR
 8009be6:	617b      	str	r3, [r7, #20]
  return(result);
 8009be8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d17e      	bne.n	8009cec <osThreadNew+0x11a>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d07b      	beq.n	8009cec <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009bf4:	2380      	movs	r3, #128	; 0x80
 8009bf6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009bf8:	2318      	movs	r3, #24
 8009bfa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c04:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d045      	beq.n	8009c98 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <osThreadNew+0x48>
        name = attr->name;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d008      	beq.n	8009c40 <osThreadNew+0x6e>
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	2b38      	cmp	r3, #56	; 0x38
 8009c32:	d805      	bhi.n	8009c40 <osThreadNew+0x6e>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <osThreadNew+0x72>
        return (NULL);
 8009c40:	2300      	movs	r3, #0
 8009c42:	e054      	b.n	8009cee <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	089b      	lsrs	r3, r3, #2
 8009c52:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00e      	beq.n	8009c7a <osThreadNew+0xa8>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	2bbb      	cmp	r3, #187	; 0xbb
 8009c62:	d90a      	bls.n	8009c7a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d006      	beq.n	8009c7a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <osThreadNew+0xa8>
        mem = 1;
 8009c74:	2301      	movs	r3, #1
 8009c76:	61bb      	str	r3, [r7, #24]
 8009c78:	e010      	b.n	8009c9c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10c      	bne.n	8009c9c <osThreadNew+0xca>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d108      	bne.n	8009c9c <osThreadNew+0xca>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d104      	bne.n	8009c9c <osThreadNew+0xca>
          mem = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	e001      	b.n	8009c9c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d110      	bne.n	8009cc4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009caa:	9202      	str	r2, [sp, #8]
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	6a3a      	ldr	r2, [r7, #32]
 8009cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f001 fb7f 	bl	800b3bc <xTaskCreateStatic>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	613b      	str	r3, [r7, #16]
 8009cc2:	e013      	b.n	8009cec <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d110      	bne.n	8009cec <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	f107 0310 	add.w	r3, r7, #16
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f001 fbca 	bl	800b476 <xTaskCreate>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d001      	beq.n	8009cec <osThreadNew+0x11a>
            hTask = NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009cec:	693b      	ldr	r3, [r7, #16]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3728      	adds	r7, #40	; 0x28
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cfe:	f3ef 8305 	mrs	r3, IPSR
 8009d02:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d003      	beq.n	8009d12 <osDelay+0x1c>
    stat = osErrorISR;
 8009d0a:	f06f 0305 	mvn.w	r3, #5
 8009d0e:	60fb      	str	r3, [r7, #12]
 8009d10:	e007      	b.n	8009d22 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f001 fd05 	bl	800b72c <vTaskDelay>
    }
  }

  return (stat);
 8009d22:	68fb      	ldr	r3, [r7, #12]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08a      	sub	sp, #40	; 0x28
 8009d30:	af02      	add	r7, sp, #8
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d3c:	f3ef 8305 	mrs	r3, IPSR
 8009d40:	613b      	str	r3, [r7, #16]
  return(result);
 8009d42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d175      	bne.n	8009e34 <osSemaphoreNew+0x108>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d072      	beq.n	8009e34 <osSemaphoreNew+0x108>
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d86e      	bhi.n	8009e34 <osSemaphoreNew+0x108>
    mem = -1;
 8009d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d015      	beq.n	8009d8e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d006      	beq.n	8009d78 <osSemaphoreNew+0x4c>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	2b4f      	cmp	r3, #79	; 0x4f
 8009d70:	d902      	bls.n	8009d78 <osSemaphoreNew+0x4c>
        mem = 1;
 8009d72:	2301      	movs	r3, #1
 8009d74:	61bb      	str	r3, [r7, #24]
 8009d76:	e00c      	b.n	8009d92 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d108      	bne.n	8009d92 <osSemaphoreNew+0x66>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d104      	bne.n	8009d92 <osSemaphoreNew+0x66>
          mem = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	61bb      	str	r3, [r7, #24]
 8009d8c:	e001      	b.n	8009d92 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d98:	d04c      	beq.n	8009e34 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d128      	bne.n	8009df2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d10a      	bne.n	8009dbc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	2203      	movs	r2, #3
 8009dac:	9200      	str	r2, [sp, #0]
 8009dae:	2200      	movs	r2, #0
 8009db0:	2100      	movs	r1, #0
 8009db2:	2001      	movs	r0, #1
 8009db4:	f000 fb5c 	bl	800a470 <xQueueGenericCreateStatic>
 8009db8:	61f8      	str	r0, [r7, #28]
 8009dba:	e005      	b.n	8009dc8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009dbc:	2203      	movs	r2, #3
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	2001      	movs	r0, #1
 8009dc2:	f000 fbcd 	bl	800a560 <xQueueGenericCreate>
 8009dc6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d022      	beq.n	8009e14 <osSemaphoreNew+0xe8>
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01f      	beq.n	8009e14 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2100      	movs	r1, #0
 8009dda:	69f8      	ldr	r0, [r7, #28]
 8009ddc:	f000 fc88 	bl	800a6f0 <xQueueGenericSend>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d016      	beq.n	8009e14 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009de6:	69f8      	ldr	r0, [r7, #28]
 8009de8:	f001 f914 	bl	800b014 <vQueueDelete>
            hSemaphore = NULL;
 8009dec:	2300      	movs	r3, #0
 8009dee:	61fb      	str	r3, [r7, #28]
 8009df0:	e010      	b.n	8009e14 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d108      	bne.n	8009e0a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	68b9      	ldr	r1, [r7, #8]
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f000 fc0a 	bl	800a61a <xQueueCreateCountingSemaphoreStatic>
 8009e06:	61f8      	str	r0, [r7, #28]
 8009e08:	e004      	b.n	8009e14 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f000 fc3b 	bl	800a688 <xQueueCreateCountingSemaphore>
 8009e12:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00c      	beq.n	8009e34 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d003      	beq.n	8009e28 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	617b      	str	r3, [r7, #20]
 8009e26:	e001      	b.n	8009e2c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009e2c:	6979      	ldr	r1, [r7, #20]
 8009e2e:	69f8      	ldr	r0, [r7, #28]
 8009e30:	f001 fa3c 	bl	800b2ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009e34:	69fb      	ldr	r3, [r7, #28]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3720      	adds	r7, #32
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
	...

08009e40 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d103      	bne.n	8009e60 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009e58:	f06f 0303 	mvn.w	r3, #3
 8009e5c:	617b      	str	r3, [r7, #20]
 8009e5e:	e039      	b.n	8009ed4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e60:	f3ef 8305 	mrs	r3, IPSR
 8009e64:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e66:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d022      	beq.n	8009eb2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009e72:	f06f 0303 	mvn.w	r3, #3
 8009e76:	617b      	str	r3, [r7, #20]
 8009e78:	e02c      	b.n	8009ed4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009e7e:	f107 0308 	add.w	r3, r7, #8
 8009e82:	461a      	mov	r2, r3
 8009e84:	2100      	movs	r1, #0
 8009e86:	6938      	ldr	r0, [r7, #16]
 8009e88:	f001 f844 	bl	800af14 <xQueueReceiveFromISR>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d003      	beq.n	8009e9a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009e92:	f06f 0302 	mvn.w	r3, #2
 8009e96:	617b      	str	r3, [r7, #20]
 8009e98:	e01c      	b.n	8009ed4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d019      	beq.n	8009ed4 <osSemaphoreAcquire+0x94>
 8009ea0:	4b0f      	ldr	r3, [pc, #60]	; (8009ee0 <osSemaphoreAcquire+0xa0>)
 8009ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	e010      	b.n	8009ed4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6938      	ldr	r0, [r7, #16]
 8009eb6:	f000 ff21 	bl	800acfc <xQueueSemaphoreTake>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d009      	beq.n	8009ed4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009ec6:	f06f 0301 	mvn.w	r3, #1
 8009eca:	617b      	str	r3, [r7, #20]
 8009ecc:	e002      	b.n	8009ed4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009ece:	f06f 0302 	mvn.w	r3, #2
 8009ed2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009ed4:	697b      	ldr	r3, [r7, #20]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3718      	adds	r7, #24
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	e000ed04 	.word	0xe000ed04

08009ee4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d103      	bne.n	8009f02 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009efa:	f06f 0303 	mvn.w	r3, #3
 8009efe:	617b      	str	r3, [r7, #20]
 8009f00:	e02c      	b.n	8009f5c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f02:	f3ef 8305 	mrs	r3, IPSR
 8009f06:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f08:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d01a      	beq.n	8009f44 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009f12:	f107 0308 	add.w	r3, r7, #8
 8009f16:	4619      	mov	r1, r3
 8009f18:	6938      	ldr	r0, [r7, #16]
 8009f1a:	f000 fd82 	bl	800aa22 <xQueueGiveFromISR>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d003      	beq.n	8009f2c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009f24:	f06f 0302 	mvn.w	r3, #2
 8009f28:	617b      	str	r3, [r7, #20]
 8009f2a:	e017      	b.n	8009f5c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d014      	beq.n	8009f5c <osSemaphoreRelease+0x78>
 8009f32:	4b0d      	ldr	r3, [pc, #52]	; (8009f68 <osSemaphoreRelease+0x84>)
 8009f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	e00b      	b.n	8009f5c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009f44:	2300      	movs	r3, #0
 8009f46:	2200      	movs	r2, #0
 8009f48:	2100      	movs	r1, #0
 8009f4a:	6938      	ldr	r0, [r7, #16]
 8009f4c:	f000 fbd0 	bl	800a6f0 <xQueueGenericSend>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d002      	beq.n	8009f5c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009f56:	f06f 0302 	mvn.w	r3, #2
 8009f5a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009f5c:	697b      	ldr	r3, [r7, #20]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	e000ed04 	.word	0xe000ed04

08009f6c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b08a      	sub	sp, #40	; 0x28
 8009f70:	af02      	add	r7, sp, #8
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f7c:	f3ef 8305 	mrs	r3, IPSR
 8009f80:	613b      	str	r3, [r7, #16]
  return(result);
 8009f82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d15f      	bne.n	800a048 <osMessageQueueNew+0xdc>
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d05c      	beq.n	800a048 <osMessageQueueNew+0xdc>
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d059      	beq.n	800a048 <osMessageQueueNew+0xdc>
    mem = -1;
 8009f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d029      	beq.n	8009ff4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d012      	beq.n	8009fce <osMessageQueueNew+0x62>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	2b4f      	cmp	r3, #79	; 0x4f
 8009fae:	d90e      	bls.n	8009fce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00a      	beq.n	8009fce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	695a      	ldr	r2, [r3, #20]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	68b9      	ldr	r1, [r7, #8]
 8009fc0:	fb01 f303 	mul.w	r3, r1, r3
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d302      	bcc.n	8009fce <osMessageQueueNew+0x62>
        mem = 1;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	61bb      	str	r3, [r7, #24]
 8009fcc:	e014      	b.n	8009ff8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d110      	bne.n	8009ff8 <osMessageQueueNew+0x8c>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10c      	bne.n	8009ff8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d108      	bne.n	8009ff8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d104      	bne.n	8009ff8 <osMessageQueueNew+0x8c>
          mem = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	61bb      	str	r3, [r7, #24]
 8009ff2:	e001      	b.n	8009ff8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d10b      	bne.n	800a016 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	691a      	ldr	r2, [r3, #16]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	2100      	movs	r1, #0
 800a008:	9100      	str	r1, [sp, #0]
 800a00a:	68b9      	ldr	r1, [r7, #8]
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 fa2f 	bl	800a470 <xQueueGenericCreateStatic>
 800a012:	61f8      	str	r0, [r7, #28]
 800a014:	e008      	b.n	800a028 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d105      	bne.n	800a028 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a01c:	2200      	movs	r2, #0
 800a01e:	68b9      	ldr	r1, [r7, #8]
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 fa9d 	bl	800a560 <xQueueGenericCreate>
 800a026:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00c      	beq.n	800a048 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d003      	beq.n	800a03c <osMessageQueueNew+0xd0>
        name = attr->name;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	617b      	str	r3, [r7, #20]
 800a03a:	e001      	b.n	800a040 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a03c:	2300      	movs	r3, #0
 800a03e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a040:	6979      	ldr	r1, [r7, #20]
 800a042:	69f8      	ldr	r0, [r7, #28]
 800a044:	f001 f932 	bl	800b2ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a048:	69fb      	ldr	r3, [r7, #28]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3720      	adds	r7, #32
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
	...

0800a054 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a054:	b580      	push	{r7, lr}
 800a056:	b088      	sub	sp, #32
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	603b      	str	r3, [r7, #0]
 800a060:	4613      	mov	r3, r2
 800a062:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a068:	2300      	movs	r3, #0
 800a06a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a06c:	f3ef 8305 	mrs	r3, IPSR
 800a070:	617b      	str	r3, [r7, #20]
  return(result);
 800a072:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a074:	2b00      	cmp	r3, #0
 800a076:	d028      	beq.n	800a0ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d005      	beq.n	800a08a <osMessageQueuePut+0x36>
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <osMessageQueuePut+0x36>
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a08a:	f06f 0303 	mvn.w	r3, #3
 800a08e:	61fb      	str	r3, [r7, #28]
 800a090:	e038      	b.n	800a104 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a092:	2300      	movs	r3, #0
 800a094:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a096:	f107 0210 	add.w	r2, r7, #16
 800a09a:	2300      	movs	r3, #0
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	69b8      	ldr	r0, [r7, #24]
 800a0a0:	f000 fc24 	bl	800a8ec <xQueueGenericSendFromISR>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d003      	beq.n	800a0b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a0aa:	f06f 0302 	mvn.w	r3, #2
 800a0ae:	61fb      	str	r3, [r7, #28]
 800a0b0:	e028      	b.n	800a104 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d025      	beq.n	800a104 <osMessageQueuePut+0xb0>
 800a0b8:	4b15      	ldr	r3, [pc, #84]	; (800a110 <osMessageQueuePut+0xbc>)
 800a0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	e01c      	b.n	800a104 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <osMessageQueuePut+0x82>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d103      	bne.n	800a0de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a0d6:	f06f 0303 	mvn.w	r3, #3
 800a0da:	61fb      	str	r3, [r7, #28]
 800a0dc:	e012      	b.n	800a104 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a0de:	2300      	movs	r3, #0
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	68b9      	ldr	r1, [r7, #8]
 800a0e4:	69b8      	ldr	r0, [r7, #24]
 800a0e6:	f000 fb03 	bl	800a6f0 <xQueueGenericSend>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d009      	beq.n	800a104 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a0f6:	f06f 0301 	mvn.w	r3, #1
 800a0fa:	61fb      	str	r3, [r7, #28]
 800a0fc:	e002      	b.n	800a104 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a0fe:	f06f 0302 	mvn.w	r3, #2
 800a102:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a104:	69fb      	ldr	r3, [r7, #28]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	e000ed04 	.word	0xe000ed04

0800a114 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a126:	2300      	movs	r3, #0
 800a128:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a12a:	f3ef 8305 	mrs	r3, IPSR
 800a12e:	617b      	str	r3, [r7, #20]
  return(result);
 800a130:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a132:	2b00      	cmp	r3, #0
 800a134:	d028      	beq.n	800a188 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d005      	beq.n	800a148 <osMessageQueueGet+0x34>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <osMessageQueueGet+0x34>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d003      	beq.n	800a150 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a148:	f06f 0303 	mvn.w	r3, #3
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	e037      	b.n	800a1c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a150:	2300      	movs	r3, #0
 800a152:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a154:	f107 0310 	add.w	r3, r7, #16
 800a158:	461a      	mov	r2, r3
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	69b8      	ldr	r0, [r7, #24]
 800a15e:	f000 fed9 	bl	800af14 <xQueueReceiveFromISR>
 800a162:	4603      	mov	r3, r0
 800a164:	2b01      	cmp	r3, #1
 800a166:	d003      	beq.n	800a170 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a168:	f06f 0302 	mvn.w	r3, #2
 800a16c:	61fb      	str	r3, [r7, #28]
 800a16e:	e027      	b.n	800a1c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d024      	beq.n	800a1c0 <osMessageQueueGet+0xac>
 800a176:	4b15      	ldr	r3, [pc, #84]	; (800a1cc <osMessageQueueGet+0xb8>)
 800a178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	e01b      	b.n	800a1c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <osMessageQueueGet+0x80>
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d103      	bne.n	800a19c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a194:	f06f 0303 	mvn.w	r3, #3
 800a198:	61fb      	str	r3, [r7, #28]
 800a19a:	e011      	b.n	800a1c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	69b8      	ldr	r0, [r7, #24]
 800a1a2:	f000 fccb 	bl	800ab3c <xQueueReceive>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d009      	beq.n	800a1c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a1b2:	f06f 0301 	mvn.w	r3, #1
 800a1b6:	61fb      	str	r3, [r7, #28]
 800a1b8:	e002      	b.n	800a1c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a1ba:	f06f 0302 	mvn.w	r3, #2
 800a1be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a1c0:	69fb      	ldr	r3, [r7, #28]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3720      	adds	r7, #32
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	e000ed04 	.word	0xe000ed04

0800a1d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4a07      	ldr	r2, [pc, #28]	; (800a1fc <vApplicationGetIdleTaskMemory+0x2c>)
 800a1e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	4a06      	ldr	r2, [pc, #24]	; (800a200 <vApplicationGetIdleTaskMemory+0x30>)
 800a1e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2280      	movs	r2, #128	; 0x80
 800a1ec:	601a      	str	r2, [r3, #0]
}
 800a1ee:	bf00      	nop
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	20000404 	.word	0x20000404
 800a200:	200004c0 	.word	0x200004c0

0800a204 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4a07      	ldr	r2, [pc, #28]	; (800a230 <vApplicationGetTimerTaskMemory+0x2c>)
 800a214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	4a06      	ldr	r2, [pc, #24]	; (800a234 <vApplicationGetTimerTaskMemory+0x30>)
 800a21a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a222:	601a      	str	r2, [r3, #0]
}
 800a224:	bf00      	nop
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	200006c0 	.word	0x200006c0
 800a234:	2000077c 	.word	0x2000077c

0800a238 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f103 0208 	add.w	r2, r3, #8
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a250:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f103 0208 	add.w	r2, r3, #8
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f103 0208 	add.w	r2, r3, #8
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a286:	bf00      	nop
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a292:	b480      	push	{r7}
 800a294:	b085      	sub	sp, #20
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	601a      	str	r2, [r3, #0]
}
 800a2ce:	bf00      	nop
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b085      	sub	sp, #20
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2f0:	d103      	bne.n	800a2fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	e00c      	b.n	800a314 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	e002      	b.n	800a308 <vListInsert+0x2e>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	429a      	cmp	r2, r3
 800a312:	d2f6      	bcs.n	800a302 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	1c5a      	adds	r2, r3, #1
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	601a      	str	r2, [r3, #0]
}
 800a340:	bf00      	nop
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	6892      	ldr	r2, [r2, #8]
 800a362:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	6852      	ldr	r2, [r2, #4]
 800a36c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	429a      	cmp	r2, r3
 800a376:	d103      	bne.n	800a380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689a      	ldr	r2, [r3, #8]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	1e5a      	subs	r2, r3, #1
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10a      	bne.n	800a3ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a3c6:	bf00      	nop
 800a3c8:	e7fe      	b.n	800a3c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a3ca:	f002 fcab 	bl	800cd24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d6:	68f9      	ldr	r1, [r7, #12]
 800a3d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3da:	fb01 f303 	mul.w	r3, r1, r3
 800a3de:	441a      	add	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	68f9      	ldr	r1, [r7, #12]
 800a3fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a400:	fb01 f303 	mul.w	r3, r1, r3
 800a404:	441a      	add	r2, r3
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	22ff      	movs	r2, #255	; 0xff
 800a40e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	22ff      	movs	r2, #255	; 0xff
 800a416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d114      	bne.n	800a44a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01a      	beq.n	800a45e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3310      	adds	r3, #16
 800a42c:	4618      	mov	r0, r3
 800a42e:	f001 fc5d 	bl	800bcec <xTaskRemoveFromEventList>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d012      	beq.n	800a45e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a438:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <xQueueGenericReset+0xcc>)
 800a43a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	e009      	b.n	800a45e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3310      	adds	r3, #16
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff fef2 	bl	800a238 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	3324      	adds	r3, #36	; 0x24
 800a458:	4618      	mov	r0, r3
 800a45a:	f7ff feed 	bl	800a238 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a45e:	f002 fc91 	bl	800cd84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a462:	2301      	movs	r3, #1
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	e000ed04 	.word	0xe000ed04

0800a470 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a470:	b580      	push	{r7, lr}
 800a472:	b08e      	sub	sp, #56	; 0x38
 800a474:	af02      	add	r7, sp, #8
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
 800a47c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10a      	bne.n	800a4b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4b2:	bf00      	nop
 800a4b4:	e7fe      	b.n	800a4b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d002      	beq.n	800a4c2 <xQueueGenericCreateStatic+0x52>
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <xQueueGenericCreateStatic+0x56>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e000      	b.n	800a4c8 <xQueueGenericCreateStatic+0x58>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10a      	bne.n	800a4e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	623b      	str	r3, [r7, #32]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <xQueueGenericCreateStatic+0x7e>
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d101      	bne.n	800a4f2 <xQueueGenericCreateStatic+0x82>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e000      	b.n	800a4f4 <xQueueGenericCreateStatic+0x84>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	f383 8811 	msr	BASEPRI, r3
 800a500:	f3bf 8f6f 	isb	sy
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	61fb      	str	r3, [r7, #28]
}
 800a50a:	bf00      	nop
 800a50c:	e7fe      	b.n	800a50c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a50e:	2350      	movs	r3, #80	; 0x50
 800a510:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	2b50      	cmp	r3, #80	; 0x50
 800a516:	d00a      	beq.n	800a52e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	61bb      	str	r3, [r7, #24]
}
 800a52a:	bf00      	nop
 800a52c:	e7fe      	b.n	800a52c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a52e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00d      	beq.n	800a556 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	2201      	movs	r2, #1
 800a53e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a542:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	4613      	mov	r3, r2
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	68b9      	ldr	r1, [r7, #8]
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 f83f 	bl	800a5d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a558:	4618      	mov	r0, r3
 800a55a:	3730      	adds	r7, #48	; 0x30
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a560:	b580      	push	{r7, lr}
 800a562:	b08a      	sub	sp, #40	; 0x28
 800a564:	af02      	add	r7, sp, #8
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	4613      	mov	r3, r2
 800a56c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10a      	bne.n	800a58a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	613b      	str	r3, [r7, #16]
}
 800a586:	bf00      	nop
 800a588:	e7fe      	b.n	800a588 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	fb02 f303 	mul.w	r3, r2, r3
 800a592:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	3350      	adds	r3, #80	; 0x50
 800a598:	4618      	mov	r0, r3
 800a59a:	f002 fce5 	bl	800cf68 <pvPortMalloc>
 800a59e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d011      	beq.n	800a5ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	3350      	adds	r3, #80	; 0x50
 800a5ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5b8:	79fa      	ldrb	r2, [r7, #7]
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	697a      	ldr	r2, [r7, #20]
 800a5c2:	68b9      	ldr	r1, [r7, #8]
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 f805 	bl	800a5d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5ca:	69bb      	ldr	r3, [r7, #24]
	}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3720      	adds	r7, #32
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
 800a5e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d103      	bne.n	800a5f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	69ba      	ldr	r2, [r7, #24]
 800a5ec:	601a      	str	r2, [r3, #0]
 800a5ee:	e002      	b.n	800a5f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a602:	2101      	movs	r1, #1
 800a604:	69b8      	ldr	r0, [r7, #24]
 800a606:	f7ff fecb 	bl	800a3a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	78fa      	ldrb	r2, [r7, #3]
 800a60e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a612:	bf00      	nop
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b08a      	sub	sp, #40	; 0x28
 800a61e:	af02      	add	r7, sp, #8
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10a      	bne.n	800a642 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	61bb      	str	r3, [r7, #24]
}
 800a63e:	bf00      	nop
 800a640:	e7fe      	b.n	800a640 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	429a      	cmp	r2, r3
 800a648:	d90a      	bls.n	800a660 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	617b      	str	r3, [r7, #20]
}
 800a65c:	bf00      	nop
 800a65e:	e7fe      	b.n	800a65e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a660:	2302      	movs	r3, #2
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	2100      	movs	r1, #0
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f7ff ff00 	bl	800a470 <xQueueGenericCreateStatic>
 800a670:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d002      	beq.n	800a67e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a67e:	69fb      	ldr	r3, [r7, #28]
	}
 800a680:	4618      	mov	r0, r3
 800a682:	3720      	adds	r7, #32
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10a      	bne.n	800a6ae <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69c:	f383 8811 	msr	BASEPRI, r3
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	613b      	str	r3, [r7, #16]
}
 800a6aa:	bf00      	nop
 800a6ac:	e7fe      	b.n	800a6ac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d90a      	bls.n	800a6cc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	60fb      	str	r3, [r7, #12]
}
 800a6c8:	bf00      	nop
 800a6ca:	e7fe      	b.n	800a6ca <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff ff45 	bl	800a560 <xQueueGenericCreate>
 800a6d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d002      	beq.n	800a6e4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a6e4:	697b      	ldr	r3, [r7, #20]
	}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08e      	sub	sp, #56	; 0x38
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a6fe:	2300      	movs	r3, #0
 800a700:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10a      	bne.n	800a722 <xQueueGenericSend+0x32>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a71e:	bf00      	nop
 800a720:	e7fe      	b.n	800a720 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d103      	bne.n	800a730 <xQueueGenericSend+0x40>
 800a728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <xQueueGenericSend+0x44>
 800a730:	2301      	movs	r3, #1
 800a732:	e000      	b.n	800a736 <xQueueGenericSend+0x46>
 800a734:	2300      	movs	r3, #0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10a      	bne.n	800a750 <xQueueGenericSend+0x60>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	2b02      	cmp	r3, #2
 800a754:	d103      	bne.n	800a75e <xQueueGenericSend+0x6e>
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d101      	bne.n	800a762 <xQueueGenericSend+0x72>
 800a75e:	2301      	movs	r3, #1
 800a760:	e000      	b.n	800a764 <xQueueGenericSend+0x74>
 800a762:	2300      	movs	r3, #0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10a      	bne.n	800a77e <xQueueGenericSend+0x8e>
	__asm volatile
 800a768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76c:	f383 8811 	msr	BASEPRI, r3
 800a770:	f3bf 8f6f 	isb	sy
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	623b      	str	r3, [r7, #32]
}
 800a77a:	bf00      	nop
 800a77c:	e7fe      	b.n	800a77c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a77e:	f001 fc77 	bl	800c070 <xTaskGetSchedulerState>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d102      	bne.n	800a78e <xQueueGenericSend+0x9e>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <xQueueGenericSend+0xa2>
 800a78e:	2301      	movs	r3, #1
 800a790:	e000      	b.n	800a794 <xQueueGenericSend+0xa4>
 800a792:	2300      	movs	r3, #0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10a      	bne.n	800a7ae <xQueueGenericSend+0xbe>
	__asm volatile
 800a798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	61fb      	str	r3, [r7, #28]
}
 800a7aa:	bf00      	nop
 800a7ac:	e7fe      	b.n	800a7ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7ae:	f002 fab9 	bl	800cd24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d302      	bcc.n	800a7c4 <xQueueGenericSend+0xd4>
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d129      	bne.n	800a818 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	68b9      	ldr	r1, [r7, #8]
 800a7c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7ca:	f000 fc5e 	bl	800b08a <prvCopyDataToQueue>
 800a7ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d010      	beq.n	800a7fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	3324      	adds	r3, #36	; 0x24
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f001 fa85 	bl	800bcec <xTaskRemoveFromEventList>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d013      	beq.n	800a810 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a7e8:	4b3f      	ldr	r3, [pc, #252]	; (800a8e8 <xQueueGenericSend+0x1f8>)
 800a7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	e00a      	b.n	800a810 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d007      	beq.n	800a810 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a800:	4b39      	ldr	r3, [pc, #228]	; (800a8e8 <xQueueGenericSend+0x1f8>)
 800a802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a806:	601a      	str	r2, [r3, #0]
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a810:	f002 fab8 	bl	800cd84 <vPortExitCritical>
				return pdPASS;
 800a814:	2301      	movs	r3, #1
 800a816:	e063      	b.n	800a8e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d103      	bne.n	800a826 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a81e:	f002 fab1 	bl	800cd84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a822:	2300      	movs	r3, #0
 800a824:	e05c      	b.n	800a8e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d106      	bne.n	800a83a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a82c:	f107 0314 	add.w	r3, r7, #20
 800a830:	4618      	mov	r0, r3
 800a832:	f001 fabf 	bl	800bdb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a836:	2301      	movs	r3, #1
 800a838:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a83a:	f002 faa3 	bl	800cd84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a83e:	f001 f819 	bl	800b874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a842:	f002 fa6f 	bl	800cd24 <vPortEnterCritical>
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a84c:	b25b      	sxtb	r3, r3
 800a84e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a852:	d103      	bne.n	800a85c <xQueueGenericSend+0x16c>
 800a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a862:	b25b      	sxtb	r3, r3
 800a864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a868:	d103      	bne.n	800a872 <xQueueGenericSend+0x182>
 800a86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a872:	f002 fa87 	bl	800cd84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a876:	1d3a      	adds	r2, r7, #4
 800a878:	f107 0314 	add.w	r3, r7, #20
 800a87c:	4611      	mov	r1, r2
 800a87e:	4618      	mov	r0, r3
 800a880:	f001 faae 	bl	800bde0 <xTaskCheckForTimeOut>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d124      	bne.n	800a8d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a88a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a88c:	f000 fcf5 	bl	800b27a <prvIsQueueFull>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d018      	beq.n	800a8c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a898:	3310      	adds	r3, #16
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f001 f9d4 	bl	800bc4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8a6:	f000 fc80 	bl	800b1aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8aa:	f000 fff1 	bl	800b890 <xTaskResumeAll>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f47f af7c 	bne.w	800a7ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <xQueueGenericSend+0x1f8>)
 800a8b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	e772      	b.n	800a7ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a8c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ca:	f000 fc6e 	bl	800b1aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8ce:	f000 ffdf 	bl	800b890 <xTaskResumeAll>
 800a8d2:	e76c      	b.n	800a7ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a8d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8d6:	f000 fc68 	bl	800b1aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8da:	f000 ffd9 	bl	800b890 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a8de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3738      	adds	r7, #56	; 0x38
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	e000ed04 	.word	0xe000ed04

0800a8ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b090      	sub	sp, #64	; 0x40
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a916:	bf00      	nop
 800a918:	e7fe      	b.n	800a918 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d103      	bne.n	800a928 <xQueueGenericSendFromISR+0x3c>
 800a920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <xQueueGenericSendFromISR+0x40>
 800a928:	2301      	movs	r3, #1
 800a92a:	e000      	b.n	800a92e <xQueueGenericSendFromISR+0x42>
 800a92c:	2300      	movs	r3, #0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10a      	bne.n	800a948 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a944:	bf00      	nop
 800a946:	e7fe      	b.n	800a946 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d103      	bne.n	800a956 <xQueueGenericSendFromISR+0x6a>
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a952:	2b01      	cmp	r3, #1
 800a954:	d101      	bne.n	800a95a <xQueueGenericSendFromISR+0x6e>
 800a956:	2301      	movs	r3, #1
 800a958:	e000      	b.n	800a95c <xQueueGenericSendFromISR+0x70>
 800a95a:	2300      	movs	r3, #0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10a      	bne.n	800a976 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	623b      	str	r3, [r7, #32]
}
 800a972:	bf00      	nop
 800a974:	e7fe      	b.n	800a974 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a976:	f002 fab7 	bl	800cee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a97a:	f3ef 8211 	mrs	r2, BASEPRI
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	61fa      	str	r2, [r7, #28]
 800a990:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a992:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a994:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d302      	bcc.n	800a9a8 <xQueueGenericSendFromISR+0xbc>
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d12f      	bne.n	800aa08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9b8:	683a      	ldr	r2, [r7, #0]
 800a9ba:	68b9      	ldr	r1, [r7, #8]
 800a9bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9be:	f000 fb64 	bl	800b08a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a9c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ca:	d112      	bne.n	800a9f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d016      	beq.n	800aa02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d6:	3324      	adds	r3, #36	; 0x24
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f001 f987 	bl	800bcec <xTaskRemoveFromEventList>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00e      	beq.n	800aa02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00b      	beq.n	800aa02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	e007      	b.n	800aa02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	b25a      	sxtb	r2, r3
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa02:	2301      	movs	r3, #1
 800aa04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aa06:	e001      	b.n	800aa0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3740      	adds	r7, #64	; 0x40
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b08e      	sub	sp, #56	; 0x38
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10a      	bne.n	800aa4c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800aa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	623b      	str	r3, [r7, #32]
}
 800aa48:	bf00      	nop
 800aa4a:	e7fe      	b.n	800aa4a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00a      	beq.n	800aa6a <xQueueGiveFromISR+0x48>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	61fb      	str	r3, [r7, #28]
}
 800aa66:	bf00      	nop
 800aa68:	e7fe      	b.n	800aa68 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d103      	bne.n	800aa7a <xQueueGiveFromISR+0x58>
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <xQueueGiveFromISR+0x5c>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <xQueueGiveFromISR+0x5e>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10a      	bne.n	800aa9a <xQueueGiveFromISR+0x78>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	61bb      	str	r3, [r7, #24]
}
 800aa96:	bf00      	nop
 800aa98:	e7fe      	b.n	800aa98 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa9a:	f002 fa25 	bl	800cee8 <vPortValidateInterruptPriority>
	__asm volatile
 800aa9e:	f3ef 8211 	mrs	r2, BASEPRI
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	617a      	str	r2, [r7, #20]
 800aab4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800aab6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d22b      	bcs.n	800ab22 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	1c5a      	adds	r2, r3, #1
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aadc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aae4:	d112      	bne.n	800ab0c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d016      	beq.n	800ab1c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	3324      	adds	r3, #36	; 0x24
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f001 f8fa 	bl	800bcec <xTaskRemoveFromEventList>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00e      	beq.n	800ab1c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00b      	beq.n	800ab1c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2201      	movs	r2, #1
 800ab08:	601a      	str	r2, [r3, #0]
 800ab0a:	e007      	b.n	800ab1c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab10:	3301      	adds	r3, #1
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	b25a      	sxtb	r2, r3
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ab20:	e001      	b.n	800ab26 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab22:	2300      	movs	r3, #0
 800ab24:	637b      	str	r3, [r7, #52]	; 0x34
 800ab26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab28:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f383 8811 	msr	BASEPRI, r3
}
 800ab30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3738      	adds	r7, #56	; 0x38
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08c      	sub	sp, #48	; 0x30
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10a      	bne.n	800ab6c <xQueueReceive+0x30>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	623b      	str	r3, [r7, #32]
}
 800ab68:	bf00      	nop
 800ab6a:	e7fe      	b.n	800ab6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d103      	bne.n	800ab7a <xQueueReceive+0x3e>
 800ab72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <xQueueReceive+0x42>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e000      	b.n	800ab80 <xQueueReceive+0x44>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10a      	bne.n	800ab9a <xQueueReceive+0x5e>
	__asm volatile
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	61fb      	str	r3, [r7, #28]
}
 800ab96:	bf00      	nop
 800ab98:	e7fe      	b.n	800ab98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab9a:	f001 fa69 	bl	800c070 <xTaskGetSchedulerState>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <xQueueReceive+0x6e>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <xQueueReceive+0x72>
 800abaa:	2301      	movs	r3, #1
 800abac:	e000      	b.n	800abb0 <xQueueReceive+0x74>
 800abae:	2300      	movs	r3, #0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10a      	bne.n	800abca <xQueueReceive+0x8e>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	61bb      	str	r3, [r7, #24]
}
 800abc6:	bf00      	nop
 800abc8:	e7fe      	b.n	800abc8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abca:	f002 f8ab 	bl	800cd24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d01f      	beq.n	800ac1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abda:	68b9      	ldr	r1, [r7, #8]
 800abdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abde:	f000 fabe 	bl	800b15e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe4:	1e5a      	subs	r2, r3, #1
 800abe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00f      	beq.n	800ac12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf4:	3310      	adds	r3, #16
 800abf6:	4618      	mov	r0, r3
 800abf8:	f001 f878 	bl	800bcec <xTaskRemoveFromEventList>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d007      	beq.n	800ac12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac02:	4b3d      	ldr	r3, [pc, #244]	; (800acf8 <xQueueReceive+0x1bc>)
 800ac04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac08:	601a      	str	r2, [r3, #0]
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac12:	f002 f8b7 	bl	800cd84 <vPortExitCritical>
				return pdPASS;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e069      	b.n	800acee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d103      	bne.n	800ac28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac20:	f002 f8b0 	bl	800cd84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac24:	2300      	movs	r3, #0
 800ac26:	e062      	b.n	800acee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d106      	bne.n	800ac3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac2e:	f107 0310 	add.w	r3, r7, #16
 800ac32:	4618      	mov	r0, r3
 800ac34:	f001 f8be 	bl	800bdb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac3c:	f002 f8a2 	bl	800cd84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac40:	f000 fe18 	bl	800b874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac44:	f002 f86e 	bl	800cd24 <vPortEnterCritical>
 800ac48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac4e:	b25b      	sxtb	r3, r3
 800ac50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac54:	d103      	bne.n	800ac5e <xQueueReceive+0x122>
 800ac56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac64:	b25b      	sxtb	r3, r3
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac6a:	d103      	bne.n	800ac74 <xQueueReceive+0x138>
 800ac6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac74:	f002 f886 	bl	800cd84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac78:	1d3a      	adds	r2, r7, #4
 800ac7a:	f107 0310 	add.w	r3, r7, #16
 800ac7e:	4611      	mov	r1, r2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f001 f8ad 	bl	800bde0 <xTaskCheckForTimeOut>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d123      	bne.n	800acd4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac8e:	f000 fade 	bl	800b24e <prvIsQueueEmpty>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d017      	beq.n	800acc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	3324      	adds	r3, #36	; 0x24
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	4611      	mov	r1, r2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 ffd3 	bl	800bc4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aca8:	f000 fa7f 	bl	800b1aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acac:	f000 fdf0 	bl	800b890 <xTaskResumeAll>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d189      	bne.n	800abca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800acb6:	4b10      	ldr	r3, [pc, #64]	; (800acf8 <xQueueReceive+0x1bc>)
 800acb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	e780      	b.n	800abca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800acc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acca:	f000 fa6e 	bl	800b1aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acce:	f000 fddf 	bl	800b890 <xTaskResumeAll>
 800acd2:	e77a      	b.n	800abca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800acd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acd6:	f000 fa68 	bl	800b1aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acda:	f000 fdd9 	bl	800b890 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ace0:	f000 fab5 	bl	800b24e <prvIsQueueEmpty>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f43f af6f 	beq.w	800abca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800acec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3730      	adds	r7, #48	; 0x30
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	e000ed04 	.word	0xe000ed04

0800acfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08e      	sub	sp, #56	; 0x38
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad06:	2300      	movs	r3, #0
 800ad08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10a      	bne.n	800ad2e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	623b      	str	r3, [r7, #32]
}
 800ad2a:	bf00      	nop
 800ad2c:	e7fe      	b.n	800ad2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00a      	beq.n	800ad4c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	61fb      	str	r3, [r7, #28]
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad4c:	f001 f990 	bl	800c070 <xTaskGetSchedulerState>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <xQueueSemaphoreTake+0x60>
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <xQueueSemaphoreTake+0x64>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e000      	b.n	800ad62 <xQueueSemaphoreTake+0x66>
 800ad60:	2300      	movs	r3, #0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10a      	bne.n	800ad7c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	61bb      	str	r3, [r7, #24]
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad7c:	f001 ffd2 	bl	800cd24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ad80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad84:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d024      	beq.n	800add6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	1e5a      	subs	r2, r3, #1
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d104      	bne.n	800ada6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ad9c:	f001 fade 	bl	800c35c <pvTaskIncrementMutexHeldCount>
 800ada0:	4602      	mov	r2, r0
 800ada2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00f      	beq.n	800adce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb0:	3310      	adds	r3, #16
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 ff9a 	bl	800bcec <xTaskRemoveFromEventList>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d007      	beq.n	800adce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800adbe:	4b54      	ldr	r3, [pc, #336]	; (800af10 <xQueueSemaphoreTake+0x214>)
 800adc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adce:	f001 ffd9 	bl	800cd84 <vPortExitCritical>
				return pdPASS;
 800add2:	2301      	movs	r3, #1
 800add4:	e097      	b.n	800af06 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d111      	bne.n	800ae00 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00a      	beq.n	800adf8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	617b      	str	r3, [r7, #20]
}
 800adf4:	bf00      	nop
 800adf6:	e7fe      	b.n	800adf6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800adf8:	f001 ffc4 	bl	800cd84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adfc:	2300      	movs	r3, #0
 800adfe:	e082      	b.n	800af06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d106      	bne.n	800ae14 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae06:	f107 030c 	add.w	r3, r7, #12
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 ffd2 	bl	800bdb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae10:	2301      	movs	r3, #1
 800ae12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae14:	f001 ffb6 	bl	800cd84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae18:	f000 fd2c 	bl	800b874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae1c:	f001 ff82 	bl	800cd24 <vPortEnterCritical>
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae26:	b25b      	sxtb	r3, r3
 800ae28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae2c:	d103      	bne.n	800ae36 <xQueueSemaphoreTake+0x13a>
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae3c:	b25b      	sxtb	r3, r3
 800ae3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae42:	d103      	bne.n	800ae4c <xQueueSemaphoreTake+0x150>
 800ae44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae4c:	f001 ff9a 	bl	800cd84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae50:	463a      	mov	r2, r7
 800ae52:	f107 030c 	add.w	r3, r7, #12
 800ae56:	4611      	mov	r1, r2
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 ffc1 	bl	800bde0 <xTaskCheckForTimeOut>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d132      	bne.n	800aeca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae66:	f000 f9f2 	bl	800b24e <prvIsQueueEmpty>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d026      	beq.n	800aebe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d109      	bne.n	800ae8c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ae78:	f001 ff54 	bl	800cd24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f001 f913 	bl	800c0ac <xTaskPriorityInherit>
 800ae86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ae88:	f001 ff7c 	bl	800cd84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8e:	3324      	adds	r3, #36	; 0x24
 800ae90:	683a      	ldr	r2, [r7, #0]
 800ae92:	4611      	mov	r1, r2
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 fed9 	bl	800bc4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae9c:	f000 f985 	bl	800b1aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aea0:	f000 fcf6 	bl	800b890 <xTaskResumeAll>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f47f af68 	bne.w	800ad7c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aeac:	4b18      	ldr	r3, [pc, #96]	; (800af10 <xQueueSemaphoreTake+0x214>)
 800aeae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	e75e      	b.n	800ad7c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aec0:	f000 f973 	bl	800b1aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aec4:	f000 fce4 	bl	800b890 <xTaskResumeAll>
 800aec8:	e758      	b.n	800ad7c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aeca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aecc:	f000 f96d 	bl	800b1aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aed0:	f000 fcde 	bl	800b890 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aed6:	f000 f9ba 	bl	800b24e <prvIsQueueEmpty>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f43f af4d 	beq.w	800ad7c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00d      	beq.n	800af04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aee8:	f001 ff1c 	bl	800cd24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aeec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aeee:	f000 f8b4 	bl	800b05a <prvGetDisinheritPriorityAfterTimeout>
 800aef2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aefa:	4618      	mov	r0, r3
 800aefc:	f001 f9ac 	bl	800c258 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af00:	f001 ff40 	bl	800cd84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af06:	4618      	mov	r0, r3
 800af08:	3738      	adds	r7, #56	; 0x38
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	e000ed04 	.word	0xe000ed04

0800af14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b08e      	sub	sp, #56	; 0x38
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10a      	bne.n	800af40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	623b      	str	r3, [r7, #32]
}
 800af3c:	bf00      	nop
 800af3e:	e7fe      	b.n	800af3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d103      	bne.n	800af4e <xQueueReceiveFromISR+0x3a>
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d101      	bne.n	800af52 <xQueueReceiveFromISR+0x3e>
 800af4e:	2301      	movs	r3, #1
 800af50:	e000      	b.n	800af54 <xQueueReceiveFromISR+0x40>
 800af52:	2300      	movs	r3, #0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10a      	bne.n	800af6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	61fb      	str	r3, [r7, #28]
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af6e:	f001 ffbb 	bl	800cee8 <vPortValidateInterruptPriority>
	__asm volatile
 800af72:	f3ef 8211 	mrs	r2, BASEPRI
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	61ba      	str	r2, [r7, #24]
 800af88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800af8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af96:	2b00      	cmp	r3, #0
 800af98:	d02f      	beq.n	800affa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afa4:	68b9      	ldr	r1, [r7, #8]
 800afa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afa8:	f000 f8d9 	bl	800b15e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800afac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afae:	1e5a      	subs	r2, r3, #1
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800afb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afbc:	d112      	bne.n	800afe4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d016      	beq.n	800aff4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	3310      	adds	r3, #16
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 fe8e 	bl	800bcec <xTaskRemoveFromEventList>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00e      	beq.n	800aff4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00b      	beq.n	800aff4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	601a      	str	r2, [r3, #0]
 800afe2:	e007      	b.n	800aff4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800afe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afe8:	3301      	adds	r3, #1
 800afea:	b2db      	uxtb	r3, r3
 800afec:	b25a      	sxtb	r2, r3
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aff4:	2301      	movs	r3, #1
 800aff6:	637b      	str	r3, [r7, #52]	; 0x34
 800aff8:	e001      	b.n	800affe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800affa:	2300      	movs	r3, #0
 800affc:	637b      	str	r3, [r7, #52]	; 0x34
 800affe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b000:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f383 8811 	msr	BASEPRI, r3
}
 800b008:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3738      	adds	r7, #56	; 0x38
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d10a      	bne.n	800b03c <vQueueDelete+0x28>
	__asm volatile
 800b026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	60bb      	str	r3, [r7, #8]
}
 800b038:	bf00      	nop
 800b03a:	e7fe      	b.n	800b03a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 f95f 	bl	800b300 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f002 f857 	bl	800d100 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b052:	bf00      	nop
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b05a:	b480      	push	{r7}
 800b05c:	b085      	sub	sp, #20
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b066:	2b00      	cmp	r3, #0
 800b068:	d006      	beq.n	800b078 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b074:	60fb      	str	r3, [r7, #12]
 800b076:	e001      	b.n	800b07c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b078:	2300      	movs	r3, #0
 800b07a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b07c:	68fb      	ldr	r3, [r7, #12]
	}
 800b07e:	4618      	mov	r0, r3
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b086      	sub	sp, #24
 800b08e:	af00      	add	r7, sp, #0
 800b090:	60f8      	str	r0, [r7, #12]
 800b092:	60b9      	str	r1, [r7, #8]
 800b094:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b096:	2300      	movs	r3, #0
 800b098:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10d      	bne.n	800b0c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d14d      	bne.n	800b14c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f001 f861 	bl	800c17c <xTaskPriorityDisinherit>
 800b0ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	609a      	str	r2, [r3, #8]
 800b0c2:	e043      	b.n	800b14c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d119      	bne.n	800b0fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6858      	ldr	r0, [r3, #4]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	f002 f957 	bl	800d388 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	685a      	ldr	r2, [r3, #4]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	441a      	add	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	685a      	ldr	r2, [r3, #4]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d32b      	bcc.n	800b14c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	605a      	str	r2, [r3, #4]
 800b0fc:	e026      	b.n	800b14c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	68d8      	ldr	r0, [r3, #12]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	461a      	mov	r2, r3
 800b108:	68b9      	ldr	r1, [r7, #8]
 800b10a:	f002 f93d 	bl	800d388 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	68da      	ldr	r2, [r3, #12]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b116:	425b      	negs	r3, r3
 800b118:	441a      	add	r2, r3
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	68da      	ldr	r2, [r3, #12]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	429a      	cmp	r2, r3
 800b128:	d207      	bcs.n	800b13a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	689a      	ldr	r2, [r3, #8]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b132:	425b      	negs	r3, r3
 800b134:	441a      	add	r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d105      	bne.n	800b14c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d002      	beq.n	800b14c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	3b01      	subs	r3, #1
 800b14a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b154:	697b      	ldr	r3, [r7, #20]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3718      	adds	r7, #24
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b082      	sub	sp, #8
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d018      	beq.n	800b1a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68da      	ldr	r2, [r3, #12]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b178:	441a      	add	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68da      	ldr	r2, [r3, #12]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	429a      	cmp	r2, r3
 800b188:	d303      	bcc.n	800b192 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68d9      	ldr	r1, [r3, #12]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19a:	461a      	mov	r2, r3
 800b19c:	6838      	ldr	r0, [r7, #0]
 800b19e:	f002 f8f3 	bl	800d388 <memcpy>
	}
}
 800b1a2:	bf00      	nop
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b1b2:	f001 fdb7 	bl	800cd24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1be:	e011      	b.n	800b1e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d012      	beq.n	800b1ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3324      	adds	r3, #36	; 0x24
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 fd8d 	bl	800bcec <xTaskRemoveFromEventList>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b1d8:	f000 fe64 	bl	800bea4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b1dc:	7bfb      	ldrb	r3, [r7, #15]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	dce9      	bgt.n	800b1c0 <prvUnlockQueue+0x16>
 800b1ec:	e000      	b.n	800b1f0 <prvUnlockQueue+0x46>
					break;
 800b1ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	22ff      	movs	r2, #255	; 0xff
 800b1f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b1f8:	f001 fdc4 	bl	800cd84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b1fc:	f001 fd92 	bl	800cd24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b206:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b208:	e011      	b.n	800b22e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d012      	beq.n	800b238 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	3310      	adds	r3, #16
 800b216:	4618      	mov	r0, r3
 800b218:	f000 fd68 	bl	800bcec <xTaskRemoveFromEventList>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b222:	f000 fe3f 	bl	800bea4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b226:	7bbb      	ldrb	r3, [r7, #14]
 800b228:	3b01      	subs	r3, #1
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b22e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b232:	2b00      	cmp	r3, #0
 800b234:	dce9      	bgt.n	800b20a <prvUnlockQueue+0x60>
 800b236:	e000      	b.n	800b23a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b238:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	22ff      	movs	r2, #255	; 0xff
 800b23e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b242:	f001 fd9f 	bl	800cd84 <vPortExitCritical>
}
 800b246:	bf00      	nop
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b084      	sub	sp, #16
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b256:	f001 fd65 	bl	800cd24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d102      	bne.n	800b268 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b262:	2301      	movs	r3, #1
 800b264:	60fb      	str	r3, [r7, #12]
 800b266:	e001      	b.n	800b26c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b268:	2300      	movs	r3, #0
 800b26a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b26c:	f001 fd8a 	bl	800cd84 <vPortExitCritical>

	return xReturn;
 800b270:	68fb      	ldr	r3, [r7, #12]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b282:	f001 fd4f 	bl	800cd24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b28e:	429a      	cmp	r2, r3
 800b290:	d102      	bne.n	800b298 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b292:	2301      	movs	r3, #1
 800b294:	60fb      	str	r3, [r7, #12]
 800b296:	e001      	b.n	800b29c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b298:	2300      	movs	r3, #0
 800b29a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b29c:	f001 fd72 	bl	800cd84 <vPortExitCritical>

	return xReturn;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
	...

0800b2ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60fb      	str	r3, [r7, #12]
 800b2ba:	e014      	b.n	800b2e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b2bc:	4a0f      	ldr	r2, [pc, #60]	; (800b2fc <vQueueAddToRegistry+0x50>)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10b      	bne.n	800b2e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b2c8:	490c      	ldr	r1, [pc, #48]	; (800b2fc <vQueueAddToRegistry+0x50>)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	683a      	ldr	r2, [r7, #0]
 800b2ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b2d2:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <vQueueAddToRegistry+0x50>)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	00db      	lsls	r3, r3, #3
 800b2d8:	4413      	add	r3, r2
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b2de:	e006      	b.n	800b2ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	60fb      	str	r3, [r7, #12]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2b07      	cmp	r3, #7
 800b2ea:	d9e7      	bls.n	800b2bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b2ec:	bf00      	nop
 800b2ee:	bf00      	nop
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	20000b7c 	.word	0x20000b7c

0800b300 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b308:	2300      	movs	r3, #0
 800b30a:	60fb      	str	r3, [r7, #12]
 800b30c:	e016      	b.n	800b33c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b30e:	4a10      	ldr	r2, [pc, #64]	; (800b350 <vQueueUnregisterQueue+0x50>)
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	00db      	lsls	r3, r3, #3
 800b314:	4413      	add	r3, r2
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d10b      	bne.n	800b336 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b31e:	4a0c      	ldr	r2, [pc, #48]	; (800b350 <vQueueUnregisterQueue+0x50>)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2100      	movs	r1, #0
 800b324:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b328:	4a09      	ldr	r2, [pc, #36]	; (800b350 <vQueueUnregisterQueue+0x50>)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	00db      	lsls	r3, r3, #3
 800b32e:	4413      	add	r3, r2
 800b330:	2200      	movs	r2, #0
 800b332:	605a      	str	r2, [r3, #4]
				break;
 800b334:	e006      	b.n	800b344 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	3301      	adds	r3, #1
 800b33a:	60fb      	str	r3, [r7, #12]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2b07      	cmp	r3, #7
 800b340:	d9e5      	bls.n	800b30e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b342:	bf00      	nop
 800b344:	bf00      	nop
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr
 800b350:	20000b7c 	.word	0x20000b7c

0800b354 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b364:	f001 fcde 	bl	800cd24 <vPortEnterCritical>
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b36e:	b25b      	sxtb	r3, r3
 800b370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b374:	d103      	bne.n	800b37e <vQueueWaitForMessageRestricted+0x2a>
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b384:	b25b      	sxtb	r3, r3
 800b386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b38a:	d103      	bne.n	800b394 <vQueueWaitForMessageRestricted+0x40>
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2200      	movs	r2, #0
 800b390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b394:	f001 fcf6 	bl	800cd84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d106      	bne.n	800b3ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	3324      	adds	r3, #36	; 0x24
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 fc73 	bl	800bc94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b3ae:	6978      	ldr	r0, [r7, #20]
 800b3b0:	f7ff fefb 	bl	800b1aa <prvUnlockQueue>
	}
 800b3b4:	bf00      	nop
 800b3b6:	3718      	adds	r7, #24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08e      	sub	sp, #56	; 0x38
 800b3c0:	af04      	add	r7, sp, #16
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10a      	bne.n	800b3e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	623b      	str	r3, [r7, #32]
}
 800b3e2:	bf00      	nop
 800b3e4:	e7fe      	b.n	800b3e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10a      	bne.n	800b402 <xTaskCreateStatic+0x46>
	__asm volatile
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	61fb      	str	r3, [r7, #28]
}
 800b3fe:	bf00      	nop
 800b400:	e7fe      	b.n	800b400 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b402:	23bc      	movs	r3, #188	; 0xbc
 800b404:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	2bbc      	cmp	r3, #188	; 0xbc
 800b40a:	d00a      	beq.n	800b422 <xTaskCreateStatic+0x66>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b410:	f383 8811 	msr	BASEPRI, r3
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	61bb      	str	r3, [r7, #24]
}
 800b41e:	bf00      	nop
 800b420:	e7fe      	b.n	800b420 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b422:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b426:	2b00      	cmp	r3, #0
 800b428:	d01e      	beq.n	800b468 <xTaskCreateStatic+0xac>
 800b42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01b      	beq.n	800b468 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b432:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b438:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	2202      	movs	r2, #2
 800b43e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b442:	2300      	movs	r3, #0
 800b444:	9303      	str	r3, [sp, #12]
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	9302      	str	r3, [sp, #8]
 800b44a:	f107 0314 	add.w	r3, r7, #20
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	68b9      	ldr	r1, [r7, #8]
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f000 f850 	bl	800b500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b462:	f000 f8f3 	bl	800b64c <prvAddNewTaskToReadyList>
 800b466:	e001      	b.n	800b46c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b468:	2300      	movs	r3, #0
 800b46a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b46c:	697b      	ldr	r3, [r7, #20]
	}
 800b46e:	4618      	mov	r0, r3
 800b470:	3728      	adds	r7, #40	; 0x28
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b476:	b580      	push	{r7, lr}
 800b478:	b08c      	sub	sp, #48	; 0x30
 800b47a:	af04      	add	r7, sp, #16
 800b47c:	60f8      	str	r0, [r7, #12]
 800b47e:	60b9      	str	r1, [r7, #8]
 800b480:	603b      	str	r3, [r7, #0]
 800b482:	4613      	mov	r3, r2
 800b484:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b486:	88fb      	ldrh	r3, [r7, #6]
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4618      	mov	r0, r3
 800b48c:	f001 fd6c 	bl	800cf68 <pvPortMalloc>
 800b490:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00e      	beq.n	800b4b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b498:	20bc      	movs	r0, #188	; 0xbc
 800b49a:	f001 fd65 	bl	800cf68 <pvPortMalloc>
 800b49e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d003      	beq.n	800b4ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	697a      	ldr	r2, [r7, #20]
 800b4aa:	631a      	str	r2, [r3, #48]	; 0x30
 800b4ac:	e005      	b.n	800b4ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4ae:	6978      	ldr	r0, [r7, #20]
 800b4b0:	f001 fe26 	bl	800d100 <vPortFree>
 800b4b4:	e001      	b.n	800b4ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d017      	beq.n	800b4f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b4c8:	88fa      	ldrh	r2, [r7, #6]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	9303      	str	r3, [sp, #12]
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	9302      	str	r3, [sp, #8]
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	68b9      	ldr	r1, [r7, #8]
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f000 f80e 	bl	800b500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4e4:	69f8      	ldr	r0, [r7, #28]
 800b4e6:	f000 f8b1 	bl	800b64c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	61bb      	str	r3, [r7, #24]
 800b4ee:	e002      	b.n	800b4f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b4f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b4f6:	69bb      	ldr	r3, [r7, #24]
	}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3720      	adds	r7, #32
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	461a      	mov	r2, r3
 800b518:	21a5      	movs	r1, #165	; 0xa5
 800b51a:	f001 ff43 	bl	800d3a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b528:	3b01      	subs	r3, #1
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	4413      	add	r3, r2
 800b52e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	f023 0307 	bic.w	r3, r3, #7
 800b536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	f003 0307 	and.w	r3, r3, #7
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00a      	beq.n	800b558 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	617b      	str	r3, [r7, #20]
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d01f      	beq.n	800b59e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b55e:	2300      	movs	r3, #0
 800b560:	61fb      	str	r3, [r7, #28]
 800b562:	e012      	b.n	800b58a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	4413      	add	r3, r2
 800b56a:	7819      	ldrb	r1, [r3, #0]
 800b56c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	4413      	add	r3, r2
 800b572:	3334      	adds	r3, #52	; 0x34
 800b574:	460a      	mov	r2, r1
 800b576:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	4413      	add	r3, r2
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d006      	beq.n	800b592 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	3301      	adds	r3, #1
 800b588:	61fb      	str	r3, [r7, #28]
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	2b0f      	cmp	r3, #15
 800b58e:	d9e9      	bls.n	800b564 <prvInitialiseNewTask+0x64>
 800b590:	e000      	b.n	800b594 <prvInitialiseNewTask+0x94>
			{
				break;
 800b592:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b59c:	e003      	b.n	800b5a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a8:	2b37      	cmp	r3, #55	; 0x37
 800b5aa:	d901      	bls.n	800b5b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b5ac:	2337      	movs	r3, #55	; 0x37
 800b5ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	2200      	movs	r2, #0
 800b5c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fe fe56 	bl	800a278 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	3318      	adds	r3, #24
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fe fe51 	bl	800a278 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fe:	3354      	adds	r3, #84	; 0x54
 800b600:	2260      	movs	r2, #96	; 0x60
 800b602:	2100      	movs	r1, #0
 800b604:	4618      	mov	r0, r3
 800b606:	f001 fecd 	bl	800d3a4 <memset>
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	4a0c      	ldr	r2, [pc, #48]	; (800b640 <prvInitialiseNewTask+0x140>)
 800b60e:	659a      	str	r2, [r3, #88]	; 0x58
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	4a0c      	ldr	r2, [pc, #48]	; (800b644 <prvInitialiseNewTask+0x144>)
 800b614:	65da      	str	r2, [r3, #92]	; 0x5c
 800b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b618:	4a0b      	ldr	r2, [pc, #44]	; (800b648 <prvInitialiseNewTask+0x148>)
 800b61a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b61c:	683a      	ldr	r2, [r7, #0]
 800b61e:	68f9      	ldr	r1, [r7, #12]
 800b620:	69b8      	ldr	r0, [r7, #24]
 800b622:	f001 fa51 	bl	800cac8 <pxPortInitialiseStack>
 800b626:	4602      	mov	r2, r0
 800b628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d002      	beq.n	800b638 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b636:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b638:	bf00      	nop
 800b63a:	3720      	adds	r7, #32
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	0800d65c 	.word	0x0800d65c
 800b644:	0800d67c 	.word	0x0800d67c
 800b648:	0800d63c 	.word	0x0800d63c

0800b64c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b654:	f001 fb66 	bl	800cd24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b658:	4b2d      	ldr	r3, [pc, #180]	; (800b710 <prvAddNewTaskToReadyList+0xc4>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3301      	adds	r3, #1
 800b65e:	4a2c      	ldr	r2, [pc, #176]	; (800b710 <prvAddNewTaskToReadyList+0xc4>)
 800b660:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b662:	4b2c      	ldr	r3, [pc, #176]	; (800b714 <prvAddNewTaskToReadyList+0xc8>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d109      	bne.n	800b67e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b66a:	4a2a      	ldr	r2, [pc, #168]	; (800b714 <prvAddNewTaskToReadyList+0xc8>)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b670:	4b27      	ldr	r3, [pc, #156]	; (800b710 <prvAddNewTaskToReadyList+0xc4>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d110      	bne.n	800b69a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b678:	f000 fc38 	bl	800beec <prvInitialiseTaskLists>
 800b67c:	e00d      	b.n	800b69a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b67e:	4b26      	ldr	r3, [pc, #152]	; (800b718 <prvAddNewTaskToReadyList+0xcc>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d109      	bne.n	800b69a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b686:	4b23      	ldr	r3, [pc, #140]	; (800b714 <prvAddNewTaskToReadyList+0xc8>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b690:	429a      	cmp	r2, r3
 800b692:	d802      	bhi.n	800b69a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b694:	4a1f      	ldr	r2, [pc, #124]	; (800b714 <prvAddNewTaskToReadyList+0xc8>)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b69a:	4b20      	ldr	r3, [pc, #128]	; (800b71c <prvAddNewTaskToReadyList+0xd0>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	4a1e      	ldr	r2, [pc, #120]	; (800b71c <prvAddNewTaskToReadyList+0xd0>)
 800b6a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b6a4:	4b1d      	ldr	r3, [pc, #116]	; (800b71c <prvAddNewTaskToReadyList+0xd0>)
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b0:	4b1b      	ldr	r3, [pc, #108]	; (800b720 <prvAddNewTaskToReadyList+0xd4>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d903      	bls.n	800b6c0 <prvAddNewTaskToReadyList+0x74>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6bc:	4a18      	ldr	r2, [pc, #96]	; (800b720 <prvAddNewTaskToReadyList+0xd4>)
 800b6be:	6013      	str	r3, [r2, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4a15      	ldr	r2, [pc, #84]	; (800b724 <prvAddNewTaskToReadyList+0xd8>)
 800b6ce:	441a      	add	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	f7fe fddb 	bl	800a292 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b6dc:	f001 fb52 	bl	800cd84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b6e0:	4b0d      	ldr	r3, [pc, #52]	; (800b718 <prvAddNewTaskToReadyList+0xcc>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00e      	beq.n	800b706 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b6e8:	4b0a      	ldr	r3, [pc, #40]	; (800b714 <prvAddNewTaskToReadyList+0xc8>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d207      	bcs.n	800b706 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b6f6:	4b0c      	ldr	r3, [pc, #48]	; (800b728 <prvAddNewTaskToReadyList+0xdc>)
 800b6f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b706:	bf00      	nop
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	20001090 	.word	0x20001090
 800b714:	20000bbc 	.word	0x20000bbc
 800b718:	2000109c 	.word	0x2000109c
 800b71c:	200010ac 	.word	0x200010ac
 800b720:	20001098 	.word	0x20001098
 800b724:	20000bc0 	.word	0x20000bc0
 800b728:	e000ed04 	.word	0xe000ed04

0800b72c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b734:	2300      	movs	r3, #0
 800b736:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d017      	beq.n	800b76e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b73e:	4b13      	ldr	r3, [pc, #76]	; (800b78c <vTaskDelay+0x60>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00a      	beq.n	800b75c <vTaskDelay+0x30>
	__asm volatile
 800b746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74a:	f383 8811 	msr	BASEPRI, r3
 800b74e:	f3bf 8f6f 	isb	sy
 800b752:	f3bf 8f4f 	dsb	sy
 800b756:	60bb      	str	r3, [r7, #8]
}
 800b758:	bf00      	nop
 800b75a:	e7fe      	b.n	800b75a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b75c:	f000 f88a 	bl	800b874 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b760:	2100      	movs	r1, #0
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fe0e 	bl	800c384 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b768:	f000 f892 	bl	800b890 <xTaskResumeAll>
 800b76c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d107      	bne.n	800b784 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b774:	4b06      	ldr	r3, [pc, #24]	; (800b790 <vTaskDelay+0x64>)
 800b776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b784:	bf00      	nop
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	200010b8 	.word	0x200010b8
 800b790:	e000ed04 	.word	0xe000ed04

0800b794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b08a      	sub	sp, #40	; 0x28
 800b798:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b79a:	2300      	movs	r3, #0
 800b79c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7a2:	463a      	mov	r2, r7
 800b7a4:	1d39      	adds	r1, r7, #4
 800b7a6:	f107 0308 	add.w	r3, r7, #8
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fe fd10 	bl	800a1d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	9202      	str	r2, [sp, #8]
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	460a      	mov	r2, r1
 800b7c2:	4924      	ldr	r1, [pc, #144]	; (800b854 <vTaskStartScheduler+0xc0>)
 800b7c4:	4824      	ldr	r0, [pc, #144]	; (800b858 <vTaskStartScheduler+0xc4>)
 800b7c6:	f7ff fdf9 	bl	800b3bc <xTaskCreateStatic>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	4a23      	ldr	r2, [pc, #140]	; (800b85c <vTaskStartScheduler+0xc8>)
 800b7ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7d0:	4b22      	ldr	r3, [pc, #136]	; (800b85c <vTaskStartScheduler+0xc8>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	617b      	str	r3, [r7, #20]
 800b7dc:	e001      	b.n	800b7e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d102      	bne.n	800b7ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b7e8:	f000 fe20 	bl	800c42c <xTimerCreateTimerTask>
 800b7ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d11b      	bne.n	800b82c <vTaskStartScheduler+0x98>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	613b      	str	r3, [r7, #16]
}
 800b806:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b808:	4b15      	ldr	r3, [pc, #84]	; (800b860 <vTaskStartScheduler+0xcc>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	3354      	adds	r3, #84	; 0x54
 800b80e:	4a15      	ldr	r2, [pc, #84]	; (800b864 <vTaskStartScheduler+0xd0>)
 800b810:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b812:	4b15      	ldr	r3, [pc, #84]	; (800b868 <vTaskStartScheduler+0xd4>)
 800b814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b818:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b81a:	4b14      	ldr	r3, [pc, #80]	; (800b86c <vTaskStartScheduler+0xd8>)
 800b81c:	2201      	movs	r2, #1
 800b81e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b820:	4b13      	ldr	r3, [pc, #76]	; (800b870 <vTaskStartScheduler+0xdc>)
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b826:	f001 f9db 	bl	800cbe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b82a:	e00e      	b.n	800b84a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b832:	d10a      	bne.n	800b84a <vTaskStartScheduler+0xb6>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	60fb      	str	r3, [r7, #12]
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <vTaskStartScheduler+0xb4>
}
 800b84a:	bf00      	nop
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	0800d570 	.word	0x0800d570
 800b858:	0800bebd 	.word	0x0800bebd
 800b85c:	200010b4 	.word	0x200010b4
 800b860:	20000bbc 	.word	0x20000bbc
 800b864:	20000018 	.word	0x20000018
 800b868:	200010b0 	.word	0x200010b0
 800b86c:	2000109c 	.word	0x2000109c
 800b870:	20001094 	.word	0x20001094

0800b874 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b874:	b480      	push	{r7}
 800b876:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b878:	4b04      	ldr	r3, [pc, #16]	; (800b88c <vTaskSuspendAll+0x18>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	3301      	adds	r3, #1
 800b87e:	4a03      	ldr	r2, [pc, #12]	; (800b88c <vTaskSuspendAll+0x18>)
 800b880:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b882:	bf00      	nop
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	200010b8 	.word	0x200010b8

0800b890 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b896:	2300      	movs	r3, #0
 800b898:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b89a:	2300      	movs	r3, #0
 800b89c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b89e:	4b42      	ldr	r3, [pc, #264]	; (800b9a8 <xTaskResumeAll+0x118>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10a      	bne.n	800b8bc <xTaskResumeAll+0x2c>
	__asm volatile
 800b8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	603b      	str	r3, [r7, #0]
}
 800b8b8:	bf00      	nop
 800b8ba:	e7fe      	b.n	800b8ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8bc:	f001 fa32 	bl	800cd24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8c0:	4b39      	ldr	r3, [pc, #228]	; (800b9a8 <xTaskResumeAll+0x118>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	4a38      	ldr	r2, [pc, #224]	; (800b9a8 <xTaskResumeAll+0x118>)
 800b8c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8ca:	4b37      	ldr	r3, [pc, #220]	; (800b9a8 <xTaskResumeAll+0x118>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d162      	bne.n	800b998 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8d2:	4b36      	ldr	r3, [pc, #216]	; (800b9ac <xTaskResumeAll+0x11c>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d05e      	beq.n	800b998 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8da:	e02f      	b.n	800b93c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8dc:	4b34      	ldr	r3, [pc, #208]	; (800b9b0 <xTaskResumeAll+0x120>)
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3318      	adds	r3, #24
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fe fd2f 	bl	800a34c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe fd2a 	bl	800a34c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fc:	4b2d      	ldr	r3, [pc, #180]	; (800b9b4 <xTaskResumeAll+0x124>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	429a      	cmp	r2, r3
 800b902:	d903      	bls.n	800b90c <xTaskResumeAll+0x7c>
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b908:	4a2a      	ldr	r2, [pc, #168]	; (800b9b4 <xTaskResumeAll+0x124>)
 800b90a:	6013      	str	r3, [r2, #0]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b910:	4613      	mov	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	4a27      	ldr	r2, [pc, #156]	; (800b9b8 <xTaskResumeAll+0x128>)
 800b91a:	441a      	add	r2, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	3304      	adds	r3, #4
 800b920:	4619      	mov	r1, r3
 800b922:	4610      	mov	r0, r2
 800b924:	f7fe fcb5 	bl	800a292 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b92c:	4b23      	ldr	r3, [pc, #140]	; (800b9bc <xTaskResumeAll+0x12c>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b932:	429a      	cmp	r2, r3
 800b934:	d302      	bcc.n	800b93c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b936:	4b22      	ldr	r3, [pc, #136]	; (800b9c0 <xTaskResumeAll+0x130>)
 800b938:	2201      	movs	r2, #1
 800b93a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b93c:	4b1c      	ldr	r3, [pc, #112]	; (800b9b0 <xTaskResumeAll+0x120>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1cb      	bne.n	800b8dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b94a:	f000 fb71 	bl	800c030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b94e:	4b1d      	ldr	r3, [pc, #116]	; (800b9c4 <xTaskResumeAll+0x134>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d010      	beq.n	800b97c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b95a:	f000 f859 	bl	800ba10 <xTaskIncrementTick>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b964:	4b16      	ldr	r3, [pc, #88]	; (800b9c0 <xTaskResumeAll+0x130>)
 800b966:	2201      	movs	r2, #1
 800b968:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1f1      	bne.n	800b95a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b976:	4b13      	ldr	r3, [pc, #76]	; (800b9c4 <xTaskResumeAll+0x134>)
 800b978:	2200      	movs	r2, #0
 800b97a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b97c:	4b10      	ldr	r3, [pc, #64]	; (800b9c0 <xTaskResumeAll+0x130>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d009      	beq.n	800b998 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b984:	2301      	movs	r3, #1
 800b986:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b988:	4b0f      	ldr	r3, [pc, #60]	; (800b9c8 <xTaskResumeAll+0x138>)
 800b98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b98e:	601a      	str	r2, [r3, #0]
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b998:	f001 f9f4 	bl	800cd84 <vPortExitCritical>

	return xAlreadyYielded;
 800b99c:	68bb      	ldr	r3, [r7, #8]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	200010b8 	.word	0x200010b8
 800b9ac:	20001090 	.word	0x20001090
 800b9b0:	20001050 	.word	0x20001050
 800b9b4:	20001098 	.word	0x20001098
 800b9b8:	20000bc0 	.word	0x20000bc0
 800b9bc:	20000bbc 	.word	0x20000bbc
 800b9c0:	200010a4 	.word	0x200010a4
 800b9c4:	200010a0 	.word	0x200010a0
 800b9c8:	e000ed04 	.word	0xe000ed04

0800b9cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b9d2:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <xTaskGetTickCount+0x1c>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b9d8:	687b      	ldr	r3, [r7, #4]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	20001094 	.word	0x20001094

0800b9ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9f2:	f001 fa79 	bl	800cee8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b9fa:	4b04      	ldr	r3, [pc, #16]	; (800ba0c <xTaskGetTickCountFromISR+0x20>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba00:	683b      	ldr	r3, [r7, #0]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20001094 	.word	0x20001094

0800ba10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba16:	2300      	movs	r3, #0
 800ba18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba1a:	4b4f      	ldr	r3, [pc, #316]	; (800bb58 <xTaskIncrementTick+0x148>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f040 808f 	bne.w	800bb42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba24:	4b4d      	ldr	r3, [pc, #308]	; (800bb5c <xTaskIncrementTick+0x14c>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba2c:	4a4b      	ldr	r2, [pc, #300]	; (800bb5c <xTaskIncrementTick+0x14c>)
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d120      	bne.n	800ba7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba38:	4b49      	ldr	r3, [pc, #292]	; (800bb60 <xTaskIncrementTick+0x150>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00a      	beq.n	800ba58 <xTaskIncrementTick+0x48>
	__asm volatile
 800ba42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	603b      	str	r3, [r7, #0]
}
 800ba54:	bf00      	nop
 800ba56:	e7fe      	b.n	800ba56 <xTaskIncrementTick+0x46>
 800ba58:	4b41      	ldr	r3, [pc, #260]	; (800bb60 <xTaskIncrementTick+0x150>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	4b41      	ldr	r3, [pc, #260]	; (800bb64 <xTaskIncrementTick+0x154>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a3f      	ldr	r2, [pc, #252]	; (800bb60 <xTaskIncrementTick+0x150>)
 800ba64:	6013      	str	r3, [r2, #0]
 800ba66:	4a3f      	ldr	r2, [pc, #252]	; (800bb64 <xTaskIncrementTick+0x154>)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	4b3e      	ldr	r3, [pc, #248]	; (800bb68 <xTaskIncrementTick+0x158>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3301      	adds	r3, #1
 800ba72:	4a3d      	ldr	r2, [pc, #244]	; (800bb68 <xTaskIncrementTick+0x158>)
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	f000 fadb 	bl	800c030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba7a:	4b3c      	ldr	r3, [pc, #240]	; (800bb6c <xTaskIncrementTick+0x15c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d349      	bcc.n	800bb18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba84:	4b36      	ldr	r3, [pc, #216]	; (800bb60 <xTaskIncrementTick+0x150>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d104      	bne.n	800ba98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba8e:	4b37      	ldr	r3, [pc, #220]	; (800bb6c <xTaskIncrementTick+0x15c>)
 800ba90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba94:	601a      	str	r2, [r3, #0]
					break;
 800ba96:	e03f      	b.n	800bb18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba98:	4b31      	ldr	r3, [pc, #196]	; (800bb60 <xTaskIncrementTick+0x150>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	429a      	cmp	r2, r3
 800baae:	d203      	bcs.n	800bab8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bab0:	4a2e      	ldr	r2, [pc, #184]	; (800bb6c <xTaskIncrementTick+0x15c>)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bab6:	e02f      	b.n	800bb18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	3304      	adds	r3, #4
 800babc:	4618      	mov	r0, r3
 800babe:	f7fe fc45 	bl	800a34c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d004      	beq.n	800bad4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	3318      	adds	r3, #24
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe fc3c 	bl	800a34c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad8:	4b25      	ldr	r3, [pc, #148]	; (800bb70 <xTaskIncrementTick+0x160>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	429a      	cmp	r2, r3
 800bade:	d903      	bls.n	800bae8 <xTaskIncrementTick+0xd8>
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae4:	4a22      	ldr	r2, [pc, #136]	; (800bb70 <xTaskIncrementTick+0x160>)
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baec:	4613      	mov	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	4413      	add	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4a1f      	ldr	r2, [pc, #124]	; (800bb74 <xTaskIncrementTick+0x164>)
 800baf6:	441a      	add	r2, r3
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	3304      	adds	r3, #4
 800bafc:	4619      	mov	r1, r3
 800bafe:	4610      	mov	r0, r2
 800bb00:	f7fe fbc7 	bl	800a292 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb08:	4b1b      	ldr	r3, [pc, #108]	; (800bb78 <xTaskIncrementTick+0x168>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d3b8      	bcc.n	800ba84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb12:	2301      	movs	r3, #1
 800bb14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb16:	e7b5      	b.n	800ba84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb18:	4b17      	ldr	r3, [pc, #92]	; (800bb78 <xTaskIncrementTick+0x168>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb1e:	4915      	ldr	r1, [pc, #84]	; (800bb74 <xTaskIncrementTick+0x164>)
 800bb20:	4613      	mov	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	440b      	add	r3, r1
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d901      	bls.n	800bb34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bb30:	2301      	movs	r3, #1
 800bb32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb34:	4b11      	ldr	r3, [pc, #68]	; (800bb7c <xTaskIncrementTick+0x16c>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d007      	beq.n	800bb4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	e004      	b.n	800bb4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb42:	4b0f      	ldr	r3, [pc, #60]	; (800bb80 <xTaskIncrementTick+0x170>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	3301      	adds	r3, #1
 800bb48:	4a0d      	ldr	r2, [pc, #52]	; (800bb80 <xTaskIncrementTick+0x170>)
 800bb4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb4c:	697b      	ldr	r3, [r7, #20]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3718      	adds	r7, #24
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	200010b8 	.word	0x200010b8
 800bb5c:	20001094 	.word	0x20001094
 800bb60:	20001048 	.word	0x20001048
 800bb64:	2000104c 	.word	0x2000104c
 800bb68:	200010a8 	.word	0x200010a8
 800bb6c:	200010b0 	.word	0x200010b0
 800bb70:	20001098 	.word	0x20001098
 800bb74:	20000bc0 	.word	0x20000bc0
 800bb78:	20000bbc 	.word	0x20000bbc
 800bb7c:	200010a4 	.word	0x200010a4
 800bb80:	200010a0 	.word	0x200010a0

0800bb84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb8a:	4b2a      	ldr	r3, [pc, #168]	; (800bc34 <vTaskSwitchContext+0xb0>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d003      	beq.n	800bb9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb92:	4b29      	ldr	r3, [pc, #164]	; (800bc38 <vTaskSwitchContext+0xb4>)
 800bb94:	2201      	movs	r2, #1
 800bb96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb98:	e046      	b.n	800bc28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bb9a:	4b27      	ldr	r3, [pc, #156]	; (800bc38 <vTaskSwitchContext+0xb4>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bba0:	4b26      	ldr	r3, [pc, #152]	; (800bc3c <vTaskSwitchContext+0xb8>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	60fb      	str	r3, [r7, #12]
 800bba6:	e010      	b.n	800bbca <vTaskSwitchContext+0x46>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10a      	bne.n	800bbc4 <vTaskSwitchContext+0x40>
	__asm volatile
 800bbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	607b      	str	r3, [r7, #4]
}
 800bbc0:	bf00      	nop
 800bbc2:	e7fe      	b.n	800bbc2 <vTaskSwitchContext+0x3e>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	491d      	ldr	r1, [pc, #116]	; (800bc40 <vTaskSwitchContext+0xbc>)
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	4413      	add	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	440b      	add	r3, r1
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d0e4      	beq.n	800bba8 <vTaskSwitchContext+0x24>
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4a15      	ldr	r2, [pc, #84]	; (800bc40 <vTaskSwitchContext+0xbc>)
 800bbea:	4413      	add	r3, r2
 800bbec:	60bb      	str	r3, [r7, #8]
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	685a      	ldr	r2, [r3, #4]
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	605a      	str	r2, [r3, #4]
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	3308      	adds	r3, #8
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d104      	bne.n	800bc0e <vTaskSwitchContext+0x8a>
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	605a      	str	r2, [r3, #4]
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	4a0b      	ldr	r2, [pc, #44]	; (800bc44 <vTaskSwitchContext+0xc0>)
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	4a08      	ldr	r2, [pc, #32]	; (800bc3c <vTaskSwitchContext+0xb8>)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc1e:	4b09      	ldr	r3, [pc, #36]	; (800bc44 <vTaskSwitchContext+0xc0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	3354      	adds	r3, #84	; 0x54
 800bc24:	4a08      	ldr	r2, [pc, #32]	; (800bc48 <vTaskSwitchContext+0xc4>)
 800bc26:	6013      	str	r3, [r2, #0]
}
 800bc28:	bf00      	nop
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr
 800bc34:	200010b8 	.word	0x200010b8
 800bc38:	200010a4 	.word	0x200010a4
 800bc3c:	20001098 	.word	0x20001098
 800bc40:	20000bc0 	.word	0x20000bc0
 800bc44:	20000bbc 	.word	0x20000bbc
 800bc48:	20000018 	.word	0x20000018

0800bc4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	60fb      	str	r3, [r7, #12]
}
 800bc6e:	bf00      	nop
 800bc70:	e7fe      	b.n	800bc70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc72:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <vTaskPlaceOnEventList+0x44>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3318      	adds	r3, #24
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7fe fb2d 	bl	800a2da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc80:	2101      	movs	r1, #1
 800bc82:	6838      	ldr	r0, [r7, #0]
 800bc84:	f000 fb7e 	bl	800c384 <prvAddCurrentTaskToDelayedList>
}
 800bc88:	bf00      	nop
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20000bbc 	.word	0x20000bbc

0800bc94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10a      	bne.n	800bcbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	617b      	str	r3, [r7, #20]
}
 800bcb8:	bf00      	nop
 800bcba:	e7fe      	b.n	800bcba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcbc:	4b0a      	ldr	r3, [pc, #40]	; (800bce8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3318      	adds	r3, #24
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f7fe fae4 	bl	800a292 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bcd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bcd6:	6879      	ldr	r1, [r7, #4]
 800bcd8:	68b8      	ldr	r0, [r7, #8]
 800bcda:	f000 fb53 	bl	800c384 <prvAddCurrentTaskToDelayedList>
	}
 800bcde:	bf00      	nop
 800bce0:	3718      	adds	r7, #24
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	20000bbc 	.word	0x20000bbc

0800bcec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10a      	bne.n	800bd18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	60fb      	str	r3, [r7, #12]
}
 800bd14:	bf00      	nop
 800bd16:	e7fe      	b.n	800bd16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	3318      	adds	r3, #24
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fe fb15 	bl	800a34c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd22:	4b1e      	ldr	r3, [pc, #120]	; (800bd9c <xTaskRemoveFromEventList+0xb0>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d11d      	bne.n	800bd66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fe fb0c 	bl	800a34c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd38:	4b19      	ldr	r3, [pc, #100]	; (800bda0 <xTaskRemoveFromEventList+0xb4>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d903      	bls.n	800bd48 <xTaskRemoveFromEventList+0x5c>
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd44:	4a16      	ldr	r2, [pc, #88]	; (800bda0 <xTaskRemoveFromEventList+0xb4>)
 800bd46:	6013      	str	r3, [r2, #0]
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4a13      	ldr	r2, [pc, #76]	; (800bda4 <xTaskRemoveFromEventList+0xb8>)
 800bd56:	441a      	add	r2, r3
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	4610      	mov	r0, r2
 800bd60:	f7fe fa97 	bl	800a292 <vListInsertEnd>
 800bd64:	e005      	b.n	800bd72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	3318      	adds	r3, #24
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	480e      	ldr	r0, [pc, #56]	; (800bda8 <xTaskRemoveFromEventList+0xbc>)
 800bd6e:	f7fe fa90 	bl	800a292 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd76:	4b0d      	ldr	r3, [pc, #52]	; (800bdac <xTaskRemoveFromEventList+0xc0>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d905      	bls.n	800bd8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd80:	2301      	movs	r3, #1
 800bd82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd84:	4b0a      	ldr	r3, [pc, #40]	; (800bdb0 <xTaskRemoveFromEventList+0xc4>)
 800bd86:	2201      	movs	r2, #1
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	e001      	b.n	800bd90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd90:	697b      	ldr	r3, [r7, #20]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	200010b8 	.word	0x200010b8
 800bda0:	20001098 	.word	0x20001098
 800bda4:	20000bc0 	.word	0x20000bc0
 800bda8:	20001050 	.word	0x20001050
 800bdac:	20000bbc 	.word	0x20000bbc
 800bdb0:	200010a4 	.word	0x200010a4

0800bdb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bdbc:	4b06      	ldr	r3, [pc, #24]	; (800bdd8 <vTaskInternalSetTimeOutState+0x24>)
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bdc4:	4b05      	ldr	r3, [pc, #20]	; (800bddc <vTaskInternalSetTimeOutState+0x28>)
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	605a      	str	r2, [r3, #4]
}
 800bdcc:	bf00      	nop
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr
 800bdd8:	200010a8 	.word	0x200010a8
 800bddc:	20001094 	.word	0x20001094

0800bde0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b088      	sub	sp, #32
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10a      	bne.n	800be06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	613b      	str	r3, [r7, #16]
}
 800be02:	bf00      	nop
 800be04:	e7fe      	b.n	800be04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10a      	bne.n	800be22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	60fb      	str	r3, [r7, #12]
}
 800be1e:	bf00      	nop
 800be20:	e7fe      	b.n	800be20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800be22:	f000 ff7f 	bl	800cd24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be26:	4b1d      	ldr	r3, [pc, #116]	; (800be9c <xTaskCheckForTimeOut+0xbc>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	69ba      	ldr	r2, [r7, #24]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be3e:	d102      	bne.n	800be46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be40:	2300      	movs	r3, #0
 800be42:	61fb      	str	r3, [r7, #28]
 800be44:	e023      	b.n	800be8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	4b15      	ldr	r3, [pc, #84]	; (800bea0 <xTaskCheckForTimeOut+0xc0>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d007      	beq.n	800be62 <xTaskCheckForTimeOut+0x82>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	69ba      	ldr	r2, [r7, #24]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d302      	bcc.n	800be62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be5c:	2301      	movs	r3, #1
 800be5e:	61fb      	str	r3, [r7, #28]
 800be60:	e015      	b.n	800be8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d20b      	bcs.n	800be84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	1ad2      	subs	r2, r2, r3
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7ff ff9b 	bl	800bdb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be7e:	2300      	movs	r3, #0
 800be80:	61fb      	str	r3, [r7, #28]
 800be82:	e004      	b.n	800be8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2200      	movs	r2, #0
 800be88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be8a:	2301      	movs	r3, #1
 800be8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be8e:	f000 ff79 	bl	800cd84 <vPortExitCritical>

	return xReturn;
 800be92:	69fb      	ldr	r3, [r7, #28]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3720      	adds	r7, #32
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	20001094 	.word	0x20001094
 800bea0:	200010a8 	.word	0x200010a8

0800bea4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bea4:	b480      	push	{r7}
 800bea6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bea8:	4b03      	ldr	r3, [pc, #12]	; (800beb8 <vTaskMissedYield+0x14>)
 800beaa:	2201      	movs	r2, #1
 800beac:	601a      	str	r2, [r3, #0]
}
 800beae:	bf00      	nop
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	200010a4 	.word	0x200010a4

0800bebc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bec4:	f000 f852 	bl	800bf6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bec8:	4b06      	ldr	r3, [pc, #24]	; (800bee4 <prvIdleTask+0x28>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d9f9      	bls.n	800bec4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bed0:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <prvIdleTask+0x2c>)
 800bed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed6:	601a      	str	r2, [r3, #0]
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bee0:	e7f0      	b.n	800bec4 <prvIdleTask+0x8>
 800bee2:	bf00      	nop
 800bee4:	20000bc0 	.word	0x20000bc0
 800bee8:	e000ed04 	.word	0xe000ed04

0800beec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bef2:	2300      	movs	r3, #0
 800bef4:	607b      	str	r3, [r7, #4]
 800bef6:	e00c      	b.n	800bf12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	4613      	mov	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4413      	add	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	4a12      	ldr	r2, [pc, #72]	; (800bf4c <prvInitialiseTaskLists+0x60>)
 800bf04:	4413      	add	r3, r2
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fe f996 	bl	800a238 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	607b      	str	r3, [r7, #4]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b37      	cmp	r3, #55	; 0x37
 800bf16:	d9ef      	bls.n	800bef8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf18:	480d      	ldr	r0, [pc, #52]	; (800bf50 <prvInitialiseTaskLists+0x64>)
 800bf1a:	f7fe f98d 	bl	800a238 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf1e:	480d      	ldr	r0, [pc, #52]	; (800bf54 <prvInitialiseTaskLists+0x68>)
 800bf20:	f7fe f98a 	bl	800a238 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf24:	480c      	ldr	r0, [pc, #48]	; (800bf58 <prvInitialiseTaskLists+0x6c>)
 800bf26:	f7fe f987 	bl	800a238 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf2a:	480c      	ldr	r0, [pc, #48]	; (800bf5c <prvInitialiseTaskLists+0x70>)
 800bf2c:	f7fe f984 	bl	800a238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf30:	480b      	ldr	r0, [pc, #44]	; (800bf60 <prvInitialiseTaskLists+0x74>)
 800bf32:	f7fe f981 	bl	800a238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf36:	4b0b      	ldr	r3, [pc, #44]	; (800bf64 <prvInitialiseTaskLists+0x78>)
 800bf38:	4a05      	ldr	r2, [pc, #20]	; (800bf50 <prvInitialiseTaskLists+0x64>)
 800bf3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf3c:	4b0a      	ldr	r3, [pc, #40]	; (800bf68 <prvInitialiseTaskLists+0x7c>)
 800bf3e:	4a05      	ldr	r2, [pc, #20]	; (800bf54 <prvInitialiseTaskLists+0x68>)
 800bf40:	601a      	str	r2, [r3, #0]
}
 800bf42:	bf00      	nop
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	20000bc0 	.word	0x20000bc0
 800bf50:	20001020 	.word	0x20001020
 800bf54:	20001034 	.word	0x20001034
 800bf58:	20001050 	.word	0x20001050
 800bf5c:	20001064 	.word	0x20001064
 800bf60:	2000107c 	.word	0x2000107c
 800bf64:	20001048 	.word	0x20001048
 800bf68:	2000104c 	.word	0x2000104c

0800bf6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf72:	e019      	b.n	800bfa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf74:	f000 fed6 	bl	800cd24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf78:	4b10      	ldr	r3, [pc, #64]	; (800bfbc <prvCheckTasksWaitingTermination+0x50>)
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3304      	adds	r3, #4
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fe f9e1 	bl	800a34c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf8a:	4b0d      	ldr	r3, [pc, #52]	; (800bfc0 <prvCheckTasksWaitingTermination+0x54>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	4a0b      	ldr	r2, [pc, #44]	; (800bfc0 <prvCheckTasksWaitingTermination+0x54>)
 800bf92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf94:	4b0b      	ldr	r3, [pc, #44]	; (800bfc4 <prvCheckTasksWaitingTermination+0x58>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	4a0a      	ldr	r2, [pc, #40]	; (800bfc4 <prvCheckTasksWaitingTermination+0x58>)
 800bf9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf9e:	f000 fef1 	bl	800cd84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f810 	bl	800bfc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfa8:	4b06      	ldr	r3, [pc, #24]	; (800bfc4 <prvCheckTasksWaitingTermination+0x58>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1e1      	bne.n	800bf74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bfb0:	bf00      	nop
 800bfb2:	bf00      	nop
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20001064 	.word	0x20001064
 800bfc0:	20001090 	.word	0x20001090
 800bfc4:	20001078 	.word	0x20001078

0800bfc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3354      	adds	r3, #84	; 0x54
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f001 f9fb 	bl	800d3d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d108      	bne.n	800bff6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f001 f889 	bl	800d100 <vPortFree>
				vPortFree( pxTCB );
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f001 f886 	bl	800d100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bff4:	e018      	b.n	800c028 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d103      	bne.n	800c008 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f001 f87d 	bl	800d100 <vPortFree>
	}
 800c006:	e00f      	b.n	800c028 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c00e:	2b02      	cmp	r3, #2
 800c010:	d00a      	beq.n	800c028 <prvDeleteTCB+0x60>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	60fb      	str	r3, [r7, #12]
}
 800c024:	bf00      	nop
 800c026:	e7fe      	b.n	800c026 <prvDeleteTCB+0x5e>
	}
 800c028:	bf00      	nop
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c036:	4b0c      	ldr	r3, [pc, #48]	; (800c068 <prvResetNextTaskUnblockTime+0x38>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d104      	bne.n	800c04a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c040:	4b0a      	ldr	r3, [pc, #40]	; (800c06c <prvResetNextTaskUnblockTime+0x3c>)
 800c042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c046:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c048:	e008      	b.n	800c05c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04a:	4b07      	ldr	r3, [pc, #28]	; (800c068 <prvResetNextTaskUnblockTime+0x38>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	4a04      	ldr	r2, [pc, #16]	; (800c06c <prvResetNextTaskUnblockTime+0x3c>)
 800c05a:	6013      	str	r3, [r2, #0]
}
 800c05c:	bf00      	nop
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	20001048 	.word	0x20001048
 800c06c:	200010b0 	.word	0x200010b0

0800c070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c076:	4b0b      	ldr	r3, [pc, #44]	; (800c0a4 <xTaskGetSchedulerState+0x34>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d102      	bne.n	800c084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c07e:	2301      	movs	r3, #1
 800c080:	607b      	str	r3, [r7, #4]
 800c082:	e008      	b.n	800c096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c084:	4b08      	ldr	r3, [pc, #32]	; (800c0a8 <xTaskGetSchedulerState+0x38>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d102      	bne.n	800c092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c08c:	2302      	movs	r3, #2
 800c08e:	607b      	str	r3, [r7, #4]
 800c090:	e001      	b.n	800c096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c092:	2300      	movs	r3, #0
 800c094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c096:	687b      	ldr	r3, [r7, #4]
	}
 800c098:	4618      	mov	r0, r3
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	2000109c 	.word	0x2000109c
 800c0a8:	200010b8 	.word	0x200010b8

0800c0ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d051      	beq.n	800c166 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c6:	4b2a      	ldr	r3, [pc, #168]	; (800c170 <xTaskPriorityInherit+0xc4>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d241      	bcs.n	800c154 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	db06      	blt.n	800c0e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0d8:	4b25      	ldr	r3, [pc, #148]	; (800c170 <xTaskPriorityInherit+0xc4>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	6959      	ldr	r1, [r3, #20]
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	4413      	add	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4a1f      	ldr	r2, [pc, #124]	; (800c174 <xTaskPriorityInherit+0xc8>)
 800c0f8:	4413      	add	r3, r2
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	d122      	bne.n	800c144 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	3304      	adds	r3, #4
 800c102:	4618      	mov	r0, r3
 800c104:	f7fe f922 	bl	800a34c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c108:	4b19      	ldr	r3, [pc, #100]	; (800c170 <xTaskPriorityInherit+0xc4>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c116:	4b18      	ldr	r3, [pc, #96]	; (800c178 <xTaskPriorityInherit+0xcc>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d903      	bls.n	800c126 <xTaskPriorityInherit+0x7a>
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c122:	4a15      	ldr	r2, [pc, #84]	; (800c178 <xTaskPriorityInherit+0xcc>)
 800c124:	6013      	str	r3, [r2, #0]
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c12a:	4613      	mov	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	4413      	add	r3, r2
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	4a10      	ldr	r2, [pc, #64]	; (800c174 <xTaskPriorityInherit+0xc8>)
 800c134:	441a      	add	r2, r3
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	3304      	adds	r3, #4
 800c13a:	4619      	mov	r1, r3
 800c13c:	4610      	mov	r0, r2
 800c13e:	f7fe f8a8 	bl	800a292 <vListInsertEnd>
 800c142:	e004      	b.n	800c14e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c144:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <xTaskPriorityInherit+0xc4>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c14e:	2301      	movs	r3, #1
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	e008      	b.n	800c166 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c158:	4b05      	ldr	r3, [pc, #20]	; (800c170 <xTaskPriorityInherit+0xc4>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c15e:	429a      	cmp	r2, r3
 800c160:	d201      	bcs.n	800c166 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c162:	2301      	movs	r3, #1
 800c164:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c166:	68fb      	ldr	r3, [r7, #12]
	}
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	20000bbc 	.word	0x20000bbc
 800c174:	20000bc0 	.word	0x20000bc0
 800c178:	20001098 	.word	0x20001098

0800c17c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c188:	2300      	movs	r3, #0
 800c18a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d056      	beq.n	800c240 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c192:	4b2e      	ldr	r3, [pc, #184]	; (800c24c <xTaskPriorityDisinherit+0xd0>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d00a      	beq.n	800c1b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	60fb      	str	r3, [r7, #12]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10a      	bne.n	800c1d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	60bb      	str	r3, [r7, #8]
}
 800c1cc:	bf00      	nop
 800c1ce:	e7fe      	b.n	800c1ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1d4:	1e5a      	subs	r2, r3, #1
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d02c      	beq.n	800c240 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d128      	bne.n	800c240 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe f8aa 	bl	800a34c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c204:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c210:	4b0f      	ldr	r3, [pc, #60]	; (800c250 <xTaskPriorityDisinherit+0xd4>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	429a      	cmp	r2, r3
 800c216:	d903      	bls.n	800c220 <xTaskPriorityDisinherit+0xa4>
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21c:	4a0c      	ldr	r2, [pc, #48]	; (800c250 <xTaskPriorityDisinherit+0xd4>)
 800c21e:	6013      	str	r3, [r2, #0]
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c224:	4613      	mov	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4413      	add	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4a09      	ldr	r2, [pc, #36]	; (800c254 <xTaskPriorityDisinherit+0xd8>)
 800c22e:	441a      	add	r2, r3
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	3304      	adds	r3, #4
 800c234:	4619      	mov	r1, r3
 800c236:	4610      	mov	r0, r2
 800c238:	f7fe f82b 	bl	800a292 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c23c:	2301      	movs	r3, #1
 800c23e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c240:	697b      	ldr	r3, [r7, #20]
	}
 800c242:	4618      	mov	r0, r3
 800c244:	3718      	adds	r7, #24
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	20000bbc 	.word	0x20000bbc
 800c250:	20001098 	.word	0x20001098
 800c254:	20000bc0 	.word	0x20000bc0

0800c258 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b088      	sub	sp, #32
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c266:	2301      	movs	r3, #1
 800c268:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d06a      	beq.n	800c346 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10a      	bne.n	800c28e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	60fb      	str	r3, [r7, #12]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	429a      	cmp	r2, r3
 800c296:	d902      	bls.n	800c29e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	61fb      	str	r3, [r7, #28]
 800c29c:	e002      	b.n	800c2a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a8:	69fa      	ldr	r2, [r7, #28]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d04b      	beq.n	800c346 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b2:	697a      	ldr	r2, [r7, #20]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d146      	bne.n	800c346 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c2b8:	4b25      	ldr	r3, [pc, #148]	; (800c350 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	69ba      	ldr	r2, [r7, #24]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d10a      	bne.n	800c2d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	60bb      	str	r3, [r7, #8]
}
 800c2d4:	bf00      	nop
 800c2d6:	e7fe      	b.n	800c2d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	69fa      	ldr	r2, [r7, #28]
 800c2e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	699b      	ldr	r3, [r3, #24]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	db04      	blt.n	800c2f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	6959      	ldr	r1, [r3, #20]
 800c2fa:	693a      	ldr	r2, [r7, #16]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4a13      	ldr	r2, [pc, #76]	; (800c354 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c306:	4413      	add	r3, r2
 800c308:	4299      	cmp	r1, r3
 800c30a:	d11c      	bne.n	800c346 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	3304      	adds	r3, #4
 800c310:	4618      	mov	r0, r3
 800c312:	f7fe f81b 	bl	800a34c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c31a:	4b0f      	ldr	r3, [pc, #60]	; (800c358 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d903      	bls.n	800c32a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c326:	4a0c      	ldr	r2, [pc, #48]	; (800c358 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c328:	6013      	str	r3, [r2, #0]
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c32e:	4613      	mov	r3, r2
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	4a07      	ldr	r2, [pc, #28]	; (800c354 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c338:	441a      	add	r2, r3
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	3304      	adds	r3, #4
 800c33e:	4619      	mov	r1, r3
 800c340:	4610      	mov	r0, r2
 800c342:	f7fd ffa6 	bl	800a292 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c346:	bf00      	nop
 800c348:	3720      	adds	r7, #32
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20000bbc 	.word	0x20000bbc
 800c354:	20000bc0 	.word	0x20000bc0
 800c358:	20001098 	.word	0x20001098

0800c35c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c35c:	b480      	push	{r7}
 800c35e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c360:	4b07      	ldr	r3, [pc, #28]	; (800c380 <pvTaskIncrementMutexHeldCount+0x24>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d004      	beq.n	800c372 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c368:	4b05      	ldr	r3, [pc, #20]	; (800c380 <pvTaskIncrementMutexHeldCount+0x24>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c36e:	3201      	adds	r2, #1
 800c370:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c372:	4b03      	ldr	r3, [pc, #12]	; (800c380 <pvTaskIncrementMutexHeldCount+0x24>)
 800c374:	681b      	ldr	r3, [r3, #0]
	}
 800c376:	4618      	mov	r0, r3
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	20000bbc 	.word	0x20000bbc

0800c384 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c38e:	4b21      	ldr	r3, [pc, #132]	; (800c414 <prvAddCurrentTaskToDelayedList+0x90>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c394:	4b20      	ldr	r3, [pc, #128]	; (800c418 <prvAddCurrentTaskToDelayedList+0x94>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	3304      	adds	r3, #4
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fd ffd6 	bl	800a34c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3a6:	d10a      	bne.n	800c3be <prvAddCurrentTaskToDelayedList+0x3a>
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d007      	beq.n	800c3be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3ae:	4b1a      	ldr	r3, [pc, #104]	; (800c418 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4819      	ldr	r0, [pc, #100]	; (800c41c <prvAddCurrentTaskToDelayedList+0x98>)
 800c3b8:	f7fd ff6b 	bl	800a292 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3bc:	e026      	b.n	800c40c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3c6:	4b14      	ldr	r3, [pc, #80]	; (800c418 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d209      	bcs.n	800c3ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3d6:	4b12      	ldr	r3, [pc, #72]	; (800c420 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	4610      	mov	r0, r2
 800c3e4:	f7fd ff79 	bl	800a2da <vListInsert>
}
 800c3e8:	e010      	b.n	800c40c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3ea:	4b0e      	ldr	r3, [pc, #56]	; (800c424 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	4b0a      	ldr	r3, [pc, #40]	; (800c418 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	4610      	mov	r0, r2
 800c3f8:	f7fd ff6f 	bl	800a2da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c3fc:	4b0a      	ldr	r3, [pc, #40]	; (800c428 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	429a      	cmp	r2, r3
 800c404:	d202      	bcs.n	800c40c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c406:	4a08      	ldr	r2, [pc, #32]	; (800c428 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	6013      	str	r3, [r2, #0]
}
 800c40c:	bf00      	nop
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	20001094 	.word	0x20001094
 800c418:	20000bbc 	.word	0x20000bbc
 800c41c:	2000107c 	.word	0x2000107c
 800c420:	2000104c 	.word	0x2000104c
 800c424:	20001048 	.word	0x20001048
 800c428:	200010b0 	.word	0x200010b0

0800c42c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b08a      	sub	sp, #40	; 0x28
 800c430:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c432:	2300      	movs	r3, #0
 800c434:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c436:	f000 fb07 	bl	800ca48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c43a:	4b1c      	ldr	r3, [pc, #112]	; (800c4ac <xTimerCreateTimerTask+0x80>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d021      	beq.n	800c486 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c446:	2300      	movs	r3, #0
 800c448:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c44a:	1d3a      	adds	r2, r7, #4
 800c44c:	f107 0108 	add.w	r1, r7, #8
 800c450:	f107 030c 	add.w	r3, r7, #12
 800c454:	4618      	mov	r0, r3
 800c456:	f7fd fed5 	bl	800a204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c45a:	6879      	ldr	r1, [r7, #4]
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	9202      	str	r2, [sp, #8]
 800c462:	9301      	str	r3, [sp, #4]
 800c464:	2302      	movs	r3, #2
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	2300      	movs	r3, #0
 800c46a:	460a      	mov	r2, r1
 800c46c:	4910      	ldr	r1, [pc, #64]	; (800c4b0 <xTimerCreateTimerTask+0x84>)
 800c46e:	4811      	ldr	r0, [pc, #68]	; (800c4b4 <xTimerCreateTimerTask+0x88>)
 800c470:	f7fe ffa4 	bl	800b3bc <xTaskCreateStatic>
 800c474:	4603      	mov	r3, r0
 800c476:	4a10      	ldr	r2, [pc, #64]	; (800c4b8 <xTimerCreateTimerTask+0x8c>)
 800c478:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c47a:	4b0f      	ldr	r3, [pc, #60]	; (800c4b8 <xTimerCreateTimerTask+0x8c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c482:	2301      	movs	r3, #1
 800c484:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	613b      	str	r3, [r7, #16]
}
 800c49e:	bf00      	nop
 800c4a0:	e7fe      	b.n	800c4a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4a2:	697b      	ldr	r3, [r7, #20]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3718      	adds	r7, #24
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	200010ec 	.word	0x200010ec
 800c4b0:	0800d578 	.word	0x0800d578
 800c4b4:	0800c5f1 	.word	0x0800c5f1
 800c4b8:	200010f0 	.word	0x200010f0

0800c4bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08a      	sub	sp, #40	; 0x28
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
 800c4c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10a      	bne.n	800c4ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	623b      	str	r3, [r7, #32]
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4ea:	4b1a      	ldr	r3, [pc, #104]	; (800c554 <xTimerGenericCommand+0x98>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d02a      	beq.n	800c548 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b05      	cmp	r3, #5
 800c502:	dc18      	bgt.n	800c536 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c504:	f7ff fdb4 	bl	800c070 <xTaskGetSchedulerState>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b02      	cmp	r3, #2
 800c50c:	d109      	bne.n	800c522 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c50e:	4b11      	ldr	r3, [pc, #68]	; (800c554 <xTimerGenericCommand+0x98>)
 800c510:	6818      	ldr	r0, [r3, #0]
 800c512:	f107 0110 	add.w	r1, r7, #16
 800c516:	2300      	movs	r3, #0
 800c518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c51a:	f7fe f8e9 	bl	800a6f0 <xQueueGenericSend>
 800c51e:	6278      	str	r0, [r7, #36]	; 0x24
 800c520:	e012      	b.n	800c548 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c522:	4b0c      	ldr	r3, [pc, #48]	; (800c554 <xTimerGenericCommand+0x98>)
 800c524:	6818      	ldr	r0, [r3, #0]
 800c526:	f107 0110 	add.w	r1, r7, #16
 800c52a:	2300      	movs	r3, #0
 800c52c:	2200      	movs	r2, #0
 800c52e:	f7fe f8df 	bl	800a6f0 <xQueueGenericSend>
 800c532:	6278      	str	r0, [r7, #36]	; 0x24
 800c534:	e008      	b.n	800c548 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c536:	4b07      	ldr	r3, [pc, #28]	; (800c554 <xTimerGenericCommand+0x98>)
 800c538:	6818      	ldr	r0, [r3, #0]
 800c53a:	f107 0110 	add.w	r1, r7, #16
 800c53e:	2300      	movs	r3, #0
 800c540:	683a      	ldr	r2, [r7, #0]
 800c542:	f7fe f9d3 	bl	800a8ec <xQueueGenericSendFromISR>
 800c546:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3728      	adds	r7, #40	; 0x28
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	200010ec 	.word	0x200010ec

0800c558 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b088      	sub	sp, #32
 800c55c:	af02      	add	r7, sp, #8
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c562:	4b22      	ldr	r3, [pc, #136]	; (800c5ec <prvProcessExpiredTimer+0x94>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	3304      	adds	r3, #4
 800c570:	4618      	mov	r0, r3
 800c572:	f7fd feeb 	bl	800a34c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c57c:	f003 0304 	and.w	r3, r3, #4
 800c580:	2b00      	cmp	r3, #0
 800c582:	d022      	beq.n	800c5ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	699a      	ldr	r2, [r3, #24]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	18d1      	adds	r1, r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	6978      	ldr	r0, [r7, #20]
 800c592:	f000 f8d1 	bl	800c738 <prvInsertTimerInActiveList>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d01f      	beq.n	800c5dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c59c:	2300      	movs	r3, #0
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	6978      	ldr	r0, [r7, #20]
 800c5a8:	f7ff ff88 	bl	800c4bc <xTimerGenericCommand>
 800c5ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d113      	bne.n	800c5dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	60fb      	str	r3, [r7, #12]
}
 800c5c6:	bf00      	nop
 800c5c8:	e7fe      	b.n	800c5c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5d0:	f023 0301 	bic.w	r3, r3, #1
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	6a1b      	ldr	r3, [r3, #32]
 800c5e0:	6978      	ldr	r0, [r7, #20]
 800c5e2:	4798      	blx	r3
}
 800c5e4:	bf00      	nop
 800c5e6:	3718      	adds	r7, #24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	200010e4 	.word	0x200010e4

0800c5f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5f8:	f107 0308 	add.w	r3, r7, #8
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 f857 	bl	800c6b0 <prvGetNextExpireTime>
 800c602:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	4619      	mov	r1, r3
 800c608:	68f8      	ldr	r0, [r7, #12]
 800c60a:	f000 f803 	bl	800c614 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c60e:	f000 f8d5 	bl	800c7bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c612:	e7f1      	b.n	800c5f8 <prvTimerTask+0x8>

0800c614 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c61e:	f7ff f929 	bl	800b874 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c622:	f107 0308 	add.w	r3, r7, #8
 800c626:	4618      	mov	r0, r3
 800c628:	f000 f866 	bl	800c6f8 <prvSampleTimeNow>
 800c62c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d130      	bne.n	800c696 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d10a      	bne.n	800c650 <prvProcessTimerOrBlockTask+0x3c>
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d806      	bhi.n	800c650 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c642:	f7ff f925 	bl	800b890 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c646:	68f9      	ldr	r1, [r7, #12]
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff ff85 	bl	800c558 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c64e:	e024      	b.n	800c69a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d008      	beq.n	800c668 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c656:	4b13      	ldr	r3, [pc, #76]	; (800c6a4 <prvProcessTimerOrBlockTask+0x90>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d101      	bne.n	800c664 <prvProcessTimerOrBlockTask+0x50>
 800c660:	2301      	movs	r3, #1
 800c662:	e000      	b.n	800c666 <prvProcessTimerOrBlockTask+0x52>
 800c664:	2300      	movs	r3, #0
 800c666:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c668:	4b0f      	ldr	r3, [pc, #60]	; (800c6a8 <prvProcessTimerOrBlockTask+0x94>)
 800c66a:	6818      	ldr	r0, [r3, #0]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	4619      	mov	r1, r3
 800c676:	f7fe fe6d 	bl	800b354 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c67a:	f7ff f909 	bl	800b890 <xTaskResumeAll>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c684:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <prvProcessTimerOrBlockTask+0x98>)
 800c686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c68a:	601a      	str	r2, [r3, #0]
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	f3bf 8f6f 	isb	sy
}
 800c694:	e001      	b.n	800c69a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c696:	f7ff f8fb 	bl	800b890 <xTaskResumeAll>
}
 800c69a:	bf00      	nop
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	200010e8 	.word	0x200010e8
 800c6a8:	200010ec 	.word	0x200010ec
 800c6ac:	e000ed04 	.word	0xe000ed04

0800c6b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6b8:	4b0e      	ldr	r3, [pc, #56]	; (800c6f4 <prvGetNextExpireTime+0x44>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d101      	bne.n	800c6c6 <prvGetNextExpireTime+0x16>
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	e000      	b.n	800c6c8 <prvGetNextExpireTime+0x18>
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d105      	bne.n	800c6e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6d4:	4b07      	ldr	r3, [pc, #28]	; (800c6f4 <prvGetNextExpireTime+0x44>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	60fb      	str	r3, [r7, #12]
 800c6de:	e001      	b.n	800c6e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	200010e4 	.word	0x200010e4

0800c6f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c700:	f7ff f964 	bl	800b9cc <xTaskGetTickCount>
 800c704:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c706:	4b0b      	ldr	r3, [pc, #44]	; (800c734 <prvSampleTimeNow+0x3c>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68fa      	ldr	r2, [r7, #12]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d205      	bcs.n	800c71c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c710:	f000 f936 	bl	800c980 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	601a      	str	r2, [r3, #0]
 800c71a:	e002      	b.n	800c722 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c722:	4a04      	ldr	r2, [pc, #16]	; (800c734 <prvSampleTimeNow+0x3c>)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c728:	68fb      	ldr	r3, [r7, #12]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	200010f4 	.word	0x200010f4

0800c738 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b086      	sub	sp, #24
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
 800c744:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c746:	2300      	movs	r3, #0
 800c748:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d812      	bhi.n	800c784 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	1ad2      	subs	r2, r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d302      	bcc.n	800c772 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c76c:	2301      	movs	r3, #1
 800c76e:	617b      	str	r3, [r7, #20]
 800c770:	e01b      	b.n	800c7aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c772:	4b10      	ldr	r3, [pc, #64]	; (800c7b4 <prvInsertTimerInActiveList+0x7c>)
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	3304      	adds	r3, #4
 800c77a:	4619      	mov	r1, r3
 800c77c:	4610      	mov	r0, r2
 800c77e:	f7fd fdac 	bl	800a2da <vListInsert>
 800c782:	e012      	b.n	800c7aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d206      	bcs.n	800c79a <prvInsertTimerInActiveList+0x62>
 800c78c:	68ba      	ldr	r2, [r7, #8]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	429a      	cmp	r2, r3
 800c792:	d302      	bcc.n	800c79a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c794:	2301      	movs	r3, #1
 800c796:	617b      	str	r3, [r7, #20]
 800c798:	e007      	b.n	800c7aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c79a:	4b07      	ldr	r3, [pc, #28]	; (800c7b8 <prvInsertTimerInActiveList+0x80>)
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	f7fd fd98 	bl	800a2da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7aa:	697b      	ldr	r3, [r7, #20]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3718      	adds	r7, #24
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	200010e8 	.word	0x200010e8
 800c7b8:	200010e4 	.word	0x200010e4

0800c7bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b08e      	sub	sp, #56	; 0x38
 800c7c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7c2:	e0ca      	b.n	800c95a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	da18      	bge.n	800c7fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7ca:	1d3b      	adds	r3, r7, #4
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d10a      	bne.n	800c7ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	61fb      	str	r3, [r7, #28]
}
 800c7e8:	bf00      	nop
 800c7ea:	e7fe      	b.n	800c7ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7f2:	6850      	ldr	r0, [r2, #4]
 800c7f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7f6:	6892      	ldr	r2, [r2, #8]
 800c7f8:	4611      	mov	r1, r2
 800c7fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f2c0 80aa 	blt.w	800c958 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d004      	beq.n	800c81a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	3304      	adds	r3, #4
 800c814:	4618      	mov	r0, r3
 800c816:	f7fd fd99 	bl	800a34c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c81a:	463b      	mov	r3, r7
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7ff ff6b 	bl	800c6f8 <prvSampleTimeNow>
 800c822:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b09      	cmp	r3, #9
 800c828:	f200 8097 	bhi.w	800c95a <prvProcessReceivedCommands+0x19e>
 800c82c:	a201      	add	r2, pc, #4	; (adr r2, 800c834 <prvProcessReceivedCommands+0x78>)
 800c82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c832:	bf00      	nop
 800c834:	0800c85d 	.word	0x0800c85d
 800c838:	0800c85d 	.word	0x0800c85d
 800c83c:	0800c85d 	.word	0x0800c85d
 800c840:	0800c8d1 	.word	0x0800c8d1
 800c844:	0800c8e5 	.word	0x0800c8e5
 800c848:	0800c92f 	.word	0x0800c92f
 800c84c:	0800c85d 	.word	0x0800c85d
 800c850:	0800c85d 	.word	0x0800c85d
 800c854:	0800c8d1 	.word	0x0800c8d1
 800c858:	0800c8e5 	.word	0x0800c8e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c862:	f043 0301 	orr.w	r3, r3, #1
 800c866:	b2da      	uxtb	r2, r3
 800c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c86e:	68ba      	ldr	r2, [r7, #8]
 800c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c872:	699b      	ldr	r3, [r3, #24]
 800c874:	18d1      	adds	r1, r2, r3
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c87a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c87c:	f7ff ff5c 	bl	800c738 <prvInsertTimerInActiveList>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d069      	beq.n	800c95a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c88c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c894:	f003 0304 	and.w	r3, r3, #4
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d05e      	beq.n	800c95a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	699b      	ldr	r3, [r3, #24]
 800c8a2:	441a      	add	r2, r3
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ae:	f7ff fe05 	bl	800c4bc <xTimerGenericCommand>
 800c8b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8b4:	6a3b      	ldr	r3, [r7, #32]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d14f      	bne.n	800c95a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	61bb      	str	r3, [r7, #24]
}
 800c8cc:	bf00      	nop
 800c8ce:	e7fe      	b.n	800c8ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8d6:	f023 0301 	bic.w	r3, r3, #1
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c8e2:	e03a      	b.n	800c95a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8ea:	f043 0301 	orr.w	r3, r3, #1
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10a      	bne.n	800c91a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	617b      	str	r3, [r7, #20]
}
 800c916:	bf00      	nop
 800c918:	e7fe      	b.n	800c918 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91c:	699a      	ldr	r2, [r3, #24]
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	18d1      	adds	r1, r2, r3
 800c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c928:	f7ff ff06 	bl	800c738 <prvInsertTimerInActiveList>
					break;
 800c92c:	e015      	b.n	800c95a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c934:	f003 0302 	and.w	r3, r3, #2
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d103      	bne.n	800c944 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c93c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c93e:	f000 fbdf 	bl	800d100 <vPortFree>
 800c942:	e00a      	b.n	800c95a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c94a:	f023 0301 	bic.w	r3, r3, #1
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c956:	e000      	b.n	800c95a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c958:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c95a:	4b08      	ldr	r3, [pc, #32]	; (800c97c <prvProcessReceivedCommands+0x1c0>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	1d39      	adds	r1, r7, #4
 800c960:	2200      	movs	r2, #0
 800c962:	4618      	mov	r0, r3
 800c964:	f7fe f8ea 	bl	800ab3c <xQueueReceive>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f47f af2a 	bne.w	800c7c4 <prvProcessReceivedCommands+0x8>
	}
}
 800c970:	bf00      	nop
 800c972:	bf00      	nop
 800c974:	3730      	adds	r7, #48	; 0x30
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	200010ec 	.word	0x200010ec

0800c980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c986:	e048      	b.n	800ca1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c988:	4b2d      	ldr	r3, [pc, #180]	; (800ca40 <prvSwitchTimerLists+0xc0>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c992:	4b2b      	ldr	r3, [pc, #172]	; (800ca40 <prvSwitchTimerLists+0xc0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	3304      	adds	r3, #4
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fd fcd3 	bl	800a34c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6a1b      	ldr	r3, [r3, #32]
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9b4:	f003 0304 	and.w	r3, r3, #4
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d02e      	beq.n	800ca1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d90e      	bls.n	800c9ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9da:	4b19      	ldr	r3, [pc, #100]	; (800ca40 <prvSwitchTimerLists+0xc0>)
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	3304      	adds	r3, #4
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	f7fd fc78 	bl	800a2da <vListInsert>
 800c9ea:	e016      	b.n	800ca1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	f7ff fd60 	bl	800c4bc <xTimerGenericCommand>
 800c9fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10a      	bne.n	800ca1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	603b      	str	r3, [r7, #0]
}
 800ca16:	bf00      	nop
 800ca18:	e7fe      	b.n	800ca18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca1a:	4b09      	ldr	r3, [pc, #36]	; (800ca40 <prvSwitchTimerLists+0xc0>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d1b1      	bne.n	800c988 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca24:	4b06      	ldr	r3, [pc, #24]	; (800ca40 <prvSwitchTimerLists+0xc0>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca2a:	4b06      	ldr	r3, [pc, #24]	; (800ca44 <prvSwitchTimerLists+0xc4>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a04      	ldr	r2, [pc, #16]	; (800ca40 <prvSwitchTimerLists+0xc0>)
 800ca30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca32:	4a04      	ldr	r2, [pc, #16]	; (800ca44 <prvSwitchTimerLists+0xc4>)
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	6013      	str	r3, [r2, #0]
}
 800ca38:	bf00      	nop
 800ca3a:	3718      	adds	r7, #24
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	200010e4 	.word	0x200010e4
 800ca44:	200010e8 	.word	0x200010e8

0800ca48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca4e:	f000 f969 	bl	800cd24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca52:	4b15      	ldr	r3, [pc, #84]	; (800caa8 <prvCheckForValidListAndQueue+0x60>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d120      	bne.n	800ca9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca5a:	4814      	ldr	r0, [pc, #80]	; (800caac <prvCheckForValidListAndQueue+0x64>)
 800ca5c:	f7fd fbec 	bl	800a238 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca60:	4813      	ldr	r0, [pc, #76]	; (800cab0 <prvCheckForValidListAndQueue+0x68>)
 800ca62:	f7fd fbe9 	bl	800a238 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca66:	4b13      	ldr	r3, [pc, #76]	; (800cab4 <prvCheckForValidListAndQueue+0x6c>)
 800ca68:	4a10      	ldr	r2, [pc, #64]	; (800caac <prvCheckForValidListAndQueue+0x64>)
 800ca6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca6c:	4b12      	ldr	r3, [pc, #72]	; (800cab8 <prvCheckForValidListAndQueue+0x70>)
 800ca6e:	4a10      	ldr	r2, [pc, #64]	; (800cab0 <prvCheckForValidListAndQueue+0x68>)
 800ca70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca72:	2300      	movs	r3, #0
 800ca74:	9300      	str	r3, [sp, #0]
 800ca76:	4b11      	ldr	r3, [pc, #68]	; (800cabc <prvCheckForValidListAndQueue+0x74>)
 800ca78:	4a11      	ldr	r2, [pc, #68]	; (800cac0 <prvCheckForValidListAndQueue+0x78>)
 800ca7a:	2110      	movs	r1, #16
 800ca7c:	200a      	movs	r0, #10
 800ca7e:	f7fd fcf7 	bl	800a470 <xQueueGenericCreateStatic>
 800ca82:	4603      	mov	r3, r0
 800ca84:	4a08      	ldr	r2, [pc, #32]	; (800caa8 <prvCheckForValidListAndQueue+0x60>)
 800ca86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca88:	4b07      	ldr	r3, [pc, #28]	; (800caa8 <prvCheckForValidListAndQueue+0x60>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d005      	beq.n	800ca9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca90:	4b05      	ldr	r3, [pc, #20]	; (800caa8 <prvCheckForValidListAndQueue+0x60>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	490b      	ldr	r1, [pc, #44]	; (800cac4 <prvCheckForValidListAndQueue+0x7c>)
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe fc08 	bl	800b2ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca9c:	f000 f972 	bl	800cd84 <vPortExitCritical>
}
 800caa0:	bf00      	nop
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	200010ec 	.word	0x200010ec
 800caac:	200010bc 	.word	0x200010bc
 800cab0:	200010d0 	.word	0x200010d0
 800cab4:	200010e4 	.word	0x200010e4
 800cab8:	200010e8 	.word	0x200010e8
 800cabc:	20001198 	.word	0x20001198
 800cac0:	200010f8 	.word	0x200010f8
 800cac4:	0800d580 	.word	0x0800d580

0800cac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	3b04      	subs	r3, #4
 800cad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3b04      	subs	r3, #4
 800cae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	f023 0201 	bic.w	r2, r3, #1
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	3b04      	subs	r3, #4
 800caf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800caf8:	4a0c      	ldr	r2, [pc, #48]	; (800cb2c <pxPortInitialiseStack+0x64>)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	3b14      	subs	r3, #20
 800cb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	3b04      	subs	r3, #4
 800cb0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f06f 0202 	mvn.w	r2, #2
 800cb16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3b20      	subs	r3, #32
 800cb1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3714      	adds	r7, #20
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	0800cb31 	.word	0x0800cb31

0800cb30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb3a:	4b12      	ldr	r3, [pc, #72]	; (800cb84 <prvTaskExitError+0x54>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb42:	d00a      	beq.n	800cb5a <prvTaskExitError+0x2a>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	60fb      	str	r3, [r7, #12]
}
 800cb56:	bf00      	nop
 800cb58:	e7fe      	b.n	800cb58 <prvTaskExitError+0x28>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	60bb      	str	r3, [r7, #8]
}
 800cb6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb6e:	bf00      	nop
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d0fc      	beq.n	800cb70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb76:	bf00      	nop
 800cb78:	bf00      	nop
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr
 800cb84:	20000014 	.word	0x20000014
	...

0800cb90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb90:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <pxCurrentTCBConst2>)
 800cb92:	6819      	ldr	r1, [r3, #0]
 800cb94:	6808      	ldr	r0, [r1, #0]
 800cb96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9a:	f380 8809 	msr	PSP, r0
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f04f 0000 	mov.w	r0, #0
 800cba6:	f380 8811 	msr	BASEPRI, r0
 800cbaa:	4770      	bx	lr
 800cbac:	f3af 8000 	nop.w

0800cbb0 <pxCurrentTCBConst2>:
 800cbb0:	20000bbc 	.word	0x20000bbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbb4:	bf00      	nop
 800cbb6:	bf00      	nop

0800cbb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbb8:	4808      	ldr	r0, [pc, #32]	; (800cbdc <prvPortStartFirstTask+0x24>)
 800cbba:	6800      	ldr	r0, [r0, #0]
 800cbbc:	6800      	ldr	r0, [r0, #0]
 800cbbe:	f380 8808 	msr	MSP, r0
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	f380 8814 	msr	CONTROL, r0
 800cbca:	b662      	cpsie	i
 800cbcc:	b661      	cpsie	f
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	df00      	svc	0
 800cbd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbda:	bf00      	nop
 800cbdc:	e000ed08 	.word	0xe000ed08

0800cbe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cbe6:	4b46      	ldr	r3, [pc, #280]	; (800cd00 <xPortStartScheduler+0x120>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a46      	ldr	r2, [pc, #280]	; (800cd04 <xPortStartScheduler+0x124>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d10a      	bne.n	800cc06 <xPortStartScheduler+0x26>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	613b      	str	r3, [r7, #16]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc06:	4b3e      	ldr	r3, [pc, #248]	; (800cd00 <xPortStartScheduler+0x120>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a3f      	ldr	r2, [pc, #252]	; (800cd08 <xPortStartScheduler+0x128>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d10a      	bne.n	800cc26 <xPortStartScheduler+0x46>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	60fb      	str	r3, [r7, #12]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc26:	4b39      	ldr	r3, [pc, #228]	; (800cd0c <xPortStartScheduler+0x12c>)
 800cc28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	22ff      	movs	r2, #255	; 0xff
 800cc36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc40:	78fb      	ldrb	r3, [r7, #3]
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	4b31      	ldr	r3, [pc, #196]	; (800cd10 <xPortStartScheduler+0x130>)
 800cc4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc4e:	4b31      	ldr	r3, [pc, #196]	; (800cd14 <xPortStartScheduler+0x134>)
 800cc50:	2207      	movs	r2, #7
 800cc52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc54:	e009      	b.n	800cc6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc56:	4b2f      	ldr	r3, [pc, #188]	; (800cd14 <xPortStartScheduler+0x134>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	4a2d      	ldr	r2, [pc, #180]	; (800cd14 <xPortStartScheduler+0x134>)
 800cc5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc60:	78fb      	ldrb	r3, [r7, #3]
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc6a:	78fb      	ldrb	r3, [r7, #3]
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc72:	2b80      	cmp	r3, #128	; 0x80
 800cc74:	d0ef      	beq.n	800cc56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc76:	4b27      	ldr	r3, [pc, #156]	; (800cd14 <xPortStartScheduler+0x134>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f1c3 0307 	rsb	r3, r3, #7
 800cc7e:	2b04      	cmp	r3, #4
 800cc80:	d00a      	beq.n	800cc98 <xPortStartScheduler+0xb8>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	60bb      	str	r3, [r7, #8]
}
 800cc94:	bf00      	nop
 800cc96:	e7fe      	b.n	800cc96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc98:	4b1e      	ldr	r3, [pc, #120]	; (800cd14 <xPortStartScheduler+0x134>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	021b      	lsls	r3, r3, #8
 800cc9e:	4a1d      	ldr	r2, [pc, #116]	; (800cd14 <xPortStartScheduler+0x134>)
 800cca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cca2:	4b1c      	ldr	r3, [pc, #112]	; (800cd14 <xPortStartScheduler+0x134>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccaa:	4a1a      	ldr	r2, [pc, #104]	; (800cd14 <xPortStartScheduler+0x134>)
 800ccac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	b2da      	uxtb	r2, r3
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccb6:	4b18      	ldr	r3, [pc, #96]	; (800cd18 <xPortStartScheduler+0x138>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a17      	ldr	r2, [pc, #92]	; (800cd18 <xPortStartScheduler+0x138>)
 800ccbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ccc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ccc2:	4b15      	ldr	r3, [pc, #84]	; (800cd18 <xPortStartScheduler+0x138>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a14      	ldr	r2, [pc, #80]	; (800cd18 <xPortStartScheduler+0x138>)
 800ccc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccce:	f000 f8dd 	bl	800ce8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccd2:	4b12      	ldr	r3, [pc, #72]	; (800cd1c <xPortStartScheduler+0x13c>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccd8:	f000 f8fc 	bl	800ced4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccdc:	4b10      	ldr	r3, [pc, #64]	; (800cd20 <xPortStartScheduler+0x140>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a0f      	ldr	r2, [pc, #60]	; (800cd20 <xPortStartScheduler+0x140>)
 800cce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cce8:	f7ff ff66 	bl	800cbb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ccec:	f7fe ff4a 	bl	800bb84 <vTaskSwitchContext>
	prvTaskExitError();
 800ccf0:	f7ff ff1e 	bl	800cb30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3718      	adds	r7, #24
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	e000ed00 	.word	0xe000ed00
 800cd04:	410fc271 	.word	0x410fc271
 800cd08:	410fc270 	.word	0x410fc270
 800cd0c:	e000e400 	.word	0xe000e400
 800cd10:	200011e8 	.word	0x200011e8
 800cd14:	200011ec 	.word	0x200011ec
 800cd18:	e000ed20 	.word	0xe000ed20
 800cd1c:	20000014 	.word	0x20000014
 800cd20:	e000ef34 	.word	0xe000ef34

0800cd24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
	__asm volatile
 800cd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	607b      	str	r3, [r7, #4]
}
 800cd3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd3e:	4b0f      	ldr	r3, [pc, #60]	; (800cd7c <vPortEnterCritical+0x58>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3301      	adds	r3, #1
 800cd44:	4a0d      	ldr	r2, [pc, #52]	; (800cd7c <vPortEnterCritical+0x58>)
 800cd46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd48:	4b0c      	ldr	r3, [pc, #48]	; (800cd7c <vPortEnterCritical+0x58>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d10f      	bne.n	800cd70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd50:	4b0b      	ldr	r3, [pc, #44]	; (800cd80 <vPortEnterCritical+0x5c>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00a      	beq.n	800cd70 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5e:	f383 8811 	msr	BASEPRI, r3
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	f3bf 8f4f 	dsb	sy
 800cd6a:	603b      	str	r3, [r7, #0]
}
 800cd6c:	bf00      	nop
 800cd6e:	e7fe      	b.n	800cd6e <vPortEnterCritical+0x4a>
	}
}
 800cd70:	bf00      	nop
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr
 800cd7c:	20000014 	.word	0x20000014
 800cd80:	e000ed04 	.word	0xe000ed04

0800cd84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd8a:	4b12      	ldr	r3, [pc, #72]	; (800cdd4 <vPortExitCritical+0x50>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10a      	bne.n	800cda8 <vPortExitCritical+0x24>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	607b      	str	r3, [r7, #4]
}
 800cda4:	bf00      	nop
 800cda6:	e7fe      	b.n	800cda6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cda8:	4b0a      	ldr	r3, [pc, #40]	; (800cdd4 <vPortExitCritical+0x50>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	4a09      	ldr	r2, [pc, #36]	; (800cdd4 <vPortExitCritical+0x50>)
 800cdb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdb2:	4b08      	ldr	r3, [pc, #32]	; (800cdd4 <vPortExitCritical+0x50>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d105      	bne.n	800cdc6 <vPortExitCritical+0x42>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	f383 8811 	msr	BASEPRI, r3
}
 800cdc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdc6:	bf00      	nop
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	20000014 	.word	0x20000014
	...

0800cde0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cde0:	f3ef 8009 	mrs	r0, PSP
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	4b15      	ldr	r3, [pc, #84]	; (800ce40 <pxCurrentTCBConst>)
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	f01e 0f10 	tst.w	lr, #16
 800cdf0:	bf08      	it	eq
 800cdf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cdf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfa:	6010      	str	r0, [r2, #0]
 800cdfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce04:	f380 8811 	msr	BASEPRI, r0
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f7fe feb8 	bl	800bb84 <vTaskSwitchContext>
 800ce14:	f04f 0000 	mov.w	r0, #0
 800ce18:	f380 8811 	msr	BASEPRI, r0
 800ce1c:	bc09      	pop	{r0, r3}
 800ce1e:	6819      	ldr	r1, [r3, #0]
 800ce20:	6808      	ldr	r0, [r1, #0]
 800ce22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce26:	f01e 0f10 	tst.w	lr, #16
 800ce2a:	bf08      	it	eq
 800ce2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce30:	f380 8809 	msr	PSP, r0
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	f3af 8000 	nop.w

0800ce40 <pxCurrentTCBConst>:
 800ce40:	20000bbc 	.word	0x20000bbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce44:	bf00      	nop
 800ce46:	bf00      	nop

0800ce48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	607b      	str	r3, [r7, #4]
}
 800ce60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce62:	f7fe fdd5 	bl	800ba10 <xTaskIncrementTick>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d003      	beq.n	800ce74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce6c:	4b06      	ldr	r3, [pc, #24]	; (800ce88 <xPortSysTickHandler+0x40>)
 800ce6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	2300      	movs	r3, #0
 800ce76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	f383 8811 	msr	BASEPRI, r3
}
 800ce7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce80:	bf00      	nop
 800ce82:	3708      	adds	r7, #8
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	e000ed04 	.word	0xe000ed04

0800ce8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce90:	4b0b      	ldr	r3, [pc, #44]	; (800cec0 <vPortSetupTimerInterrupt+0x34>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce96:	4b0b      	ldr	r3, [pc, #44]	; (800cec4 <vPortSetupTimerInterrupt+0x38>)
 800ce98:	2200      	movs	r2, #0
 800ce9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce9c:	4b0a      	ldr	r3, [pc, #40]	; (800cec8 <vPortSetupTimerInterrupt+0x3c>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a0a      	ldr	r2, [pc, #40]	; (800cecc <vPortSetupTimerInterrupt+0x40>)
 800cea2:	fba2 2303 	umull	r2, r3, r2, r3
 800cea6:	099b      	lsrs	r3, r3, #6
 800cea8:	4a09      	ldr	r2, [pc, #36]	; (800ced0 <vPortSetupTimerInterrupt+0x44>)
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ceae:	4b04      	ldr	r3, [pc, #16]	; (800cec0 <vPortSetupTimerInterrupt+0x34>)
 800ceb0:	2207      	movs	r2, #7
 800ceb2:	601a      	str	r2, [r3, #0]
}
 800ceb4:	bf00      	nop
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	e000e010 	.word	0xe000e010
 800cec4:	e000e018 	.word	0xe000e018
 800cec8:	20000008 	.word	0x20000008
 800cecc:	10624dd3 	.word	0x10624dd3
 800ced0:	e000e014 	.word	0xe000e014

0800ced4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ced4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cee4 <vPortEnableVFP+0x10>
 800ced8:	6801      	ldr	r1, [r0, #0]
 800ceda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cede:	6001      	str	r1, [r0, #0]
 800cee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cee2:	bf00      	nop
 800cee4:	e000ed88 	.word	0xe000ed88

0800cee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ceee:	f3ef 8305 	mrs	r3, IPSR
 800cef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2b0f      	cmp	r3, #15
 800cef8:	d914      	bls.n	800cf24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cefa:	4a17      	ldr	r2, [pc, #92]	; (800cf58 <vPortValidateInterruptPriority+0x70>)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	4413      	add	r3, r2
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf04:	4b15      	ldr	r3, [pc, #84]	; (800cf5c <vPortValidateInterruptPriority+0x74>)
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	7afa      	ldrb	r2, [r7, #11]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d20a      	bcs.n	800cf24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	607b      	str	r3, [r7, #4]
}
 800cf20:	bf00      	nop
 800cf22:	e7fe      	b.n	800cf22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf24:	4b0e      	ldr	r3, [pc, #56]	; (800cf60 <vPortValidateInterruptPriority+0x78>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf2c:	4b0d      	ldr	r3, [pc, #52]	; (800cf64 <vPortValidateInterruptPriority+0x7c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d90a      	bls.n	800cf4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf38:	f383 8811 	msr	BASEPRI, r3
 800cf3c:	f3bf 8f6f 	isb	sy
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	603b      	str	r3, [r7, #0]
}
 800cf46:	bf00      	nop
 800cf48:	e7fe      	b.n	800cf48 <vPortValidateInterruptPriority+0x60>
	}
 800cf4a:	bf00      	nop
 800cf4c:	3714      	adds	r7, #20
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	e000e3f0 	.word	0xe000e3f0
 800cf5c:	200011e8 	.word	0x200011e8
 800cf60:	e000ed0c 	.word	0xe000ed0c
 800cf64:	200011ec 	.word	0x200011ec

0800cf68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08a      	sub	sp, #40	; 0x28
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf74:	f7fe fc7e 	bl	800b874 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf78:	4b5b      	ldr	r3, [pc, #364]	; (800d0e8 <pvPortMalloc+0x180>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf80:	f000 f920 	bl	800d1c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf84:	4b59      	ldr	r3, [pc, #356]	; (800d0ec <pvPortMalloc+0x184>)
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4013      	ands	r3, r2
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f040 8093 	bne.w	800d0b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d01d      	beq.n	800cfd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cf98:	2208      	movs	r2, #8
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f003 0307 	and.w	r3, r3, #7
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d014      	beq.n	800cfd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f023 0307 	bic.w	r3, r3, #7
 800cfb0:	3308      	adds	r3, #8
 800cfb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f003 0307 	and.w	r3, r3, #7
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00a      	beq.n	800cfd4 <pvPortMalloc+0x6c>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	617b      	str	r3, [r7, #20]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d06e      	beq.n	800d0b8 <pvPortMalloc+0x150>
 800cfda:	4b45      	ldr	r3, [pc, #276]	; (800d0f0 <pvPortMalloc+0x188>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d869      	bhi.n	800d0b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cfe4:	4b43      	ldr	r3, [pc, #268]	; (800d0f4 <pvPortMalloc+0x18c>)
 800cfe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cfe8:	4b42      	ldr	r3, [pc, #264]	; (800d0f4 <pvPortMalloc+0x18c>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfee:	e004      	b.n	800cffa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	429a      	cmp	r2, r3
 800d002:	d903      	bls.n	800d00c <pvPortMalloc+0xa4>
 800d004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1f1      	bne.n	800cff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d00c:	4b36      	ldr	r3, [pc, #216]	; (800d0e8 <pvPortMalloc+0x180>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d012:	429a      	cmp	r2, r3
 800d014:	d050      	beq.n	800d0b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2208      	movs	r2, #8
 800d01c:	4413      	add	r3, r2
 800d01e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	6a3b      	ldr	r3, [r7, #32]
 800d026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	1ad2      	subs	r2, r2, r3
 800d030:	2308      	movs	r3, #8
 800d032:	005b      	lsls	r3, r3, #1
 800d034:	429a      	cmp	r2, r3
 800d036:	d91f      	bls.n	800d078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4413      	add	r3, r2
 800d03e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	f003 0307 	and.w	r3, r3, #7
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00a      	beq.n	800d060 <pvPortMalloc+0xf8>
	__asm volatile
 800d04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04e:	f383 8811 	msr	BASEPRI, r3
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	613b      	str	r3, [r7, #16]
}
 800d05c:	bf00      	nop
 800d05e:	e7fe      	b.n	800d05e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	685a      	ldr	r2, [r3, #4]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	1ad2      	subs	r2, r2, r3
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d072:	69b8      	ldr	r0, [r7, #24]
 800d074:	f000 f908 	bl	800d288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d078:	4b1d      	ldr	r3, [pc, #116]	; (800d0f0 <pvPortMalloc+0x188>)
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	4a1b      	ldr	r2, [pc, #108]	; (800d0f0 <pvPortMalloc+0x188>)
 800d084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d086:	4b1a      	ldr	r3, [pc, #104]	; (800d0f0 <pvPortMalloc+0x188>)
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	4b1b      	ldr	r3, [pc, #108]	; (800d0f8 <pvPortMalloc+0x190>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d203      	bcs.n	800d09a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d092:	4b17      	ldr	r3, [pc, #92]	; (800d0f0 <pvPortMalloc+0x188>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a18      	ldr	r2, [pc, #96]	; (800d0f8 <pvPortMalloc+0x190>)
 800d098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09c:	685a      	ldr	r2, [r3, #4]
 800d09e:	4b13      	ldr	r3, [pc, #76]	; (800d0ec <pvPortMalloc+0x184>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	431a      	orrs	r2, r3
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0ae:	4b13      	ldr	r3, [pc, #76]	; (800d0fc <pvPortMalloc+0x194>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	4a11      	ldr	r2, [pc, #68]	; (800d0fc <pvPortMalloc+0x194>)
 800d0b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0b8:	f7fe fbea 	bl	800b890 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	f003 0307 	and.w	r3, r3, #7
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00a      	beq.n	800d0dc <pvPortMalloc+0x174>
	__asm volatile
 800d0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ca:	f383 8811 	msr	BASEPRI, r3
 800d0ce:	f3bf 8f6f 	isb	sy
 800d0d2:	f3bf 8f4f 	dsb	sy
 800d0d6:	60fb      	str	r3, [r7, #12]
}
 800d0d8:	bf00      	nop
 800d0da:	e7fe      	b.n	800d0da <pvPortMalloc+0x172>
	return pvReturn;
 800d0dc:	69fb      	ldr	r3, [r7, #28]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3728      	adds	r7, #40	; 0x28
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	20001db0 	.word	0x20001db0
 800d0ec:	20001dc4 	.word	0x20001dc4
 800d0f0:	20001db4 	.word	0x20001db4
 800d0f4:	20001da8 	.word	0x20001da8
 800d0f8:	20001db8 	.word	0x20001db8
 800d0fc:	20001dbc 	.word	0x20001dbc

0800d100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b086      	sub	sp, #24
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d04d      	beq.n	800d1ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d112:	2308      	movs	r3, #8
 800d114:	425b      	negs	r3, r3
 800d116:	697a      	ldr	r2, [r7, #20]
 800d118:	4413      	add	r3, r2
 800d11a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	685a      	ldr	r2, [r3, #4]
 800d124:	4b24      	ldr	r3, [pc, #144]	; (800d1b8 <vPortFree+0xb8>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4013      	ands	r3, r2
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10a      	bne.n	800d144 <vPortFree+0x44>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	60fb      	str	r3, [r7, #12]
}
 800d140:	bf00      	nop
 800d142:	e7fe      	b.n	800d142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00a      	beq.n	800d162 <vPortFree+0x62>
	__asm volatile
 800d14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d150:	f383 8811 	msr	BASEPRI, r3
 800d154:	f3bf 8f6f 	isb	sy
 800d158:	f3bf 8f4f 	dsb	sy
 800d15c:	60bb      	str	r3, [r7, #8]
}
 800d15e:	bf00      	nop
 800d160:	e7fe      	b.n	800d160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	4b14      	ldr	r3, [pc, #80]	; (800d1b8 <vPortFree+0xb8>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4013      	ands	r3, r2
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d01e      	beq.n	800d1ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d11a      	bne.n	800d1ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	4b0e      	ldr	r3, [pc, #56]	; (800d1b8 <vPortFree+0xb8>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	43db      	mvns	r3, r3
 800d182:	401a      	ands	r2, r3
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d188:	f7fe fb74 	bl	800b874 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	685a      	ldr	r2, [r3, #4]
 800d190:	4b0a      	ldr	r3, [pc, #40]	; (800d1bc <vPortFree+0xbc>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4413      	add	r3, r2
 800d196:	4a09      	ldr	r2, [pc, #36]	; (800d1bc <vPortFree+0xbc>)
 800d198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d19a:	6938      	ldr	r0, [r7, #16]
 800d19c:	f000 f874 	bl	800d288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1a0:	4b07      	ldr	r3, [pc, #28]	; (800d1c0 <vPortFree+0xc0>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	4a06      	ldr	r2, [pc, #24]	; (800d1c0 <vPortFree+0xc0>)
 800d1a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1aa:	f7fe fb71 	bl	800b890 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1ae:	bf00      	nop
 800d1b0:	3718      	adds	r7, #24
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	20001dc4 	.word	0x20001dc4
 800d1bc:	20001db4 	.word	0x20001db4
 800d1c0:	20001dc0 	.word	0x20001dc0

0800d1c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d1ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1d0:	4b27      	ldr	r3, [pc, #156]	; (800d270 <prvHeapInit+0xac>)
 800d1d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f003 0307 	and.w	r3, r3, #7
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00c      	beq.n	800d1f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	3307      	adds	r3, #7
 800d1e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f023 0307 	bic.w	r3, r3, #7
 800d1ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1ec:	68ba      	ldr	r2, [r7, #8]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	4a1f      	ldr	r2, [pc, #124]	; (800d270 <prvHeapInit+0xac>)
 800d1f4:	4413      	add	r3, r2
 800d1f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1fc:	4a1d      	ldr	r2, [pc, #116]	; (800d274 <prvHeapInit+0xb0>)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d202:	4b1c      	ldr	r3, [pc, #112]	; (800d274 <prvHeapInit+0xb0>)
 800d204:	2200      	movs	r2, #0
 800d206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	4413      	add	r3, r2
 800d20e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d210:	2208      	movs	r2, #8
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	1a9b      	subs	r3, r3, r2
 800d216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f023 0307 	bic.w	r3, r3, #7
 800d21e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	4a15      	ldr	r2, [pc, #84]	; (800d278 <prvHeapInit+0xb4>)
 800d224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d226:	4b14      	ldr	r3, [pc, #80]	; (800d278 <prvHeapInit+0xb4>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2200      	movs	r2, #0
 800d22c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d22e:	4b12      	ldr	r3, [pc, #72]	; (800d278 <prvHeapInit+0xb4>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2200      	movs	r2, #0
 800d234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	1ad2      	subs	r2, r2, r3
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d244:	4b0c      	ldr	r3, [pc, #48]	; (800d278 <prvHeapInit+0xb4>)
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	4a0a      	ldr	r2, [pc, #40]	; (800d27c <prvHeapInit+0xb8>)
 800d252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	4a09      	ldr	r2, [pc, #36]	; (800d280 <prvHeapInit+0xbc>)
 800d25a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d25c:	4b09      	ldr	r3, [pc, #36]	; (800d284 <prvHeapInit+0xc0>)
 800d25e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d262:	601a      	str	r2, [r3, #0]
}
 800d264:	bf00      	nop
 800d266:	3714      	adds	r7, #20
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr
 800d270:	200011f0 	.word	0x200011f0
 800d274:	20001da8 	.word	0x20001da8
 800d278:	20001db0 	.word	0x20001db0
 800d27c:	20001db8 	.word	0x20001db8
 800d280:	20001db4 	.word	0x20001db4
 800d284:	20001dc4 	.word	0x20001dc4

0800d288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d290:	4b28      	ldr	r3, [pc, #160]	; (800d334 <prvInsertBlockIntoFreeList+0xac>)
 800d292:	60fb      	str	r3, [r7, #12]
 800d294:	e002      	b.n	800d29c <prvInsertBlockIntoFreeList+0x14>
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	60fb      	str	r3, [r7, #12]
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d8f7      	bhi.n	800d296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	68ba      	ldr	r2, [r7, #8]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d108      	bne.n	800d2ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	685a      	ldr	r2, [r3, #4]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	441a      	add	r2, r3
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	68ba      	ldr	r2, [r7, #8]
 800d2d4:	441a      	add	r2, r3
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d118      	bne.n	800d310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	4b15      	ldr	r3, [pc, #84]	; (800d338 <prvInsertBlockIntoFreeList+0xb0>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d00d      	beq.n	800d306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	441a      	add	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	e008      	b.n	800d318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d306:	4b0c      	ldr	r3, [pc, #48]	; (800d338 <prvInsertBlockIntoFreeList+0xb0>)
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	601a      	str	r2, [r3, #0]
 800d30e:	e003      	b.n	800d318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d002      	beq.n	800d326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d326:	bf00      	nop
 800d328:	3714      	adds	r7, #20
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	20001da8 	.word	0x20001da8
 800d338:	20001db0 	.word	0x20001db0

0800d33c <__libc_init_array>:
 800d33c:	b570      	push	{r4, r5, r6, lr}
 800d33e:	4d0d      	ldr	r5, [pc, #52]	; (800d374 <__libc_init_array+0x38>)
 800d340:	4c0d      	ldr	r4, [pc, #52]	; (800d378 <__libc_init_array+0x3c>)
 800d342:	1b64      	subs	r4, r4, r5
 800d344:	10a4      	asrs	r4, r4, #2
 800d346:	2600      	movs	r6, #0
 800d348:	42a6      	cmp	r6, r4
 800d34a:	d109      	bne.n	800d360 <__libc_init_array+0x24>
 800d34c:	4d0b      	ldr	r5, [pc, #44]	; (800d37c <__libc_init_array+0x40>)
 800d34e:	4c0c      	ldr	r4, [pc, #48]	; (800d380 <__libc_init_array+0x44>)
 800d350:	f000 f8f2 	bl	800d538 <_init>
 800d354:	1b64      	subs	r4, r4, r5
 800d356:	10a4      	asrs	r4, r4, #2
 800d358:	2600      	movs	r6, #0
 800d35a:	42a6      	cmp	r6, r4
 800d35c:	d105      	bne.n	800d36a <__libc_init_array+0x2e>
 800d35e:	bd70      	pop	{r4, r5, r6, pc}
 800d360:	f855 3b04 	ldr.w	r3, [r5], #4
 800d364:	4798      	blx	r3
 800d366:	3601      	adds	r6, #1
 800d368:	e7ee      	b.n	800d348 <__libc_init_array+0xc>
 800d36a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d36e:	4798      	blx	r3
 800d370:	3601      	adds	r6, #1
 800d372:	e7f2      	b.n	800d35a <__libc_init_array+0x1e>
 800d374:	0800d69c 	.word	0x0800d69c
 800d378:	0800d69c 	.word	0x0800d69c
 800d37c:	0800d69c 	.word	0x0800d69c
 800d380:	0800d6a0 	.word	0x0800d6a0

0800d384 <__retarget_lock_acquire_recursive>:
 800d384:	4770      	bx	lr

0800d386 <__retarget_lock_release_recursive>:
 800d386:	4770      	bx	lr

0800d388 <memcpy>:
 800d388:	440a      	add	r2, r1
 800d38a:	4291      	cmp	r1, r2
 800d38c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d390:	d100      	bne.n	800d394 <memcpy+0xc>
 800d392:	4770      	bx	lr
 800d394:	b510      	push	{r4, lr}
 800d396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d39a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d39e:	4291      	cmp	r1, r2
 800d3a0:	d1f9      	bne.n	800d396 <memcpy+0xe>
 800d3a2:	bd10      	pop	{r4, pc}

0800d3a4 <memset>:
 800d3a4:	4402      	add	r2, r0
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d100      	bne.n	800d3ae <memset+0xa>
 800d3ac:	4770      	bx	lr
 800d3ae:	f803 1b01 	strb.w	r1, [r3], #1
 800d3b2:	e7f9      	b.n	800d3a8 <memset+0x4>

0800d3b4 <cleanup_glue>:
 800d3b4:	b538      	push	{r3, r4, r5, lr}
 800d3b6:	460c      	mov	r4, r1
 800d3b8:	6809      	ldr	r1, [r1, #0]
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	b109      	cbz	r1, 800d3c2 <cleanup_glue+0xe>
 800d3be:	f7ff fff9 	bl	800d3b4 <cleanup_glue>
 800d3c2:	4621      	mov	r1, r4
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3ca:	f000 b869 	b.w	800d4a0 <_free_r>
	...

0800d3d0 <_reclaim_reent>:
 800d3d0:	4b2c      	ldr	r3, [pc, #176]	; (800d484 <_reclaim_reent+0xb4>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4283      	cmp	r3, r0
 800d3d6:	b570      	push	{r4, r5, r6, lr}
 800d3d8:	4604      	mov	r4, r0
 800d3da:	d051      	beq.n	800d480 <_reclaim_reent+0xb0>
 800d3dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d3de:	b143      	cbz	r3, 800d3f2 <_reclaim_reent+0x22>
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d14a      	bne.n	800d47c <_reclaim_reent+0xac>
 800d3e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3e8:	6819      	ldr	r1, [r3, #0]
 800d3ea:	b111      	cbz	r1, 800d3f2 <_reclaim_reent+0x22>
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f000 f857 	bl	800d4a0 <_free_r>
 800d3f2:	6961      	ldr	r1, [r4, #20]
 800d3f4:	b111      	cbz	r1, 800d3fc <_reclaim_reent+0x2c>
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f000 f852 	bl	800d4a0 <_free_r>
 800d3fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d3fe:	b111      	cbz	r1, 800d406 <_reclaim_reent+0x36>
 800d400:	4620      	mov	r0, r4
 800d402:	f000 f84d 	bl	800d4a0 <_free_r>
 800d406:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d408:	b111      	cbz	r1, 800d410 <_reclaim_reent+0x40>
 800d40a:	4620      	mov	r0, r4
 800d40c:	f000 f848 	bl	800d4a0 <_free_r>
 800d410:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d412:	b111      	cbz	r1, 800d41a <_reclaim_reent+0x4a>
 800d414:	4620      	mov	r0, r4
 800d416:	f000 f843 	bl	800d4a0 <_free_r>
 800d41a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d41c:	b111      	cbz	r1, 800d424 <_reclaim_reent+0x54>
 800d41e:	4620      	mov	r0, r4
 800d420:	f000 f83e 	bl	800d4a0 <_free_r>
 800d424:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d426:	b111      	cbz	r1, 800d42e <_reclaim_reent+0x5e>
 800d428:	4620      	mov	r0, r4
 800d42a:	f000 f839 	bl	800d4a0 <_free_r>
 800d42e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d430:	b111      	cbz	r1, 800d438 <_reclaim_reent+0x68>
 800d432:	4620      	mov	r0, r4
 800d434:	f000 f834 	bl	800d4a0 <_free_r>
 800d438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d43a:	b111      	cbz	r1, 800d442 <_reclaim_reent+0x72>
 800d43c:	4620      	mov	r0, r4
 800d43e:	f000 f82f 	bl	800d4a0 <_free_r>
 800d442:	69a3      	ldr	r3, [r4, #24]
 800d444:	b1e3      	cbz	r3, 800d480 <_reclaim_reent+0xb0>
 800d446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d448:	4620      	mov	r0, r4
 800d44a:	4798      	blx	r3
 800d44c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d44e:	b1b9      	cbz	r1, 800d480 <_reclaim_reent+0xb0>
 800d450:	4620      	mov	r0, r4
 800d452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d456:	f7ff bfad 	b.w	800d3b4 <cleanup_glue>
 800d45a:	5949      	ldr	r1, [r1, r5]
 800d45c:	b941      	cbnz	r1, 800d470 <_reclaim_reent+0xa0>
 800d45e:	3504      	adds	r5, #4
 800d460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d462:	2d80      	cmp	r5, #128	; 0x80
 800d464:	68d9      	ldr	r1, [r3, #12]
 800d466:	d1f8      	bne.n	800d45a <_reclaim_reent+0x8a>
 800d468:	4620      	mov	r0, r4
 800d46a:	f000 f819 	bl	800d4a0 <_free_r>
 800d46e:	e7ba      	b.n	800d3e6 <_reclaim_reent+0x16>
 800d470:	680e      	ldr	r6, [r1, #0]
 800d472:	4620      	mov	r0, r4
 800d474:	f000 f814 	bl	800d4a0 <_free_r>
 800d478:	4631      	mov	r1, r6
 800d47a:	e7ef      	b.n	800d45c <_reclaim_reent+0x8c>
 800d47c:	2500      	movs	r5, #0
 800d47e:	e7ef      	b.n	800d460 <_reclaim_reent+0x90>
 800d480:	bd70      	pop	{r4, r5, r6, pc}
 800d482:	bf00      	nop
 800d484:	20000018 	.word	0x20000018

0800d488 <__malloc_lock>:
 800d488:	4801      	ldr	r0, [pc, #4]	; (800d490 <__malloc_lock+0x8>)
 800d48a:	f7ff bf7b 	b.w	800d384 <__retarget_lock_acquire_recursive>
 800d48e:	bf00      	nop
 800d490:	20001dc8 	.word	0x20001dc8

0800d494 <__malloc_unlock>:
 800d494:	4801      	ldr	r0, [pc, #4]	; (800d49c <__malloc_unlock+0x8>)
 800d496:	f7ff bf76 	b.w	800d386 <__retarget_lock_release_recursive>
 800d49a:	bf00      	nop
 800d49c:	20001dc8 	.word	0x20001dc8

0800d4a0 <_free_r>:
 800d4a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4a2:	2900      	cmp	r1, #0
 800d4a4:	d044      	beq.n	800d530 <_free_r+0x90>
 800d4a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4aa:	9001      	str	r0, [sp, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f1a1 0404 	sub.w	r4, r1, #4
 800d4b2:	bfb8      	it	lt
 800d4b4:	18e4      	addlt	r4, r4, r3
 800d4b6:	f7ff ffe7 	bl	800d488 <__malloc_lock>
 800d4ba:	4a1e      	ldr	r2, [pc, #120]	; (800d534 <_free_r+0x94>)
 800d4bc:	9801      	ldr	r0, [sp, #4]
 800d4be:	6813      	ldr	r3, [r2, #0]
 800d4c0:	b933      	cbnz	r3, 800d4d0 <_free_r+0x30>
 800d4c2:	6063      	str	r3, [r4, #4]
 800d4c4:	6014      	str	r4, [r2, #0]
 800d4c6:	b003      	add	sp, #12
 800d4c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4cc:	f7ff bfe2 	b.w	800d494 <__malloc_unlock>
 800d4d0:	42a3      	cmp	r3, r4
 800d4d2:	d908      	bls.n	800d4e6 <_free_r+0x46>
 800d4d4:	6825      	ldr	r5, [r4, #0]
 800d4d6:	1961      	adds	r1, r4, r5
 800d4d8:	428b      	cmp	r3, r1
 800d4da:	bf01      	itttt	eq
 800d4dc:	6819      	ldreq	r1, [r3, #0]
 800d4de:	685b      	ldreq	r3, [r3, #4]
 800d4e0:	1949      	addeq	r1, r1, r5
 800d4e2:	6021      	streq	r1, [r4, #0]
 800d4e4:	e7ed      	b.n	800d4c2 <_free_r+0x22>
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	b10b      	cbz	r3, 800d4f0 <_free_r+0x50>
 800d4ec:	42a3      	cmp	r3, r4
 800d4ee:	d9fa      	bls.n	800d4e6 <_free_r+0x46>
 800d4f0:	6811      	ldr	r1, [r2, #0]
 800d4f2:	1855      	adds	r5, r2, r1
 800d4f4:	42a5      	cmp	r5, r4
 800d4f6:	d10b      	bne.n	800d510 <_free_r+0x70>
 800d4f8:	6824      	ldr	r4, [r4, #0]
 800d4fa:	4421      	add	r1, r4
 800d4fc:	1854      	adds	r4, r2, r1
 800d4fe:	42a3      	cmp	r3, r4
 800d500:	6011      	str	r1, [r2, #0]
 800d502:	d1e0      	bne.n	800d4c6 <_free_r+0x26>
 800d504:	681c      	ldr	r4, [r3, #0]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	6053      	str	r3, [r2, #4]
 800d50a:	4421      	add	r1, r4
 800d50c:	6011      	str	r1, [r2, #0]
 800d50e:	e7da      	b.n	800d4c6 <_free_r+0x26>
 800d510:	d902      	bls.n	800d518 <_free_r+0x78>
 800d512:	230c      	movs	r3, #12
 800d514:	6003      	str	r3, [r0, #0]
 800d516:	e7d6      	b.n	800d4c6 <_free_r+0x26>
 800d518:	6825      	ldr	r5, [r4, #0]
 800d51a:	1961      	adds	r1, r4, r5
 800d51c:	428b      	cmp	r3, r1
 800d51e:	bf04      	itt	eq
 800d520:	6819      	ldreq	r1, [r3, #0]
 800d522:	685b      	ldreq	r3, [r3, #4]
 800d524:	6063      	str	r3, [r4, #4]
 800d526:	bf04      	itt	eq
 800d528:	1949      	addeq	r1, r1, r5
 800d52a:	6021      	streq	r1, [r4, #0]
 800d52c:	6054      	str	r4, [r2, #4]
 800d52e:	e7ca      	b.n	800d4c6 <_free_r+0x26>
 800d530:	b003      	add	sp, #12
 800d532:	bd30      	pop	{r4, r5, pc}
 800d534:	20001dcc 	.word	0x20001dcc

0800d538 <_init>:
 800d538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53a:	bf00      	nop
 800d53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d53e:	bc08      	pop	{r3}
 800d540:	469e      	mov	lr, r3
 800d542:	4770      	bx	lr

0800d544 <_fini>:
 800d544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d546:	bf00      	nop
 800d548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d54a:	bc08      	pop	{r3}
 800d54c:	469e      	mov	lr, r3
 800d54e:	4770      	bx	lr
