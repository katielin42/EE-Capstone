
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f1c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  080160e0  080160e0  000260e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016814  08016814  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08016814  08016814  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016814  08016814  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016814  08016814  00026814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016818  08016818  00026818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801681c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002534  200001e4  08016a00  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002718  08016a00  00032718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b1a7  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d09  00000000  00000000  0005b3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002340  00000000  00000000  000610c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020a8  00000000  00000000  00063408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039f6f  00000000  00000000  000654b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bb94  00000000  00000000  0009f41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014ca7d  00000000  00000000  000cafb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00217a30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a994  00000000  00000000  00217a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080160c4 	.word	0x080160c4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	080160c4 	.word	0x080160c4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <ADC_Init>:
/* USER CODE BEGIN PV */



//initialize ADC thread
void ADC_Init(void *argument) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 8000d30:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <ADC_Init+0x30>)
 8000d32:	2101      	movs	r1, #1
 8000d34:	2001      	movs	r0, #1
 8000d36:	f00d f8b5 	bl	800dea4 <osSemaphoreNew>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <ADC_Init+0x34>)
 8000d3e:	6013      	str	r3, [r2, #0]
	//start to collect ADC signals into ADC buffer through the DMA
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 8000d40:	2209      	movs	r2, #9
 8000d42:	4906      	ldr	r1, [pc, #24]	; (8000d5c <ADC_Init+0x38>)
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f001 fe39 	bl	80029bc <HAL_ADC_Start_DMA>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	0801620c 	.word	0x0801620c
 8000d58:	20000220 	.word	0x20000220
 8000d5c:	20000200 	.word	0x20000200

08000d60 <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	// average the ADC values from 3 consecutive samples and convert them into the analog values with the formula (VREF-GND)/ADC_BIT_RESOLUTION
	//// analog values from adc bit sample = (VREF-GND)*ADC_bits/4095
	for(int i = 0 ; i < 3; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	e03a      	b.n	8000de4 <HAL_ADC_ConvCpltCallback+0x84>
		ADC_buffer_processed[i] = resistor_divider_val * ((vref-gnd)/adc_reso)*(((float)ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3);
 8000d6e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000dfc <HAL_ADC_ConvCpltCallback+0x9c>
 8000d72:	eddf 7a23 	vldr	s15, [pc, #140]	; 8000e00 <HAL_ADC_ConvCpltCallback+0xa0>
 8000d76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d7a:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000e04 <HAL_ADC_ConvCpltCallback+0xa4>
 8000d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d82:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000d86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d92:	ee07 3a90 	vmov	s15, r3
 8000d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3303      	adds	r3, #3
 8000d9e:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3306      	adds	r3, #6
 8000db4:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dba:	ee07 3a90 	vmov	s15, r3
 8000dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000dc6:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8000dca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_ADC_ConvCpltCallback+0xac>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3; i++) {
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	ddc1      	ble.n	8000d6e <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f00d f934 	bl	800e05c <osSemaphoreRelease>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40533333 	.word	0x40533333
 8000e00:	00000000 	.word	0x00000000
 8000e04:	45800000 	.word	0x45800000
 8000e08:	20000200 	.word	0x20000200
 8000e0c:	20000214 	.word	0x20000214
 8000e10:	20000220 	.word	0x20000220

08000e14 <temperatureDecode>:

//int temp;
int motorTorqueHighFault = 0x00, motorTorqueLowFault = 0x00, decodedTemperature;

//grab the hex temperature codes from the CAN frame and convert it into decimal values
int temperatureDecode (int high, int low){
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	 int temperatureCelsius = (high*256 + low)/10;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	021a      	lsls	r2, r3, #8
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <temperatureDecode+0x30>)
 8000e28:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2c:	1092      	asrs	r2, r2, #2
 8000e2e:	17db      	asrs	r3, r3, #31
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	60fb      	str	r3, [r7, #12]
	return temperatureCelsius;
 8000e34:	68fb      	ldr	r3, [r7, #12]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	66666667 	.word	0x66666667

08000e48 <can_Init>:
    }
    return reversed_num;
}

//initialize CAN filters for TX/RX operations
void can_Init(void){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  sFilterConfig;
	//canmsg_rx = osMessageQueueNew(10, sizeof(canMsg), &msgAttr);
	txCAN.IDE = CAN_ID_EXT;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <can_Init+0x74>)
 8000e50:	2204      	movs	r2, #4
 8000e52:	609a      	str	r2, [r3, #8]
	txCAN.RTR = CAN_RTR_DATA;
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <can_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
	txCAN.TransmitGlobalTime = DISABLE;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <can_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	751a      	strb	r2, [r3, #20]
	sFilterConfig.FilterBank = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000e84:	230e      	movs	r3, #14
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
	//throw error if configurations are unsuccessful
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <can_Init+0x78>)
 8000e8e:	f002 fe2e 	bl	8003aee <HAL_CAN_ConfigFilter>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <can_Init+0x54>
	    /* Filter configuration Error */
	  Error_Handler();
 8000e98:	f000 fdf8 	bl	8001a8c <Error_Handler>
	}
	// start the CAN perpherial via HAL
	HAL_CAN_Start(&hcan1);
 8000e9c:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <can_Init+0x78>)
 8000e9e:	f002 fef0 	bl	8003c82 <HAL_CAN_Start>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <can_Init+0x78>)
 8000ea6:	f003 f912 	bl	80040ce <HAL_CAN_ActivateNotification>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <can_Init+0x6c>
	/* Notification Error */
	Error_Handler();
 8000eb0:	f000 fdec 	bl	8001a8c <Error_Handler>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000274 	.word	0x20000274
 8000ec0:	20000394 	.word	0x20000394

08000ec4 <canSend>:

//send can frame function
void canSend(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	txCAN.ExtId = txAddress;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <canSend+0x34>)
 8000eca:	22c0      	movs	r2, #192	; 0xc0
 8000ecc:	605a      	str	r2, [r3, #4]
	txCAN.DLC = 2;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <canSend+0x34>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	611a      	str	r2, [r3, #16]
	txData[0] = motorTorqueLowFault;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <canSend+0x38>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <canSend+0x3c>)
 8000edc:	701a      	strb	r2, [r3, #0]
	txData[1] = motorTorqueHighFault;
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <canSend+0x40>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <canSend+0x3c>)
 8000ee6:	705a      	strb	r2, [r3, #1]
//	while(1) {
//		HAL_CAN_AddTxMessage(&hcan1, &txCAN, txData, &txMail);
////		osSemaphoreAcquire()
//		osDelay(50);
//	}
	HAL_CAN_AddTxMessage(&hcan1, &txCAN, txData, &txMail);
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <canSend+0x44>)
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <canSend+0x3c>)
 8000eec:	4902      	ldr	r1, [pc, #8]	; (8000ef8 <canSend+0x34>)
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <canSend+0x48>)
 8000ef0:	f002 ff0b 	bl	8003d0a <HAL_CAN_AddTxMessage>
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000274 	.word	0x20000274
 8000efc:	200002c0 	.word	0x200002c0
 8000f00:	200002b4 	.word	0x200002b4
 8000f04:	200002bc 	.word	0x200002bc
 8000f08:	200002a8 	.word	0x200002a8
 8000f0c:	20000394 	.word	0x20000394

08000f10 <HAL_CAN_RxFifo0MsgPendingCallback>:

//decode the message from the interrupt with queueget
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	//canMsg temp;
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f002 ffc3 	bl	8003eaa <HAL_CAN_GetRxMessage>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	/* Reception Error */
	Error_Handler();
 8000f2a:	f000 fdaf 	bl	8001a8c <Error_Handler>
//  if (temp.RxHeader.ExtId == temperatureAddress) {
//	  decodedTemperature = temperatureDecode(temp.RxData[1], temp.RxData[0]);
////	  osMessageQueuePut(canmsg_rx, &decodedTemperature, 0, 0);
//  }
  //decode the specified hex bytes that contain motor temperature
  if (RxHeader.ExtId == temperatureAddress){
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2ba2      	cmp	r3, #162	; 0xa2
 8000f34:	d10b      	bne.n	8000f4e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
	  decodedTemperature = temperatureDecode(RxData[5], RxData[4]);
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000f38:	795b      	ldrb	r3, [r3, #5]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000f3e:	791b      	ldrb	r3, [r3, #4]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4610      	mov	r0, r2
 8000f44:	f7ff ff66 	bl	8000e14 <temperatureDecode>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000f4c:	6013      	str	r3, [r2, #0]

  //
//  if (RxHeader.ExtId == temperatureAddress) {
//	  decodedTemperature = temperatureDecode(RxData[5], RxData[4]);
//  }
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200002ac 	.word	0x200002ac
 8000f5c:	2000028c 	.word	0x2000028c
 8000f60:	200002c4 	.word	0x200002c4

08000f64 <check_error>:
const char errlog[] = "ErrorLog.txt";

//initialize controller function
void controller_state_machine(void *args);

static inline bool check_error(float APPS_VPA, float APPS_VPA2, float BSE){
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f72:	ed87 1a01 	vstr	s2, [r7, #4]
	//| (APPS_VPA2 >4.5) | (BSE<0.5) | (APPS_VPA2 <0.5) |
	return ((APPS_VPA<=0.5) | (APPS_VPA>=4.5) | (BSE>4.5) );
 8000f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	bf94      	ite	ls
 8000f88:	2301      	movls	r3, #1
 8000f8a:	2300      	movhi	r3, #0
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f92:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8000f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	bfac      	ite	ge
 8000fa0:	2301      	movge	r3, #1
 8000fa2:	2300      	movlt	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	461a      	mov	r2, r3
 8000fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb0:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8000fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbc:	bfcc      	ite	gt
 8000fbe:	2301      	movgt	r3, #1
 8000fc0:	2300      	movle	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <state_machine_init>:

//dump main logic into a thread
void state_machine_init(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	thr_1 = osThreadNew(controller_state_machine, &hadc1, &thr_1_attributes);
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <state_machine_init+0x18>)
 8000fe2:	4905      	ldr	r1, [pc, #20]	; (8000ff8 <state_machine_init+0x1c>)
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <state_machine_init+0x20>)
 8000fe6:	f00c fd7c 	bl	800dae2 <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <state_machine_init+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	0801621c 	.word	0x0801621c
 8000ff8:	200002cc 	.word	0x200002cc
 8000ffc:	08001039 	.word	0x08001039
 8001000:	200002c8 	.word	0x200002c8

08001004 <update_values>:

//update collected adc values into our variables
void update_values(float *APPS_VPA, float *APPS_VPA2, float * BSE){
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
	  *APPS_VPA=ADC_buffer_processed[0];
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <update_values+0x30>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	601a      	str	r2, [r3, #0]
	  *APPS_VPA2=ADC_buffer_processed[1];
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <update_values+0x30>)
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	601a      	str	r2, [r3, #0]
	  *BSE=ADC_buffer_processed[2];
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <update_values+0x30>)
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	601a      	str	r2, [r3, #0]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	20000214 	.word	0x20000214

08001038 <controller_state_machine>:

void controller_state_machine(void *args){
 8001038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800103c:	b0c4      	sub	sp, #272	; 0x110
 800103e:	af06      	add	r7, sp, #24
 8001040:	6078      	str	r0, [r7, #4]
	SD_init();
 8001042:	f000 fd29 	bl	8001a98 <SD_init>
	float APPS_VPA = 0, APPS_VPA2 = 0, BSE = 0;
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	char buffer[120];
	char buffer2[90];
	uint32_t startTimeStamp = osKernelGetSysTimerCount();
 800105e:	f00c fd07 	bl	800da70 <osKernelGetSysTimerCount>
 8001062:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	  for(;;)
	  {
		  //acquire ADC collection function semaphore
		  osSemaphoreAcquire(ADC_semHandle, 1);
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <controller_state_machine+0x114>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f00c ffa3 	bl	800dfb8 <osSemaphoreAcquire>
		  //access the ADC variables and update the values into our variables
		  update_values(&APPS_VPA, &APPS_VPA2, &BSE);
 8001072:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001076:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 800107a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffc0 	bl	8001004 <update_values>
		  //initialize write buffer for the SD card, size is arbitrary just be large enough to contain the chars
		  int n = snprintf(buffer, sizeof(buffer), "Error log: APPS Value is %1.2f, APPS2 Value is %1.2f, BSE Value is %1.2f, Setting motor torque to 0Nm; \n", APPS_VPA, APPS_VPA2, BSE);
 8001084:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa75 	bl	8000578 <__aeabi_f2d>
 800108e:	4604      	mov	r4, r0
 8001090:	460d      	mov	r5, r1
 8001092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa6e 	bl	8000578 <__aeabi_f2d>
 800109c:	4680      	mov	r8, r0
 800109e:	4689      	mov	r9, r1
 80010a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa67 	bl	8000578 <__aeabi_f2d>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80010b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80010b6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80010ba:	e9cd 4500 	strd	r4, r5, [sp]
 80010be:	4a24      	ldr	r2, [pc, #144]	; (8001150 <controller_state_machine+0x118>)
 80010c0:	2178      	movs	r1, #120	; 0x78
 80010c2:	f011 fb83 	bl	80127cc <sniprintf>
 80010c6:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
		  int p = snprintf(buffer2, sizeof(buffer2), "Error log: Motor Temperature is %i, Setting motor torque to 0Nm; \n", decodedTemperature);
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <controller_state_machine+0x11c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f107 000c 	add.w	r0, r7, #12
 80010d2:	4a21      	ldr	r2, [pc, #132]	; (8001158 <controller_state_machine+0x120>)
 80010d4:	215a      	movs	r1, #90	; 0x5a
 80010d6:	f011 fb79 	bl	80127cc <sniprintf>
 80010da:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
		  //checking for error condition in APPS and BSE values
		  if (check_error(APPS_VPA, APPS_VPA2, BSE)){
 80010de:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 80010e2:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80010e6:	edd7 6a38 	vldr	s13, [r7, #224]	; 0xe0
 80010ea:	eeb0 1a66 	vmov.f32	s2, s13
 80010ee:	eef0 0a47 	vmov.f32	s1, s14
 80010f2:	eeb0 0a67 	vmov.f32	s0, s15
 80010f6:	f7ff ff35 	bl	8000f64 <check_error>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d012      	beq.n	8001126 <controller_state_machine+0xee>
			  //if erroneous voltage persists past 100ms, write the error log
			  if(osKernelGetSysTimerCount() - startTimeStamp >= 100) {
 8001100:	f00c fcb6 	bl	800da70 <osKernelGetSysTimerCount>
 8001104:	4602      	mov	r2, r0
 8001106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b63      	cmp	r3, #99	; 0x63
 800110e:	d90e      	bls.n	800112e <controller_state_machine+0xf6>
				  	  canSend();
 8001110:	f7ff fed8 	bl	8000ec4 <canSend>
					  SD_process(errlog, buffer, n);
 8001114:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001118:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800111c:	4619      	mov	r1, r3
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <controller_state_machine+0x124>)
 8001120:	f000 fce0 	bl	8001ae4 <SD_process>
 8001124:	e003      	b.n	800112e <controller_state_machine+0xf6>
				  }
		  }
		  //otherwise restart timer
		  else {
			  startTimeStamp = osKernelGetSysTimerCount();
 8001126:	f00c fca3 	bl	800da70 <osKernelGetSysTimerCount>
 800112a:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
		  }
		  //if received motor temperature is >the temp we want,
		  //send can frame to reduce speed
		  if (decodedTemperature>120){
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <controller_state_machine+0x11c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b78      	cmp	r3, #120	; 0x78
 8001134:	dd97      	ble.n	8001066 <controller_state_machine+0x2e>
			  canSend();
 8001136:	f7ff fec5 	bl	8000ec4 <canSend>
			  SD_process(errlog, buffer2, p);
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <controller_state_machine+0x124>)
 8001146:	f000 fccd 	bl	8001ae4 <SD_process>
	  {
 800114a:	e78c      	b.n	8001066 <controller_state_machine+0x2e>
 800114c:	20000220 	.word	0x20000220
 8001150:	080160f4 	.word	0x080160f4
 8001154:	200002c4 	.word	0x200002c4
 8001158:	08016160 	.word	0x08016160
 800115c:	08016240 	.word	0x08016240

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001164:	f001 f893 	bl	800228e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 f828 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116c:	f000 f97e 	bl	800146c <MX_GPIO_Init>
  MX_DMA_Init();
 8001170:	f000 f952 	bl	8001418 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001174:	f000 f92e 	bl	80013d4 <MX_SDMMC1_SD_Init>
  MX_CAN1_Init();
 8001178:	f000 f8f6 	bl	8001368 <MX_CAN1_Init>
  MX_ADC1_Init();
 800117c:	f000 f86c 	bl	8001258 <MX_ADC1_Init>
  MX_FATFS_Init();
 8001180:	f009 fa40 	bl	800a604 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001184:	f00c fbc6 	bl	800d914 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001188:	4a08      	ldr	r2, [pc, #32]	; (80011ac <main+0x4c>)
 800118a:	2100      	movs	r1, #0
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <main+0x50>)
 800118e:	f00c fca8 	bl	800dae2 <osThreadNew>
 8001192:	4603      	mov	r3, r0
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <main+0x54>)
 8001196:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* Initialize user threads ... */
  ADC_Init(&hadc1);
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <main+0x58>)
 800119a:	f7ff fdc3 	bl	8000d24 <ADC_Init>
  can_Init();
 800119e:	f7ff fe53 	bl	8000e48 <can_Init>
  state_machine_init();
 80011a2:	f7ff ff1b 	bl	8000fdc <state_machine_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011a6:	f00c fbfb 	bl	800d9a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <main+0x4a>
 80011ac:	08016250 	.word	0x08016250
 80011b0:	08001a59 	.word	0x08001a59
 80011b4:	2000043c 	.word	0x2000043c
 80011b8:	200002cc 	.word	0x200002cc

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2244      	movs	r2, #68	; 0x44
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f010 fb67 	bl	801189e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80011de:	2000      	movs	r0, #0
 80011e0:	f003 ff00 	bl	8004fe4 <HAL_PWREx_ControlVoltageScaling>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x32>
  {
    Error_Handler();
 80011ea:	f000 fc4f 	bl	8001a8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011f2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fc:	2303      	movs	r3, #3
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001200:	2302      	movs	r3, #2
 8001202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001204:	231e      	movs	r3, #30
 8001206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800120c:	2302      	movs	r3, #2
 800120e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4618      	mov	r0, r3
 800121a:	f003 ff97 	bl	800514c <HAL_RCC_OscConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001224:	f000 fc32 	bl	8001a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122c:	2303      	movs	r3, #3
 800122e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	2105      	movs	r1, #5
 8001240:	4618      	mov	r0, r3
 8001242:	f004 fb9d 	bl	8005980 <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800124c:	f000 fc1e 	bl	8001a8c <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3758      	adds	r7, #88	; 0x58
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800126e:	4b39      	ldr	r3, [pc, #228]	; (8001354 <MX_ADC1_Init+0xfc>)
 8001270:	4a39      	ldr	r2, [pc, #228]	; (8001358 <MX_ADC1_Init+0x100>)
 8001272:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001274:	4b37      	ldr	r3, [pc, #220]	; (8001354 <MX_ADC1_Init+0xfc>)
 8001276:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800127a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127c:	4b35      	ldr	r3, [pc, #212]	; (8001354 <MX_ADC1_Init+0xfc>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <MX_ADC1_Init+0xfc>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001288:	4b32      	ldr	r3, [pc, #200]	; (8001354 <MX_ADC1_Init+0xfc>)
 800128a:	2201      	movs	r2, #1
 800128c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800128e:	4b31      	ldr	r3, [pc, #196]	; (8001354 <MX_ADC1_Init+0xfc>)
 8001290:	2208      	movs	r2, #8
 8001292:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <MX_ADC1_Init+0xfc>)
 8001296:	2200      	movs	r2, #0
 8001298:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <MX_ADC1_Init+0xfc>)
 800129c:	2201      	movs	r2, #1
 800129e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_ADC1_Init+0xfc>)
 80012a2:	2203      	movs	r2, #3
 80012a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <MX_ADC1_Init+0xfc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <MX_ADC1_Init+0xfc>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <MX_ADC1_Init+0xfc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_ADC1_Init+0xfc>)
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_ADC1_Init+0xfc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_ADC1_Init+0xfc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_ADC1_Init+0xfc>)
 80012d2:	2204      	movs	r2, #4
 80012d4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d6:	481f      	ldr	r0, [pc, #124]	; (8001354 <MX_ADC1_Init+0xfc>)
 80012d8:	f001 fa24 	bl	8002724 <HAL_ADC_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012e2:	f000 fbd3 	bl	8001a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_ADC1_Init+0x104>)
 80012e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ea:	2306      	movs	r3, #6
 80012ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80012ee:	2305      	movs	r3, #5
 80012f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012f2:	237f      	movs	r3, #127	; 0x7f
 80012f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012f6:	2304      	movs	r3, #4
 80012f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	4619      	mov	r1, r3
 8001302:	4814      	ldr	r0, [pc, #80]	; (8001354 <MX_ADC1_Init+0xfc>)
 8001304:	f001 fdb0 	bl	8002e68 <HAL_ADC_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800130e:	f000 fbbd 	bl	8001a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_ADC1_Init+0x108>)
 8001314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001316:	230c      	movs	r3, #12
 8001318:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131a:	463b      	mov	r3, r7
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_ADC1_Init+0xfc>)
 8001320:	f001 fda2 	bl	8002e68 <HAL_ADC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800132a:	f000 fbaf 	bl	8001a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <MX_ADC1_Init+0x10c>)
 8001330:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001332:	2312      	movs	r3, #18
 8001334:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_ADC1_Init+0xfc>)
 800133c:	f001 fd94 	bl	8002e68 <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8001346:	f000 fba1 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200002cc 	.word	0x200002cc
 8001358:	50040000 	.word	0x50040000
 800135c:	14f00020 	.word	0x14f00020
 8001360:	19200040 	.word	0x19200040
 8001364:	1d500080 	.word	0x1d500080

08001368 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_CAN1_Init+0x64>)
 800136e:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <MX_CAN1_Init+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_CAN1_Init+0x64>)
 8001374:	2218      	movs	r2, #24
 8001376:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_CAN1_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_CAN1_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_CAN1_Init+0x64>)
 8001386:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800138a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_CAN1_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_CAN1_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_CAN1_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_CAN1_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_CAN1_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_CAN1_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_CAN1_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_CAN1_Init+0x64>)
 80013b8:	f002 fa9e 	bl	80038f8 <HAL_CAN_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80013c2:	f000 fb63 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000394 	.word	0x20000394
 80013d0:	40006400 	.word	0x40006400

080013d4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <MX_SDMMC1_SD_Init+0x3c>)
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <MX_SDMMC1_SD_Init+0x40>)
 80013dc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SDMMC1_SD_Init+0x3c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_SDMMC1_SD_Init+0x3c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SDMMC1_SD_Init+0x3c>)
 80013ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_SDMMC1_SD_Init+0x3c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <MX_SDMMC1_SD_Init+0x3c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <MX_SDMMC1_SD_Init+0x3c>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	200003bc 	.word	0x200003bc
 8001414:	50062400 	.word	0x50062400

08001418 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_DMA_Init+0x50>)
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <MX_DMA_Init+0x50>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6493      	str	r3, [r2, #72]	; 0x48
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_DMA_Init+0x50>)
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_DMA_Init+0x50>)
 8001438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <MX_DMA_Init+0x50>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6493      	str	r3, [r2, #72]	; 0x48
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_DMA_Init+0x50>)
 8001444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2105      	movs	r1, #5
 8001452:	200e      	movs	r0, #14
 8001454:	f003 f948 	bl	80046e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001458:	200e      	movs	r0, #14
 800145a:	f003 f961 	bl	8004720 <HAL_NVIC_EnableIRQ>

}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000

0800146c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08e      	sub	sp, #56	; 0x38
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001482:	4bb2      	ldr	r3, [pc, #712]	; (800174c <MX_GPIO_Init+0x2e0>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4ab1      	ldr	r2, [pc, #708]	; (800174c <MX_GPIO_Init+0x2e0>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4baf      	ldr	r3, [pc, #700]	; (800174c <MX_GPIO_Init+0x2e0>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	623b      	str	r3, [r7, #32]
 8001498:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	4bac      	ldr	r3, [pc, #688]	; (800174c <MX_GPIO_Init+0x2e0>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4aab      	ldr	r2, [pc, #684]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4ba9      	ldr	r3, [pc, #676]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b2:	4ba6      	ldr	r3, [pc, #664]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4aa5      	ldr	r2, [pc, #660]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4ba3      	ldr	r3, [pc, #652]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4ba0      	ldr	r3, [pc, #640]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a9f      	ldr	r2, [pc, #636]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b9d      	ldr	r3, [pc, #628]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b9a      	ldr	r3, [pc, #616]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a99      	ldr	r2, [pc, #612]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b97      	ldr	r3, [pc, #604]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fa:	4b94      	ldr	r3, [pc, #592]	; (800174c <MX_GPIO_Init+0x2e0>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a93      	ldr	r2, [pc, #588]	; (800174c <MX_GPIO_Init+0x2e0>)
 8001500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b91      	ldr	r3, [pc, #580]	; (800174c <MX_GPIO_Init+0x2e0>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001512:	f003 fe0b 	bl	800512c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	4b8d      	ldr	r3, [pc, #564]	; (800174c <MX_GPIO_Init+0x2e0>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a8c      	ldr	r2, [pc, #560]	; (800174c <MX_GPIO_Init+0x2e0>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b8a      	ldr	r3, [pc, #552]	; (800174c <MX_GPIO_Init+0x2e0>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	4b87      	ldr	r3, [pc, #540]	; (800174c <MX_GPIO_Init+0x2e0>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a86      	ldr	r2, [pc, #536]	; (800174c <MX_GPIO_Init+0x2e0>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b84      	ldr	r3, [pc, #528]	; (800174c <MX_GPIO_Init+0x2e0>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001546:	4b81      	ldr	r3, [pc, #516]	; (800174c <MX_GPIO_Init+0x2e0>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a80      	ldr	r2, [pc, #512]	; (800174c <MX_GPIO_Init+0x2e0>)
 800154c:	f043 0320 	orr.w	r3, r3, #32
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b7e      	ldr	r3, [pc, #504]	; (800174c <MX_GPIO_Init+0x2e0>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0320 	and.w	r3, r3, #32
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f244 0114 	movw	r1, #16404	; 0x4014
 8001564:	487a      	ldr	r0, [pc, #488]	; (8001750 <MX_GPIO_Init+0x2e4>)
 8001566:	f003 fd05 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001570:	4878      	ldr	r0, [pc, #480]	; (8001754 <MX_GPIO_Init+0x2e8>)
 8001572:	f003 fcff 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2140      	movs	r1, #64	; 0x40
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157e:	f003 fcf9 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2104      	movs	r1, #4
 8001586:	4874      	ldr	r0, [pc, #464]	; (8001758 <MX_GPIO_Init+0x2ec>)
 8001588:	f003 fcf4 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 800158c:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800159e:	2305      	movs	r3, #5
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	486c      	ldr	r0, [pc, #432]	; (800175c <MX_GPIO_Init+0x2f0>)
 80015aa:	f003 fb39 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 80015ae:	f244 0314 	movw	r3, #16404	; 0x4014
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4862      	ldr	r0, [pc, #392]	; (8001750 <MX_GPIO_Init+0x2e4>)
 80015c8:	f003 fb2a 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_NBL0_Pin PSRAM_NBL1_Pin PSRAM_A20_Pin PSRAM_A19_Pin
                           D7_Pin D6_Pin D12_Pin D5_Pin
                           D11_Pin D4_Pin D10_Pin D9_Pin
                           D8_Pin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 80015cc:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015de:	230c      	movs	r3, #12
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	485d      	ldr	r0, [pc, #372]	; (8001760 <MX_GPIO_Init+0x2f4>)
 80015ea:	f003 fb19 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80015ee:	2310      	movs	r3, #16
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015fe:	2302      	movs	r3, #2
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	4853      	ldr	r0, [pc, #332]	; (8001758 <MX_GPIO_Init+0x2ec>)
 800160a:	f003 fb09 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 800160e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001620:	2307      	movs	r3, #7
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f003 faf7 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_10_Pin */
  GPIO_InitStruct.Pin = ARD_10_Pin;
 8001632:	2301      	movs	r3, #1
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001642:	2305      	movs	r3, #5
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	4843      	ldr	r0, [pc, #268]	; (800175c <MX_GPIO_Init+0x2f0>)
 800164e:	f003 fae7 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001652:	23b0      	movs	r3, #176	; 0xb0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001662:	230a      	movs	r3, #10
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	483b      	ldr	r0, [pc, #236]	; (800175c <MX_GPIO_Init+0x2f0>)
 800166e:	f003 fad7 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001672:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001684:	230d      	movs	r3, #13
 8001686:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168c:	4619      	mov	r1, r3
 800168e:	4832      	ldr	r0, [pc, #200]	; (8001758 <MX_GPIO_Init+0x2ec>)
 8001690:	f003 fac6 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8001694:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80016a6:	2305      	movs	r3, #5
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ae:	4619      	mov	r1, r3
 80016b0:	482c      	ldr	r0, [pc, #176]	; (8001764 <MX_GPIO_Init+0x2f8>)
 80016b2:	f003 fab5 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin PSRAM_OE_Pin D3_Pin PSRAM_WE_Pin
                           PSRAM_WAIT_Pin PSRAM_CLK_Pin PSRAM_NE1_Pin PSRAM_A18_Pin
                           D1_Pin D0_Pin PSRAM_A17_Pin PSRAM_A16_Pin
                           D15_Pin D14_Pin D13_Pin */
  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 80016b6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c8:	230c      	movs	r3, #12
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d0:	4619      	mov	r1, r3
 80016d2:	4825      	ldr	r0, [pc, #148]	; (8001768 <MX_GPIO_Init+0x2fc>)
 80016d4:	f003 faa4 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 80016d8:	2302      	movs	r3, #2
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	481b      	ldr	r0, [pc, #108]	; (800175c <MX_GPIO_Init+0x2f0>)
 80016ee:	f003 fa97 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 80016f2:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001704:	230a      	movs	r3, #10
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	4810      	ldr	r0, [pc, #64]	; (8001750 <MX_GPIO_Init+0x2e4>)
 8001710:	f003 fa86 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SCL_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8001714:	2340      	movs	r3, #64	; 0x40
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001718:	2312      	movs	r3, #18
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171c:	2301      	movs	r3, #1
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001724:	2304      	movs	r3, #4
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	4619      	mov	r1, r3
 800172e:	480a      	ldr	r0, [pc, #40]	; (8001758 <MX_GPIO_Init+0x2ec>)
 8001730:	f003 fa76 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001746:	2303      	movs	r3, #3
 8001748:	e010      	b.n	800176c <MX_GPIO_Init+0x300>
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	48001c00 	.word	0x48001c00
 8001754:	48000800 	.word	0x48000800
 8001758:	48000400 	.word	0x48000400
 800175c:	48002000 	.word	0x48002000
 8001760:	48001000 	.word	0x48001000
 8001764:	48001800 	.word	0x48001800
 8001768:	48000c00 	.word	0x48000c00
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001772:	4619      	mov	r1, r3
 8001774:	48b2      	ldr	r0, [pc, #712]	; (8001a40 <MX_GPIO_Init+0x5d4>)
 8001776:	f003 fa53 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 800177a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800178c:	2305      	movs	r3, #5
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	48aa      	ldr	r0, [pc, #680]	; (8001a40 <MX_GPIO_Init+0x5d4>)
 8001798:	f003 fa42 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 800179c:	2364      	movs	r3, #100	; 0x64
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80017ac:	230d      	movs	r3, #13
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	48a3      	ldr	r0, [pc, #652]	; (8001a44 <MX_GPIO_Init+0x5d8>)
 80017b8:	f003 fa32 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PSRAM_ADV_Pin */
  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017cc:	230c      	movs	r3, #12
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d4:	4619      	mov	r1, r3
 80017d6:	489c      	ldr	r0, [pc, #624]	; (8001a48 <MX_GPIO_Init+0x5dc>)
 80017d8:	f003 fa22 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 80017dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017ee:	230a      	movs	r3, #10
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fc:	f003 fa10 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8001800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	488c      	ldr	r0, [pc, #560]	; (8001a4c <MX_GPIO_Init+0x5e0>)
 800181a:	f003 fa01 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A2_Pin PSRAM_A1_Pin PSRAM_A0_Pin PSRAM_A3_Pin
                           PSRAM_A4_Pin PSRAM_A5_Pin PSRAM_A9_Pin PSRAM_A8_Pin
                           PSRAM_A7_Pin PSRAM_A6_Pin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 800181e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001830:	230c      	movs	r3, #12
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001838:	4619      	mov	r1, r3
 800183a:	4885      	ldr	r0, [pc, #532]	; (8001a50 <MX_GPIO_Init+0x5e4>)
 800183c:	f003 f9f0 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8001840:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001846:	2312      	movs	r3, #18
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001852:	2304      	movs	r3, #4
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	487d      	ldr	r0, [pc, #500]	; (8001a54 <MX_GPIO_Init+0x5e8>)
 800185e:	f003 f9df 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8001862:	2340      	movs	r3, #64	; 0x40
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	4875      	ldr	r0, [pc, #468]	; (8001a4c <MX_GPIO_Init+0x5e0>)
 8001878:	f003 f9d2 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001882:	2312      	movs	r3, #18
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001886:	2301      	movs	r3, #1
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800188e:	2304      	movs	r3, #4
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	486e      	ldr	r0, [pc, #440]	; (8001a54 <MX_GPIO_Init+0x5e8>)
 800189a:	f003 f9c1 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PSRAM_A14_Pin PSRAM_A13_Pin PSRAM_A15_Pin PSRAM_A11_Pin
                           PSRAM_A12_Pin PSRAM_A10_Pin */
  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 800189e:	233f      	movs	r3, #63	; 0x3f
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018ae:	230c      	movs	r3, #12
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4866      	ldr	r0, [pc, #408]	; (8001a54 <MX_GPIO_Init+0x5e8>)
 80018ba:	f003 f9b1 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018c6:	2302      	movs	r3, #2
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ce:	4619      	mov	r1, r3
 80018d0:	485e      	ldr	r0, [pc, #376]	; (8001a4c <MX_GPIO_Init+0x5e0>)
 80018d2:	f003 f9a5 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 80018d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e8:	2307      	movs	r3, #7
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	4855      	ldr	r0, [pc, #340]	; (8001a48 <MX_GPIO_Init+0x5dc>)
 80018f4:	f003 f994 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80018f8:	2303      	movs	r3, #3
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001908:	2308      	movs	r3, #8
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001910:	4619      	mov	r1, r3
 8001912:	484e      	ldr	r0, [pc, #312]	; (8001a4c <MX_GPIO_Init+0x5e0>)
 8001914:	f003 f984 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DF_CKOUT_Pin;
 8001918:	2304      	movs	r3, #4
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001928:	2306      	movs	r3, #6
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DF_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001930:	4619      	mov	r1, r3
 8001932:	4846      	ldr	r0, [pc, #280]	; (8001a4c <MX_GPIO_Init+0x5e0>)
 8001934:	f003 f974 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001938:	2320      	movs	r3, #32
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194e:	f003 f967 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001952:	2340      	movs	r3, #64	; 0x40
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	2301      	movs	r3, #1
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f003 f958 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_MOSI_Pin SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001970:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001982:	2305      	movs	r3, #5
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4619      	mov	r1, r3
 800198c:	482e      	ldr	r0, [pc, #184]	; (8001a48 <MX_GPIO_Init+0x5dc>)
 800198e:	f003 f947 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001992:	2308      	movs	r3, #8
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a2:	2307      	movs	r3, #7
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b0:	f003 f936 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 80019b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 80019c6:	230b      	movs	r3, #11
 80019c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ce:	4619      	mov	r1, r3
 80019d0:	481f      	ldr	r0, [pc, #124]	; (8001a50 <MX_GPIO_Init+0x5e4>)
 80019d2:	f003 f925 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 80019d6:	2310      	movs	r3, #16
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80019e6:	230a      	movs	r3, #10
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ee:	4619      	mov	r1, r3
 80019f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f4:	f003 f914 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80019f8:	2304      	movs	r3, #4
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <MX_GPIO_Init+0x5dc>)
 8001a10:	f003 f906 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8001a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a26:	2306      	movs	r3, #6
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_GPIO_Init+0x5dc>)
 8001a32:	f003 f8f5 	bl	8004c20 <HAL_GPIO_Init>

}
 8001a36:	bf00      	nop
 8001a38:	3738      	adds	r7, #56	; 0x38
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	48001c00 	.word	0x48001c00
 8001a44:	48001000 	.word	0x48001000
 8001a48:	48000400 	.word	0x48000400
 8001a4c:	48000800 	.word	0x48000800
 8001a50:	48001400 	.word	0x48001400
 8001a54:	48001800 	.word	0x48001800

08001a58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f00c f8d0 	bl	800dc06 <osDelay>
 8001a66:	e7fb      	b.n	8001a60 <StartDefaultTask+0x8>

08001a68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a7a:	f000 fc21 	bl	80022c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40001000 	.word	0x40001000

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <Error_Handler+0x8>
	...

08001a98 <SD_init>:
uint16_t rtext[_MAX_SS];/* File read buffer */
/* USER CODE END 1 */


//if unmount SD card, need to rerun this block SD_init again to re-mount sd card, otherwise data collection process will be halted.
void SD_init(void){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af02      	add	r7, sp, #8
	//Mounts the SD card. If cannot mount SD card, throw error
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK){
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	490d      	ldr	r1, [pc, #52]	; (8001ad8 <SD_init+0x40>)
 8001aa2:	480e      	ldr	r0, [pc, #56]	; (8001adc <SD_init+0x44>)
 8001aa4:	f00a fda0 	bl	800c5e8 <f_mount>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <SD_init+0x1c>
		Error_Handler();
 8001aae:	f7ff ffed 	bl	8001a8c <Error_Handler>
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		{
			Error_Handler();
		}
	}
}
 8001ab2:	e00d      	b.n	8001ad0 <SD_init+0x38>
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8001ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <SD_init+0x48>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	2107      	movs	r1, #7
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <SD_init+0x40>)
 8001ac2:	f00b fa17 	bl	800cef4 <f_mkfs>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SD_init+0x38>
			Error_Handler();
 8001acc:	f7ff ffde 	bl	8001a8c <Error_Handler>
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200008a0 	.word	0x200008a0
 8001adc:	200008a4 	.word	0x200008a4
 8001ae0:	20000448 	.word	0x20000448

08001ae4 <SD_process>:
//
//void* is common denominator for all pointers. Temp var to be changed to use with anything else
void SD_process(const char *filename, void *buffer, int length){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
			//Open file for writing (Create)
			if(f_open(&SDFile, filename, FA_OPEN_APPEND | FA_WRITE) != FR_OK){
 8001af0:	2232      	movs	r2, #50	; 0x32
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	4812      	ldr	r0, [pc, #72]	; (8001b40 <SD_process+0x5c>)
 8001af6:	f00a fddb 	bl	800c6b0 <f_open>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <SD_process+0x22>
				Error_Handler();
 8001b00:	f7ff ffc4 	bl	8001a8c <Error_Handler>
				else{
					f_close(&SDFile);
				}
			}
			//create if condition to check if buffer is null/bad function calls
}
 8001b04:	e017      	b.n	8001b36 <SD_process+0x52>
				res = f_write(&SDFile, buffer, length, (void *)&byteswritten);
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <SD_process+0x60>)
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <SD_process+0x5c>)
 8001b0e:	f00a ff94 	bl	800ca3a <f_write>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <SD_process+0x64>)
 8001b18:	701a      	strb	r2, [r3, #0]
				if((byteswritten == 0) || (res != FR_OK)){
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <SD_process+0x60>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <SD_process+0x46>
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <SD_process+0x64>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <SD_process+0x4c>
					Error_Handler();
 8001b2a:	f7ff ffaf 	bl	8001a8c <Error_Handler>
}
 8001b2e:	e002      	b.n	8001b36 <SD_process+0x52>
					f_close(&SDFile);
 8001b30:	4803      	ldr	r0, [pc, #12]	; (8001b40 <SD_process+0x5c>)
 8001b32:	f00b f9af 	bl	800ce94 <f_close>
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000ad8 	.word	0x20000ad8
 8001b44:	20000444 	.word	0x20000444
 8001b48:	20000440 	.word	0x20000440

08001b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b56:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	6593      	str	r3, [r2, #88]	; 0x58
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_MspInit+0x4c>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	210f      	movs	r1, #15
 8001b86:	f06f 0001 	mvn.w	r0, #1
 8001b8a:	f002 fdad 	bl	80046e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000

08001b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0b2      	sub	sp, #200	; 0xc8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb4:	f107 0318 	add.w	r3, r7, #24
 8001bb8:	229c      	movs	r2, #156	; 0x9c
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f00f fe6e 	bl	801189e <memset>
  if(hadc->Instance==ADC1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a5d      	ldr	r2, [pc, #372]	; (8001d3c <HAL_ADC_MspInit+0x1a0>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	f040 80b2 	bne.w	8001d32 <HAL_ADC_MspInit+0x196>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8001be0:	2302      	movs	r3, #2
 8001be2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001be4:	2308      	movs	r3, #8
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001be8:	2302      	movs	r3, #2
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bf8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfa:	f107 0318 	add.w	r3, r7, #24
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 f9aa 	bl	8005f58 <HAL_RCCEx_PeriphCLKConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001c0a:	f7ff ff3f 	bl	8001a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	4a4b      	ldr	r2, [pc, #300]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1a:	4b49      	ldr	r3, [pc, #292]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c26:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4a45      	ldr	r2, [pc, #276]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	4b40      	ldr	r3, [pc, #256]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	4a3f      	ldr	r2, [pc, #252]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a39      	ldr	r2, [pc, #228]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b37      	ldr	r3, [pc, #220]	; (8001d40 <HAL_ADC_MspInit+0x1a4>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8001c6e:	2318      	movs	r3, #24
 8001c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c74:	230b      	movs	r3, #11
 8001c76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c80:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c84:	4619      	mov	r1, r3
 8001c86:	482f      	ldr	r0, [pc, #188]	; (8001d44 <HAL_ADC_MspInit+0x1a8>)
 8001c88:	f002 ffca 	bl	8004c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8001c8c:	2387      	movs	r3, #135	; 0x87
 8001c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c92:	230b      	movs	r3, #11
 8001c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca8:	f002 ffba 	bl	8004c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001cac:	2301      	movs	r3, #1
 8001cae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cb2:	230b      	movs	r3, #11
 8001cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4820      	ldr	r0, [pc, #128]	; (8001d48 <HAL_ADC_MspInit+0x1ac>)
 8001cc6:	f002 ffab 	bl	8004c20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001ccc:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <HAL_ADC_MspInit+0x1b4>)
 8001cce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001cd2:	2205      	movs	r2, #5
 8001cd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001d00:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d06:	4811      	ldr	r0, [pc, #68]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001d08:	f002 fd18 	bl	800473c <HAL_DMA_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_ADC_MspInit+0x17a>
    {
      Error_Handler();
 8001d12:	f7ff febb 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001d1a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d1c:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <HAL_ADC_MspInit+0x1b0>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2105      	movs	r1, #5
 8001d26:	2012      	movs	r0, #18
 8001d28:	f002 fcde 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001d2c:	2012      	movs	r0, #18
 8001d2e:	f002 fcf7 	bl	8004720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d32:	bf00      	nop
 8001d34:	37c8      	adds	r7, #200	; 0xc8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	50040000 	.word	0x50040000
 8001d40:	40021000 	.word	0x40021000
 8001d44:	48000800 	.word	0x48000800
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	20000334 	.word	0x20000334
 8001d50:	40020044 	.word	0x40020044

08001d54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <HAL_CAN_MspInit+0x90>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d131      	bne.n	8001dda <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_CAN_MspInit+0x94>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_CAN_MspInit+0x94>)
 8001d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d80:	6593      	str	r3, [r2, #88]	; 0x58
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_CAN_MspInit+0x94>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <HAL_CAN_MspInit+0x94>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <HAL_CAN_MspInit+0x94>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <HAL_CAN_MspInit+0x94>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001da6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001db8:	2309      	movs	r3, #9
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc6:	f002 ff2b 	bl	8004c20 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2105      	movs	r1, #5
 8001dce:	2014      	movs	r0, #20
 8001dd0:	f002 fc8a 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001dd4:	2014      	movs	r0, #20
 8001dd6:	f002 fca3 	bl	8004720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	; 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40006400 	.word	0x40006400
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0b2      	sub	sp, #200	; 0xc8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e04:	f107 0318 	add.w	r3, r7, #24
 8001e08:	229c      	movs	r2, #156	; 0x9c
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00f fd46 	bl	801189e <memset>
  if(hsd->Instance==SDMMC1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a38      	ldr	r2, [pc, #224]	; (8001ef8 <HAL_SD_MspInit+0x10c>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d169      	bne.n	8001ef0 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001e1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e2e:	f107 0318 	add.w	r3, r7, #24
 8001e32:	4618      	mov	r0, r3
 8001e34:	f004 f890 	bl	8005f58 <HAL_RCCEx_PeriphCLKConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001e3e:	f7ff fe25 	bl	8001a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e42:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <HAL_SD_MspInit+0x110>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	4a2d      	ldr	r2, [pc, #180]	; (8001efc <HAL_SD_MspInit+0x110>)
 8001e48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_SD_MspInit+0x110>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5a:	4b28      	ldr	r3, [pc, #160]	; (8001efc <HAL_SD_MspInit+0x110>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	4a27      	ldr	r2, [pc, #156]	; (8001efc <HAL_SD_MspInit+0x110>)
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_SD_MspInit+0x110>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <HAL_SD_MspInit+0x110>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	4a21      	ldr	r2, [pc, #132]	; (8001efc <HAL_SD_MspInit+0x110>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <HAL_SD_MspInit+0x110>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001eac:	4619      	mov	r1, r3
 8001eae:	4814      	ldr	r0, [pc, #80]	; (8001f00 <HAL_SD_MspInit+0x114>)
 8001eb0:	f002 feb6 	bl	8004c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001eb4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ece:	230c      	movs	r3, #12
 8001ed0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480a      	ldr	r0, [pc, #40]	; (8001f04 <HAL_SD_MspInit+0x118>)
 8001edc:	f002 fea0 	bl	8004c20 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2105      	movs	r1, #5
 8001ee4:	2031      	movs	r0, #49	; 0x31
 8001ee6:	f002 fbff 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001eea:	2031      	movs	r0, #49	; 0x31
 8001eec:	f002 fc18 	bl	8004720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	37c8      	adds	r7, #200	; 0xc8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	50062400 	.word	0x50062400
 8001efc:	40021000 	.word	0x40021000
 8001f00:	48000c00 	.word	0x48000c00
 8001f04:	48000800 	.word	0x48000800

08001f08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	; 0x38
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f16:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <HAL_InitTick+0xe0>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	4a33      	ldr	r2, [pc, #204]	; (8001fe8 <HAL_InitTick+0xe0>)
 8001f1c:	f043 0310 	orr.w	r3, r3, #16
 8001f20:	6593      	str	r3, [r2, #88]	; 0x58
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_InitTick+0xe0>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f2e:	f107 0210 	add.w	r2, r7, #16
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 ff1d 	bl	8005d78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d103      	bne.n	8001f50 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f48:	f003 feea 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8001f4c:	6378      	str	r0, [r7, #52]	; 0x34
 8001f4e:	e004      	b.n	8001f5a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f50:	f003 fee6 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8001f54:	4603      	mov	r3, r0
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5c:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_InitTick+0xe4>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0c9b      	lsrs	r3, r3, #18
 8001f64:	3b01      	subs	r3, #1
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_InitTick+0xe8>)
 8001f6a:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <HAL_InitTick+0xec>)
 8001f6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_InitTick+0xe8>)
 8001f70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f76:	4a1e      	ldr	r2, [pc, #120]	; (8001ff0 <HAL_InitTick+0xe8>)
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <HAL_InitTick+0xe8>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_InitTick+0xe8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_InitTick+0xe8>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f8e:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <HAL_InitTick+0xe8>)
 8001f90:	f007 fa81 	bl	8009496 <HAL_TIM_Base_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d11b      	bne.n	8001fda <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001fa2:	4813      	ldr	r0, [pc, #76]	; (8001ff0 <HAL_InitTick+0xe8>)
 8001fa4:	f007 fad8 	bl	8009558 <HAL_TIM_Base_Start_IT>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001fae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d111      	bne.n	8001fda <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fb6:	2036      	movs	r0, #54	; 0x36
 8001fb8:	f002 fbb2 	bl	8004720 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	d808      	bhi.n	8001fd4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	2036      	movs	r0, #54	; 0x36
 8001fc8:	f002 fb8e 	bl	80046e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_InitTick+0xf0>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e002      	b.n	8001fda <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3738      	adds	r7, #56	; 0x38
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	431bde83 	.word	0x431bde83
 8001ff0:	20000848 	.word	0x20000848
 8001ff4:	40001000 	.word	0x40001000
 8001ff8:	20000004 	.word	0x20000004

08001ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <NMI_Handler+0x4>

08002002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <MemManage_Handler+0x4>

0800200e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002012:	e7fe      	b.n	8002012 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <UsageFault_Handler+0x4>

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <DMA1_Channel4_IRQHandler+0x10>)
 800202e:	f002 fca8 	bl	8004982 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000334 	.word	0x20000334

0800203c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <ADC1_IRQHandler+0x10>)
 8002042:	f000 fd3f 	bl	8002ac4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002cc 	.word	0x200002cc

08002050 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <CAN1_RX0_IRQHandler+0x10>)
 8002056:	f002 f860 	bl	800411a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000394 	.word	0x20000394

08002064 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <SDMMC1_IRQHandler+0x10>)
 800206a:	f005 ff97 	bl	8007f9c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200003bc 	.word	0x200003bc

08002078 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <TIM6_DAC_IRQHandler+0x10>)
 800207e:	f007 fadb 	bl	8009638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000848 	.word	0x20000848

0800208c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return 1;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_kill>:

int _kill(int pid, int sig)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020a6:	f00f fac9 	bl	801163c <__errno>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2216      	movs	r2, #22
 80020ae:	601a      	str	r2, [r3, #0]
  return -1;
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_exit>:

void _exit (int status)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ffe7 	bl	800209c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ce:	e7fe      	b.n	80020ce <_exit+0x12>

080020d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e00a      	b.n	80020f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e2:	f3af 8000 	nop.w
 80020e6:	4601      	mov	r1, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf0      	blt.n	80020e2 <_read+0x12>
  }

  return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e009      	b.n	8002130 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbf1      	blt.n	800211c <_write+0x12>
  }
  return len;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_close>:

int _close(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216a:	605a      	str	r2, [r3, #4]
  return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_isatty>:

int _isatty(int file)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f00f fa2e 	bl	801163c <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200a0000 	.word	0x200a0000
 800220c:	00000800 	.word	0x00000800
 8002210:	20000894 	.word	0x20000894
 8002214:	20002718 	.word	0x20002718

08002218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <SystemInit+0x20>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <SystemInit+0x20>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800223c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002274 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002240:	f7ff ffea 	bl	8002218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <LoopForever+0x6>)
  ldr r1, =_edata
 8002246:	490d      	ldr	r1, [pc, #52]	; (800227c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002248:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <LoopForever+0xe>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800225c:	4c0a      	ldr	r4, [pc, #40]	; (8002288 <LoopForever+0x16>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800226a:	f00f fae3 	bl	8011834 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800226e:	f7fe ff77 	bl	8001160 <main>

08002272 <LoopForever>:

LoopForever:
    b LoopForever
 8002272:	e7fe      	b.n	8002272 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002274:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002280:	0801681c 	.word	0x0801681c
  ldr r2, =_sbss
 8002284:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002288:	20002718 	.word	0x20002718

0800228c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800228c:	e7fe      	b.n	800228c <CAN1_RX1_IRQHandler>

0800228e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002298:	2003      	movs	r0, #3
 800229a:	f002 fa1a 	bl	80046d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800229e:	200f      	movs	r0, #15
 80022a0:	f7ff fe32 	bl	8001f08 <HAL_InitTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	e001      	b.n	80022b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022b0:	f7ff fc4c 	bl	8001b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022b4:	79fb      	ldrb	r3, [r7, #7]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x20>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x24>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_IncTick+0x24>)
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000008 	.word	0x20000008
 80022e4:	20000898 	.word	0x20000898

080022e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return uwTick;
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_GetTick+0x14>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000898 	.word	0x20000898

08002300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7ff ffee 	bl	80022e8 <HAL_GetTick>
 800230c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002318:	d005      	beq.n	8002326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_Delay+0x44>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002326:	bf00      	nop
 8002328:	f7ff ffde 	bl	80022e8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	429a      	cmp	r2, r3
 8002336:	d8f7      	bhi.n	8002328 <HAL_Delay+0x28>
  {
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000008 	.word	0x20000008

08002348 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	609a      	str	r2, [r3, #8]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3360      	adds	r3, #96	; 0x60
 80023c2:	461a      	mov	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <LL_ADC_SetOffset+0x44>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	4313      	orrs	r3, r2
 80023e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023e8:	bf00      	nop
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	03fff000 	.word	0x03fff000

080023f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3360      	adds	r3, #96	; 0x60
 8002406:	461a      	mov	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3360      	adds	r3, #96	; 0x60
 8002434:	461a      	mov	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	431a      	orrs	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	615a      	str	r2, [r3, #20]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b087      	sub	sp, #28
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3330      	adds	r3, #48	; 0x30
 80024b6:	461a      	mov	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	4413      	add	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	211f      	movs	r1, #31
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	401a      	ands	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	f003 011f 	and.w	r1, r3, #31
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	431a      	orrs	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3314      	adds	r3, #20
 8002534:	461a      	mov	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	0e5b      	lsrs	r3, r3, #25
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	4413      	add	r3, r2
 8002542:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	0d1b      	lsrs	r3, r3, #20
 800254c:	f003 031f 	and.w	r3, r3, #31
 8002550:	2107      	movs	r1, #7
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	401a      	ands	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	0d1b      	lsrs	r3, r3, #20
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	431a      	orrs	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	43db      	mvns	r3, r3
 8002596:	401a      	ands	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0318 	and.w	r3, r3, #24
 800259e:	4908      	ldr	r1, [pc, #32]	; (80025c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025a0:	40d9      	lsrs	r1, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	400b      	ands	r3, r1
 80025a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025aa:	431a      	orrs	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	0007ffff 	.word	0x0007ffff

080025c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80025d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6093      	str	r3, [r2, #8]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025fc:	d101      	bne.n	8002602 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002620:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002624:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800264c:	d101      	bne.n	8002652 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002670:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002674:	f043 0201 	orr.w	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <LL_ADC_IsEnabled+0x18>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <LL_ADC_IsEnabled+0x1a>
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026c2:	f043 0204 	orr.w	r2, r3, #4
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d101      	bne.n	80026ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b08      	cmp	r3, #8
 800270e:	d101      	bne.n	8002714 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e12f      	b.n	800299e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff fa25 	bl	8001b9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff3f 	bl	80025e8 <LL_ADC_IsDeepPowerDownEnabled>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff25 	bl	80025c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff5a 	bl	8002638 <LL_ADC_IsInternalRegulatorEnabled>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d115      	bne.n	80027b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff3e 	bl	8002610 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002794:	4b84      	ldr	r3, [pc, #528]	; (80029a8 <HAL_ADC_Init+0x284>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	4a84      	ldr	r2, [pc, #528]	; (80029ac <HAL_ADC_Init+0x288>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	3301      	adds	r3, #1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027a8:	e002      	b.n	80027b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f9      	bne.n	80027aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ff3c 	bl	8002638 <LL_ADC_IsInternalRegulatorEnabled>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10d      	bne.n	80027e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	f043 0210 	orr.w	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff75 	bl	80026d6 <LL_ADC_REG_IsConversionOngoing>
 80027ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 80c8 	bne.w	800298c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 80c4 	bne.w	800298c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800280c:	f043 0202 	orr.w	r2, r3, #2
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff35 	bl	8002688 <LL_ADC_IsEnabled>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002824:	4862      	ldr	r0, [pc, #392]	; (80029b0 <HAL_ADC_Init+0x28c>)
 8002826:	f7ff ff2f 	bl	8002688 <LL_ADC_IsEnabled>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4619      	mov	r1, r3
 8002836:	485f      	ldr	r0, [pc, #380]	; (80029b4 <HAL_ADC_Init+0x290>)
 8002838:	f7ff fd86 	bl	8002348 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7e5b      	ldrb	r3, [r3, #25]
 8002840:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002846:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800284c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002852:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d106      	bne.n	8002878 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	3b01      	subs	r3, #1
 8002870:	045b      	lsls	r3, r3, #17
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_ADC_Init+0x294>)
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	69b9      	ldr	r1, [r7, #24]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff12 	bl	80026d6 <LL_ADC_REG_IsConversionOngoing>
 80028b2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff1f 	bl	80026fc <LL_ADC_INJ_IsConversionOngoing>
 80028be:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d140      	bne.n	8002948 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d13d      	bne.n	8002948 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7e1b      	ldrb	r3, [r3, #24]
 80028d4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028d6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028de:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ee:	f023 0306 	bic.w	r3, r3, #6
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002902:	2b01      	cmp	r3, #1
 8002904:	d118      	bne.n	8002938 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800291c:	4311      	orrs	r1, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002922:	4311      	orrs	r1, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002928:	430a      	orrs	r2, r1
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	611a      	str	r2, [r3, #16]
 8002936:	e007      	b.n	8002948 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d10c      	bne.n	800296a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f023 010f 	bic.w	r1, r3, #15
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	1e5a      	subs	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
 8002968:	e007      	b.n	800297a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 020f 	bic.w	r2, r2, #15
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	659a      	str	r2, [r3, #88]	; 0x58
 800298a:	e007      	b.n	800299c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f043 0210 	orr.w	r2, r3, #16
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800299c:	7ffb      	ldrb	r3, [r7, #31]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000000 	.word	0x20000000
 80029ac:	053e2d63 	.word	0x053e2d63
 80029b0:	50040000 	.word	0x50040000
 80029b4:	50040300 	.word	0x50040300
 80029b8:	fff0c007 	.word	0xfff0c007

080029bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fe82 	bl	80026d6 <LL_ADC_REG_IsConversionOngoing>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d167      	bne.n	8002aa8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_Start_DMA+0x2a>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e063      	b.n	8002aae <HAL_ADC_Start_DMA+0xf2>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fe36 	bl	8003660 <ADC_Enable>
 80029f4:	4603      	mov	r3, r0
 80029f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d14f      	bne.n	8002a9e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	f023 0206 	bic.w	r2, r3, #6
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a2a:	e002      	b.n	8002a32 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a36:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <HAL_ADC_Start_DMA+0xfc>)
 8002a38:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3e:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <HAL_ADC_Start_DMA+0x100>)
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a46:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <HAL_ADC_Start_DMA+0x104>)
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	221c      	movs	r2, #28
 8002a50:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0210 	orr.w	r2, r2, #16
 8002a68:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3340      	adds	r3, #64	; 0x40
 8002a84:	4619      	mov	r1, r3
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f001 feff 	bl	800488c <HAL_DMA_Start_IT>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fe09 	bl	80026ae <LL_ADC_REG_StartConversion>
 8002a9c:	e006      	b.n	8002aac <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002aa6:	e001      	b.n	8002aac <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	0800376d 	.word	0x0800376d
 8002abc:	08003845 	.word	0x08003845
 8002ac0:	08003861 	.word	0x08003861

08002ac4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d017      	beq.n	8002b1a <HAL_ADC_IRQHandler+0x56>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fee9 	bl	80038e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2202      	movs	r2, #2
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d004      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x6a>
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d05e      	beq.n	8002bf6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d059      	beq.n	8002bf6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fc8e 	bl	8002480 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d03e      	beq.n	8002be8 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d135      	bne.n	8002be8 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d12e      	bne.n	8002be8 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fda1 	bl	80026d6 <LL_ADC_REG_IsConversionOngoing>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11a      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 020c 	bic.w	r2, r2, #12
 8002ba8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d112      	bne.n	8002be8 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	659a      	str	r2, [r3, #88]	; 0x58
 8002bce:	e00b      	b.n	8002be8 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	f043 0210 	orr.w	r2, r3, #16
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fe f8b9 	bl	8000d60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <HAL_ADC_IRQHandler+0x146>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d072      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d06d      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fc5f 	bl	80024fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c40:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fc1a 	bl	8002480 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c4c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d047      	beq.n	8002cec <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_ADC_IRQHandler+0x1b2>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d03f      	beq.n	8002cec <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d13a      	bne.n	8002cec <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d133      	bne.n	8002cec <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d12e      	bne.n	8002cec <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fd32 	bl	80026fc <LL_ADC_INJ_IsConversionOngoing>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11a      	bne.n	8002cd4 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cac:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d112      	bne.n	8002cec <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	659a      	str	r2, [r3, #88]	; 0x58
 8002cd2:	e00b      	b.n	8002cec <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	f043 0210 	orr.w	r2, r3, #16
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fdd1 	bl	8003894 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2260      	movs	r2, #96	; 0x60
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d011      	beq.n	8002d28 <HAL_ADC_IRQHandler+0x264>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f890 	bl	8002e40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d012      	beq.n	8002d58 <HAL_ADC_IRQHandler+0x294>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00d      	beq.n	8002d58 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fdb7 	bl	80038bc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d012      	beq.n	8002d88 <HAL_ADC_IRQHandler+0x2c4>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fda9 	bl	80038d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d02a      	beq.n	8002de8 <HAL_ADC_IRQHandler+0x324>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d025      	beq.n	8002de8 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002da4:	2301      	movs	r3, #1
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	e008      	b.n	8002dbc <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002db8:	2301      	movs	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d10e      	bne.n	8002de0 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	f043 0202 	orr.w	r2, r3, #2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f83a 	bl	8002e54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2210      	movs	r2, #16
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d018      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x360>
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	f043 0208 	orr.w	r2, r3, #8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e1c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fd42 	bl	80038a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002e24:	bf00      	nop
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b0b6      	sub	sp, #216	; 0xd8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x22>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e3d5      	b.n	8003636 <HAL_ADC_ConfigChannel+0x7ce>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fc1d 	bl	80026d6 <LL_ADC_REG_IsConversionOngoing>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 83ba 	bne.w	8003618 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d824      	bhi.n	8002ef6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	3b02      	subs	r3, #2
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d81b      	bhi.n	8002eee <HAL_ADC_ConfigChannel+0x86>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <HAL_ADC_ConfigChannel+0x54>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002ed5 	.word	0x08002ed5
 8002ec4:	08002edd 	.word	0x08002edd
 8002ec8:	08002ee5 	.word	0x08002ee5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	220c      	movs	r2, #12
 8002ed0:	605a      	str	r2, [r3, #4]
          break;
 8002ed2:	e011      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2212      	movs	r2, #18
 8002ed8:	605a      	str	r2, [r3, #4]
          break;
 8002eda:	e00d      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2218      	movs	r2, #24
 8002ee0:	605a      	str	r2, [r3, #4]
          break;
 8002ee2:	e009      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eea:	605a      	str	r2, [r3, #4]
          break;
 8002eec:	e004      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2206      	movs	r2, #6
 8002ef2:	605a      	str	r2, [r3, #4]
          break;
 8002ef4:	e000      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002ef6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	f7ff face 	bl	80024a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fbe1 	bl	80026d6 <LL_ADC_REG_IsConversionOngoing>
 8002f14:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fbed 	bl	80026fc <LL_ADC_INJ_IsConversionOngoing>
 8002f22:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 81c1 	bne.w	80032b2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 81bc 	bne.w	80032b2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f42:	d10f      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f7ff fae8 	bl	8002524 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fa7c 	bl	800245a <LL_ADC_SetSamplingTimeCommonConfig>
 8002f62:	e00e      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	6819      	ldr	r1, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f7ff fad7 	bl	8002524 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fa6c 	bl	800245a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	08db      	lsrs	r3, r3, #3
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d00a      	beq.n	8002fba <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6919      	ldr	r1, [r3, #16]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fb4:	f7ff f9fc 	bl	80023b0 <LL_ADC_SetOffset>
 8002fb8:	e17b      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fa19 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x17e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fa0e 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	e01e      	b.n	8003024 <HAL_ADC_ConfigChannel+0x1bc>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fa03 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003004:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003008:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800300c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003014:	2320      	movs	r3, #32
 8003016:	e004      	b.n	8003022 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003018:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_ADC_ConfigChannel+0x1d4>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0e9b      	lsrs	r3, r3, #26
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	e018      	b.n	800306e <HAL_ADC_ConfigChannel+0x206>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003058:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003060:	2320      	movs	r3, #32
 8003062:	e004      	b.n	800306e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800306e:	429a      	cmp	r2, r3
 8003070:	d106      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff f9d2 	bl	8002424 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2101      	movs	r1, #1
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff f9b6 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 800308c:	4603      	mov	r3, r0
 800308e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x244>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2101      	movs	r1, #1
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff f9ab 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 80030a2:	4603      	mov	r3, r0
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	f003 021f 	and.w	r2, r3, #31
 80030aa:	e01e      	b.n	80030ea <HAL_ADC_ConfigChannel+0x282>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2101      	movs	r1, #1
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f9a0 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80030da:	2320      	movs	r3, #32
 80030dc:	e004      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80030de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x29a>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	0e9b      	lsrs	r3, r3, #26
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	e018      	b.n	8003134 <HAL_ADC_ConfigChannel+0x2cc>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003116:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800311a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800311e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003126:	2320      	movs	r3, #32
 8003128:	e004      	b.n	8003134 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800312a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003134:	429a      	cmp	r2, r3
 8003136:	d106      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2200      	movs	r2, #0
 800313e:	2101      	movs	r1, #1
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff f96f 	bl	8002424 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2102      	movs	r1, #2
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff f953 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8003152:	4603      	mov	r3, r0
 8003154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x30a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2102      	movs	r1, #2
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff f948 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8003168:	4603      	mov	r3, r0
 800316a:	0e9b      	lsrs	r3, r3, #26
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	e01e      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x348>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2102      	movs	r1, #2
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff f93d 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 800317e:	4603      	mov	r3, r0
 8003180:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003190:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003194:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003198:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e004      	b.n	80031ae <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80031a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x360>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0e9b      	lsrs	r3, r3, #26
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	e016      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x38e>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e004      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80031ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d106      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	2102      	movs	r1, #2
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f90e 	bl	8002424 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2103      	movs	r1, #3
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f8f2 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8003214:	4603      	mov	r3, r0
 8003216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x3cc>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2103      	movs	r1, #3
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f8e7 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	0e9b      	lsrs	r3, r3, #26
 800322e:	f003 021f 	and.w	r2, r3, #31
 8003232:	e017      	b.n	8003264 <HAL_ADC_ConfigChannel+0x3fc>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2103      	movs	r1, #3
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f8dc 	bl	80023f8 <LL_ADC_GetOffsetChannel>
 8003240:	4603      	mov	r3, r0
 8003242:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800324c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800324e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e003      	b.n	8003262 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800325a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_ADC_ConfigChannel+0x414>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	e011      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x438>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800328a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800328c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003294:	2320      	movs	r3, #32
 8003296:	e003      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d106      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	2103      	movs	r1, #3
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff f8b9 	bl	8002424 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f9e6 	bl	8002688 <LL_ADC_IsEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f040 8140 	bne.w	8003544 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	461a      	mov	r2, r3
 80032d2:	f7ff f953 	bl	800257c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	4a8f      	ldr	r2, [pc, #572]	; (8003518 <HAL_ADC_ConfigChannel+0x6b0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	f040 8131 	bne.w	8003544 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <HAL_ADC_ConfigChannel+0x4a2>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	0e9b      	lsrs	r3, r3, #26
 80032f8:	3301      	adds	r3, #1
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2b09      	cmp	r3, #9
 8003300:	bf94      	ite	ls
 8003302:	2301      	movls	r3, #1
 8003304:	2300      	movhi	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e019      	b.n	800333e <HAL_ADC_ConfigChannel+0x4d6>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800331a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800331c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e003      	b.n	800332e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2b09      	cmp	r3, #9
 8003336:	bf94      	ite	ls
 8003338:	2301      	movls	r3, #1
 800333a:	2300      	movhi	r3, #0
 800333c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800333e:	2b00      	cmp	r3, #0
 8003340:	d079      	beq.n	8003436 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334a:	2b00      	cmp	r3, #0
 800334c:	d107      	bne.n	800335e <HAL_ADC_ConfigChannel+0x4f6>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	0e9b      	lsrs	r3, r3, #26
 8003354:	3301      	adds	r3, #1
 8003356:	069b      	lsls	r3, r3, #26
 8003358:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800335c:	e015      	b.n	800338a <HAL_ADC_ConfigChannel+0x522>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800336c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003376:	2320      	movs	r3, #32
 8003378:	e003      	b.n	8003382 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800337a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3301      	adds	r3, #1
 8003384:	069b      	lsls	r3, r3, #26
 8003386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x542>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	3301      	adds	r3, #1
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	e017      	b.n	80033da <HAL_ADC_ConfigChannel+0x572>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80033c2:	2320      	movs	r3, #32
 80033c4:	e003      	b.n	80033ce <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	3301      	adds	r3, #1
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	ea42 0103 	orr.w	r1, r2, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x598>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	0e9b      	lsrs	r3, r3, #26
 80033f0:	3301      	adds	r3, #1
 80033f2:	f003 021f 	and.w	r2, r3, #31
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	e018      	b.n	8003432 <HAL_ADC_ConfigChannel+0x5ca>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800340e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003410:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003418:	2320      	movs	r3, #32
 800341a:	e003      	b.n	8003424 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800341c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f003 021f 	and.w	r2, r3, #31
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003432:	430b      	orrs	r3, r1
 8003434:	e081      	b.n	800353a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x5ea>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	0e9b      	lsrs	r3, r3, #26
 8003448:	3301      	adds	r3, #1
 800344a:	069b      	lsls	r3, r3, #26
 800344c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003450:	e015      	b.n	800347e <HAL_ADC_ConfigChannel+0x616>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800346a:	2320      	movs	r3, #32
 800346c:	e003      	b.n	8003476 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	3301      	adds	r3, #1
 8003478:	069b      	lsls	r3, r3, #26
 800347a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_ADC_ConfigChannel+0x636>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	0e9b      	lsrs	r3, r3, #26
 8003490:	3301      	adds	r3, #1
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2101      	movs	r1, #1
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	e017      	b.n	80034ce <HAL_ADC_ConfigChannel+0x666>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	61fb      	str	r3, [r7, #28]
  return result;
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80034b6:	2320      	movs	r3, #32
 80034b8:	e003      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2101      	movs	r1, #1
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	ea42 0103 	orr.w	r1, r2, r3
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10d      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x692>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	0e9b      	lsrs	r3, r3, #26
 80034e4:	3301      	adds	r3, #1
 80034e6:	f003 021f 	and.w	r2, r3, #31
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	3b1e      	subs	r3, #30
 80034f2:	051b      	lsls	r3, r3, #20
 80034f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034f8:	e01e      	b.n	8003538 <HAL_ADC_ConfigChannel+0x6d0>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	613b      	str	r3, [r7, #16]
  return result;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003512:	2320      	movs	r3, #32
 8003514:	e006      	b.n	8003524 <HAL_ADC_ConfigChannel+0x6bc>
 8003516:	bf00      	nop
 8003518:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f003 021f 	and.w	r2, r3, #31
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	3b1e      	subs	r3, #30
 8003532:	051b      	lsls	r3, r3, #20
 8003534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003538:	430b      	orrs	r3, r1
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	6892      	ldr	r2, [r2, #8]
 800353e:	4619      	mov	r1, r3
 8003540:	f7fe fff0 	bl	8002524 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b3d      	ldr	r3, [pc, #244]	; (8003640 <HAL_ADC_ConfigChannel+0x7d8>)
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d06c      	beq.n	800362a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003550:	483c      	ldr	r0, [pc, #240]	; (8003644 <HAL_ADC_ConfigChannel+0x7dc>)
 8003552:	f7fe ff1f 	bl	8002394 <LL_ADC_GetCommonPathInternalCh>
 8003556:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a3a      	ldr	r2, [pc, #232]	; (8003648 <HAL_ADC_ConfigChannel+0x7e0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d127      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d121      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a35      	ldr	r2, [pc, #212]	; (800364c <HAL_ADC_ConfigChannel+0x7e4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d157      	bne.n	800362a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800357e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003582:	4619      	mov	r1, r3
 8003584:	482f      	ldr	r0, [pc, #188]	; (8003644 <HAL_ADC_ConfigChannel+0x7dc>)
 8003586:	f7fe fef2 	bl	800236e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800358a:	4b31      	ldr	r3, [pc, #196]	; (8003650 <HAL_ADC_ConfigChannel+0x7e8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	099b      	lsrs	r3, r3, #6
 8003590:	4a30      	ldr	r2, [pc, #192]	; (8003654 <HAL_ADC_ConfigChannel+0x7ec>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035a4:	e002      	b.n	80035ac <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f9      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b2:	e03a      	b.n	800362a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a27      	ldr	r2, [pc, #156]	; (8003658 <HAL_ADC_ConfigChannel+0x7f0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d113      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x77e>
 80035be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10d      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1f      	ldr	r2, [pc, #124]	; (800364c <HAL_ADC_ConfigChannel+0x7e4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d12a      	bne.n	800362a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035dc:	4619      	mov	r1, r3
 80035de:	4819      	ldr	r0, [pc, #100]	; (8003644 <HAL_ADC_ConfigChannel+0x7dc>)
 80035e0:	f7fe fec5 	bl	800236e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035e4:	e021      	b.n	800362a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_ADC_ConfigChannel+0x7f4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d11c      	bne.n	800362a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d116      	bne.n	800362a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a12      	ldr	r2, [pc, #72]	; (800364c <HAL_ADC_ConfigChannel+0x7e4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d111      	bne.n	800362a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800360a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800360e:	4619      	mov	r1, r3
 8003610:	480c      	ldr	r0, [pc, #48]	; (8003644 <HAL_ADC_ConfigChannel+0x7dc>)
 8003612:	f7fe feac 	bl	800236e <LL_ADC_SetCommonPathInternalCh>
 8003616:	e008      	b.n	800362a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003632:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003636:	4618      	mov	r0, r3
 8003638:	37d8      	adds	r7, #216	; 0xd8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	80080000 	.word	0x80080000
 8003644:	50040300 	.word	0x50040300
 8003648:	c7520000 	.word	0xc7520000
 800364c:	50040000 	.word	0x50040000
 8003650:	20000000 	.word	0x20000000
 8003654:	053e2d63 	.word	0x053e2d63
 8003658:	cb840000 	.word	0xcb840000
 800365c:	80000001 	.word	0x80000001

08003660 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003668:	2300      	movs	r3, #0
 800366a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f809 	bl	8002688 <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d169      	bne.n	8003750 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <ADC_Enable+0xfc>)
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	f043 0210 	orr.w	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e055      	b.n	8003752 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe ffd8 	bl	8002660 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036b0:	482b      	ldr	r0, [pc, #172]	; (8003760 <ADC_Enable+0x100>)
 80036b2:	f7fe fe6f 	bl	8002394 <LL_ADC_GetCommonPathInternalCh>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036c0:	4b28      	ldr	r3, [pc, #160]	; (8003764 <ADC_Enable+0x104>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	4a28      	ldr	r2, [pc, #160]	; (8003768 <ADC_Enable+0x108>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80036da:	e002      	b.n	80036e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	3b01      	subs	r3, #1
 80036e0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f9      	bne.n	80036dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036e8:	f7fe fdfe 	bl	80022e8 <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ee:	e028      	b.n	8003742 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe ffc7 	bl	8002688 <LL_ADC_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe ffab 	bl	8002660 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800370a:	f7fe fded 	bl	80022e8 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d914      	bls.n	8003742 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d00d      	beq.n	8003742 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	f043 0210 	orr.w	r2, r3, #16
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e007      	b.n	8003752 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	d1cf      	bne.n	80036f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	8000003f 	.word	0x8000003f
 8003760:	50040300 	.word	0x50040300
 8003764:	20000000 	.word	0x20000000
 8003768:	053e2d63 	.word	0x053e2d63

0800376c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003782:	2b00      	cmp	r3, #0
 8003784:	d14b      	bne.n	800381e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d021      	beq.n	80037e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fe6b 	bl	8002480 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d032      	beq.n	8003816 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d12b      	bne.n	8003816 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11f      	bne.n	8003816 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	659a      	str	r2, [r3, #88]	; 0x58
 80037e2:	e018      	b.n	8003816 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d111      	bne.n	8003816 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	f043 0201 	orr.w	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7fd faa2 	bl	8000d60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800381c:	e00e      	b.n	800383c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7ff fb12 	bl	8002e54 <HAL_ADC_ErrorCallback>
}
 8003830:	e004      	b.n	800383c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f7ff faea 	bl	8002e2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f7ff fae4 	bl	8002e54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e0ed      	b.n	8003ae6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fe fa1c 	bl	8001d54 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800392c:	f7fe fcdc 	bl	80022e8 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003932:	e012      	b.n	800395a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003934:	f7fe fcd8 	bl	80022e8 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b0a      	cmp	r3, #10
 8003940:	d90b      	bls.n	800395a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2205      	movs	r2, #5
 8003952:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e0c5      	b.n	8003ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0e5      	beq.n	8003934 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0202 	bic.w	r2, r2, #2
 8003976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003978:	f7fe fcb6 	bl	80022e8 <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800397e:	e012      	b.n	80039a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003980:	f7fe fcb2 	bl	80022e8 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b0a      	cmp	r3, #10
 800398c:	d90b      	bls.n	80039a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2205      	movs	r2, #5
 800399e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e09f      	b.n	8003ae6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e5      	bne.n	8003980 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7e1b      	ldrb	r3, [r3, #24]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d108      	bne.n	80039ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e007      	b.n	80039de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7e5b      	ldrb	r3, [r3, #25]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d108      	bne.n	80039f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e007      	b.n	8003a08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	7e9b      	ldrb	r3, [r3, #26]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d108      	bne.n	8003a22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0220 	orr.w	r2, r2, #32
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e007      	b.n	8003a32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0220 	bic.w	r2, r2, #32
 8003a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	7edb      	ldrb	r3, [r3, #27]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d108      	bne.n	8003a4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0210 	bic.w	r2, r2, #16
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	e007      	b.n	8003a5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0210 	orr.w	r2, r2, #16
 8003a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	7f1b      	ldrb	r3, [r3, #28]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d108      	bne.n	8003a76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0208 	orr.w	r2, r2, #8
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e007      	b.n	8003a86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0208 	bic.w	r2, r2, #8
 8003a84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	7f5b      	ldrb	r3, [r3, #29]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d108      	bne.n	8003aa0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0204 	orr.w	r2, r2, #4
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e007      	b.n	8003ab0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0204 	bic.w	r2, r2, #4
 8003aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	ea42 0103 	orr.w	r1, r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	1e5a      	subs	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b04:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b06:	7cfb      	ldrb	r3, [r7, #19]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d003      	beq.n	8003b14 <HAL_CAN_ConfigFilter+0x26>
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	f040 80aa 	bne.w	8003c68 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	401a      	ands	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d123      	bne.n	8003b96 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	401a      	ands	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	3248      	adds	r2, #72	; 0x48
 8003b76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b8c:	6979      	ldr	r1, [r7, #20]
 8003b8e:	3348      	adds	r3, #72	; 0x48
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d122      	bne.n	8003be4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	3248      	adds	r2, #72	; 0x48
 8003bc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bda:	6979      	ldr	r1, [r7, #20]
 8003bdc:	3348      	adds	r3, #72	; 0x48
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	440b      	add	r3, r1
 8003be2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003bfe:	e007      	b.n	8003c10 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	401a      	ands	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003c2a:	e007      	b.n	8003c3c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c5a:	f023 0201 	bic.w	r2, r3, #1
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e006      	b.n	8003c76 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d12e      	bne.n	8003cf4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cae:	f7fe fb1b 	bl	80022e8 <HAL_GetTick>
 8003cb2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003cb4:	e012      	b.n	8003cdc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cb6:	f7fe fb17 	bl	80022e8 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b0a      	cmp	r3, #10
 8003cc2:	d90b      	bls.n	8003cdc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2205      	movs	r2, #5
 8003cd4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e012      	b.n	8003d02 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e5      	bne.n	8003cb6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e006      	b.n	8003d02 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b089      	sub	sp, #36	; 0x24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d28:	7ffb      	ldrb	r3, [r7, #31]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d003      	beq.n	8003d36 <HAL_CAN_AddTxMessage+0x2c>
 8003d2e:	7ffb      	ldrb	r3, [r7, #31]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	f040 80ad 	bne.w	8003e90 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8095 	beq.w	8003e80 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	0e1b      	lsrs	r3, r3, #24
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003d60:	2201      	movs	r2, #1
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	409a      	lsls	r2, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10d      	bne.n	8003d8e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d7c:	68f9      	ldr	r1, [r7, #12]
 8003d7e:	6809      	ldr	r1, [r1, #0]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3318      	adds	r3, #24
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	440b      	add	r3, r1
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e00f      	b.n	8003dae <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d98:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d9e:	68f9      	ldr	r1, [r7, #12]
 8003da0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003da2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	3318      	adds	r3, #24
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	440b      	add	r3, r1
 8003dac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	3318      	adds	r3, #24
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	440b      	add	r3, r1
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	7d1b      	ldrb	r3, [r3, #20]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d111      	bne.n	8003dee <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3318      	adds	r3, #24
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	6811      	ldr	r1, [r2, #0]
 8003dde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	3318      	adds	r3, #24
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	440b      	add	r3, r1
 8003dea:	3304      	adds	r3, #4
 8003dec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3307      	adds	r3, #7
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	061a      	lsls	r2, r3, #24
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3306      	adds	r3, #6
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	041b      	lsls	r3, r3, #16
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3305      	adds	r3, #5
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	3204      	adds	r2, #4
 8003e0e:	7812      	ldrb	r2, [r2, #0]
 8003e10:	4610      	mov	r0, r2
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	6811      	ldr	r1, [r2, #0]
 8003e16:	ea43 0200 	orr.w	r2, r3, r0
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	440b      	add	r3, r1
 8003e20:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003e24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3303      	adds	r3, #3
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	061a      	lsls	r2, r3, #24
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3302      	adds	r3, #2
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	4313      	orrs	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	4610      	mov	r0, r2
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	6811      	ldr	r1, [r2, #0]
 8003e4c:	ea43 0200 	orr.w	r2, r3, r0
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	440b      	add	r3, r1
 8003e56:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003e5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3318      	adds	r3, #24
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	4413      	add	r3, r2
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	6811      	ldr	r1, [r2, #0]
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	3318      	adds	r3, #24
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	440b      	add	r3, r1
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e00e      	b.n	8003e9e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e006      	b.n	8003e9e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3724      	adds	r7, #36	; 0x24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b087      	sub	sp, #28
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ebe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d003      	beq.n	8003ece <HAL_CAN_GetRxMessage+0x24>
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	f040 80f3 	bne.w	80040b4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10e      	bne.n	8003ef2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d116      	bne.n	8003f10 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0e7      	b.n	80040c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0d8      	b.n	80040c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	331b      	adds	r3, #27
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	4413      	add	r3, r2
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0204 	and.w	r2, r3, #4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10c      	bne.n	8003f48 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	331b      	adds	r3, #27
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	4413      	add	r3, r2
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	0d5b      	lsrs	r3, r3, #21
 8003f3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e00b      	b.n	8003f60 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	331b      	adds	r3, #27
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	4413      	add	r3, r2
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	08db      	lsrs	r3, r3, #3
 8003f58:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	331b      	adds	r3, #27
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	4413      	add	r3, r2
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0202 	and.w	r2, r3, #2
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	331b      	adds	r3, #27
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	4413      	add	r3, r2
 8003f82:	3304      	adds	r3, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 020f 	and.w	r2, r3, #15
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	331b      	adds	r3, #27
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	4413      	add	r3, r2
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	331b      	adds	r3, #27
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	0c1b      	lsrs	r3, r3, #16
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	0a1a      	lsrs	r2, r3, #8
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	0c1a      	lsrs	r2, r3, #16
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	3302      	adds	r3, #2
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	4413      	add	r3, r2
 8004012:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0e1a      	lsrs	r2, r3, #24
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	3303      	adds	r3, #3
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	4413      	add	r3, r2
 800402c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	3304      	adds	r3, #4
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	4413      	add	r3, r2
 8004044:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	0a1a      	lsrs	r2, r3, #8
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	3305      	adds	r3, #5
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	4413      	add	r3, r2
 800405e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0c1a      	lsrs	r2, r3, #16
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	3306      	adds	r3, #6
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	4413      	add	r3, r2
 8004078:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	0e1a      	lsrs	r2, r3, #24
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	3307      	adds	r3, #7
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0220 	orr.w	r2, r2, #32
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	e007      	b.n	80040b0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0220 	orr.w	r2, r2, #32
 80040ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e006      	b.n	80040c2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d002      	beq.n	80040ec <HAL_CAN_ActivateNotification+0x1e>
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d109      	bne.n	8004100 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6959      	ldr	r1, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e006      	b.n	800410e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b08a      	sub	sp, #40	; 0x28
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d07c      	beq.n	800425a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d023      	beq.n	80041b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2201      	movs	r2, #1
 8004170:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f983 	bl	8004488 <HAL_CAN_TxMailbox0CompleteCallback>
 8004182:	e016      	b.n	80041b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
 8004196:	e00c      	b.n	80041b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	e002      	b.n	80041b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f989 	bl	80044c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d024      	beq.n	8004206 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f963 	bl	800449c <HAL_CAN_TxMailbox1CompleteCallback>
 80041d6:	e016      	b.n	8004206 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d004      	beq.n	80041ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ea:	e00c      	b.n	8004206 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	e002      	b.n	8004206 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f969 	bl	80044d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d024      	beq.n	800425a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004218:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f943 	bl	80044b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800422a:	e016      	b.n	800425a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d004      	beq.n	8004240 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	e00c      	b.n	800425a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d004      	beq.n	8004254 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
 8004252:	e002      	b.n	800425a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f949 	bl	80044ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00c      	beq.n	800427e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004274:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00b      	beq.n	80042a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d006      	beq.n	80042a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2208      	movs	r2, #8
 8004298:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f930 	bl	8004500 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fc fe29 	bl	8000f10 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00c      	beq.n	80042e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2210      	movs	r2, #16
 80042e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00b      	beq.n	8004304 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2208      	movs	r2, #8
 80042fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f912 	bl	8004528 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	f003 0310 	and.w	r3, r3, #16
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8f9 	bl	8004514 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00b      	beq.n	8004344 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	2b00      	cmp	r3, #0
 8004334:	d006      	beq.n	8004344 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2210      	movs	r2, #16
 800433c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8fc 	bl	800453c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d006      	beq.n	8004366 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2208      	movs	r2, #8
 800435e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f8f5 	bl	8004550 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d07b      	beq.n	8004468 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d072      	beq.n	8004460 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	f043 0304 	orr.w	r3, r3, #4
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d043      	beq.n	8004460 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d03e      	beq.n	8004460 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043e8:	2b60      	cmp	r3, #96	; 0x60
 80043ea:	d02b      	beq.n	8004444 <HAL_CAN_IRQHandler+0x32a>
 80043ec:	2b60      	cmp	r3, #96	; 0x60
 80043ee:	d82e      	bhi.n	800444e <HAL_CAN_IRQHandler+0x334>
 80043f0:	2b50      	cmp	r3, #80	; 0x50
 80043f2:	d022      	beq.n	800443a <HAL_CAN_IRQHandler+0x320>
 80043f4:	2b50      	cmp	r3, #80	; 0x50
 80043f6:	d82a      	bhi.n	800444e <HAL_CAN_IRQHandler+0x334>
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	d019      	beq.n	8004430 <HAL_CAN_IRQHandler+0x316>
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d826      	bhi.n	800444e <HAL_CAN_IRQHandler+0x334>
 8004400:	2b30      	cmp	r3, #48	; 0x30
 8004402:	d010      	beq.n	8004426 <HAL_CAN_IRQHandler+0x30c>
 8004404:	2b30      	cmp	r3, #48	; 0x30
 8004406:	d822      	bhi.n	800444e <HAL_CAN_IRQHandler+0x334>
 8004408:	2b10      	cmp	r3, #16
 800440a:	d002      	beq.n	8004412 <HAL_CAN_IRQHandler+0x2f8>
 800440c:	2b20      	cmp	r3, #32
 800440e:	d005      	beq.n	800441c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004410:	e01d      	b.n	800444e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	f043 0308 	orr.w	r3, r3, #8
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800441a:	e019      	b.n	8004450 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	f043 0310 	orr.w	r3, r3, #16
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004424:	e014      	b.n	8004450 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	f043 0320 	orr.w	r3, r3, #32
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800442e:	e00f      	b.n	8004450 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004438:	e00a      	b.n	8004450 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004442:	e005      	b.n	8004450 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800444c:	e000      	b.n	8004450 <HAL_CAN_IRQHandler+0x336>
            break;
 800444e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800445e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2204      	movs	r2, #4
 8004466:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f872 	bl	8004564 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004480:	bf00      	nop
 8004482:	3728      	adds	r7, #40	; 0x28
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <__NVIC_SetPriorityGrouping+0x44>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004594:	4013      	ands	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045aa:	4a04      	ldr	r2, [pc, #16]	; (80045bc <__NVIC_SetPriorityGrouping+0x44>)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	60d3      	str	r3, [r2, #12]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <__NVIC_GetPriorityGrouping+0x18>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	f003 0307 	and.w	r3, r3, #7
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	db0b      	blt.n	8004606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	f003 021f 	and.w	r2, r3, #31
 80045f4:	4907      	ldr	r1, [pc, #28]	; (8004614 <__NVIC_EnableIRQ+0x38>)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2001      	movs	r0, #1
 80045fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	e000e100 	.word	0xe000e100

08004618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	6039      	str	r1, [r7, #0]
 8004622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004628:	2b00      	cmp	r3, #0
 800462a:	db0a      	blt.n	8004642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	490c      	ldr	r1, [pc, #48]	; (8004664 <__NVIC_SetPriority+0x4c>)
 8004632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004636:	0112      	lsls	r2, r2, #4
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	440b      	add	r3, r1
 800463c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004640:	e00a      	b.n	8004658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	4908      	ldr	r1, [pc, #32]	; (8004668 <__NVIC_SetPriority+0x50>)
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	3b04      	subs	r3, #4
 8004650:	0112      	lsls	r2, r2, #4
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	440b      	add	r3, r1
 8004656:	761a      	strb	r2, [r3, #24]
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	e000e100 	.word	0xe000e100
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f1c3 0307 	rsb	r3, r3, #7
 8004686:	2b04      	cmp	r3, #4
 8004688:	bf28      	it	cs
 800468a:	2304      	movcs	r3, #4
 800468c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3304      	adds	r3, #4
 8004692:	2b06      	cmp	r3, #6
 8004694:	d902      	bls.n	800469c <NVIC_EncodePriority+0x30>
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	3b03      	subs	r3, #3
 800469a:	e000      	b.n	800469e <NVIC_EncodePriority+0x32>
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43da      	mvns	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	401a      	ands	r2, r3
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	43d9      	mvns	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c4:	4313      	orrs	r3, r2
         );
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3724      	adds	r7, #36	; 0x24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff ff4c 	bl	8004578 <__NVIC_SetPriorityGrouping>
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046fa:	f7ff ff61 	bl	80045c0 <__NVIC_GetPriorityGrouping>
 80046fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	6978      	ldr	r0, [r7, #20]
 8004706:	f7ff ffb1 	bl	800466c <NVIC_EncodePriority>
 800470a:	4602      	mov	r2, r0
 800470c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff ff80 	bl	8004618 <__NVIC_SetPriority>
}
 8004718:	bf00      	nop
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800472a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff ff54 	bl	80045dc <__NVIC_EnableIRQ>
}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e08d      	b.n	800486a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_DMA_Init+0x138>)
 8004756:	429a      	cmp	r2, r3
 8004758:	d80f      	bhi.n	800477a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	4b45      	ldr	r3, [pc, #276]	; (8004878 <HAL_DMA_Init+0x13c>)
 8004762:	4413      	add	r3, r2
 8004764:	4a45      	ldr	r2, [pc, #276]	; (800487c <HAL_DMA_Init+0x140>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	009a      	lsls	r2, r3, #2
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a42      	ldr	r2, [pc, #264]	; (8004880 <HAL_DMA_Init+0x144>)
 8004776:	641a      	str	r2, [r3, #64]	; 0x40
 8004778:	e00e      	b.n	8004798 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	4b40      	ldr	r3, [pc, #256]	; (8004884 <HAL_DMA_Init+0x148>)
 8004782:	4413      	add	r3, r2
 8004784:	4a3d      	ldr	r2, [pc, #244]	; (800487c <HAL_DMA_Init+0x140>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	009a      	lsls	r2, r3, #2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a3c      	ldr	r2, [pc, #240]	; (8004888 <HAL_DMA_Init+0x14c>)
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80047bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f9b6 	bl	8004b5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047f8:	d102      	bne.n	8004800 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004814:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d010      	beq.n	8004840 <HAL_DMA_Init+0x104>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b04      	cmp	r3, #4
 8004824:	d80c      	bhi.n	8004840 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f9d6 	bl	8004bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	e008      	b.n	8004852 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40020407 	.word	0x40020407
 8004878:	bffdfff8 	.word	0xbffdfff8
 800487c:	cccccccd 	.word	0xcccccccd
 8004880:	40020000 	.word	0x40020000
 8004884:	bffdfbf8 	.word	0xbffdfbf8
 8004888:	40020400 	.word	0x40020400

0800488c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_DMA_Start_IT+0x20>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e066      	b.n	800497a <HAL_DMA_Start_IT+0xee>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d155      	bne.n	800496c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f8fb 	bl	8004ae0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 020e 	orr.w	r2, r2, #14
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e00f      	b.n	8004924 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0204 	bic.w	r2, r2, #4
 8004912:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 020a 	orr.w	r2, r2, #10
 8004922:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004940:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004958:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e005      	b.n	8004978 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004974:	2302      	movs	r3, #2
 8004976:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f003 031c 	and.w	r3, r3, #28
 80049a2:	2204      	movs	r2, #4
 80049a4:	409a      	lsls	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d026      	beq.n	80049fc <HAL_DMA_IRQHandler+0x7a>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d021      	beq.n	80049fc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d107      	bne.n	80049d6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0204 	bic.w	r2, r2, #4
 80049d4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f003 021c 	and.w	r2, r3, #28
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2104      	movs	r1, #4
 80049e4:	fa01 f202 	lsl.w	r2, r1, r2
 80049e8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d071      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80049fa:	e06c      	b.n	8004ad6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a00:	f003 031c 	and.w	r3, r3, #28
 8004a04:	2202      	movs	r2, #2
 8004a06:	409a      	lsls	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d02e      	beq.n	8004a6e <HAL_DMA_IRQHandler+0xec>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d029      	beq.n	8004a6e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 020a 	bic.w	r2, r2, #10
 8004a36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	f003 021c 	and.w	r2, r3, #28
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	2102      	movs	r1, #2
 8004a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d038      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004a6c:	e033      	b.n	8004ad6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	f003 031c 	and.w	r3, r3, #28
 8004a76:	2208      	movs	r2, #8
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d02a      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x156>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d025      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 020e 	bic.w	r2, r2, #14
 8004a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa0:	f003 021c 	and.w	r2, r3, #28
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8004aae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
}
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004af6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b08:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f003 021c 	and.w	r2, r3, #28
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2101      	movs	r1, #1
 8004b18:	fa01 f202 	lsl.w	r2, r1, r2
 8004b1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d108      	bne.n	8004b40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b3e:	e007      	b.n	8004b50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	60da      	str	r2, [r3, #12]
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d80a      	bhi.n	8004b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b7c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6493      	str	r3, [r2, #72]	; 0x48
 8004b84:	e007      	b.n	8004b96 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	089b      	lsrs	r3, r3, #2
 8004b8c:	009a      	lsls	r2, r3, #2
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b90:	4413      	add	r3, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	3b08      	subs	r3, #8
 8004b9e:	4a0c      	ldr	r2, [pc, #48]	; (8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a0a      	ldr	r2, [pc, #40]	; (8004bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004bac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40020407 	.word	0x40020407
 8004bcc:	4002081c 	.word	0x4002081c
 8004bd0:	cccccccd 	.word	0xcccccccd
 8004bd4:	40020880 	.word	0x40020880

08004bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004bfa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2201      	movs	r2, #1
 8004c06:	409a      	lsls	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	1000823f 	.word	0x1000823f
 8004c1c:	40020940 	.word	0x40020940

08004c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c2e:	e166      	b.n	8004efe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	2101      	movs	r1, #1
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8158 	beq.w	8004ef8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d005      	beq.n	8004c60 <HAL_GPIO_Init+0x40>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d130      	bne.n	8004cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4013      	ands	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c96:	2201      	movs	r2, #1
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	091b      	lsrs	r3, r3, #4
 8004cac:	f003 0201 	and.w	r2, r3, #1
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d017      	beq.n	8004cfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	2203      	movs	r2, #3
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d123      	bne.n	8004d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	08da      	lsrs	r2, r3, #3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3208      	adds	r2, #8
 8004d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	220f      	movs	r2, #15
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43db      	mvns	r3, r3
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	08da      	lsrs	r2, r3, #3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3208      	adds	r2, #8
 8004d4c:	6939      	ldr	r1, [r7, #16]
 8004d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4013      	ands	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 0203 	and.w	r2, r3, #3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 80b2 	beq.w	8004ef8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d94:	4b61      	ldr	r3, [pc, #388]	; (8004f1c <HAL_GPIO_Init+0x2fc>)
 8004d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d98:	4a60      	ldr	r2, [pc, #384]	; (8004f1c <HAL_GPIO_Init+0x2fc>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6613      	str	r3, [r2, #96]	; 0x60
 8004da0:	4b5e      	ldr	r3, [pc, #376]	; (8004f1c <HAL_GPIO_Init+0x2fc>)
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004dac:	4a5c      	ldr	r2, [pc, #368]	; (8004f20 <HAL_GPIO_Init+0x300>)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	089b      	lsrs	r3, r3, #2
 8004db2:	3302      	adds	r3, #2
 8004db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	220f      	movs	r2, #15
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dd6:	d02b      	beq.n	8004e30 <HAL_GPIO_Init+0x210>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a52      	ldr	r2, [pc, #328]	; (8004f24 <HAL_GPIO_Init+0x304>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d025      	beq.n	8004e2c <HAL_GPIO_Init+0x20c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a51      	ldr	r2, [pc, #324]	; (8004f28 <HAL_GPIO_Init+0x308>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d01f      	beq.n	8004e28 <HAL_GPIO_Init+0x208>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a50      	ldr	r2, [pc, #320]	; (8004f2c <HAL_GPIO_Init+0x30c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d019      	beq.n	8004e24 <HAL_GPIO_Init+0x204>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a4f      	ldr	r2, [pc, #316]	; (8004f30 <HAL_GPIO_Init+0x310>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d013      	beq.n	8004e20 <HAL_GPIO_Init+0x200>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a4e      	ldr	r2, [pc, #312]	; (8004f34 <HAL_GPIO_Init+0x314>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00d      	beq.n	8004e1c <HAL_GPIO_Init+0x1fc>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a4d      	ldr	r2, [pc, #308]	; (8004f38 <HAL_GPIO_Init+0x318>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <HAL_GPIO_Init+0x1f8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a4c      	ldr	r2, [pc, #304]	; (8004f3c <HAL_GPIO_Init+0x31c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_GPIO_Init+0x1f4>
 8004e10:	2307      	movs	r3, #7
 8004e12:	e00e      	b.n	8004e32 <HAL_GPIO_Init+0x212>
 8004e14:	2308      	movs	r3, #8
 8004e16:	e00c      	b.n	8004e32 <HAL_GPIO_Init+0x212>
 8004e18:	2306      	movs	r3, #6
 8004e1a:	e00a      	b.n	8004e32 <HAL_GPIO_Init+0x212>
 8004e1c:	2305      	movs	r3, #5
 8004e1e:	e008      	b.n	8004e32 <HAL_GPIO_Init+0x212>
 8004e20:	2304      	movs	r3, #4
 8004e22:	e006      	b.n	8004e32 <HAL_GPIO_Init+0x212>
 8004e24:	2303      	movs	r3, #3
 8004e26:	e004      	b.n	8004e32 <HAL_GPIO_Init+0x212>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e002      	b.n	8004e32 <HAL_GPIO_Init+0x212>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <HAL_GPIO_Init+0x212>
 8004e30:	2300      	movs	r3, #0
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	f002 0203 	and.w	r2, r2, #3
 8004e38:	0092      	lsls	r2, r2, #2
 8004e3a:	4093      	lsls	r3, r2
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e42:	4937      	ldr	r1, [pc, #220]	; (8004f20 <HAL_GPIO_Init+0x300>)
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	089b      	lsrs	r3, r3, #2
 8004e48:	3302      	adds	r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e50:	4b3b      	ldr	r3, [pc, #236]	; (8004f40 <HAL_GPIO_Init+0x320>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e74:	4a32      	ldr	r2, [pc, #200]	; (8004f40 <HAL_GPIO_Init+0x320>)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e7a:	4b31      	ldr	r3, [pc, #196]	; (8004f40 <HAL_GPIO_Init+0x320>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4013      	ands	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e9e:	4a28      	ldr	r2, [pc, #160]	; (8004f40 <HAL_GPIO_Init+0x320>)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004ea4:	4b26      	ldr	r3, [pc, #152]	; (8004f40 <HAL_GPIO_Init+0x320>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ec8:	4a1d      	ldr	r2, [pc, #116]	; (8004f40 <HAL_GPIO_Init+0x320>)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ece:	4b1c      	ldr	r3, [pc, #112]	; (8004f40 <HAL_GPIO_Init+0x320>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4013      	ands	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ef2:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <HAL_GPIO_Init+0x320>)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	3301      	adds	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f47f ae91 	bne.w	8004c30 <HAL_GPIO_Init+0x10>
  }
}
 8004f0e:	bf00      	nop
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40010000 	.word	0x40010000
 8004f24:	48000400 	.word	0x48000400
 8004f28:	48000800 	.word	0x48000800
 8004f2c:	48000c00 	.word	0x48000c00
 8004f30:	48001000 	.word	0x48001000
 8004f34:	48001400 	.word	0x48001400
 8004f38:	48001800 	.word	0x48001800
 8004f3c:	48001c00 	.word	0x48001c00
 8004f40:	40010400 	.word	0x40010400

08004f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	887b      	ldrh	r3, [r7, #2]
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
 8004f60:	e001      	b.n	8004f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f62:	2300      	movs	r3, #0
 8004f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	807b      	strh	r3, [r7, #2]
 8004f80:	4613      	mov	r3, r2
 8004f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f84:	787b      	ldrb	r3, [r7, #1]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f8a:	887a      	ldrh	r2, [r7, #2]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f90:	e002      	b.n	8004f98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f92:	887a      	ldrh	r2, [r7, #2]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fa8:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb4:	d102      	bne.n	8004fbc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fba:	e00b      	b.n	8004fd4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004fbc:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fca:	d102      	bne.n	8004fd2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fd0:	e000      	b.n	8004fd4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004fd2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40007000 	.word	0x40007000

08004fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d141      	bne.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ff2:	4b4b      	ldr	r3, [pc, #300]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffe:	d131      	bne.n	8005064 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005000:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005006:	4a46      	ldr	r2, [pc, #280]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800500c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005010:	4b43      	ldr	r3, [pc, #268]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005018:	4a41      	ldr	r2, [pc, #260]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800501e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005020:	4b40      	ldr	r3, [pc, #256]	; (8005124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2232      	movs	r2, #50	; 0x32
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	4a3f      	ldr	r2, [pc, #252]	; (8005128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	0c9b      	lsrs	r3, r3, #18
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005036:	e002      	b.n	800503e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3b01      	subs	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800503e:	4b38      	ldr	r3, [pc, #224]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504a:	d102      	bne.n	8005052 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f2      	bne.n	8005038 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005052:	4b33      	ldr	r3, [pc, #204]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800505a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505e:	d158      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e057      	b.n	8005114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005064:	4b2e      	ldr	r3, [pc, #184]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800506a:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005070:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005074:	e04d      	b.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800507c:	d141      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800507e:	4b28      	ldr	r3, [pc, #160]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508a:	d131      	bne.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800508c:	4b24      	ldr	r3, [pc, #144]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005092:	4a23      	ldr	r2, [pc, #140]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800509c:	4b20      	ldr	r3, [pc, #128]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050a4:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80050ac:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2232      	movs	r2, #50	; 0x32
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	0c9b      	lsrs	r3, r3, #18
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050c2:	e002      	b.n	80050ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ca:	4b15      	ldr	r3, [pc, #84]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d6:	d102      	bne.n	80050de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f2      	bne.n	80050c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ea:	d112      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e011      	b.n	8005114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f6:	4a0a      	ldr	r2, [pc, #40]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005100:	e007      	b.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800510a:	4a05      	ldr	r2, [pc, #20]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005110:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40007000 	.word	0x40007000
 8005124:	20000000 	.word	0x20000000
 8005128:	431bde83 	.word	0x431bde83

0800512c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4a04      	ldr	r2, [pc, #16]	; (8005148 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800513a:	6053      	str	r3, [r2, #4]
}
 800513c:	bf00      	nop
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40007000 	.word	0x40007000

0800514c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d102      	bne.n	8005160 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f000 bc08 	b.w	8005970 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005160:	4b96      	ldr	r3, [pc, #600]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800516a:	4b94      	ldr	r3, [pc, #592]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80e4 	beq.w	800534a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <HAL_RCC_OscConfig+0x4c>
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b0c      	cmp	r3, #12
 800518c:	f040 808b 	bne.w	80052a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b01      	cmp	r3, #1
 8005194:	f040 8087 	bne.w	80052a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005198:	4b88      	ldr	r3, [pc, #544]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_OscConfig+0x64>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e3df      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	4b81      	ldr	r3, [pc, #516]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d004      	beq.n	80051ca <HAL_RCC_OscConfig+0x7e>
 80051c0:	4b7e      	ldr	r3, [pc, #504]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c8:	e005      	b.n	80051d6 <HAL_RCC_OscConfig+0x8a>
 80051ca:	4b7c      	ldr	r3, [pc, #496]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80051cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d223      	bcs.n	8005222 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fdfc 	bl	8005ddc <RCC_SetFlashLatencyFromMSIRange>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e3c0      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051ee:	4b73      	ldr	r3, [pc, #460]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a72      	ldr	r2, [pc, #456]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80051f4:	f043 0308 	orr.w	r3, r3, #8
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	4b70      	ldr	r3, [pc, #448]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	496d      	ldr	r1, [pc, #436]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005208:	4313      	orrs	r3, r2
 800520a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800520c:	4b6b      	ldr	r3, [pc, #428]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	4968      	ldr	r1, [pc, #416]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 800521c:	4313      	orrs	r3, r2
 800521e:	604b      	str	r3, [r1, #4]
 8005220:	e025      	b.n	800526e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005222:	4b66      	ldr	r3, [pc, #408]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a65      	ldr	r2, [pc, #404]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005228:	f043 0308 	orr.w	r3, r3, #8
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	4b63      	ldr	r3, [pc, #396]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	4960      	ldr	r1, [pc, #384]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 800523c:	4313      	orrs	r3, r2
 800523e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005240:	4b5e      	ldr	r3, [pc, #376]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	495b      	ldr	r1, [pc, #364]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005250:	4313      	orrs	r3, r2
 8005252:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 fdbc 	bl	8005ddc <RCC_SetFlashLatencyFromMSIRange>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e380      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800526e:	f000 fcc1 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8005272:	4602      	mov	r2, r0
 8005274:	4b51      	ldr	r3, [pc, #324]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	4950      	ldr	r1, [pc, #320]	; (80053c0 <HAL_RCC_OscConfig+0x274>)
 8005280:	5ccb      	ldrb	r3, [r1, r3]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	fa22 f303 	lsr.w	r3, r2, r3
 800528a:	4a4e      	ldr	r2, [pc, #312]	; (80053c4 <HAL_RCC_OscConfig+0x278>)
 800528c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800528e:	4b4e      	ldr	r3, [pc, #312]	; (80053c8 <HAL_RCC_OscConfig+0x27c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fc fe38 	bl	8001f08 <HAL_InitTick>
 8005298:	4603      	mov	r3, r0
 800529a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d052      	beq.n	8005348 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	e364      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d032      	beq.n	8005314 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80052ae:	4b43      	ldr	r3, [pc, #268]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a42      	ldr	r2, [pc, #264]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052ba:	f7fd f815 	bl	80022e8 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052c2:	f7fd f811 	bl	80022e8 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e34d      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052d4:	4b39      	ldr	r3, [pc, #228]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052e0:	4b36      	ldr	r3, [pc, #216]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a35      	ldr	r2, [pc, #212]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80052e6:	f043 0308 	orr.w	r3, r3, #8
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	4b33      	ldr	r3, [pc, #204]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	4930      	ldr	r1, [pc, #192]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052fe:	4b2f      	ldr	r3, [pc, #188]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	492b      	ldr	r1, [pc, #172]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 800530e:	4313      	orrs	r3, r2
 8005310:	604b      	str	r3, [r1, #4]
 8005312:	e01a      	b.n	800534a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005314:	4b29      	ldr	r3, [pc, #164]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a28      	ldr	r2, [pc, #160]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 800531a:	f023 0301 	bic.w	r3, r3, #1
 800531e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005320:	f7fc ffe2 	bl	80022e8 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005328:	f7fc ffde 	bl	80022e8 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e31a      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800533a:	4b20      	ldr	r3, [pc, #128]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x1dc>
 8005346:	e000      	b.n	800534a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d073      	beq.n	800543e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d005      	beq.n	8005368 <HAL_RCC_OscConfig+0x21c>
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b0c      	cmp	r3, #12
 8005360:	d10e      	bne.n	8005380 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d10b      	bne.n	8005380 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005368:	4b14      	ldr	r3, [pc, #80]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d063      	beq.n	800543c <HAL_RCC_OscConfig+0x2f0>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d15f      	bne.n	800543c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e2f7      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005388:	d106      	bne.n	8005398 <HAL_RCC_OscConfig+0x24c>
 800538a:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a0b      	ldr	r2, [pc, #44]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e025      	b.n	80053e4 <HAL_RCC_OscConfig+0x298>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053a0:	d114      	bne.n	80053cc <HAL_RCC_OscConfig+0x280>
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a05      	ldr	r2, [pc, #20]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80053a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b03      	ldr	r3, [pc, #12]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a02      	ldr	r2, [pc, #8]	; (80053bc <HAL_RCC_OscConfig+0x270>)
 80053b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e013      	b.n	80053e4 <HAL_RCC_OscConfig+0x298>
 80053bc:	40021000 	.word	0x40021000
 80053c0:	08016274 	.word	0x08016274
 80053c4:	20000000 	.word	0x20000000
 80053c8:	20000004 	.word	0x20000004
 80053cc:	4ba0      	ldr	r3, [pc, #640]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a9f      	ldr	r2, [pc, #636]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80053d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	4b9d      	ldr	r3, [pc, #628]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a9c      	ldr	r2, [pc, #624]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80053de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d013      	beq.n	8005414 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ec:	f7fc ff7c 	bl	80022e8 <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f4:	f7fc ff78 	bl	80022e8 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b64      	cmp	r3, #100	; 0x64
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e2b4      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005406:	4b92      	ldr	r3, [pc, #584]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f0      	beq.n	80053f4 <HAL_RCC_OscConfig+0x2a8>
 8005412:	e014      	b.n	800543e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fc ff68 	bl	80022e8 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800541c:	f7fc ff64 	bl	80022e8 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b64      	cmp	r3, #100	; 0x64
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e2a0      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800542e:	4b88      	ldr	r3, [pc, #544]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_OscConfig+0x2d0>
 800543a:	e000      	b.n	800543e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800543c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d060      	beq.n	800550c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b04      	cmp	r3, #4
 800544e:	d005      	beq.n	800545c <HAL_RCC_OscConfig+0x310>
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2b0c      	cmp	r3, #12
 8005454:	d119      	bne.n	800548a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d116      	bne.n	800548a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800545c:	4b7c      	ldr	r3, [pc, #496]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_RCC_OscConfig+0x328>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e27d      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005474:	4b76      	ldr	r3, [pc, #472]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	061b      	lsls	r3, r3, #24
 8005482:	4973      	ldr	r1, [pc, #460]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005484:	4313      	orrs	r3, r2
 8005486:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005488:	e040      	b.n	800550c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d023      	beq.n	80054da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005492:	4b6f      	ldr	r3, [pc, #444]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a6e      	ldr	r2, [pc, #440]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549e:	f7fc ff23 	bl	80022e8 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a6:	f7fc ff1f 	bl	80022e8 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e25b      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054b8:	4b65      	ldr	r3, [pc, #404]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c4:	4b62      	ldr	r3, [pc, #392]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	495f      	ldr	r1, [pc, #380]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
 80054d8:	e018      	b.n	800550c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054da:	4b5d      	ldr	r3, [pc, #372]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a5c      	ldr	r2, [pc, #368]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80054e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fc feff 	bl	80022e8 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ee:	f7fc fefb 	bl	80022e8 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e237      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005500:	4b53      	ldr	r3, [pc, #332]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f0      	bne.n	80054ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d03c      	beq.n	8005592 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01c      	beq.n	800555a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005520:	4b4b      	ldr	r3, [pc, #300]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005526:	4a4a      	ldr	r2, [pc, #296]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fc feda 	bl	80022e8 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005538:	f7fc fed6 	bl	80022e8 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e212      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800554a:	4b41      	ldr	r3, [pc, #260]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ef      	beq.n	8005538 <HAL_RCC_OscConfig+0x3ec>
 8005558:	e01b      	b.n	8005592 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800555a:	4b3d      	ldr	r3, [pc, #244]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 800555c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005560:	4a3b      	ldr	r2, [pc, #236]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556a:	f7fc febd 	bl	80022e8 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005572:	f7fc feb9 	bl	80022e8 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e1f5      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005584:	4b32      	ldr	r3, [pc, #200]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1ef      	bne.n	8005572 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80a6 	beq.w	80056ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055a4:	4b2a      	ldr	r3, [pc, #168]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10d      	bne.n	80055cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b0:	4b27      	ldr	r3, [pc, #156]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b4:	4a26      	ldr	r2, [pc, #152]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80055b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ba:	6593      	str	r3, [r2, #88]	; 0x58
 80055bc:	4b24      	ldr	r3, [pc, #144]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 80055be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c8:	2301      	movs	r3, #1
 80055ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055cc:	4b21      	ldr	r3, [pc, #132]	; (8005654 <HAL_RCC_OscConfig+0x508>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d118      	bne.n	800560a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d8:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <HAL_RCC_OscConfig+0x508>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1d      	ldr	r2, [pc, #116]	; (8005654 <HAL_RCC_OscConfig+0x508>)
 80055de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e4:	f7fc fe80 	bl	80022e8 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ec:	f7fc fe7c 	bl	80022e8 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e1b8      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055fe:	4b15      	ldr	r3, [pc, #84]	; (8005654 <HAL_RCC_OscConfig+0x508>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d108      	bne.n	8005624 <HAL_RCC_OscConfig+0x4d8>
 8005612:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	4a0d      	ldr	r2, [pc, #52]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005622:	e029      	b.n	8005678 <HAL_RCC_OscConfig+0x52c>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b05      	cmp	r3, #5
 800562a:	d115      	bne.n	8005658 <HAL_RCC_OscConfig+0x50c>
 800562c:	4b08      	ldr	r3, [pc, #32]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005632:	4a07      	ldr	r2, [pc, #28]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005634:	f043 0304 	orr.w	r3, r3, #4
 8005638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800563c:	4b04      	ldr	r3, [pc, #16]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005642:	4a03      	ldr	r2, [pc, #12]	; (8005650 <HAL_RCC_OscConfig+0x504>)
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800564c:	e014      	b.n	8005678 <HAL_RCC_OscConfig+0x52c>
 800564e:	bf00      	nop
 8005650:	40021000 	.word	0x40021000
 8005654:	40007000 	.word	0x40007000
 8005658:	4b9d      	ldr	r3, [pc, #628]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	4a9c      	ldr	r2, [pc, #624]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005668:	4b99      	ldr	r3, [pc, #612]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	4a98      	ldr	r2, [pc, #608]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 8005670:	f023 0304 	bic.w	r3, r3, #4
 8005674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d016      	beq.n	80056ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005680:	f7fc fe32 	bl	80022e8 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005686:	e00a      	b.n	800569e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005688:	f7fc fe2e 	bl	80022e8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	f241 3288 	movw	r2, #5000	; 0x1388
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e168      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800569e:	4b8c      	ldr	r3, [pc, #560]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0ed      	beq.n	8005688 <HAL_RCC_OscConfig+0x53c>
 80056ac:	e015      	b.n	80056da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ae:	f7fc fe1b 	bl	80022e8 <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056b4:	e00a      	b.n	80056cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b6:	f7fc fe17 	bl	80022e8 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e151      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056cc:	4b80      	ldr	r3, [pc, #512]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1ed      	bne.n	80056b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056da:	7ffb      	ldrb	r3, [r7, #31]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d105      	bne.n	80056ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e0:	4b7b      	ldr	r3, [pc, #492]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 80056e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e4:	4a7a      	ldr	r2, [pc, #488]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 80056e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d03c      	beq.n	8005772 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01c      	beq.n	800573a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005700:	4b73      	ldr	r3, [pc, #460]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 8005702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005706:	4a72      	ldr	r2, [pc, #456]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005710:	f7fc fdea 	bl	80022e8 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005718:	f7fc fde6 	bl	80022e8 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e122      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800572a:	4b69      	ldr	r3, [pc, #420]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 800572c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0ef      	beq.n	8005718 <HAL_RCC_OscConfig+0x5cc>
 8005738:	e01b      	b.n	8005772 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800573a:	4b65      	ldr	r3, [pc, #404]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 800573c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005740:	4a63      	ldr	r2, [pc, #396]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574a:	f7fc fdcd 	bl	80022e8 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005752:	f7fc fdc9 	bl	80022e8 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e105      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005764:	4b5a      	ldr	r3, [pc, #360]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 8005766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ef      	bne.n	8005752 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80f9 	beq.w	800596e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	2b02      	cmp	r3, #2
 8005782:	f040 80cf 	bne.w	8005924 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005786:	4b52      	ldr	r3, [pc, #328]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f003 0203 	and.w	r2, r3, #3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	429a      	cmp	r2, r3
 8005798:	d12c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	3b01      	subs	r3, #1
 80057a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d123      	bne.n	80057f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d11b      	bne.n	80057f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d113      	bne.n	80057f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	3b01      	subs	r3, #1
 80057da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057dc:	429a      	cmp	r2, r3
 80057de:	d109      	bne.n	80057f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	3b01      	subs	r3, #1
 80057ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d071      	beq.n	80058d8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b0c      	cmp	r3, #12
 80057f8:	d068      	beq.n	80058cc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057fa:	4b35      	ldr	r3, [pc, #212]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d105      	bne.n	8005812 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005806:	4b32      	ldr	r3, [pc, #200]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e0ac      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005816:	4b2e      	ldr	r3, [pc, #184]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2d      	ldr	r2, [pc, #180]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 800581c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005820:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005822:	f7fc fd61 	bl	80022e8 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800582a:	f7fc fd5d 	bl	80022e8 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e099      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800583c:	4b24      	ldr	r3, [pc, #144]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f0      	bne.n	800582a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005848:	4b21      	ldr	r3, [pc, #132]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	4b21      	ldr	r3, [pc, #132]	; (80058d4 <HAL_RCC_OscConfig+0x788>)
 800584e:	4013      	ands	r3, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005858:	3a01      	subs	r2, #1
 800585a:	0112      	lsls	r2, r2, #4
 800585c:	4311      	orrs	r1, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005862:	0212      	lsls	r2, r2, #8
 8005864:	4311      	orrs	r1, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800586a:	0852      	lsrs	r2, r2, #1
 800586c:	3a01      	subs	r2, #1
 800586e:	0552      	lsls	r2, r2, #21
 8005870:	4311      	orrs	r1, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005876:	0852      	lsrs	r2, r2, #1
 8005878:	3a01      	subs	r2, #1
 800587a:	0652      	lsls	r2, r2, #25
 800587c:	4311      	orrs	r1, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005882:	06d2      	lsls	r2, r2, #27
 8005884:	430a      	orrs	r2, r1
 8005886:	4912      	ldr	r1, [pc, #72]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 8005888:	4313      	orrs	r3, r2
 800588a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800588c:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a0f      	ldr	r2, [pc, #60]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 8005892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005896:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005898:	4b0d      	ldr	r3, [pc, #52]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4a0c      	ldr	r2, [pc, #48]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 800589e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058a4:	f7fc fd20 	bl	80022e8 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ac:	f7fc fd1c 	bl	80022e8 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e058      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058be:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <HAL_RCC_OscConfig+0x784>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058ca:	e050      	b.n	800596e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e04f      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
 80058d0:	40021000 	.word	0x40021000
 80058d4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058d8:	4b27      	ldr	r3, [pc, #156]	; (8005978 <HAL_RCC_OscConfig+0x82c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d144      	bne.n	800596e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058e4:	4b24      	ldr	r3, [pc, #144]	; (8005978 <HAL_RCC_OscConfig+0x82c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a23      	ldr	r2, [pc, #140]	; (8005978 <HAL_RCC_OscConfig+0x82c>)
 80058ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058f0:	4b21      	ldr	r3, [pc, #132]	; (8005978 <HAL_RCC_OscConfig+0x82c>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4a20      	ldr	r2, [pc, #128]	; (8005978 <HAL_RCC_OscConfig+0x82c>)
 80058f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058fc:	f7fc fcf4 	bl	80022e8 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005904:	f7fc fcf0 	bl	80022e8 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e02c      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005916:	4b18      	ldr	r3, [pc, #96]	; (8005978 <HAL_RCC_OscConfig+0x82c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <HAL_RCC_OscConfig+0x7b8>
 8005922:	e024      	b.n	800596e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b0c      	cmp	r3, #12
 8005928:	d01f      	beq.n	800596a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592a:	4b13      	ldr	r3, [pc, #76]	; (8005978 <HAL_RCC_OscConfig+0x82c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a12      	ldr	r2, [pc, #72]	; (8005978 <HAL_RCC_OscConfig+0x82c>)
 8005930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005936:	f7fc fcd7 	bl	80022e8 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593e:	f7fc fcd3 	bl	80022e8 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e00f      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <HAL_RCC_OscConfig+0x82c>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f0      	bne.n	800593e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <HAL_RCC_OscConfig+0x82c>)
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	4905      	ldr	r1, [pc, #20]	; (8005978 <HAL_RCC_OscConfig+0x82c>)
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_RCC_OscConfig+0x830>)
 8005964:	4013      	ands	r3, r2
 8005966:	60cb      	str	r3, [r1, #12]
 8005968:	e001      	b.n	800596e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3720      	adds	r7, #32
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40021000 	.word	0x40021000
 800597c:	feeefffc 	.word	0xfeeefffc

08005980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e11d      	b.n	8005bd4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005998:	4b90      	ldr	r3, [pc, #576]	; (8005bdc <HAL_RCC_ClockConfig+0x25c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d910      	bls.n	80059c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a6:	4b8d      	ldr	r3, [pc, #564]	; (8005bdc <HAL_RCC_ClockConfig+0x25c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f023 020f 	bic.w	r2, r3, #15
 80059ae:	498b      	ldr	r1, [pc, #556]	; (8005bdc <HAL_RCC_ClockConfig+0x25c>)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b89      	ldr	r3, [pc, #548]	; (8005bdc <HAL_RCC_ClockConfig+0x25c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e105      	b.n	8005bd4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d010      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	4b81      	ldr	r3, [pc, #516]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d908      	bls.n	80059f6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e4:	4b7e      	ldr	r3, [pc, #504]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	497b      	ldr	r1, [pc, #492]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d079      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d11e      	bne.n	8005a48 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a0a:	4b75      	ldr	r3, [pc, #468]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e0dc      	b.n	8005bd4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005a1a:	f000 fa39 	bl	8005e90 <RCC_GetSysClockFreqFromPLLSource>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4a70      	ldr	r2, [pc, #448]	; (8005be4 <HAL_RCC_ClockConfig+0x264>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d946      	bls.n	8005ab4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a26:	4b6e      	ldr	r3, [pc, #440]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d140      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a32:	4b6b      	ldr	r3, [pc, #428]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a3a:	4a69      	ldr	r2, [pc, #420]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	e035      	b.n	8005ab4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d107      	bne.n	8005a60 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a50:	4b63      	ldr	r3, [pc, #396]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d115      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e0b9      	b.n	8005bd4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d107      	bne.n	8005a78 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a68:	4b5d      	ldr	r3, [pc, #372]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0ad      	b.n	8005bd4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a78:	4b59      	ldr	r3, [pc, #356]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0a5      	b.n	8005bd4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005a88:	f000 f8b4 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	4a55      	ldr	r2, [pc, #340]	; (8005be4 <HAL_RCC_ClockConfig+0x264>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d90f      	bls.n	8005ab4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a94:	4b52      	ldr	r3, [pc, #328]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005aa0:	4b4f      	ldr	r3, [pc, #316]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aa8:	4a4d      	ldr	r2, [pc, #308]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ab4:	4b4a      	ldr	r3, [pc, #296]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f023 0203 	bic.w	r2, r3, #3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	4947      	ldr	r1, [pc, #284]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac6:	f7fc fc0f 	bl	80022e8 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005acc:	e00a      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ace:	f7fc fc0b 	bl	80022e8 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e077      	b.n	8005bd4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae4:	4b3e      	ldr	r3, [pc, #248]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 020c 	and.w	r2, r3, #12
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d1eb      	bne.n	8005ace <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b80      	cmp	r3, #128	; 0x80
 8005afa:	d105      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005afc:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4a37      	ldr	r2, [pc, #220]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b06:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d010      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	4b31      	ldr	r3, [pc, #196]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d208      	bcs.n	8005b36 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b24:	4b2e      	ldr	r3, [pc, #184]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	492b      	ldr	r1, [pc, #172]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b36:	4b29      	ldr	r3, [pc, #164]	; (8005bdc <HAL_RCC_ClockConfig+0x25c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d210      	bcs.n	8005b66 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b44:	4b25      	ldr	r3, [pc, #148]	; (8005bdc <HAL_RCC_ClockConfig+0x25c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f023 020f 	bic.w	r2, r3, #15
 8005b4c:	4923      	ldr	r1, [pc, #140]	; (8005bdc <HAL_RCC_ClockConfig+0x25c>)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b54:	4b21      	ldr	r3, [pc, #132]	; (8005bdc <HAL_RCC_ClockConfig+0x25c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d001      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e036      	b.n	8005bd4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b72:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	4918      	ldr	r1, [pc, #96]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d009      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b90:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	4910      	ldr	r1, [pc, #64]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ba4:	f000 f826 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <HAL_RCC_ClockConfig+0x260>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	091b      	lsrs	r3, r3, #4
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	490c      	ldr	r1, [pc, #48]	; (8005be8 <HAL_RCC_ClockConfig+0x268>)
 8005bb6:	5ccb      	ldrb	r3, [r1, r3]
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <HAL_RCC_ClockConfig+0x26c>)
 8005bc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <HAL_RCC_ClockConfig+0x270>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fc f99d 	bl	8001f08 <HAL_InitTick>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	73fb      	strb	r3, [r7, #15]

  return status;
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40022000 	.word	0x40022000
 8005be0:	40021000 	.word	0x40021000
 8005be4:	04c4b400 	.word	0x04c4b400
 8005be8:	08016274 	.word	0x08016274
 8005bec:	20000000 	.word	0x20000000
 8005bf0:	20000004 	.word	0x20000004

08005bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	; 0x24
 8005bf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c02:	4b3e      	ldr	r3, [pc, #248]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 030c 	and.w	r3, r3, #12
 8005c0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c0c:	4b3b      	ldr	r3, [pc, #236]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0x34>
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b0c      	cmp	r3, #12
 8005c20:	d121      	bne.n	8005c66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d11e      	bne.n	8005c66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c28:	4b34      	ldr	r3, [pc, #208]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d107      	bne.n	8005c44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c34:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3a:	0a1b      	lsrs	r3, r3, #8
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	e005      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c44:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	091b      	lsrs	r3, r3, #4
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c50:	4a2b      	ldr	r2, [pc, #172]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10d      	bne.n	8005c7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c64:	e00a      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d102      	bne.n	8005c72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c6c:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	e004      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d101      	bne.n	8005c7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c78:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b0c      	cmp	r3, #12
 8005c80:	d134      	bne.n	8005cec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c82:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d003      	beq.n	8005c9a <HAL_RCC_GetSysClockFreq+0xa6>
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d003      	beq.n	8005ca0 <HAL_RCC_GetSysClockFreq+0xac>
 8005c98:	e005      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c9a:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c9c:	617b      	str	r3, [r7, #20]
      break;
 8005c9e:	e005      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ca0:	4b18      	ldr	r3, [pc, #96]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ca2:	617b      	str	r3, [r7, #20]
      break;
 8005ca4:	e002      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	617b      	str	r3, [r7, #20]
      break;
 8005caa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cac:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cba:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	0a1b      	lsrs	r3, r3, #8
 8005cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	fb03 f202 	mul.w	r2, r3, r2
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cd2:	4b0a      	ldr	r3, [pc, #40]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	0e5b      	lsrs	r3, r3, #25
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	3301      	adds	r3, #1
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005cec:	69bb      	ldr	r3, [r7, #24]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3724      	adds	r7, #36	; 0x24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	0801628c 	.word	0x0801628c
 8005d04:	00f42400 	.word	0x00f42400

08005d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d0c:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000000 	.word	0x20000000

08005d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d24:	f7ff fff0 	bl	8005d08 <HAL_RCC_GetHCLKFreq>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	4904      	ldr	r1, [pc, #16]	; (8005d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d36:	5ccb      	ldrb	r3, [r1, r3]
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40021000 	.word	0x40021000
 8005d48:	08016284 	.word	0x08016284

08005d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d50:	f7ff ffda 	bl	8005d08 <HAL_RCC_GetHCLKFreq>
 8005d54:	4602      	mov	r2, r0
 8005d56:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	0adb      	lsrs	r3, r3, #11
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	4904      	ldr	r1, [pc, #16]	; (8005d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d62:	5ccb      	ldrb	r3, [r1, r3]
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40021000 	.word	0x40021000
 8005d74:	08016284 	.word	0x08016284

08005d78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	220f      	movs	r2, #15
 8005d86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005d88:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 0203 	and.w	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005d94:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005da0:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005dac:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	08db      	lsrs	r3, r3, #3
 8005db2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <HAL_RCC_GetClockConfig+0x60>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 020f 	and.w	r2, r3, #15
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	601a      	str	r2, [r3, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	40022000 	.word	0x40022000

08005ddc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005de8:	4b27      	ldr	r3, [pc, #156]	; (8005e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005df4:	f7ff f8d6 	bl	8004fa4 <HAL_PWREx_GetVoltageRange>
 8005df8:	6178      	str	r0, [r7, #20]
 8005dfa:	e014      	b.n	8005e26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dfc:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e00:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e06:	6593      	str	r3, [r2, #88]	; 0x58
 8005e08:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e14:	f7ff f8c6 	bl	8004fa4 <HAL_PWREx_GetVoltageRange>
 8005e18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e1a:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1e:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2c:	d10b      	bne.n	8005e46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b80      	cmp	r3, #128	; 0x80
 8005e32:	d913      	bls.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2ba0      	cmp	r3, #160	; 0xa0
 8005e38:	d902      	bls.n	8005e40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	e00d      	b.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e40:	2301      	movs	r3, #1
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	e00a      	b.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b7f      	cmp	r3, #127	; 0x7f
 8005e4a:	d902      	bls.n	8005e52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	e004      	b.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b70      	cmp	r3, #112	; 0x70
 8005e56:	d101      	bne.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e58:	2301      	movs	r3, #1
 8005e5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f023 020f 	bic.w	r2, r3, #15
 8005e64:	4909      	ldr	r1, [pc, #36]	; (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e6c:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 030f 	and.w	r3, r3, #15
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d001      	beq.n	8005e7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	40022000 	.word	0x40022000

08005e90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e96:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d00b      	beq.n	8005ebe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d825      	bhi.n	8005ef8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d008      	beq.n	8005ec4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d11f      	bne.n	8005ef8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005eb8:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005eba:	613b      	str	r3, [r7, #16]
    break;
 8005ebc:	e01f      	b.n	8005efe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005ebe:	4b24      	ldr	r3, [pc, #144]	; (8005f50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ec0:	613b      	str	r3, [r7, #16]
    break;
 8005ec2:	e01c      	b.n	8005efe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ec4:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0308 	and.w	r3, r3, #8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d107      	bne.n	8005ee0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ed0:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed6:	0a1b      	lsrs	r3, r3, #8
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e005      	b.n	8005eec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ee0:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005eec:	4a19      	ldr	r2, [pc, #100]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef4:	613b      	str	r3, [r7, #16]
    break;
 8005ef6:	e002      	b.n	8005efe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	613b      	str	r3, [r7, #16]
    break;
 8005efc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	3301      	adds	r3, #1
 8005f0a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f0c:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	0a1b      	lsrs	r3, r3, #8
 8005f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	fb03 f202 	mul.w	r2, r3, r2
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f22:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	0e5b      	lsrs	r3, r3, #25
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	3301      	adds	r3, #1
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005f3e:	683b      	ldr	r3, [r7, #0]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	00f42400 	.word	0x00f42400
 8005f54:	0801628c 	.word	0x0801628c

08005f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f60:	2300      	movs	r3, #0
 8005f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f64:	2300      	movs	r3, #0
 8005f66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d040      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f78:	2b80      	cmp	r3, #128	; 0x80
 8005f7a:	d02a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f7c:	2b80      	cmp	r3, #128	; 0x80
 8005f7e:	d825      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f80:	2b60      	cmp	r3, #96	; 0x60
 8005f82:	d026      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f84:	2b60      	cmp	r3, #96	; 0x60
 8005f86:	d821      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d006      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d81d      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d009      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d010      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005f98:	e018      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f9a:	4b89      	ldr	r3, [pc, #548]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	4a88      	ldr	r2, [pc, #544]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fa6:	e015      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 fa82 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fb8:	e00c      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3320      	adds	r3, #32
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f001 fb6d 	bl	80076a0 <RCCEx_PLLSAI2_Config>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fca:	e003      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	74fb      	strb	r3, [r7, #19]
      break;
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd4:	7cfb      	ldrb	r3, [r7, #19]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fda:	4b79      	ldr	r3, [pc, #484]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fe0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe8:	4975      	ldr	r1, [pc, #468]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005ff0:	e001      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff2:	7cfb      	ldrb	r3, [r7, #19]
 8005ff4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d047      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600a:	d030      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800600c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006010:	d82a      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006016:	d02a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800601c:	d824      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800601e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006022:	d008      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006028:	d81e      	bhi.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800602e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006032:	d010      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006034:	e018      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006036:	4b62      	ldr	r3, [pc, #392]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	4a61      	ldr	r2, [pc, #388]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800603c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006040:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006042:	e015      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	2100      	movs	r1, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f001 fa34 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006054:	e00c      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3320      	adds	r3, #32
 800605a:	2100      	movs	r1, #0
 800605c:	4618      	mov	r0, r3
 800605e:	f001 fb1f 	bl	80076a0 <RCCEx_PLLSAI2_Config>
 8006062:	4603      	mov	r3, r0
 8006064:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006066:	e003      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	74fb      	strb	r3, [r7, #19]
      break;
 800606c:	e000      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800606e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006070:	7cfb      	ldrb	r3, [r7, #19]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10b      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006076:	4b52      	ldr	r3, [pc, #328]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006078:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800607c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006084:	494e      	ldr	r1, [pc, #312]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800608c:	e001      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608e:	7cfb      	ldrb	r3, [r7, #19]
 8006090:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 809f 	beq.w	80061de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060a0:	2300      	movs	r3, #0
 80060a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060a4:	4b46      	ldr	r3, [pc, #280]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80060b4:	2300      	movs	r3, #0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00d      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ba:	4b41      	ldr	r3, [pc, #260]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	4a40      	ldr	r2, [pc, #256]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c4:	6593      	str	r3, [r2, #88]	; 0x58
 80060c6:	4b3e      	ldr	r3, [pc, #248]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ce:	60bb      	str	r3, [r7, #8]
 80060d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060d2:	2301      	movs	r3, #1
 80060d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060d6:	4b3b      	ldr	r3, [pc, #236]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3a      	ldr	r2, [pc, #232]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80060dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060e2:	f7fc f901 	bl	80022e8 <HAL_GetTick>
 80060e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060e8:	e009      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ea:	f7fc f8fd 	bl	80022e8 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d902      	bls.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	74fb      	strb	r3, [r7, #19]
        break;
 80060fc:	e005      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060fe:	4b31      	ldr	r3, [pc, #196]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0ef      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800610a:	7cfb      	ldrb	r3, [r7, #19]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d15b      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006110:	4b2b      	ldr	r3, [pc, #172]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800611a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d01f      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	429a      	cmp	r2, r3
 800612c:	d019      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006138:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800613a:	4b21      	ldr	r3, [pc, #132]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006140:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800614a:	4b1d      	ldr	r3, [pc, #116]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006150:	4a1b      	ldr	r2, [pc, #108]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800615a:	4a19      	ldr	r2, [pc, #100]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d016      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616c:	f7fc f8bc 	bl	80022e8 <HAL_GetTick>
 8006170:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006172:	e00b      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006174:	f7fc f8b8 	bl	80022e8 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006182:	4293      	cmp	r3, r2
 8006184:	d902      	bls.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	74fb      	strb	r3, [r7, #19]
            break;
 800618a:	e006      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0ec      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800619a:	7cfb      	ldrb	r3, [r7, #19]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10c      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061b0:	4903      	ldr	r1, [pc, #12]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80061b8:	e008      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061ba:	7cfb      	ldrb	r3, [r7, #19]
 80061bc:	74bb      	strb	r3, [r7, #18]
 80061be:	e005      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c8:	7cfb      	ldrb	r3, [r7, #19]
 80061ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061cc:	7c7b      	ldrb	r3, [r7, #17]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d105      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061d2:	4ba0      	ldr	r3, [pc, #640]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d6:	4a9f      	ldr	r2, [pc, #636]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00a      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061ea:	4b9a      	ldr	r3, [pc, #616]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f0:	f023 0203 	bic.w	r2, r3, #3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f8:	4996      	ldr	r1, [pc, #600]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800620c:	4b91      	ldr	r3, [pc, #580]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800620e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006212:	f023 020c 	bic.w	r2, r3, #12
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	498e      	ldr	r1, [pc, #568]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800621c:	4313      	orrs	r3, r2
 800621e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800622e:	4b89      	ldr	r3, [pc, #548]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623c:	4985      	ldr	r1, [pc, #532]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800623e:	4313      	orrs	r3, r2
 8006240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006250:	4b80      	ldr	r3, [pc, #512]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625e:	497d      	ldr	r1, [pc, #500]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006260:	4313      	orrs	r3, r2
 8006262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006272:	4b78      	ldr	r3, [pc, #480]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006280:	4974      	ldr	r1, [pc, #464]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006282:	4313      	orrs	r3, r2
 8006284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006294:	4b6f      	ldr	r3, [pc, #444]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a2:	496c      	ldr	r1, [pc, #432]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062b6:	4b67      	ldr	r3, [pc, #412]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c4:	4963      	ldr	r1, [pc, #396]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062d8:	4b5e      	ldr	r3, [pc, #376]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062e6:	495b      	ldr	r1, [pc, #364]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062fa:	4b56      	ldr	r3, [pc, #344]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006300:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006308:	4952      	ldr	r1, [pc, #328]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800631c:	4b4d      	ldr	r3, [pc, #308]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006322:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632a:	494a      	ldr	r1, [pc, #296]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800633e:	4b45      	ldr	r3, [pc, #276]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634c:	4941      	ldr	r1, [pc, #260]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006360:	4b3c      	ldr	r3, [pc, #240]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006366:	f023 0203 	bic.w	r2, r3, #3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800636e:	4939      	ldr	r1, [pc, #228]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d028      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006382:	4b34      	ldr	r3, [pc, #208]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006390:	4930      	ldr	r1, [pc, #192]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800639c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063a0:	d106      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063a2:	4b2c      	ldr	r3, [pc, #176]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	4a2b      	ldr	r2, [pc, #172]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ac:	60d3      	str	r3, [r2, #12]
 80063ae:	e011      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063b8:	d10c      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3304      	adds	r3, #4
 80063be:	2101      	movs	r1, #1
 80063c0:	4618      	mov	r0, r3
 80063c2:	f001 f879 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80063ca:	7cfb      	ldrb	r3, [r7, #19]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80063d0:	7cfb      	ldrb	r3, [r7, #19]
 80063d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d04d      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063e8:	d108      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80063ea:	4b1a      	ldr	r3, [pc, #104]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063f0:	4a18      	ldr	r2, [pc, #96]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80063fa:	e012      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80063fc:	4b15      	ldr	r3, [pc, #84]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006402:	4a14      	ldr	r2, [pc, #80]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006408:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800640c:	4b11      	ldr	r3, [pc, #68]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800641a:	490e      	ldr	r1, [pc, #56]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800642a:	d106      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800642c:	4b09      	ldr	r3, [pc, #36]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4a08      	ldr	r2, [pc, #32]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006436:	60d3      	str	r3, [r2, #12]
 8006438:	e020      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800643e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006442:	d109      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006444:	4b03      	ldr	r3, [pc, #12]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	4a02      	ldr	r2, [pc, #8]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800644a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800644e:	60d3      	str	r3, [r2, #12]
 8006450:	e014      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006452:	bf00      	nop
 8006454:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800645c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006460:	d10c      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3304      	adds	r3, #4
 8006466:	2101      	movs	r1, #1
 8006468:	4618      	mov	r0, r3
 800646a:	f001 f825 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 800646e:	4603      	mov	r3, r0
 8006470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006472:	7cfb      	ldrb	r3, [r7, #19]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006478:	7cfb      	ldrb	r3, [r7, #19]
 800647a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d028      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006488:	4b7a      	ldr	r3, [pc, #488]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006496:	4977      	ldr	r1, [pc, #476]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006498:	4313      	orrs	r3, r2
 800649a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064a6:	d106      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064a8:	4b72      	ldr	r3, [pc, #456]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4a71      	ldr	r2, [pc, #452]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80064ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064b2:	60d3      	str	r3, [r2, #12]
 80064b4:	e011      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064be:	d10c      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3304      	adds	r3, #4
 80064c4:	2101      	movs	r1, #1
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fff6 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80064d6:	7cfb      	ldrb	r3, [r7, #19]
 80064d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d01e      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064e6:	4b63      	ldr	r3, [pc, #396]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f6:	495f      	ldr	r1, [pc, #380]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006508:	d10c      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3304      	adds	r3, #4
 800650e:	2102      	movs	r1, #2
 8006510:	4618      	mov	r0, r3
 8006512:	f000 ffd1 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800651a:	7cfb      	ldrb	r3, [r7, #19]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006520:	7cfb      	ldrb	r3, [r7, #19]
 8006522:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006530:	4b50      	ldr	r3, [pc, #320]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006536:	f023 0204 	bic.w	r2, r3, #4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006540:	494c      	ldr	r1, [pc, #304]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00b      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006554:	4b47      	ldr	r3, [pc, #284]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800655a:	f023 0218 	bic.w	r2, r3, #24
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006564:	4943      	ldr	r1, [pc, #268]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d035      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006578:	4b3e      	ldr	r3, [pc, #248]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a3d      	ldr	r2, [pc, #244]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800657e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006584:	f7fb feb0 	bl	80022e8 <HAL_GetTick>
 8006588:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800658a:	e009      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800658c:	f7fb feac 	bl	80022e8 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d902      	bls.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	74fb      	strb	r3, [r7, #19]
        break;
 800659e:	e005      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80065a0:	4b34      	ldr	r3, [pc, #208]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1ef      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80065ac:	7cfb      	ldrb	r3, [r7, #19]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d113      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80065b2:	4b30      	ldr	r3, [pc, #192]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80065b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c2:	492c      	ldr	r1, [pc, #176]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3320      	adds	r3, #32
 80065ce:	2102      	movs	r1, #2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 f865 	bl	80076a0 <RCCEx_PLLSAI2_Config>
 80065d6:	4603      	mov	r3, r0
 80065d8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80065da:	7cfb      	ldrb	r3, [r7, #19]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80065e0:	7cfb      	ldrb	r3, [r7, #19]
 80065e2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01e      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80065f0:	4b20      	ldr	r3, [pc, #128]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80065f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006600:	491c      	ldr	r1, [pc, #112]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006602:	4313      	orrs	r3, r2
 8006604:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006612:	d10c      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3320      	adds	r3, #32
 8006618:	2101      	movs	r1, #1
 800661a:	4618      	mov	r0, r3
 800661c:	f001 f840 	bl	80076a0 <RCCEx_PLLSAI2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006624:	7cfb      	ldrb	r3, [r7, #19]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800662a:	7cfb      	ldrb	r3, [r7, #19]
 800662c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d017      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800663a:	4b0e      	ldr	r3, [pc, #56]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800663c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006640:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800664a:	490a      	ldr	r1, [pc, #40]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006658:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800665c:	d105      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	4a04      	ldr	r2, [pc, #16]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006668:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800666a:	7cbb      	ldrb	r3, [r7, #18]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40021000 	.word	0x40021000

08006678 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800668a:	d13e      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800668c:	4bb6      	ldr	r3, [pc, #728]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006696:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800669e:	d028      	beq.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066a6:	f200 86f2 	bhi.w	800748e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b0:	d005      	beq.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b8:	d00e      	beq.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80066ba:	f000 bee8 	b.w	800748e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066be:	4baa      	ldr	r3, [pc, #680]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	f040 86e2 	bne.w	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 80066ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d2:	61fb      	str	r3, [r7, #28]
      break;
 80066d4:	f000 bedd 	b.w	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80066d8:	4ba3      	ldr	r3, [pc, #652]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	f040 86d7 	bne.w	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 80066e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80066ec:	61fb      	str	r3, [r7, #28]
      break;
 80066ee:	f000 bed2 	b.w	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066f2:	4b9d      	ldr	r3, [pc, #628]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066fe:	f040 86cc 	bne.w	800749a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8006702:	4b9a      	ldr	r3, [pc, #616]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006704:	61fb      	str	r3, [r7, #28]
      break;
 8006706:	f000 bec8 	b.w	800749a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800670a:	4b97      	ldr	r3, [pc, #604]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b03      	cmp	r3, #3
 8006718:	d036      	beq.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b03      	cmp	r3, #3
 800671e:	d840      	bhi.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d003      	beq.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d020      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800672c:	e039      	b.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800672e:	4b8e      	ldr	r3, [pc, #568]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b02      	cmp	r3, #2
 8006738:	d116      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800673a:	4b8b      	ldr	r3, [pc, #556]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006746:	4b88      	ldr	r3, [pc, #544]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	091b      	lsrs	r3, r3, #4
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	e005      	b.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006752:	4b85      	ldr	r3, [pc, #532]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006758:	0a1b      	lsrs	r3, r3, #8
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	4a84      	ldr	r2, [pc, #528]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006764:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006766:	e01f      	b.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	61bb      	str	r3, [r7, #24]
      break;
 800676c:	e01c      	b.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800676e:	4b7e      	ldr	r3, [pc, #504]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677a:	d102      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800677c:	4b7d      	ldr	r3, [pc, #500]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800677e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006780:	e012      	b.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	61bb      	str	r3, [r7, #24]
      break;
 8006786:	e00f      	b.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006788:	4b77      	ldr	r3, [pc, #476]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006794:	d102      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8006796:	4b77      	ldr	r3, [pc, #476]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006798:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800679a:	e005      	b.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	61bb      	str	r3, [r7, #24]
      break;
 80067a0:	e002      	b.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61bb      	str	r3, [r7, #24]
      break;
 80067a6:	bf00      	nop
    }

    switch(PeriphClk)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067ae:	f000 8604 	beq.w	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067b8:	f200 8671 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067c2:	f000 8467 	beq.w	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067cc:	f200 8667 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067d6:	f000 852f 	beq.w	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e0:	f200 865d 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067ea:	f000 8185 	beq.w	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067f4:	f200 8653 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067fe:	f000 80cb 	beq.w	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006808:	f200 8649 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006812:	f000 842e 	beq.w	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681c:	f200 863f 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006826:	f000 83e2 	beq.w	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006830:	f200 8635 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800683a:	f000 80ad 	beq.w	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006844:	f200 862b 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684e:	f000 809b 	beq.w	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006858:	f200 8621 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006862:	f000 8089 	beq.w	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800686c:	f200 8617 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006876:	f000 8552 	beq.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006880:	f200 860d 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800688a:	f000 84fe 	beq.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006894:	f200 8603 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800689e:	f000 849f 	beq.w	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a8:	f200 85f9 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b80      	cmp	r3, #128	; 0x80
 80068b0:	f000 846a 	beq.w	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	f200 85f1 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d84c      	bhi.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 85ea 	beq.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	2b1f      	cmp	r3, #31
 80068d0:	f200 85e5 	bhi.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80068d4:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80068d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068da:	bf00      	nop
 80068dc:	08006ced 	.word	0x08006ced
 80068e0:	08006d5b 	.word	0x08006d5b
 80068e4:	0800749f 	.word	0x0800749f
 80068e8:	08006def 	.word	0x08006def
 80068ec:	0800749f 	.word	0x0800749f
 80068f0:	0800749f 	.word	0x0800749f
 80068f4:	0800749f 	.word	0x0800749f
 80068f8:	08006e67 	.word	0x08006e67
 80068fc:	0800749f 	.word	0x0800749f
 8006900:	0800749f 	.word	0x0800749f
 8006904:	0800749f 	.word	0x0800749f
 8006908:	0800749f 	.word	0x0800749f
 800690c:	0800749f 	.word	0x0800749f
 8006910:	0800749f 	.word	0x0800749f
 8006914:	0800749f 	.word	0x0800749f
 8006918:	08006eeb 	.word	0x08006eeb
 800691c:	0800749f 	.word	0x0800749f
 8006920:	0800749f 	.word	0x0800749f
 8006924:	0800749f 	.word	0x0800749f
 8006928:	0800749f 	.word	0x0800749f
 800692c:	0800749f 	.word	0x0800749f
 8006930:	0800749f 	.word	0x0800749f
 8006934:	0800749f 	.word	0x0800749f
 8006938:	0800749f 	.word	0x0800749f
 800693c:	0800749f 	.word	0x0800749f
 8006940:	0800749f 	.word	0x0800749f
 8006944:	0800749f 	.word	0x0800749f
 8006948:	0800749f 	.word	0x0800749f
 800694c:	0800749f 	.word	0x0800749f
 8006950:	0800749f 	.word	0x0800749f
 8006954:	0800749f 	.word	0x0800749f
 8006958:	08006f6d 	.word	0x08006f6d
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b40      	cmp	r3, #64	; 0x40
 8006960:	f000 83e6 	beq.w	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006964:	f000 bd9b 	b.w	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006968:	40021000 	.word	0x40021000
 800696c:	0007a120 	.word	0x0007a120
 8006970:	0801628c 	.word	0x0801628c
 8006974:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006978:	69b9      	ldr	r1, [r7, #24]
 800697a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800697e:	f000 ff83 	bl	8007888 <RCCEx_GetSAIxPeriphCLKFreq>
 8006982:	61f8      	str	r0, [r7, #28]
      break;
 8006984:	f000 bd8e 	b.w	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006988:	69b9      	ldr	r1, [r7, #24]
 800698a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800698e:	f000 ff7b 	bl	8007888 <RCCEx_GetSAIxPeriphCLKFreq>
 8006992:	61f8      	str	r0, [r7, #28]
      break;
 8006994:	f000 bd86 	b.w	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006998:	4b9a      	ldr	r3, [pc, #616]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069aa:	d015      	beq.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069b2:	f200 8092 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069bc:	d029      	beq.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c4:	f200 8089 	bhi.w	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d07b      	beq.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069d4:	d04a      	beq.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 80069d6:	e080      	b.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80069d8:	4b8a      	ldr	r3, [pc, #552]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d17d      	bne.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80069e4:	4b87      	ldr	r3, [pc, #540]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80069f0:	4b84      	ldr	r3, [pc, #528]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	e005      	b.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80069fc:	4b81      	ldr	r3, [pc, #516]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	4a7f      	ldr	r2, [pc, #508]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a0e:	61fb      	str	r3, [r7, #28]
          break;
 8006a10:	e066      	b.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006a12:	4b7c      	ldr	r3, [pc, #496]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a1e:	d162      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006a20:	4b78      	ldr	r3, [pc, #480]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a2c:	d15b      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006a2e:	4b75      	ldr	r3, [pc, #468]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	0a1b      	lsrs	r3, r3, #8
 8006a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a38:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	fb03 f202 	mul.w	r2, r3, r2
 8006a42:	4b70      	ldr	r3, [pc, #448]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	091b      	lsrs	r3, r3, #4
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a52:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006a54:	4b6b      	ldr	r3, [pc, #428]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	0d5b      	lsrs	r3, r3, #21
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	3301      	adds	r3, #1
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a68:	61fb      	str	r3, [r7, #28]
          break;
 8006a6a:	e03c      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006a6c:	4b65      	ldr	r3, [pc, #404]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a78:	d138      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006a7a:	4b62      	ldr	r3, [pc, #392]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a86:	d131      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006a88:	4b5e      	ldr	r3, [pc, #376]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	0a1b      	lsrs	r3, r3, #8
 8006a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a92:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	fb03 f202 	mul.w	r2, r3, r2
 8006a9c:	4b59      	ldr	r3, [pc, #356]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	091b      	lsrs	r3, r3, #4
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aac:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006aae:	4b55      	ldr	r3, [pc, #340]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	0d5b      	lsrs	r3, r3, #21
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	3301      	adds	r3, #1
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac2:	61fb      	str	r3, [r7, #28]
          break;
 8006ac4:	e012      	b.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006ac6:	4b4f      	ldr	r3, [pc, #316]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d10e      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8006ad4:	4b4d      	ldr	r3, [pc, #308]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006ad6:	61fb      	str	r3, [r7, #28]
          break;
 8006ad8:	e00b      	b.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8006ada:	bf00      	nop
 8006adc:	f000 bce2 	b.w	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ae0:	bf00      	nop
 8006ae2:	f000 bcdf 	b.w	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ae6:	bf00      	nop
 8006ae8:	f000 bcdc 	b.w	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006aec:	bf00      	nop
 8006aee:	f000 bcd9 	b.w	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006af2:	bf00      	nop
        break;
 8006af4:	f000 bcd6 	b.w	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006af8:	4b42      	ldr	r3, [pc, #264]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b06:	d13d      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006b08:	4b3e      	ldr	r3, [pc, #248]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b14:	f040 84c5 	bne.w	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006b18:	4b3a      	ldr	r3, [pc, #232]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b24:	f040 84bd 	bne.w	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006b28:	4b36      	ldr	r3, [pc, #216]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	0a1b      	lsrs	r3, r3, #8
 8006b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b32:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	fb03 f202 	mul.w	r2, r3, r2
 8006b3c:	4b31      	ldr	r3, [pc, #196]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	091b      	lsrs	r3, r3, #4
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	3301      	adds	r3, #1
 8006b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006b4e:	4b2d      	ldr	r3, [pc, #180]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	0edb      	lsrs	r3, r3, #27
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006b60:	4b28      	ldr	r3, [pc, #160]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8006b6c:	2311      	movs	r3, #17
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e001      	b.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8006b72:	2307      	movs	r3, #7
 8006b74:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7e:	61fb      	str	r3, [r7, #28]
      break;
 8006b80:	f000 bc8f 	b.w	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006b84:	4b1f      	ldr	r3, [pc, #124]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b96:	d016      	beq.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b9e:	f200 809b 	bhi.w	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ba8:	d032      	beq.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bb0:	f200 8092 	bhi.w	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 8084 	beq.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bc2:	d052      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8006bc4:	e088      	b.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	f040 8084 	bne.w	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8006be0:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	091b      	lsrs	r3, r3, #4
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	e005      	b.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8006bec:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bf2:	0a1b      	lsrs	r3, r3, #8
 8006bf4:	f003 030f 	and.w	r3, r3, #15
 8006bf8:	4a03      	ldr	r2, [pc, #12]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bfe:	61fb      	str	r3, [r7, #28]
          break;
 8006c00:	e06c      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006c02:	bf00      	nop
 8006c04:	40021000 	.word	0x40021000
 8006c08:	0801628c 	.word	0x0801628c
 8006c0c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006c10:	4ba5      	ldr	r3, [pc, #660]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c1c:	d160      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006c1e:	4ba2      	ldr	r3, [pc, #648]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c2a:	d159      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006c2c:	4b9e      	ldr	r3, [pc, #632]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	0a1b      	lsrs	r3, r3, #8
 8006c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c36:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	fb03 f202 	mul.w	r2, r3, r2
 8006c40:	4b99      	ldr	r3, [pc, #612]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	091b      	lsrs	r3, r3, #4
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006c52:	4b95      	ldr	r3, [pc, #596]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	0d5b      	lsrs	r3, r3, #21
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c66:	61fb      	str	r3, [r7, #28]
          break;
 8006c68:	e03a      	b.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006c6a:	4b8f      	ldr	r3, [pc, #572]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c76:	d135      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006c78:	4b8b      	ldr	r3, [pc, #556]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c84:	d12e      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006c86:	4b88      	ldr	r3, [pc, #544]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c90:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	fb03 f202 	mul.w	r2, r3, r2
 8006c9a:	4b83      	ldr	r3, [pc, #524]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	091b      	lsrs	r3, r3, #4
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006cac:	4b7e      	ldr	r3, [pc, #504]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	0d5b      	lsrs	r3, r3, #21
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc0:	61fb      	str	r3, [r7, #28]
          break;
 8006cc2:	e00f      	b.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006cc4:	4b78      	ldr	r3, [pc, #480]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d10a      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8006cd2:	4b76      	ldr	r3, [pc, #472]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006cd4:	61fb      	str	r3, [r7, #28]
          break;
 8006cd6:	e007      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8006cd8:	bf00      	nop
 8006cda:	e3e2      	b.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006cdc:	bf00      	nop
 8006cde:	e3e0      	b.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006ce0:	bf00      	nop
 8006ce2:	e3de      	b.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006ce4:	bf00      	nop
 8006ce6:	e3dc      	b.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006ce8:	bf00      	nop
      break;
 8006cea:	e3da      	b.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006cec:	4b6e      	ldr	r3, [pc, #440]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d827      	bhi.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8006cfe:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d15 	.word	0x08006d15
 8006d08:	08006d1d 	.word	0x08006d1d
 8006d0c:	08006d25 	.word	0x08006d25
 8006d10:	08006d39 	.word	0x08006d39
          frequency = HAL_RCC_GetPCLK2Freq();
 8006d14:	f7ff f81a 	bl	8005d4c <HAL_RCC_GetPCLK2Freq>
 8006d18:	61f8      	str	r0, [r7, #28]
          break;
 8006d1a:	e01d      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d1c:	f7fe ff6a 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8006d20:	61f8      	str	r0, [r7, #28]
          break;
 8006d22:	e019      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d24:	4b60      	ldr	r3, [pc, #384]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d30:	d10f      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8006d32:	4b5f      	ldr	r3, [pc, #380]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006d34:	61fb      	str	r3, [r7, #28]
          break;
 8006d36:	e00c      	b.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d38:	4b5b      	ldr	r3, [pc, #364]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d107      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8006d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4a:	61fb      	str	r3, [r7, #28]
          break;
 8006d4c:	e003      	b.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8006d4e:	bf00      	nop
 8006d50:	e3a8      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006d52:	bf00      	nop
 8006d54:	e3a6      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006d56:	bf00      	nop
        break;
 8006d58:	e3a4      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006d5a:	4b53      	ldr	r3, [pc, #332]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d60:	f003 030c 	and.w	r3, r3, #12
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b0c      	cmp	r3, #12
 8006d6a:	d83a      	bhi.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8006d6c:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8006d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d72:	bf00      	nop
 8006d74:	08006da9 	.word	0x08006da9
 8006d78:	08006de3 	.word	0x08006de3
 8006d7c:	08006de3 	.word	0x08006de3
 8006d80:	08006de3 	.word	0x08006de3
 8006d84:	08006db1 	.word	0x08006db1
 8006d88:	08006de3 	.word	0x08006de3
 8006d8c:	08006de3 	.word	0x08006de3
 8006d90:	08006de3 	.word	0x08006de3
 8006d94:	08006db9 	.word	0x08006db9
 8006d98:	08006de3 	.word	0x08006de3
 8006d9c:	08006de3 	.word	0x08006de3
 8006da0:	08006de3 	.word	0x08006de3
 8006da4:	08006dcd 	.word	0x08006dcd
          frequency = HAL_RCC_GetPCLK1Freq();
 8006da8:	f7fe ffba 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8006dac:	61f8      	str	r0, [r7, #28]
          break;
 8006dae:	e01d      	b.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8006db0:	f7fe ff20 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8006db4:	61f8      	str	r0, [r7, #28]
          break;
 8006db6:	e019      	b.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006db8:	4b3b      	ldr	r3, [pc, #236]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc4:	d10f      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8006dc6:	4b3a      	ldr	r3, [pc, #232]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006dc8:	61fb      	str	r3, [r7, #28]
          break;
 8006dca:	e00c      	b.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006dcc:	4b36      	ldr	r3, [pc, #216]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d107      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8006dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dde:	61fb      	str	r3, [r7, #28]
          break;
 8006de0:	e003      	b.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8006de2:	bf00      	nop
 8006de4:	e35e      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006de6:	bf00      	nop
 8006de8:	e35c      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006dea:	bf00      	nop
        break;
 8006dec:	e35a      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006dee:	4b2e      	ldr	r3, [pc, #184]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b30      	cmp	r3, #48	; 0x30
 8006dfe:	d021      	beq.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b30      	cmp	r3, #48	; 0x30
 8006e04:	d829      	bhi.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d011      	beq.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d823      	bhi.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b10      	cmp	r3, #16
 8006e1c:	d004      	beq.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8006e1e:	e01c      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e20:	f7fe ff7e 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8006e24:	61f8      	str	r0, [r7, #28]
          break;
 8006e26:	e01d      	b.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e28:	f7fe fee4 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8006e2c:	61f8      	str	r0, [r7, #28]
          break;
 8006e2e:	e019      	b.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e30:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3c:	d10f      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8006e3e:	4b1c      	ldr	r3, [pc, #112]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006e40:	61fb      	str	r3, [r7, #28]
          break;
 8006e42:	e00c      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e44:	4b18      	ldr	r3, [pc, #96]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d107      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8006e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e56:	61fb      	str	r3, [r7, #28]
          break;
 8006e58:	e003      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8006e5a:	bf00      	nop
 8006e5c:	e322      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006e5e:	bf00      	nop
 8006e60:	e320      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006e62:	bf00      	nop
        break;
 8006e64:	e31e      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006e66:	4b10      	ldr	r3, [pc, #64]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2bc0      	cmp	r3, #192	; 0xc0
 8006e76:	d027      	beq.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e7c:	d82f      	bhi.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b80      	cmp	r3, #128	; 0x80
 8006e82:	d017      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b80      	cmp	r3, #128	; 0x80
 8006e88:	d829      	bhi.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b40      	cmp	r3, #64	; 0x40
 8006e94:	d004      	beq.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8006e96:	e022      	b.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e98:	f7fe ff42 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8006e9c:	61f8      	str	r0, [r7, #28]
          break;
 8006e9e:	e023      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ea0:	f7fe fea8 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8006ea4:	61f8      	str	r0, [r7, #28]
          break;
 8006ea6:	e01f      	b.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	02dc6c00 	.word	0x02dc6c00
 8006eb0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eb4:	4b9b      	ldr	r3, [pc, #620]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec0:	d10f      	bne.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8006ec2:	4b99      	ldr	r3, [pc, #612]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ec4:	61fb      	str	r3, [r7, #28]
          break;
 8006ec6:	e00c      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ec8:	4b96      	ldr	r3, [pc, #600]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d107      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8006ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eda:	61fb      	str	r3, [r7, #28]
          break;
 8006edc:	e003      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8006ede:	bf00      	nop
 8006ee0:	e2e0      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ee2:	bf00      	nop
 8006ee4:	e2de      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ee6:	bf00      	nop
        break;
 8006ee8:	e2dc      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006eea:	4b8e      	ldr	r3, [pc, #568]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006efc:	d025      	beq.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f04:	d82c      	bhi.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f0c:	d013      	beq.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f14:	d824      	bhi.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d004      	beq.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f22:	d004      	beq.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8006f24:	e01c      	b.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f26:	f7fe fefb 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8006f2a:	61f8      	str	r0, [r7, #28]
          break;
 8006f2c:	e01d      	b.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f2e:	f7fe fe61 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8006f32:	61f8      	str	r0, [r7, #28]
          break;
 8006f34:	e019      	b.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f36:	4b7b      	ldr	r3, [pc, #492]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f42:	d10f      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8006f44:	4b78      	ldr	r3, [pc, #480]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f46:	61fb      	str	r3, [r7, #28]
          break;
 8006f48:	e00c      	b.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f4a:	4b76      	ldr	r3, [pc, #472]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d107      	bne.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8006f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f5c:	61fb      	str	r3, [r7, #28]
          break;
 8006f5e:	e003      	b.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8006f60:	bf00      	nop
 8006f62:	e29f      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006f64:	bf00      	nop
 8006f66:	e29d      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006f68:	bf00      	nop
        break;
 8006f6a:	e29b      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006f6c:	4b6d      	ldr	r3, [pc, #436]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f7e:	d025      	beq.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f86:	d82c      	bhi.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f8e:	d013      	beq.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f96:	d824      	bhi.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa4:	d004      	beq.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8006fa6:	e01c      	b.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fa8:	f7fe feba 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8006fac:	61f8      	str	r0, [r7, #28]
          break;
 8006fae:	e01d      	b.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8006fb0:	f7fe fe20 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8006fb4:	61f8      	str	r0, [r7, #28]
          break;
 8006fb6:	e019      	b.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fb8:	4b5a      	ldr	r3, [pc, #360]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc4:	d10f      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8006fc6:	4b58      	ldr	r3, [pc, #352]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fc8:	61fb      	str	r3, [r7, #28]
          break;
 8006fca:	e00c      	b.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006fcc:	4b55      	ldr	r3, [pc, #340]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d107      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8006fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fde:	61fb      	str	r3, [r7, #28]
          break;
 8006fe0:	e003      	b.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8006fe2:	bf00      	nop
 8006fe4:	e25e      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006fe6:	bf00      	nop
 8006fe8:	e25c      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006fea:	bf00      	nop
        break;
 8006fec:	e25a      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006fee:	4b4d      	ldr	r3, [pc, #308]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007000:	d007      	beq.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007008:	d12f      	bne.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800700a:	f7fe fdf3 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 800700e:	61f8      	str	r0, [r7, #28]
          break;
 8007010:	e02e      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8007012:	4b44      	ldr	r3, [pc, #272]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800701a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800701e:	d126      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8007020:	4b40      	ldr	r3, [pc, #256]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d020      	beq.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800702c:	4b3d      	ldr	r3, [pc, #244]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	0a1b      	lsrs	r3, r3, #8
 8007032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007036:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	fb03 f202 	mul.w	r2, r3, r2
 8007040:	4b38      	ldr	r3, [pc, #224]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	091b      	lsrs	r3, r3, #4
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	3301      	adds	r3, #1
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007052:	4b34      	ldr	r3, [pc, #208]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	0e5b      	lsrs	r3, r3, #25
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	3301      	adds	r3, #1
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	fbb2 f3f3 	udiv	r3, r2, r3
 8007066:	61fb      	str	r3, [r7, #28]
          break;
 8007068:	e001      	b.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 800706a:	bf00      	nop
 800706c:	e21a      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800706e:	bf00      	nop
        break;
 8007070:	e218      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007072:	4b2c      	ldr	r3, [pc, #176]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007074:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d103      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007084:	f7fe fe62 	bl	8005d4c <HAL_RCC_GetPCLK2Freq>
 8007088:	61f8      	str	r0, [r7, #28]
        break;
 800708a:	e20b      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 800708c:	f7fe fdb2 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8007090:	61f8      	str	r0, [r7, #28]
        break;
 8007092:	e207      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007094:	4b23      	ldr	r3, [pc, #140]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007096:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800709a:	f003 0318 	and.w	r3, r3, #24
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b10      	cmp	r3, #16
 80070a4:	d010      	beq.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d834      	bhi.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d024      	beq.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 80070b8:	e02d      	b.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80070ba:	69b9      	ldr	r1, [r7, #24]
 80070bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80070c0:	f000 fbe2 	bl	8007888 <RCCEx_GetSAIxPeriphCLKFreq>
 80070c4:	61f8      	str	r0, [r7, #28]
          break;
 80070c6:	e02b      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80070c8:	4b16      	ldr	r3, [pc, #88]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d122      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80070d4:	4b13      	ldr	r3, [pc, #76]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80070e0:	4b10      	ldr	r3, [pc, #64]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	e005      	b.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80070ec:	4b0d      	ldr	r3, [pc, #52]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80070ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	f003 030f 	and.w	r3, r3, #15
 80070f8:	4a0c      	ldr	r2, [pc, #48]	; (800712c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80070fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070fe:	61fb      	str	r3, [r7, #28]
          break;
 8007100:	e00b      	b.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007102:	4b08      	ldr	r3, [pc, #32]	; (8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800710a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710e:	d106      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8007110:	4b05      	ldr	r3, [pc, #20]	; (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007112:	61fb      	str	r3, [r7, #28]
          break;
 8007114:	e003      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8007116:	bf00      	nop
 8007118:	e1c4      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800711a:	bf00      	nop
 800711c:	e1c2      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800711e:	bf00      	nop
        break;
 8007120:	e1c0      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007122:	bf00      	nop
 8007124:	40021000 	.word	0x40021000
 8007128:	00f42400 	.word	0x00f42400
 800712c:	0801628c 	.word	0x0801628c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007130:	4b96      	ldr	r3, [pc, #600]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007136:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007142:	d013      	beq.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714a:	d819      	bhi.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007158:	d004      	beq.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 800715a:	e011      	b.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 800715c:	f7fe fde0 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007160:	61f8      	str	r0, [r7, #28]
          break;
 8007162:	e010      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007164:	f7fe fd46 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8007168:	61f8      	str	r0, [r7, #28]
          break;
 800716a:	e00c      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800716c:	4b87      	ldr	r3, [pc, #540]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007178:	d104      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 800717a:	4b85      	ldr	r3, [pc, #532]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800717c:	61fb      	str	r3, [r7, #28]
          break;
 800717e:	e001      	b.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8007180:	bf00      	nop
 8007182:	e18f      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007184:	bf00      	nop
        break;
 8007186:	e18d      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007188:	4b80      	ldr	r3, [pc, #512]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800719a:	d013      	beq.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a2:	d819      	bhi.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071b0:	d004      	beq.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 80071b2:	e011      	b.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 80071b4:	f7fe fdb4 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 80071b8:	61f8      	str	r0, [r7, #28]
          break;
 80071ba:	e010      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 80071bc:	f7fe fd1a 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 80071c0:	61f8      	str	r0, [r7, #28]
          break;
 80071c2:	e00c      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071c4:	4b71      	ldr	r3, [pc, #452]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d0:	d104      	bne.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 80071d2:	4b6f      	ldr	r3, [pc, #444]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80071d4:	61fb      	str	r3, [r7, #28]
          break;
 80071d6:	e001      	b.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 80071d8:	bf00      	nop
 80071da:	e163      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80071dc:	bf00      	nop
        break;
 80071de:	e161      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80071e0:	4b6a      	ldr	r3, [pc, #424]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80071e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071f2:	d013      	beq.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071fa:	d819      	bhi.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d004      	beq.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007208:	d004      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 800720a:	e011      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800720c:	f7fe fd88 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007210:	61f8      	str	r0, [r7, #28]
          break;
 8007212:	e010      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8007214:	f7fe fcee 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8007218:	61f8      	str	r0, [r7, #28]
          break;
 800721a:	e00c      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800721c:	4b5b      	ldr	r3, [pc, #364]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007228:	d104      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 800722a:	4b59      	ldr	r3, [pc, #356]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800722c:	61fb      	str	r3, [r7, #28]
          break;
 800722e:	e001      	b.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8007230:	bf00      	nop
 8007232:	e137      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007234:	bf00      	nop
        break;
 8007236:	e135      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007238:	4b54      	ldr	r3, [pc, #336]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800723a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b02      	cmp	r3, #2
 8007248:	d011      	beq.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d818      	bhi.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d004      	beq.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 800725c:	e011      	b.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800725e:	f7fe fd5f 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007262:	61f8      	str	r0, [r7, #28]
          break;
 8007264:	e010      	b.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8007266:	f7fe fcc5 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 800726a:	61f8      	str	r0, [r7, #28]
          break;
 800726c:	e00c      	b.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800726e:	4b47      	ldr	r3, [pc, #284]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800727a:	d104      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 800727c:	4b44      	ldr	r3, [pc, #272]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800727e:	61fb      	str	r3, [r7, #28]
          break;
 8007280:	e001      	b.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8007282:	bf00      	nop
 8007284:	e10e      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007286:	bf00      	nop
        break;
 8007288:	e10c      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800728a:	4b40      	ldr	r3, [pc, #256]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800728c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007290:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800729c:	d02c      	beq.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80072a4:	d833      	bhi.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80072ac:	d01a      	beq.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80072b4:	d82b      	bhi.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d004      	beq.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072c2:	d004      	beq.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 80072c4:	e023      	b.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 80072c6:	f7fe fd2b 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 80072ca:	61f8      	str	r0, [r7, #28]
          break;
 80072cc:	e026      	b.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80072ce:	4b2f      	ldr	r3, [pc, #188]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80072d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d11a      	bne.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 80072dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80072e0:	61fb      	str	r3, [r7, #28]
          break;
 80072e2:	e016      	b.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072e4:	4b29      	ldr	r3, [pc, #164]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f0:	d111      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 80072f2:	4b27      	ldr	r3, [pc, #156]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80072f4:	61fb      	str	r3, [r7, #28]
          break;
 80072f6:	e00e      	b.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80072f8:	4b24      	ldr	r3, [pc, #144]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80072fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b02      	cmp	r3, #2
 8007304:	d109      	bne.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8007306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800730a:	61fb      	str	r3, [r7, #28]
          break;
 800730c:	e005      	b.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 800730e:	bf00      	nop
 8007310:	e0c8      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007312:	bf00      	nop
 8007314:	e0c6      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007316:	bf00      	nop
 8007318:	e0c4      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800731a:	bf00      	nop
        break;
 800731c:	e0c2      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800731e:	4b1b      	ldr	r3, [pc, #108]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007324:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007330:	d030      	beq.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007338:	d837      	bhi.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007340:	d01a      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007348:	d82f      	bhi.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d004      	beq.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007356:	d004      	beq.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8007358:	e027      	b.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 800735a:	f7fe fce1 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 800735e:	61f8      	str	r0, [r7, #28]
          break;
 8007360:	e02a      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007362:	4b0a      	ldr	r3, [pc, #40]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b02      	cmp	r3, #2
 800736e:	d11e      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8007370:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007374:	61fb      	str	r3, [r7, #28]
          break;
 8007376:	e01a      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007378:	4b04      	ldr	r3, [pc, #16]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007384:	d115      	bne.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8007386:	4b02      	ldr	r3, [pc, #8]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007388:	61fb      	str	r3, [r7, #28]
          break;
 800738a:	e012      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800738c:	40021000 	.word	0x40021000
 8007390:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007394:	4b46      	ldr	r3, [pc, #280]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d109      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 80073a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a6:	61fb      	str	r3, [r7, #28]
          break;
 80073a8:	e005      	b.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 80073aa:	bf00      	nop
 80073ac:	e07a      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80073ae:	bf00      	nop
 80073b0:	e078      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80073b2:	bf00      	nop
 80073b4:	e076      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80073b6:	bf00      	nop
        break;
 80073b8:	e074      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80073ba:	4b3d      	ldr	r3, [pc, #244]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80073bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073cc:	d02c      	beq.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073d4:	d855      	bhi.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073e2:	d004      	beq.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 80073e4:	e04d      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80073e6:	f7fe fc05 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 80073ea:	61f8      	str	r0, [r7, #28]
          break;
 80073ec:	e04e      	b.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80073ee:	4b30      	ldr	r3, [pc, #192]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d145      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80073fa:	4b2d      	ldr	r3, [pc, #180]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8007406:	4b2a      	ldr	r3, [pc, #168]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	091b      	lsrs	r3, r3, #4
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	e005      	b.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8007412:	4b27      	ldr	r3, [pc, #156]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	4a25      	ldr	r2, [pc, #148]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007424:	61fb      	str	r3, [r7, #28]
          break;
 8007426:	e02e      	b.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007428:	4b21      	ldr	r3, [pc, #132]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007434:	d129      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007436:	4b1e      	ldr	r3, [pc, #120]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800743e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007442:	d122      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007444:	4b1a      	ldr	r3, [pc, #104]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	0a1b      	lsrs	r3, r3, #8
 800744a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800744e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	fb03 f202 	mul.w	r2, r3, r2
 8007458:	4b15      	ldr	r3, [pc, #84]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	091b      	lsrs	r3, r3, #4
 800745e:	f003 030f 	and.w	r3, r3, #15
 8007462:	3301      	adds	r3, #1
 8007464:	fbb2 f3f3 	udiv	r3, r2, r3
 8007468:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800746a:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	0d5b      	lsrs	r3, r3, #21
 8007470:	f003 0303 	and.w	r3, r3, #3
 8007474:	3301      	adds	r3, #1
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	fbb2 f3f3 	udiv	r3, r2, r3
 800747e:	61fb      	str	r3, [r7, #28]
          break;
 8007480:	e003      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8007482:	bf00      	nop
 8007484:	e00e      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007486:	bf00      	nop
 8007488:	e00c      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800748a:	bf00      	nop
        break;
 800748c:	e00a      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800748e:	bf00      	nop
 8007490:	e008      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007492:	bf00      	nop
 8007494:	e006      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007496:	bf00      	nop
 8007498:	e004      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800749a:	bf00      	nop
 800749c:	e002      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800749e:	bf00      	nop
 80074a0:	e000      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80074a2:	bf00      	nop
    }
  }

  return(frequency);
 80074a4:	69fb      	ldr	r3, [r7, #28]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40021000 	.word	0x40021000
 80074b4:	0801628c 	.word	0x0801628c

080074b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80074c6:	4b72      	ldr	r3, [pc, #456]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00e      	beq.n	80074f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80074d2:	4b6f      	ldr	r3, [pc, #444]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f003 0203 	and.w	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d103      	bne.n	80074ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
       ||
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d142      	bne.n	8007570 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	73fb      	strb	r3, [r7, #15]
 80074ee:	e03f      	b.n	8007570 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d018      	beq.n	800752a <RCCEx_PLLSAI1_Config+0x72>
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d825      	bhi.n	8007548 <RCCEx_PLLSAI1_Config+0x90>
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d002      	beq.n	8007506 <RCCEx_PLLSAI1_Config+0x4e>
 8007500:	2b02      	cmp	r3, #2
 8007502:	d009      	beq.n	8007518 <RCCEx_PLLSAI1_Config+0x60>
 8007504:	e020      	b.n	8007548 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007506:	4b62      	ldr	r3, [pc, #392]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d11d      	bne.n	800754e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007516:	e01a      	b.n	800754e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007518:	4b5d      	ldr	r3, [pc, #372]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007520:	2b00      	cmp	r3, #0
 8007522:	d116      	bne.n	8007552 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007528:	e013      	b.n	8007552 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800752a:	4b59      	ldr	r3, [pc, #356]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10f      	bne.n	8007556 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007536:	4b56      	ldr	r3, [pc, #344]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d109      	bne.n	8007556 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007546:	e006      	b.n	8007556 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	73fb      	strb	r3, [r7, #15]
      break;
 800754c:	e004      	b.n	8007558 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800754e:	bf00      	nop
 8007550:	e002      	b.n	8007558 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007552:	bf00      	nop
 8007554:	e000      	b.n	8007558 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007556:	bf00      	nop
    }

    if(status == HAL_OK)
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d108      	bne.n	8007570 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800755e:	4b4c      	ldr	r3, [pc, #304]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f023 0203 	bic.w	r2, r3, #3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4949      	ldr	r1, [pc, #292]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 800756c:	4313      	orrs	r3, r2
 800756e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	2b00      	cmp	r3, #0
 8007574:	f040 8086 	bne.w	8007684 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007578:	4b45      	ldr	r3, [pc, #276]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a44      	ldr	r2, [pc, #272]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 800757e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007584:	f7fa feb0 	bl	80022e8 <HAL_GetTick>
 8007588:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800758a:	e009      	b.n	80075a0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800758c:	f7fa feac 	bl	80022e8 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b02      	cmp	r3, #2
 8007598:	d902      	bls.n	80075a0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	73fb      	strb	r3, [r7, #15]
        break;
 800759e:	e005      	b.n	80075ac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075a0:	4b3b      	ldr	r3, [pc, #236]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1ef      	bne.n	800758c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d168      	bne.n	8007684 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d113      	bne.n	80075e0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075b8:	4b35      	ldr	r3, [pc, #212]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	4b35      	ldr	r3, [pc, #212]	; (8007694 <RCCEx_PLLSAI1_Config+0x1dc>)
 80075be:	4013      	ands	r3, r2
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6892      	ldr	r2, [r2, #8]
 80075c4:	0211      	lsls	r1, r2, #8
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	68d2      	ldr	r2, [r2, #12]
 80075ca:	06d2      	lsls	r2, r2, #27
 80075cc:	4311      	orrs	r1, r2
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6852      	ldr	r2, [r2, #4]
 80075d2:	3a01      	subs	r2, #1
 80075d4:	0112      	lsls	r2, r2, #4
 80075d6:	430a      	orrs	r2, r1
 80075d8:	492d      	ldr	r1, [pc, #180]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	610b      	str	r3, [r1, #16]
 80075de:	e02d      	b.n	800763c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d115      	bne.n	8007612 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075e6:	4b2a      	ldr	r3, [pc, #168]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 80075e8:	691a      	ldr	r2, [r3, #16]
 80075ea:	4b2b      	ldr	r3, [pc, #172]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075ec:	4013      	ands	r3, r2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6892      	ldr	r2, [r2, #8]
 80075f2:	0211      	lsls	r1, r2, #8
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6912      	ldr	r2, [r2, #16]
 80075f8:	0852      	lsrs	r2, r2, #1
 80075fa:	3a01      	subs	r2, #1
 80075fc:	0552      	lsls	r2, r2, #21
 80075fe:	4311      	orrs	r1, r2
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6852      	ldr	r2, [r2, #4]
 8007604:	3a01      	subs	r2, #1
 8007606:	0112      	lsls	r2, r2, #4
 8007608:	430a      	orrs	r2, r1
 800760a:	4921      	ldr	r1, [pc, #132]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 800760c:	4313      	orrs	r3, r2
 800760e:	610b      	str	r3, [r1, #16]
 8007610:	e014      	b.n	800763c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007612:	4b1f      	ldr	r3, [pc, #124]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007614:	691a      	ldr	r2, [r3, #16]
 8007616:	4b21      	ldr	r3, [pc, #132]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007618:	4013      	ands	r3, r2
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6892      	ldr	r2, [r2, #8]
 800761e:	0211      	lsls	r1, r2, #8
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	6952      	ldr	r2, [r2, #20]
 8007624:	0852      	lsrs	r2, r2, #1
 8007626:	3a01      	subs	r2, #1
 8007628:	0652      	lsls	r2, r2, #25
 800762a:	4311      	orrs	r1, r2
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6852      	ldr	r2, [r2, #4]
 8007630:	3a01      	subs	r2, #1
 8007632:	0112      	lsls	r2, r2, #4
 8007634:	430a      	orrs	r2, r1
 8007636:	4916      	ldr	r1, [pc, #88]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007638:	4313      	orrs	r3, r2
 800763a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800763c:	4b14      	ldr	r3, [pc, #80]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a13      	ldr	r2, [pc, #76]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007642:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007646:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007648:	f7fa fe4e 	bl	80022e8 <HAL_GetTick>
 800764c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800764e:	e009      	b.n	8007664 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007650:	f7fa fe4a 	bl	80022e8 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d902      	bls.n	8007664 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	73fb      	strb	r3, [r7, #15]
          break;
 8007662:	e005      	b.n	8007670 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007664:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0ef      	beq.n	8007650 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007676:	4b06      	ldr	r3, [pc, #24]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007678:	691a      	ldr	r2, [r3, #16]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	4904      	ldr	r1, [pc, #16]	; (8007690 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007680:	4313      	orrs	r3, r2
 8007682:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40021000 	.word	0x40021000
 8007694:	07ff800f 	.word	0x07ff800f
 8007698:	ff9f800f 	.word	0xff9f800f
 800769c:	f9ff800f 	.word	0xf9ff800f

080076a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80076ae:	4b72      	ldr	r3, [pc, #456]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00e      	beq.n	80076d8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80076ba:	4b6f      	ldr	r3, [pc, #444]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f003 0203 	and.w	r2, r3, #3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d103      	bne.n	80076d2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
       ||
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d142      	bne.n	8007758 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	73fb      	strb	r3, [r7, #15]
 80076d6:	e03f      	b.n	8007758 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d018      	beq.n	8007712 <RCCEx_PLLSAI2_Config+0x72>
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d825      	bhi.n	8007730 <RCCEx_PLLSAI2_Config+0x90>
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d002      	beq.n	80076ee <RCCEx_PLLSAI2_Config+0x4e>
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d009      	beq.n	8007700 <RCCEx_PLLSAI2_Config+0x60>
 80076ec:	e020      	b.n	8007730 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076ee:	4b62      	ldr	r3, [pc, #392]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d11d      	bne.n	8007736 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076fe:	e01a      	b.n	8007736 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007700:	4b5d      	ldr	r3, [pc, #372]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007708:	2b00      	cmp	r3, #0
 800770a:	d116      	bne.n	800773a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007710:	e013      	b.n	800773a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007712:	4b59      	ldr	r3, [pc, #356]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10f      	bne.n	800773e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800771e:	4b56      	ldr	r3, [pc, #344]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800772e:	e006      	b.n	800773e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
      break;
 8007734:	e004      	b.n	8007740 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007736:	bf00      	nop
 8007738:	e002      	b.n	8007740 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800773a:	bf00      	nop
 800773c:	e000      	b.n	8007740 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800773e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d108      	bne.n	8007758 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007746:	4b4c      	ldr	r3, [pc, #304]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f023 0203 	bic.w	r2, r3, #3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4949      	ldr	r1, [pc, #292]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007754:	4313      	orrs	r3, r2
 8007756:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 8086 	bne.w	800786c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007760:	4b45      	ldr	r3, [pc, #276]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a44      	ldr	r2, [pc, #272]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800776a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776c:	f7fa fdbc 	bl	80022e8 <HAL_GetTick>
 8007770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007772:	e009      	b.n	8007788 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007774:	f7fa fdb8 	bl	80022e8 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d902      	bls.n	8007788 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	73fb      	strb	r3, [r7, #15]
        break;
 8007786:	e005      	b.n	8007794 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007788:	4b3b      	ldr	r3, [pc, #236]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1ef      	bne.n	8007774 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d168      	bne.n	800786c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d113      	bne.n	80077c8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077a0:	4b35      	ldr	r3, [pc, #212]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077a2:	695a      	ldr	r2, [r3, #20]
 80077a4:	4b35      	ldr	r3, [pc, #212]	; (800787c <RCCEx_PLLSAI2_Config+0x1dc>)
 80077a6:	4013      	ands	r3, r2
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6892      	ldr	r2, [r2, #8]
 80077ac:	0211      	lsls	r1, r2, #8
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	68d2      	ldr	r2, [r2, #12]
 80077b2:	06d2      	lsls	r2, r2, #27
 80077b4:	4311      	orrs	r1, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6852      	ldr	r2, [r2, #4]
 80077ba:	3a01      	subs	r2, #1
 80077bc:	0112      	lsls	r2, r2, #4
 80077be:	430a      	orrs	r2, r1
 80077c0:	492d      	ldr	r1, [pc, #180]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	614b      	str	r3, [r1, #20]
 80077c6:	e02d      	b.n	8007824 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d115      	bne.n	80077fa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077ce:	4b2a      	ldr	r3, [pc, #168]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077d0:	695a      	ldr	r2, [r3, #20]
 80077d2:	4b2b      	ldr	r3, [pc, #172]	; (8007880 <RCCEx_PLLSAI2_Config+0x1e0>)
 80077d4:	4013      	ands	r3, r2
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	6892      	ldr	r2, [r2, #8]
 80077da:	0211      	lsls	r1, r2, #8
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6912      	ldr	r2, [r2, #16]
 80077e0:	0852      	lsrs	r2, r2, #1
 80077e2:	3a01      	subs	r2, #1
 80077e4:	0552      	lsls	r2, r2, #21
 80077e6:	4311      	orrs	r1, r2
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6852      	ldr	r2, [r2, #4]
 80077ec:	3a01      	subs	r2, #1
 80077ee:	0112      	lsls	r2, r2, #4
 80077f0:	430a      	orrs	r2, r1
 80077f2:	4921      	ldr	r1, [pc, #132]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	614b      	str	r3, [r1, #20]
 80077f8:	e014      	b.n	8007824 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077fa:	4b1f      	ldr	r3, [pc, #124]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 80077fc:	695a      	ldr	r2, [r3, #20]
 80077fe:	4b21      	ldr	r3, [pc, #132]	; (8007884 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007800:	4013      	ands	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6892      	ldr	r2, [r2, #8]
 8007806:	0211      	lsls	r1, r2, #8
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6952      	ldr	r2, [r2, #20]
 800780c:	0852      	lsrs	r2, r2, #1
 800780e:	3a01      	subs	r2, #1
 8007810:	0652      	lsls	r2, r2, #25
 8007812:	4311      	orrs	r1, r2
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6852      	ldr	r2, [r2, #4]
 8007818:	3a01      	subs	r2, #1
 800781a:	0112      	lsls	r2, r2, #4
 800781c:	430a      	orrs	r2, r1
 800781e:	4916      	ldr	r1, [pc, #88]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007820:	4313      	orrs	r3, r2
 8007822:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007824:	4b14      	ldr	r3, [pc, #80]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a13      	ldr	r2, [pc, #76]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 800782a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800782e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007830:	f7fa fd5a 	bl	80022e8 <HAL_GetTick>
 8007834:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007836:	e009      	b.n	800784c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007838:	f7fa fd56 	bl	80022e8 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d902      	bls.n	800784c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	73fb      	strb	r3, [r7, #15]
          break;
 800784a:	e005      	b.n	8007858 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0ef      	beq.n	8007838 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800785e:	4b06      	ldr	r3, [pc, #24]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007860:	695a      	ldr	r2, [r3, #20]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	4904      	ldr	r1, [pc, #16]	; (8007878 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007868:	4313      	orrs	r3, r2
 800786a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	40021000 	.word	0x40021000
 800787c:	07ff800f 	.word	0x07ff800f
 8007880:	ff9f800f 	.word	0xff9f800f
 8007884:	f9ff800f 	.word	0xf9ff800f

08007888 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007888:	b480      	push	{r7}
 800788a:	b089      	sub	sp, #36	; 0x24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a4:	d10b      	bne.n	80078be <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80078a6:	4b7e      	ldr	r3, [pc, #504]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078ac:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80078b0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	2b60      	cmp	r3, #96	; 0x60
 80078b6:	d112      	bne.n	80078de <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80078b8:	4b7a      	ldr	r3, [pc, #488]	; (8007aa4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80078ba:	61fb      	str	r3, [r7, #28]
 80078bc:	e00f      	b.n	80078de <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c4:	d10b      	bne.n	80078de <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80078c6:	4b76      	ldr	r3, [pc, #472]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078d0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d8:	d101      	bne.n	80078de <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80078da:	4b72      	ldr	r3, [pc, #456]	; (8007aa4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80078dc:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f040 80d6 	bne.w	8007a92 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	2b40      	cmp	r3, #64	; 0x40
 80078ee:	d003      	beq.n	80078f8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f6:	d13b      	bne.n	8007970 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80078f8:	4b69      	ldr	r3, [pc, #420]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007904:	f040 80c4 	bne.w	8007a90 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007908:	4b65      	ldr	r3, [pc, #404]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80bd 	beq.w	8007a90 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007916:	4b62      	ldr	r3, [pc, #392]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	091b      	lsrs	r3, r3, #4
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	3301      	adds	r3, #1
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	fbb2 f3f3 	udiv	r3, r2, r3
 8007928:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800792a:	4b5d      	ldr	r3, [pc, #372]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	0a1b      	lsrs	r3, r3, #8
 8007930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007934:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007936:	4b5a      	ldr	r3, [pc, #360]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	0edb      	lsrs	r3, r3, #27
 800793c:	f003 031f 	and.w	r3, r3, #31
 8007940:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007948:	4b55      	ldr	r3, [pc, #340]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007954:	2311      	movs	r3, #17
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	e001      	b.n	800795e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800795a:	2307      	movs	r3, #7
 800795c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	fb03 f202 	mul.w	r2, r3, r2
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	fbb2 f3f3 	udiv	r3, r2, r3
 800796c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800796e:	e08f      	b.n	8007a90 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d13a      	bne.n	80079ec <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8007976:	4b4a      	ldr	r3, [pc, #296]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800797e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007982:	f040 8086 	bne.w	8007a92 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007986:	4b46      	ldr	r3, [pc, #280]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d07f      	beq.n	8007a92 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007992:	4b43      	ldr	r3, [pc, #268]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	091b      	lsrs	r3, r3, #4
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	3301      	adds	r3, #1
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80079a6:	4b3e      	ldr	r3, [pc, #248]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	0a1b      	lsrs	r3, r3, #8
 80079ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80079b2:	4b3b      	ldr	r3, [pc, #236]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	0edb      	lsrs	r3, r3, #27
 80079b8:	f003 031f 	and.w	r3, r3, #31
 80079bc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80079c4:	4b36      	ldr	r3, [pc, #216]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80079d0:	2311      	movs	r3, #17
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	e001      	b.n	80079da <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80079d6:	2307      	movs	r3, #7
 80079d8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	fb03 f202 	mul.w	r2, r3, r2
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e8:	61fb      	str	r3, [r7, #28]
 80079ea:	e052      	b.n	8007a92 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b80      	cmp	r3, #128	; 0x80
 80079f0:	d003      	beq.n	80079fa <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f8:	d109      	bne.n	8007a0e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079fa:	4b29      	ldr	r3, [pc, #164]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a06:	d144      	bne.n	8007a92 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007a08:	4b27      	ldr	r3, [pc, #156]	; (8007aa8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007a0a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a0c:	e041      	b.n	8007a92 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d003      	beq.n	8007a1c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1a:	d13a      	bne.n	8007a92 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007a1c:	4b20      	ldr	r3, [pc, #128]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a28:	d133      	bne.n	8007a92 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007a2a:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d02d      	beq.n	8007a92 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8007a36:	4b1a      	ldr	r3, [pc, #104]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	091b      	lsrs	r3, r3, #4
 8007a3c:	f003 030f 	and.w	r3, r3, #15
 8007a40:	3301      	adds	r3, #1
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a48:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007a4a:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	0a1b      	lsrs	r3, r3, #8
 8007a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a54:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8007a56:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	0edb      	lsrs	r3, r3, #27
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10a      	bne.n	8007a7e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007a68:	4b0d      	ldr	r3, [pc, #52]	; (8007aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007a74:	2311      	movs	r3, #17
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	e001      	b.n	8007a7e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007a7a:	2307      	movs	r3, #7
 8007a7c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	fb03 f202 	mul.w	r2, r3, r2
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8c:	61fb      	str	r3, [r7, #28]
 8007a8e:	e000      	b.n	8007a92 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007a90:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007a92:	69fb      	ldr	r3, [r7, #28]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3724      	adds	r7, #36	; 0x24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	40021000 	.word	0x40021000
 8007aa4:	001fff68 	.word	0x001fff68
 8007aa8:	00f42400 	.word	0x00f42400

08007aac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	; 0x28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e078      	b.n	8007bb0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d105      	bne.n	8007ad6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7fa f98b 	bl	8001dec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2203      	movs	r2, #3
 8007ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f86a 	bl	8007bb8 <HAL_SD_InitCard>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e060      	b.n	8007bb0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007aee:	f107 0308 	add.w	r3, r7, #8
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fdb5 	bl	8008664 <HAL_SD_GetCardStatus>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e055      	b.n	8007bb0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007b04:	7e3b      	ldrb	r3, [r7, #24]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007b0a:	7e7b      	ldrb	r3, [r7, #25]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d10a      	bne.n	8007b2e <HAL_SD_Init+0x82>
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d102      	bne.n	8007b24 <HAL_SD_Init+0x78>
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d004      	beq.n	8007b2e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b2c:	e00b      	b.n	8007b46 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d104      	bne.n	8007b40 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b3e:	e002      	b.n	8007b46 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fe6b 	bl	8008828 <HAL_SD_ConfigWideBusOperation>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e029      	b.n	8007bb0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007b5c:	f7fa fbc4 	bl	80022e8 <HAL_GetTick>
 8007b60:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b62:	e014      	b.n	8007b8e <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007b64:	f7fa fbc0 	bl	80022e8 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b72:	d10c      	bne.n	8007b8e <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e010      	b.n	8007bb0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 ff5e 	bl	8008a50 <HAL_SD_GetCardState>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d1e4      	bne.n	8007b64 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3728      	adds	r7, #40	; 0x28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007bb8:	b5b0      	push	{r4, r5, r7, lr}
 8007bba:	b08e      	sub	sp, #56	; 0x38
 8007bbc:	af04      	add	r7, sp, #16
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007bd0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007bd4:	f7fe fd50 	bl	8006678 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bd8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d109      	bne.n	8007bf4 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007bee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e079      	b.n	8007ce8 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	0a1b      	lsrs	r3, r3, #8
 8007bf8:	4a3d      	ldr	r2, [pc, #244]	; (8007cf0 <HAL_SD_InitCard+0x138>)
 8007bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfe:	091b      	lsrs	r3, r3, #4
 8007c00:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d107      	bne.n	8007c20 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0210 	orr.w	r2, r2, #16
 8007c1e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681d      	ldr	r5, [r3, #0]
 8007c24:	466c      	mov	r4, sp
 8007c26:	f107 0314 	add.w	r3, r7, #20
 8007c2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c32:	f107 0308 	add.w	r3, r7, #8
 8007c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f001 fefd 	bl	8009a38 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f001 ff40 	bl	8009ac8 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007c54:	4a27      	ldr	r2, [pc, #156]	; (8007cf4 <HAL_SD_InitCard+0x13c>)
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fa fb4e 	bl	8002300 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 ffd3 	bl	8008c10 <SD_PowerON>
 8007c6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00b      	beq.n	8007c8a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e02e      	b.n	8007ce8 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 ff00 	bl	8008a90 <SD_InitCard>
 8007c90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e01b      	b.n	8007ce8 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 ff9b 	bl	8009bf4 <SDMMC_CmdBlockLength>
 8007cbe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00f      	beq.n	8007ce6 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a0b      	ldr	r2, [pc, #44]	; (8007cf8 <HAL_SD_InitCard+0x140>)
 8007ccc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3728      	adds	r7, #40	; 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bdb0      	pop	{r4, r5, r7, pc}
 8007cf0:	014f8b59 	.word	0x014f8b59
 8007cf4:	00012110 	.word	0x00012110
 8007cf8:	1fe00fff 	.word	0x1fe00fff

08007cfc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08c      	sub	sp, #48	; 0x30
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d107      	bne.n	8007d24 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e08d      	b.n	8007e40 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	f040 8086 	bne.w	8007e3e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	441a      	add	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d907      	bls.n	8007d56 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e074      	b.n	8007e40 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2203      	movs	r2, #3
 8007d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2200      	movs	r2, #0
 8007d64:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	025a      	lsls	r2, r3, #9
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d002      	beq.n	8007d82 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	025b      	lsls	r3, r3, #9
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d86:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	025b      	lsls	r3, r3, #9
 8007d8c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d8e:	2390      	movs	r3, #144	; 0x90
 8007d90:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d92:	2302      	movs	r3, #2
 8007d94:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f107 0210 	add.w	r2, r7, #16
 8007da6:	4611      	mov	r1, r2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 fef7 	bl	8009b9c <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68da      	ldr	r2, [r3, #12]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dbc:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d90a      	bls.n	8007dea <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2282      	movs	r2, #130	; 0x82
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007de0:	4618      	mov	r0, r3
 8007de2:	f001 ff4d 	bl	8009c80 <SDMMC_CmdReadMultiBlock>
 8007de6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007de8:	e009      	b.n	8007dfe <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2281      	movs	r2, #129	; 0x81
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 ff1f 	bl	8009c3a <SDMMC_CmdReadSingleBlock>
 8007dfc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d012      	beq.n	8007e2a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a0f      	ldr	r2, [pc, #60]	; (8007e48 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	431a      	orrs	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e00a      	b.n	8007e40 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007e38:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e000      	b.n	8007e40 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007e3e:	2302      	movs	r3, #2
  }
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3730      	adds	r7, #48	; 0x30
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	1fe00fff 	.word	0x1fe00fff

08007e4c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08c      	sub	sp, #48	; 0x30
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d107      	bne.n	8007e74 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e08d      	b.n	8007f90 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	f040 8086 	bne.w	8007f8e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	441a      	add	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d907      	bls.n	8007ea6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e074      	b.n	8007f90 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	025a      	lsls	r2, r3, #9
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d002      	beq.n	8007ed2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	025b      	lsls	r3, r3, #9
 8007ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ed6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	025b      	lsls	r3, r3, #9
 8007edc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ede:	2390      	movs	r3, #144	; 0x90
 8007ee0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007eea:	2300      	movs	r3, #0
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f107 0210 	add.w	r2, r7, #16
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 fe4f 	bl	8009b9c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f0c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d90a      	bls.n	8007f3a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	22a0      	movs	r2, #160	; 0xa0
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 feeb 	bl	8009d0c <SDMMC_CmdWriteMultiBlock>
 8007f36:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f38:	e009      	b.n	8007f4e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2290      	movs	r2, #144	; 0x90
 8007f3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 febd 	bl	8009cc6 <SDMMC_CmdWriteSingleBlock>
 8007f4c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d012      	beq.n	8007f7a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a0f      	ldr	r2, [pc, #60]	; (8007f98 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f62:	431a      	orrs	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e00a      	b.n	8007f90 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007f88:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e000      	b.n	8007f90 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007f8e:	2302      	movs	r3, #2
  }
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3730      	adds	r7, #48	; 0x30
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	1fe00fff 	.word	0x1fe00fff

08007f9c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <HAL_SD_IRQHandler+0x2e>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 f98e 	bl	80092e4 <SD_Read_IT>
 8007fc8:	e199      	b.n	80082fe <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 80ae 	beq.w	8008136 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fe2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	6812      	ldr	r2, [r2, #0]
 8007fee:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007ff2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007ff6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008006:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008016:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f003 0308 	and.w	r3, r3, #8
 800801e:	2b00      	cmp	r3, #0
 8008020:	d038      	beq.n	8008094 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f003 0302 	and.w	r3, r3, #2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d104      	bne.n	8008036 <HAL_SD_IRQHandler+0x9a>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f003 0320 	and.w	r3, r3, #32
 8008032:	2b00      	cmp	r3, #0
 8008034:	d011      	beq.n	800805a <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4618      	mov	r0, r3
 800803c:	f001 fe8a 	bl	8009d54 <SDMMC_CmdStopTransfer>
 8008040:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d008      	beq.n	800805a <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f957 	bl	8008308 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a90      	ldr	r2, [pc, #576]	; (80082a0 <HAL_SD_IRQHandler+0x304>)
 8008060:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d104      	bne.n	8008084 <HAL_SD_IRQHandler+0xe8>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f002 fb59 	bl	800a73c <HAL_SD_RxCpltCallback>
 800808a:	e138      	b.n	80082fe <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f002 fb4b 	bl	800a728 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8008092:	e134      	b.n	80082fe <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 812f 	beq.w	80082fe <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2200      	movs	r2, #0
 80080a6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2200      	movs	r2, #0
 80080ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2200      	movs	r2, #0
 80080b6:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d104      	bne.n	80080cc <HAL_SD_IRQHandler+0x130>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f003 0320 	and.w	r3, r3, #32
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d011      	beq.n	80080f0 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f001 fe3f 	bl	8009d54 <SDMMC_CmdStopTransfer>
 80080d6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d008      	beq.n	80080f0 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	431a      	orrs	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f90c 	bl	8008308 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f003 0310 	and.w	r3, r3, #16
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <HAL_SD_IRQHandler+0x176>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f002 fb08 	bl	800a728 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d105      	bne.n	800812e <HAL_SD_IRQHandler+0x192>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80e8 	beq.w	80082fe <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f002 fb04 	bl	800a73c <HAL_SD_RxCpltCallback>
}
 8008134:	e0e3      	b.n	80082fe <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d008      	beq.n	8008156 <HAL_SD_IRQHandler+0x1ba>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 f919 	bl	8009386 <SD_Write_IT>
 8008154:	e0d3      	b.n	80082fe <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 809f 	beq.w	80082a4 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	f043 0202 	orr.w	r2, r3, #2
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008186:	f003 0308 	and.w	r3, r3, #8
 800818a:	2b00      	cmp	r3, #0
 800818c:	d005      	beq.n	800819a <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008192:	f043 0208 	orr.w	r2, r3, #8
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d005      	beq.n	80081b4 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ac:	f043 0220 	orr.w	r2, r3, #32
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ba:	f003 0310 	and.w	r3, r3, #16
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d005      	beq.n	80081ce <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	f043 0210 	orr.w	r2, r3, #16
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a33      	ldr	r2, [pc, #204]	; (80082a0 <HAL_SD_IRQHandler+0x304>)
 80081d4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80081e4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68da      	ldr	r2, [r3, #12]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081f4:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008204:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008214:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fd9a 	bl	8009d54 <SDMMC_CmdStopTransfer>
 8008220:	4602      	mov	r2, r0
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	431a      	orrs	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800823a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008244:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00a      	beq.n	8008266 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f852 	bl	8008308 <HAL_SD_ErrorCallback>
}
 8008264:	e04b      	b.n	80082fe <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826c:	2b00      	cmp	r3, #0
 800826e:	d046      	beq.n	80082fe <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008274:	2b00      	cmp	r3, #0
 8008276:	d042      	beq.n	80082fe <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008286:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2200      	movs	r2, #0
 800828e:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f835 	bl	8008308 <HAL_SD_ErrorCallback>
}
 800829e:	e02e      	b.n	80082fe <HAL_SD_IRQHandler+0x362>
 80082a0:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d025      	beq.n	80082fe <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ba:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c2:	f003 0304 	and.w	r3, r3, #4
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10c      	bne.n	80082e4 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f003 0320 	and.w	r3, r3, #32
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d003      	beq.n	80082dc <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 f8d4 	bl	8009482 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 80082da:	e010      	b.n	80082fe <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 f8bc 	bl	800945a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 80082e2:	e00c      	b.n	80082fe <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f003 0320 	and.w	r3, r3, #32
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 f8bd 	bl	800946e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 80082f4:	e003      	b.n	80082fe <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 f8a5 	bl	8009446 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 80082fc:	e7ff      	b.n	80082fe <HAL_SD_IRQHandler+0x362>
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop

08008308 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800832a:	0f9b      	lsrs	r3, r3, #30
 800832c:	b2da      	uxtb	r2, r3
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008336:	0e9b      	lsrs	r3, r3, #26
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	b2da      	uxtb	r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f003 0303 	and.w	r3, r3, #3
 8008350:	b2da      	uxtb	r2, r3
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800835a:	0c1b      	lsrs	r3, r3, #16
 800835c:	b2da      	uxtb	r2, r3
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008366:	0a1b      	lsrs	r3, r3, #8
 8008368:	b2da      	uxtb	r2, r3
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008372:	b2da      	uxtb	r2, r3
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800837c:	0d1b      	lsrs	r3, r3, #20
 800837e:	b29a      	uxth	r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008388:	0c1b      	lsrs	r3, r3, #16
 800838a:	b2db      	uxtb	r3, r3
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	b2da      	uxtb	r2, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800839a:	0bdb      	lsrs	r3, r3, #15
 800839c:	b2db      	uxtb	r3, r3
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ac:	0b9b      	lsrs	r3, r3, #14
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083be:	0b5b      	lsrs	r3, r3, #13
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083d0:	0b1b      	lsrs	r3, r3, #12
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2200      	movs	r2, #0
 80083e2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d163      	bne.n	80084b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083f0:	009a      	lsls	r2, r3, #2
 80083f2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80083f6:	4013      	ands	r3, r2
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80083fc:	0f92      	lsrs	r2, r2, #30
 80083fe:	431a      	orrs	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008408:	0edb      	lsrs	r3, r3, #27
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f003 0307 	and.w	r3, r3, #7
 8008410:	b2da      	uxtb	r2, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800841a:	0e1b      	lsrs	r3, r3, #24
 800841c:	b2db      	uxtb	r3, r3
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	b2da      	uxtb	r2, r3
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800842c:	0d5b      	lsrs	r3, r3, #21
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f003 0307 	and.w	r3, r3, #7
 8008434:	b2da      	uxtb	r2, r3
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800843e:	0c9b      	lsrs	r3, r3, #18
 8008440:	b2db      	uxtb	r3, r3
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	b2da      	uxtb	r2, r3
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008450:	0bdb      	lsrs	r3, r3, #15
 8008452:	b2db      	uxtb	r3, r3
 8008454:	f003 0307 	and.w	r3, r3, #7
 8008458:	b2da      	uxtb	r2, r3
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	7e1b      	ldrb	r3, [r3, #24]
 800846c:	b2db      	uxtb	r3, r3
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	3302      	adds	r3, #2
 8008474:	2201      	movs	r2, #1
 8008476:	fa02 f303 	lsl.w	r3, r2, r3
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800847e:	fb03 f202 	mul.w	r2, r3, r2
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	7a1b      	ldrb	r3, [r3, #8]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 030f 	and.w	r3, r3, #15
 8008490:	2201      	movs	r2, #1
 8008492:	409a      	lsls	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80084a0:	0a52      	lsrs	r2, r2, #9
 80084a2:	fb03 f202 	mul.w	r2, r3, r2
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084b0:	659a      	str	r2, [r3, #88]	; 0x58
 80084b2:	e031      	b.n	8008518 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d11d      	bne.n	80084f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084c0:	041b      	lsls	r3, r3, #16
 80084c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084ca:	0c1b      	lsrs	r3, r3, #16
 80084cc:	431a      	orrs	r2, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	3301      	adds	r3, #1
 80084d8:	029a      	lsls	r2, r3, #10
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084ec:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	659a      	str	r2, [r3, #88]	; 0x58
 80084f6:	e00f      	b.n	8008518 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a58      	ldr	r2, [pc, #352]	; (8008660 <HAL_SD_GetCardCSD+0x344>)
 80084fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008504:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e09d      	b.n	8008654 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800851c:	0b9b      	lsrs	r3, r3, #14
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	b2da      	uxtb	r2, r3
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800852e:	09db      	lsrs	r3, r3, #7
 8008530:	b2db      	uxtb	r3, r3
 8008532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008536:	b2da      	uxtb	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008540:	b2db      	uxtb	r3, r3
 8008542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008546:	b2da      	uxtb	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008550:	0fdb      	lsrs	r3, r3, #31
 8008552:	b2da      	uxtb	r2, r3
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800855c:	0f5b      	lsrs	r3, r3, #29
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	b2da      	uxtb	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800856e:	0e9b      	lsrs	r3, r3, #26
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	b2da      	uxtb	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008580:	0d9b      	lsrs	r3, r3, #22
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	b2da      	uxtb	r2, r3
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008592:	0d5b      	lsrs	r3, r3, #21
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	b2da      	uxtb	r2, r3
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ae:	0c1b      	lsrs	r3, r3, #16
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085c2:	0bdb      	lsrs	r3, r3, #15
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085d6:	0b9b      	lsrs	r3, r3, #14
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ea:	0b5b      	lsrs	r3, r3, #13
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085fe:	0b1b      	lsrs	r3, r3, #12
 8008600:	b2db      	uxtb	r3, r3
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	b2da      	uxtb	r2, r3
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008612:	0a9b      	lsrs	r3, r3, #10
 8008614:	b2db      	uxtb	r3, r3
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	b2da      	uxtb	r2, r3
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	b2da      	uxtb	r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008642:	b2da      	uxtb	r2, r3
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	1fe00fff 	.word	0x1fe00fff

08008664 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b094      	sub	sp, #80	; 0x50
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008674:	f107 0308 	add.w	r3, r7, #8
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fbd4 	bl	8008e28 <SD_SendSDStatus>
 8008680:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008684:	2b00      	cmp	r3, #0
 8008686:	d011      	beq.n	80086ac <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a4f      	ldr	r2, [pc, #316]	; (80087cc <HAL_SD_GetCardStatus+0x168>)
 800868e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008696:	431a      	orrs	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80086aa:	e070      	b.n	800878e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	099b      	lsrs	r3, r3, #6
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	095b      	lsrs	r3, r3, #5
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	0a1b      	lsrs	r3, r3, #8
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	0e1b      	lsrs	r3, r3, #24
 80086dc:	b29b      	uxth	r3, r3
 80086de:	4313      	orrs	r3, r2
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	061a      	lsls	r2, r3, #24
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	021b      	lsls	r3, r3, #8
 80086ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086f2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80086fc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	0e1b      	lsrs	r3, r3, #24
 8008702:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	b2da      	uxtb	r2, r3
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	0a1b      	lsrs	r3, r3, #8
 8008714:	b2da      	uxtb	r2, r3
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	0d1b      	lsrs	r3, r3, #20
 800871e:	b2db      	uxtb	r3, r3
 8008720:	f003 030f 	and.w	r3, r3, #15
 8008724:	b2da      	uxtb	r2, r3
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	0c1b      	lsrs	r3, r3, #16
 800872e:	b29b      	uxth	r3, r3
 8008730:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008734:	b29a      	uxth	r2, r3
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	b29b      	uxth	r3, r3
 800873a:	b2db      	uxtb	r3, r3
 800873c:	b29b      	uxth	r3, r3
 800873e:	4313      	orrs	r3, r2
 8008740:	b29a      	uxth	r2, r3
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	0a9b      	lsrs	r3, r3, #10
 800874a:	b2db      	uxtb	r3, r3
 800874c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008750:	b2da      	uxtb	r2, r3
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	0a1b      	lsrs	r3, r3, #8
 800875a:	b2db      	uxtb	r3, r3
 800875c:	f003 0303 	and.w	r3, r3, #3
 8008760:	b2da      	uxtb	r2, r3
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	091b      	lsrs	r3, r3, #4
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f003 030f 	and.w	r3, r3, #15
 8008770:	b2da      	uxtb	r2, r3
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	b2da      	uxtb	r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	0e1b      	lsrs	r3, r3, #24
 8008788:	b2da      	uxtb	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008796:	4618      	mov	r0, r3
 8008798:	f001 fa2c 	bl	8009bf4 <SDMMC_CmdBlockLength>
 800879c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800879e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00d      	beq.n	80087c0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a08      	ldr	r2, [pc, #32]	; (80087cc <HAL_SD_GetCardStatus+0x168>)
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80087c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3750      	adds	r7, #80	; 0x50
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	1fe00fff 	.word	0x1fe00fff

080087d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008828:	b5b0      	push	{r4, r5, r7, lr}
 800882a:	b090      	sub	sp, #64	; 0x40
 800882c:	af04      	add	r7, sp, #16
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2203      	movs	r2, #3
 800883c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008844:	2b03      	cmp	r3, #3
 8008846:	d02e      	beq.n	80088a6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800884e:	d106      	bne.n	800885e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	639a      	str	r2, [r3, #56]	; 0x38
 800885c:	e029      	b.n	80088b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008864:	d10a      	bne.n	800887c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fbd6 	bl	8009018 <SD_WideBus_Enable>
 800886c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	431a      	orrs	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	639a      	str	r2, [r3, #56]	; 0x38
 800887a:	e01a      	b.n	80088b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fc13 	bl	80090ae <SD_WideBus_Disable>
 8008888:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	639a      	str	r2, [r3, #56]	; 0x38
 8008896:	e00c      	b.n	80088b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	639a      	str	r2, [r3, #56]	; 0x38
 80088a4:	e005      	b.n	80088b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d007      	beq.n	80088ca <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a60      	ldr	r2, [pc, #384]	; (8008a40 <HAL_SD_ConfigWideBusOperation+0x218>)
 80088c0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80088c8:	e097      	b.n	80089fa <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80088ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80088ce:	f7fd fed3 	bl	8006678 <HAL_RCCEx_GetPeriphCLKFreq>
 80088d2:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 8086 	beq.w	80089e8 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695a      	ldr	r2, [r3, #20]
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	4952      	ldr	r1, [pc, #328]	; (8008a44 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80088fa:	fba1 1303 	umull	r1, r3, r1, r3
 80088fe:	0e1b      	lsrs	r3, r3, #24
 8008900:	429a      	cmp	r2, r3
 8008902:	d303      	bcc.n	800890c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	61fb      	str	r3, [r7, #28]
 800890a:	e05a      	b.n	80089c2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008914:	d103      	bne.n	800891e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	61fb      	str	r3, [r7, #28]
 800891c:	e051      	b.n	80089c2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008926:	d126      	bne.n	8008976 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10e      	bne.n	800894e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	4a45      	ldr	r2, [pc, #276]	; (8008a48 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d906      	bls.n	8008946 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	4a42      	ldr	r2, [pc, #264]	; (8008a44 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800893c:	fba2 2303 	umull	r2, r3, r2, r3
 8008940:	0e5b      	lsrs	r3, r3, #25
 8008942:	61fb      	str	r3, [r7, #28]
 8008944:	e03d      	b.n	80089c2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	61fb      	str	r3, [r7, #28]
 800894c:	e039      	b.n	80089c2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008956:	fbb2 f3f3 	udiv	r3, r2, r3
 800895a:	4a3b      	ldr	r2, [pc, #236]	; (8008a48 <HAL_SD_ConfigWideBusOperation+0x220>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d906      	bls.n	800896e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	4a38      	ldr	r2, [pc, #224]	; (8008a44 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008964:	fba2 2303 	umull	r2, r3, r2, r3
 8008968:	0e5b      	lsrs	r3, r3, #25
 800896a:	61fb      	str	r3, [r7, #28]
 800896c:	e029      	b.n	80089c2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	61fb      	str	r3, [r7, #28]
 8008974:	e025      	b.n	80089c2 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10e      	bne.n	800899c <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	4a32      	ldr	r2, [pc, #200]	; (8008a4c <HAL_SD_ConfigWideBusOperation+0x224>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d906      	bls.n	8008994 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	4a2e      	ldr	r2, [pc, #184]	; (8008a44 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800898a:	fba2 2303 	umull	r2, r3, r2, r3
 800898e:	0e1b      	lsrs	r3, r3, #24
 8008990:	61fb      	str	r3, [r7, #28]
 8008992:	e016      	b.n	80089c2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	61fb      	str	r3, [r7, #28]
 800899a:	e012      	b.n	80089c2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a8:	4a28      	ldr	r2, [pc, #160]	; (8008a4c <HAL_SD_ConfigWideBusOperation+0x224>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d906      	bls.n	80089bc <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	4a24      	ldr	r2, [pc, #144]	; (8008a44 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80089b2:	fba2 2303 	umull	r2, r3, r2, r3
 80089b6:	0e1b      	lsrs	r3, r3, #24
 80089b8:	61fb      	str	r3, [r7, #28]
 80089ba:	e002      	b.n	80089c2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681d      	ldr	r5, [r3, #0]
 80089cc:	466c      	mov	r4, sp
 80089ce:	f107 0318 	add.w	r3, r7, #24
 80089d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80089da:	f107 030c 	add.w	r3, r7, #12
 80089de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089e0:	4628      	mov	r0, r5
 80089e2:	f001 f829 	bl	8009a38 <SDMMC_Init>
 80089e6:	e008      	b.n	80089fa <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 f8f6 	bl	8009bf4 <SDMMC_CmdBlockLength>
 8008a08:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00c      	beq.n	8008a2a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a0a      	ldr	r2, [pc, #40]	; (8008a40 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008a16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3730      	adds	r7, #48	; 0x30
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	1fe00fff 	.word	0x1fe00fff
 8008a44:	55e63b89 	.word	0x55e63b89
 8008a48:	02faf080 	.word	0x02faf080
 8008a4c:	017d7840 	.word	0x017d7840

08008a50 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008a5c:	f107 030c 	add.w	r3, r7, #12
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fab0 	bl	8008fc8 <SD_SendStatus>
 8008a68:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	431a      	orrs	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	0a5b      	lsrs	r3, r3, #9
 8008a80:	f003 030f 	and.w	r3, r3, #15
 8008a84:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008a86:	693b      	ldr	r3, [r7, #16]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008a90:	b5b0      	push	{r4, r5, r7, lr}
 8008a92:	b090      	sub	sp, #64	; 0x40
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f001 f823 	bl	8009aec <SDMMC_GetPowerState>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d102      	bne.n	8008ab2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008aac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ab0:	e0a9      	b.n	8008c06 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d02e      	beq.n	8008b18 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f001 fa68 	bl	8009f94 <SDMMC_CmdSendCID>
 8008ac4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <SD_InitCard+0x40>
    {
      return errorstate;
 8008acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ace:	e09a      	b.n	8008c06 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 f84d 	bl	8009b76 <SDMMC_GetResponse>
 8008adc:	4602      	mov	r2, r0
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2104      	movs	r1, #4
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f001 f844 	bl	8009b76 <SDMMC_GetResponse>
 8008aee:	4602      	mov	r2, r0
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2108      	movs	r1, #8
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 f83b 	bl	8009b76 <SDMMC_GetResponse>
 8008b00:	4602      	mov	r2, r0
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	210c      	movs	r1, #12
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f001 f832 	bl	8009b76 <SDMMC_GetResponse>
 8008b12:	4602      	mov	r2, r0
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d00d      	beq.n	8008b3c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f107 020e 	add.w	r2, r7, #14
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 fa71 	bl	800a012 <SDMMC_CmdSetRelAdd>
 8008b30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <SD_InitCard+0xac>
    {
      return errorstate;
 8008b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b3a:	e064      	b.n	8008c06 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d036      	beq.n	8008bb2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008b44:	89fb      	ldrh	r3, [r7, #14]
 8008b46:	461a      	mov	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b54:	041b      	lsls	r3, r3, #16
 8008b56:	4619      	mov	r1, r3
 8008b58:	4610      	mov	r0, r2
 8008b5a:	f001 fa3a 	bl	8009fd2 <SDMMC_CmdSendCSD>
 8008b5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <SD_InitCard+0xda>
    {
      return errorstate;
 8008b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b68:	e04d      	b.n	8008c06 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 f800 	bl	8009b76 <SDMMC_GetResponse>
 8008b76:	4602      	mov	r2, r0
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2104      	movs	r1, #4
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 fff7 	bl	8009b76 <SDMMC_GetResponse>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2108      	movs	r1, #8
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 ffee 	bl	8009b76 <SDMMC_GetResponse>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	210c      	movs	r1, #12
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 ffe5 	bl	8009b76 <SDMMC_GetResponse>
 8008bac:	4602      	mov	r2, r0
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 ffdc 	bl	8009b76 <SDMMC_GetResponse>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	0d1a      	lsrs	r2, r3, #20
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008bc6:	f107 0310 	add.w	r3, r7, #16
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff fba5 	bl	800831c <HAL_SD_GetCardCSD>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008bdc:	e013      	b.n	8008c06 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6819      	ldr	r1, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008be6:	041b      	lsls	r3, r3, #16
 8008be8:	2200      	movs	r2, #0
 8008bea:	461c      	mov	r4, r3
 8008bec:	4615      	mov	r5, r2
 8008bee:	4622      	mov	r2, r4
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	4608      	mov	r0, r1
 8008bf4:	f001 f8e4 	bl	8009dc0 <SDMMC_CmdSelDesel>
 8008bf8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <SD_InitCard+0x174>
  {
    return errorstate;
 8008c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c02:	e000      	b.n	8008c06 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3740      	adds	r7, #64	; 0x40
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008c10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61fb      	str	r3, [r7, #28]
 8008c20:	2300      	movs	r3, #0
 8008c22:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8008c24:	f7f9 fb60 	bl	80022e8 <HAL_GetTick>
 8008c28:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f001 f8ea 	bl	8009e08 <SDMMC_CmdGoIdleState>
 8008c34:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <SD_PowerON+0x30>
  {
    return errorstate;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	e0ed      	b.n	8008e1c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f001 f8fd 	bl	8009e44 <SDMMC_CmdOperCond>
 8008c4a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00d      	beq.n	8008c6e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f001 f8d3 	bl	8009e08 <SDMMC_CmdGoIdleState>
 8008c62:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d004      	beq.n	8008c74 <SD_PowerON+0x64>
    {
      return errorstate;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	e0d6      	b.n	8008e1c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d137      	bne.n	8008cec <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2100      	movs	r1, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f8fe 	bl	8009e84 <SDMMC_CmdAppCommand>
 8008c88:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d02d      	beq.n	8008cec <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c94:	e0c2      	b.n	8008e1c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f001 f8f1 	bl	8009e84 <SDMMC_CmdAppCommand>
 8008ca2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <SD_PowerON+0x9e>
    {
      return errorstate;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	e0b6      	b.n	8008e1c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	495c      	ldr	r1, [pc, #368]	; (8008e24 <SD_PowerON+0x214>)
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f001 f908 	bl	8009eca <SDMMC_CmdAppOperCommand>
 8008cba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cc6:	e0a9      	b.n	8008e1c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2100      	movs	r1, #0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 ff51 	bl	8009b76 <SDMMC_GetResponse>
 8008cd4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	0fdb      	lsrs	r3, r3, #31
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <SD_PowerON+0xd2>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e000      	b.n	8008ce4 <SD_PowerON+0xd4>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61bb      	str	r3, [r7, #24]

    count++;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d802      	bhi.n	8008cfc <SD_PowerON+0xec>
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d0cc      	beq.n	8008c96 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d902      	bls.n	8008d0c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008d06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d0a:	e087      	b.n	8008e1c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d07e      	beq.n	8008e14 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d17a      	bne.n	8008e1a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d075      	beq.n	8008e1a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d34:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f042 0208 	orr.w	r2, r2, #8
 8008d44:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 f9c8 	bl	800a0e0 <SDMMC_CmdVoltageSwitch>
 8008d50:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00c      	beq.n	8008d72 <SD_PowerON+0x162>
        {
          return errorstate;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	e05f      	b.n	8008e1c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d5c:	f7f9 fac4 	bl	80022e8 <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d6a:	d102      	bne.n	8008d72 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008d6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d70:	e054      	b.n	8008e1c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d80:	d1ec      	bne.n	8008d5c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d9a:	d002      	beq.n	8008da2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008d9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008da0:	e03c      	b.n	8008e1c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8008da2:	2001      	movs	r0, #1
 8008da4:	f000 fb44 	bl	8009430 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0204 	orr.w	r2, r2, #4
 8008db6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008db8:	e00a      	b.n	8008dd0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008dba:	f7f9 fa95 	bl	80022e8 <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dc8:	d102      	bne.n	8008dd0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008dca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dce:	e025      	b.n	8008e1c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dde:	d1ec      	bne.n	8008dba <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008de8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008df8:	d102      	bne.n	8008e00 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008dfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008dfe:	e00d      	b.n	8008e1c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2213      	movs	r2, #19
 8008e06:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e10:	639a      	str	r2, [r3, #56]	; 0x38
 8008e12:	e002      	b.n	8008e1a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3720      	adds	r7, #32
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	c1100000 	.word	0xc1100000

08008e28 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08c      	sub	sp, #48	; 0x30
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e32:	f7f9 fa59 	bl	80022e8 <HAL_GetTick>
 8008e36:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2100      	movs	r1, #0
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 fe97 	bl	8009b76 <SDMMC_GetResponse>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e52:	d102      	bne.n	8008e5a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e58:	e0b0      	b.n	8008fbc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2140      	movs	r1, #64	; 0x40
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fec7 	bl	8009bf4 <SDMMC_CmdBlockLength>
 8008e66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d005      	beq.n	8008e7a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	e0a0      	b.n	8008fbc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e82:	041b      	lsls	r3, r3, #16
 8008e84:	4619      	mov	r1, r3
 8008e86:	4610      	mov	r0, r2
 8008e88:	f000 fffc 	bl	8009e84 <SDMMC_CmdAppCommand>
 8008e8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d005      	beq.n	8008ea0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	e08d      	b.n	8008fbc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ea4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008ea6:	2340      	movs	r3, #64	; 0x40
 8008ea8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008eaa:	2360      	movs	r3, #96	; 0x60
 8008eac:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008eae:	2302      	movs	r3, #2
 8008eb0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f107 0208 	add.w	r2, r7, #8
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 fe69 	bl	8009b9c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f001 f8e4 	bl	800a09c <SDMMC_CmdStatusRegister>
 8008ed4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d02b      	beq.n	8008f34 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	e069      	b.n	8008fbc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d013      	beq.n	8008f1e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008efa:	e00d      	b.n	8008f18 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fdc3 	bl	8009a8c <SDMMC_ReadFIFO>
 8008f06:	4602      	mov	r2, r0
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	601a      	str	r2, [r3, #0]
        pData++;
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	3304      	adds	r3, #4
 8008f10:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	3301      	adds	r3, #1
 8008f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	2b07      	cmp	r3, #7
 8008f1c:	d9ee      	bls.n	8008efc <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f1e:	f7f9 f9e3 	bl	80022e8 <HAL_GetTick>
 8008f22:	4602      	mov	r2, r0
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f2c:	d102      	bne.n	8008f34 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f32:	e043      	b.n	8008fbc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0d2      	beq.n	8008ee8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f48:	f003 0308 	and.w	r3, r3, #8
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f50:	2308      	movs	r3, #8
 8008f52:	e033      	b.n	8008fbc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5a:	f003 0302 	and.w	r3, r3, #2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f62:	2302      	movs	r3, #2
 8008f64:	e02a      	b.n	8008fbc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6c:	f003 0320 	and.w	r3, r3, #32
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d017      	beq.n	8008fa4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008f74:	2320      	movs	r3, #32
 8008f76:	e021      	b.n	8008fbc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 fd85 	bl	8009a8c <SDMMC_ReadFIFO>
 8008f82:	4602      	mov	r2, r0
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	601a      	str	r2, [r3, #0]
    pData++;
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f8e:	f7f9 f9ab 	bl	80022e8 <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f9c:	d102      	bne.n	8008fa4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fa2:	e00b      	b.n	8008fbc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e2      	bne.n	8008f78 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a03      	ldr	r2, [pc, #12]	; (8008fc4 <SD_SendSDStatus+0x19c>)
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3730      	adds	r7, #48	; 0x30
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	18000f3a 	.word	0x18000f3a

08008fc8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008fd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fdc:	e018      	b.n	8009010 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe6:	041b      	lsls	r3, r3, #16
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4610      	mov	r0, r2
 8008fec:	f001 f833 	bl	800a056 <SDMMC_CmdSendStatus>
 8008ff0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <SD_SendStatus+0x34>
  {
    return errorstate;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	e009      	b.n	8009010 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2100      	movs	r1, #0
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fdb7 	bl	8009b76 <SDMMC_GetResponse>
 8009008:	4602      	mov	r2, r0
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	2300      	movs	r3, #0
 8009026:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2100      	movs	r1, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fda1 	bl	8009b76 <SDMMC_GetResponse>
 8009034:	4603      	mov	r3, r0
 8009036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800903a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800903e:	d102      	bne.n	8009046 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009040:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009044:	e02f      	b.n	80090a6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009046:	f107 030c 	add.w	r3, r7, #12
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f879 	bl	8009144 <SD_FindSCR>
 8009052:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	e023      	b.n	80090a6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d01c      	beq.n	80090a2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009070:	041b      	lsls	r3, r3, #16
 8009072:	4619      	mov	r1, r3
 8009074:	4610      	mov	r0, r2
 8009076:	f000 ff05 	bl	8009e84 <SDMMC_CmdAppCommand>
 800907a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	e00f      	b.n	80090a6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2102      	movs	r1, #2
 800908c:	4618      	mov	r0, r3
 800908e:	f000 ff3c 	bl	8009f0a <SDMMC_CmdBusWidth>
 8009092:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	e003      	b.n	80090a6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800909e:	2300      	movs	r3, #0
 80090a0:	e001      	b.n	80090a6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b086      	sub	sp, #24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80090b6:	2300      	movs	r3, #0
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	2300      	movs	r3, #0
 80090bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2100      	movs	r1, #0
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fd56 	bl	8009b76 <SDMMC_GetResponse>
 80090ca:	4603      	mov	r3, r0
 80090cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090d4:	d102      	bne.n	80090dc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090da:	e02f      	b.n	800913c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80090dc:	f107 030c 	add.w	r3, r7, #12
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f82e 	bl	8009144 <SD_FindSCR>
 80090e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	e023      	b.n	800913c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d01c      	beq.n	8009138 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009106:	041b      	lsls	r3, r3, #16
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f000 feba 	bl	8009e84 <SDMMC_CmdAppCommand>
 8009110:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	e00f      	b.n	800913c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fef1 	bl	8009f0a <SDMMC_CmdBusWidth>
 8009128:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	e003      	b.n	800913c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009134:	2300      	movs	r3, #0
 8009136:	e001      	b.n	800913c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009138:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800913c:	4618      	mov	r0, r3
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b08e      	sub	sp, #56	; 0x38
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800914e:	f7f9 f8cb 	bl	80022e8 <HAL_GetTick>
 8009152:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009154:	2300      	movs	r3, #0
 8009156:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009158:	2300      	movs	r3, #0
 800915a:	60bb      	str	r3, [r7, #8]
 800915c:	2300      	movs	r3, #0
 800915e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2108      	movs	r1, #8
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fd42 	bl	8009bf4 <SDMMC_CmdBlockLength>
 8009170:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	e0ad      	b.n	80092d8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009184:	041b      	lsls	r3, r3, #16
 8009186:	4619      	mov	r1, r3
 8009188:	4610      	mov	r0, r2
 800918a:	f000 fe7b 	bl	8009e84 <SDMMC_CmdAppCommand>
 800918e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	e09e      	b.n	80092d8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800919a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800919e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80091a0:	2308      	movs	r3, #8
 80091a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80091a4:	2330      	movs	r3, #48	; 0x30
 80091a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091a8:	2302      	movs	r3, #2
 80091aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80091b0:	2301      	movs	r3, #1
 80091b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f107 0210 	add.w	r2, r7, #16
 80091bc:	4611      	mov	r1, r2
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fcec 	bl	8009b9c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fec1 	bl	8009f50 <SDMMC_CmdSendSCR>
 80091ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d027      	beq.n	8009226 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	e07e      	b.n	80092d8 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d113      	bne.n	8009210 <SD_FindSCR+0xcc>
 80091e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d110      	bne.n	8009210 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fc4a 	bl	8009a8c <SDMMC_ReadFIFO>
 80091f8:	4603      	mov	r3, r0
 80091fa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4618      	mov	r0, r3
 8009202:	f000 fc43 	bl	8009a8c <SDMMC_ReadFIFO>
 8009206:	4603      	mov	r3, r0
 8009208:	60fb      	str	r3, [r7, #12]
      index++;
 800920a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920c:	3301      	adds	r3, #1
 800920e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009210:	f7f9 f86a 	bl	80022e8 <HAL_GetTick>
 8009214:	4602      	mov	r2, r0
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800921e:	d102      	bne.n	8009226 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009220:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009224:	e058      	b.n	80092d8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800922c:	f240 532a 	movw	r3, #1322	; 0x52a
 8009230:	4013      	ands	r3, r2
 8009232:	2b00      	cmp	r3, #0
 8009234:	d0d1      	beq.n	80091da <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923c:	f003 0308 	and.w	r3, r3, #8
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2208      	movs	r2, #8
 800924a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800924c:	2308      	movs	r3, #8
 800924e:	e043      	b.n	80092d8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009256:	f003 0302 	and.w	r3, r3, #2
 800925a:	2b00      	cmp	r3, #0
 800925c:	d005      	beq.n	800926a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2202      	movs	r2, #2
 8009264:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009266:	2302      	movs	r3, #2
 8009268:	e036      	b.n	80092d8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009270:	f003 0320 	and.w	r3, r3, #32
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2220      	movs	r2, #32
 800927e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009280:	2320      	movs	r3, #32
 8009282:	e029      	b.n	80092d8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a15      	ldr	r2, [pc, #84]	; (80092e0 <SD_FindSCR+0x19c>)
 800928a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	061a      	lsls	r2, r3, #24
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	021b      	lsls	r3, r3, #8
 8009294:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009298:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	0a1b      	lsrs	r3, r3, #8
 800929e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092a2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	0e1b      	lsrs	r3, r3, #24
 80092a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ac:	601a      	str	r2, [r3, #0]
    scr++;
 80092ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b0:	3304      	adds	r3, #4
 80092b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	061a      	lsls	r2, r3, #24
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	021b      	lsls	r3, r3, #8
 80092bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092c0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	0a1b      	lsrs	r3, r3, #8
 80092c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092ca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	0e1b      	lsrs	r3, r3, #24
 80092d0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3738      	adds	r7, #56	; 0x38
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	18000f3a 	.word	0x18000f3a

080092e4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d03f      	beq.n	800937e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
 8009302:	e033      	b.n	800936c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4618      	mov	r0, r3
 800930a:	f000 fbbf 	bl	8009a8c <SDMMC_ReadFIFO>
 800930e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	b2da      	uxtb	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3301      	adds	r3, #1
 800931c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	3b01      	subs	r3, #1
 8009322:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	0a1b      	lsrs	r3, r3, #8
 8009328:	b2da      	uxtb	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3301      	adds	r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	3b01      	subs	r3, #1
 8009338:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	0c1b      	lsrs	r3, r3, #16
 800933e:	b2da      	uxtb	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3301      	adds	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	3b01      	subs	r3, #1
 800934e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	0e1b      	lsrs	r3, r3, #24
 8009354:	b2da      	uxtb	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	701a      	strb	r2, [r3, #0]
      tmp++;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3301      	adds	r3, #1
 800935e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	3b01      	subs	r3, #1
 8009364:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	3301      	adds	r3, #1
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	2b07      	cmp	r3, #7
 8009370:	d9c8      	bls.n	8009304 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800937e:	bf00      	nop
 8009380:	3718      	adds	r7, #24
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b086      	sub	sp, #24
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009398:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d043      	beq.n	8009428 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80093a0:	2300      	movs	r3, #0
 80093a2:	617b      	str	r3, [r7, #20]
 80093a4:	e037      	b.n	8009416 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	021a      	lsls	r2, r3, #8
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3301      	adds	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	041a      	lsls	r2, r3, #16
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	4313      	orrs	r3, r2
 80093da:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3301      	adds	r3, #1
 80093e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	061a      	lsls	r2, r3, #24
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3301      	adds	r3, #1
 80093f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f107 0208 	add.w	r2, r7, #8
 8009408:	4611      	mov	r1, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fb4b 	bl	8009aa6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	3301      	adds	r3, #1
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2b07      	cmp	r3, #7
 800941a:	d9c4      	bls.n	80093a6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009428:	bf00      	nop
 800942a:	3718      	adds	r7, #24
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	4603      	mov	r3, r0
 8009438:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800943a:	bf00      	nop
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009446:	b480      	push	{r7}
 8009448:	b083      	sub	sp, #12
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800944e:	bf00      	nop
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8009462:	bf00      	nop
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800948a:	bf00      	nop
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e049      	b.n	800953c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d106      	bne.n	80094c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f841 	bl	8009544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2202      	movs	r2, #2
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3304      	adds	r3, #4
 80094d2:	4619      	mov	r1, r3
 80094d4:	4610      	mov	r0, r2
 80094d6:	f000 f9f7 	bl	80098c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b01      	cmp	r3, #1
 800956a:	d001      	beq.n	8009570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e04f      	b.n	8009610 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2202      	movs	r2, #2
 8009574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68da      	ldr	r2, [r3, #12]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0201 	orr.w	r2, r2, #1
 8009586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a23      	ldr	r2, [pc, #140]	; (800961c <HAL_TIM_Base_Start_IT+0xc4>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d01d      	beq.n	80095ce <HAL_TIM_Base_Start_IT+0x76>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800959a:	d018      	beq.n	80095ce <HAL_TIM_Base_Start_IT+0x76>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a1f      	ldr	r2, [pc, #124]	; (8009620 <HAL_TIM_Base_Start_IT+0xc8>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d013      	beq.n	80095ce <HAL_TIM_Base_Start_IT+0x76>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a1e      	ldr	r2, [pc, #120]	; (8009624 <HAL_TIM_Base_Start_IT+0xcc>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00e      	beq.n	80095ce <HAL_TIM_Base_Start_IT+0x76>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a1c      	ldr	r2, [pc, #112]	; (8009628 <HAL_TIM_Base_Start_IT+0xd0>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d009      	beq.n	80095ce <HAL_TIM_Base_Start_IT+0x76>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a1b      	ldr	r2, [pc, #108]	; (800962c <HAL_TIM_Base_Start_IT+0xd4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d004      	beq.n	80095ce <HAL_TIM_Base_Start_IT+0x76>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a19      	ldr	r2, [pc, #100]	; (8009630 <HAL_TIM_Base_Start_IT+0xd8>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d115      	bne.n	80095fa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	4b17      	ldr	r3, [pc, #92]	; (8009634 <HAL_TIM_Base_Start_IT+0xdc>)
 80095d6:	4013      	ands	r3, r2
 80095d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b06      	cmp	r3, #6
 80095de:	d015      	beq.n	800960c <HAL_TIM_Base_Start_IT+0xb4>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095e6:	d011      	beq.n	800960c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0201 	orr.w	r2, r2, #1
 80095f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095f8:	e008      	b.n	800960c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f042 0201 	orr.w	r2, r2, #1
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	e000      	b.n	800960e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800960c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	40012c00 	.word	0x40012c00
 8009620:	40000400 	.word	0x40000400
 8009624:	40000800 	.word	0x40000800
 8009628:	40000c00 	.word	0x40000c00
 800962c:	40013400 	.word	0x40013400
 8009630:	40014000 	.word	0x40014000
 8009634:	00010007 	.word	0x00010007

08009638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	f003 0302 	and.w	r3, r3, #2
 800964a:	2b02      	cmp	r3, #2
 800964c:	d122      	bne.n	8009694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	f003 0302 	and.w	r3, r3, #2
 8009658:	2b02      	cmp	r3, #2
 800965a:	d11b      	bne.n	8009694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f06f 0202 	mvn.w	r2, #2
 8009664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f905 	bl	800988a <HAL_TIM_IC_CaptureCallback>
 8009680:	e005      	b.n	800968e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f8f7 	bl	8009876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f908 	bl	800989e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d122      	bne.n	80096e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	d11b      	bne.n	80096e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f06f 0204 	mvn.w	r2, #4
 80096b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2202      	movs	r2, #2
 80096be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f8db 	bl	800988a <HAL_TIM_IC_CaptureCallback>
 80096d4:	e005      	b.n	80096e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f8cd 	bl	8009876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f8de 	bl	800989e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	f003 0308 	and.w	r3, r3, #8
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d122      	bne.n	800973c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f003 0308 	and.w	r3, r3, #8
 8009700:	2b08      	cmp	r3, #8
 8009702:	d11b      	bne.n	800973c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f06f 0208 	mvn.w	r2, #8
 800970c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2204      	movs	r2, #4
 8009712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f8b1 	bl	800988a <HAL_TIM_IC_CaptureCallback>
 8009728:	e005      	b.n	8009736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f8a3 	bl	8009876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f8b4 	bl	800989e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f003 0310 	and.w	r3, r3, #16
 8009746:	2b10      	cmp	r3, #16
 8009748:	d122      	bne.n	8009790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	2b10      	cmp	r3, #16
 8009756:	d11b      	bne.n	8009790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f06f 0210 	mvn.w	r2, #16
 8009760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2208      	movs	r2, #8
 8009766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f887 	bl	800988a <HAL_TIM_IC_CaptureCallback>
 800977c:	e005      	b.n	800978a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f879 	bl	8009876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f88a 	bl	800989e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b01      	cmp	r3, #1
 800979c:	d10e      	bne.n	80097bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d107      	bne.n	80097bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f06f 0201 	mvn.w	r2, #1
 80097b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7f8 f956 	bl	8001a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c6:	2b80      	cmp	r3, #128	; 0x80
 80097c8:	d10e      	bne.n	80097e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d4:	2b80      	cmp	r3, #128	; 0x80
 80097d6:	d107      	bne.n	80097e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f914 	bl	8009a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097f6:	d10e      	bne.n	8009816 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009802:	2b80      	cmp	r3, #128	; 0x80
 8009804:	d107      	bne.n	8009816 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800980e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f907 	bl	8009a24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009820:	2b40      	cmp	r3, #64	; 0x40
 8009822:	d10e      	bne.n	8009842 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982e:	2b40      	cmp	r3, #64	; 0x40
 8009830:	d107      	bne.n	8009842 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800983a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f838 	bl	80098b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	f003 0320 	and.w	r3, r3, #32
 800984c:	2b20      	cmp	r3, #32
 800984e:	d10e      	bne.n	800986e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	f003 0320 	and.w	r3, r3, #32
 800985a:	2b20      	cmp	r3, #32
 800985c:	d107      	bne.n	800986e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f06f 0220 	mvn.w	r2, #32
 8009866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f8c7 	bl	80099fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800988a:	b480      	push	{r7}
 800988c:	b083      	sub	sp, #12
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009892:	bf00      	nop
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b083      	sub	sp, #12
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
	...

080098c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a40      	ldr	r2, [pc, #256]	; (80099dc <TIM_Base_SetConfig+0x114>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d013      	beq.n	8009908 <TIM_Base_SetConfig+0x40>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e6:	d00f      	beq.n	8009908 <TIM_Base_SetConfig+0x40>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a3d      	ldr	r2, [pc, #244]	; (80099e0 <TIM_Base_SetConfig+0x118>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d00b      	beq.n	8009908 <TIM_Base_SetConfig+0x40>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a3c      	ldr	r2, [pc, #240]	; (80099e4 <TIM_Base_SetConfig+0x11c>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d007      	beq.n	8009908 <TIM_Base_SetConfig+0x40>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a3b      	ldr	r2, [pc, #236]	; (80099e8 <TIM_Base_SetConfig+0x120>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d003      	beq.n	8009908 <TIM_Base_SetConfig+0x40>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a3a      	ldr	r2, [pc, #232]	; (80099ec <TIM_Base_SetConfig+0x124>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d108      	bne.n	800991a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4313      	orrs	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a2f      	ldr	r2, [pc, #188]	; (80099dc <TIM_Base_SetConfig+0x114>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d01f      	beq.n	8009962 <TIM_Base_SetConfig+0x9a>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009928:	d01b      	beq.n	8009962 <TIM_Base_SetConfig+0x9a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a2c      	ldr	r2, [pc, #176]	; (80099e0 <TIM_Base_SetConfig+0x118>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d017      	beq.n	8009962 <TIM_Base_SetConfig+0x9a>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a2b      	ldr	r2, [pc, #172]	; (80099e4 <TIM_Base_SetConfig+0x11c>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d013      	beq.n	8009962 <TIM_Base_SetConfig+0x9a>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a2a      	ldr	r2, [pc, #168]	; (80099e8 <TIM_Base_SetConfig+0x120>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d00f      	beq.n	8009962 <TIM_Base_SetConfig+0x9a>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a29      	ldr	r2, [pc, #164]	; (80099ec <TIM_Base_SetConfig+0x124>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d00b      	beq.n	8009962 <TIM_Base_SetConfig+0x9a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a28      	ldr	r2, [pc, #160]	; (80099f0 <TIM_Base_SetConfig+0x128>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d007      	beq.n	8009962 <TIM_Base_SetConfig+0x9a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a27      	ldr	r2, [pc, #156]	; (80099f4 <TIM_Base_SetConfig+0x12c>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d003      	beq.n	8009962 <TIM_Base_SetConfig+0x9a>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a26      	ldr	r2, [pc, #152]	; (80099f8 <TIM_Base_SetConfig+0x130>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d108      	bne.n	8009974 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4313      	orrs	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	4313      	orrs	r3, r2
 8009980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a10      	ldr	r2, [pc, #64]	; (80099dc <TIM_Base_SetConfig+0x114>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d00f      	beq.n	80099c0 <TIM_Base_SetConfig+0xf8>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a12      	ldr	r2, [pc, #72]	; (80099ec <TIM_Base_SetConfig+0x124>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d00b      	beq.n	80099c0 <TIM_Base_SetConfig+0xf8>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a11      	ldr	r2, [pc, #68]	; (80099f0 <TIM_Base_SetConfig+0x128>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d007      	beq.n	80099c0 <TIM_Base_SetConfig+0xf8>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a10      	ldr	r2, [pc, #64]	; (80099f4 <TIM_Base_SetConfig+0x12c>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d003      	beq.n	80099c0 <TIM_Base_SetConfig+0xf8>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a0f      	ldr	r2, [pc, #60]	; (80099f8 <TIM_Base_SetConfig+0x130>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d103      	bne.n	80099c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	691a      	ldr	r2, [r3, #16]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	615a      	str	r2, [r3, #20]
}
 80099ce:	bf00      	nop
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	40012c00 	.word	0x40012c00
 80099e0:	40000400 	.word	0x40000400
 80099e4:	40000800 	.word	0x40000800
 80099e8:	40000c00 	.word	0x40000c00
 80099ec:	40013400 	.word	0x40013400
 80099f0:	40014000 	.word	0x40014000
 80099f4:	40014400 	.word	0x40014400
 80099f8:	40014800 	.word	0x40014800

080099fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009a38:	b084      	sub	sp, #16
 8009a3a:	b480      	push	{r7}
 8009a3c:	b085      	sub	sp, #20
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	f107 001c 	add.w	r0, r7, #28
 8009a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009a4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009a50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009a52:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8009a56:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8009a5a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8009a5e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685a      	ldr	r2, [r3, #4]
 8009a6a:	4b07      	ldr	r3, [pc, #28]	; (8009a88 <SDMMC_Init+0x50>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	431a      	orrs	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	b004      	add	sp, #16
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	ffc02c00 	.word	0xffc02c00

08009a8c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b083      	sub	sp, #12
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f043 0203 	orr.w	r2, r3, #3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009adc:	2002      	movs	r0, #2
 8009ade:	f7f8 fc0f 	bl	8002300 <HAL_Delay>

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0303 	and.w	r3, r3, #3
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b26:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009b2c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009b32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <SDMMC_SendCommand+0x50>)
 8009b40:	4013      	ands	r3, r2
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	431a      	orrs	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	fffee0c0 	.word	0xfffee0c0

08009b5c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	b2db      	uxtb	r3, r3
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b085      	sub	sp, #20
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3314      	adds	r3, #20
 8009b84:	461a      	mov	r2, r3
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	4413      	add	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009bc2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009bc8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009bce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	431a      	orrs	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0

}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009c02:	2310      	movs	r3, #16
 8009c04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c16:	f107 0308 	add.w	r3, r7, #8
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff ff73 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c26:	2110      	movs	r1, #16
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fa7b 	bl	800a124 <SDMMC_GetCmdResp1>
 8009c2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c30:	69fb      	ldr	r3, [r7, #28]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3720      	adds	r7, #32
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b088      	sub	sp, #32
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009c48:	2311      	movs	r3, #17
 8009c4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c52:	2300      	movs	r3, #0
 8009c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c5c:	f107 0308 	add.w	r3, r7, #8
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7ff ff50 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c6c:	2111      	movs	r1, #17
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fa58 	bl	800a124 <SDMMC_GetCmdResp1>
 8009c74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c76:	69fb      	ldr	r3, [r7, #28]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3720      	adds	r7, #32
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009c8e:	2312      	movs	r3, #18
 8009c90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ca0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ca2:	f107 0308 	add.w	r3, r7, #8
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7ff ff2d 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb2:	2112      	movs	r1, #18
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fa35 	bl	800a124 <SDMMC_GetCmdResp1>
 8009cba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3720      	adds	r7, #32
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b088      	sub	sp, #32
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009cd4:	2318      	movs	r3, #24
 8009cd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ce8:	f107 0308 	add.w	r3, r7, #8
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7ff ff0a 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf8:	2118      	movs	r1, #24
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fa12 	bl	800a124 <SDMMC_GetCmdResp1>
 8009d00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d02:	69fb      	ldr	r3, [r7, #28]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3720      	adds	r7, #32
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009d1a:	2319      	movs	r3, #25
 8009d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d24:	2300      	movs	r3, #0
 8009d26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d2e:	f107 0308 	add.w	r3, r7, #8
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff fee7 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d3e:	2119      	movs	r1, #25
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f9ef 	bl	800a124 <SDMMC_GetCmdResp1>
 8009d46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d48:	69fb      	ldr	r3, [r7, #28]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3720      	adds	r7, #32
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b088      	sub	sp, #32
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009d60:	230c      	movs	r3, #12
 8009d62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d72:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d8c:	f107 0308 	add.w	r3, r7, #8
 8009d90:	4619      	mov	r1, r3
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7ff feb8 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009d98:	4a08      	ldr	r2, [pc, #32]	; (8009dbc <SDMMC_CmdStopTransfer+0x68>)
 8009d9a:	210c      	movs	r1, #12
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f9c1 	bl	800a124 <SDMMC_GetCmdResp1>
 8009da2:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009db0:	69fb      	ldr	r3, [r7, #28]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3720      	adds	r7, #32
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	05f5e100 	.word	0x05f5e100

08009dc0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08a      	sub	sp, #40	; 0x28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009dd0:	2307      	movs	r3, #7
 8009dd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dd8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009de2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009de4:	f107 0310 	add.w	r3, r7, #16
 8009de8:	4619      	mov	r1, r3
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f7ff fe8c 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df4:	2107      	movs	r1, #7
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f000 f994 	bl	800a124 <SDMMC_GetCmdResp1>
 8009dfc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3728      	adds	r7, #40	; 0x28
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b088      	sub	sp, #32
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009e14:	2300      	movs	r3, #0
 8009e16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e26:	f107 0308 	add.w	r3, r7, #8
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7ff fe6b 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fbb8 	bl	800a5a8 <SDMMC_GetCmdError>
 8009e38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e3a:	69fb      	ldr	r3, [r7, #28]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3720      	adds	r7, #32
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b088      	sub	sp, #32
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009e4c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009e50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009e52:	2308      	movs	r3, #8
 8009e54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e66:	f107 0308 	add.w	r3, r7, #8
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7ff fe4b 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fb4a 	bl	800a50c <SDMMC_GetCmdResp7>
 8009e78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e7a:	69fb      	ldr	r3, [r7, #28]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3720      	adds	r7, #32
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009e92:	2337      	movs	r3, #55	; 0x37
 8009e94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ea4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ea6:	f107 0308 	add.w	r3, r7, #8
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff fe2b 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eb6:	2137      	movs	r1, #55	; 0x37
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f933 	bl	800a124 <SDMMC_GetCmdResp1>
 8009ebe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ec0:	69fb      	ldr	r3, [r7, #28]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3720      	adds	r7, #32
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b088      	sub	sp, #32
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009ed8:	2329      	movs	r3, #41	; 0x29
 8009eda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ee0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eec:	f107 0308 	add.w	r3, r7, #8
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff fe08 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fa4f 	bl	800a39c <SDMMC_GetCmdResp3>
 8009efe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f00:	69fb      	ldr	r3, [r7, #28]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3720      	adds	r7, #32
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b088      	sub	sp, #32
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009f18:	2306      	movs	r3, #6
 8009f1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f22:	2300      	movs	r3, #0
 8009f24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f2c:	f107 0308 	add.w	r3, r7, #8
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff fde8 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f3c:	2106      	movs	r1, #6
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f8f0 	bl	800a124 <SDMMC_GetCmdResp1>
 8009f44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f46:	69fb      	ldr	r3, [r7, #28]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3720      	adds	r7, #32
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009f5c:	2333      	movs	r3, #51	; 0x33
 8009f5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f70:	f107 0308 	add.w	r3, r7, #8
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7ff fdc6 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f80:	2133      	movs	r1, #51	; 0x33
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f8ce 	bl	800a124 <SDMMC_GetCmdResp1>
 8009f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f8a:	69fb      	ldr	r3, [r7, #28]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3720      	adds	r7, #32
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009fa4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009faa:	2300      	movs	r3, #0
 8009fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fb4:	f107 0308 	add.w	r3, r7, #8
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7ff fda4 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f9a1 	bl	800a308 <SDMMC_GetCmdResp2>
 8009fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fc8:	69fb      	ldr	r3, [r7, #28]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3720      	adds	r7, #32
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b088      	sub	sp, #32
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009fe0:	2309      	movs	r3, #9
 8009fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009fe4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009fe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fea:	2300      	movs	r3, #0
 8009fec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ff2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ff4:	f107 0308 	add.w	r3, r7, #8
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff fd84 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f981 	bl	800a308 <SDMMC_GetCmdResp2>
 800a006:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a008:	69fb      	ldr	r3, [r7, #28]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3720      	adds	r7, #32
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b088      	sub	sp, #32
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a01c:	2300      	movs	r3, #0
 800a01e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a020:	2303      	movs	r3, #3
 800a022:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a024:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a02a:	2300      	movs	r3, #0
 800a02c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a02e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a032:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a034:	f107 0308 	add.w	r3, r7, #8
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7ff fd64 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	2103      	movs	r1, #3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f9e9 	bl	800a41c <SDMMC_GetCmdResp6>
 800a04a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a04c:	69fb      	ldr	r3, [r7, #28]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3720      	adds	r7, #32
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b088      	sub	sp, #32
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a064:	230d      	movs	r3, #13
 800a066:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a06c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a06e:	2300      	movs	r3, #0
 800a070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a076:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a078:	f107 0308 	add.w	r3, r7, #8
 800a07c:	4619      	mov	r1, r3
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7ff fd42 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a084:	f241 3288 	movw	r2, #5000	; 0x1388
 800a088:	210d      	movs	r1, #13
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f84a 	bl	800a124 <SDMMC_GetCmdResp1>
 800a090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a092:	69fb      	ldr	r3, [r7, #28]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3720      	adds	r7, #32
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b088      	sub	sp, #32
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a0a8:	230d      	movs	r3, #13
 800a0aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0bc:	f107 0308 	add.w	r3, r7, #8
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7ff fd20 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a0c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0cc:	210d      	movs	r1, #13
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f828 	bl	800a124 <SDMMC_GetCmdResp1>
 800a0d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0d6:	69fb      	ldr	r3, [r7, #28]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3720      	adds	r7, #32
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800a0ec:	230b      	movs	r3, #11
 800a0ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a100:	f107 0308 	add.w	r3, r7, #8
 800a104:	4619      	mov	r1, r3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7ff fcfe 	bl	8009b08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800a10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a110:	210b      	movs	r1, #11
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f806 	bl	800a124 <SDMMC_GetCmdResp1>
 800a118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a11a:	69fb      	ldr	r3, [r7, #28]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3720      	adds	r7, #32
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b088      	sub	sp, #32
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	460b      	mov	r3, r1
 800a12e:	607a      	str	r2, [r7, #4]
 800a130:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a132:	4b70      	ldr	r3, [pc, #448]	; (800a2f4 <SDMMC_GetCmdResp1+0x1d0>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a70      	ldr	r2, [pc, #448]	; (800a2f8 <SDMMC_GetCmdResp1+0x1d4>)
 800a138:	fba2 2303 	umull	r2, r3, r2, r3
 800a13c:	0a5a      	lsrs	r2, r3, #9
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	fb02 f303 	mul.w	r3, r2, r3
 800a144:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	1e5a      	subs	r2, r3, #1
 800a14a:	61fa      	str	r2, [r7, #28]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d102      	bne.n	800a156 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a154:	e0c9      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a15a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a15c:	69ba      	ldr	r2, [r7, #24]
 800a15e:	4b67      	ldr	r3, [pc, #412]	; (800a2fc <SDMMC_GetCmdResp1+0x1d8>)
 800a160:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a162:	2b00      	cmp	r3, #0
 800a164:	d0ef      	beq.n	800a146 <SDMMC_GetCmdResp1+0x22>
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1ea      	bne.n	800a146 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a174:	f003 0304 	and.w	r3, r3, #4
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d004      	beq.n	800a186 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2204      	movs	r2, #4
 800a180:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a182:	2304      	movs	r3, #4
 800a184:	e0b1      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d004      	beq.n	800a19c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2201      	movs	r2, #1
 800a196:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a198:	2301      	movs	r3, #1
 800a19a:	e0a6      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4a58      	ldr	r2, [pc, #352]	; (800a300 <SDMMC_GetCmdResp1+0x1dc>)
 800a1a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f7ff fcda 	bl	8009b5c <SDMMC_GetCommandResponse>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	7afb      	ldrb	r3, [r7, #11]
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d001      	beq.n	800a1b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e099      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f7ff fcdc 	bl	8009b76 <SDMMC_GetResponse>
 800a1be:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	4b50      	ldr	r3, [pc, #320]	; (800a304 <SDMMC_GetCmdResp1+0x1e0>)
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e08d      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	da02      	bge.n	800a1da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a1d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a1d8:	e087      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a1e4:	2340      	movs	r3, #64	; 0x40
 800a1e6:	e080      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a1f2:	2380      	movs	r3, #128	; 0x80
 800a1f4:	e079      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d002      	beq.n	800a206 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a200:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a204:	e071      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a210:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a214:	e069      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a224:	e061      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a230:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a234:	e059      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a244:	e051      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d002      	beq.n	800a256 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a254:	e049      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a260:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a264:	e041      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a274:	e039      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a284:	e031      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a290:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a294:	e029      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a2a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a2a4:	e021      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a2b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a2b4:	e019      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a2c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a2c4:	e011      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a2d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a2d4:	e009      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f003 0308 	and.w	r3, r3, #8
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d002      	beq.n	800a2e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a2e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a2e4:	e001      	b.n	800a2ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a2e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3720      	adds	r7, #32
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20000000 	.word	0x20000000
 800a2f8:	10624dd3 	.word	0x10624dd3
 800a2fc:	00200045 	.word	0x00200045
 800a300:	002000c5 	.word	0x002000c5
 800a304:	fdffe008 	.word	0xfdffe008

0800a308 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a310:	4b1f      	ldr	r3, [pc, #124]	; (800a390 <SDMMC_GetCmdResp2+0x88>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a1f      	ldr	r2, [pc, #124]	; (800a394 <SDMMC_GetCmdResp2+0x8c>)
 800a316:	fba2 2303 	umull	r2, r3, r2, r3
 800a31a:	0a5b      	lsrs	r3, r3, #9
 800a31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a320:	fb02 f303 	mul.w	r3, r2, r3
 800a324:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	1e5a      	subs	r2, r3, #1
 800a32a:	60fa      	str	r2, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a334:	e026      	b.n	800a384 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a33a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0ef      	beq.n	800a326 <SDMMC_GetCmdResp2+0x1e>
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1ea      	bne.n	800a326 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a354:	f003 0304 	and.w	r3, r3, #4
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d004      	beq.n	800a366 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2204      	movs	r2, #4
 800a360:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a362:	2304      	movs	r3, #4
 800a364:	e00e      	b.n	800a384 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d004      	beq.n	800a37c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a378:	2301      	movs	r3, #1
 800a37a:	e003      	b.n	800a384 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a06      	ldr	r2, [pc, #24]	; (800a398 <SDMMC_GetCmdResp2+0x90>)
 800a380:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	20000000 	.word	0x20000000
 800a394:	10624dd3 	.word	0x10624dd3
 800a398:	002000c5 	.word	0x002000c5

0800a39c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3a4:	4b1a      	ldr	r3, [pc, #104]	; (800a410 <SDMMC_GetCmdResp3+0x74>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1a      	ldr	r2, [pc, #104]	; (800a414 <SDMMC_GetCmdResp3+0x78>)
 800a3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ae:	0a5b      	lsrs	r3, r3, #9
 800a3b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3b4:	fb02 f303 	mul.w	r3, r2, r3
 800a3b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	1e5a      	subs	r2, r3, #1
 800a3be:	60fa      	str	r2, [r7, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d102      	bne.n	800a3ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3c8:	e01b      	b.n	800a402 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0ef      	beq.n	800a3ba <SDMMC_GetCmdResp3+0x1e>
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1ea      	bne.n	800a3ba <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d004      	beq.n	800a3fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2204      	movs	r2, #4
 800a3f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3f6:	2304      	movs	r3, #4
 800a3f8:	e003      	b.n	800a402 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a06      	ldr	r2, [pc, #24]	; (800a418 <SDMMC_GetCmdResp3+0x7c>)
 800a3fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	20000000 	.word	0x20000000
 800a414:	10624dd3 	.word	0x10624dd3
 800a418:	002000c5 	.word	0x002000c5

0800a41c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	460b      	mov	r3, r1
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a42a:	4b35      	ldr	r3, [pc, #212]	; (800a500 <SDMMC_GetCmdResp6+0xe4>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a35      	ldr	r2, [pc, #212]	; (800a504 <SDMMC_GetCmdResp6+0xe8>)
 800a430:	fba2 2303 	umull	r2, r3, r2, r3
 800a434:	0a5b      	lsrs	r3, r3, #9
 800a436:	f241 3288 	movw	r2, #5000	; 0x1388
 800a43a:	fb02 f303 	mul.w	r3, r2, r3
 800a43e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	1e5a      	subs	r2, r3, #1
 800a444:	61fa      	str	r2, [r7, #28]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d102      	bne.n	800a450 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a44a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a44e:	e052      	b.n	800a4f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a454:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0ef      	beq.n	800a440 <SDMMC_GetCmdResp6+0x24>
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1ea      	bne.n	800a440 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a46e:	f003 0304 	and.w	r3, r3, #4
 800a472:	2b00      	cmp	r3, #0
 800a474:	d004      	beq.n	800a480 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2204      	movs	r2, #4
 800a47a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a47c:	2304      	movs	r3, #4
 800a47e:	e03a      	b.n	800a4f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a484:	f003 0301 	and.w	r3, r3, #1
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d004      	beq.n	800a496 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a492:	2301      	movs	r3, #1
 800a494:	e02f      	b.n	800a4f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f7ff fb60 	bl	8009b5c <SDMMC_GetCommandResponse>
 800a49c:	4603      	mov	r3, r0
 800a49e:	461a      	mov	r2, r3
 800a4a0:	7afb      	ldrb	r3, [r7, #11]
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d001      	beq.n	800a4aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e025      	b.n	800a4f6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4a16      	ldr	r2, [pc, #88]	; (800a508 <SDMMC_GetCmdResp6+0xec>)
 800a4ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f7ff fb5f 	bl	8009b76 <SDMMC_GetResponse>
 800a4b8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d106      	bne.n	800a4d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	0c1b      	lsrs	r3, r3, #16
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e011      	b.n	800a4f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4e0:	e009      	b.n	800a4f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a4ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4f0:	e001      	b.n	800a4f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a4f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3720      	adds	r7, #32
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20000000 	.word	0x20000000
 800a504:	10624dd3 	.word	0x10624dd3
 800a508:	002000c5 	.word	0x002000c5

0800a50c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a514:	4b22      	ldr	r3, [pc, #136]	; (800a5a0 <SDMMC_GetCmdResp7+0x94>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a22      	ldr	r2, [pc, #136]	; (800a5a4 <SDMMC_GetCmdResp7+0x98>)
 800a51a:	fba2 2303 	umull	r2, r3, r2, r3
 800a51e:	0a5b      	lsrs	r3, r3, #9
 800a520:	f241 3288 	movw	r2, #5000	; 0x1388
 800a524:	fb02 f303 	mul.w	r3, r2, r3
 800a528:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	1e5a      	subs	r2, r3, #1
 800a52e:	60fa      	str	r2, [r7, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d102      	bne.n	800a53a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a534:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a538:	e02c      	b.n	800a594 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a53e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0ef      	beq.n	800a52a <SDMMC_GetCmdResp7+0x1e>
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1ea      	bne.n	800a52a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a558:	f003 0304 	and.w	r3, r3, #4
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d004      	beq.n	800a56a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2204      	movs	r2, #4
 800a564:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a566:	2304      	movs	r3, #4
 800a568:	e014      	b.n	800a594 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e009      	b.n	800a594 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2240      	movs	r2, #64	; 0x40
 800a590:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a592:	2300      	movs	r3, #0

}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	20000000 	.word	0x20000000
 800a5a4:	10624dd3 	.word	0x10624dd3

0800a5a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5b0:	4b11      	ldr	r3, [pc, #68]	; (800a5f8 <SDMMC_GetCmdError+0x50>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a11      	ldr	r2, [pc, #68]	; (800a5fc <SDMMC_GetCmdError+0x54>)
 800a5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ba:	0a5b      	lsrs	r3, r3, #9
 800a5bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5c0:	fb02 f303 	mul.w	r3, r2, r3
 800a5c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	1e5a      	subs	r2, r3, #1
 800a5ca:	60fa      	str	r2, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d102      	bne.n	800a5d6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5d4:	e009      	b.n	800a5ea <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d0f1      	beq.n	800a5c6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a06      	ldr	r2, [pc, #24]	; (800a600 <SDMMC_GetCmdError+0x58>)
 800a5e6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	20000000 	.word	0x20000000
 800a5fc:	10624dd3 	.word	0x10624dd3
 800a600:	002000c5 	.word	0x002000c5

0800a604 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a608:	4904      	ldr	r1, [pc, #16]	; (800a61c <MX_FATFS_Init+0x18>)
 800a60a:	4805      	ldr	r0, [pc, #20]	; (800a620 <MX_FATFS_Init+0x1c>)
 800a60c:	f003 f8ea 	bl	800d7e4 <FATFS_LinkDriver>
 800a610:	4603      	mov	r3, r0
 800a612:	461a      	mov	r2, r3
 800a614:	4b03      	ldr	r3, [pc, #12]	; (800a624 <MX_FATFS_Init+0x20>)
 800a616:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a618:	bf00      	nop
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	200008a0 	.word	0x200008a0
 800a620:	080162bc 	.word	0x080162bc
 800a624:	2000089c 	.word	0x2000089c

0800a628 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a62c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a62e:	4618      	mov	r0, r3
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a642:	f000 f885 	bl	800a750 <BSP_SD_IsDetected>
 800a646:	4603      	mov	r3, r0
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d001      	beq.n	800a650 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a64c:	2302      	movs	r3, #2
 800a64e:	e012      	b.n	800a676 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a650:	480b      	ldr	r0, [pc, #44]	; (800a680 <BSP_SD_Init+0x48>)
 800a652:	f7fd fa2b 	bl	8007aac <HAL_SD_Init>
 800a656:	4603      	mov	r3, r0
 800a658:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d109      	bne.n	800a674 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a664:	4806      	ldr	r0, [pc, #24]	; (800a680 <BSP_SD_Init+0x48>)
 800a666:	f7fe f8df 	bl	8008828 <HAL_SD_ConfigWideBusOperation>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a674:	79fb      	ldrb	r3, [r7, #7]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	200003bc 	.word	0x200003bc

0800a684 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	68f9      	ldr	r1, [r7, #12]
 800a69a:	4806      	ldr	r0, [pc, #24]	; (800a6b4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a69c:	f7fd fb2e 	bl	8007cfc <HAL_SD_ReadBlocks_DMA>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3718      	adds	r7, #24
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	200003bc 	.word	0x200003bc

0800a6b8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	68f9      	ldr	r1, [r7, #12]
 800a6ce:	4806      	ldr	r0, [pc, #24]	; (800a6e8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a6d0:	f7fd fbbc 	bl	8007e4c <HAL_SD_WriteBlocks_DMA>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a6de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	200003bc 	.word	0x200003bc

0800a6ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a6f0:	4805      	ldr	r0, [pc, #20]	; (800a708 <BSP_SD_GetCardState+0x1c>)
 800a6f2:	f7fe f9ad 	bl	8008a50 <HAL_SD_GetCardState>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	bf14      	ite	ne
 800a6fc:	2301      	movne	r3, #1
 800a6fe:	2300      	moveq	r3, #0
 800a700:	b2db      	uxtb	r3, r3
}
 800a702:	4618      	mov	r0, r3
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	200003bc 	.word	0x200003bc

0800a70c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a714:	6879      	ldr	r1, [r7, #4]
 800a716:	4803      	ldr	r0, [pc, #12]	; (800a724 <BSP_SD_GetCardInfo+0x18>)
 800a718:	f7fe f85a 	bl	80087d0 <HAL_SD_GetCardInfo>
}
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	200003bc 	.word	0x200003bc

0800a728 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a730:	f000 f9ac 	bl	800aa8c <BSP_SD_WriteCpltCallback>
}
 800a734:	bf00      	nop
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a744:	f000 f9b4 	bl	800aab0 <BSP_SD_ReadCpltCallback>
}
 800a748:	bf00      	nop
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a756:	2301      	movs	r3, #1
 800a758:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a75a:	f000 f80b 	bl	800a774 <BSP_PlatformIsDetected>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a764:	2300      	movs	r3, #0
 800a766:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a768:	79fb      	ldrb	r3, [r7, #7]
 800a76a:	b2db      	uxtb	r3, r3
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a77a:	2301      	movs	r3, #1
 800a77c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a77e:	2180      	movs	r1, #128	; 0x80
 800a780:	4806      	ldr	r0, [pc, #24]	; (800a79c <BSP_PlatformIsDetected+0x28>)
 800a782:	f7fa fbdf 	bl	8004f44 <HAL_GPIO_ReadPin>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a78c:	2300      	movs	r3, #0
 800a78e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a790:	79fb      	ldrb	r3, [r7, #7]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	48000800 	.word	0x48000800

0800a7a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a7a8:	f003 f920 	bl	800d9ec <osKernelGetTickCount>
 800a7ac:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a7ae:	e006      	b.n	800a7be <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a7b0:	f7ff ff9c 	bl	800a6ec <BSP_SD_GetCardState>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e009      	b.n	800a7d2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a7be:	f003 f915 	bl	800d9ec <osKernelGetTickCount>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d8f0      	bhi.n	800a7b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a7ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a7e6:	4b0b      	ldr	r3, [pc, #44]	; (800a814 <SD_CheckStatus+0x38>)
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a7ec:	f7ff ff7e 	bl	800a6ec <BSP_SD_GetCardState>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d107      	bne.n	800a806 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a7f6:	4b07      	ldr	r3, [pc, #28]	; (800a814 <SD_CheckStatus+0x38>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	f023 0301 	bic.w	r3, r3, #1
 800a800:	b2da      	uxtb	r2, r3
 800a802:	4b04      	ldr	r3, [pc, #16]	; (800a814 <SD_CheckStatus+0x38>)
 800a804:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a806:	4b03      	ldr	r3, [pc, #12]	; (800a814 <SD_CheckStatus+0x38>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	b2db      	uxtb	r3, r3
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	20000009 	.word	0x20000009

0800a818 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	4603      	mov	r3, r0
 800a820:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a822:	4b1c      	ldr	r3, [pc, #112]	; (800a894 <SD_initialize+0x7c>)
 800a824:	2201      	movs	r2, #1
 800a826:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a828:	f003 f898 	bl	800d95c <osKernelGetState>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d129      	bne.n	800a886 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a832:	f7ff ff01 	bl	800a638 <BSP_SD_Init>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d107      	bne.n	800a84c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	4618      	mov	r0, r3
 800a840:	f7ff ffcc 	bl	800a7dc <SD_CheckStatus>
 800a844:	4603      	mov	r3, r0
 800a846:	461a      	mov	r2, r3
 800a848:	4b12      	ldr	r3, [pc, #72]	; (800a894 <SD_initialize+0x7c>)
 800a84a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a84c:	4b11      	ldr	r3, [pc, #68]	; (800a894 <SD_initialize+0x7c>)
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b01      	cmp	r3, #1
 800a854:	d017      	beq.n	800a886 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800a856:	4b10      	ldr	r3, [pc, #64]	; (800a898 <SD_initialize+0x80>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d107      	bne.n	800a86e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800a85e:	2200      	movs	r2, #0
 800a860:	2102      	movs	r1, #2
 800a862:	200a      	movs	r0, #10
 800a864:	f003 fc3e 	bl	800e0e4 <osMessageQueueNew>
 800a868:	4603      	mov	r3, r0
 800a86a:	4a0b      	ldr	r2, [pc, #44]	; (800a898 <SD_initialize+0x80>)
 800a86c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800a86e:	4b0a      	ldr	r3, [pc, #40]	; (800a898 <SD_initialize+0x80>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d107      	bne.n	800a886 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800a876:	4b07      	ldr	r3, [pc, #28]	; (800a894 <SD_initialize+0x7c>)
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	f043 0301 	orr.w	r3, r3, #1
 800a880:	b2da      	uxtb	r2, r3
 800a882:	4b04      	ldr	r3, [pc, #16]	; (800a894 <SD_initialize+0x7c>)
 800a884:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a886:	4b03      	ldr	r3, [pc, #12]	; (800a894 <SD_initialize+0x7c>)
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	b2db      	uxtb	r3, r3
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	20000009 	.word	0x20000009
 800a898:	20000d08 	.word	0x20000d08

0800a89c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff ff97 	bl	800a7dc <SD_CheckStatus>
 800a8ae:	4603      	mov	r3, r0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b088      	sub	sp, #32
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a8cc:	f247 5030 	movw	r0, #30000	; 0x7530
 800a8d0:	f7ff ff66 	bl	800a7a0 <SD_CheckStatusWithTimeout>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	da01      	bge.n	800a8de <SD_read+0x26>
  {
    return res;
 800a8da:	7ffb      	ldrb	r3, [r7, #31]
 800a8dc:	e02f      	b.n	800a93e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	6879      	ldr	r1, [r7, #4]
 800a8e2:	68b8      	ldr	r0, [r7, #8]
 800a8e4:	f7ff fece 	bl	800a684 <BSP_SD_ReadBlocks_DMA>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800a8ec:	7fbb      	ldrb	r3, [r7, #30]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d124      	bne.n	800a93c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a8f2:	4b15      	ldr	r3, [pc, #84]	; (800a948 <SD_read+0x90>)
 800a8f4:	6818      	ldr	r0, [r3, #0]
 800a8f6:	f107 0112 	add.w	r1, r7, #18
 800a8fa:	f247 5330 	movw	r3, #30000	; 0x7530
 800a8fe:	2200      	movs	r2, #0
 800a900:	f003 fcc4 	bl	800e28c <osMessageQueueGet>
 800a904:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d117      	bne.n	800a93c <SD_read+0x84>
 800a90c:	8a7b      	ldrh	r3, [r7, #18]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d114      	bne.n	800a93c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800a912:	f003 f86b 	bl	800d9ec <osKernelGetTickCount>
 800a916:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a918:	e007      	b.n	800a92a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a91a:	f7ff fee7 	bl	800a6ec <BSP_SD_GetCardState>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d102      	bne.n	800a92a <SD_read+0x72>
              {
                res = RES_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a928:	e008      	b.n	800a93c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a92a:	f003 f85f 	bl	800d9ec <osKernelGetTickCount>
 800a92e:	4602      	mov	r2, r0
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	f247 522f 	movw	r2, #29999	; 0x752f
 800a938:	4293      	cmp	r3, r2
 800a93a:	d9ee      	bls.n	800a91a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a93c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3720      	adds	r7, #32
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	20000d08 	.word	0x20000d08

0800a94c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b088      	sub	sp, #32
 800a950:	af00      	add	r7, sp, #0
 800a952:	60b9      	str	r1, [r7, #8]
 800a954:	607a      	str	r2, [r7, #4]
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	4603      	mov	r3, r0
 800a95a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a960:	f247 5030 	movw	r0, #30000	; 0x7530
 800a964:	f7ff ff1c 	bl	800a7a0 <SD_CheckStatusWithTimeout>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	da01      	bge.n	800a972 <SD_write+0x26>
  {
    return res;
 800a96e:	7ffb      	ldrb	r3, [r7, #31]
 800a970:	e02d      	b.n	800a9ce <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	6879      	ldr	r1, [r7, #4]
 800a976:	68b8      	ldr	r0, [r7, #8]
 800a978:	f7ff fe9e 	bl	800a6b8 <BSP_SD_WriteBlocks_DMA>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d124      	bne.n	800a9cc <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a982:	4b15      	ldr	r3, [pc, #84]	; (800a9d8 <SD_write+0x8c>)
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	f107 0112 	add.w	r1, r7, #18
 800a98a:	f247 5330 	movw	r3, #30000	; 0x7530
 800a98e:	2200      	movs	r2, #0
 800a990:	f003 fc7c 	bl	800e28c <osMessageQueueGet>
 800a994:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d117      	bne.n	800a9cc <SD_write+0x80>
 800a99c:	8a7b      	ldrh	r3, [r7, #18]
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d114      	bne.n	800a9cc <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800a9a2:	f003 f823 	bl	800d9ec <osKernelGetTickCount>
 800a9a6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a9a8:	e007      	b.n	800a9ba <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a9aa:	f7ff fe9f 	bl	800a6ec <BSP_SD_GetCardState>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <SD_write+0x6e>
          {
            res = RES_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	77fb      	strb	r3, [r7, #31]
            break;
 800a9b8:	e008      	b.n	800a9cc <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a9ba:	f003 f817 	bl	800d9ec <osKernelGetTickCount>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	f247 522f 	movw	r2, #29999	; 0x752f
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d9ee      	bls.n	800a9aa <SD_write+0x5e>
    }

  }
#endif

  return res;
 800a9cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3720      	adds	r7, #32
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	20000d08 	.word	0x20000d08

0800a9dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08c      	sub	sp, #48	; 0x30
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	603a      	str	r2, [r7, #0]
 800a9e6:	71fb      	strb	r3, [r7, #7]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a9f2:	4b25      	ldr	r3, [pc, #148]	; (800aa88 <SD_ioctl+0xac>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <SD_ioctl+0x28>
 800aa00:	2303      	movs	r3, #3
 800aa02:	e03c      	b.n	800aa7e <SD_ioctl+0xa2>

  switch (cmd)
 800aa04:	79bb      	ldrb	r3, [r7, #6]
 800aa06:	2b03      	cmp	r3, #3
 800aa08:	d834      	bhi.n	800aa74 <SD_ioctl+0x98>
 800aa0a:	a201      	add	r2, pc, #4	; (adr r2, 800aa10 <SD_ioctl+0x34>)
 800aa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa10:	0800aa21 	.word	0x0800aa21
 800aa14:	0800aa29 	.word	0x0800aa29
 800aa18:	0800aa41 	.word	0x0800aa41
 800aa1c:	0800aa5b 	.word	0x0800aa5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aa26:	e028      	b.n	800aa7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800aa28:	f107 0308 	add.w	r3, r7, #8
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff fe6d 	bl	800a70c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800aa32:	6a3a      	ldr	r2, [r7, #32]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aa3e:	e01c      	b.n	800aa7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aa40:	f107 0308 	add.w	r3, r7, #8
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7ff fe61 	bl	800a70c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aa58:	e00f      	b.n	800aa7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aa5a:	f107 0308 	add.w	r3, r7, #8
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7ff fe54 	bl	800a70c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	0a5a      	lsrs	r2, r3, #9
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800aa72:	e002      	b.n	800aa7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800aa74:	2304      	movs	r3, #4
 800aa76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800aa7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3730      	adds	r7, #48	; 0x30
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20000009 	.word	0x20000009

0800aa8c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800aa92:	2302      	movs	r3, #2
 800aa94:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800aa96:	4b05      	ldr	r3, [pc, #20]	; (800aaac <BSP_SD_WriteCpltCallback+0x20>)
 800aa98:	6818      	ldr	r0, [r3, #0]
 800aa9a:	1db9      	adds	r1, r7, #6
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f003 fb94 	bl	800e1cc <osMessageQueuePut>
#endif
}
 800aaa4:	bf00      	nop
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	20000d08 	.word	0x20000d08

0800aab0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800aab6:	2301      	movs	r3, #1
 800aab8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800aaba:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <BSP_SD_ReadCpltCallback+0x20>)
 800aabc:	6818      	ldr	r0, [r3, #0]
 800aabe:	1db9      	adds	r1, r7, #6
 800aac0:	2300      	movs	r3, #0
 800aac2:	2200      	movs	r2, #0
 800aac4:	f003 fb82 	bl	800e1cc <osMessageQueuePut>
#endif
}
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	20000d08 	.word	0x20000d08

0800aad4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	4603      	mov	r3, r0
 800aadc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800aade:	79fb      	ldrb	r3, [r7, #7]
 800aae0:	4a08      	ldr	r2, [pc, #32]	; (800ab04 <disk_status+0x30>)
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	79fa      	ldrb	r2, [r7, #7]
 800aaec:	4905      	ldr	r1, [pc, #20]	; (800ab04 <disk_status+0x30>)
 800aaee:	440a      	add	r2, r1
 800aaf0:	7a12      	ldrb	r2, [r2, #8]
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	4798      	blx	r3
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20000d34 	.word	0x20000d34

0800ab08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ab16:	79fb      	ldrb	r3, [r7, #7]
 800ab18:	4a0d      	ldr	r2, [pc, #52]	; (800ab50 <disk_initialize+0x48>)
 800ab1a:	5cd3      	ldrb	r3, [r2, r3]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d111      	bne.n	800ab44 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ab20:	79fb      	ldrb	r3, [r7, #7]
 800ab22:	4a0b      	ldr	r2, [pc, #44]	; (800ab50 <disk_initialize+0x48>)
 800ab24:	2101      	movs	r1, #1
 800ab26:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab28:	79fb      	ldrb	r3, [r7, #7]
 800ab2a:	4a09      	ldr	r2, [pc, #36]	; (800ab50 <disk_initialize+0x48>)
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4413      	add	r3, r2
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	79fa      	ldrb	r2, [r7, #7]
 800ab36:	4906      	ldr	r1, [pc, #24]	; (800ab50 <disk_initialize+0x48>)
 800ab38:	440a      	add	r2, r1
 800ab3a:	7a12      	ldrb	r2, [r2, #8]
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	4798      	blx	r3
 800ab40:	4603      	mov	r3, r0
 800ab42:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20000d34 	.word	0x20000d34

0800ab54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ab54:	b590      	push	{r4, r7, lr}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60b9      	str	r1, [r7, #8]
 800ab5c:	607a      	str	r2, [r7, #4]
 800ab5e:	603b      	str	r3, [r7, #0]
 800ab60:	4603      	mov	r3, r0
 800ab62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ab64:	7bfb      	ldrb	r3, [r7, #15]
 800ab66:	4a0a      	ldr	r2, [pc, #40]	; (800ab90 <disk_read+0x3c>)
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	689c      	ldr	r4, [r3, #8]
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
 800ab72:	4a07      	ldr	r2, [pc, #28]	; (800ab90 <disk_read+0x3c>)
 800ab74:	4413      	add	r3, r2
 800ab76:	7a18      	ldrb	r0, [r3, #8]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	68b9      	ldr	r1, [r7, #8]
 800ab7e:	47a0      	blx	r4
 800ab80:	4603      	mov	r3, r0
 800ab82:	75fb      	strb	r3, [r7, #23]
  return res;
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	371c      	adds	r7, #28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd90      	pop	{r4, r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	20000d34 	.word	0x20000d34

0800ab94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ab94:	b590      	push	{r4, r7, lr}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60b9      	str	r1, [r7, #8]
 800ab9c:	607a      	str	r2, [r7, #4]
 800ab9e:	603b      	str	r3, [r7, #0]
 800aba0:	4603      	mov	r3, r0
 800aba2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
 800aba6:	4a0a      	ldr	r2, [pc, #40]	; (800abd0 <disk_write+0x3c>)
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	68dc      	ldr	r4, [r3, #12]
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
 800abb2:	4a07      	ldr	r2, [pc, #28]	; (800abd0 <disk_write+0x3c>)
 800abb4:	4413      	add	r3, r2
 800abb6:	7a18      	ldrb	r0, [r3, #8]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	68b9      	ldr	r1, [r7, #8]
 800abbe:	47a0      	blx	r4
 800abc0:	4603      	mov	r3, r0
 800abc2:	75fb      	strb	r3, [r7, #23]
  return res;
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	371c      	adds	r7, #28
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd90      	pop	{r4, r7, pc}
 800abce:	bf00      	nop
 800abd0:	20000d34 	.word	0x20000d34

0800abd4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	603a      	str	r2, [r7, #0]
 800abde:	71fb      	strb	r3, [r7, #7]
 800abe0:	460b      	mov	r3, r1
 800abe2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800abe4:	79fb      	ldrb	r3, [r7, #7]
 800abe6:	4a09      	ldr	r2, [pc, #36]	; (800ac0c <disk_ioctl+0x38>)
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4413      	add	r3, r2
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	79fa      	ldrb	r2, [r7, #7]
 800abf2:	4906      	ldr	r1, [pc, #24]	; (800ac0c <disk_ioctl+0x38>)
 800abf4:	440a      	add	r2, r1
 800abf6:	7a10      	ldrb	r0, [r2, #8]
 800abf8:	79b9      	ldrb	r1, [r7, #6]
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	4798      	blx	r3
 800abfe:	4603      	mov	r3, r0
 800ac00:	73fb      	strb	r3, [r7, #15]
  return res;
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	20000d34 	.word	0x20000d34

0800ac10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ac20:	89fb      	ldrh	r3, [r7, #14]
 800ac22:	021b      	lsls	r3, r3, #8
 800ac24:	b21a      	sxth	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	b21b      	sxth	r3, r3
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	b21b      	sxth	r3, r3
 800ac30:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ac32:	89fb      	ldrh	r3, [r7, #14]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3714      	adds	r7, #20
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3303      	adds	r3, #3
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	021b      	lsls	r3, r3, #8
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	3202      	adds	r2, #2
 800ac58:	7812      	ldrb	r2, [r2, #0]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	021b      	lsls	r3, r3, #8
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	3201      	adds	r2, #1
 800ac66:	7812      	ldrb	r2, [r2, #0]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	021b      	lsls	r3, r3, #8
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	7812      	ldrb	r2, [r2, #0]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]
	return rv;
 800ac78:	68fb      	ldr	r3, [r7, #12]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ac86:	b480      	push	{r7}
 800ac88:	b083      	sub	sp, #12
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	460b      	mov	r3, r1
 800ac90:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	1c5a      	adds	r2, r3, #1
 800ac96:	607a      	str	r2, [r7, #4]
 800ac98:	887a      	ldrh	r2, [r7, #2]
 800ac9a:	b2d2      	uxtb	r2, r2
 800ac9c:	701a      	strb	r2, [r3, #0]
 800ac9e:	887b      	ldrh	r3, [r7, #2]
 800aca0:	0a1b      	lsrs	r3, r3, #8
 800aca2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	1c5a      	adds	r2, r3, #1
 800aca8:	607a      	str	r2, [r7, #4]
 800acaa:	887a      	ldrh	r2, [r7, #2]
 800acac:	b2d2      	uxtb	r2, r2
 800acae:	701a      	strb	r2, [r3, #0]
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	b2d2      	uxtb	r2, r2
 800acd0:	701a      	strb	r2, [r3, #0]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	0a1b      	lsrs	r3, r3, #8
 800acd6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	607a      	str	r2, [r7, #4]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	b2d2      	uxtb	r2, r2
 800ace2:	701a      	strb	r2, [r3, #0]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	0a1b      	lsrs	r3, r3, #8
 800ace8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	607a      	str	r2, [r7, #4]
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	b2d2      	uxtb	r2, r2
 800acf4:	701a      	strb	r2, [r3, #0]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	0a1b      	lsrs	r3, r3, #8
 800acfa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	607a      	str	r2, [r7, #4]
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	b2d2      	uxtb	r2, r2
 800ad06:	701a      	strb	r2, [r3, #0]
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad14:	b480      	push	{r7}
 800ad16:	b087      	sub	sp, #28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00d      	beq.n	800ad4a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	1c53      	adds	r3, r2, #1
 800ad32:	613b      	str	r3, [r7, #16]
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	1c59      	adds	r1, r3, #1
 800ad38:	6179      	str	r1, [r7, #20]
 800ad3a:	7812      	ldrb	r2, [r2, #0]
 800ad3c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	607b      	str	r3, [r7, #4]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1f1      	bne.n	800ad2e <mem_cpy+0x1a>
	}
}
 800ad4a:	bf00      	nop
 800ad4c:	371c      	adds	r7, #28
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr

0800ad56 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ad56:	b480      	push	{r7}
 800ad58:	b087      	sub	sp, #28
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	617a      	str	r2, [r7, #20]
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	b2d2      	uxtb	r2, r2
 800ad70:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	607b      	str	r3, [r7, #4]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1f3      	bne.n	800ad66 <mem_set+0x10>
}
 800ad7e:	bf00      	nop
 800ad80:	bf00      	nop
 800ad82:	371c      	adds	r7, #28
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ad8c:	b480      	push	{r7}
 800ad8e:	b089      	sub	sp, #36	; 0x24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	61fb      	str	r3, [r7, #28]
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	61fa      	str	r2, [r7, #28]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	4619      	mov	r1, r3
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	61ba      	str	r2, [r7, #24]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	1acb      	subs	r3, r1, r3
 800adb8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	607b      	str	r3, [r7, #4]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d002      	beq.n	800adcc <mem_cmp+0x40>
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d0eb      	beq.n	800ada4 <mem_cmp+0x18>

	return r;
 800adcc:	697b      	ldr	r3, [r7, #20]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3724      	adds	r7, #36	; 0x24
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800adda:	b480      	push	{r7}
 800addc:	b083      	sub	sp, #12
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ade4:	e002      	b.n	800adec <chk_chr+0x12>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	3301      	adds	r3, #1
 800adea:	607b      	str	r3, [r7, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d005      	beq.n	800ae00 <chk_chr+0x26>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	461a      	mov	r2, r3
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d1f2      	bne.n	800ade6 <chk_chr+0xc>
	return *str;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	781b      	ldrb	r3, [r3, #0]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d009      	beq.n	800ae32 <lock_fs+0x22>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f002 fd12 	bl	800d84c <ff_req_grant>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <lock_fs+0x22>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e000      	b.n	800ae34 <lock_fs+0x24>
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00d      	beq.n	800ae6a <unlock_fs+0x2e>
 800ae4e:	78fb      	ldrb	r3, [r7, #3]
 800ae50:	2b0c      	cmp	r3, #12
 800ae52:	d00a      	beq.n	800ae6a <unlock_fs+0x2e>
 800ae54:	78fb      	ldrb	r3, [r7, #3]
 800ae56:	2b0b      	cmp	r3, #11
 800ae58:	d007      	beq.n	800ae6a <unlock_fs+0x2e>
 800ae5a:	78fb      	ldrb	r3, [r7, #3]
 800ae5c:	2b0f      	cmp	r3, #15
 800ae5e:	d004      	beq.n	800ae6a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f002 fd06 	bl	800d876 <ff_rel_grant>
	}
}
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
	...

0800ae74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60bb      	str	r3, [r7, #8]
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	e029      	b.n	800aedc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ae88:	4a27      	ldr	r2, [pc, #156]	; (800af28 <chk_lock+0xb4>)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	011b      	lsls	r3, r3, #4
 800ae8e:	4413      	add	r3, r2
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d01d      	beq.n	800aed2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae96:	4a24      	ldr	r2, [pc, #144]	; (800af28 <chk_lock+0xb4>)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	011b      	lsls	r3, r3, #4
 800ae9c:	4413      	add	r3, r2
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d116      	bne.n	800aed6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aea8:	4a1f      	ldr	r2, [pc, #124]	; (800af28 <chk_lock+0xb4>)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	011b      	lsls	r3, r3, #4
 800aeae:	4413      	add	r3, r2
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d10c      	bne.n	800aed6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aebc:	4a1a      	ldr	r2, [pc, #104]	; (800af28 <chk_lock+0xb4>)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	011b      	lsls	r3, r3, #4
 800aec2:	4413      	add	r3, r2
 800aec4:	3308      	adds	r3, #8
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aecc:	429a      	cmp	r2, r3
 800aece:	d102      	bne.n	800aed6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aed0:	e007      	b.n	800aee2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aed2:	2301      	movs	r3, #1
 800aed4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3301      	adds	r3, #1
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d9d2      	bls.n	800ae88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d109      	bne.n	800aefc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d102      	bne.n	800aef4 <chk_lock+0x80>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d101      	bne.n	800aef8 <chk_lock+0x84>
 800aef4:	2300      	movs	r3, #0
 800aef6:	e010      	b.n	800af1a <chk_lock+0xa6>
 800aef8:	2312      	movs	r3, #18
 800aefa:	e00e      	b.n	800af1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d108      	bne.n	800af14 <chk_lock+0xa0>
 800af02:	4a09      	ldr	r2, [pc, #36]	; (800af28 <chk_lock+0xb4>)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	011b      	lsls	r3, r3, #4
 800af08:	4413      	add	r3, r2
 800af0a:	330c      	adds	r3, #12
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af12:	d101      	bne.n	800af18 <chk_lock+0xa4>
 800af14:	2310      	movs	r3, #16
 800af16:	e000      	b.n	800af1a <chk_lock+0xa6>
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	20000d14 	.word	0x20000d14

0800af2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af32:	2300      	movs	r3, #0
 800af34:	607b      	str	r3, [r7, #4]
 800af36:	e002      	b.n	800af3e <enq_lock+0x12>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3301      	adds	r3, #1
 800af3c:	607b      	str	r3, [r7, #4]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d806      	bhi.n	800af52 <enq_lock+0x26>
 800af44:	4a09      	ldr	r2, [pc, #36]	; (800af6c <enq_lock+0x40>)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	011b      	lsls	r3, r3, #4
 800af4a:	4413      	add	r3, r2
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1f2      	bne.n	800af38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b02      	cmp	r3, #2
 800af56:	bf14      	ite	ne
 800af58:	2301      	movne	r3, #1
 800af5a:	2300      	moveq	r3, #0
 800af5c:	b2db      	uxtb	r3, r3
}
 800af5e:	4618      	mov	r0, r3
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	20000d14 	.word	0x20000d14

0800af70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af7a:	2300      	movs	r3, #0
 800af7c:	60fb      	str	r3, [r7, #12]
 800af7e:	e01f      	b.n	800afc0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800af80:	4a41      	ldr	r2, [pc, #260]	; (800b088 <inc_lock+0x118>)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	011b      	lsls	r3, r3, #4
 800af86:	4413      	add	r3, r2
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d113      	bne.n	800afba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800af92:	4a3d      	ldr	r2, [pc, #244]	; (800b088 <inc_lock+0x118>)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	011b      	lsls	r3, r3, #4
 800af98:	4413      	add	r3, r2
 800af9a:	3304      	adds	r3, #4
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d109      	bne.n	800afba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800afa6:	4a38      	ldr	r2, [pc, #224]	; (800b088 <inc_lock+0x118>)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	011b      	lsls	r3, r3, #4
 800afac:	4413      	add	r3, r2
 800afae:	3308      	adds	r3, #8
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d006      	beq.n	800afc8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d9dc      	bls.n	800af80 <inc_lock+0x10>
 800afc6:	e000      	b.n	800afca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800afc8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d132      	bne.n	800b036 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	e002      	b.n	800afdc <inc_lock+0x6c>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3301      	adds	r3, #1
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d806      	bhi.n	800aff0 <inc_lock+0x80>
 800afe2:	4a29      	ldr	r2, [pc, #164]	; (800b088 <inc_lock+0x118>)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	011b      	lsls	r3, r3, #4
 800afe8:	4413      	add	r3, r2
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1f2      	bne.n	800afd6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d101      	bne.n	800affa <inc_lock+0x8a>
 800aff6:	2300      	movs	r3, #0
 800aff8:	e040      	b.n	800b07c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	4922      	ldr	r1, [pc, #136]	; (800b088 <inc_lock+0x118>)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	011b      	lsls	r3, r3, #4
 800b004:	440b      	add	r3, r1
 800b006:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	491e      	ldr	r1, [pc, #120]	; (800b088 <inc_lock+0x118>)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	011b      	lsls	r3, r3, #4
 800b012:	440b      	add	r3, r1
 800b014:	3304      	adds	r3, #4
 800b016:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	695a      	ldr	r2, [r3, #20]
 800b01c:	491a      	ldr	r1, [pc, #104]	; (800b088 <inc_lock+0x118>)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	011b      	lsls	r3, r3, #4
 800b022:	440b      	add	r3, r1
 800b024:	3308      	adds	r3, #8
 800b026:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b028:	4a17      	ldr	r2, [pc, #92]	; (800b088 <inc_lock+0x118>)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	011b      	lsls	r3, r3, #4
 800b02e:	4413      	add	r3, r2
 800b030:	330c      	adds	r3, #12
 800b032:	2200      	movs	r2, #0
 800b034:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d009      	beq.n	800b050 <inc_lock+0xe0>
 800b03c:	4a12      	ldr	r2, [pc, #72]	; (800b088 <inc_lock+0x118>)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	011b      	lsls	r3, r3, #4
 800b042:	4413      	add	r3, r2
 800b044:	330c      	adds	r3, #12
 800b046:	881b      	ldrh	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <inc_lock+0xe0>
 800b04c:	2300      	movs	r3, #0
 800b04e:	e015      	b.n	800b07c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d108      	bne.n	800b068 <inc_lock+0xf8>
 800b056:	4a0c      	ldr	r2, [pc, #48]	; (800b088 <inc_lock+0x118>)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	011b      	lsls	r3, r3, #4
 800b05c:	4413      	add	r3, r2
 800b05e:	330c      	adds	r3, #12
 800b060:	881b      	ldrh	r3, [r3, #0]
 800b062:	3301      	adds	r3, #1
 800b064:	b29a      	uxth	r2, r3
 800b066:	e001      	b.n	800b06c <inc_lock+0xfc>
 800b068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b06c:	4906      	ldr	r1, [pc, #24]	; (800b088 <inc_lock+0x118>)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	011b      	lsls	r3, r3, #4
 800b072:	440b      	add	r3, r1
 800b074:	330c      	adds	r3, #12
 800b076:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3301      	adds	r3, #1
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	20000d14 	.word	0x20000d14

0800b08c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3b01      	subs	r3, #1
 800b098:	607b      	str	r3, [r7, #4]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d825      	bhi.n	800b0ec <dec_lock+0x60>
		n = Files[i].ctr;
 800b0a0:	4a17      	ldr	r2, [pc, #92]	; (800b100 <dec_lock+0x74>)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	4413      	add	r3, r2
 800b0a8:	330c      	adds	r3, #12
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b0ae:	89fb      	ldrh	r3, [r7, #14]
 800b0b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0b4:	d101      	bne.n	800b0ba <dec_lock+0x2e>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b0ba:	89fb      	ldrh	r3, [r7, #14]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <dec_lock+0x3a>
 800b0c0:	89fb      	ldrh	r3, [r7, #14]
 800b0c2:	3b01      	subs	r3, #1
 800b0c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b0c6:	4a0e      	ldr	r2, [pc, #56]	; (800b100 <dec_lock+0x74>)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	011b      	lsls	r3, r3, #4
 800b0cc:	4413      	add	r3, r2
 800b0ce:	330c      	adds	r3, #12
 800b0d0:	89fa      	ldrh	r2, [r7, #14]
 800b0d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b0d4:	89fb      	ldrh	r3, [r7, #14]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d105      	bne.n	800b0e6 <dec_lock+0x5a>
 800b0da:	4a09      	ldr	r2, [pc, #36]	; (800b100 <dec_lock+0x74>)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	011b      	lsls	r3, r3, #4
 800b0e0:	4413      	add	r3, r2
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	737b      	strb	r3, [r7, #13]
 800b0ea:	e001      	b.n	800b0f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b0f0:	7b7b      	ldrb	r3, [r7, #13]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3714      	adds	r7, #20
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	20000d14 	.word	0x20000d14

0800b104 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b10c:	2300      	movs	r3, #0
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	e010      	b.n	800b134 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b112:	4a0d      	ldr	r2, [pc, #52]	; (800b148 <clear_lock+0x44>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	011b      	lsls	r3, r3, #4
 800b118:	4413      	add	r3, r2
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d105      	bne.n	800b12e <clear_lock+0x2a>
 800b122:	4a09      	ldr	r2, [pc, #36]	; (800b148 <clear_lock+0x44>)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	011b      	lsls	r3, r3, #4
 800b128:	4413      	add	r3, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3301      	adds	r3, #1
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d9eb      	bls.n	800b112 <clear_lock+0xe>
	}
}
 800b13a:	bf00      	nop
 800b13c:	bf00      	nop
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	20000d14 	.word	0x20000d14

0800b14c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	78db      	ldrb	r3, [r3, #3]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d034      	beq.n	800b1ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b164:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	7858      	ldrb	r0, [r3, #1]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b170:	2301      	movs	r3, #1
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	f7ff fd0e 	bl	800ab94 <disk_write>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b17e:	2301      	movs	r3, #1
 800b180:	73fb      	strb	r3, [r7, #15]
 800b182:	e022      	b.n	800b1ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	1ad2      	subs	r2, r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	429a      	cmp	r2, r3
 800b198:	d217      	bcs.n	800b1ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	789b      	ldrb	r3, [r3, #2]
 800b19e:	613b      	str	r3, [r7, #16]
 800b1a0:	e010      	b.n	800b1c4 <sync_window+0x78>
					wsect += fs->fsize;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	7858      	ldrb	r0, [r3, #1]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	f7ff fceb 	bl	800ab94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	613b      	str	r3, [r7, #16]
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d8eb      	bhi.n	800b1a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3718      	adds	r7, #24
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d01b      	beq.n	800b224 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7ff ffad 	bl	800b14c <sync_window>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d113      	bne.n	800b224 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	7858      	ldrb	r0, [r3, #1]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b206:	2301      	movs	r3, #1
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	f7ff fca3 	bl	800ab54 <disk_read>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d004      	beq.n	800b21e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b218:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b224:	7bfb      	ldrb	r3, [r7, #15]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7ff ff87 	bl	800b14c <sync_window>
 800b23e:	4603      	mov	r3, r0
 800b240:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d158      	bne.n	800b2fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d148      	bne.n	800b2e2 <sync_fs+0xb2>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	791b      	ldrb	r3, [r3, #4]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d144      	bne.n	800b2e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3334      	adds	r3, #52	; 0x34
 800b25c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b260:	2100      	movs	r1, #0
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff fd77 	bl	800ad56 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3334      	adds	r3, #52	; 0x34
 800b26c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b270:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff fd06 	bl	800ac86 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3334      	adds	r3, #52	; 0x34
 800b27e:	4921      	ldr	r1, [pc, #132]	; (800b304 <sync_fs+0xd4>)
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff fd1b 	bl	800acbc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	3334      	adds	r3, #52	; 0x34
 800b28a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b28e:	491e      	ldr	r1, [pc, #120]	; (800b308 <sync_fs+0xd8>)
 800b290:	4618      	mov	r0, r3
 800b292:	f7ff fd13 	bl	800acbc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3334      	adds	r3, #52	; 0x34
 800b29a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	f7ff fd09 	bl	800acbc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3334      	adds	r3, #52	; 0x34
 800b2ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	f7ff fcff 	bl	800acbc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a1b      	ldr	r3, [r3, #32]
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	7858      	ldrb	r0, [r3, #1]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	f7ff fc5c 	bl	800ab94 <disk_write>
			fs->fsi_flag = 0;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	785b      	ldrb	r3, [r3, #1]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff fc72 	bl	800abd4 <disk_ioctl>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <sync_fs+0xca>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	41615252 	.word	0x41615252
 800b308:	61417272 	.word	0x61417272

0800b30c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	3b02      	subs	r3, #2
 800b31a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	3b02      	subs	r3, #2
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	d301      	bcc.n	800b32c <clust2sect+0x20>
 800b328:	2300      	movs	r3, #0
 800b32a:	e008      	b.n	800b33e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	895b      	ldrh	r3, [r3, #10]
 800b330:	461a      	mov	r2, r3
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	fb03 f202 	mul.w	r2, r3, r2
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33c:	4413      	add	r3, r2
}
 800b33e:	4618      	mov	r0, r3
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b086      	sub	sp, #24
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d904      	bls.n	800b36a <get_fat+0x20>
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	429a      	cmp	r2, r3
 800b368:	d302      	bcc.n	800b370 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b36a:	2301      	movs	r3, #1
 800b36c:	617b      	str	r3, [r7, #20]
 800b36e:	e08f      	b.n	800b490 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b374:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	d062      	beq.n	800b444 <get_fat+0xfa>
 800b37e:	2b03      	cmp	r3, #3
 800b380:	dc7c      	bgt.n	800b47c <get_fat+0x132>
 800b382:	2b01      	cmp	r3, #1
 800b384:	d002      	beq.n	800b38c <get_fat+0x42>
 800b386:	2b02      	cmp	r3, #2
 800b388:	d042      	beq.n	800b410 <get_fat+0xc6>
 800b38a:	e077      	b.n	800b47c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	60fb      	str	r3, [r7, #12]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4413      	add	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	0a5b      	lsrs	r3, r3, #9
 800b3a2:	4413      	add	r3, r2
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6938      	ldr	r0, [r7, #16]
 800b3a8:	f7ff ff14 	bl	800b1d4 <move_window>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d167      	bne.n	800b482 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	1c5a      	adds	r2, r3, #1
 800b3b6:	60fa      	str	r2, [r7, #12]
 800b3b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	0a5b      	lsrs	r3, r3, #9
 800b3ce:	4413      	add	r3, r2
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6938      	ldr	r0, [r7, #16]
 800b3d4:	f7ff fefe 	bl	800b1d4 <move_window>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d153      	bne.n	800b486 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3ec:	021b      	lsls	r3, r3, #8
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d002      	beq.n	800b406 <get_fat+0xbc>
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	091b      	lsrs	r3, r3, #4
 800b404:	e002      	b.n	800b40c <get_fat+0xc2>
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b40c:	617b      	str	r3, [r7, #20]
			break;
 800b40e:	e03f      	b.n	800b490 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	0a1b      	lsrs	r3, r3, #8
 800b418:	4413      	add	r3, r2
 800b41a:	4619      	mov	r1, r3
 800b41c:	6938      	ldr	r0, [r7, #16]
 800b41e:	f7ff fed9 	bl	800b1d4 <move_window>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d130      	bne.n	800b48a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	005b      	lsls	r3, r3, #1
 800b432:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b436:	4413      	add	r3, r2
 800b438:	4618      	mov	r0, r3
 800b43a:	f7ff fbe9 	bl	800ac10 <ld_word>
 800b43e:	4603      	mov	r3, r0
 800b440:	617b      	str	r3, [r7, #20]
			break;
 800b442:	e025      	b.n	800b490 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	09db      	lsrs	r3, r3, #7
 800b44c:	4413      	add	r3, r2
 800b44e:	4619      	mov	r1, r3
 800b450:	6938      	ldr	r0, [r7, #16]
 800b452:	f7ff febf 	bl	800b1d4 <move_window>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d118      	bne.n	800b48e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b46a:	4413      	add	r3, r2
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7ff fbe7 	bl	800ac40 <ld_dword>
 800b472:	4603      	mov	r3, r0
 800b474:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b478:	617b      	str	r3, [r7, #20]
			break;
 800b47a:	e009      	b.n	800b490 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b47c:	2301      	movs	r3, #1
 800b47e:	617b      	str	r3, [r7, #20]
 800b480:	e006      	b.n	800b490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b482:	bf00      	nop
 800b484:	e004      	b.n	800b490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b486:	bf00      	nop
 800b488:	e002      	b.n	800b490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b48a:	bf00      	nop
 800b48c:	e000      	b.n	800b490 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b48e:	bf00      	nop
		}
	}

	return val;
 800b490:	697b      	ldr	r3, [r7, #20]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3718      	adds	r7, #24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b49a:	b590      	push	{r4, r7, lr}
 800b49c:	b089      	sub	sp, #36	; 0x24
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	60f8      	str	r0, [r7, #12]
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	f240 80d2 	bls.w	800b656 <put_fat+0x1bc>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	699b      	ldr	r3, [r3, #24]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	f080 80cc 	bcs.w	800b656 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	f000 8096 	beq.w	800b5f4 <put_fat+0x15a>
 800b4c8:	2b03      	cmp	r3, #3
 800b4ca:	f300 80cd 	bgt.w	800b668 <put_fat+0x1ce>
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d002      	beq.n	800b4d8 <put_fat+0x3e>
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d06e      	beq.n	800b5b4 <put_fat+0x11a>
 800b4d6:	e0c7      	b.n	800b668 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	61bb      	str	r3, [r7, #24]
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	085b      	lsrs	r3, r3, #1
 800b4e0:	69ba      	ldr	r2, [r7, #24]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	0a5b      	lsrs	r3, r3, #9
 800b4ee:	4413      	add	r3, r2
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f7ff fe6e 	bl	800b1d4 <move_window>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4fc:	7ffb      	ldrb	r3, [r7, #31]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f040 80ab 	bne.w	800b65a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	1c59      	adds	r1, r3, #1
 800b50e:	61b9      	str	r1, [r7, #24]
 800b510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b514:	4413      	add	r3, r2
 800b516:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00d      	beq.n	800b53e <put_fat+0xa4>
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	b25b      	sxtb	r3, r3
 800b528:	f003 030f 	and.w	r3, r3, #15
 800b52c:	b25a      	sxtb	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	b2db      	uxtb	r3, r3
 800b532:	011b      	lsls	r3, r3, #4
 800b534:	b25b      	sxtb	r3, r3
 800b536:	4313      	orrs	r3, r2
 800b538:	b25b      	sxtb	r3, r3
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	e001      	b.n	800b542 <put_fat+0xa8>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	b2db      	uxtb	r3, r3
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2201      	movs	r2, #1
 800b54a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	0a5b      	lsrs	r3, r3, #9
 800b554:	4413      	add	r3, r2
 800b556:	4619      	mov	r1, r3
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f7ff fe3b 	bl	800b1d4 <move_window>
 800b55e:	4603      	mov	r3, r0
 800b560:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b562:	7ffb      	ldrb	r3, [r7, #31]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d17a      	bne.n	800b65e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b574:	4413      	add	r3, r2
 800b576:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	f003 0301 	and.w	r3, r3, #1
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d003      	beq.n	800b58a <put_fat+0xf0>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	091b      	lsrs	r3, r3, #4
 800b586:	b2db      	uxtb	r3, r3
 800b588:	e00e      	b.n	800b5a8 <put_fat+0x10e>
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	b25b      	sxtb	r3, r3
 800b590:	f023 030f 	bic.w	r3, r3, #15
 800b594:	b25a      	sxtb	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	0a1b      	lsrs	r3, r3, #8
 800b59a:	b25b      	sxtb	r3, r3
 800b59c:	f003 030f 	and.w	r3, r3, #15
 800b5a0:	b25b      	sxtb	r3, r3
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	b25b      	sxtb	r3, r3
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	70da      	strb	r2, [r3, #3]
			break;
 800b5b2:	e059      	b.n	800b668 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	0a1b      	lsrs	r3, r3, #8
 800b5bc:	4413      	add	r3, r2
 800b5be:	4619      	mov	r1, r3
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f7ff fe07 	bl	800b1d4 <move_window>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5ca:	7ffb      	ldrb	r3, [r7, #31]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d148      	bne.n	800b662 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b5de:	4413      	add	r3, r2
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	b292      	uxth	r2, r2
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7ff fb4d 	bl	800ac86 <st_word>
			fs->wflag = 1;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	70da      	strb	r2, [r3, #3]
			break;
 800b5f2:	e039      	b.n	800b668 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	09db      	lsrs	r3, r3, #7
 800b5fc:	4413      	add	r3, r2
 800b5fe:	4619      	mov	r1, r3
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f7ff fde7 	bl	800b1d4 <move_window>
 800b606:	4603      	mov	r3, r0
 800b608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b60a:	7ffb      	ldrb	r3, [r7, #31]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d12a      	bne.n	800b666 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b624:	4413      	add	r3, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f7ff fb0a 	bl	800ac40 <ld_dword>
 800b62c:	4603      	mov	r3, r0
 800b62e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b632:	4323      	orrs	r3, r4
 800b634:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b644:	4413      	add	r3, r2
 800b646:	6879      	ldr	r1, [r7, #4]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff fb37 	bl	800acbc <st_dword>
			fs->wflag = 1;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2201      	movs	r2, #1
 800b652:	70da      	strb	r2, [r3, #3]
			break;
 800b654:	e008      	b.n	800b668 <put_fat+0x1ce>
		}
	}
 800b656:	bf00      	nop
 800b658:	e006      	b.n	800b668 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b65a:	bf00      	nop
 800b65c:	e004      	b.n	800b668 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b65e:	bf00      	nop
 800b660:	e002      	b.n	800b668 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b662:	bf00      	nop
 800b664:	e000      	b.n	800b668 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b666:	bf00      	nop
	return res;
 800b668:	7ffb      	ldrb	r3, [r7, #31]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3724      	adds	r7, #36	; 0x24
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd90      	pop	{r4, r7, pc}

0800b672 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b088      	sub	sp, #32
 800b676:	af00      	add	r7, sp, #0
 800b678:	60f8      	str	r0, [r7, #12]
 800b67a:	60b9      	str	r1, [r7, #8]
 800b67c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d904      	bls.n	800b698 <remove_chain+0x26>
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	429a      	cmp	r2, r3
 800b696:	d301      	bcc.n	800b69c <remove_chain+0x2a>
 800b698:	2302      	movs	r3, #2
 800b69a:	e04b      	b.n	800b734 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00c      	beq.n	800b6bc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b6a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6a6:	6879      	ldr	r1, [r7, #4]
 800b6a8:	69b8      	ldr	r0, [r7, #24]
 800b6aa:	f7ff fef6 	bl	800b49a <put_fat>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b6b2:	7ffb      	ldrb	r3, [r7, #31]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d001      	beq.n	800b6bc <remove_chain+0x4a>
 800b6b8:	7ffb      	ldrb	r3, [r7, #31]
 800b6ba:	e03b      	b.n	800b734 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b6bc:	68b9      	ldr	r1, [r7, #8]
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f7ff fe43 	bl	800b34a <get_fat>
 800b6c4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d031      	beq.n	800b730 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d101      	bne.n	800b6d6 <remove_chain+0x64>
 800b6d2:	2302      	movs	r3, #2
 800b6d4:	e02e      	b.n	800b734 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6dc:	d101      	bne.n	800b6e2 <remove_chain+0x70>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e028      	b.n	800b734 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	68b9      	ldr	r1, [r7, #8]
 800b6e6:	69b8      	ldr	r0, [r7, #24]
 800b6e8:	f7ff fed7 	bl	800b49a <put_fat>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b6f0:	7ffb      	ldrb	r3, [r7, #31]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <remove_chain+0x88>
 800b6f6:	7ffb      	ldrb	r3, [r7, #31]
 800b6f8:	e01c      	b.n	800b734 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	695a      	ldr	r2, [r3, #20]
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	3b02      	subs	r3, #2
 800b704:	429a      	cmp	r2, r3
 800b706:	d20b      	bcs.n	800b720 <remove_chain+0xae>
			fs->free_clst++;
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	695b      	ldr	r3, [r3, #20]
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	791b      	ldrb	r3, [r3, #4]
 800b716:	f043 0301 	orr.w	r3, r3, #1
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	699b      	ldr	r3, [r3, #24]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d3c6      	bcc.n	800b6bc <remove_chain+0x4a>
 800b72e:	e000      	b.n	800b732 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b730:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3720      	adds	r7, #32
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10d      	bne.n	800b76e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d004      	beq.n	800b768 <create_chain+0x2c>
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	69ba      	ldr	r2, [r7, #24]
 800b764:	429a      	cmp	r2, r3
 800b766:	d31b      	bcc.n	800b7a0 <create_chain+0x64>
 800b768:	2301      	movs	r3, #1
 800b76a:	61bb      	str	r3, [r7, #24]
 800b76c:	e018      	b.n	800b7a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f7ff fdea 	bl	800b34a <get_fat>
 800b776:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d801      	bhi.n	800b782 <create_chain+0x46>
 800b77e:	2301      	movs	r3, #1
 800b780:	e070      	b.n	800b864 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b788:	d101      	bne.n	800b78e <create_chain+0x52>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	e06a      	b.n	800b864 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	699b      	ldr	r3, [r3, #24]
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	429a      	cmp	r2, r3
 800b796:	d201      	bcs.n	800b79c <create_chain+0x60>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	e063      	b.n	800b864 <create_chain+0x128>
		scl = clst;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	699b      	ldr	r3, [r3, #24]
 800b7ae:	69fa      	ldr	r2, [r7, #28]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d307      	bcc.n	800b7c4 <create_chain+0x88>
				ncl = 2;
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b7b8:	69fa      	ldr	r2, [r7, #28]
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d901      	bls.n	800b7c4 <create_chain+0x88>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e04f      	b.n	800b864 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b7c4:	69f9      	ldr	r1, [r7, #28]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff fdbf 	bl	800b34a <get_fat>
 800b7cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00e      	beq.n	800b7f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d003      	beq.n	800b7e2 <create_chain+0xa6>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7e0:	d101      	bne.n	800b7e6 <create_chain+0xaa>
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	e03e      	b.n	800b864 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b7e6:	69fa      	ldr	r2, [r7, #28]
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d1da      	bne.n	800b7a4 <create_chain+0x68>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	e038      	b.n	800b864 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b7f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b7f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7f8:	69f9      	ldr	r1, [r7, #28]
 800b7fa:	6938      	ldr	r0, [r7, #16]
 800b7fc:	f7ff fe4d 	bl	800b49a <put_fat>
 800b800:	4603      	mov	r3, r0
 800b802:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d109      	bne.n	800b81e <create_chain+0xe2>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d006      	beq.n	800b81e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b810:	69fa      	ldr	r2, [r7, #28]
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6938      	ldr	r0, [r7, #16]
 800b816:	f7ff fe40 	bl	800b49a <put_fat>
 800b81a:	4603      	mov	r3, r0
 800b81c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b81e:	7dfb      	ldrb	r3, [r7, #23]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d116      	bne.n	800b852 <create_chain+0x116>
		fs->last_clst = ncl;
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	69fa      	ldr	r2, [r7, #28]
 800b828:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	695a      	ldr	r2, [r3, #20]
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	3b02      	subs	r3, #2
 800b834:	429a      	cmp	r2, r3
 800b836:	d804      	bhi.n	800b842 <create_chain+0x106>
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	1e5a      	subs	r2, r3, #1
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	791b      	ldrb	r3, [r3, #4]
 800b846:	f043 0301 	orr.w	r3, r3, #1
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	711a      	strb	r2, [r3, #4]
 800b850:	e007      	b.n	800b862 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b852:	7dfb      	ldrb	r3, [r7, #23]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d102      	bne.n	800b85e <create_chain+0x122>
 800b858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b85c:	e000      	b.n	800b860 <create_chain+0x124>
 800b85e:	2301      	movs	r3, #1
 800b860:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b862:	69fb      	ldr	r3, [r7, #28]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3720      	adds	r7, #32
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b087      	sub	sp, #28
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	3304      	adds	r3, #4
 800b882:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	0a5b      	lsrs	r3, r3, #9
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	8952      	ldrh	r2, [r2, #10]
 800b88c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b890:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	1d1a      	adds	r2, r3, #4
 800b896:	613a      	str	r2, [r7, #16]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d101      	bne.n	800b8a6 <clmt_clust+0x3a>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e010      	b.n	800b8c8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d307      	bcc.n	800b8be <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	1ad3      	subs	r3, r2, r3
 800b8b4:	617b      	str	r3, [r7, #20]
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8bc:	e7e9      	b.n	800b892 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b8be:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	4413      	add	r3, r2
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	371c      	adds	r7, #28
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8ea:	d204      	bcs.n	800b8f6 <dir_sdi+0x22>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	f003 031f 	and.w	r3, r3, #31
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <dir_sdi+0x26>
		return FR_INT_ERR;
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e063      	b.n	800b9c2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d106      	bne.n	800b91a <dir_sdi+0x46>
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	2b02      	cmp	r3, #2
 800b912:	d902      	bls.n	800b91a <dir_sdi+0x46>
		clst = fs->dirbase;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b918:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10c      	bne.n	800b93a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	095b      	lsrs	r3, r3, #5
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	8912      	ldrh	r2, [r2, #8]
 800b928:	4293      	cmp	r3, r2
 800b92a:	d301      	bcc.n	800b930 <dir_sdi+0x5c>
 800b92c:	2302      	movs	r3, #2
 800b92e:	e048      	b.n	800b9c2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	61da      	str	r2, [r3, #28]
 800b938:	e029      	b.n	800b98e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	895b      	ldrh	r3, [r3, #10]
 800b93e:	025b      	lsls	r3, r3, #9
 800b940:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b942:	e019      	b.n	800b978 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6979      	ldr	r1, [r7, #20]
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff fcfe 	bl	800b34a <get_fat>
 800b94e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b956:	d101      	bne.n	800b95c <dir_sdi+0x88>
 800b958:	2301      	movs	r3, #1
 800b95a:	e032      	b.n	800b9c2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d904      	bls.n	800b96c <dir_sdi+0x98>
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d301      	bcc.n	800b970 <dir_sdi+0x9c>
 800b96c:	2302      	movs	r3, #2
 800b96e:	e028      	b.n	800b9c2 <dir_sdi+0xee>
			ofs -= csz;
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b978:	683a      	ldr	r2, [r7, #0]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d2e1      	bcs.n	800b944 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b980:	6979      	ldr	r1, [r7, #20]
 800b982:	6938      	ldr	r0, [r7, #16]
 800b984:	f7ff fcc2 	bl	800b30c <clust2sect>
 800b988:	4602      	mov	r2, r0
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	69db      	ldr	r3, [r3, #28]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d101      	bne.n	800b9a0 <dir_sdi+0xcc>
 800b99c:	2302      	movs	r3, #2
 800b99e:	e010      	b.n	800b9c2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	69da      	ldr	r2, [r3, #28]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	0a5b      	lsrs	r3, r3, #9
 800b9a8:	441a      	add	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ba:	441a      	add	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b086      	sub	sp, #24
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	695b      	ldr	r3, [r3, #20]
 800b9de:	3320      	adds	r3, #32
 800b9e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	69db      	ldr	r3, [r3, #28]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d003      	beq.n	800b9f2 <dir_next+0x28>
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9f0:	d301      	bcc.n	800b9f6 <dir_next+0x2c>
 800b9f2:	2304      	movs	r3, #4
 800b9f4:	e0aa      	b.n	800bb4c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f040 8098 	bne.w	800bb32 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	1c5a      	adds	r2, r3, #1
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	699b      	ldr	r3, [r3, #24]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10b      	bne.n	800ba2c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	095b      	lsrs	r3, r3, #5
 800ba18:	68fa      	ldr	r2, [r7, #12]
 800ba1a:	8912      	ldrh	r2, [r2, #8]
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	f0c0 8088 	bcc.w	800bb32 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	61da      	str	r2, [r3, #28]
 800ba28:	2304      	movs	r3, #4
 800ba2a:	e08f      	b.n	800bb4c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	0a5b      	lsrs	r3, r3, #9
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	8952      	ldrh	r2, [r2, #10]
 800ba34:	3a01      	subs	r2, #1
 800ba36:	4013      	ands	r3, r2
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d17a      	bne.n	800bb32 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	4619      	mov	r1, r3
 800ba44:	4610      	mov	r0, r2
 800ba46:	f7ff fc80 	bl	800b34a <get_fat>
 800ba4a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d801      	bhi.n	800ba56 <dir_next+0x8c>
 800ba52:	2302      	movs	r3, #2
 800ba54:	e07a      	b.n	800bb4c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba5c:	d101      	bne.n	800ba62 <dir_next+0x98>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e074      	b.n	800bb4c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d358      	bcc.n	800bb1e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d104      	bne.n	800ba7c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	61da      	str	r2, [r3, #28]
 800ba78:	2304      	movs	r3, #4
 800ba7a:	e067      	b.n	800bb4c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	4619      	mov	r1, r3
 800ba84:	4610      	mov	r0, r2
 800ba86:	f7ff fe59 	bl	800b73c <create_chain>
 800ba8a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <dir_next+0xcc>
 800ba92:	2307      	movs	r3, #7
 800ba94:	e05a      	b.n	800bb4c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d101      	bne.n	800baa0 <dir_next+0xd6>
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	e055      	b.n	800bb4c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800baa6:	d101      	bne.n	800baac <dir_next+0xe2>
 800baa8:	2301      	movs	r3, #1
 800baaa:	e04f      	b.n	800bb4c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f7ff fb4d 	bl	800b14c <sync_window>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <dir_next+0xf2>
 800bab8:	2301      	movs	r3, #1
 800baba:	e047      	b.n	800bb4c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	3334      	adds	r3, #52	; 0x34
 800bac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bac4:	2100      	movs	r1, #0
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff f945 	bl	800ad56 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bacc:	2300      	movs	r3, #0
 800bace:	613b      	str	r3, [r7, #16]
 800bad0:	6979      	ldr	r1, [r7, #20]
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff fc1a 	bl	800b30c <clust2sect>
 800bad8:	4602      	mov	r2, r0
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	631a      	str	r2, [r3, #48]	; 0x30
 800bade:	e012      	b.n	800bb06 <dir_next+0x13c>
						fs->wflag = 1;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2201      	movs	r2, #1
 800bae4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bae6:	68f8      	ldr	r0, [r7, #12]
 800bae8:	f7ff fb30 	bl	800b14c <sync_window>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <dir_next+0x12c>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e02a      	b.n	800bb4c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	3301      	adds	r3, #1
 800bafa:	613b      	str	r3, [r7, #16]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb00:	1c5a      	adds	r2, r3, #1
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	631a      	str	r2, [r3, #48]	; 0x30
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	895b      	ldrh	r3, [r3, #10]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d3e6      	bcc.n	800bae0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	1ad2      	subs	r2, r2, r3
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bb24:	6979      	ldr	r1, [r7, #20]
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f7ff fbf0 	bl	800b30c <clust2sect>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb44:	441a      	add	r2, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bb64:	2100      	movs	r1, #0
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff feb4 	bl	800b8d4 <dir_sdi>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d12b      	bne.n	800bbce <dir_alloc+0x7a>
		n = 0;
 800bb76:	2300      	movs	r3, #0
 800bb78:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f7ff fb27 	bl	800b1d4 <move_window>
 800bb86:	4603      	mov	r3, r0
 800bb88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d11d      	bne.n	800bbcc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a1b      	ldr	r3, [r3, #32]
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	2be5      	cmp	r3, #229	; 0xe5
 800bb98:	d004      	beq.n	800bba4 <dir_alloc+0x50>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a1b      	ldr	r3, [r3, #32]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d107      	bne.n	800bbb4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	3301      	adds	r3, #1
 800bba8:	613b      	str	r3, [r7, #16]
 800bbaa:	693a      	ldr	r2, [r7, #16]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d102      	bne.n	800bbb8 <dir_alloc+0x64>
 800bbb2:	e00c      	b.n	800bbce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bbb8:	2101      	movs	r1, #1
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f7ff ff05 	bl	800b9ca <dir_next>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bbc4:	7dfb      	ldrb	r3, [r7, #23]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d0d7      	beq.n	800bb7a <dir_alloc+0x26>
 800bbca:	e000      	b.n	800bbce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bbcc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bbce:	7dfb      	ldrb	r3, [r7, #23]
 800bbd0:	2b04      	cmp	r3, #4
 800bbd2:	d101      	bne.n	800bbd8 <dir_alloc+0x84>
 800bbd4:	2307      	movs	r3, #7
 800bbd6:	75fb      	strb	r3, [r7, #23]
	return res;
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	331a      	adds	r3, #26
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff f80d 	bl	800ac10 <ld_word>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	2b03      	cmp	r3, #3
 800bc00:	d109      	bne.n	800bc16 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	3314      	adds	r3, #20
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7ff f802 	bl	800ac10 <ld_word>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	041b      	lsls	r3, r3, #16
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bc16:	68fb      	ldr	r3, [r7, #12]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	331a      	adds	r3, #26
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	b292      	uxth	r2, r2
 800bc34:	4611      	mov	r1, r2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7ff f825 	bl	800ac86 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d109      	bne.n	800bc58 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f103 0214 	add.w	r2, r3, #20
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	0c1b      	lsrs	r3, r3, #16
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	4619      	mov	r1, r3
 800bc52:	4610      	mov	r0, r2
 800bc54:	f7ff f817 	bl	800ac86 <st_word>
	}
}
 800bc58:	bf00      	nop
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc6e:	2100      	movs	r1, #0
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7ff fe2f 	bl	800b8d4 <dir_sdi>
 800bc76:	4603      	mov	r3, r0
 800bc78:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d001      	beq.n	800bc84 <dir_find+0x24>
 800bc80:	7dfb      	ldrb	r3, [r7, #23]
 800bc82:	e03e      	b.n	800bd02 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	69db      	ldr	r3, [r3, #28]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6938      	ldr	r0, [r7, #16]
 800bc8c:	f7ff faa2 	bl	800b1d4 <move_window>
 800bc90:	4603      	mov	r3, r0
 800bc92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc94:	7dfb      	ldrb	r3, [r7, #23]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d12f      	bne.n	800bcfa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d102      	bne.n	800bcae <dir_find+0x4e>
 800bca8:	2304      	movs	r3, #4
 800bcaa:	75fb      	strb	r3, [r7, #23]
 800bcac:	e028      	b.n	800bd00 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a1b      	ldr	r3, [r3, #32]
 800bcb2:	330b      	adds	r3, #11
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a1b      	ldr	r3, [r3, #32]
 800bcc4:	330b      	adds	r3, #11
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	f003 0308 	and.w	r3, r3, #8
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10a      	bne.n	800bce6 <dir_find+0x86>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a18      	ldr	r0, [r3, #32]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	3324      	adds	r3, #36	; 0x24
 800bcd8:	220b      	movs	r2, #11
 800bcda:	4619      	mov	r1, r3
 800bcdc:	f7ff f856 	bl	800ad8c <mem_cmp>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00b      	beq.n	800bcfe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bce6:	2100      	movs	r1, #0
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7ff fe6e 	bl	800b9ca <dir_next>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d0c5      	beq.n	800bc84 <dir_find+0x24>
 800bcf8:	e002      	b.n	800bd00 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bcfa:	bf00      	nop
 800bcfc:	e000      	b.n	800bd00 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bcfe:	bf00      	nop

	return res;
 800bd00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3718      	adds	r7, #24
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b084      	sub	sp, #16
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bd18:	2101      	movs	r1, #1
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7ff ff1a 	bl	800bb54 <dir_alloc>
 800bd20:	4603      	mov	r3, r0
 800bd22:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d11c      	bne.n	800bd64 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	4619      	mov	r1, r3
 800bd30:	68b8      	ldr	r0, [r7, #8]
 800bd32:	f7ff fa4f 	bl	800b1d4 <move_window>
 800bd36:	4603      	mov	r3, r0
 800bd38:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d111      	bne.n	800bd64 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a1b      	ldr	r3, [r3, #32]
 800bd44:	2220      	movs	r2, #32
 800bd46:	2100      	movs	r1, #0
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff f804 	bl	800ad56 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a18      	ldr	r0, [r3, #32]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3324      	adds	r3, #36	; 0x24
 800bd56:	220b      	movs	r2, #11
 800bd58:	4619      	mov	r1, r3
 800bd5a:	f7fe ffdb 	bl	800ad14 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2201      	movs	r2, #1
 800bd62:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	60fb      	str	r3, [r7, #12]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3324      	adds	r3, #36	; 0x24
 800bd84:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bd86:	220b      	movs	r2, #11
 800bd88:	2120      	movs	r1, #32
 800bd8a:	68b8      	ldr	r0, [r7, #8]
 800bd8c:	f7fe ffe3 	bl	800ad56 <mem_set>
	si = i = 0; ni = 8;
 800bd90:	2300      	movs	r3, #0
 800bd92:	613b      	str	r3, [r7, #16]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	61fb      	str	r3, [r7, #28]
 800bd98:	2308      	movs	r3, #8
 800bd9a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	1c5a      	adds	r2, r3, #1
 800bda0:	61fa      	str	r2, [r7, #28]
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	4413      	add	r3, r2
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bdaa:	7efb      	ldrb	r3, [r7, #27]
 800bdac:	2b20      	cmp	r3, #32
 800bdae:	d94e      	bls.n	800be4e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bdb0:	7efb      	ldrb	r3, [r7, #27]
 800bdb2:	2b2f      	cmp	r3, #47	; 0x2f
 800bdb4:	d006      	beq.n	800bdc4 <create_name+0x54>
 800bdb6:	7efb      	ldrb	r3, [r7, #27]
 800bdb8:	2b5c      	cmp	r3, #92	; 0x5c
 800bdba:	d110      	bne.n	800bdde <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bdbc:	e002      	b.n	800bdc4 <create_name+0x54>
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	61fb      	str	r3, [r7, #28]
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	4413      	add	r3, r2
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	2b2f      	cmp	r3, #47	; 0x2f
 800bdce:	d0f6      	beq.n	800bdbe <create_name+0x4e>
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	2b5c      	cmp	r3, #92	; 0x5c
 800bdda:	d0f0      	beq.n	800bdbe <create_name+0x4e>
			break;
 800bddc:	e038      	b.n	800be50 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bdde:	7efb      	ldrb	r3, [r7, #27]
 800bde0:	2b2e      	cmp	r3, #46	; 0x2e
 800bde2:	d003      	beq.n	800bdec <create_name+0x7c>
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d30c      	bcc.n	800be06 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	2b0b      	cmp	r3, #11
 800bdf0:	d002      	beq.n	800bdf8 <create_name+0x88>
 800bdf2:	7efb      	ldrb	r3, [r7, #27]
 800bdf4:	2b2e      	cmp	r3, #46	; 0x2e
 800bdf6:	d001      	beq.n	800bdfc <create_name+0x8c>
 800bdf8:	2306      	movs	r3, #6
 800bdfa:	e044      	b.n	800be86 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bdfc:	2308      	movs	r3, #8
 800bdfe:	613b      	str	r3, [r7, #16]
 800be00:	230b      	movs	r3, #11
 800be02:	617b      	str	r3, [r7, #20]
			continue;
 800be04:	e022      	b.n	800be4c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800be06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	da04      	bge.n	800be18 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800be0e:	7efb      	ldrb	r3, [r7, #27]
 800be10:	3b80      	subs	r3, #128	; 0x80
 800be12:	4a1f      	ldr	r2, [pc, #124]	; (800be90 <create_name+0x120>)
 800be14:	5cd3      	ldrb	r3, [r2, r3]
 800be16:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800be18:	7efb      	ldrb	r3, [r7, #27]
 800be1a:	4619      	mov	r1, r3
 800be1c:	481d      	ldr	r0, [pc, #116]	; (800be94 <create_name+0x124>)
 800be1e:	f7fe ffdc 	bl	800adda <chk_chr>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <create_name+0xbc>
 800be28:	2306      	movs	r3, #6
 800be2a:	e02c      	b.n	800be86 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800be2c:	7efb      	ldrb	r3, [r7, #27]
 800be2e:	2b60      	cmp	r3, #96	; 0x60
 800be30:	d905      	bls.n	800be3e <create_name+0xce>
 800be32:	7efb      	ldrb	r3, [r7, #27]
 800be34:	2b7a      	cmp	r3, #122	; 0x7a
 800be36:	d802      	bhi.n	800be3e <create_name+0xce>
 800be38:	7efb      	ldrb	r3, [r7, #27]
 800be3a:	3b20      	subs	r3, #32
 800be3c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	1c5a      	adds	r2, r3, #1
 800be42:	613a      	str	r2, [r7, #16]
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	4413      	add	r3, r2
 800be48:	7efa      	ldrb	r2, [r7, #27]
 800be4a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800be4c:	e7a6      	b.n	800bd9c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be4e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	441a      	add	r2, r3
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d101      	bne.n	800be64 <create_name+0xf4>
 800be60:	2306      	movs	r3, #6
 800be62:	e010      	b.n	800be86 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2be5      	cmp	r3, #229	; 0xe5
 800be6a:	d102      	bne.n	800be72 <create_name+0x102>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2205      	movs	r2, #5
 800be70:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be72:	7efb      	ldrb	r3, [r7, #27]
 800be74:	2b20      	cmp	r3, #32
 800be76:	d801      	bhi.n	800be7c <create_name+0x10c>
 800be78:	2204      	movs	r2, #4
 800be7a:	e000      	b.n	800be7e <create_name+0x10e>
 800be7c:	2200      	movs	r2, #0
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	330b      	adds	r3, #11
 800be82:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800be84:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800be86:	4618      	mov	r0, r3
 800be88:	3720      	adds	r7, #32
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	080162d0 	.word	0x080162d0
 800be94:	080161b0 	.word	0x080161b0

0800be98 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800beac:	e002      	b.n	800beb4 <follow_path+0x1c>
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	3301      	adds	r3, #1
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b2f      	cmp	r3, #47	; 0x2f
 800beba:	d0f8      	beq.n	800beae <follow_path+0x16>
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	2b5c      	cmp	r3, #92	; 0x5c
 800bec2:	d0f4      	beq.n	800beae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	2200      	movs	r2, #0
 800bec8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	2b1f      	cmp	r3, #31
 800bed0:	d80a      	bhi.n	800bee8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2280      	movs	r2, #128	; 0x80
 800bed6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800beda:	2100      	movs	r1, #0
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f7ff fcf9 	bl	800b8d4 <dir_sdi>
 800bee2:	4603      	mov	r3, r0
 800bee4:	75fb      	strb	r3, [r7, #23]
 800bee6:	e043      	b.n	800bf70 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bee8:	463b      	mov	r3, r7
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff ff3f 	bl	800bd70 <create_name>
 800bef2:	4603      	mov	r3, r0
 800bef4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d134      	bne.n	800bf66 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f7ff feaf 	bl	800bc60 <dir_find>
 800bf02:	4603      	mov	r3, r0
 800bf04:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf0c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00a      	beq.n	800bf2a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
 800bf16:	2b04      	cmp	r3, #4
 800bf18:	d127      	bne.n	800bf6a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bf1a:	7afb      	ldrb	r3, [r7, #11]
 800bf1c:	f003 0304 	and.w	r3, r3, #4
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d122      	bne.n	800bf6a <follow_path+0xd2>
 800bf24:	2305      	movs	r3, #5
 800bf26:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bf28:	e01f      	b.n	800bf6a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf2a:	7afb      	ldrb	r3, [r7, #11]
 800bf2c:	f003 0304 	and.w	r3, r3, #4
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d11c      	bne.n	800bf6e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	799b      	ldrb	r3, [r3, #6]
 800bf38:	f003 0310 	and.w	r3, r3, #16
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d102      	bne.n	800bf46 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bf40:	2305      	movs	r3, #5
 800bf42:	75fb      	strb	r3, [r7, #23]
 800bf44:	e014      	b.n	800bf70 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	695b      	ldr	r3, [r3, #20]
 800bf50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf54:	4413      	add	r3, r2
 800bf56:	4619      	mov	r1, r3
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f7ff fe42 	bl	800bbe2 <ld_clust>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf64:	e7c0      	b.n	800bee8 <follow_path+0x50>
			if (res != FR_OK) break;
 800bf66:	bf00      	nop
 800bf68:	e002      	b.n	800bf70 <follow_path+0xd8>
				break;
 800bf6a:	bf00      	nop
 800bf6c:	e000      	b.n	800bf70 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf6e:	bf00      	nop
			}
		}
	}

	return res;
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bf7a:	b480      	push	{r7}
 800bf7c:	b087      	sub	sp, #28
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bf82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf86:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d031      	beq.n	800bff4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	e002      	b.n	800bf9e <get_ldnumber+0x24>
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	617b      	str	r3, [r7, #20]
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	2b20      	cmp	r3, #32
 800bfa4:	d903      	bls.n	800bfae <get_ldnumber+0x34>
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b3a      	cmp	r3, #58	; 0x3a
 800bfac:	d1f4      	bne.n	800bf98 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	2b3a      	cmp	r3, #58	; 0x3a
 800bfb4:	d11c      	bne.n	800bff0 <get_ldnumber+0x76>
			tp = *path;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	1c5a      	adds	r2, r3, #1
 800bfc0:	60fa      	str	r2, [r7, #12]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	3b30      	subs	r3, #48	; 0x30
 800bfc6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	2b09      	cmp	r3, #9
 800bfcc:	d80e      	bhi.n	800bfec <get_ldnumber+0x72>
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d10a      	bne.n	800bfec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d107      	bne.n	800bfec <get_ldnumber+0x72>
					vol = (int)i;
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	617b      	str	r3, [r7, #20]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	697a      	ldr	r2, [r7, #20]
 800bfea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	e002      	b.n	800bff6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bff0:	2300      	movs	r3, #0
 800bff2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bff4:	693b      	ldr	r3, [r7, #16]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	371c      	adds	r7, #28
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
	...

0800c004 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	70da      	strb	r2, [r3, #3]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c01a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff f8d8 	bl	800b1d4 <move_window>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <check_fs+0x2a>
 800c02a:	2304      	movs	r3, #4
 800c02c:	e038      	b.n	800c0a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	3334      	adds	r3, #52	; 0x34
 800c032:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c036:	4618      	mov	r0, r3
 800c038:	f7fe fdea 	bl	800ac10 <ld_word>
 800c03c:	4603      	mov	r3, r0
 800c03e:	461a      	mov	r2, r3
 800c040:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c044:	429a      	cmp	r2, r3
 800c046:	d001      	beq.n	800c04c <check_fs+0x48>
 800c048:	2303      	movs	r3, #3
 800c04a:	e029      	b.n	800c0a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c052:	2be9      	cmp	r3, #233	; 0xe9
 800c054:	d009      	beq.n	800c06a <check_fs+0x66>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c05c:	2beb      	cmp	r3, #235	; 0xeb
 800c05e:	d11e      	bne.n	800c09e <check_fs+0x9a>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c066:	2b90      	cmp	r3, #144	; 0x90
 800c068:	d119      	bne.n	800c09e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	3334      	adds	r3, #52	; 0x34
 800c06e:	3336      	adds	r3, #54	; 0x36
 800c070:	4618      	mov	r0, r3
 800c072:	f7fe fde5 	bl	800ac40 <ld_dword>
 800c076:	4603      	mov	r3, r0
 800c078:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c07c:	4a0a      	ldr	r2, [pc, #40]	; (800c0a8 <check_fs+0xa4>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d101      	bne.n	800c086 <check_fs+0x82>
 800c082:	2300      	movs	r3, #0
 800c084:	e00c      	b.n	800c0a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	3334      	adds	r3, #52	; 0x34
 800c08a:	3352      	adds	r3, #82	; 0x52
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fe fdd7 	bl	800ac40 <ld_dword>
 800c092:	4603      	mov	r3, r0
 800c094:	4a05      	ldr	r2, [pc, #20]	; (800c0ac <check_fs+0xa8>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d101      	bne.n	800c09e <check_fs+0x9a>
 800c09a:	2300      	movs	r3, #0
 800c09c:	e000      	b.n	800c0a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c09e:	2302      	movs	r3, #2
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	00544146 	.word	0x00544146
 800c0ac:	33544146 	.word	0x33544146

0800c0b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b096      	sub	sp, #88	; 0x58
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f7ff ff58 	bl	800bf7a <get_ldnumber>
 800c0ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	da01      	bge.n	800c0d6 <find_volume+0x26>
 800c0d2:	230b      	movs	r3, #11
 800c0d4:	e235      	b.n	800c542 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c0d6:	4aa5      	ldr	r2, [pc, #660]	; (800c36c <find_volume+0x2bc>)
 800c0d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <find_volume+0x3a>
 800c0e6:	230c      	movs	r3, #12
 800c0e8:	e22b      	b.n	800c542 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800c0ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0ec:	f7fe fe90 	bl	800ae10 <lock_fs>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <find_volume+0x4a>
 800c0f6:	230f      	movs	r3, #15
 800c0f8:	e223      	b.n	800c542 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	f023 0301 	bic.w	r3, r3, #1
 800c106:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d01a      	beq.n	800c146 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800c110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c112:	785b      	ldrb	r3, [r3, #1]
 800c114:	4618      	mov	r0, r3
 800c116:	f7fe fcdd 	bl	800aad4 <disk_status>
 800c11a:	4603      	mov	r3, r0
 800c11c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10c      	bne.n	800c146 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c12c:	79fb      	ldrb	r3, [r7, #7]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d007      	beq.n	800c142 <find_volume+0x92>
 800c132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c136:	f003 0304 	and.w	r3, r3, #4
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800c13e:	230a      	movs	r3, #10
 800c140:	e1ff      	b.n	800c542 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800c142:	2300      	movs	r3, #0
 800c144:	e1fd      	b.n	800c542 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	2200      	movs	r2, #0
 800c14a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c152:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c156:	785b      	ldrb	r3, [r3, #1]
 800c158:	4618      	mov	r0, r3
 800c15a:	f7fe fcd5 	bl	800ab08 <disk_initialize>
 800c15e:	4603      	mov	r3, r0
 800c160:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c164:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c168:	f003 0301 	and.w	r3, r3, #1
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d001      	beq.n	800c174 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c170:	2303      	movs	r3, #3
 800c172:	e1e6      	b.n	800c542 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c174:	79fb      	ldrb	r3, [r7, #7]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d007      	beq.n	800c18a <find_volume+0xda>
 800c17a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c17e:	f003 0304 	and.w	r3, r3, #4
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800c186:	230a      	movs	r3, #10
 800c188:	e1db      	b.n	800c542 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c18e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c190:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c192:	f7ff ff37 	bl	800c004 <check_fs>
 800c196:	4603      	mov	r3, r0
 800c198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c19c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	d149      	bne.n	800c238 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	643b      	str	r3, [r7, #64]	; 0x40
 800c1a8:	e01e      	b.n	800c1e8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c1b8:	4413      	add	r3, r2
 800c1ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	3304      	adds	r3, #4
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d006      	beq.n	800c1d4 <find_volume+0x124>
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fe fd38 	bl	800ac40 <ld_dword>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	e000      	b.n	800c1d6 <find_volume+0x126>
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	3358      	adds	r3, #88	; 0x58
 800c1dc:	443b      	add	r3, r7
 800c1de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c1e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	643b      	str	r3, [r7, #64]	; 0x40
 800c1e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d9dd      	bls.n	800c1aa <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <find_volume+0x14e>
 800c1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c1fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	3358      	adds	r3, #88	; 0x58
 800c204:	443b      	add	r3, r7
 800c206:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c20a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c20c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d005      	beq.n	800c21e <find_volume+0x16e>
 800c212:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c214:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c216:	f7ff fef5 	bl	800c004 <check_fs>
 800c21a:	4603      	mov	r3, r0
 800c21c:	e000      	b.n	800c220 <find_volume+0x170>
 800c21e:	2303      	movs	r3, #3
 800c220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d905      	bls.n	800c238 <find_volume+0x188>
 800c22c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c22e:	3301      	adds	r3, #1
 800c230:	643b      	str	r3, [r7, #64]	; 0x40
 800c232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c234:	2b03      	cmp	r3, #3
 800c236:	d9e2      	bls.n	800c1fe <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c238:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c23c:	2b04      	cmp	r3, #4
 800c23e:	d101      	bne.n	800c244 <find_volume+0x194>
 800c240:	2301      	movs	r3, #1
 800c242:	e17e      	b.n	800c542 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d901      	bls.n	800c250 <find_volume+0x1a0>
 800c24c:	230d      	movs	r3, #13
 800c24e:	e178      	b.n	800c542 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c252:	3334      	adds	r3, #52	; 0x34
 800c254:	330b      	adds	r3, #11
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe fcda 	bl	800ac10 <ld_word>
 800c25c:	4603      	mov	r3, r0
 800c25e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c262:	d001      	beq.n	800c268 <find_volume+0x1b8>
 800c264:	230d      	movs	r3, #13
 800c266:	e16c      	b.n	800c542 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26a:	3334      	adds	r3, #52	; 0x34
 800c26c:	3316      	adds	r3, #22
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe fcce 	bl	800ac10 <ld_word>
 800c274:	4603      	mov	r3, r0
 800c276:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d106      	bne.n	800c28c <find_volume+0x1dc>
 800c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c280:	3334      	adds	r3, #52	; 0x34
 800c282:	3324      	adds	r3, #36	; 0x24
 800c284:	4618      	mov	r0, r3
 800c286:	f7fe fcdb 	bl	800ac40 <ld_dword>
 800c28a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c290:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c294:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29e:	789b      	ldrb	r3, [r3, #2]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d005      	beq.n	800c2b0 <find_volume+0x200>
 800c2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a6:	789b      	ldrb	r3, [r3, #2]
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d001      	beq.n	800c2b0 <find_volume+0x200>
 800c2ac:	230d      	movs	r3, #13
 800c2ae:	e148      	b.n	800c542 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	789b      	ldrb	r3, [r3, #2]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b8:	fb02 f303 	mul.w	r3, r2, r3
 800c2bc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2cc:	895b      	ldrh	r3, [r3, #10]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d008      	beq.n	800c2e4 <find_volume+0x234>
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d4:	895b      	ldrh	r3, [r3, #10]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2da:	895b      	ldrh	r3, [r3, #10]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	4013      	ands	r3, r2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d001      	beq.n	800c2e8 <find_volume+0x238>
 800c2e4:	230d      	movs	r3, #13
 800c2e6:	e12c      	b.n	800c542 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ea:	3334      	adds	r3, #52	; 0x34
 800c2ec:	3311      	adds	r3, #17
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe fc8e 	bl	800ac10 <ld_word>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fe:	891b      	ldrh	r3, [r3, #8]
 800c300:	f003 030f 	and.w	r3, r3, #15
 800c304:	b29b      	uxth	r3, r3
 800c306:	2b00      	cmp	r3, #0
 800c308:	d001      	beq.n	800c30e <find_volume+0x25e>
 800c30a:	230d      	movs	r3, #13
 800c30c:	e119      	b.n	800c542 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c310:	3334      	adds	r3, #52	; 0x34
 800c312:	3313      	adds	r3, #19
 800c314:	4618      	mov	r0, r3
 800c316:	f7fe fc7b 	bl	800ac10 <ld_word>
 800c31a:	4603      	mov	r3, r0
 800c31c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c31e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c320:	2b00      	cmp	r3, #0
 800c322:	d106      	bne.n	800c332 <find_volume+0x282>
 800c324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c326:	3334      	adds	r3, #52	; 0x34
 800c328:	3320      	adds	r3, #32
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe fc88 	bl	800ac40 <ld_dword>
 800c330:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c334:	3334      	adds	r3, #52	; 0x34
 800c336:	330e      	adds	r3, #14
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fe fc69 	bl	800ac10 <ld_word>
 800c33e:	4603      	mov	r3, r0
 800c340:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c344:	2b00      	cmp	r3, #0
 800c346:	d101      	bne.n	800c34c <find_volume+0x29c>
 800c348:	230d      	movs	r3, #13
 800c34a:	e0fa      	b.n	800c542 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c34c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c350:	4413      	add	r3, r2
 800c352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c354:	8912      	ldrh	r2, [r2, #8]
 800c356:	0912      	lsrs	r2, r2, #4
 800c358:	b292      	uxth	r2, r2
 800c35a:	4413      	add	r3, r2
 800c35c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c35e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	429a      	cmp	r2, r3
 800c364:	d204      	bcs.n	800c370 <find_volume+0x2c0>
 800c366:	230d      	movs	r3, #13
 800c368:	e0eb      	b.n	800c542 <find_volume+0x492>
 800c36a:	bf00      	nop
 800c36c:	20000d0c 	.word	0x20000d0c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c374:	1ad3      	subs	r3, r2, r3
 800c376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c378:	8952      	ldrh	r2, [r2, #10]
 800c37a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c37e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <find_volume+0x2da>
 800c386:	230d      	movs	r3, #13
 800c388:	e0db      	b.n	800c542 <find_volume+0x492>
		fmt = FS_FAT32;
 800c38a:	2303      	movs	r3, #3
 800c38c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c396:	4293      	cmp	r3, r2
 800c398:	d802      	bhi.n	800c3a0 <find_volume+0x2f0>
 800c39a:	2302      	movs	r3, #2
 800c39c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d802      	bhi.n	800c3b0 <find_volume+0x300>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b2:	1c9a      	adds	r2, r3, #2
 800c3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3bc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c3be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c3c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3c2:	441a      	add	r2, r3
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c3c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3cc:	441a      	add	r2, r3
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c3d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	d11e      	bne.n	800c418 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3dc:	3334      	adds	r3, #52	; 0x34
 800c3de:	332a      	adds	r3, #42	; 0x2a
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fe fc15 	bl	800ac10 <ld_word>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d001      	beq.n	800c3f0 <find_volume+0x340>
 800c3ec:	230d      	movs	r3, #13
 800c3ee:	e0a8      	b.n	800c542 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	891b      	ldrh	r3, [r3, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d001      	beq.n	800c3fc <find_volume+0x34c>
 800c3f8:	230d      	movs	r3, #13
 800c3fa:	e0a2      	b.n	800c542 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	3334      	adds	r3, #52	; 0x34
 800c400:	332c      	adds	r3, #44	; 0x2c
 800c402:	4618      	mov	r0, r3
 800c404:	f7fe fc1c 	bl	800ac40 <ld_dword>
 800c408:	4602      	mov	r2, r0
 800c40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	647b      	str	r3, [r7, #68]	; 0x44
 800c416:	e01f      	b.n	800c458 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	891b      	ldrh	r3, [r3, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <find_volume+0x374>
 800c420:	230d      	movs	r3, #13
 800c422:	e08e      	b.n	800c542 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c42a:	441a      	add	r2, r3
 800c42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c430:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c434:	2b02      	cmp	r3, #2
 800c436:	d103      	bne.n	800c440 <find_volume+0x390>
 800c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	005b      	lsls	r3, r3, #1
 800c43e:	e00a      	b.n	800c456 <find_volume+0x3a6>
 800c440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c442:	699a      	ldr	r2, [r3, #24]
 800c444:	4613      	mov	r3, r2
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	4413      	add	r3, r2
 800c44a:	085a      	lsrs	r2, r3, #1
 800c44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44e:	699b      	ldr	r3, [r3, #24]
 800c450:	f003 0301 	and.w	r3, r3, #1
 800c454:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c456:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45a:	69da      	ldr	r2, [r3, #28]
 800c45c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c45e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c462:	0a5b      	lsrs	r3, r3, #9
 800c464:	429a      	cmp	r2, r3
 800c466:	d201      	bcs.n	800c46c <find_volume+0x3bc>
 800c468:	230d      	movs	r3, #13
 800c46a:	e06a      	b.n	800c542 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c472:	615a      	str	r2, [r3, #20]
 800c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c476:	695a      	ldr	r2, [r3, #20]
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47e:	2280      	movs	r2, #128	; 0x80
 800c480:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c482:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c486:	2b03      	cmp	r3, #3
 800c488:	d149      	bne.n	800c51e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48c:	3334      	adds	r3, #52	; 0x34
 800c48e:	3330      	adds	r3, #48	; 0x30
 800c490:	4618      	mov	r0, r3
 800c492:	f7fe fbbd 	bl	800ac10 <ld_word>
 800c496:	4603      	mov	r3, r0
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d140      	bne.n	800c51e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c49e:	3301      	adds	r3, #1
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c4a4:	f7fe fe96 	bl	800b1d4 <move_window>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d137      	bne.n	800c51e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800c4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b6:	3334      	adds	r3, #52	; 0x34
 800c4b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fe fba7 	bl	800ac10 <ld_word>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d127      	bne.n	800c51e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d0:	3334      	adds	r3, #52	; 0x34
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fe fbb4 	bl	800ac40 <ld_dword>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	4a1c      	ldr	r2, [pc, #112]	; (800c54c <find_volume+0x49c>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d11e      	bne.n	800c51e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e2:	3334      	adds	r3, #52	; 0x34
 800c4e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fe fba9 	bl	800ac40 <ld_dword>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	4a17      	ldr	r2, [pc, #92]	; (800c550 <find_volume+0x4a0>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d113      	bne.n	800c51e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f8:	3334      	adds	r3, #52	; 0x34
 800c4fa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fe fb9e 	bl	800ac40 <ld_dword>
 800c504:	4602      	mov	r2, r0
 800c506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c508:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50c:	3334      	adds	r3, #52	; 0x34
 800c50e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c512:	4618      	mov	r0, r3
 800c514:	f7fe fb94 	bl	800ac40 <ld_dword>
 800c518:	4602      	mov	r2, r0
 800c51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c520:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c524:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c526:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <find_volume+0x4a4>)
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	3301      	adds	r3, #1
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	4b09      	ldr	r3, [pc, #36]	; (800c554 <find_volume+0x4a4>)
 800c530:	801a      	strh	r2, [r3, #0]
 800c532:	4b08      	ldr	r3, [pc, #32]	; (800c554 <find_volume+0x4a4>)
 800c534:	881a      	ldrh	r2, [r3, #0]
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c53a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c53c:	f7fe fde2 	bl	800b104 <clear_lock>
#endif
	return FR_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3758      	adds	r7, #88	; 0x58
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	41615252 	.word	0x41615252
 800c550:	61417272 	.word	0x61417272
 800c554:	20000d10 	.word	0x20000d10

0800c558 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c562:	2309      	movs	r3, #9
 800c564:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d02e      	beq.n	800c5ca <validate+0x72>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d02a      	beq.n	800c5ca <validate+0x72>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d025      	beq.n	800c5ca <validate+0x72>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	889a      	ldrh	r2, [r3, #4]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	88db      	ldrh	r3, [r3, #6]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d11e      	bne.n	800c5ca <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f7fe fc3d 	bl	800ae10 <lock_fs>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d014      	beq.n	800c5c6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	785b      	ldrb	r3, [r3, #1]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fe fa96 	bl	800aad4 <disk_status>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	f003 0301 	and.w	r3, r3, #1
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d102      	bne.n	800c5b8 <validate+0x60>
				res = FR_OK;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	73fb      	strb	r3, [r7, #15]
 800c5b6:	e008      	b.n	800c5ca <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2100      	movs	r1, #0
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fe fc3c 	bl	800ae3c <unlock_fs>
 800c5c4:	e001      	b.n	800c5ca <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c5c6:	230f      	movs	r3, #15
 800c5c8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d102      	bne.n	800c5d6 <validate+0x7e>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	e000      	b.n	800c5d8 <validate+0x80>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	683a      	ldr	r2, [r7, #0]
 800c5da:	6013      	str	r3, [r2, #0]
	return res;
 800c5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
	...

0800c5e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c5fa:	f107 0310 	add.w	r3, r7, #16
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7ff fcbb 	bl	800bf7a <get_ldnumber>
 800c604:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	da01      	bge.n	800c610 <f_mount+0x28>
 800c60c:	230b      	movs	r3, #11
 800c60e:	e048      	b.n	800c6a2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c610:	4a26      	ldr	r2, [pc, #152]	; (800c6ac <f_mount+0xc4>)
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c618:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00f      	beq.n	800c640 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c620:	69b8      	ldr	r0, [r7, #24]
 800c622:	f7fe fd6f 	bl	800b104 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f001 f902 	bl	800d834 <ff_del_syncobj>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d101      	bne.n	800c63a <f_mount+0x52>
 800c636:	2302      	movs	r3, #2
 800c638:	e033      	b.n	800c6a2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	2200      	movs	r2, #0
 800c63e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00f      	beq.n	800c666 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2200      	movs	r2, #0
 800c64a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	330c      	adds	r3, #12
 800c654:	4619      	mov	r1, r3
 800c656:	4610      	mov	r0, r2
 800c658:	f001 f8d3 	bl	800d802 <ff_cre_syncobj>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d101      	bne.n	800c666 <f_mount+0x7e>
 800c662:	2302      	movs	r3, #2
 800c664:	e01d      	b.n	800c6a2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	4910      	ldr	r1, [pc, #64]	; (800c6ac <f_mount+0xc4>)
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d002      	beq.n	800c67c <f_mount+0x94>
 800c676:	79fb      	ldrb	r3, [r7, #7]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d001      	beq.n	800c680 <f_mount+0x98>
 800c67c:	2300      	movs	r3, #0
 800c67e:	e010      	b.n	800c6a2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c680:	f107 010c 	add.w	r1, r7, #12
 800c684:	f107 0308 	add.w	r3, r7, #8
 800c688:	2200      	movs	r2, #0
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7ff fd10 	bl	800c0b0 <find_volume>
 800c690:	4603      	mov	r3, r0
 800c692:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	7dfa      	ldrb	r2, [r7, #23]
 800c698:	4611      	mov	r1, r2
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fe fbce 	bl	800ae3c <unlock_fs>
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3720      	adds	r7, #32
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	20000d0c 	.word	0x20000d0c

0800c6b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b098      	sub	sp, #96	; 0x60
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d101      	bne.n	800c6c8 <f_open+0x18>
 800c6c4:	2309      	movs	r3, #9
 800c6c6:	e1b4      	b.n	800ca32 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c6c8:	79fb      	ldrb	r3, [r7, #7]
 800c6ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c6d0:	79fa      	ldrb	r2, [r7, #7]
 800c6d2:	f107 0110 	add.w	r1, r7, #16
 800c6d6:	f107 0308 	add.w	r3, r7, #8
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7ff fce8 	bl	800c0b0 <find_volume>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c6e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f040 8191 	bne.w	800ca12 <f_open+0x362>
		dj.obj.fs = fs;
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	f107 0314 	add.w	r3, r7, #20
 800c6fa:	4611      	mov	r1, r2
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7ff fbcb 	bl	800be98 <follow_path>
 800c702:	4603      	mov	r3, r0
 800c704:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d11a      	bne.n	800c746 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c710:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c714:	b25b      	sxtb	r3, r3
 800c716:	2b00      	cmp	r3, #0
 800c718:	da03      	bge.n	800c722 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c71a:	2306      	movs	r3, #6
 800c71c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c720:	e011      	b.n	800c746 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c722:	79fb      	ldrb	r3, [r7, #7]
 800c724:	f023 0301 	bic.w	r3, r3, #1
 800c728:	2b00      	cmp	r3, #0
 800c72a:	bf14      	ite	ne
 800c72c:	2301      	movne	r3, #1
 800c72e:	2300      	moveq	r3, #0
 800c730:	b2db      	uxtb	r3, r3
 800c732:	461a      	mov	r2, r3
 800c734:	f107 0314 	add.w	r3, r7, #20
 800c738:	4611      	mov	r1, r2
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fe fb9a 	bl	800ae74 <chk_lock>
 800c740:	4603      	mov	r3, r0
 800c742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c746:	79fb      	ldrb	r3, [r7, #7]
 800c748:	f003 031c 	and.w	r3, r3, #28
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d07f      	beq.n	800c850 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c754:	2b00      	cmp	r3, #0
 800c756:	d017      	beq.n	800c788 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c75c:	2b04      	cmp	r3, #4
 800c75e:	d10e      	bne.n	800c77e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c760:	f7fe fbe4 	bl	800af2c <enq_lock>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d006      	beq.n	800c778 <f_open+0xc8>
 800c76a:	f107 0314 	add.w	r3, r7, #20
 800c76e:	4618      	mov	r0, r3
 800c770:	f7ff facb 	bl	800bd0a <dir_register>
 800c774:	4603      	mov	r3, r0
 800c776:	e000      	b.n	800c77a <f_open+0xca>
 800c778:	2312      	movs	r3, #18
 800c77a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c77e:	79fb      	ldrb	r3, [r7, #7]
 800c780:	f043 0308 	orr.w	r3, r3, #8
 800c784:	71fb      	strb	r3, [r7, #7]
 800c786:	e010      	b.n	800c7aa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c788:	7ebb      	ldrb	r3, [r7, #26]
 800c78a:	f003 0311 	and.w	r3, r3, #17
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <f_open+0xea>
					res = FR_DENIED;
 800c792:	2307      	movs	r3, #7
 800c794:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c798:	e007      	b.n	800c7aa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c79a:	79fb      	ldrb	r3, [r7, #7]
 800c79c:	f003 0304 	and.w	r3, r3, #4
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d002      	beq.n	800c7aa <f_open+0xfa>
 800c7a4:	2308      	movs	r3, #8
 800c7a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c7aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d168      	bne.n	800c884 <f_open+0x1d4>
 800c7b2:	79fb      	ldrb	r3, [r7, #7]
 800c7b4:	f003 0308 	and.w	r3, r3, #8
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d063      	beq.n	800c884 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c7bc:	f7fd ff34 	bl	800a628 <get_fattime>
 800c7c0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c4:	330e      	adds	r3, #14
 800c7c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7fe fa77 	bl	800acbc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d0:	3316      	adds	r3, #22
 800c7d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7fe fa71 	bl	800acbc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7dc:	330b      	adds	r3, #11
 800c7de:	2220      	movs	r2, #32
 800c7e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7e6:	4611      	mov	r1, r2
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7ff f9fa 	bl	800bbe2 <ld_clust>
 800c7ee:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7ff fa12 	bl	800bc20 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7fe:	331c      	adds	r3, #28
 800c800:	2100      	movs	r1, #0
 800c802:	4618      	mov	r0, r3
 800c804:	f7fe fa5a 	bl	800acbc <st_dword>
					fs->wflag = 1;
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	2201      	movs	r2, #1
 800c80c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c810:	2b00      	cmp	r3, #0
 800c812:	d037      	beq.n	800c884 <f_open+0x1d4>
						dw = fs->winsect;
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c818:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c81a:	f107 0314 	add.w	r3, r7, #20
 800c81e:	2200      	movs	r2, #0
 800c820:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe ff25 	bl	800b672 <remove_chain>
 800c828:	4603      	mov	r3, r0
 800c82a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c82e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c832:	2b00      	cmp	r3, #0
 800c834:	d126      	bne.n	800c884 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe fcca 	bl	800b1d4 <move_window>
 800c840:	4603      	mov	r3, r0
 800c842:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c84a:	3a01      	subs	r2, #1
 800c84c:	611a      	str	r2, [r3, #16]
 800c84e:	e019      	b.n	800c884 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c854:	2b00      	cmp	r3, #0
 800c856:	d115      	bne.n	800c884 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c858:	7ebb      	ldrb	r3, [r7, #26]
 800c85a:	f003 0310 	and.w	r3, r3, #16
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d003      	beq.n	800c86a <f_open+0x1ba>
					res = FR_NO_FILE;
 800c862:	2304      	movs	r3, #4
 800c864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c868:	e00c      	b.n	800c884 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	f003 0302 	and.w	r3, r3, #2
 800c870:	2b00      	cmp	r3, #0
 800c872:	d007      	beq.n	800c884 <f_open+0x1d4>
 800c874:	7ebb      	ldrb	r3, [r7, #26]
 800c876:	f003 0301 	and.w	r3, r3, #1
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <f_open+0x1d4>
						res = FR_DENIED;
 800c87e:	2307      	movs	r3, #7
 800c880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c884:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d128      	bne.n	800c8de <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c88c:	79fb      	ldrb	r3, [r7, #7]
 800c88e:	f003 0308 	and.w	r3, r3, #8
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c89c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c8a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c8ac:	79fb      	ldrb	r3, [r7, #7]
 800c8ae:	f023 0301 	bic.w	r3, r3, #1
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	bf14      	ite	ne
 800c8b6:	2301      	movne	r3, #1
 800c8b8:	2300      	moveq	r3, #0
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	461a      	mov	r2, r3
 800c8be:	f107 0314 	add.w	r3, r7, #20
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fe fb53 	bl	800af70 <inc_lock>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d102      	bne.n	800c8de <f_open+0x22e>
 800c8d8:	2302      	movs	r3, #2
 800c8da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c8de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f040 8095 	bne.w	800ca12 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7ff f977 	bl	800bbe2 <ld_clust>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8fc:	331c      	adds	r3, #28
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7fe f99e 	bl	800ac40 <ld_dword>
 800c904:	4602      	mov	r2, r0
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2200      	movs	r2, #0
 800c90e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c910:	693a      	ldr	r2, [r7, #16]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	88da      	ldrh	r2, [r3, #6]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	79fa      	ldrb	r2, [r7, #7]
 800c922:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2200      	movs	r2, #0
 800c928:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2200      	movs	r2, #0
 800c92e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3330      	adds	r3, #48	; 0x30
 800c93a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c93e:	2100      	movs	r1, #0
 800c940:	4618      	mov	r0, r3
 800c942:	f7fe fa08 	bl	800ad56 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c946:	79fb      	ldrb	r3, [r7, #7]
 800c948:	f003 0320 	and.w	r3, r3, #32
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d060      	beq.n	800ca12 <f_open+0x362>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d05c      	beq.n	800ca12 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	68da      	ldr	r2, [r3, #12]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	895b      	ldrh	r3, [r3, #10]
 800c964:	025b      	lsls	r3, r3, #9
 800c966:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	657b      	str	r3, [r7, #84]	; 0x54
 800c974:	e016      	b.n	800c9a4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7fe fce5 	bl	800b34a <get_fat>
 800c980:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c984:	2b01      	cmp	r3, #1
 800c986:	d802      	bhi.n	800c98e <f_open+0x2de>
 800c988:	2302      	movs	r3, #2
 800c98a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c98e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c994:	d102      	bne.n	800c99c <f_open+0x2ec>
 800c996:	2301      	movs	r3, #1
 800c998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c99c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c99e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	657b      	str	r3, [r7, #84]	; 0x54
 800c9a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d103      	bne.n	800c9b4 <f_open+0x304>
 800c9ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c9ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d8e0      	bhi.n	800c976 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c9b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c9ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d127      	bne.n	800ca12 <f_open+0x362>
 800c9c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d022      	beq.n	800ca12 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fe fc9b 	bl	800b30c <clust2sect>
 800c9d6:	6478      	str	r0, [r7, #68]	; 0x44
 800c9d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d103      	bne.n	800c9e6 <f_open+0x336>
						res = FR_INT_ERR;
 800c9de:	2302      	movs	r3, #2
 800c9e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c9e4:	e015      	b.n	800ca12 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c9e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9e8:	0a5a      	lsrs	r2, r3, #9
 800c9ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9ec:	441a      	add	r2, r3
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	7858      	ldrb	r0, [r3, #1]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6a1a      	ldr	r2, [r3, #32]
 800ca00:	2301      	movs	r3, #1
 800ca02:	f7fe f8a7 	bl	800ab54 <disk_read>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <f_open+0x362>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ca12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d002      	beq.n	800ca20 <f_open+0x370>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ca26:	4611      	mov	r1, r2
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe fa07 	bl	800ae3c <unlock_fs>
 800ca2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3760      	adds	r7, #96	; 0x60
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b08c      	sub	sp, #48	; 0x30
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	60f8      	str	r0, [r7, #12]
 800ca42:	60b9      	str	r1, [r7, #8]
 800ca44:	607a      	str	r2, [r7, #4]
 800ca46:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f107 0210 	add.w	r2, r7, #16
 800ca58:	4611      	mov	r1, r2
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7ff fd7c 	bl	800c558 <validate>
 800ca60:	4603      	mov	r3, r0
 800ca62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ca66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d107      	bne.n	800ca7e <f_write+0x44>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	7d5b      	ldrb	r3, [r3, #21]
 800ca72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ca76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d009      	beq.n	800ca92 <f_write+0x58>
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ca84:	4611      	mov	r1, r2
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fe f9d8 	bl	800ae3c <unlock_fs>
 800ca8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca90:	e173      	b.n	800cd7a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	7d1b      	ldrb	r3, [r3, #20]
 800ca96:	f003 0302 	and.w	r3, r3, #2
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d106      	bne.n	800caac <f_write+0x72>
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	2107      	movs	r1, #7
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fe f9ca 	bl	800ae3c <unlock_fs>
 800caa8:	2307      	movs	r3, #7
 800caaa:	e166      	b.n	800cd7a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	699a      	ldr	r2, [r3, #24]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	441a      	add	r2, r3
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	699b      	ldr	r3, [r3, #24]
 800cab8:	429a      	cmp	r2, r3
 800caba:	f080 814b 	bcs.w	800cd54 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	699b      	ldr	r3, [r3, #24]
 800cac2:	43db      	mvns	r3, r3
 800cac4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cac6:	e145      	b.n	800cd54 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	699b      	ldr	r3, [r3, #24]
 800cacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f040 8101 	bne.w	800ccd8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	699b      	ldr	r3, [r3, #24]
 800cada:	0a5b      	lsrs	r3, r3, #9
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	8952      	ldrh	r2, [r2, #10]
 800cae0:	3a01      	subs	r2, #1
 800cae2:	4013      	ands	r3, r2
 800cae4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d14d      	bne.n	800cb88 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	699b      	ldr	r3, [r3, #24]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10c      	bne.n	800cb0e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d11a      	bne.n	800cb36 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2100      	movs	r1, #0
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7fe fe19 	bl	800b73c <create_chain>
 800cb0a:	62b8      	str	r0, [r7, #40]	; 0x28
 800cb0c:	e013      	b.n	800cb36 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d007      	beq.n	800cb26 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	699b      	ldr	r3, [r3, #24]
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f7fe fea5 	bl	800b86c <clmt_clust>
 800cb22:	62b8      	str	r0, [r7, #40]	; 0x28
 800cb24:	e007      	b.n	800cb36 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	69db      	ldr	r3, [r3, #28]
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	4610      	mov	r0, r2
 800cb30:	f7fe fe04 	bl	800b73c <create_chain>
 800cb34:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f000 8110 	beq.w	800cd5e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d109      	bne.n	800cb58 <f_write+0x11e>
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2202      	movs	r2, #2
 800cb48:	755a      	strb	r2, [r3, #21]
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	2102      	movs	r1, #2
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fe f974 	bl	800ae3c <unlock_fs>
 800cb54:	2302      	movs	r3, #2
 800cb56:	e110      	b.n	800cd7a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb5e:	d109      	bne.n	800cb74 <f_write+0x13a>
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2201      	movs	r2, #1
 800cb64:	755a      	strb	r2, [r3, #21]
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	2101      	movs	r1, #1
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fe f966 	bl	800ae3c <unlock_fs>
 800cb70:	2301      	movs	r3, #1
 800cb72:	e102      	b.n	800cd7a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb78:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d102      	bne.n	800cb88 <f_write+0x14e>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb86:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	7d1b      	ldrb	r3, [r3, #20]
 800cb8c:	b25b      	sxtb	r3, r3
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	da1d      	bge.n	800cbce <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	7858      	ldrb	r0, [r3, #1]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6a1a      	ldr	r2, [r3, #32]
 800cba0:	2301      	movs	r3, #1
 800cba2:	f7fd fff7 	bl	800ab94 <disk_write>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d009      	beq.n	800cbc0 <f_write+0x186>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	755a      	strb	r2, [r3, #21]
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fe f940 	bl	800ae3c <unlock_fs>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e0dc      	b.n	800cd7a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	7d1b      	ldrb	r3, [r3, #20]
 800cbc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cbce:	693a      	ldr	r2, [r7, #16]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	69db      	ldr	r3, [r3, #28]
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	f7fe fb98 	bl	800b30c <clust2sect>
 800cbdc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d109      	bne.n	800cbf8 <f_write+0x1be>
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2202      	movs	r2, #2
 800cbe8:	755a      	strb	r2, [r3, #21]
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2102      	movs	r1, #2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7fe f924 	bl	800ae3c <unlock_fs>
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	e0c0      	b.n	800cd7a <f_write+0x340>
			sect += csect;
 800cbf8:	697a      	ldr	r2, [r7, #20]
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	0a5b      	lsrs	r3, r3, #9
 800cc04:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cc06:	6a3b      	ldr	r3, [r7, #32]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d041      	beq.n	800cc90 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cc0c:	69ba      	ldr	r2, [r7, #24]
 800cc0e:	6a3b      	ldr	r3, [r7, #32]
 800cc10:	4413      	add	r3, r2
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	8952      	ldrh	r2, [r2, #10]
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d905      	bls.n	800cc26 <f_write+0x1ec>
					cc = fs->csize - csect;
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	895b      	ldrh	r3, [r3, #10]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	1ad3      	subs	r3, r2, r3
 800cc24:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	7858      	ldrb	r0, [r3, #1]
 800cc2a:	6a3b      	ldr	r3, [r7, #32]
 800cc2c:	697a      	ldr	r2, [r7, #20]
 800cc2e:	69f9      	ldr	r1, [r7, #28]
 800cc30:	f7fd ffb0 	bl	800ab94 <disk_write>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d009      	beq.n	800cc4e <f_write+0x214>
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	755a      	strb	r2, [r3, #21]
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	2101      	movs	r1, #1
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7fe f8f9 	bl	800ae3c <unlock_fs>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e095      	b.n	800cd7a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6a1a      	ldr	r2, [r3, #32]
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	6a3a      	ldr	r2, [r7, #32]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d915      	bls.n	800cc88 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6a1a      	ldr	r2, [r3, #32]
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	025b      	lsls	r3, r3, #9
 800cc6c:	69fa      	ldr	r2, [r7, #28]
 800cc6e:	4413      	add	r3, r2
 800cc70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc74:	4619      	mov	r1, r3
 800cc76:	f7fe f84d 	bl	800ad14 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	7d1b      	ldrb	r3, [r3, #20]
 800cc7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cc88:	6a3b      	ldr	r3, [r7, #32]
 800cc8a:	025b      	lsls	r3, r3, #9
 800cc8c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cc8e:	e044      	b.n	800cd1a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6a1b      	ldr	r3, [r3, #32]
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d01b      	beq.n	800ccd2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	699a      	ldr	r2, [r3, #24]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d215      	bcs.n	800ccd2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	7858      	ldrb	r0, [r3, #1]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	f7fd ff4e 	bl	800ab54 <disk_read>
 800ccb8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d009      	beq.n	800ccd2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	755a      	strb	r2, [r3, #21]
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	2101      	movs	r1, #1
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7fe f8b7 	bl	800ae3c <unlock_fs>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e053      	b.n	800cd7a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	697a      	ldr	r2, [r7, #20]
 800ccd6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	699b      	ldr	r3, [r3, #24]
 800ccdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cce0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cce4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d901      	bls.n	800ccf2 <f_write+0x2b8>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd00:	4413      	add	r3, r2
 800cd02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd04:	69f9      	ldr	r1, [r7, #28]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fe f804 	bl	800ad14 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	7d1b      	ldrb	r3, [r3, #20]
 800cd10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd14:	b2da      	uxtb	r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cd1a:	69fa      	ldr	r2, [r7, #28]
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	4413      	add	r3, r2
 800cd20:	61fb      	str	r3, [r7, #28]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	699a      	ldr	r2, [r3, #24]
 800cd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd28:	441a      	add	r2, r3
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	619a      	str	r2, [r3, #24]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	68da      	ldr	r2, [r3, #12]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	bf38      	it	cc
 800cd3a:	461a      	movcc	r2, r3
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	60da      	str	r2, [r3, #12]
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd46:	441a      	add	r2, r3
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	601a      	str	r2, [r3, #0]
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	f47f aeb6 	bne.w	800cac8 <f_write+0x8e>
 800cd5c:	e000      	b.n	800cd60 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cd5e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	7d1b      	ldrb	r3, [r3, #20]
 800cd64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd68:	b2da      	uxtb	r2, r3
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	2100      	movs	r1, #0
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fe f862 	bl	800ae3c <unlock_fs>
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3730      	adds	r7, #48	; 0x30
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b086      	sub	sp, #24
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f107 0208 	add.w	r2, r7, #8
 800cd90:	4611      	mov	r1, r2
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff fbe0 	bl	800c558 <validate>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d16d      	bne.n	800ce7e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	7d1b      	ldrb	r3, [r3, #20]
 800cda6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d067      	beq.n	800ce7e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	7d1b      	ldrb	r3, [r3, #20]
 800cdb2:	b25b      	sxtb	r3, r3
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	da1a      	bge.n	800cdee <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	7858      	ldrb	r0, [r3, #1]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a1a      	ldr	r2, [r3, #32]
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	f7fd fee4 	bl	800ab94 <disk_write>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d006      	beq.n	800cde0 <f_sync+0x5e>
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	2101      	movs	r1, #1
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7fe f830 	bl	800ae3c <unlock_fs>
 800cddc:	2301      	movs	r3, #1
 800cdde:	e055      	b.n	800ce8c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	7d1b      	ldrb	r3, [r3, #20]
 800cde4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cdee:	f7fd fc1b 	bl	800a628 <get_fattime>
 800cdf2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	f7fe f9e9 	bl	800b1d4 <move_window>
 800ce02:	4603      	mov	r3, r0
 800ce04:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ce06:	7dfb      	ldrb	r3, [r7, #23]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d138      	bne.n	800ce7e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce10:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	330b      	adds	r3, #11
 800ce16:	781a      	ldrb	r2, [r3, #0]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	330b      	adds	r3, #11
 800ce1c:	f042 0220 	orr.w	r2, r2, #32
 800ce20:	b2d2      	uxtb	r2, r2
 800ce22:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	68f9      	ldr	r1, [r7, #12]
 800ce30:	f7fe fef6 	bl	800bc20 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f103 021c 	add.w	r2, r3, #28
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	4610      	mov	r0, r2
 800ce42:	f7fd ff3b 	bl	800acbc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	3316      	adds	r3, #22
 800ce4a:	6939      	ldr	r1, [r7, #16]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fd ff35 	bl	800acbc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	3312      	adds	r3, #18
 800ce56:	2100      	movs	r1, #0
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fd ff14 	bl	800ac86 <st_word>
					fs->wflag = 1;
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	2201      	movs	r2, #1
 800ce62:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe f9e2 	bl	800b230 <sync_fs>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	7d1b      	ldrb	r3, [r3, #20]
 800ce74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	7dfa      	ldrb	r2, [r7, #23]
 800ce82:	4611      	mov	r1, r2
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fd ffd9 	bl	800ae3c <unlock_fs>
 800ce8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3718      	adds	r7, #24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7ff ff70 	bl	800cd82 <f_sync>
 800cea2:	4603      	mov	r3, r0
 800cea4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d11d      	bne.n	800cee8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f107 0208 	add.w	r2, r7, #8
 800ceb2:	4611      	mov	r1, r2
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7ff fb4f 	bl	800c558 <validate>
 800ceba:	4603      	mov	r3, r0
 800cebc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cebe:	7bfb      	ldrb	r3, [r7, #15]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d111      	bne.n	800cee8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	691b      	ldr	r3, [r3, #16]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fe f8df 	bl	800b08c <dec_lock>
 800cece:	4603      	mov	r3, r0
 800ced0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ced2:	7bfb      	ldrb	r3, [r7, #15]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d102      	bne.n	800cede <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	2100      	movs	r1, #0
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fd ffaa 	bl	800ae3c <unlock_fs>
#endif
		}
	}
	return res;
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3710      	adds	r7, #16
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
	...

0800cef4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800cef4:	b590      	push	{r4, r7, lr}
 800cef6:	b09d      	sub	sp, #116	; 0x74
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	607a      	str	r2, [r7, #4]
 800cefe:	603b      	str	r3, [r7, #0]
 800cf00:	460b      	mov	r3, r1
 800cf02:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800cf04:	2301      	movs	r3, #1
 800cf06:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800cf08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf0c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800cf0e:	f107 030c 	add.w	r3, r7, #12
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7ff f831 	bl	800bf7a <get_ldnumber>
 800cf18:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	da02      	bge.n	800cf26 <f_mkfs+0x32>
 800cf20:	230b      	movs	r3, #11
 800cf22:	f000 bc0d 	b.w	800d740 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800cf26:	4a94      	ldr	r2, [pc, #592]	; (800d178 <f_mkfs+0x284>)
 800cf28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d005      	beq.n	800cf3e <f_mkfs+0x4a>
 800cf32:	4a91      	ldr	r2, [pc, #580]	; (800d178 <f_mkfs+0x284>)
 800cf34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800cf3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf40:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800cf44:	2300      	movs	r3, #0
 800cf46:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800cf4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fd fdda 	bl	800ab08 <disk_initialize>
 800cf54:	4603      	mov	r3, r0
 800cf56:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800cf5a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d001      	beq.n	800cf6a <f_mkfs+0x76>
 800cf66:	2303      	movs	r3, #3
 800cf68:	e3ea      	b.n	800d740 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800cf6a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cf6e:	f003 0304 	and.w	r3, r3, #4
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <f_mkfs+0x86>
 800cf76:	230a      	movs	r3, #10
 800cf78:	e3e2      	b.n	800d740 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800cf7a:	f107 0214 	add.w	r2, r7, #20
 800cf7e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf82:	2103      	movs	r1, #3
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7fd fe25 	bl	800abd4 <disk_ioctl>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d10c      	bne.n	800cfaa <f_mkfs+0xb6>
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d009      	beq.n	800cfaa <f_mkfs+0xb6>
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf9c:	d805      	bhi.n	800cfaa <f_mkfs+0xb6>
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	1e5a      	subs	r2, r3, #1
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d001      	beq.n	800cfae <f_mkfs+0xba>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800cfae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfb2:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d003      	beq.n	800cfc2 <f_mkfs+0xce>
 800cfba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d309      	bcc.n	800cfd6 <f_mkfs+0xe2>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cfc8:	d805      	bhi.n	800cfd6 <f_mkfs+0xe2>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	1e5a      	subs	r2, r3, #1
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d001      	beq.n	800cfda <f_mkfs+0xe6>
 800cfd6:	2313      	movs	r3, #19
 800cfd8:	e3b2      	b.n	800d740 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800cfda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfe2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800cfe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cfea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cfee:	fbb2 f3f3 	udiv	r3, r2, r3
 800cff2:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800cff4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff8:	fb02 f303 	mul.w	r3, r2, r3
 800cffc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800cffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d000:	2b00      	cmp	r3, #0
 800d002:	d101      	bne.n	800d008 <f_mkfs+0x114>
 800d004:	230e      	movs	r3, #14
 800d006:	e39b      	b.n	800d740 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800d008:	f107 0210 	add.w	r2, r7, #16
 800d00c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d010:	2101      	movs	r1, #1
 800d012:	4618      	mov	r0, r3
 800d014:	f7fd fdde 	bl	800abd4 <disk_ioctl>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d001      	beq.n	800d022 <f_mkfs+0x12e>
 800d01e:	2301      	movs	r3, #1
 800d020:	e38e      	b.n	800d740 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800d022:	7afb      	ldrb	r3, [r7, #11]
 800d024:	f003 0308 	and.w	r3, r3, #8
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <f_mkfs+0x13c>
 800d02c:	2300      	movs	r3, #0
 800d02e:	e000      	b.n	800d032 <f_mkfs+0x13e>
 800d030:	233f      	movs	r3, #63	; 0x3f
 800d032:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d038:	429a      	cmp	r2, r3
 800d03a:	d901      	bls.n	800d040 <f_mkfs+0x14c>
 800d03c:	230e      	movs	r3, #14
 800d03e:	e37f      	b.n	800d740 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	2b7f      	cmp	r3, #127	; 0x7f
 800d04c:	d801      	bhi.n	800d052 <f_mkfs+0x15e>
 800d04e:	230e      	movs	r3, #14
 800d050:	e376      	b.n	800d740 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b80      	cmp	r3, #128	; 0x80
 800d056:	d901      	bls.n	800d05c <f_mkfs+0x168>
 800d058:	2313      	movs	r3, #19
 800d05a:	e371      	b.n	800d740 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800d05c:	7afb      	ldrb	r3, [r7, #11]
 800d05e:	f003 0302 	and.w	r3, r3, #2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00d      	beq.n	800d082 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800d066:	7afb      	ldrb	r3, [r7, #11]
 800d068:	f003 0307 	and.w	r3, r3, #7
 800d06c:	2b02      	cmp	r3, #2
 800d06e:	d004      	beq.n	800d07a <f_mkfs+0x186>
 800d070:	7afb      	ldrb	r3, [r7, #11]
 800d072:	f003 0301 	and.w	r3, r3, #1
 800d076:	2b00      	cmp	r3, #0
 800d078:	d103      	bne.n	800d082 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800d07a:	2303      	movs	r3, #3
 800d07c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d080:	e009      	b.n	800d096 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800d082:	7afb      	ldrb	r3, [r7, #11]
 800d084:	f003 0301 	and.w	r3, r3, #1
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d101      	bne.n	800d090 <f_mkfs+0x19c>
 800d08c:	2313      	movs	r3, #19
 800d08e:	e357      	b.n	800d740 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800d090:	2302      	movs	r3, #2
 800d092:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800d09a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	d13c      	bne.n	800d11c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800d0a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d11b      	bne.n	800d0e0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	0c5b      	lsrs	r3, r3, #17
 800d0ac:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	653b      	str	r3, [r7, #80]	; 0x50
 800d0b6:	e005      	b.n	800d0c4 <f_mkfs+0x1d0>
 800d0b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0c0:	005b      	lsls	r3, r3, #1
 800d0c2:	653b      	str	r3, [r7, #80]	; 0x50
 800d0c4:	4a2d      	ldr	r2, [pc, #180]	; (800d17c <f_mkfs+0x288>)
 800d0c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d007      	beq.n	800d0e0 <f_mkfs+0x1ec>
 800d0d0:	4a2a      	ldr	r2, [pc, #168]	; (800d17c <f_mkfs+0x288>)
 800d0d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d2eb      	bcs.n	800d0b8 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800d0e0:	693a      	ldr	r2, [r7, #16]
 800d0e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0e8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800d0ea:	6a3b      	ldr	r3, [r7, #32]
 800d0ec:	3302      	adds	r3, #2
 800d0ee:	009a      	lsls	r2, r3, #2
 800d0f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d0f2:	4413      	add	r3, r2
 800d0f4:	1e5a      	subs	r2, r3, #1
 800d0f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d0f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0fc:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800d0fe:	2320      	movs	r3, #32
 800d100:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800d102:	2300      	movs	r3, #0
 800d104:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d903      	bls.n	800d118 <f_mkfs+0x224>
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	4a1b      	ldr	r2, [pc, #108]	; (800d180 <f_mkfs+0x28c>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d952      	bls.n	800d1be <f_mkfs+0x2ca>
 800d118:	230e      	movs	r3, #14
 800d11a:	e311      	b.n	800d740 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800d11c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d11b      	bne.n	800d15a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	0b1b      	lsrs	r3, r3, #12
 800d126:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d128:	2300      	movs	r3, #0
 800d12a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d12c:	2301      	movs	r3, #1
 800d12e:	653b      	str	r3, [r7, #80]	; 0x50
 800d130:	e005      	b.n	800d13e <f_mkfs+0x24a>
 800d132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d134:	3301      	adds	r3, #1
 800d136:	64bb      	str	r3, [r7, #72]	; 0x48
 800d138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d13a:	005b      	lsls	r3, r3, #1
 800d13c:	653b      	str	r3, [r7, #80]	; 0x50
 800d13e:	4a11      	ldr	r2, [pc, #68]	; (800d184 <f_mkfs+0x290>)
 800d140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d007      	beq.n	800d15a <f_mkfs+0x266>
 800d14a:	4a0e      	ldr	r2, [pc, #56]	; (800d184 <f_mkfs+0x290>)
 800d14c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d14e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d152:	461a      	mov	r2, r3
 800d154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d156:	4293      	cmp	r3, r2
 800d158:	d2eb      	bcs.n	800d132 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800d15a:	693a      	ldr	r2, [r7, #16]
 800d15c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d162:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800d164:	6a3b      	ldr	r3, [r7, #32]
 800d166:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d90c      	bls.n	800d188 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800d16e:	6a3b      	ldr	r3, [r7, #32]
 800d170:	3302      	adds	r3, #2
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d176:	e012      	b.n	800d19e <f_mkfs+0x2aa>
 800d178:	20000d0c 	.word	0x20000d0c
 800d17c:	08016350 	.word	0x08016350
 800d180:	0ffffff5 	.word	0x0ffffff5
 800d184:	08016360 	.word	0x08016360
				} else {
					fmt = FS_FAT12;
 800d188:	2301      	movs	r3, #1
 800d18a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800d18e:	6a3a      	ldr	r2, [r7, #32]
 800d190:	4613      	mov	r3, r2
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	4413      	add	r3, r2
 800d196:	3301      	adds	r3, #1
 800d198:	085b      	lsrs	r3, r3, #1
 800d19a:	3303      	adds	r3, #3
 800d19c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800d19e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d1a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1a2:	4413      	add	r3, r2
 800d1a4:	1e5a      	subs	r2, r3, #1
 800d1a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ac:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800d1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d1b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1bc:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800d1be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1c2:	4413      	add	r3, r2
 800d1c4:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800d1c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1ca:	fb03 f202 	mul.w	r2, r3, r2
 800d1ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1d0:	4413      	add	r3, r2
 800d1d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d1d4:	4413      	add	r3, r2
 800d1d6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800d1d8:	697a      	ldr	r2, [r7, #20]
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	4413      	add	r3, r2
 800d1de:	1e5a      	subs	r2, r3, #1
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	425b      	negs	r3, r3
 800d1e4:	401a      	ands	r2, r3
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800d1ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d1f0:	2b03      	cmp	r3, #3
 800d1f2:	d108      	bne.n	800d206 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800d1f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d1f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1f8:	4413      	add	r3, r2
 800d1fa:	657b      	str	r3, [r7, #84]	; 0x54
 800d1fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d200:	4413      	add	r3, r2
 800d202:	65bb      	str	r3, [r7, #88]	; 0x58
 800d204:	e006      	b.n	800d214 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800d206:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d20a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d20e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d210:	4413      	add	r3, r2
 800d212:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800d214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d216:	011a      	lsls	r2, r3, #4
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	441a      	add	r2, r3
 800d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21e:	1ad2      	subs	r2, r2, r3
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	429a      	cmp	r2, r3
 800d224:	d901      	bls.n	800d22a <f_mkfs+0x336>
 800d226:	230e      	movs	r3, #14
 800d228:	e28a      	b.n	800d740 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800d22a:	693a      	ldr	r2, [r7, #16]
 800d22c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d22e:	1ad2      	subs	r2, r2, r3
 800d230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d234:	fb01 f303 	mul.w	r3, r1, r3
 800d238:	1ad2      	subs	r2, r2, r3
 800d23a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d23c:	1ad2      	subs	r2, r2, r3
 800d23e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d240:	fbb2 f3f3 	udiv	r3, r2, r3
 800d244:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800d246:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d24a:	2b03      	cmp	r3, #3
 800d24c:	d10f      	bne.n	800d26e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800d24e:	6a3b      	ldr	r3, [r7, #32]
 800d250:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d254:	4293      	cmp	r3, r2
 800d256:	d80a      	bhi.n	800d26e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d105      	bne.n	800d26a <f_mkfs+0x376>
 800d25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d260:	085b      	lsrs	r3, r3, #1
 800d262:	607b      	str	r3, [r7, #4]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d144      	bne.n	800d2f4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800d26a:	230e      	movs	r3, #14
 800d26c:	e268      	b.n	800d740 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800d26e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d272:	2b02      	cmp	r3, #2
 800d274:	d133      	bne.n	800d2de <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800d276:	6a3b      	ldr	r3, [r7, #32]
 800d278:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d91e      	bls.n	800d2be <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d107      	bne.n	800d296 <f_mkfs+0x3a2>
 800d286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d288:	005b      	lsls	r3, r3, #1
 800d28a:	2b40      	cmp	r3, #64	; 0x40
 800d28c:	d803      	bhi.n	800d296 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800d28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d290:	005b      	lsls	r3, r3, #1
 800d292:	607b      	str	r3, [r7, #4]
 800d294:	e033      	b.n	800d2fe <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800d296:	7afb      	ldrb	r3, [r7, #11]
 800d298:	f003 0302 	and.w	r3, r3, #2
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d003      	beq.n	800d2a8 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d2a6:	e02a      	b.n	800d2fe <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d105      	bne.n	800d2ba <f_mkfs+0x3c6>
 800d2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2b0:	005b      	lsls	r3, r3, #1
 800d2b2:	607b      	str	r3, [r7, #4]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b80      	cmp	r3, #128	; 0x80
 800d2b8:	d91e      	bls.n	800d2f8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800d2ba:	230e      	movs	r3, #14
 800d2bc:	e240      	b.n	800d740 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800d2be:	6a3b      	ldr	r3, [r7, #32]
 800d2c0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d80a      	bhi.n	800d2de <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d105      	bne.n	800d2da <f_mkfs+0x3e6>
 800d2ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	607b      	str	r3, [r7, #4]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b80      	cmp	r3, #128	; 0x80
 800d2d8:	d910      	bls.n	800d2fc <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800d2da:	230e      	movs	r3, #14
 800d2dc:	e230      	b.n	800d740 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800d2de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d10c      	bne.n	800d300 <f_mkfs+0x40c>
 800d2e6:	6a3b      	ldr	r3, [r7, #32]
 800d2e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d907      	bls.n	800d300 <f_mkfs+0x40c>
 800d2f0:	230e      	movs	r3, #14
 800d2f2:	e225      	b.n	800d740 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d2f4:	bf00      	nop
 800d2f6:	e6ce      	b.n	800d096 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d2f8:	bf00      	nop
 800d2fa:	e6cc      	b.n	800d096 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d2fc:	bf00      	nop
			pau = au;
 800d2fe:	e6ca      	b.n	800d096 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800d300:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800d302:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d304:	461a      	mov	r2, r3
 800d306:	2100      	movs	r1, #0
 800d308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d30a:	f7fd fd24 	bl	800ad56 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800d30e:	220b      	movs	r2, #11
 800d310:	49b2      	ldr	r1, [pc, #712]	; (800d5dc <f_mkfs+0x6e8>)
 800d312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d314:	f7fd fcfe 	bl	800ad14 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800d318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31a:	330b      	adds	r3, #11
 800d31c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d31e:	4611      	mov	r1, r2
 800d320:	4618      	mov	r0, r3
 800d322:	f7fd fcb0 	bl	800ac86 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d328:	330d      	adds	r3, #13
 800d32a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d32c:	b2d2      	uxtb	r2, r2
 800d32e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800d330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d332:	330e      	adds	r3, #14
 800d334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d336:	b292      	uxth	r2, r2
 800d338:	4611      	mov	r1, r2
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fd fca3 	bl	800ac86 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800d340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d342:	3310      	adds	r3, #16
 800d344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d346:	b2d2      	uxtb	r2, r2
 800d348:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800d34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34c:	f103 0211 	add.w	r2, r3, #17
 800d350:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d354:	2b03      	cmp	r3, #3
 800d356:	d002      	beq.n	800d35e <f_mkfs+0x46a>
 800d358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	e000      	b.n	800d360 <f_mkfs+0x46c>
 800d35e:	2300      	movs	r3, #0
 800d360:	4619      	mov	r1, r3
 800d362:	4610      	mov	r0, r2
 800d364:	f7fd fc8f 	bl	800ac86 <st_word>
		if (sz_vol < 0x10000) {
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d36e:	d208      	bcs.n	800d382 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d372:	3313      	adds	r3, #19
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	b292      	uxth	r2, r2
 800d378:	4611      	mov	r1, r2
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7fd fc83 	bl	800ac86 <st_word>
 800d380:	e006      	b.n	800d390 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800d382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d384:	3320      	adds	r3, #32
 800d386:	693a      	ldr	r2, [r7, #16]
 800d388:	4611      	mov	r1, r2
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fd fc96 	bl	800acbc <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d392:	3315      	adds	r3, #21
 800d394:	22f8      	movs	r2, #248	; 0xf8
 800d396:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	3318      	adds	r3, #24
 800d39c:	213f      	movs	r1, #63	; 0x3f
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fd fc71 	bl	800ac86 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a6:	331a      	adds	r3, #26
 800d3a8:	21ff      	movs	r1, #255	; 0xff
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fd fc6b 	bl	800ac86 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b2:	331c      	adds	r3, #28
 800d3b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7fd fc80 	bl	800acbc <st_dword>
		if (fmt == FS_FAT32) {
 800d3bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d3c0:	2b03      	cmp	r3, #3
 800d3c2:	d131      	bne.n	800d428 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800d3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800d3ca:	f7fd f92d 	bl	800a628 <get_fattime>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f7fd fc72 	bl	800acbc <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800d3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3da:	3324      	adds	r3, #36	; 0x24
 800d3dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fd fc6c 	bl	800acbc <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	332c      	adds	r3, #44	; 0x2c
 800d3e8:	2102      	movs	r1, #2
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fd fc66 	bl	800acbc <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f2:	3330      	adds	r3, #48	; 0x30
 800d3f4:	2101      	movs	r1, #1
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fd fc45 	bl	800ac86 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	3332      	adds	r3, #50	; 0x32
 800d400:	2106      	movs	r1, #6
 800d402:	4618      	mov	r0, r3
 800d404:	f7fd fc3f 	bl	800ac86 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800d408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40a:	3340      	adds	r3, #64	; 0x40
 800d40c:	2280      	movs	r2, #128	; 0x80
 800d40e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800d410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d412:	3342      	adds	r3, #66	; 0x42
 800d414:	2229      	movs	r2, #41	; 0x29
 800d416:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800d418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41a:	3347      	adds	r3, #71	; 0x47
 800d41c:	2213      	movs	r2, #19
 800d41e:	4970      	ldr	r1, [pc, #448]	; (800d5e0 <f_mkfs+0x6ec>)
 800d420:	4618      	mov	r0, r3
 800d422:	f7fd fc77 	bl	800ad14 <mem_cpy>
 800d426:	e020      	b.n	800d46a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800d428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800d42e:	f7fd f8fb 	bl	800a628 <get_fattime>
 800d432:	4603      	mov	r3, r0
 800d434:	4619      	mov	r1, r3
 800d436:	4620      	mov	r0, r4
 800d438:	f7fd fc40 	bl	800acbc <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800d43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43e:	3316      	adds	r3, #22
 800d440:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d442:	b292      	uxth	r2, r2
 800d444:	4611      	mov	r1, r2
 800d446:	4618      	mov	r0, r3
 800d448:	f7fd fc1d 	bl	800ac86 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800d44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44e:	3324      	adds	r3, #36	; 0x24
 800d450:	2280      	movs	r2, #128	; 0x80
 800d452:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d456:	3326      	adds	r3, #38	; 0x26
 800d458:	2229      	movs	r2, #41	; 0x29
 800d45a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45e:	332b      	adds	r3, #43	; 0x2b
 800d460:	2213      	movs	r2, #19
 800d462:	4960      	ldr	r1, [pc, #384]	; (800d5e4 <f_mkfs+0x6f0>)
 800d464:	4618      	mov	r0, r3
 800d466:	f7fd fc55 	bl	800ad14 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d470:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d474:	4618      	mov	r0, r3
 800d476:	f7fd fc06 	bl	800ac86 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800d47a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d47e:	2301      	movs	r3, #1
 800d480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d484:	f7fd fb86 	bl	800ab94 <disk_write>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <f_mkfs+0x59e>
 800d48e:	2301      	movs	r3, #1
 800d490:	e156      	b.n	800d740 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800d492:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d496:	2b03      	cmp	r3, #3
 800d498:	d140      	bne.n	800d51c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49c:	1d9a      	adds	r2, r3, #6
 800d49e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4a6:	f7fd fb75 	bl	800ab94 <disk_write>
			mem_set(buf, 0, ss);
 800d4aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4b2:	f7fd fc50 	bl	800ad56 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800d4b6:	494c      	ldr	r1, [pc, #304]	; (800d5e8 <f_mkfs+0x6f4>)
 800d4b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4ba:	f7fd fbff 	bl	800acbc <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d4c4:	4949      	ldr	r1, [pc, #292]	; (800d5ec <f_mkfs+0x6f8>)
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7fd fbf8 	bl	800acbc <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800d4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ce:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d4d2:	6a3b      	ldr	r3, [r7, #32]
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	4610      	mov	r0, r2
 800d4da:	f7fd fbef 	bl	800acbc <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800d4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d4e4:	2102      	movs	r1, #2
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fd fbe8 	bl	800acbc <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d4f2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fd fbc5 	bl	800ac86 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fe:	1dda      	adds	r2, r3, #7
 800d500:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d504:	2301      	movs	r3, #1
 800d506:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d508:	f7fd fb44 	bl	800ab94 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800d50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d514:	2301      	movs	r3, #1
 800d516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d518:	f7fd fb3c 	bl	800ab94 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800d51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d51e:	2100      	movs	r1, #0
 800d520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d522:	f7fd fc18 	bl	800ad56 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800d526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d528:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d52a:	2300      	movs	r3, #0
 800d52c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d52e:	e04b      	b.n	800d5c8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800d530:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d534:	2b03      	cmp	r3, #3
 800d536:	d113      	bne.n	800d560 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800d538:	f06f 0107 	mvn.w	r1, #7
 800d53c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d53e:	f7fd fbbd 	bl	800acbc <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800d542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d544:	3304      	adds	r3, #4
 800d546:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fd fbb6 	bl	800acbc <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800d550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d552:	3308      	adds	r3, #8
 800d554:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fd fbaf 	bl	800acbc <st_dword>
 800d55e:	e00b      	b.n	800d578 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800d560:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d564:	2b01      	cmp	r3, #1
 800d566:	d101      	bne.n	800d56c <f_mkfs+0x678>
 800d568:	4b21      	ldr	r3, [pc, #132]	; (800d5f0 <f_mkfs+0x6fc>)
 800d56a:	e001      	b.n	800d570 <f_mkfs+0x67c>
 800d56c:	f06f 0307 	mvn.w	r3, #7
 800d570:	4619      	mov	r1, r3
 800d572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d574:	f7fd fba2 	bl	800acbc <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800d578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d57a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800d57c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d580:	4293      	cmp	r3, r2
 800d582:	bf28      	it	cs
 800d584:	4613      	movcs	r3, r2
 800d586:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d588:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d58c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d58e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d592:	f7fd faff 	bl	800ab94 <disk_write>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d001      	beq.n	800d5a0 <f_mkfs+0x6ac>
 800d59c:	2301      	movs	r3, #1
 800d59e:	e0cf      	b.n	800d740 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800d5a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	2100      	movs	r1, #0
 800d5a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5a8:	f7fd fbd5 	bl	800ad56 <mem_set>
				sect += n; nsect -= n;
 800d5ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d5ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5b0:	4413      	add	r3, r2
 800d5b2:	667b      	str	r3, [r7, #100]	; 0x64
 800d5b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800d5bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d1dc      	bne.n	800d57c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d5c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d3af      	bcc.n	800d530 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800d5d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d5d4:	2b03      	cmp	r3, #3
 800d5d6:	d10d      	bne.n	800d5f4 <f_mkfs+0x700>
 800d5d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5da:	e00c      	b.n	800d5f6 <f_mkfs+0x702>
 800d5dc:	080161c0 	.word	0x080161c0
 800d5e0:	080161cc 	.word	0x080161cc
 800d5e4:	080161e0 	.word	0x080161e0
 800d5e8:	41615252 	.word	0x41615252
 800d5ec:	61417272 	.word	0x61417272
 800d5f0:	00fffff8 	.word	0x00fffff8
 800d5f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5f6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800d5f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	bf28      	it	cs
 800d600:	4613      	movcs	r3, r2
 800d602:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d604:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d60a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d60c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d60e:	f7fd fac1 	bl	800ab94 <disk_write>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d001      	beq.n	800d61c <f_mkfs+0x728>
 800d618:	2301      	movs	r3, #1
 800d61a:	e091      	b.n	800d740 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800d61c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d61e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d620:	4413      	add	r3, r2
 800d622:	667b      	str	r3, [r7, #100]	; 0x64
 800d624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800d62c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d1e2      	bne.n	800d5f8 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800d632:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d636:	2b03      	cmp	r3, #3
 800d638:	d103      	bne.n	800d642 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800d63a:	230c      	movs	r3, #12
 800d63c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d640:	e010      	b.n	800d664 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d648:	d303      	bcc.n	800d652 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800d64a:	2306      	movs	r3, #6
 800d64c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d650:	e008      	b.n	800d664 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800d652:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d656:	2b02      	cmp	r3, #2
 800d658:	d101      	bne.n	800d65e <f_mkfs+0x76a>
 800d65a:	2304      	movs	r3, #4
 800d65c:	e000      	b.n	800d660 <f_mkfs+0x76c>
 800d65e:	2301      	movs	r3, #1
 800d660:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800d664:	7afb      	ldrb	r3, [r7, #11]
 800d666:	f003 0308 	and.w	r3, r3, #8
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d15b      	bne.n	800d726 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800d66e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d670:	461a      	mov	r2, r3
 800d672:	2100      	movs	r1, #0
 800d674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d676:	f7fd fb6e 	bl	800ad56 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d680:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d684:	4618      	mov	r0, r3
 800d686:	f7fd fafe 	bl	800ac86 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800d68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d690:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	2200      	movs	r2, #0
 800d696:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	3301      	adds	r3, #1
 800d69c:	2201      	movs	r2, #1
 800d69e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	3302      	adds	r3, #2
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800d6a8:	69bb      	ldr	r3, [r7, #24]
 800d6aa:	3303      	adds	r3, #3
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800d6b0:	69bb      	ldr	r3, [r7, #24]
 800d6b2:	3304      	adds	r3, #4
 800d6b4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800d6b8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800d6ba:	693a      	ldr	r2, [r7, #16]
 800d6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6be:	441a      	add	r2, r3
 800d6c0:	4b21      	ldr	r3, [pc, #132]	; (800d748 <f_mkfs+0x854>)
 800d6c2:	fba3 1302 	umull	r1, r3, r3, r2
 800d6c6:	1ad2      	subs	r2, r2, r3
 800d6c8:	0852      	lsrs	r2, r2, #1
 800d6ca:	4413      	add	r3, r2
 800d6cc:	0b5b      	lsrs	r3, r3, #13
 800d6ce:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	3305      	adds	r3, #5
 800d6d4:	22fe      	movs	r2, #254	; 0xfe
 800d6d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800d6d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6da:	089b      	lsrs	r3, r3, #2
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	3306      	adds	r3, #6
 800d6e2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800d6e6:	b2d2      	uxtb	r2, r2
 800d6e8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	3307      	adds	r3, #7
 800d6ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d6f0:	b2d2      	uxtb	r2, r2
 800d6f2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	3308      	adds	r3, #8
 800d6f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fd fade 	bl	800acbc <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	330c      	adds	r3, #12
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	4611      	mov	r1, r2
 800d708:	4618      	mov	r0, r3
 800d70a:	f7fd fad7 	bl	800acbc <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800d70e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d712:	2301      	movs	r3, #1
 800d714:	2200      	movs	r2, #0
 800d716:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d718:	f7fd fa3c 	bl	800ab94 <disk_write>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d001      	beq.n	800d726 <f_mkfs+0x832>
 800d722:	2301      	movs	r3, #1
 800d724:	e00c      	b.n	800d740 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800d726:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d72a:	2200      	movs	r2, #0
 800d72c:	2100      	movs	r1, #0
 800d72e:	4618      	mov	r0, r3
 800d730:	f7fd fa50 	bl	800abd4 <disk_ioctl>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <f_mkfs+0x84a>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e000      	b.n	800d740 <f_mkfs+0x84c>

	return FR_OK;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3774      	adds	r7, #116	; 0x74
 800d744:	46bd      	mov	sp, r7
 800d746:	bd90      	pop	{r4, r7, pc}
 800d748:	0515565b 	.word	0x0515565b

0800d74c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b087      	sub	sp, #28
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	4613      	mov	r3, r2
 800d758:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d75a:	2301      	movs	r3, #1
 800d75c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d75e:	2300      	movs	r3, #0
 800d760:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d762:	4b1f      	ldr	r3, [pc, #124]	; (800d7e0 <FATFS_LinkDriverEx+0x94>)
 800d764:	7a5b      	ldrb	r3, [r3, #9]
 800d766:	b2db      	uxtb	r3, r3
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d131      	bne.n	800d7d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d76c:	4b1c      	ldr	r3, [pc, #112]	; (800d7e0 <FATFS_LinkDriverEx+0x94>)
 800d76e:	7a5b      	ldrb	r3, [r3, #9]
 800d770:	b2db      	uxtb	r3, r3
 800d772:	461a      	mov	r2, r3
 800d774:	4b1a      	ldr	r3, [pc, #104]	; (800d7e0 <FATFS_LinkDriverEx+0x94>)
 800d776:	2100      	movs	r1, #0
 800d778:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d77a:	4b19      	ldr	r3, [pc, #100]	; (800d7e0 <FATFS_LinkDriverEx+0x94>)
 800d77c:	7a5b      	ldrb	r3, [r3, #9]
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	4a17      	ldr	r2, [pc, #92]	; (800d7e0 <FATFS_LinkDriverEx+0x94>)
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	4413      	add	r3, r2
 800d786:	68fa      	ldr	r2, [r7, #12]
 800d788:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d78a:	4b15      	ldr	r3, [pc, #84]	; (800d7e0 <FATFS_LinkDriverEx+0x94>)
 800d78c:	7a5b      	ldrb	r3, [r3, #9]
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	461a      	mov	r2, r3
 800d792:	4b13      	ldr	r3, [pc, #76]	; (800d7e0 <FATFS_LinkDriverEx+0x94>)
 800d794:	4413      	add	r3, r2
 800d796:	79fa      	ldrb	r2, [r7, #7]
 800d798:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d79a:	4b11      	ldr	r3, [pc, #68]	; (800d7e0 <FATFS_LinkDriverEx+0x94>)
 800d79c:	7a5b      	ldrb	r3, [r3, #9]
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	1c5a      	adds	r2, r3, #1
 800d7a2:	b2d1      	uxtb	r1, r2
 800d7a4:	4a0e      	ldr	r2, [pc, #56]	; (800d7e0 <FATFS_LinkDriverEx+0x94>)
 800d7a6:	7251      	strb	r1, [r2, #9]
 800d7a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d7aa:	7dbb      	ldrb	r3, [r7, #22]
 800d7ac:	3330      	adds	r3, #48	; 0x30
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	223a      	movs	r2, #58	; 0x3a
 800d7ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	3302      	adds	r3, #2
 800d7c0:	222f      	movs	r2, #47	; 0x2f
 800d7c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	3303      	adds	r3, #3
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	371c      	adds	r7, #28
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	20000d34 	.word	0x20000d34

0800d7e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	6839      	ldr	r1, [r7, #0]
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7ff ffaa 	bl	800d74c <FATFS_LinkDriverEx>
 800d7f8:	4603      	mov	r3, r0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b084      	sub	sp, #16
 800d806:	af00      	add	r7, sp, #0
 800d808:	4603      	mov	r3, r0
 800d80a:	6039      	str	r1, [r7, #0]
 800d80c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 800d80e:	2000      	movs	r0, #0
 800d810:	f000 fa14 	bl	800dc3c <osMutexNew>
 800d814:	4602      	mov	r2, r0
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	bf14      	ite	ne
 800d822:	2301      	movne	r3, #1
 800d824:	2300      	moveq	r3, #0
 800d826:	b2db      	uxtb	r3, r3
 800d828:	60fb      	str	r3, [r7, #12]

    return ret;
 800d82a:	68fb      	ldr	r3, [r7, #12]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 fb0b 	bl	800de58 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800d842:	2301      	movs	r3, #1
}
 800d844:	4618      	mov	r0, r3
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d854:	2300      	movs	r3, #0
 800d856:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 800d858:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fa73 	bl	800dd48 <osMutexAcquire>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d101      	bne.n	800d86c <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800d868:	2301      	movs	r3, #1
 800d86a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d86c:	68fb      	ldr	r3, [r7, #12]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}

0800d876 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d876:	b580      	push	{r7, lr}
 800d878:	b082      	sub	sp, #8
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 faad 	bl	800ddde <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800d884:	bf00      	nop
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <__NVIC_SetPriority>:
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	4603      	mov	r3, r0
 800d894:	6039      	str	r1, [r7, #0]
 800d896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	db0a      	blt.n	800d8b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	b2da      	uxtb	r2, r3
 800d8a4:	490c      	ldr	r1, [pc, #48]	; (800d8d8 <__NVIC_SetPriority+0x4c>)
 800d8a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8aa:	0112      	lsls	r2, r2, #4
 800d8ac:	b2d2      	uxtb	r2, r2
 800d8ae:	440b      	add	r3, r1
 800d8b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d8b4:	e00a      	b.n	800d8cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	b2da      	uxtb	r2, r3
 800d8ba:	4908      	ldr	r1, [pc, #32]	; (800d8dc <__NVIC_SetPriority+0x50>)
 800d8bc:	79fb      	ldrb	r3, [r7, #7]
 800d8be:	f003 030f 	and.w	r3, r3, #15
 800d8c2:	3b04      	subs	r3, #4
 800d8c4:	0112      	lsls	r2, r2, #4
 800d8c6:	b2d2      	uxtb	r2, r2
 800d8c8:	440b      	add	r3, r1
 800d8ca:	761a      	strb	r2, [r3, #24]
}
 800d8cc:	bf00      	nop
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	e000e100 	.word	0xe000e100
 800d8dc:	e000ed00 	.word	0xe000ed00

0800d8e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d8e4:	4b05      	ldr	r3, [pc, #20]	; (800d8fc <SysTick_Handler+0x1c>)
 800d8e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d8e8:	f002 fd44 	bl	8010374 <xTaskGetSchedulerState>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d001      	beq.n	800d8f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d8f2:	f003 fc29 	bl	8011148 <xPortSysTickHandler>
  }
}
 800d8f6:	bf00      	nop
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	e000e010 	.word	0xe000e010

0800d900 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d900:	b580      	push	{r7, lr}
 800d902:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d904:	2100      	movs	r1, #0
 800d906:	f06f 0004 	mvn.w	r0, #4
 800d90a:	f7ff ffbf 	bl	800d88c <__NVIC_SetPriority>
#endif
}
 800d90e:	bf00      	nop
 800d910:	bd80      	pop	{r7, pc}
	...

0800d914 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d91a:	f3ef 8305 	mrs	r3, IPSR
 800d91e:	603b      	str	r3, [r7, #0]
  return(result);
 800d920:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d922:	2b00      	cmp	r3, #0
 800d924:	d003      	beq.n	800d92e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d926:	f06f 0305 	mvn.w	r3, #5
 800d92a:	607b      	str	r3, [r7, #4]
 800d92c:	e00c      	b.n	800d948 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d92e:	4b0a      	ldr	r3, [pc, #40]	; (800d958 <osKernelInitialize+0x44>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d105      	bne.n	800d942 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d936:	4b08      	ldr	r3, [pc, #32]	; (800d958 <osKernelInitialize+0x44>)
 800d938:	2201      	movs	r2, #1
 800d93a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d93c:	2300      	movs	r3, #0
 800d93e:	607b      	str	r3, [r7, #4]
 800d940:	e002      	b.n	800d948 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d946:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d948:	687b      	ldr	r3, [r7, #4]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	370c      	adds	r7, #12
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	20000d40 	.word	0x20000d40

0800d95c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800d962:	f002 fd07 	bl	8010374 <xTaskGetSchedulerState>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d004      	beq.n	800d976 <osKernelGetState+0x1a>
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d105      	bne.n	800d97c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800d970:	2302      	movs	r3, #2
 800d972:	607b      	str	r3, [r7, #4]
      break;
 800d974:	e00c      	b.n	800d990 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800d976:	2303      	movs	r3, #3
 800d978:	607b      	str	r3, [r7, #4]
      break;
 800d97a:	e009      	b.n	800d990 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800d97c:	4b07      	ldr	r3, [pc, #28]	; (800d99c <osKernelGetState+0x40>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d102      	bne.n	800d98a <osKernelGetState+0x2e>
        state = osKernelReady;
 800d984:	2301      	movs	r3, #1
 800d986:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800d988:	e001      	b.n	800d98e <osKernelGetState+0x32>
        state = osKernelInactive;
 800d98a:	2300      	movs	r3, #0
 800d98c:	607b      	str	r3, [r7, #4]
      break;
 800d98e:	bf00      	nop
  }

  return (state);
 800d990:	687b      	ldr	r3, [r7, #4]
}
 800d992:	4618      	mov	r0, r3
 800d994:	3708      	adds	r7, #8
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	20000d40 	.word	0x20000d40

0800d9a0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9a6:	f3ef 8305 	mrs	r3, IPSR
 800d9aa:	603b      	str	r3, [r7, #0]
  return(result);
 800d9ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d003      	beq.n	800d9ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800d9b2:	f06f 0305 	mvn.w	r3, #5
 800d9b6:	607b      	str	r3, [r7, #4]
 800d9b8:	e010      	b.n	800d9dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d9ba:	4b0b      	ldr	r3, [pc, #44]	; (800d9e8 <osKernelStart+0x48>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d109      	bne.n	800d9d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d9c2:	f7ff ff9d 	bl	800d900 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d9c6:	4b08      	ldr	r3, [pc, #32]	; (800d9e8 <osKernelStart+0x48>)
 800d9c8:	2202      	movs	r2, #2
 800d9ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d9cc:	f002 f854 	bl	800fa78 <vTaskStartScheduler>
      stat = osOK;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	607b      	str	r3, [r7, #4]
 800d9d4:	e002      	b.n	800d9dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d9d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d9dc:	687b      	ldr	r3, [r7, #4]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	20000d40 	.word	0x20000d40

0800d9ec <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9f2:	f3ef 8305 	mrs	r3, IPSR
 800d9f6:	603b      	str	r3, [r7, #0]
  return(result);
 800d9f8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d9fe:	f002 f967 	bl	800fcd0 <xTaskGetTickCountFromISR>
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	e002      	b.n	800da0c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800da06:	f002 f953 	bl	800fcb0 <xTaskGetTickCount>
 800da0a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800da0c:	687b      	ldr	r3, [r7, #4]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3708      	adds	r7, #8
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
	...

0800da18 <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 800da1e:	4b06      	ldr	r3, [pc, #24]	; (800da38 <OS_Tick_GetCount+0x20>)
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 800da24:	4b04      	ldr	r3, [pc, #16]	; (800da38 <OS_Tick_GetCount+0x20>)
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	1ad3      	subs	r3, r2, r3
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr
 800da38:	e000e010 	.word	0xe000e010

0800da3c <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 800da3c:	b480      	push	{r7}
 800da3e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 800da40:	4b04      	ldr	r3, [pc, #16]	; (800da54 <OS_Tick_GetOverflow+0x18>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	0c1b      	lsrs	r3, r3, #16
 800da46:	f003 0301 	and.w	r3, r3, #1
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr
 800da54:	e000e010 	.word	0xe000e010

0800da58 <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 800da58:	b480      	push	{r7}
 800da5a:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 800da5c:	4b03      	ldr	r3, [pc, #12]	; (800da6c <OS_Tick_GetInterval+0x14>)
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	3301      	adds	r3, #1
}
 800da62:	4618      	mov	r0, r3
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	e000e010 	.word	0xe000e010

0800da70 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da76:	f3ef 8310 	mrs	r3, PRIMASK
 800da7a:	60bb      	str	r3, [r7, #8]
  return(result);
 800da7c:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d105      	bne.n	800da8e <osKernelGetSysTimerCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da82:	f3ef 8311 	mrs	r3, BASEPRI
 800da86:	607b      	str	r3, [r7, #4]
  return(result);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d001      	beq.n	800da92 <osKernelGetSysTimerCount+0x22>
 800da8e:	2301      	movs	r3, #1
 800da90:	e000      	b.n	800da94 <osKernelGetSysTimerCount+0x24>
 800da92:	2300      	movs	r3, #0
 800da94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800da96:	b672      	cpsid	i
}
 800da98:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 800da9a:	f002 f909 	bl	800fcb0 <xTaskGetTickCount>
 800da9e:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 800daa0:	f7ff ffba 	bl	800da18 <OS_Tick_GetCount>
 800daa4:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 800daa6:	f7ff ffc9 	bl	800da3c <OS_Tick_GetOverflow>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d005      	beq.n	800dabc <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 800dab0:	f7ff ffb2 	bl	800da18 <OS_Tick_GetCount>
 800dab4:	6138      	str	r0, [r7, #16]
    ticks++;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	3301      	adds	r3, #1
 800daba:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 800dabc:	f7ff ffcc 	bl	800da58 <OS_Tick_GetInterval>
 800dac0:	4602      	mov	r2, r0
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	fb02 f303 	mul.w	r3, r2, r3
 800dac8:	693a      	ldr	r2, [r7, #16]
 800daca:	4413      	add	r3, r2
 800dacc:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d101      	bne.n	800dad8 <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 800dad4:	b662      	cpsie	i
}
 800dad6:	bf00      	nop
    __enable_irq();
  }

  return (val);
 800dad8:	693b      	ldr	r3, [r7, #16]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3718      	adds	r7, #24
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b08e      	sub	sp, #56	; 0x38
 800dae6:	af04      	add	r7, sp, #16
 800dae8:	60f8      	str	r0, [r7, #12]
 800daea:	60b9      	str	r1, [r7, #8]
 800daec:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daf2:	f3ef 8305 	mrs	r3, IPSR
 800daf6:	617b      	str	r3, [r7, #20]
  return(result);
 800daf8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d17e      	bne.n	800dbfc <osThreadNew+0x11a>
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d07b      	beq.n	800dbfc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800db04:	2380      	movs	r3, #128	; 0x80
 800db06:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800db08:	2318      	movs	r3, #24
 800db0a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800db0c:	2300      	movs	r3, #0
 800db0e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800db10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d045      	beq.n	800dba8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d002      	beq.n	800db2a <osThreadNew+0x48>
        name = attr->name;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	699b      	ldr	r3, [r3, #24]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d002      	beq.n	800db38 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	699b      	ldr	r3, [r3, #24]
 800db36:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d008      	beq.n	800db50 <osThreadNew+0x6e>
 800db3e:	69fb      	ldr	r3, [r7, #28]
 800db40:	2b38      	cmp	r3, #56	; 0x38
 800db42:	d805      	bhi.n	800db50 <osThreadNew+0x6e>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	f003 0301 	and.w	r3, r3, #1
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d001      	beq.n	800db54 <osThreadNew+0x72>
        return (NULL);
 800db50:	2300      	movs	r3, #0
 800db52:	e054      	b.n	800dbfe <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	695b      	ldr	r3, [r3, #20]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d003      	beq.n	800db64 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	089b      	lsrs	r3, r3, #2
 800db62:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d00e      	beq.n	800db8a <osThreadNew+0xa8>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	2bbb      	cmp	r3, #187	; 0xbb
 800db72:	d90a      	bls.n	800db8a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d006      	beq.n	800db8a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	695b      	ldr	r3, [r3, #20]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <osThreadNew+0xa8>
        mem = 1;
 800db84:	2301      	movs	r3, #1
 800db86:	61bb      	str	r3, [r7, #24]
 800db88:	e010      	b.n	800dbac <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10c      	bne.n	800dbac <osThreadNew+0xca>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d108      	bne.n	800dbac <osThreadNew+0xca>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	691b      	ldr	r3, [r3, #16]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d104      	bne.n	800dbac <osThreadNew+0xca>
          mem = 0;
 800dba2:	2300      	movs	r3, #0
 800dba4:	61bb      	str	r3, [r7, #24]
 800dba6:	e001      	b.n	800dbac <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d110      	bne.n	800dbd4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dbba:	9202      	str	r2, [sp, #8]
 800dbbc:	9301      	str	r3, [sp, #4]
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	6a3a      	ldr	r2, [r7, #32]
 800dbc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	f001 fd69 	bl	800f6a0 <xTaskCreateStatic>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	613b      	str	r3, [r7, #16]
 800dbd2:	e013      	b.n	800dbfc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d110      	bne.n	800dbfc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dbda:	6a3b      	ldr	r3, [r7, #32]
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	f107 0310 	add.w	r3, r7, #16
 800dbe2:	9301      	str	r3, [sp, #4]
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f001 fdb4 	bl	800f75a <xTaskCreate>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d001      	beq.n	800dbfc <osThreadNew+0x11a>
            hTask = NULL;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dbfc:	693b      	ldr	r3, [r7, #16]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3728      	adds	r7, #40	; 0x28
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b084      	sub	sp, #16
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc0e:	f3ef 8305 	mrs	r3, IPSR
 800dc12:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d003      	beq.n	800dc22 <osDelay+0x1c>
    stat = osErrorISR;
 800dc1a:	f06f 0305 	mvn.w	r3, #5
 800dc1e:	60fb      	str	r3, [r7, #12]
 800dc20:	e007      	b.n	800dc32 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d002      	beq.n	800dc32 <osDelay+0x2c>
      vTaskDelay(ticks);
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f001 feef 	bl	800fa10 <vTaskDelay>
    }
  }

  return (stat);
 800dc32:	68fb      	ldr	r3, [r7, #12]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b088      	sub	sp, #32
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dc44:	2300      	movs	r3, #0
 800dc46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc48:	f3ef 8305 	mrs	r3, IPSR
 800dc4c:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc4e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d174      	bne.n	800dd3e <osMutexNew+0x102>
    if (attr != NULL) {
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d003      	beq.n	800dc62 <osMutexNew+0x26>
      type = attr->attr_bits;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	61bb      	str	r3, [r7, #24]
 800dc60:	e001      	b.n	800dc66 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800dc62:	2300      	movs	r3, #0
 800dc64:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	f003 0301 	and.w	r3, r3, #1
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d002      	beq.n	800dc76 <osMutexNew+0x3a>
      rmtx = 1U;
 800dc70:	2301      	movs	r3, #1
 800dc72:	617b      	str	r3, [r7, #20]
 800dc74:	e001      	b.n	800dc7a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800dc76:	2300      	movs	r3, #0
 800dc78:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	f003 0308 	and.w	r3, r3, #8
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d15c      	bne.n	800dd3e <osMutexNew+0x102>
      mem = -1;
 800dc84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc88:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d015      	beq.n	800dcbc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d006      	beq.n	800dca6 <osMutexNew+0x6a>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	2b4f      	cmp	r3, #79	; 0x4f
 800dc9e:	d902      	bls.n	800dca6 <osMutexNew+0x6a>
          mem = 1;
 800dca0:	2301      	movs	r3, #1
 800dca2:	613b      	str	r3, [r7, #16]
 800dca4:	e00c      	b.n	800dcc0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d108      	bne.n	800dcc0 <osMutexNew+0x84>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d104      	bne.n	800dcc0 <osMutexNew+0x84>
            mem = 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	613b      	str	r3, [r7, #16]
 800dcba:	e001      	b.n	800dcc0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d112      	bne.n	800dcec <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d007      	beq.n	800dcdc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	2004      	movs	r0, #4
 800dcd4:	f000 fd8f 	bl	800e7f6 <xQueueCreateMutexStatic>
 800dcd8:	61f8      	str	r0, [r7, #28]
 800dcda:	e016      	b.n	800dd0a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	4619      	mov	r1, r3
 800dce2:	2001      	movs	r0, #1
 800dce4:	f000 fd87 	bl	800e7f6 <xQueueCreateMutexStatic>
 800dce8:	61f8      	str	r0, [r7, #28]
 800dcea:	e00e      	b.n	800dd0a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10b      	bne.n	800dd0a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d004      	beq.n	800dd02 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800dcf8:	2004      	movs	r0, #4
 800dcfa:	f000 fd64 	bl	800e7c6 <xQueueCreateMutex>
 800dcfe:	61f8      	str	r0, [r7, #28]
 800dd00:	e003      	b.n	800dd0a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800dd02:	2001      	movs	r0, #1
 800dd04:	f000 fd5f 	bl	800e7c6 <xQueueCreateMutex>
 800dd08:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00c      	beq.n	800dd2a <osMutexNew+0xee>
        if (attr != NULL) {
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d003      	beq.n	800dd1e <osMutexNew+0xe2>
          name = attr->name;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	60fb      	str	r3, [r7, #12]
 800dd1c:	e001      	b.n	800dd22 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800dd22:	68f9      	ldr	r1, [r7, #12]
 800dd24:	69f8      	ldr	r0, [r7, #28]
 800dd26:	f001 fc33 	bl	800f590 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d006      	beq.n	800dd3e <osMutexNew+0x102>
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d003      	beq.n	800dd3e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	f043 0301 	orr.w	r3, r3, #1
 800dd3c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800dd3e:	69fb      	ldr	r3, [r7, #28]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3720      	adds	r7, #32
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f023 0301 	bic.w	r3, r3, #1
 800dd58:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f003 0301 	and.w	r3, r3, #1
 800dd60:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800dd62:	2300      	movs	r3, #0
 800dd64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd66:	f3ef 8305 	mrs	r3, IPSR
 800dd6a:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd6c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800dd72:	f06f 0305 	mvn.w	r3, #5
 800dd76:	617b      	str	r3, [r7, #20]
 800dd78:	e02c      	b.n	800ddd4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d103      	bne.n	800dd88 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800dd80:	f06f 0303 	mvn.w	r3, #3
 800dd84:	617b      	str	r3, [r7, #20]
 800dd86:	e025      	b.n	800ddd4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d011      	beq.n	800ddb2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800dd8e:	6839      	ldr	r1, [r7, #0]
 800dd90:	6938      	ldr	r0, [r7, #16]
 800dd92:	f000 fd7f 	bl	800e894 <xQueueTakeMutexRecursive>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d01b      	beq.n	800ddd4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d003      	beq.n	800ddaa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800dda2:	f06f 0301 	mvn.w	r3, #1
 800dda6:	617b      	str	r3, [r7, #20]
 800dda8:	e014      	b.n	800ddd4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ddaa:	f06f 0302 	mvn.w	r3, #2
 800ddae:	617b      	str	r3, [r7, #20]
 800ddb0:	e010      	b.n	800ddd4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ddb2:	6839      	ldr	r1, [r7, #0]
 800ddb4:	6938      	ldr	r0, [r7, #16]
 800ddb6:	f001 f913 	bl	800efe0 <xQueueSemaphoreTake>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d009      	beq.n	800ddd4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d003      	beq.n	800ddce <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ddc6:	f06f 0301 	mvn.w	r3, #1
 800ddca:	617b      	str	r3, [r7, #20]
 800ddcc:	e002      	b.n	800ddd4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ddce:	f06f 0302 	mvn.w	r3, #2
 800ddd2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ddd4:	697b      	ldr	r3, [r7, #20]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3718      	adds	r7, #24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b086      	sub	sp, #24
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f023 0301 	bic.w	r3, r3, #1
 800ddec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f003 0301 	and.w	r3, r3, #1
 800ddf4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddfa:	f3ef 8305 	mrs	r3, IPSR
 800ddfe:	60bb      	str	r3, [r7, #8]
  return(result);
 800de00:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <osMutexRelease+0x30>
    stat = osErrorISR;
 800de06:	f06f 0305 	mvn.w	r3, #5
 800de0a:	617b      	str	r3, [r7, #20]
 800de0c:	e01f      	b.n	800de4e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d103      	bne.n	800de1c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800de14:	f06f 0303 	mvn.w	r3, #3
 800de18:	617b      	str	r3, [r7, #20]
 800de1a:	e018      	b.n	800de4e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d009      	beq.n	800de36 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800de22:	6938      	ldr	r0, [r7, #16]
 800de24:	f000 fd02 	bl	800e82c <xQueueGiveMutexRecursive>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d00f      	beq.n	800de4e <osMutexRelease+0x70>
        stat = osErrorResource;
 800de2e:	f06f 0302 	mvn.w	r3, #2
 800de32:	617b      	str	r3, [r7, #20]
 800de34:	e00b      	b.n	800de4e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800de36:	2300      	movs	r3, #0
 800de38:	2200      	movs	r2, #0
 800de3a:	2100      	movs	r1, #0
 800de3c:	6938      	ldr	r0, [r7, #16]
 800de3e:	f000 fdc9 	bl	800e9d4 <xQueueGenericSend>
 800de42:	4603      	mov	r3, r0
 800de44:	2b01      	cmp	r3, #1
 800de46:	d002      	beq.n	800de4e <osMutexRelease+0x70>
        stat = osErrorResource;
 800de48:	f06f 0302 	mvn.w	r3, #2
 800de4c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800de4e:	697b      	ldr	r3, [r7, #20]
}
 800de50:	4618      	mov	r0, r3
 800de52:	3718      	adds	r7, #24
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f023 0301 	bic.w	r3, r3, #1
 800de66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de68:	f3ef 8305 	mrs	r3, IPSR
 800de6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800de6e:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800de70:	2b00      	cmp	r3, #0
 800de72:	d003      	beq.n	800de7c <osMutexDelete+0x24>
    stat = osErrorISR;
 800de74:	f06f 0305 	mvn.w	r3, #5
 800de78:	617b      	str	r3, [r7, #20]
 800de7a:	e00e      	b.n	800de9a <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d103      	bne.n	800de8a <osMutexDelete+0x32>
    stat = osErrorParameter;
 800de82:	f06f 0303 	mvn.w	r3, #3
 800de86:	617b      	str	r3, [r7, #20]
 800de88:	e007      	b.n	800de9a <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800de8a:	6938      	ldr	r0, [r7, #16]
 800de8c:	f001 fbaa 	bl	800f5e4 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800de90:	2300      	movs	r3, #0
 800de92:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 800de94:	6938      	ldr	r0, [r7, #16]
 800de96:	f001 fa2f 	bl	800f2f8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800de9a:	697b      	ldr	r3, [r7, #20]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3718      	adds	r7, #24
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <osSemaphoreNew>:
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b08a      	sub	sp, #40	; 0x28
 800dea8:	af02      	add	r7, sp, #8
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800deb0:	2300      	movs	r3, #0
 800deb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800deb4:	f3ef 8305 	mrs	r3, IPSR
 800deb8:	613b      	str	r3, [r7, #16]
  return(result);
 800deba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800debc:	2b00      	cmp	r3, #0
 800debe:	d175      	bne.n	800dfac <osSemaphoreNew+0x108>
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d072      	beq.n	800dfac <osSemaphoreNew+0x108>
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	429a      	cmp	r2, r3
 800decc:	d86e      	bhi.n	800dfac <osSemaphoreNew+0x108>
    mem = -1;
 800dece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ded2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d015      	beq.n	800df06 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d006      	beq.n	800def0 <osSemaphoreNew+0x4c>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	2b4f      	cmp	r3, #79	; 0x4f
 800dee8:	d902      	bls.n	800def0 <osSemaphoreNew+0x4c>
        mem = 1;
 800deea:	2301      	movs	r3, #1
 800deec:	61bb      	str	r3, [r7, #24]
 800deee:	e00c      	b.n	800df0a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d108      	bne.n	800df0a <osSemaphoreNew+0x66>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d104      	bne.n	800df0a <osSemaphoreNew+0x66>
          mem = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	61bb      	str	r3, [r7, #24]
 800df04:	e001      	b.n	800df0a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800df06:	2300      	movs	r3, #0
 800df08:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df10:	d04c      	beq.n	800dfac <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b01      	cmp	r3, #1
 800df16:	d128      	bne.n	800df6a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d10a      	bne.n	800df34 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	2203      	movs	r2, #3
 800df24:	9200      	str	r2, [sp, #0]
 800df26:	2200      	movs	r2, #0
 800df28:	2100      	movs	r1, #0
 800df2a:	2001      	movs	r0, #1
 800df2c:	f000 fb5c 	bl	800e5e8 <xQueueGenericCreateStatic>
 800df30:	61f8      	str	r0, [r7, #28]
 800df32:	e005      	b.n	800df40 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800df34:	2203      	movs	r2, #3
 800df36:	2100      	movs	r1, #0
 800df38:	2001      	movs	r0, #1
 800df3a:	f000 fbcd 	bl	800e6d8 <xQueueGenericCreate>
 800df3e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d022      	beq.n	800df8c <osSemaphoreNew+0xe8>
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d01f      	beq.n	800df8c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800df4c:	2300      	movs	r3, #0
 800df4e:	2200      	movs	r2, #0
 800df50:	2100      	movs	r1, #0
 800df52:	69f8      	ldr	r0, [r7, #28]
 800df54:	f000 fd3e 	bl	800e9d4 <xQueueGenericSend>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d016      	beq.n	800df8c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800df5e:	69f8      	ldr	r0, [r7, #28]
 800df60:	f001 f9ca 	bl	800f2f8 <vQueueDelete>
            hSemaphore = NULL;
 800df64:	2300      	movs	r3, #0
 800df66:	61fb      	str	r3, [r7, #28]
 800df68:	e010      	b.n	800df8c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d108      	bne.n	800df82 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	461a      	mov	r2, r3
 800df76:	68b9      	ldr	r1, [r7, #8]
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f000 fcc1 	bl	800e900 <xQueueCreateCountingSemaphoreStatic>
 800df7e:	61f8      	str	r0, [r7, #28]
 800df80:	e004      	b.n	800df8c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800df82:	68b9      	ldr	r1, [r7, #8]
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f000 fcf2 	bl	800e96e <xQueueCreateCountingSemaphore>
 800df8a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00c      	beq.n	800dfac <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d003      	beq.n	800dfa0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	617b      	str	r3, [r7, #20]
 800df9e:	e001      	b.n	800dfa4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800dfa4:	6979      	ldr	r1, [r7, #20]
 800dfa6:	69f8      	ldr	r0, [r7, #28]
 800dfa8:	f001 faf2 	bl	800f590 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800dfac:	69fb      	ldr	r3, [r7, #28]
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3720      	adds	r7, #32
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
	...

0800dfb8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b086      	sub	sp, #24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d103      	bne.n	800dfd8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800dfd0:	f06f 0303 	mvn.w	r3, #3
 800dfd4:	617b      	str	r3, [r7, #20]
 800dfd6:	e039      	b.n	800e04c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfd8:	f3ef 8305 	mrs	r3, IPSR
 800dfdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800dfde:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d022      	beq.n	800e02a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d003      	beq.n	800dff2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800dfea:	f06f 0303 	mvn.w	r3, #3
 800dfee:	617b      	str	r3, [r7, #20]
 800dff0:	e02c      	b.n	800e04c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800dff2:	2300      	movs	r3, #0
 800dff4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dff6:	f107 0308 	add.w	r3, r7, #8
 800dffa:	461a      	mov	r2, r3
 800dffc:	2100      	movs	r1, #0
 800dffe:	6938      	ldr	r0, [r7, #16]
 800e000:	f001 f8fa 	bl	800f1f8 <xQueueReceiveFromISR>
 800e004:	4603      	mov	r3, r0
 800e006:	2b01      	cmp	r3, #1
 800e008:	d003      	beq.n	800e012 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e00a:	f06f 0302 	mvn.w	r3, #2
 800e00e:	617b      	str	r3, [r7, #20]
 800e010:	e01c      	b.n	800e04c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d019      	beq.n	800e04c <osSemaphoreAcquire+0x94>
 800e018:	4b0f      	ldr	r3, [pc, #60]	; (800e058 <osSemaphoreAcquire+0xa0>)
 800e01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e01e:	601a      	str	r2, [r3, #0]
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	f3bf 8f6f 	isb	sy
 800e028:	e010      	b.n	800e04c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e02a:	6839      	ldr	r1, [r7, #0]
 800e02c:	6938      	ldr	r0, [r7, #16]
 800e02e:	f000 ffd7 	bl	800efe0 <xQueueSemaphoreTake>
 800e032:	4603      	mov	r3, r0
 800e034:	2b01      	cmp	r3, #1
 800e036:	d009      	beq.n	800e04c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d003      	beq.n	800e046 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e03e:	f06f 0301 	mvn.w	r3, #1
 800e042:	617b      	str	r3, [r7, #20]
 800e044:	e002      	b.n	800e04c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e046:	f06f 0302 	mvn.w	r3, #2
 800e04a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e04c:	697b      	ldr	r3, [r7, #20]
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3718      	adds	r7, #24
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	e000ed04 	.word	0xe000ed04

0800e05c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b086      	sub	sp, #24
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e068:	2300      	movs	r3, #0
 800e06a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d103      	bne.n	800e07a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e072:	f06f 0303 	mvn.w	r3, #3
 800e076:	617b      	str	r3, [r7, #20]
 800e078:	e02c      	b.n	800e0d4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e07a:	f3ef 8305 	mrs	r3, IPSR
 800e07e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e080:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e082:	2b00      	cmp	r3, #0
 800e084:	d01a      	beq.n	800e0bc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e086:	2300      	movs	r3, #0
 800e088:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e08a:	f107 0308 	add.w	r3, r7, #8
 800e08e:	4619      	mov	r1, r3
 800e090:	6938      	ldr	r0, [r7, #16]
 800e092:	f000 fe38 	bl	800ed06 <xQueueGiveFromISR>
 800e096:	4603      	mov	r3, r0
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d003      	beq.n	800e0a4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e09c:	f06f 0302 	mvn.w	r3, #2
 800e0a0:	617b      	str	r3, [r7, #20]
 800e0a2:	e017      	b.n	800e0d4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d014      	beq.n	800e0d4 <osSemaphoreRelease+0x78>
 800e0aa:	4b0d      	ldr	r3, [pc, #52]	; (800e0e0 <osSemaphoreRelease+0x84>)
 800e0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0b0:	601a      	str	r2, [r3, #0]
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	e00b      	b.n	800e0d4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e0bc:	2300      	movs	r3, #0
 800e0be:	2200      	movs	r2, #0
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	6938      	ldr	r0, [r7, #16]
 800e0c4:	f000 fc86 	bl	800e9d4 <xQueueGenericSend>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d002      	beq.n	800e0d4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e0ce:	f06f 0302 	mvn.w	r3, #2
 800e0d2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e0d4:	697b      	ldr	r3, [r7, #20]
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3718      	adds	r7, #24
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	e000ed04 	.word	0xe000ed04

0800e0e4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b08a      	sub	sp, #40	; 0x28
 800e0e8:	af02      	add	r7, sp, #8
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0f4:	f3ef 8305 	mrs	r3, IPSR
 800e0f8:	613b      	str	r3, [r7, #16]
  return(result);
 800e0fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d15f      	bne.n	800e1c0 <osMessageQueueNew+0xdc>
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d05c      	beq.n	800e1c0 <osMessageQueueNew+0xdc>
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d059      	beq.n	800e1c0 <osMessageQueueNew+0xdc>
    mem = -1;
 800e10c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e110:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d029      	beq.n	800e16c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d012      	beq.n	800e146 <osMessageQueueNew+0x62>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	2b4f      	cmp	r3, #79	; 0x4f
 800e126:	d90e      	bls.n	800e146 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d00a      	beq.n	800e146 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	695a      	ldr	r2, [r3, #20]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	68b9      	ldr	r1, [r7, #8]
 800e138:	fb01 f303 	mul.w	r3, r1, r3
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d302      	bcc.n	800e146 <osMessageQueueNew+0x62>
        mem = 1;
 800e140:	2301      	movs	r3, #1
 800e142:	61bb      	str	r3, [r7, #24]
 800e144:	e014      	b.n	800e170 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d110      	bne.n	800e170 <osMessageQueueNew+0x8c>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10c      	bne.n	800e170 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d108      	bne.n	800e170 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	695b      	ldr	r3, [r3, #20]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d104      	bne.n	800e170 <osMessageQueueNew+0x8c>
          mem = 0;
 800e166:	2300      	movs	r3, #0
 800e168:	61bb      	str	r3, [r7, #24]
 800e16a:	e001      	b.n	800e170 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e16c:	2300      	movs	r3, #0
 800e16e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d10b      	bne.n	800e18e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	691a      	ldr	r2, [r3, #16]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	689b      	ldr	r3, [r3, #8]
 800e17e:	2100      	movs	r1, #0
 800e180:	9100      	str	r1, [sp, #0]
 800e182:	68b9      	ldr	r1, [r7, #8]
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f000 fa2f 	bl	800e5e8 <xQueueGenericCreateStatic>
 800e18a:	61f8      	str	r0, [r7, #28]
 800e18c:	e008      	b.n	800e1a0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d105      	bne.n	800e1a0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e194:	2200      	movs	r2, #0
 800e196:	68b9      	ldr	r1, [r7, #8]
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f000 fa9d 	bl	800e6d8 <xQueueGenericCreate>
 800e19e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d00c      	beq.n	800e1c0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d003      	beq.n	800e1b4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	617b      	str	r3, [r7, #20]
 800e1b2:	e001      	b.n	800e1b8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e1b8:	6979      	ldr	r1, [r7, #20]
 800e1ba:	69f8      	ldr	r0, [r7, #28]
 800e1bc:	f001 f9e8 	bl	800f590 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e1c0:	69fb      	ldr	r3, [r7, #28]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3720      	adds	r7, #32
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
	...

0800e1cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b088      	sub	sp, #32
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	603b      	str	r3, [r7, #0]
 800e1d8:	4613      	mov	r3, r2
 800e1da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1e4:	f3ef 8305 	mrs	r3, IPSR
 800e1e8:	617b      	str	r3, [r7, #20]
  return(result);
 800e1ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d028      	beq.n	800e242 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e1f0:	69bb      	ldr	r3, [r7, #24]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d005      	beq.n	800e202 <osMessageQueuePut+0x36>
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d002      	beq.n	800e202 <osMessageQueuePut+0x36>
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d003      	beq.n	800e20a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800e202:	f06f 0303 	mvn.w	r3, #3
 800e206:	61fb      	str	r3, [r7, #28]
 800e208:	e038      	b.n	800e27c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800e20a:	2300      	movs	r3, #0
 800e20c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e20e:	f107 0210 	add.w	r2, r7, #16
 800e212:	2300      	movs	r3, #0
 800e214:	68b9      	ldr	r1, [r7, #8]
 800e216:	69b8      	ldr	r0, [r7, #24]
 800e218:	f000 fcda 	bl	800ebd0 <xQueueGenericSendFromISR>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d003      	beq.n	800e22a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800e222:	f06f 0302 	mvn.w	r3, #2
 800e226:	61fb      	str	r3, [r7, #28]
 800e228:	e028      	b.n	800e27c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d025      	beq.n	800e27c <osMessageQueuePut+0xb0>
 800e230:	4b15      	ldr	r3, [pc, #84]	; (800e288 <osMessageQueuePut+0xbc>)
 800e232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e236:	601a      	str	r2, [r3, #0]
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	e01c      	b.n	800e27c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d002      	beq.n	800e24e <osMessageQueuePut+0x82>
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d103      	bne.n	800e256 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800e24e:	f06f 0303 	mvn.w	r3, #3
 800e252:	61fb      	str	r3, [r7, #28]
 800e254:	e012      	b.n	800e27c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e256:	2300      	movs	r3, #0
 800e258:	683a      	ldr	r2, [r7, #0]
 800e25a:	68b9      	ldr	r1, [r7, #8]
 800e25c:	69b8      	ldr	r0, [r7, #24]
 800e25e:	f000 fbb9 	bl	800e9d4 <xQueueGenericSend>
 800e262:	4603      	mov	r3, r0
 800e264:	2b01      	cmp	r3, #1
 800e266:	d009      	beq.n	800e27c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d003      	beq.n	800e276 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800e26e:	f06f 0301 	mvn.w	r3, #1
 800e272:	61fb      	str	r3, [r7, #28]
 800e274:	e002      	b.n	800e27c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800e276:	f06f 0302 	mvn.w	r3, #2
 800e27a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e27c:	69fb      	ldr	r3, [r7, #28]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3720      	adds	r7, #32
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	e000ed04 	.word	0xe000ed04

0800e28c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b088      	sub	sp, #32
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	607a      	str	r2, [r7, #4]
 800e298:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2a2:	f3ef 8305 	mrs	r3, IPSR
 800e2a6:	617b      	str	r3, [r7, #20]
  return(result);
 800e2a8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d028      	beq.n	800e300 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d005      	beq.n	800e2c0 <osMessageQueueGet+0x34>
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d002      	beq.n	800e2c0 <osMessageQueueGet+0x34>
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d003      	beq.n	800e2c8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800e2c0:	f06f 0303 	mvn.w	r3, #3
 800e2c4:	61fb      	str	r3, [r7, #28]
 800e2c6:	e037      	b.n	800e338 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e2cc:	f107 0310 	add.w	r3, r7, #16
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	68b9      	ldr	r1, [r7, #8]
 800e2d4:	69b8      	ldr	r0, [r7, #24]
 800e2d6:	f000 ff8f 	bl	800f1f8 <xQueueReceiveFromISR>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d003      	beq.n	800e2e8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800e2e0:	f06f 0302 	mvn.w	r3, #2
 800e2e4:	61fb      	str	r3, [r7, #28]
 800e2e6:	e027      	b.n	800e338 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d024      	beq.n	800e338 <osMessageQueueGet+0xac>
 800e2ee:	4b15      	ldr	r3, [pc, #84]	; (800e344 <osMessageQueueGet+0xb8>)
 800e2f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2f4:	601a      	str	r2, [r3, #0]
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	e01b      	b.n	800e338 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e300:	69bb      	ldr	r3, [r7, #24]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d002      	beq.n	800e30c <osMessageQueueGet+0x80>
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d103      	bne.n	800e314 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800e30c:	f06f 0303 	mvn.w	r3, #3
 800e310:	61fb      	str	r3, [r7, #28]
 800e312:	e011      	b.n	800e338 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e314:	683a      	ldr	r2, [r7, #0]
 800e316:	68b9      	ldr	r1, [r7, #8]
 800e318:	69b8      	ldr	r0, [r7, #24]
 800e31a:	f000 fd81 	bl	800ee20 <xQueueReceive>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b01      	cmp	r3, #1
 800e322:	d009      	beq.n	800e338 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d003      	beq.n	800e332 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800e32a:	f06f 0301 	mvn.w	r3, #1
 800e32e:	61fb      	str	r3, [r7, #28]
 800e330:	e002      	b.n	800e338 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800e332:	f06f 0302 	mvn.w	r3, #2
 800e336:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e338:	69fb      	ldr	r3, [r7, #28]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3720      	adds	r7, #32
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	e000ed04 	.word	0xe000ed04

0800e348 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	4a07      	ldr	r2, [pc, #28]	; (800e374 <vApplicationGetIdleTaskMemory+0x2c>)
 800e358:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	4a06      	ldr	r2, [pc, #24]	; (800e378 <vApplicationGetIdleTaskMemory+0x30>)
 800e35e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2280      	movs	r2, #128	; 0x80
 800e364:	601a      	str	r2, [r3, #0]
}
 800e366:	bf00      	nop
 800e368:	3714      	adds	r7, #20
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	20000d44 	.word	0x20000d44
 800e378:	20000e00 	.word	0x20000e00

0800e37c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e37c:	b480      	push	{r7}
 800e37e:	b085      	sub	sp, #20
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	4a07      	ldr	r2, [pc, #28]	; (800e3a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800e38c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	4a06      	ldr	r2, [pc, #24]	; (800e3ac <vApplicationGetTimerTaskMemory+0x30>)
 800e392:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e39a:	601a      	str	r2, [r3, #0]
}
 800e39c:	bf00      	nop
 800e39e:	3714      	adds	r7, #20
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	20001000 	.word	0x20001000
 800e3ac:	200010bc 	.word	0x200010bc

0800e3b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b083      	sub	sp, #12
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f103 0208 	add.w	r2, r3, #8
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f103 0208 	add.w	r2, r3, #8
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f103 0208 	add.w	r2, r3, #8
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e3fe:	bf00      	nop
 800e400:	370c      	adds	r7, #12
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e40a:	b480      	push	{r7}
 800e40c:	b085      	sub	sp, #20
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
 800e412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	68fa      	ldr	r2, [r7, #12]
 800e41e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	689a      	ldr	r2, [r3, #8]
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	683a      	ldr	r2, [r7, #0]
 800e42e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	683a      	ldr	r2, [r7, #0]
 800e434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	1c5a      	adds	r2, r3, #1
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	601a      	str	r2, [r3, #0]
}
 800e446:	bf00      	nop
 800e448:	3714      	adds	r7, #20
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr

0800e452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e452:	b480      	push	{r7}
 800e454:	b085      	sub	sp, #20
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
 800e45a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e468:	d103      	bne.n	800e472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	60fb      	str	r3, [r7, #12]
 800e470:	e00c      	b.n	800e48c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	3308      	adds	r3, #8
 800e476:	60fb      	str	r3, [r7, #12]
 800e478:	e002      	b.n	800e480 <vListInsert+0x2e>
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	60fb      	str	r3, [r7, #12]
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	68ba      	ldr	r2, [r7, #8]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d2f6      	bcs.n	800e47a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	685a      	ldr	r2, [r3, #4]
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	683a      	ldr	r2, [r7, #0]
 800e49a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	68fa      	ldr	r2, [r7, #12]
 800e4a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	683a      	ldr	r2, [r7, #0]
 800e4a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	601a      	str	r2, [r3, #0]
}
 800e4b8:	bf00      	nop
 800e4ba:	3714      	adds	r7, #20
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	6892      	ldr	r2, [r2, #8]
 800e4da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	6852      	ldr	r2, [r2, #4]
 800e4e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d103      	bne.n	800e4f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	689a      	ldr	r2, [r3, #8]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	1e5a      	subs	r2, r3, #1
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3714      	adds	r7, #20
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d10a      	bne.n	800e542 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e530:	f383 8811 	msr	BASEPRI, r3
 800e534:	f3bf 8f6f 	isb	sy
 800e538:	f3bf 8f4f 	dsb	sy
 800e53c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e53e:	bf00      	nop
 800e540:	e7fe      	b.n	800e540 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e542:	f002 fd6f 	bl	8011024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e54e:	68f9      	ldr	r1, [r7, #12]
 800e550:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e552:	fb01 f303 	mul.w	r3, r1, r3
 800e556:	441a      	add	r2, r3
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681a      	ldr	r2, [r3, #0]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e572:	3b01      	subs	r3, #1
 800e574:	68f9      	ldr	r1, [r7, #12]
 800e576:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e578:	fb01 f303 	mul.w	r3, r1, r3
 800e57c:	441a      	add	r2, r3
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	22ff      	movs	r2, #255	; 0xff
 800e586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	22ff      	movs	r2, #255	; 0xff
 800e58e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d114      	bne.n	800e5c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	691b      	ldr	r3, [r3, #16]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d01a      	beq.n	800e5d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	3310      	adds	r3, #16
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f001 fd13 	bl	800ffd0 <xTaskRemoveFromEventList>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d012      	beq.n	800e5d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e5b0:	4b0c      	ldr	r3, [pc, #48]	; (800e5e4 <xQueueGenericReset+0xcc>)
 800e5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5b6:	601a      	str	r2, [r3, #0]
 800e5b8:	f3bf 8f4f 	dsb	sy
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	e009      	b.n	800e5d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	3310      	adds	r3, #16
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7ff fef2 	bl	800e3b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	3324      	adds	r3, #36	; 0x24
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7ff feed 	bl	800e3b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e5d6:	f002 fd55 	bl	8011084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e5da:	2301      	movs	r3, #1
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3710      	adds	r7, #16
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	e000ed04 	.word	0xe000ed04

0800e5e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b08e      	sub	sp, #56	; 0x38
 800e5ec:	af02      	add	r7, sp, #8
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	607a      	str	r2, [r7, #4]
 800e5f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d10a      	bne.n	800e612 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e600:	f383 8811 	msr	BASEPRI, r3
 800e604:	f3bf 8f6f 	isb	sy
 800e608:	f3bf 8f4f 	dsb	sy
 800e60c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e60e:	bf00      	nop
 800e610:	e7fe      	b.n	800e610 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10a      	bne.n	800e62e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d002      	beq.n	800e63a <xQueueGenericCreateStatic+0x52>
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <xQueueGenericCreateStatic+0x56>
 800e63a:	2301      	movs	r3, #1
 800e63c:	e000      	b.n	800e640 <xQueueGenericCreateStatic+0x58>
 800e63e:	2300      	movs	r3, #0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10a      	bne.n	800e65a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e648:	f383 8811 	msr	BASEPRI, r3
 800e64c:	f3bf 8f6f 	isb	sy
 800e650:	f3bf 8f4f 	dsb	sy
 800e654:	623b      	str	r3, [r7, #32]
}
 800e656:	bf00      	nop
 800e658:	e7fe      	b.n	800e658 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d102      	bne.n	800e666 <xQueueGenericCreateStatic+0x7e>
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d101      	bne.n	800e66a <xQueueGenericCreateStatic+0x82>
 800e666:	2301      	movs	r3, #1
 800e668:	e000      	b.n	800e66c <xQueueGenericCreateStatic+0x84>
 800e66a:	2300      	movs	r3, #0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10a      	bne.n	800e686 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	61fb      	str	r3, [r7, #28]
}
 800e682:	bf00      	nop
 800e684:	e7fe      	b.n	800e684 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e686:	2350      	movs	r3, #80	; 0x50
 800e688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	2b50      	cmp	r3, #80	; 0x50
 800e68e:	d00a      	beq.n	800e6a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	61bb      	str	r3, [r7, #24]
}
 800e6a2:	bf00      	nop
 800e6a4:	e7fe      	b.n	800e6a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e6a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00d      	beq.n	800e6ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e6ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c0:	9300      	str	r3, [sp, #0]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	68b9      	ldr	r1, [r7, #8]
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f000 f83f 	bl	800e74c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3730      	adds	r7, #48	; 0x30
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b08a      	sub	sp, #40	; 0x28
 800e6dc:	af02      	add	r7, sp, #8
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d10a      	bne.n	800e702 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f0:	f383 8811 	msr	BASEPRI, r3
 800e6f4:	f3bf 8f6f 	isb	sy
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	613b      	str	r3, [r7, #16]
}
 800e6fe:	bf00      	nop
 800e700:	e7fe      	b.n	800e700 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	68ba      	ldr	r2, [r7, #8]
 800e706:	fb02 f303 	mul.w	r3, r2, r3
 800e70a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	3350      	adds	r3, #80	; 0x50
 800e710:	4618      	mov	r0, r3
 800e712:	f002 fda9 	bl	8011268 <pvPortMalloc>
 800e716:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d011      	beq.n	800e742 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e71e:	69bb      	ldr	r3, [r7, #24]
 800e720:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	3350      	adds	r3, #80	; 0x50
 800e726:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	2200      	movs	r2, #0
 800e72c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e730:	79fa      	ldrb	r2, [r7, #7]
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	9300      	str	r3, [sp, #0]
 800e736:	4613      	mov	r3, r2
 800e738:	697a      	ldr	r2, [r7, #20]
 800e73a:	68b9      	ldr	r1, [r7, #8]
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f000 f805 	bl	800e74c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e742:	69bb      	ldr	r3, [r7, #24]
	}
 800e744:	4618      	mov	r0, r3
 800e746:	3720      	adds	r7, #32
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
 800e758:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d103      	bne.n	800e768 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	69ba      	ldr	r2, [r7, #24]
 800e764:	601a      	str	r2, [r3, #0]
 800e766:	e002      	b.n	800e76e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	68ba      	ldr	r2, [r7, #8]
 800e778:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e77a:	2101      	movs	r1, #1
 800e77c:	69b8      	ldr	r0, [r7, #24]
 800e77e:	f7ff fecb 	bl	800e518 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	78fa      	ldrb	r2, [r7, #3]
 800e786:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e78a:	bf00      	nop
 800e78c:	3710      	adds	r7, #16
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e792:	b580      	push	{r7, lr}
 800e794:	b082      	sub	sp, #8
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d00e      	beq.n	800e7be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 f90b 	bl	800e9d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e7be:	bf00      	nop
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b086      	sub	sp, #24
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	617b      	str	r3, [r7, #20]
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e7d8:	79fb      	ldrb	r3, [r7, #7]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	6939      	ldr	r1, [r7, #16]
 800e7de:	6978      	ldr	r0, [r7, #20]
 800e7e0:	f7ff ff7a 	bl	800e6d8 <xQueueGenericCreate>
 800e7e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f7ff ffd3 	bl	800e792 <prvInitialiseMutex>

		return xNewQueue;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
	}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3718      	adds	r7, #24
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b088      	sub	sp, #32
 800e7fa:	af02      	add	r7, sp, #8
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	6039      	str	r1, [r7, #0]
 800e800:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e802:	2301      	movs	r3, #1
 800e804:	617b      	str	r3, [r7, #20]
 800e806:	2300      	movs	r3, #0
 800e808:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e80a:	79fb      	ldrb	r3, [r7, #7]
 800e80c:	9300      	str	r3, [sp, #0]
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	2200      	movs	r2, #0
 800e812:	6939      	ldr	r1, [r7, #16]
 800e814:	6978      	ldr	r0, [r7, #20]
 800e816:	f7ff fee7 	bl	800e5e8 <xQueueGenericCreateStatic>
 800e81a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f7ff ffb8 	bl	800e792 <prvInitialiseMutex>

		return xNewQueue;
 800e822:	68fb      	ldr	r3, [r7, #12]
	}
 800e824:	4618      	mov	r0, r3
 800e826:	3718      	adds	r7, #24
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e82c:	b590      	push	{r4, r7, lr}
 800e82e:	b087      	sub	sp, #28
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d10a      	bne.n	800e854 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e842:	f383 8811 	msr	BASEPRI, r3
 800e846:	f3bf 8f6f 	isb	sy
 800e84a:	f3bf 8f4f 	dsb	sy
 800e84e:	60fb      	str	r3, [r7, #12]
}
 800e850:	bf00      	nop
 800e852:	e7fe      	b.n	800e852 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	689c      	ldr	r4, [r3, #8]
 800e858:	f001 fd7c 	bl	8010354 <xTaskGetCurrentTaskHandle>
 800e85c:	4603      	mov	r3, r0
 800e85e:	429c      	cmp	r4, r3
 800e860:	d111      	bne.n	800e886 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	1e5a      	subs	r2, r3, #1
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d105      	bne.n	800e880 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e874:	2300      	movs	r3, #0
 800e876:	2200      	movs	r2, #0
 800e878:	2100      	movs	r1, #0
 800e87a:	6938      	ldr	r0, [r7, #16]
 800e87c:	f000 f8aa 	bl	800e9d4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e880:	2301      	movs	r3, #1
 800e882:	617b      	str	r3, [r7, #20]
 800e884:	e001      	b.n	800e88a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e886:	2300      	movs	r3, #0
 800e888:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e88a:	697b      	ldr	r3, [r7, #20]
	}
 800e88c:	4618      	mov	r0, r3
 800e88e:	371c      	adds	r7, #28
 800e890:	46bd      	mov	sp, r7
 800e892:	bd90      	pop	{r4, r7, pc}

0800e894 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e894:	b590      	push	{r4, r7, lr}
 800e896:	b087      	sub	sp, #28
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d10a      	bne.n	800e8be <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	60fb      	str	r3, [r7, #12]
}
 800e8ba:	bf00      	nop
 800e8bc:	e7fe      	b.n	800e8bc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	689c      	ldr	r4, [r3, #8]
 800e8c2:	f001 fd47 	bl	8010354 <xTaskGetCurrentTaskHandle>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	429c      	cmp	r4, r3
 800e8ca:	d107      	bne.n	800e8dc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	1c5a      	adds	r2, r3, #1
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	617b      	str	r3, [r7, #20]
 800e8da:	e00c      	b.n	800e8f6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e8dc:	6839      	ldr	r1, [r7, #0]
 800e8de:	6938      	ldr	r0, [r7, #16]
 800e8e0:	f000 fb7e 	bl	800efe0 <xQueueSemaphoreTake>
 800e8e4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d004      	beq.n	800e8f6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	1c5a      	adds	r2, r3, #1
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e8f6:	697b      	ldr	r3, [r7, #20]
	}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	371c      	adds	r7, #28
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd90      	pop	{r4, r7, pc}

0800e900 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e900:	b580      	push	{r7, lr}
 800e902:	b08a      	sub	sp, #40	; 0x28
 800e904:	af02      	add	r7, sp, #8
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d10a      	bne.n	800e928 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e916:	f383 8811 	msr	BASEPRI, r3
 800e91a:	f3bf 8f6f 	isb	sy
 800e91e:	f3bf 8f4f 	dsb	sy
 800e922:	61bb      	str	r3, [r7, #24]
}
 800e924:	bf00      	nop
 800e926:	e7fe      	b.n	800e926 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e928:	68ba      	ldr	r2, [r7, #8]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d90a      	bls.n	800e946 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e934:	f383 8811 	msr	BASEPRI, r3
 800e938:	f3bf 8f6f 	isb	sy
 800e93c:	f3bf 8f4f 	dsb	sy
 800e940:	617b      	str	r3, [r7, #20]
}
 800e942:	bf00      	nop
 800e944:	e7fe      	b.n	800e944 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e946:	2302      	movs	r3, #2
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2200      	movs	r2, #0
 800e94e:	2100      	movs	r1, #0
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f7ff fe49 	bl	800e5e8 <xQueueGenericCreateStatic>
 800e956:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d002      	beq.n	800e964 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	68ba      	ldr	r2, [r7, #8]
 800e962:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e964:	69fb      	ldr	r3, [r7, #28]
	}
 800e966:	4618      	mov	r0, r3
 800e968:	3720      	adds	r7, #32
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}

0800e96e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e96e:	b580      	push	{r7, lr}
 800e970:	b086      	sub	sp, #24
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
 800e976:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10a      	bne.n	800e994 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	613b      	str	r3, [r7, #16]
}
 800e990:	bf00      	nop
 800e992:	e7fe      	b.n	800e992 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e994:	683a      	ldr	r2, [r7, #0]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d90a      	bls.n	800e9b2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a0:	f383 8811 	msr	BASEPRI, r3
 800e9a4:	f3bf 8f6f 	isb	sy
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	60fb      	str	r3, [r7, #12]
}
 800e9ae:	bf00      	nop
 800e9b0:	e7fe      	b.n	800e9b0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f7ff fe8e 	bl	800e6d8 <xQueueGenericCreate>
 800e9bc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	683a      	ldr	r2, [r7, #0]
 800e9c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e9ca:	697b      	ldr	r3, [r7, #20]
	}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3718      	adds	r7, #24
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b08e      	sub	sp, #56	; 0x38
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
 800e9e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d10a      	bne.n	800ea06 <xQueueGenericSend+0x32>
	__asm volatile
 800e9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f4:	f383 8811 	msr	BASEPRI, r3
 800e9f8:	f3bf 8f6f 	isb	sy
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ea02:	bf00      	nop
 800ea04:	e7fe      	b.n	800ea04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d103      	bne.n	800ea14 <xQueueGenericSend+0x40>
 800ea0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d101      	bne.n	800ea18 <xQueueGenericSend+0x44>
 800ea14:	2301      	movs	r3, #1
 800ea16:	e000      	b.n	800ea1a <xQueueGenericSend+0x46>
 800ea18:	2300      	movs	r3, #0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10a      	bne.n	800ea34 <xQueueGenericSend+0x60>
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea22:	f383 8811 	msr	BASEPRI, r3
 800ea26:	f3bf 8f6f 	isb	sy
 800ea2a:	f3bf 8f4f 	dsb	sy
 800ea2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ea30:	bf00      	nop
 800ea32:	e7fe      	b.n	800ea32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d103      	bne.n	800ea42 <xQueueGenericSend+0x6e>
 800ea3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d101      	bne.n	800ea46 <xQueueGenericSend+0x72>
 800ea42:	2301      	movs	r3, #1
 800ea44:	e000      	b.n	800ea48 <xQueueGenericSend+0x74>
 800ea46:	2300      	movs	r3, #0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10a      	bne.n	800ea62 <xQueueGenericSend+0x8e>
	__asm volatile
 800ea4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	623b      	str	r3, [r7, #32]
}
 800ea5e:	bf00      	nop
 800ea60:	e7fe      	b.n	800ea60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea62:	f001 fc87 	bl	8010374 <xTaskGetSchedulerState>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d102      	bne.n	800ea72 <xQueueGenericSend+0x9e>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d101      	bne.n	800ea76 <xQueueGenericSend+0xa2>
 800ea72:	2301      	movs	r3, #1
 800ea74:	e000      	b.n	800ea78 <xQueueGenericSend+0xa4>
 800ea76:	2300      	movs	r3, #0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10a      	bne.n	800ea92 <xQueueGenericSend+0xbe>
	__asm volatile
 800ea7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea80:	f383 8811 	msr	BASEPRI, r3
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	61fb      	str	r3, [r7, #28]
}
 800ea8e:	bf00      	nop
 800ea90:	e7fe      	b.n	800ea90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea92:	f002 fac7 	bl	8011024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d302      	bcc.n	800eaa8 <xQueueGenericSend+0xd4>
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	2b02      	cmp	r3, #2
 800eaa6:	d129      	bne.n	800eafc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eaa8:	683a      	ldr	r2, [r7, #0]
 800eaaa:	68b9      	ldr	r1, [r7, #8]
 800eaac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaae:	f000 fc5e 	bl	800f36e <prvCopyDataToQueue>
 800eab2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d010      	beq.n	800eade <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabe:	3324      	adds	r3, #36	; 0x24
 800eac0:	4618      	mov	r0, r3
 800eac2:	f001 fa85 	bl	800ffd0 <xTaskRemoveFromEventList>
 800eac6:	4603      	mov	r3, r0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d013      	beq.n	800eaf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eacc:	4b3f      	ldr	r3, [pc, #252]	; (800ebcc <xQueueGenericSend+0x1f8>)
 800eace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ead2:	601a      	str	r2, [r3, #0]
 800ead4:	f3bf 8f4f 	dsb	sy
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	e00a      	b.n	800eaf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d007      	beq.n	800eaf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eae4:	4b39      	ldr	r3, [pc, #228]	; (800ebcc <xQueueGenericSend+0x1f8>)
 800eae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaea:	601a      	str	r2, [r3, #0]
 800eaec:	f3bf 8f4f 	dsb	sy
 800eaf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eaf4:	f002 fac6 	bl	8011084 <vPortExitCritical>
				return pdPASS;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	e063      	b.n	800ebc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d103      	bne.n	800eb0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb02:	f002 fabf 	bl	8011084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eb06:	2300      	movs	r3, #0
 800eb08:	e05c      	b.n	800ebc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d106      	bne.n	800eb1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb10:	f107 0314 	add.w	r3, r7, #20
 800eb14:	4618      	mov	r0, r3
 800eb16:	f001 fabf 	bl	8010098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb1e:	f002 fab1 	bl	8011084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb22:	f001 f819 	bl	800fb58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb26:	f002 fa7d 	bl	8011024 <vPortEnterCritical>
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb30:	b25b      	sxtb	r3, r3
 800eb32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb36:	d103      	bne.n	800eb40 <xQueueGenericSend+0x16c>
 800eb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb46:	b25b      	sxtb	r3, r3
 800eb48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb4c:	d103      	bne.n	800eb56 <xQueueGenericSend+0x182>
 800eb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb50:	2200      	movs	r2, #0
 800eb52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb56:	f002 fa95 	bl	8011084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb5a:	1d3a      	adds	r2, r7, #4
 800eb5c:	f107 0314 	add.w	r3, r7, #20
 800eb60:	4611      	mov	r1, r2
 800eb62:	4618      	mov	r0, r3
 800eb64:	f001 faae 	bl	80100c4 <xTaskCheckForTimeOut>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d124      	bne.n	800ebb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eb6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb70:	f000 fcf5 	bl	800f55e <prvIsQueueFull>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d018      	beq.n	800ebac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7c:	3310      	adds	r3, #16
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	4611      	mov	r1, r2
 800eb82:	4618      	mov	r0, r3
 800eb84:	f001 f9d4 	bl	800ff30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eb88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb8a:	f000 fc80 	bl	800f48e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eb8e:	f000 fff1 	bl	800fb74 <xTaskResumeAll>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f47f af7c 	bne.w	800ea92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eb9a:	4b0c      	ldr	r3, [pc, #48]	; (800ebcc <xQueueGenericSend+0x1f8>)
 800eb9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eba0:	601a      	str	r2, [r3, #0]
 800eba2:	f3bf 8f4f 	dsb	sy
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	e772      	b.n	800ea92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ebac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebae:	f000 fc6e 	bl	800f48e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebb2:	f000 ffdf 	bl	800fb74 <xTaskResumeAll>
 800ebb6:	e76c      	b.n	800ea92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ebb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebba:	f000 fc68 	bl	800f48e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebbe:	f000 ffd9 	bl	800fb74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ebc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3738      	adds	r7, #56	; 0x38
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	e000ed04 	.word	0xe000ed04

0800ebd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b090      	sub	sp, #64	; 0x40
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	607a      	str	r2, [r7, #4]
 800ebdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ebe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d10a      	bne.n	800ebfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ebe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebec:	f383 8811 	msr	BASEPRI, r3
 800ebf0:	f3bf 8f6f 	isb	sy
 800ebf4:	f3bf 8f4f 	dsb	sy
 800ebf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ebfa:	bf00      	nop
 800ebfc:	e7fe      	b.n	800ebfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d103      	bne.n	800ec0c <xQueueGenericSendFromISR+0x3c>
 800ec04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d101      	bne.n	800ec10 <xQueueGenericSendFromISR+0x40>
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	e000      	b.n	800ec12 <xQueueGenericSendFromISR+0x42>
 800ec10:	2300      	movs	r3, #0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d10a      	bne.n	800ec2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ec16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1a:	f383 8811 	msr	BASEPRI, r3
 800ec1e:	f3bf 8f6f 	isb	sy
 800ec22:	f3bf 8f4f 	dsb	sy
 800ec26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ec28:	bf00      	nop
 800ec2a:	e7fe      	b.n	800ec2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	2b02      	cmp	r3, #2
 800ec30:	d103      	bne.n	800ec3a <xQueueGenericSendFromISR+0x6a>
 800ec32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d101      	bne.n	800ec3e <xQueueGenericSendFromISR+0x6e>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e000      	b.n	800ec40 <xQueueGenericSendFromISR+0x70>
 800ec3e:	2300      	movs	r3, #0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d10a      	bne.n	800ec5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ec44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec48:	f383 8811 	msr	BASEPRI, r3
 800ec4c:	f3bf 8f6f 	isb	sy
 800ec50:	f3bf 8f4f 	dsb	sy
 800ec54:	623b      	str	r3, [r7, #32]
}
 800ec56:	bf00      	nop
 800ec58:	e7fe      	b.n	800ec58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec5a:	f002 fac5 	bl	80111e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ec5e:	f3ef 8211 	mrs	r2, BASEPRI
 800ec62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec66:	f383 8811 	msr	BASEPRI, r3
 800ec6a:	f3bf 8f6f 	isb	sy
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	61fa      	str	r2, [r7, #28]
 800ec74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ec76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d302      	bcc.n	800ec8c <xQueueGenericSendFromISR+0xbc>
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d12f      	bne.n	800ecec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ec8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec9c:	683a      	ldr	r2, [r7, #0]
 800ec9e:	68b9      	ldr	r1, [r7, #8]
 800eca0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eca2:	f000 fb64 	bl	800f36e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eca6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ecaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecae:	d112      	bne.n	800ecd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d016      	beq.n	800ece6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecba:	3324      	adds	r3, #36	; 0x24
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f001 f987 	bl	800ffd0 <xTaskRemoveFromEventList>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00e      	beq.n	800ece6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d00b      	beq.n	800ece6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	e007      	b.n	800ece6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ecd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ecda:	3301      	adds	r3, #1
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	b25a      	sxtb	r2, r3
 800ece0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ece6:	2301      	movs	r3, #1
 800ece8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ecea:	e001      	b.n	800ecf0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ecec:	2300      	movs	r3, #0
 800ecee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecf2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ecfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ecfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3740      	adds	r7, #64	; 0x40
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ed06:	b580      	push	{r7, lr}
 800ed08:	b08e      	sub	sp, #56	; 0x38
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
 800ed0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ed14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d10a      	bne.n	800ed30 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ed1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1e:	f383 8811 	msr	BASEPRI, r3
 800ed22:	f3bf 8f6f 	isb	sy
 800ed26:	f3bf 8f4f 	dsb	sy
 800ed2a:	623b      	str	r3, [r7, #32]
}
 800ed2c:	bf00      	nop
 800ed2e:	e7fe      	b.n	800ed2e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ed30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d00a      	beq.n	800ed4e <xQueueGiveFromISR+0x48>
	__asm volatile
 800ed38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3c:	f383 8811 	msr	BASEPRI, r3
 800ed40:	f3bf 8f6f 	isb	sy
 800ed44:	f3bf 8f4f 	dsb	sy
 800ed48:	61fb      	str	r3, [r7, #28]
}
 800ed4a:	bf00      	nop
 800ed4c:	e7fe      	b.n	800ed4c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ed4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d103      	bne.n	800ed5e <xQueueGiveFromISR+0x58>
 800ed56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed58:	689b      	ldr	r3, [r3, #8]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d101      	bne.n	800ed62 <xQueueGiveFromISR+0x5c>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e000      	b.n	800ed64 <xQueueGiveFromISR+0x5e>
 800ed62:	2300      	movs	r3, #0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d10a      	bne.n	800ed7e <xQueueGiveFromISR+0x78>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	61bb      	str	r3, [r7, #24]
}
 800ed7a:	bf00      	nop
 800ed7c:	e7fe      	b.n	800ed7c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed7e:	f002 fa33 	bl	80111e8 <vPortValidateInterruptPriority>
	__asm volatile
 800ed82:	f3ef 8211 	mrs	r2, BASEPRI
 800ed86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed8a:	f383 8811 	msr	BASEPRI, r3
 800ed8e:	f3bf 8f6f 	isb	sy
 800ed92:	f3bf 8f4f 	dsb	sy
 800ed96:	617a      	str	r2, [r7, #20]
 800ed98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ed9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800eda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eda8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edaa:	429a      	cmp	r2, r3
 800edac:	d22b      	bcs.n	800ee06 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800edae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800edb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edba:	1c5a      	adds	r2, r3, #1
 800edbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800edc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800edc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edc8:	d112      	bne.n	800edf0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d016      	beq.n	800ee00 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800edd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd4:	3324      	adds	r3, #36	; 0x24
 800edd6:	4618      	mov	r0, r3
 800edd8:	f001 f8fa 	bl	800ffd0 <xTaskRemoveFromEventList>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00e      	beq.n	800ee00 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d00b      	beq.n	800ee00 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	2201      	movs	r2, #1
 800edec:	601a      	str	r2, [r3, #0]
 800edee:	e007      	b.n	800ee00 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800edf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edf4:	3301      	adds	r3, #1
 800edf6:	b2db      	uxtb	r3, r3
 800edf8:	b25a      	sxtb	r2, r3
 800edfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee00:	2301      	movs	r3, #1
 800ee02:	637b      	str	r3, [r7, #52]	; 0x34
 800ee04:	e001      	b.n	800ee0a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee06:	2300      	movs	r3, #0
 800ee08:	637b      	str	r3, [r7, #52]	; 0x34
 800ee0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f383 8811 	msr	BASEPRI, r3
}
 800ee14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3738      	adds	r7, #56	; 0x38
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b08c      	sub	sp, #48	; 0x30
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ee34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d10a      	bne.n	800ee50 <xQueueReceive+0x30>
	__asm volatile
 800ee3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3e:	f383 8811 	msr	BASEPRI, r3
 800ee42:	f3bf 8f6f 	isb	sy
 800ee46:	f3bf 8f4f 	dsb	sy
 800ee4a:	623b      	str	r3, [r7, #32]
}
 800ee4c:	bf00      	nop
 800ee4e:	e7fe      	b.n	800ee4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d103      	bne.n	800ee5e <xQueueReceive+0x3e>
 800ee56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d101      	bne.n	800ee62 <xQueueReceive+0x42>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	e000      	b.n	800ee64 <xQueueReceive+0x44>
 800ee62:	2300      	movs	r3, #0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d10a      	bne.n	800ee7e <xQueueReceive+0x5e>
	__asm volatile
 800ee68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6c:	f383 8811 	msr	BASEPRI, r3
 800ee70:	f3bf 8f6f 	isb	sy
 800ee74:	f3bf 8f4f 	dsb	sy
 800ee78:	61fb      	str	r3, [r7, #28]
}
 800ee7a:	bf00      	nop
 800ee7c:	e7fe      	b.n	800ee7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee7e:	f001 fa79 	bl	8010374 <xTaskGetSchedulerState>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d102      	bne.n	800ee8e <xQueueReceive+0x6e>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d101      	bne.n	800ee92 <xQueueReceive+0x72>
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e000      	b.n	800ee94 <xQueueReceive+0x74>
 800ee92:	2300      	movs	r3, #0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d10a      	bne.n	800eeae <xQueueReceive+0x8e>
	__asm volatile
 800ee98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee9c:	f383 8811 	msr	BASEPRI, r3
 800eea0:	f3bf 8f6f 	isb	sy
 800eea4:	f3bf 8f4f 	dsb	sy
 800eea8:	61bb      	str	r3, [r7, #24]
}
 800eeaa:	bf00      	nop
 800eeac:	e7fe      	b.n	800eeac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eeae:	f002 f8b9 	bl	8011024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d01f      	beq.n	800eefe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eebe:	68b9      	ldr	r1, [r7, #8]
 800eec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eec2:	f000 fabe 	bl	800f442 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec8:	1e5a      	subs	r2, r3, #1
 800eeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eecc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed0:	691b      	ldr	r3, [r3, #16]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d00f      	beq.n	800eef6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed8:	3310      	adds	r3, #16
 800eeda:	4618      	mov	r0, r3
 800eedc:	f001 f878 	bl	800ffd0 <xTaskRemoveFromEventList>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d007      	beq.n	800eef6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eee6:	4b3d      	ldr	r3, [pc, #244]	; (800efdc <xQueueReceive+0x1bc>)
 800eee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeec:	601a      	str	r2, [r3, #0]
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eef6:	f002 f8c5 	bl	8011084 <vPortExitCritical>
				return pdPASS;
 800eefa:	2301      	movs	r3, #1
 800eefc:	e069      	b.n	800efd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d103      	bne.n	800ef0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef04:	f002 f8be 	bl	8011084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	e062      	b.n	800efd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d106      	bne.n	800ef20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef12:	f107 0310 	add.w	r3, r7, #16
 800ef16:	4618      	mov	r0, r3
 800ef18:	f001 f8be 	bl	8010098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef20:	f002 f8b0 	bl	8011084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef24:	f000 fe18 	bl	800fb58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef28:	f002 f87c 	bl	8011024 <vPortEnterCritical>
 800ef2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef32:	b25b      	sxtb	r3, r3
 800ef34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef38:	d103      	bne.n	800ef42 <xQueueReceive+0x122>
 800ef3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef48:	b25b      	sxtb	r3, r3
 800ef4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef4e:	d103      	bne.n	800ef58 <xQueueReceive+0x138>
 800ef50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef52:	2200      	movs	r2, #0
 800ef54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef58:	f002 f894 	bl	8011084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef5c:	1d3a      	adds	r2, r7, #4
 800ef5e:	f107 0310 	add.w	r3, r7, #16
 800ef62:	4611      	mov	r1, r2
 800ef64:	4618      	mov	r0, r3
 800ef66:	f001 f8ad 	bl	80100c4 <xTaskCheckForTimeOut>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d123      	bne.n	800efb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef72:	f000 fade 	bl	800f532 <prvIsQueueEmpty>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d017      	beq.n	800efac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7e:	3324      	adds	r3, #36	; 0x24
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	4611      	mov	r1, r2
 800ef84:	4618      	mov	r0, r3
 800ef86:	f000 ffd3 	bl	800ff30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef8c:	f000 fa7f 	bl	800f48e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef90:	f000 fdf0 	bl	800fb74 <xTaskResumeAll>
 800ef94:	4603      	mov	r3, r0
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d189      	bne.n	800eeae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ef9a:	4b10      	ldr	r3, [pc, #64]	; (800efdc <xQueueReceive+0x1bc>)
 800ef9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	f3bf 8f4f 	dsb	sy
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	e780      	b.n	800eeae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800efac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efae:	f000 fa6e 	bl	800f48e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800efb2:	f000 fddf 	bl	800fb74 <xTaskResumeAll>
 800efb6:	e77a      	b.n	800eeae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800efb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efba:	f000 fa68 	bl	800f48e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800efbe:	f000 fdd9 	bl	800fb74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800efc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efc4:	f000 fab5 	bl	800f532 <prvIsQueueEmpty>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f43f af6f 	beq.w	800eeae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800efd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3730      	adds	r7, #48	; 0x30
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	e000ed04 	.word	0xe000ed04

0800efe0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b08e      	sub	sp, #56	; 0x38
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800efea:	2300      	movs	r3, #0
 800efec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800eff2:	2300      	movs	r3, #0
 800eff4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d10a      	bne.n	800f012 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800effc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f000:	f383 8811 	msr	BASEPRI, r3
 800f004:	f3bf 8f6f 	isb	sy
 800f008:	f3bf 8f4f 	dsb	sy
 800f00c:	623b      	str	r3, [r7, #32]
}
 800f00e:	bf00      	nop
 800f010:	e7fe      	b.n	800f010 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00a      	beq.n	800f030 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01e:	f383 8811 	msr	BASEPRI, r3
 800f022:	f3bf 8f6f 	isb	sy
 800f026:	f3bf 8f4f 	dsb	sy
 800f02a:	61fb      	str	r3, [r7, #28]
}
 800f02c:	bf00      	nop
 800f02e:	e7fe      	b.n	800f02e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f030:	f001 f9a0 	bl	8010374 <xTaskGetSchedulerState>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	d102      	bne.n	800f040 <xQueueSemaphoreTake+0x60>
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d101      	bne.n	800f044 <xQueueSemaphoreTake+0x64>
 800f040:	2301      	movs	r3, #1
 800f042:	e000      	b.n	800f046 <xQueueSemaphoreTake+0x66>
 800f044:	2300      	movs	r3, #0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d10a      	bne.n	800f060 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04e:	f383 8811 	msr	BASEPRI, r3
 800f052:	f3bf 8f6f 	isb	sy
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	61bb      	str	r3, [r7, #24]
}
 800f05c:	bf00      	nop
 800f05e:	e7fe      	b.n	800f05e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f060:	f001 ffe0 	bl	8011024 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f068:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d024      	beq.n	800f0ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f072:	1e5a      	subs	r2, r3, #1
 800f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f076:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d104      	bne.n	800f08a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f080:	f001 faee 	bl	8010660 <pvTaskIncrementMutexHeldCount>
 800f084:	4602      	mov	r2, r0
 800f086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f088:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d00f      	beq.n	800f0b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f094:	3310      	adds	r3, #16
 800f096:	4618      	mov	r0, r3
 800f098:	f000 ff9a 	bl	800ffd0 <xTaskRemoveFromEventList>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d007      	beq.n	800f0b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f0a2:	4b54      	ldr	r3, [pc, #336]	; (800f1f4 <xQueueSemaphoreTake+0x214>)
 800f0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0a8:	601a      	str	r2, [r3, #0]
 800f0aa:	f3bf 8f4f 	dsb	sy
 800f0ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f0b2:	f001 ffe7 	bl	8011084 <vPortExitCritical>
				return pdPASS;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e097      	b.n	800f1ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d111      	bne.n	800f0e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00a      	beq.n	800f0dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ca:	f383 8811 	msr	BASEPRI, r3
 800f0ce:	f3bf 8f6f 	isb	sy
 800f0d2:	f3bf 8f4f 	dsb	sy
 800f0d6:	617b      	str	r3, [r7, #20]
}
 800f0d8:	bf00      	nop
 800f0da:	e7fe      	b.n	800f0da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f0dc:	f001 ffd2 	bl	8011084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	e082      	b.n	800f1ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d106      	bne.n	800f0f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f0ea:	f107 030c 	add.w	r3, r7, #12
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f000 ffd2 	bl	8010098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f0f8:	f001 ffc4 	bl	8011084 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f0fc:	f000 fd2c 	bl	800fb58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f100:	f001 ff90 	bl	8011024 <vPortEnterCritical>
 800f104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f10a:	b25b      	sxtb	r3, r3
 800f10c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f110:	d103      	bne.n	800f11a <xQueueSemaphoreTake+0x13a>
 800f112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f114:	2200      	movs	r2, #0
 800f116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f120:	b25b      	sxtb	r3, r3
 800f122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f126:	d103      	bne.n	800f130 <xQueueSemaphoreTake+0x150>
 800f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12a:	2200      	movs	r2, #0
 800f12c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f130:	f001 ffa8 	bl	8011084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f134:	463a      	mov	r2, r7
 800f136:	f107 030c 	add.w	r3, r7, #12
 800f13a:	4611      	mov	r1, r2
 800f13c:	4618      	mov	r0, r3
 800f13e:	f000 ffc1 	bl	80100c4 <xTaskCheckForTimeOut>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d132      	bne.n	800f1ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f14a:	f000 f9f2 	bl	800f532 <prvIsQueueEmpty>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d026      	beq.n	800f1a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d109      	bne.n	800f170 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f15c:	f001 ff62 	bl	8011024 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f162:	689b      	ldr	r3, [r3, #8]
 800f164:	4618      	mov	r0, r3
 800f166:	f001 f923 	bl	80103b0 <xTaskPriorityInherit>
 800f16a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f16c:	f001 ff8a 	bl	8011084 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f172:	3324      	adds	r3, #36	; 0x24
 800f174:	683a      	ldr	r2, [r7, #0]
 800f176:	4611      	mov	r1, r2
 800f178:	4618      	mov	r0, r3
 800f17a:	f000 fed9 	bl	800ff30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f17e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f180:	f000 f985 	bl	800f48e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f184:	f000 fcf6 	bl	800fb74 <xTaskResumeAll>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	f47f af68 	bne.w	800f060 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f190:	4b18      	ldr	r3, [pc, #96]	; (800f1f4 <xQueueSemaphoreTake+0x214>)
 800f192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f196:	601a      	str	r2, [r3, #0]
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	f3bf 8f6f 	isb	sy
 800f1a0:	e75e      	b.n	800f060 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f1a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1a4:	f000 f973 	bl	800f48e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1a8:	f000 fce4 	bl	800fb74 <xTaskResumeAll>
 800f1ac:	e758      	b.n	800f060 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f1ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1b0:	f000 f96d 	bl	800f48e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1b4:	f000 fcde 	bl	800fb74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1ba:	f000 f9ba 	bl	800f532 <prvIsQueueEmpty>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	f43f af4d 	beq.w	800f060 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d00d      	beq.n	800f1e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f1cc:	f001 ff2a 	bl	8011024 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f1d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1d2:	f000 f8b4 	bl	800f33e <prvGetDisinheritPriorityAfterTimeout>
 800f1d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f001 f9bc 	bl	801055c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f1e4:	f001 ff4e 	bl	8011084 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f1e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3738      	adds	r7, #56	; 0x38
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	e000ed04 	.word	0xe000ed04

0800f1f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b08e      	sub	sp, #56	; 0x38
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d10a      	bne.n	800f224 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	623b      	str	r3, [r7, #32]
}
 800f220:	bf00      	nop
 800f222:	e7fe      	b.n	800f222 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d103      	bne.n	800f232 <xQueueReceiveFromISR+0x3a>
 800f22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d101      	bne.n	800f236 <xQueueReceiveFromISR+0x3e>
 800f232:	2301      	movs	r3, #1
 800f234:	e000      	b.n	800f238 <xQueueReceiveFromISR+0x40>
 800f236:	2300      	movs	r3, #0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d10a      	bne.n	800f252 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f240:	f383 8811 	msr	BASEPRI, r3
 800f244:	f3bf 8f6f 	isb	sy
 800f248:	f3bf 8f4f 	dsb	sy
 800f24c:	61fb      	str	r3, [r7, #28]
}
 800f24e:	bf00      	nop
 800f250:	e7fe      	b.n	800f250 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f252:	f001 ffc9 	bl	80111e8 <vPortValidateInterruptPriority>
	__asm volatile
 800f256:	f3ef 8211 	mrs	r2, BASEPRI
 800f25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25e:	f383 8811 	msr	BASEPRI, r3
 800f262:	f3bf 8f6f 	isb	sy
 800f266:	f3bf 8f4f 	dsb	sy
 800f26a:	61ba      	str	r2, [r7, #24]
 800f26c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f26e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f270:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f276:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d02f      	beq.n	800f2de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f288:	68b9      	ldr	r1, [r7, #8]
 800f28a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f28c:	f000 f8d9 	bl	800f442 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f292:	1e5a      	subs	r2, r3, #1
 800f294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f296:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f298:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f29c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2a0:	d112      	bne.n	800f2c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d016      	beq.n	800f2d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ac:	3310      	adds	r3, #16
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f000 fe8e 	bl	800ffd0 <xTaskRemoveFromEventList>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00e      	beq.n	800f2d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d00b      	beq.n	800f2d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	601a      	str	r2, [r3, #0]
 800f2c6:	e007      	b.n	800f2d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	b25a      	sxtb	r2, r3
 800f2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	637b      	str	r3, [r7, #52]	; 0x34
 800f2dc:	e001      	b.n	800f2e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	637b      	str	r3, [r7, #52]	; 0x34
 800f2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	f383 8811 	msr	BASEPRI, r3
}
 800f2ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3738      	adds	r7, #56	; 0x38
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d10a      	bne.n	800f320 <vQueueDelete+0x28>
	__asm volatile
 800f30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30e:	f383 8811 	msr	BASEPRI, r3
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	f3bf 8f4f 	dsb	sy
 800f31a:	60bb      	str	r3, [r7, #8]
}
 800f31c:	bf00      	nop
 800f31e:	e7fe      	b.n	800f31e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f000 f95f 	bl	800f5e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d102      	bne.n	800f336 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f002 f865 	bl	8011400 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f336:	bf00      	nop
 800f338:	3710      	adds	r7, #16
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}

0800f33e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f33e:	b480      	push	{r7}
 800f340:	b085      	sub	sp, #20
 800f342:	af00      	add	r7, sp, #0
 800f344:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d006      	beq.n	800f35c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f358:	60fb      	str	r3, [r7, #12]
 800f35a:	e001      	b.n	800f360 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f35c:	2300      	movs	r3, #0
 800f35e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f360:	68fb      	ldr	r3, [r7, #12]
	}
 800f362:	4618      	mov	r0, r3
 800f364:	3714      	adds	r7, #20
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr

0800f36e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f36e:	b580      	push	{r7, lr}
 800f370:	b086      	sub	sp, #24
 800f372:	af00      	add	r7, sp, #0
 800f374:	60f8      	str	r0, [r7, #12]
 800f376:	60b9      	str	r1, [r7, #8]
 800f378:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f37a:	2300      	movs	r3, #0
 800f37c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f382:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10d      	bne.n	800f3a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d14d      	bne.n	800f430 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	689b      	ldr	r3, [r3, #8]
 800f398:	4618      	mov	r0, r3
 800f39a:	f001 f871 	bl	8010480 <xTaskPriorityDisinherit>
 800f39e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	609a      	str	r2, [r3, #8]
 800f3a6:	e043      	b.n	800f430 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d119      	bne.n	800f3e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	6858      	ldr	r0, [r3, #4]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	68b9      	ldr	r1, [r7, #8]
 800f3ba:	f002 fa62 	bl	8011882 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	685a      	ldr	r2, [r3, #4]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3c6:	441a      	add	r2, r3
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	685a      	ldr	r2, [r3, #4]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d32b      	bcc.n	800f430 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	605a      	str	r2, [r3, #4]
 800f3e0:	e026      	b.n	800f430 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	68d8      	ldr	r0, [r3, #12]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	68b9      	ldr	r1, [r7, #8]
 800f3ee:	f002 fa48 	bl	8011882 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	68da      	ldr	r2, [r3, #12]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3fa:	425b      	negs	r3, r3
 800f3fc:	441a      	add	r2, r3
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	68da      	ldr	r2, [r3, #12]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d207      	bcs.n	800f41e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	689a      	ldr	r2, [r3, #8]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f416:	425b      	negs	r3, r3
 800f418:	441a      	add	r2, r3
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2b02      	cmp	r3, #2
 800f422:	d105      	bne.n	800f430 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d002      	beq.n	800f430 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	3b01      	subs	r3, #1
 800f42e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	1c5a      	adds	r2, r3, #1
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f438:	697b      	ldr	r3, [r7, #20]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3718      	adds	r7, #24
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b082      	sub	sp, #8
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f450:	2b00      	cmp	r3, #0
 800f452:	d018      	beq.n	800f486 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	68da      	ldr	r2, [r3, #12]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f45c:	441a      	add	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	68da      	ldr	r2, [r3, #12]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d303      	bcc.n	800f476 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	68d9      	ldr	r1, [r3, #12]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f47e:	461a      	mov	r2, r3
 800f480:	6838      	ldr	r0, [r7, #0]
 800f482:	f002 f9fe 	bl	8011882 <memcpy>
	}
}
 800f486:	bf00      	nop
 800f488:	3708      	adds	r7, #8
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b084      	sub	sp, #16
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f496:	f001 fdc5 	bl	8011024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4a2:	e011      	b.n	800f4c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d012      	beq.n	800f4d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	3324      	adds	r3, #36	; 0x24
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f000 fd8d 	bl	800ffd0 <xTaskRemoveFromEventList>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d001      	beq.n	800f4c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f4bc:	f000 fe64 	bl	8010188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f4c0:	7bfb      	ldrb	r3, [r7, #15]
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	dce9      	bgt.n	800f4a4 <prvUnlockQueue+0x16>
 800f4d0:	e000      	b.n	800f4d4 <prvUnlockQueue+0x46>
					break;
 800f4d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	22ff      	movs	r2, #255	; 0xff
 800f4d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f4dc:	f001 fdd2 	bl	8011084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f4e0:	f001 fda0 	bl	8011024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4ec:	e011      	b.n	800f512 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	691b      	ldr	r3, [r3, #16]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d012      	beq.n	800f51c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	3310      	adds	r3, #16
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f000 fd68 	bl	800ffd0 <xTaskRemoveFromEventList>
 800f500:	4603      	mov	r3, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	d001      	beq.n	800f50a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f506:	f000 fe3f 	bl	8010188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f50a:	7bbb      	ldrb	r3, [r7, #14]
 800f50c:	3b01      	subs	r3, #1
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f516:	2b00      	cmp	r3, #0
 800f518:	dce9      	bgt.n	800f4ee <prvUnlockQueue+0x60>
 800f51a:	e000      	b.n	800f51e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f51c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	22ff      	movs	r2, #255	; 0xff
 800f522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f526:	f001 fdad 	bl	8011084 <vPortExitCritical>
}
 800f52a:	bf00      	nop
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f532:	b580      	push	{r7, lr}
 800f534:	b084      	sub	sp, #16
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f53a:	f001 fd73 	bl	8011024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f542:	2b00      	cmp	r3, #0
 800f544:	d102      	bne.n	800f54c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f546:	2301      	movs	r3, #1
 800f548:	60fb      	str	r3, [r7, #12]
 800f54a:	e001      	b.n	800f550 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f54c:	2300      	movs	r3, #0
 800f54e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f550:	f001 fd98 	bl	8011084 <vPortExitCritical>

	return xReturn;
 800f554:	68fb      	ldr	r3, [r7, #12]
}
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f55e:	b580      	push	{r7, lr}
 800f560:	b084      	sub	sp, #16
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f566:	f001 fd5d 	bl	8011024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f572:	429a      	cmp	r2, r3
 800f574:	d102      	bne.n	800f57c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f576:	2301      	movs	r3, #1
 800f578:	60fb      	str	r3, [r7, #12]
 800f57a:	e001      	b.n	800f580 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f57c:	2300      	movs	r3, #0
 800f57e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f580:	f001 fd80 	bl	8011084 <vPortExitCritical>

	return xReturn;
 800f584:	68fb      	ldr	r3, [r7, #12]
}
 800f586:	4618      	mov	r0, r3
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
	...

0800f590 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f590:	b480      	push	{r7}
 800f592:	b085      	sub	sp, #20
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f59a:	2300      	movs	r3, #0
 800f59c:	60fb      	str	r3, [r7, #12]
 800f59e:	e014      	b.n	800f5ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f5a0:	4a0f      	ldr	r2, [pc, #60]	; (800f5e0 <vQueueAddToRegistry+0x50>)
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10b      	bne.n	800f5c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f5ac:	490c      	ldr	r1, [pc, #48]	; (800f5e0 <vQueueAddToRegistry+0x50>)
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	683a      	ldr	r2, [r7, #0]
 800f5b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f5b6:	4a0a      	ldr	r2, [pc, #40]	; (800f5e0 <vQueueAddToRegistry+0x50>)
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	4413      	add	r3, r2
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f5c2:	e006      	b.n	800f5d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	60fb      	str	r3, [r7, #12]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2b07      	cmp	r3, #7
 800f5ce:	d9e7      	bls.n	800f5a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f5d0:	bf00      	nop
 800f5d2:	bf00      	nop
 800f5d4:	3714      	adds	r7, #20
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	200014bc 	.word	0x200014bc

0800f5e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b085      	sub	sp, #20
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	60fb      	str	r3, [r7, #12]
 800f5f0:	e016      	b.n	800f620 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f5f2:	4a10      	ldr	r2, [pc, #64]	; (800f634 <vQueueUnregisterQueue+0x50>)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	00db      	lsls	r3, r3, #3
 800f5f8:	4413      	add	r3, r2
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d10b      	bne.n	800f61a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f602:	4a0c      	ldr	r2, [pc, #48]	; (800f634 <vQueueUnregisterQueue+0x50>)
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2100      	movs	r1, #0
 800f608:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f60c:	4a09      	ldr	r2, [pc, #36]	; (800f634 <vQueueUnregisterQueue+0x50>)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	00db      	lsls	r3, r3, #3
 800f612:	4413      	add	r3, r2
 800f614:	2200      	movs	r2, #0
 800f616:	605a      	str	r2, [r3, #4]
				break;
 800f618:	e006      	b.n	800f628 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	3301      	adds	r3, #1
 800f61e:	60fb      	str	r3, [r7, #12]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2b07      	cmp	r3, #7
 800f624:	d9e5      	bls.n	800f5f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f626:	bf00      	nop
 800f628:	bf00      	nop
 800f62a:	3714      	adds	r7, #20
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr
 800f634:	200014bc 	.word	0x200014bc

0800f638 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b086      	sub	sp, #24
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f648:	f001 fcec 	bl	8011024 <vPortEnterCritical>
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f652:	b25b      	sxtb	r3, r3
 800f654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f658:	d103      	bne.n	800f662 <vQueueWaitForMessageRestricted+0x2a>
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	2200      	movs	r2, #0
 800f65e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f668:	b25b      	sxtb	r3, r3
 800f66a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f66e:	d103      	bne.n	800f678 <vQueueWaitForMessageRestricted+0x40>
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	2200      	movs	r2, #0
 800f674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f678:	f001 fd04 	bl	8011084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f680:	2b00      	cmp	r3, #0
 800f682:	d106      	bne.n	800f692 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	3324      	adds	r3, #36	; 0x24
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	68b9      	ldr	r1, [r7, #8]
 800f68c:	4618      	mov	r0, r3
 800f68e:	f000 fc73 	bl	800ff78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f692:	6978      	ldr	r0, [r7, #20]
 800f694:	f7ff fefb 	bl	800f48e <prvUnlockQueue>
	}
 800f698:	bf00      	nop
 800f69a:	3718      	adds	r7, #24
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b08e      	sub	sp, #56	; 0x38
 800f6a4:	af04      	add	r7, sp, #16
 800f6a6:	60f8      	str	r0, [r7, #12]
 800f6a8:	60b9      	str	r1, [r7, #8]
 800f6aa:	607a      	str	r2, [r7, #4]
 800f6ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d10a      	bne.n	800f6ca <xTaskCreateStatic+0x2a>
	__asm volatile
 800f6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b8:	f383 8811 	msr	BASEPRI, r3
 800f6bc:	f3bf 8f6f 	isb	sy
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	623b      	str	r3, [r7, #32]
}
 800f6c6:	bf00      	nop
 800f6c8:	e7fe      	b.n	800f6c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d10a      	bne.n	800f6e6 <xTaskCreateStatic+0x46>
	__asm volatile
 800f6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d4:	f383 8811 	msr	BASEPRI, r3
 800f6d8:	f3bf 8f6f 	isb	sy
 800f6dc:	f3bf 8f4f 	dsb	sy
 800f6e0:	61fb      	str	r3, [r7, #28]
}
 800f6e2:	bf00      	nop
 800f6e4:	e7fe      	b.n	800f6e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f6e6:	23bc      	movs	r3, #188	; 0xbc
 800f6e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	2bbc      	cmp	r3, #188	; 0xbc
 800f6ee:	d00a      	beq.n	800f706 <xTaskCreateStatic+0x66>
	__asm volatile
 800f6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f4:	f383 8811 	msr	BASEPRI, r3
 800f6f8:	f3bf 8f6f 	isb	sy
 800f6fc:	f3bf 8f4f 	dsb	sy
 800f700:	61bb      	str	r3, [r7, #24]
}
 800f702:	bf00      	nop
 800f704:	e7fe      	b.n	800f704 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f706:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d01e      	beq.n	800f74c <xTaskCreateStatic+0xac>
 800f70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f710:	2b00      	cmp	r3, #0
 800f712:	d01b      	beq.n	800f74c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f716:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f71c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f720:	2202      	movs	r2, #2
 800f722:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f726:	2300      	movs	r3, #0
 800f728:	9303      	str	r3, [sp, #12]
 800f72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72c:	9302      	str	r3, [sp, #8]
 800f72e:	f107 0314 	add.w	r3, r7, #20
 800f732:	9301      	str	r3, [sp, #4]
 800f734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	687a      	ldr	r2, [r7, #4]
 800f73c:	68b9      	ldr	r1, [r7, #8]
 800f73e:	68f8      	ldr	r0, [r7, #12]
 800f740:	f000 f850 	bl	800f7e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f746:	f000 f8f3 	bl	800f930 <prvAddNewTaskToReadyList>
 800f74a:	e001      	b.n	800f750 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f74c:	2300      	movs	r3, #0
 800f74e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f750:	697b      	ldr	r3, [r7, #20]
	}
 800f752:	4618      	mov	r0, r3
 800f754:	3728      	adds	r7, #40	; 0x28
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b08c      	sub	sp, #48	; 0x30
 800f75e:	af04      	add	r7, sp, #16
 800f760:	60f8      	str	r0, [r7, #12]
 800f762:	60b9      	str	r1, [r7, #8]
 800f764:	603b      	str	r3, [r7, #0]
 800f766:	4613      	mov	r3, r2
 800f768:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f76a:	88fb      	ldrh	r3, [r7, #6]
 800f76c:	009b      	lsls	r3, r3, #2
 800f76e:	4618      	mov	r0, r3
 800f770:	f001 fd7a 	bl	8011268 <pvPortMalloc>
 800f774:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d00e      	beq.n	800f79a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f77c:	20bc      	movs	r0, #188	; 0xbc
 800f77e:	f001 fd73 	bl	8011268 <pvPortMalloc>
 800f782:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d003      	beq.n	800f792 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	697a      	ldr	r2, [r7, #20]
 800f78e:	631a      	str	r2, [r3, #48]	; 0x30
 800f790:	e005      	b.n	800f79e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f792:	6978      	ldr	r0, [r7, #20]
 800f794:	f001 fe34 	bl	8011400 <vPortFree>
 800f798:	e001      	b.n	800f79e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f79a:	2300      	movs	r3, #0
 800f79c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d017      	beq.n	800f7d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f7ac:	88fa      	ldrh	r2, [r7, #6]
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	9303      	str	r3, [sp, #12]
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	9302      	str	r3, [sp, #8]
 800f7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b8:	9301      	str	r3, [sp, #4]
 800f7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7bc:	9300      	str	r3, [sp, #0]
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	68b9      	ldr	r1, [r7, #8]
 800f7c2:	68f8      	ldr	r0, [r7, #12]
 800f7c4:	f000 f80e 	bl	800f7e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f7c8:	69f8      	ldr	r0, [r7, #28]
 800f7ca:	f000 f8b1 	bl	800f930 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	61bb      	str	r3, [r7, #24]
 800f7d2:	e002      	b.n	800f7da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f7d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f7da:	69bb      	ldr	r3, [r7, #24]
	}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3720      	adds	r7, #32
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b088      	sub	sp, #32
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	607a      	str	r2, [r7, #4]
 800f7f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	21a5      	movs	r1, #165	; 0xa5
 800f7fe:	f002 f84e 	bl	801189e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f80c:	3b01      	subs	r3, #1
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	4413      	add	r3, r2
 800f812:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f814:	69bb      	ldr	r3, [r7, #24]
 800f816:	f023 0307 	bic.w	r3, r3, #7
 800f81a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	f003 0307 	and.w	r3, r3, #7
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00a      	beq.n	800f83c <prvInitialiseNewTask+0x58>
	__asm volatile
 800f826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f82a:	f383 8811 	msr	BASEPRI, r3
 800f82e:	f3bf 8f6f 	isb	sy
 800f832:	f3bf 8f4f 	dsb	sy
 800f836:	617b      	str	r3, [r7, #20]
}
 800f838:	bf00      	nop
 800f83a:	e7fe      	b.n	800f83a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d01f      	beq.n	800f882 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f842:	2300      	movs	r3, #0
 800f844:	61fb      	str	r3, [r7, #28]
 800f846:	e012      	b.n	800f86e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	4413      	add	r3, r2
 800f84e:	7819      	ldrb	r1, [r3, #0]
 800f850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	4413      	add	r3, r2
 800f856:	3334      	adds	r3, #52	; 0x34
 800f858:	460a      	mov	r2, r1
 800f85a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f85c:	68ba      	ldr	r2, [r7, #8]
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	4413      	add	r3, r2
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d006      	beq.n	800f876 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	3301      	adds	r3, #1
 800f86c:	61fb      	str	r3, [r7, #28]
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	2b0f      	cmp	r3, #15
 800f872:	d9e9      	bls.n	800f848 <prvInitialiseNewTask+0x64>
 800f874:	e000      	b.n	800f878 <prvInitialiseNewTask+0x94>
			{
				break;
 800f876:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87a:	2200      	movs	r2, #0
 800f87c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f880:	e003      	b.n	800f88a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f884:	2200      	movs	r2, #0
 800f886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88c:	2b37      	cmp	r3, #55	; 0x37
 800f88e:	d901      	bls.n	800f894 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f890:	2337      	movs	r3, #55	; 0x37
 800f892:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f898:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f89e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a8:	3304      	adds	r3, #4
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fe fda0 	bl	800e3f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b2:	3318      	adds	r3, #24
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fe fd9b 	bl	800e3f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e2:	3354      	adds	r3, #84	; 0x54
 800f8e4:	2260      	movs	r2, #96	; 0x60
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f001 ffd8 	bl	801189e <memset>
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f0:	4a0c      	ldr	r2, [pc, #48]	; (800f924 <prvInitialiseNewTask+0x140>)
 800f8f2:	659a      	str	r2, [r3, #88]	; 0x58
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f6:	4a0c      	ldr	r2, [pc, #48]	; (800f928 <prvInitialiseNewTask+0x144>)
 800f8f8:	65da      	str	r2, [r3, #92]	; 0x5c
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fc:	4a0b      	ldr	r2, [pc, #44]	; (800f92c <prvInitialiseNewTask+0x148>)
 800f8fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f900:	683a      	ldr	r2, [r7, #0]
 800f902:	68f9      	ldr	r1, [r7, #12]
 800f904:	69b8      	ldr	r0, [r7, #24]
 800f906:	f001 fa61 	bl	8010dcc <pxPortInitialiseStack>
 800f90a:	4602      	mov	r2, r0
 800f90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f912:	2b00      	cmp	r3, #0
 800f914:	d002      	beq.n	800f91c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f91a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f91c:	bf00      	nop
 800f91e:	3720      	adds	r7, #32
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	08016390 	.word	0x08016390
 800f928:	080163b0 	.word	0x080163b0
 800f92c:	08016370 	.word	0x08016370

0800f930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f938:	f001 fb74 	bl	8011024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f93c:	4b2d      	ldr	r3, [pc, #180]	; (800f9f4 <prvAddNewTaskToReadyList+0xc4>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	3301      	adds	r3, #1
 800f942:	4a2c      	ldr	r2, [pc, #176]	; (800f9f4 <prvAddNewTaskToReadyList+0xc4>)
 800f944:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f946:	4b2c      	ldr	r3, [pc, #176]	; (800f9f8 <prvAddNewTaskToReadyList+0xc8>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d109      	bne.n	800f962 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f94e:	4a2a      	ldr	r2, [pc, #168]	; (800f9f8 <prvAddNewTaskToReadyList+0xc8>)
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f954:	4b27      	ldr	r3, [pc, #156]	; (800f9f4 <prvAddNewTaskToReadyList+0xc4>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2b01      	cmp	r3, #1
 800f95a:	d110      	bne.n	800f97e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f95c:	f000 fc38 	bl	80101d0 <prvInitialiseTaskLists>
 800f960:	e00d      	b.n	800f97e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f962:	4b26      	ldr	r3, [pc, #152]	; (800f9fc <prvAddNewTaskToReadyList+0xcc>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d109      	bne.n	800f97e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f96a:	4b23      	ldr	r3, [pc, #140]	; (800f9f8 <prvAddNewTaskToReadyList+0xc8>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f974:	429a      	cmp	r2, r3
 800f976:	d802      	bhi.n	800f97e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f978:	4a1f      	ldr	r2, [pc, #124]	; (800f9f8 <prvAddNewTaskToReadyList+0xc8>)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f97e:	4b20      	ldr	r3, [pc, #128]	; (800fa00 <prvAddNewTaskToReadyList+0xd0>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	3301      	adds	r3, #1
 800f984:	4a1e      	ldr	r2, [pc, #120]	; (800fa00 <prvAddNewTaskToReadyList+0xd0>)
 800f986:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f988:	4b1d      	ldr	r3, [pc, #116]	; (800fa00 <prvAddNewTaskToReadyList+0xd0>)
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f994:	4b1b      	ldr	r3, [pc, #108]	; (800fa04 <prvAddNewTaskToReadyList+0xd4>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d903      	bls.n	800f9a4 <prvAddNewTaskToReadyList+0x74>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a0:	4a18      	ldr	r2, [pc, #96]	; (800fa04 <prvAddNewTaskToReadyList+0xd4>)
 800f9a2:	6013      	str	r3, [r2, #0]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	4413      	add	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4a15      	ldr	r2, [pc, #84]	; (800fa08 <prvAddNewTaskToReadyList+0xd8>)
 800f9b2:	441a      	add	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	4610      	mov	r0, r2
 800f9bc:	f7fe fd25 	bl	800e40a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f9c0:	f001 fb60 	bl	8011084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f9c4:	4b0d      	ldr	r3, [pc, #52]	; (800f9fc <prvAddNewTaskToReadyList+0xcc>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00e      	beq.n	800f9ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f9cc:	4b0a      	ldr	r3, [pc, #40]	; (800f9f8 <prvAddNewTaskToReadyList+0xc8>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d207      	bcs.n	800f9ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f9da:	4b0c      	ldr	r3, [pc, #48]	; (800fa0c <prvAddNewTaskToReadyList+0xdc>)
 800f9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9e0:	601a      	str	r2, [r3, #0]
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9ea:	bf00      	nop
 800f9ec:	3708      	adds	r7, #8
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	200019d0 	.word	0x200019d0
 800f9f8:	200014fc 	.word	0x200014fc
 800f9fc:	200019dc 	.word	0x200019dc
 800fa00:	200019ec 	.word	0x200019ec
 800fa04:	200019d8 	.word	0x200019d8
 800fa08:	20001500 	.word	0x20001500
 800fa0c:	e000ed04 	.word	0xe000ed04

0800fa10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d017      	beq.n	800fa52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fa22:	4b13      	ldr	r3, [pc, #76]	; (800fa70 <vTaskDelay+0x60>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00a      	beq.n	800fa40 <vTaskDelay+0x30>
	__asm volatile
 800fa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa2e:	f383 8811 	msr	BASEPRI, r3
 800fa32:	f3bf 8f6f 	isb	sy
 800fa36:	f3bf 8f4f 	dsb	sy
 800fa3a:	60bb      	str	r3, [r7, #8]
}
 800fa3c:	bf00      	nop
 800fa3e:	e7fe      	b.n	800fa3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fa40:	f000 f88a 	bl	800fb58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa44:	2100      	movs	r1, #0
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 fe1e 	bl	8010688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa4c:	f000 f892 	bl	800fb74 <xTaskResumeAll>
 800fa50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d107      	bne.n	800fa68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fa58:	4b06      	ldr	r3, [pc, #24]	; (800fa74 <vTaskDelay+0x64>)
 800fa5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa5e:	601a      	str	r2, [r3, #0]
 800fa60:	f3bf 8f4f 	dsb	sy
 800fa64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa68:	bf00      	nop
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	200019f8 	.word	0x200019f8
 800fa74:	e000ed04 	.word	0xe000ed04

0800fa78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b08a      	sub	sp, #40	; 0x28
 800fa7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa82:	2300      	movs	r3, #0
 800fa84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa86:	463a      	mov	r2, r7
 800fa88:	1d39      	adds	r1, r7, #4
 800fa8a:	f107 0308 	add.w	r3, r7, #8
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fe fc5a 	bl	800e348 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa94:	6839      	ldr	r1, [r7, #0]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	9202      	str	r2, [sp, #8]
 800fa9c:	9301      	str	r3, [sp, #4]
 800fa9e:	2300      	movs	r3, #0
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	2300      	movs	r3, #0
 800faa4:	460a      	mov	r2, r1
 800faa6:	4924      	ldr	r1, [pc, #144]	; (800fb38 <vTaskStartScheduler+0xc0>)
 800faa8:	4824      	ldr	r0, [pc, #144]	; (800fb3c <vTaskStartScheduler+0xc4>)
 800faaa:	f7ff fdf9 	bl	800f6a0 <xTaskCreateStatic>
 800faae:	4603      	mov	r3, r0
 800fab0:	4a23      	ldr	r2, [pc, #140]	; (800fb40 <vTaskStartScheduler+0xc8>)
 800fab2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fab4:	4b22      	ldr	r3, [pc, #136]	; (800fb40 <vTaskStartScheduler+0xc8>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d002      	beq.n	800fac2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fabc:	2301      	movs	r3, #1
 800fabe:	617b      	str	r3, [r7, #20]
 800fac0:	e001      	b.n	800fac6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fac2:	2300      	movs	r3, #0
 800fac4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d102      	bne.n	800fad2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800facc:	f000 fe30 	bl	8010730 <xTimerCreateTimerTask>
 800fad0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d11b      	bne.n	800fb10 <vTaskStartScheduler+0x98>
	__asm volatile
 800fad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fadc:	f383 8811 	msr	BASEPRI, r3
 800fae0:	f3bf 8f6f 	isb	sy
 800fae4:	f3bf 8f4f 	dsb	sy
 800fae8:	613b      	str	r3, [r7, #16]
}
 800faea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800faec:	4b15      	ldr	r3, [pc, #84]	; (800fb44 <vTaskStartScheduler+0xcc>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	3354      	adds	r3, #84	; 0x54
 800faf2:	4a15      	ldr	r2, [pc, #84]	; (800fb48 <vTaskStartScheduler+0xd0>)
 800faf4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800faf6:	4b15      	ldr	r3, [pc, #84]	; (800fb4c <vTaskStartScheduler+0xd4>)
 800faf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fafc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fafe:	4b14      	ldr	r3, [pc, #80]	; (800fb50 <vTaskStartScheduler+0xd8>)
 800fb00:	2201      	movs	r2, #1
 800fb02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fb04:	4b13      	ldr	r3, [pc, #76]	; (800fb54 <vTaskStartScheduler+0xdc>)
 800fb06:	2200      	movs	r2, #0
 800fb08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fb0a:	f001 f9e9 	bl	8010ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fb0e:	e00e      	b.n	800fb2e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb16:	d10a      	bne.n	800fb2e <vTaskStartScheduler+0xb6>
	__asm volatile
 800fb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb1c:	f383 8811 	msr	BASEPRI, r3
 800fb20:	f3bf 8f6f 	isb	sy
 800fb24:	f3bf 8f4f 	dsb	sy
 800fb28:	60fb      	str	r3, [r7, #12]
}
 800fb2a:	bf00      	nop
 800fb2c:	e7fe      	b.n	800fb2c <vTaskStartScheduler+0xb4>
}
 800fb2e:	bf00      	nop
 800fb30:	3718      	adds	r7, #24
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	080161f4 	.word	0x080161f4
 800fb3c:	080101a1 	.word	0x080101a1
 800fb40:	200019f4 	.word	0x200019f4
 800fb44:	200014fc 	.word	0x200014fc
 800fb48:	20000010 	.word	0x20000010
 800fb4c:	200019f0 	.word	0x200019f0
 800fb50:	200019dc 	.word	0x200019dc
 800fb54:	200019d4 	.word	0x200019d4

0800fb58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb58:	b480      	push	{r7}
 800fb5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fb5c:	4b04      	ldr	r3, [pc, #16]	; (800fb70 <vTaskSuspendAll+0x18>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	3301      	adds	r3, #1
 800fb62:	4a03      	ldr	r2, [pc, #12]	; (800fb70 <vTaskSuspendAll+0x18>)
 800fb64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fb66:	bf00      	nop
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	200019f8 	.word	0x200019f8

0800fb74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb82:	4b42      	ldr	r3, [pc, #264]	; (800fc8c <xTaskResumeAll+0x118>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d10a      	bne.n	800fba0 <xTaskResumeAll+0x2c>
	__asm volatile
 800fb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8e:	f383 8811 	msr	BASEPRI, r3
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	f3bf 8f4f 	dsb	sy
 800fb9a:	603b      	str	r3, [r7, #0]
}
 800fb9c:	bf00      	nop
 800fb9e:	e7fe      	b.n	800fb9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fba0:	f001 fa40 	bl	8011024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fba4:	4b39      	ldr	r3, [pc, #228]	; (800fc8c <xTaskResumeAll+0x118>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	4a38      	ldr	r2, [pc, #224]	; (800fc8c <xTaskResumeAll+0x118>)
 800fbac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbae:	4b37      	ldr	r3, [pc, #220]	; (800fc8c <xTaskResumeAll+0x118>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d162      	bne.n	800fc7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fbb6:	4b36      	ldr	r3, [pc, #216]	; (800fc90 <xTaskResumeAll+0x11c>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d05e      	beq.n	800fc7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbbe:	e02f      	b.n	800fc20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbc0:	4b34      	ldr	r3, [pc, #208]	; (800fc94 <xTaskResumeAll+0x120>)
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	3318      	adds	r3, #24
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fe fc79 	bl	800e4c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	3304      	adds	r3, #4
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fe fc74 	bl	800e4c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbe0:	4b2d      	ldr	r3, [pc, #180]	; (800fc98 <xTaskResumeAll+0x124>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d903      	bls.n	800fbf0 <xTaskResumeAll+0x7c>
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbec:	4a2a      	ldr	r2, [pc, #168]	; (800fc98 <xTaskResumeAll+0x124>)
 800fbee:	6013      	str	r3, [r2, #0]
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	4413      	add	r3, r2
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	4a27      	ldr	r2, [pc, #156]	; (800fc9c <xTaskResumeAll+0x128>)
 800fbfe:	441a      	add	r2, r3
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	3304      	adds	r3, #4
 800fc04:	4619      	mov	r1, r3
 800fc06:	4610      	mov	r0, r2
 800fc08:	f7fe fbff 	bl	800e40a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc10:	4b23      	ldr	r3, [pc, #140]	; (800fca0 <xTaskResumeAll+0x12c>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d302      	bcc.n	800fc20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fc1a:	4b22      	ldr	r3, [pc, #136]	; (800fca4 <xTaskResumeAll+0x130>)
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc20:	4b1c      	ldr	r3, [pc, #112]	; (800fc94 <xTaskResumeAll+0x120>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1cb      	bne.n	800fbc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d001      	beq.n	800fc32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fc2e:	f000 fb71 	bl	8010314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fc32:	4b1d      	ldr	r3, [pc, #116]	; (800fca8 <xTaskResumeAll+0x134>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d010      	beq.n	800fc60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fc3e:	f000 f859 	bl	800fcf4 <xTaskIncrementTick>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d002      	beq.n	800fc4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fc48:	4b16      	ldr	r3, [pc, #88]	; (800fca4 <xTaskResumeAll+0x130>)
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	3b01      	subs	r3, #1
 800fc52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d1f1      	bne.n	800fc3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fc5a:	4b13      	ldr	r3, [pc, #76]	; (800fca8 <xTaskResumeAll+0x134>)
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc60:	4b10      	ldr	r3, [pc, #64]	; (800fca4 <xTaskResumeAll+0x130>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d009      	beq.n	800fc7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fc6c:	4b0f      	ldr	r3, [pc, #60]	; (800fcac <xTaskResumeAll+0x138>)
 800fc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc72:	601a      	str	r2, [r3, #0]
 800fc74:	f3bf 8f4f 	dsb	sy
 800fc78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc7c:	f001 fa02 	bl	8011084 <vPortExitCritical>

	return xAlreadyYielded;
 800fc80:	68bb      	ldr	r3, [r7, #8]
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	200019f8 	.word	0x200019f8
 800fc90:	200019d0 	.word	0x200019d0
 800fc94:	20001990 	.word	0x20001990
 800fc98:	200019d8 	.word	0x200019d8
 800fc9c:	20001500 	.word	0x20001500
 800fca0:	200014fc 	.word	0x200014fc
 800fca4:	200019e4 	.word	0x200019e4
 800fca8:	200019e0 	.word	0x200019e0
 800fcac:	e000ed04 	.word	0xe000ed04

0800fcb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fcb6:	4b05      	ldr	r3, [pc, #20]	; (800fccc <xTaskGetTickCount+0x1c>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fcbc:	687b      	ldr	r3, [r7, #4]
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	370c      	adds	r7, #12
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr
 800fcca:	bf00      	nop
 800fccc:	200019d4 	.word	0x200019d4

0800fcd0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcd6:	f001 fa87 	bl	80111e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fcda:	2300      	movs	r3, #0
 800fcdc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fcde:	4b04      	ldr	r3, [pc, #16]	; (800fcf0 <xTaskGetTickCountFromISR+0x20>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fce4:	683b      	ldr	r3, [r7, #0]
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	200019d4 	.word	0x200019d4

0800fcf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b086      	sub	sp, #24
 800fcf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcfe:	4b4f      	ldr	r3, [pc, #316]	; (800fe3c <xTaskIncrementTick+0x148>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f040 808f 	bne.w	800fe26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fd08:	4b4d      	ldr	r3, [pc, #308]	; (800fe40 <xTaskIncrementTick+0x14c>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fd10:	4a4b      	ldr	r2, [pc, #300]	; (800fe40 <xTaskIncrementTick+0x14c>)
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d120      	bne.n	800fd5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fd1c:	4b49      	ldr	r3, [pc, #292]	; (800fe44 <xTaskIncrementTick+0x150>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d00a      	beq.n	800fd3c <xTaskIncrementTick+0x48>
	__asm volatile
 800fd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd2a:	f383 8811 	msr	BASEPRI, r3
 800fd2e:	f3bf 8f6f 	isb	sy
 800fd32:	f3bf 8f4f 	dsb	sy
 800fd36:	603b      	str	r3, [r7, #0]
}
 800fd38:	bf00      	nop
 800fd3a:	e7fe      	b.n	800fd3a <xTaskIncrementTick+0x46>
 800fd3c:	4b41      	ldr	r3, [pc, #260]	; (800fe44 <xTaskIncrementTick+0x150>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	60fb      	str	r3, [r7, #12]
 800fd42:	4b41      	ldr	r3, [pc, #260]	; (800fe48 <xTaskIncrementTick+0x154>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4a3f      	ldr	r2, [pc, #252]	; (800fe44 <xTaskIncrementTick+0x150>)
 800fd48:	6013      	str	r3, [r2, #0]
 800fd4a:	4a3f      	ldr	r2, [pc, #252]	; (800fe48 <xTaskIncrementTick+0x154>)
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6013      	str	r3, [r2, #0]
 800fd50:	4b3e      	ldr	r3, [pc, #248]	; (800fe4c <xTaskIncrementTick+0x158>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	3301      	adds	r3, #1
 800fd56:	4a3d      	ldr	r2, [pc, #244]	; (800fe4c <xTaskIncrementTick+0x158>)
 800fd58:	6013      	str	r3, [r2, #0]
 800fd5a:	f000 fadb 	bl	8010314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd5e:	4b3c      	ldr	r3, [pc, #240]	; (800fe50 <xTaskIncrementTick+0x15c>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	693a      	ldr	r2, [r7, #16]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d349      	bcc.n	800fdfc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd68:	4b36      	ldr	r3, [pc, #216]	; (800fe44 <xTaskIncrementTick+0x150>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d104      	bne.n	800fd7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd72:	4b37      	ldr	r3, [pc, #220]	; (800fe50 <xTaskIncrementTick+0x15c>)
 800fd74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd78:	601a      	str	r2, [r3, #0]
					break;
 800fd7a:	e03f      	b.n	800fdfc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd7c:	4b31      	ldr	r3, [pc, #196]	; (800fe44 <xTaskIncrementTick+0x150>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	68db      	ldr	r3, [r3, #12]
 800fd82:	68db      	ldr	r3, [r3, #12]
 800fd84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd8c:	693a      	ldr	r2, [r7, #16]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d203      	bcs.n	800fd9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd94:	4a2e      	ldr	r2, [pc, #184]	; (800fe50 <xTaskIncrementTick+0x15c>)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd9a:	e02f      	b.n	800fdfc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	3304      	adds	r3, #4
 800fda0:	4618      	mov	r0, r3
 800fda2:	f7fe fb8f 	bl	800e4c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d004      	beq.n	800fdb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	3318      	adds	r3, #24
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7fe fb86 	bl	800e4c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdbc:	4b25      	ldr	r3, [pc, #148]	; (800fe54 <xTaskIncrementTick+0x160>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d903      	bls.n	800fdcc <xTaskIncrementTick+0xd8>
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc8:	4a22      	ldr	r2, [pc, #136]	; (800fe54 <xTaskIncrementTick+0x160>)
 800fdca:	6013      	str	r3, [r2, #0]
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd0:	4613      	mov	r3, r2
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	4413      	add	r3, r2
 800fdd6:	009b      	lsls	r3, r3, #2
 800fdd8:	4a1f      	ldr	r2, [pc, #124]	; (800fe58 <xTaskIncrementTick+0x164>)
 800fdda:	441a      	add	r2, r3
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	3304      	adds	r3, #4
 800fde0:	4619      	mov	r1, r3
 800fde2:	4610      	mov	r0, r2
 800fde4:	f7fe fb11 	bl	800e40a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdec:	4b1b      	ldr	r3, [pc, #108]	; (800fe5c <xTaskIncrementTick+0x168>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d3b8      	bcc.n	800fd68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdfa:	e7b5      	b.n	800fd68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fdfc:	4b17      	ldr	r3, [pc, #92]	; (800fe5c <xTaskIncrementTick+0x168>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe02:	4915      	ldr	r1, [pc, #84]	; (800fe58 <xTaskIncrementTick+0x164>)
 800fe04:	4613      	mov	r3, r2
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	4413      	add	r3, r2
 800fe0a:	009b      	lsls	r3, r3, #2
 800fe0c:	440b      	add	r3, r1
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d901      	bls.n	800fe18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fe14:	2301      	movs	r3, #1
 800fe16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fe18:	4b11      	ldr	r3, [pc, #68]	; (800fe60 <xTaskIncrementTick+0x16c>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d007      	beq.n	800fe30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fe20:	2301      	movs	r3, #1
 800fe22:	617b      	str	r3, [r7, #20]
 800fe24:	e004      	b.n	800fe30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fe26:	4b0f      	ldr	r3, [pc, #60]	; (800fe64 <xTaskIncrementTick+0x170>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	4a0d      	ldr	r2, [pc, #52]	; (800fe64 <xTaskIncrementTick+0x170>)
 800fe2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fe30:	697b      	ldr	r3, [r7, #20]
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3718      	adds	r7, #24
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	200019f8 	.word	0x200019f8
 800fe40:	200019d4 	.word	0x200019d4
 800fe44:	20001988 	.word	0x20001988
 800fe48:	2000198c 	.word	0x2000198c
 800fe4c:	200019e8 	.word	0x200019e8
 800fe50:	200019f0 	.word	0x200019f0
 800fe54:	200019d8 	.word	0x200019d8
 800fe58:	20001500 	.word	0x20001500
 800fe5c:	200014fc 	.word	0x200014fc
 800fe60:	200019e4 	.word	0x200019e4
 800fe64:	200019e0 	.word	0x200019e0

0800fe68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe6e:	4b2a      	ldr	r3, [pc, #168]	; (800ff18 <vTaskSwitchContext+0xb0>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d003      	beq.n	800fe7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe76:	4b29      	ldr	r3, [pc, #164]	; (800ff1c <vTaskSwitchContext+0xb4>)
 800fe78:	2201      	movs	r2, #1
 800fe7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe7c:	e046      	b.n	800ff0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fe7e:	4b27      	ldr	r3, [pc, #156]	; (800ff1c <vTaskSwitchContext+0xb4>)
 800fe80:	2200      	movs	r2, #0
 800fe82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe84:	4b26      	ldr	r3, [pc, #152]	; (800ff20 <vTaskSwitchContext+0xb8>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	60fb      	str	r3, [r7, #12]
 800fe8a:	e010      	b.n	800feae <vTaskSwitchContext+0x46>
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d10a      	bne.n	800fea8 <vTaskSwitchContext+0x40>
	__asm volatile
 800fe92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe96:	f383 8811 	msr	BASEPRI, r3
 800fe9a:	f3bf 8f6f 	isb	sy
 800fe9e:	f3bf 8f4f 	dsb	sy
 800fea2:	607b      	str	r3, [r7, #4]
}
 800fea4:	bf00      	nop
 800fea6:	e7fe      	b.n	800fea6 <vTaskSwitchContext+0x3e>
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	3b01      	subs	r3, #1
 800feac:	60fb      	str	r3, [r7, #12]
 800feae:	491d      	ldr	r1, [pc, #116]	; (800ff24 <vTaskSwitchContext+0xbc>)
 800feb0:	68fa      	ldr	r2, [r7, #12]
 800feb2:	4613      	mov	r3, r2
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	4413      	add	r3, r2
 800feb8:	009b      	lsls	r3, r3, #2
 800feba:	440b      	add	r3, r1
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d0e4      	beq.n	800fe8c <vTaskSwitchContext+0x24>
 800fec2:	68fa      	ldr	r2, [r7, #12]
 800fec4:	4613      	mov	r3, r2
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	4413      	add	r3, r2
 800feca:	009b      	lsls	r3, r3, #2
 800fecc:	4a15      	ldr	r2, [pc, #84]	; (800ff24 <vTaskSwitchContext+0xbc>)
 800fece:	4413      	add	r3, r2
 800fed0:	60bb      	str	r3, [r7, #8]
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	685a      	ldr	r2, [r3, #4]
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	605a      	str	r2, [r3, #4]
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	685a      	ldr	r2, [r3, #4]
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	3308      	adds	r3, #8
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d104      	bne.n	800fef2 <vTaskSwitchContext+0x8a>
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	685a      	ldr	r2, [r3, #4]
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	605a      	str	r2, [r3, #4]
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	68db      	ldr	r3, [r3, #12]
 800fef8:	4a0b      	ldr	r2, [pc, #44]	; (800ff28 <vTaskSwitchContext+0xc0>)
 800fefa:	6013      	str	r3, [r2, #0]
 800fefc:	4a08      	ldr	r2, [pc, #32]	; (800ff20 <vTaskSwitchContext+0xb8>)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff02:	4b09      	ldr	r3, [pc, #36]	; (800ff28 <vTaskSwitchContext+0xc0>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	3354      	adds	r3, #84	; 0x54
 800ff08:	4a08      	ldr	r2, [pc, #32]	; (800ff2c <vTaskSwitchContext+0xc4>)
 800ff0a:	6013      	str	r3, [r2, #0]
}
 800ff0c:	bf00      	nop
 800ff0e:	3714      	adds	r7, #20
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr
 800ff18:	200019f8 	.word	0x200019f8
 800ff1c:	200019e4 	.word	0x200019e4
 800ff20:	200019d8 	.word	0x200019d8
 800ff24:	20001500 	.word	0x20001500
 800ff28:	200014fc 	.word	0x200014fc
 800ff2c:	20000010 	.word	0x20000010

0800ff30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d10a      	bne.n	800ff56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ff40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff44:	f383 8811 	msr	BASEPRI, r3
 800ff48:	f3bf 8f6f 	isb	sy
 800ff4c:	f3bf 8f4f 	dsb	sy
 800ff50:	60fb      	str	r3, [r7, #12]
}
 800ff52:	bf00      	nop
 800ff54:	e7fe      	b.n	800ff54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff56:	4b07      	ldr	r3, [pc, #28]	; (800ff74 <vTaskPlaceOnEventList+0x44>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	3318      	adds	r3, #24
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f7fe fa77 	bl	800e452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff64:	2101      	movs	r1, #1
 800ff66:	6838      	ldr	r0, [r7, #0]
 800ff68:	f000 fb8e 	bl	8010688 <prvAddCurrentTaskToDelayedList>
}
 800ff6c:	bf00      	nop
 800ff6e:	3710      	adds	r7, #16
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	200014fc 	.word	0x200014fc

0800ff78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d10a      	bne.n	800ffa0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ff8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff8e:	f383 8811 	msr	BASEPRI, r3
 800ff92:	f3bf 8f6f 	isb	sy
 800ff96:	f3bf 8f4f 	dsb	sy
 800ff9a:	617b      	str	r3, [r7, #20]
}
 800ff9c:	bf00      	nop
 800ff9e:	e7fe      	b.n	800ff9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ffa0:	4b0a      	ldr	r3, [pc, #40]	; (800ffcc <vTaskPlaceOnEventListRestricted+0x54>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	3318      	adds	r3, #24
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f7fe fa2e 	bl	800e40a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d002      	beq.n	800ffba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ffb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ffba:	6879      	ldr	r1, [r7, #4]
 800ffbc:	68b8      	ldr	r0, [r7, #8]
 800ffbe:	f000 fb63 	bl	8010688 <prvAddCurrentTaskToDelayedList>
	}
 800ffc2:	bf00      	nop
 800ffc4:	3718      	adds	r7, #24
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	200014fc 	.word	0x200014fc

0800ffd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d10a      	bne.n	800fffc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ffe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffea:	f383 8811 	msr	BASEPRI, r3
 800ffee:	f3bf 8f6f 	isb	sy
 800fff2:	f3bf 8f4f 	dsb	sy
 800fff6:	60fb      	str	r3, [r7, #12]
}
 800fff8:	bf00      	nop
 800fffa:	e7fe      	b.n	800fffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	3318      	adds	r3, #24
 8010000:	4618      	mov	r0, r3
 8010002:	f7fe fa5f 	bl	800e4c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010006:	4b1e      	ldr	r3, [pc, #120]	; (8010080 <xTaskRemoveFromEventList+0xb0>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d11d      	bne.n	801004a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	3304      	adds	r3, #4
 8010012:	4618      	mov	r0, r3
 8010014:	f7fe fa56 	bl	800e4c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801001c:	4b19      	ldr	r3, [pc, #100]	; (8010084 <xTaskRemoveFromEventList+0xb4>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	429a      	cmp	r2, r3
 8010022:	d903      	bls.n	801002c <xTaskRemoveFromEventList+0x5c>
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010028:	4a16      	ldr	r2, [pc, #88]	; (8010084 <xTaskRemoveFromEventList+0xb4>)
 801002a:	6013      	str	r3, [r2, #0]
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010030:	4613      	mov	r3, r2
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	4413      	add	r3, r2
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	4a13      	ldr	r2, [pc, #76]	; (8010088 <xTaskRemoveFromEventList+0xb8>)
 801003a:	441a      	add	r2, r3
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	3304      	adds	r3, #4
 8010040:	4619      	mov	r1, r3
 8010042:	4610      	mov	r0, r2
 8010044:	f7fe f9e1 	bl	800e40a <vListInsertEnd>
 8010048:	e005      	b.n	8010056 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	3318      	adds	r3, #24
 801004e:	4619      	mov	r1, r3
 8010050:	480e      	ldr	r0, [pc, #56]	; (801008c <xTaskRemoveFromEventList+0xbc>)
 8010052:	f7fe f9da 	bl	800e40a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801005a:	4b0d      	ldr	r3, [pc, #52]	; (8010090 <xTaskRemoveFromEventList+0xc0>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010060:	429a      	cmp	r2, r3
 8010062:	d905      	bls.n	8010070 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010064:	2301      	movs	r3, #1
 8010066:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010068:	4b0a      	ldr	r3, [pc, #40]	; (8010094 <xTaskRemoveFromEventList+0xc4>)
 801006a:	2201      	movs	r2, #1
 801006c:	601a      	str	r2, [r3, #0]
 801006e:	e001      	b.n	8010074 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010070:	2300      	movs	r3, #0
 8010072:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010074:	697b      	ldr	r3, [r7, #20]
}
 8010076:	4618      	mov	r0, r3
 8010078:	3718      	adds	r7, #24
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	200019f8 	.word	0x200019f8
 8010084:	200019d8 	.word	0x200019d8
 8010088:	20001500 	.word	0x20001500
 801008c:	20001990 	.word	0x20001990
 8010090:	200014fc 	.word	0x200014fc
 8010094:	200019e4 	.word	0x200019e4

08010098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010098:	b480      	push	{r7}
 801009a:	b083      	sub	sp, #12
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80100a0:	4b06      	ldr	r3, [pc, #24]	; (80100bc <vTaskInternalSetTimeOutState+0x24>)
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80100a8:	4b05      	ldr	r3, [pc, #20]	; (80100c0 <vTaskInternalSetTimeOutState+0x28>)
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	605a      	str	r2, [r3, #4]
}
 80100b0:	bf00      	nop
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr
 80100bc:	200019e8 	.word	0x200019e8
 80100c0:	200019d4 	.word	0x200019d4

080100c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b088      	sub	sp, #32
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d10a      	bne.n	80100ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80100d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	613b      	str	r3, [r7, #16]
}
 80100e6:	bf00      	nop
 80100e8:	e7fe      	b.n	80100e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d10a      	bne.n	8010106 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80100f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f4:	f383 8811 	msr	BASEPRI, r3
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	60fb      	str	r3, [r7, #12]
}
 8010102:	bf00      	nop
 8010104:	e7fe      	b.n	8010104 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010106:	f000 ff8d 	bl	8011024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801010a:	4b1d      	ldr	r3, [pc, #116]	; (8010180 <xTaskCheckForTimeOut+0xbc>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	69ba      	ldr	r2, [r7, #24]
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010122:	d102      	bne.n	801012a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010124:	2300      	movs	r3, #0
 8010126:	61fb      	str	r3, [r7, #28]
 8010128:	e023      	b.n	8010172 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	4b15      	ldr	r3, [pc, #84]	; (8010184 <xTaskCheckForTimeOut+0xc0>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	429a      	cmp	r2, r3
 8010134:	d007      	beq.n	8010146 <xTaskCheckForTimeOut+0x82>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	69ba      	ldr	r2, [r7, #24]
 801013c:	429a      	cmp	r2, r3
 801013e:	d302      	bcc.n	8010146 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010140:	2301      	movs	r3, #1
 8010142:	61fb      	str	r3, [r7, #28]
 8010144:	e015      	b.n	8010172 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	697a      	ldr	r2, [r7, #20]
 801014c:	429a      	cmp	r2, r3
 801014e:	d20b      	bcs.n	8010168 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	1ad2      	subs	r2, r2, r3
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7ff ff9b 	bl	8010098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010162:	2300      	movs	r3, #0
 8010164:	61fb      	str	r3, [r7, #28]
 8010166:	e004      	b.n	8010172 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	2200      	movs	r2, #0
 801016c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801016e:	2301      	movs	r3, #1
 8010170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010172:	f000 ff87 	bl	8011084 <vPortExitCritical>

	return xReturn;
 8010176:	69fb      	ldr	r3, [r7, #28]
}
 8010178:	4618      	mov	r0, r3
 801017a:	3720      	adds	r7, #32
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}
 8010180:	200019d4 	.word	0x200019d4
 8010184:	200019e8 	.word	0x200019e8

08010188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010188:	b480      	push	{r7}
 801018a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801018c:	4b03      	ldr	r3, [pc, #12]	; (801019c <vTaskMissedYield+0x14>)
 801018e:	2201      	movs	r2, #1
 8010190:	601a      	str	r2, [r3, #0]
}
 8010192:	bf00      	nop
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr
 801019c:	200019e4 	.word	0x200019e4

080101a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80101a8:	f000 f852 	bl	8010250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80101ac:	4b06      	ldr	r3, [pc, #24]	; (80101c8 <prvIdleTask+0x28>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d9f9      	bls.n	80101a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80101b4:	4b05      	ldr	r3, [pc, #20]	; (80101cc <prvIdleTask+0x2c>)
 80101b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101ba:	601a      	str	r2, [r3, #0]
 80101bc:	f3bf 8f4f 	dsb	sy
 80101c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80101c4:	e7f0      	b.n	80101a8 <prvIdleTask+0x8>
 80101c6:	bf00      	nop
 80101c8:	20001500 	.word	0x20001500
 80101cc:	e000ed04 	.word	0xe000ed04

080101d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101d6:	2300      	movs	r3, #0
 80101d8:	607b      	str	r3, [r7, #4]
 80101da:	e00c      	b.n	80101f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	4613      	mov	r3, r2
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	4413      	add	r3, r2
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	4a12      	ldr	r2, [pc, #72]	; (8010230 <prvInitialiseTaskLists+0x60>)
 80101e8:	4413      	add	r3, r2
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fe f8e0 	bl	800e3b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	3301      	adds	r3, #1
 80101f4:	607b      	str	r3, [r7, #4]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2b37      	cmp	r3, #55	; 0x37
 80101fa:	d9ef      	bls.n	80101dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80101fc:	480d      	ldr	r0, [pc, #52]	; (8010234 <prvInitialiseTaskLists+0x64>)
 80101fe:	f7fe f8d7 	bl	800e3b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010202:	480d      	ldr	r0, [pc, #52]	; (8010238 <prvInitialiseTaskLists+0x68>)
 8010204:	f7fe f8d4 	bl	800e3b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010208:	480c      	ldr	r0, [pc, #48]	; (801023c <prvInitialiseTaskLists+0x6c>)
 801020a:	f7fe f8d1 	bl	800e3b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801020e:	480c      	ldr	r0, [pc, #48]	; (8010240 <prvInitialiseTaskLists+0x70>)
 8010210:	f7fe f8ce 	bl	800e3b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010214:	480b      	ldr	r0, [pc, #44]	; (8010244 <prvInitialiseTaskLists+0x74>)
 8010216:	f7fe f8cb 	bl	800e3b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801021a:	4b0b      	ldr	r3, [pc, #44]	; (8010248 <prvInitialiseTaskLists+0x78>)
 801021c:	4a05      	ldr	r2, [pc, #20]	; (8010234 <prvInitialiseTaskLists+0x64>)
 801021e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010220:	4b0a      	ldr	r3, [pc, #40]	; (801024c <prvInitialiseTaskLists+0x7c>)
 8010222:	4a05      	ldr	r2, [pc, #20]	; (8010238 <prvInitialiseTaskLists+0x68>)
 8010224:	601a      	str	r2, [r3, #0]
}
 8010226:	bf00      	nop
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	20001500 	.word	0x20001500
 8010234:	20001960 	.word	0x20001960
 8010238:	20001974 	.word	0x20001974
 801023c:	20001990 	.word	0x20001990
 8010240:	200019a4 	.word	0x200019a4
 8010244:	200019bc 	.word	0x200019bc
 8010248:	20001988 	.word	0x20001988
 801024c:	2000198c 	.word	0x2000198c

08010250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010256:	e019      	b.n	801028c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010258:	f000 fee4 	bl	8011024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801025c:	4b10      	ldr	r3, [pc, #64]	; (80102a0 <prvCheckTasksWaitingTermination+0x50>)
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	3304      	adds	r3, #4
 8010268:	4618      	mov	r0, r3
 801026a:	f7fe f92b 	bl	800e4c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801026e:	4b0d      	ldr	r3, [pc, #52]	; (80102a4 <prvCheckTasksWaitingTermination+0x54>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3b01      	subs	r3, #1
 8010274:	4a0b      	ldr	r2, [pc, #44]	; (80102a4 <prvCheckTasksWaitingTermination+0x54>)
 8010276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010278:	4b0b      	ldr	r3, [pc, #44]	; (80102a8 <prvCheckTasksWaitingTermination+0x58>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	3b01      	subs	r3, #1
 801027e:	4a0a      	ldr	r2, [pc, #40]	; (80102a8 <prvCheckTasksWaitingTermination+0x58>)
 8010280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010282:	f000 feff 	bl	8011084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 f810 	bl	80102ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801028c:	4b06      	ldr	r3, [pc, #24]	; (80102a8 <prvCheckTasksWaitingTermination+0x58>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1e1      	bne.n	8010258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010294:	bf00      	nop
 8010296:	bf00      	nop
 8010298:	3708      	adds	r7, #8
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	200019a4 	.word	0x200019a4
 80102a4:	200019d0 	.word	0x200019d0
 80102a8:	200019b8 	.word	0x200019b8

080102ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	3354      	adds	r3, #84	; 0x54
 80102b8:	4618      	mov	r0, r3
 80102ba:	f002 fa15 	bl	80126e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d108      	bne.n	80102da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102cc:	4618      	mov	r0, r3
 80102ce:	f001 f897 	bl	8011400 <vPortFree>
				vPortFree( pxTCB );
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f001 f894 	bl	8011400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80102d8:	e018      	b.n	801030c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d103      	bne.n	80102ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f001 f88b 	bl	8011400 <vPortFree>
	}
 80102ea:	e00f      	b.n	801030c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80102f2:	2b02      	cmp	r3, #2
 80102f4:	d00a      	beq.n	801030c <prvDeleteTCB+0x60>
	__asm volatile
 80102f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fa:	f383 8811 	msr	BASEPRI, r3
 80102fe:	f3bf 8f6f 	isb	sy
 8010302:	f3bf 8f4f 	dsb	sy
 8010306:	60fb      	str	r3, [r7, #12]
}
 8010308:	bf00      	nop
 801030a:	e7fe      	b.n	801030a <prvDeleteTCB+0x5e>
	}
 801030c:	bf00      	nop
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801031a:	4b0c      	ldr	r3, [pc, #48]	; (801034c <prvResetNextTaskUnblockTime+0x38>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d104      	bne.n	801032e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010324:	4b0a      	ldr	r3, [pc, #40]	; (8010350 <prvResetNextTaskUnblockTime+0x3c>)
 8010326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801032a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801032c:	e008      	b.n	8010340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801032e:	4b07      	ldr	r3, [pc, #28]	; (801034c <prvResetNextTaskUnblockTime+0x38>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	4a04      	ldr	r2, [pc, #16]	; (8010350 <prvResetNextTaskUnblockTime+0x3c>)
 801033e:	6013      	str	r3, [r2, #0]
}
 8010340:	bf00      	nop
 8010342:	370c      	adds	r7, #12
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr
 801034c:	20001988 	.word	0x20001988
 8010350:	200019f0 	.word	0x200019f0

08010354 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801035a:	4b05      	ldr	r3, [pc, #20]	; (8010370 <xTaskGetCurrentTaskHandle+0x1c>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010360:	687b      	ldr	r3, [r7, #4]
	}
 8010362:	4618      	mov	r0, r3
 8010364:	370c      	adds	r7, #12
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr
 801036e:	bf00      	nop
 8010370:	200014fc 	.word	0x200014fc

08010374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010374:	b480      	push	{r7}
 8010376:	b083      	sub	sp, #12
 8010378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801037a:	4b0b      	ldr	r3, [pc, #44]	; (80103a8 <xTaskGetSchedulerState+0x34>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d102      	bne.n	8010388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010382:	2301      	movs	r3, #1
 8010384:	607b      	str	r3, [r7, #4]
 8010386:	e008      	b.n	801039a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010388:	4b08      	ldr	r3, [pc, #32]	; (80103ac <xTaskGetSchedulerState+0x38>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d102      	bne.n	8010396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010390:	2302      	movs	r3, #2
 8010392:	607b      	str	r3, [r7, #4]
 8010394:	e001      	b.n	801039a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010396:	2300      	movs	r3, #0
 8010398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801039a:	687b      	ldr	r3, [r7, #4]
	}
 801039c:	4618      	mov	r0, r3
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr
 80103a8:	200019dc 	.word	0x200019dc
 80103ac:	200019f8 	.word	0x200019f8

080103b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b084      	sub	sp, #16
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80103bc:	2300      	movs	r3, #0
 80103be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d051      	beq.n	801046a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ca:	4b2a      	ldr	r3, [pc, #168]	; (8010474 <xTaskPriorityInherit+0xc4>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d241      	bcs.n	8010458 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	699b      	ldr	r3, [r3, #24]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	db06      	blt.n	80103ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103dc:	4b25      	ldr	r3, [pc, #148]	; (8010474 <xTaskPriorityInherit+0xc4>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	6959      	ldr	r1, [r3, #20]
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103f2:	4613      	mov	r3, r2
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	4413      	add	r3, r2
 80103f8:	009b      	lsls	r3, r3, #2
 80103fa:	4a1f      	ldr	r2, [pc, #124]	; (8010478 <xTaskPriorityInherit+0xc8>)
 80103fc:	4413      	add	r3, r2
 80103fe:	4299      	cmp	r1, r3
 8010400:	d122      	bne.n	8010448 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	3304      	adds	r3, #4
 8010406:	4618      	mov	r0, r3
 8010408:	f7fe f85c 	bl	800e4c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801040c:	4b19      	ldr	r3, [pc, #100]	; (8010474 <xTaskPriorityInherit+0xc4>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801041a:	4b18      	ldr	r3, [pc, #96]	; (801047c <xTaskPriorityInherit+0xcc>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	429a      	cmp	r2, r3
 8010420:	d903      	bls.n	801042a <xTaskPriorityInherit+0x7a>
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010426:	4a15      	ldr	r2, [pc, #84]	; (801047c <xTaskPriorityInherit+0xcc>)
 8010428:	6013      	str	r3, [r2, #0]
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801042e:	4613      	mov	r3, r2
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	4413      	add	r3, r2
 8010434:	009b      	lsls	r3, r3, #2
 8010436:	4a10      	ldr	r2, [pc, #64]	; (8010478 <xTaskPriorityInherit+0xc8>)
 8010438:	441a      	add	r2, r3
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	3304      	adds	r3, #4
 801043e:	4619      	mov	r1, r3
 8010440:	4610      	mov	r0, r2
 8010442:	f7fd ffe2 	bl	800e40a <vListInsertEnd>
 8010446:	e004      	b.n	8010452 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010448:	4b0a      	ldr	r3, [pc, #40]	; (8010474 <xTaskPriorityInherit+0xc4>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010452:	2301      	movs	r3, #1
 8010454:	60fb      	str	r3, [r7, #12]
 8010456:	e008      	b.n	801046a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801045c:	4b05      	ldr	r3, [pc, #20]	; (8010474 <xTaskPriorityInherit+0xc4>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010462:	429a      	cmp	r2, r3
 8010464:	d201      	bcs.n	801046a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010466:	2301      	movs	r3, #1
 8010468:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801046a:	68fb      	ldr	r3, [r7, #12]
	}
 801046c:	4618      	mov	r0, r3
 801046e:	3710      	adds	r7, #16
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	200014fc 	.word	0x200014fc
 8010478:	20001500 	.word	0x20001500
 801047c:	200019d8 	.word	0x200019d8

08010480 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010480:	b580      	push	{r7, lr}
 8010482:	b086      	sub	sp, #24
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801048c:	2300      	movs	r3, #0
 801048e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d056      	beq.n	8010544 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010496:	4b2e      	ldr	r3, [pc, #184]	; (8010550 <xTaskPriorityDisinherit+0xd0>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	693a      	ldr	r2, [r7, #16]
 801049c:	429a      	cmp	r2, r3
 801049e:	d00a      	beq.n	80104b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80104a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a4:	f383 8811 	msr	BASEPRI, r3
 80104a8:	f3bf 8f6f 	isb	sy
 80104ac:	f3bf 8f4f 	dsb	sy
 80104b0:	60fb      	str	r3, [r7, #12]
}
 80104b2:	bf00      	nop
 80104b4:	e7fe      	b.n	80104b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10a      	bne.n	80104d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80104be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c2:	f383 8811 	msr	BASEPRI, r3
 80104c6:	f3bf 8f6f 	isb	sy
 80104ca:	f3bf 8f4f 	dsb	sy
 80104ce:	60bb      	str	r3, [r7, #8]
}
 80104d0:	bf00      	nop
 80104d2:	e7fe      	b.n	80104d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104d8:	1e5a      	subs	r2, r3, #1
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d02c      	beq.n	8010544 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d128      	bne.n	8010544 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	3304      	adds	r3, #4
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fd ffe4 	bl	800e4c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010508:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010514:	4b0f      	ldr	r3, [pc, #60]	; (8010554 <xTaskPriorityDisinherit+0xd4>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	429a      	cmp	r2, r3
 801051a:	d903      	bls.n	8010524 <xTaskPriorityDisinherit+0xa4>
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010520:	4a0c      	ldr	r2, [pc, #48]	; (8010554 <xTaskPriorityDisinherit+0xd4>)
 8010522:	6013      	str	r3, [r2, #0]
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010528:	4613      	mov	r3, r2
 801052a:	009b      	lsls	r3, r3, #2
 801052c:	4413      	add	r3, r2
 801052e:	009b      	lsls	r3, r3, #2
 8010530:	4a09      	ldr	r2, [pc, #36]	; (8010558 <xTaskPriorityDisinherit+0xd8>)
 8010532:	441a      	add	r2, r3
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	3304      	adds	r3, #4
 8010538:	4619      	mov	r1, r3
 801053a:	4610      	mov	r0, r2
 801053c:	f7fd ff65 	bl	800e40a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010540:	2301      	movs	r3, #1
 8010542:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010544:	697b      	ldr	r3, [r7, #20]
	}
 8010546:	4618      	mov	r0, r3
 8010548:	3718      	adds	r7, #24
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	200014fc 	.word	0x200014fc
 8010554:	200019d8 	.word	0x200019d8
 8010558:	20001500 	.word	0x20001500

0801055c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801055c:	b580      	push	{r7, lr}
 801055e:	b088      	sub	sp, #32
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801056a:	2301      	movs	r3, #1
 801056c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d06a      	beq.n	801064a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10a      	bne.n	8010592 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801057c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010580:	f383 8811 	msr	BASEPRI, r3
 8010584:	f3bf 8f6f 	isb	sy
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	60fb      	str	r3, [r7, #12]
}
 801058e:	bf00      	nop
 8010590:	e7fe      	b.n	8010590 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	429a      	cmp	r2, r3
 801059a:	d902      	bls.n	80105a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	61fb      	str	r3, [r7, #28]
 80105a0:	e002      	b.n	80105a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ac:	69fa      	ldr	r2, [r7, #28]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d04b      	beq.n	801064a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105b6:	697a      	ldr	r2, [r7, #20]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d146      	bne.n	801064a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80105bc:	4b25      	ldr	r3, [pc, #148]	; (8010654 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	69ba      	ldr	r2, [r7, #24]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d10a      	bne.n	80105dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80105c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ca:	f383 8811 	msr	BASEPRI, r3
 80105ce:	f3bf 8f6f 	isb	sy
 80105d2:	f3bf 8f4f 	dsb	sy
 80105d6:	60bb      	str	r3, [r7, #8]
}
 80105d8:	bf00      	nop
 80105da:	e7fe      	b.n	80105da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	69fa      	ldr	r2, [r7, #28]
 80105e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80105e8:	69bb      	ldr	r3, [r7, #24]
 80105ea:	699b      	ldr	r3, [r3, #24]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	db04      	blt.n	80105fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80105f6:	69bb      	ldr	r3, [r7, #24]
 80105f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80105fa:	69bb      	ldr	r3, [r7, #24]
 80105fc:	6959      	ldr	r1, [r3, #20]
 80105fe:	693a      	ldr	r2, [r7, #16]
 8010600:	4613      	mov	r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	4413      	add	r3, r2
 8010606:	009b      	lsls	r3, r3, #2
 8010608:	4a13      	ldr	r2, [pc, #76]	; (8010658 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801060a:	4413      	add	r3, r2
 801060c:	4299      	cmp	r1, r3
 801060e:	d11c      	bne.n	801064a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010610:	69bb      	ldr	r3, [r7, #24]
 8010612:	3304      	adds	r3, #4
 8010614:	4618      	mov	r0, r3
 8010616:	f7fd ff55 	bl	800e4c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801061a:	69bb      	ldr	r3, [r7, #24]
 801061c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801061e:	4b0f      	ldr	r3, [pc, #60]	; (801065c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	429a      	cmp	r2, r3
 8010624:	d903      	bls.n	801062e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801062a:	4a0c      	ldr	r2, [pc, #48]	; (801065c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801062c:	6013      	str	r3, [r2, #0]
 801062e:	69bb      	ldr	r3, [r7, #24]
 8010630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010632:	4613      	mov	r3, r2
 8010634:	009b      	lsls	r3, r3, #2
 8010636:	4413      	add	r3, r2
 8010638:	009b      	lsls	r3, r3, #2
 801063a:	4a07      	ldr	r2, [pc, #28]	; (8010658 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801063c:	441a      	add	r2, r3
 801063e:	69bb      	ldr	r3, [r7, #24]
 8010640:	3304      	adds	r3, #4
 8010642:	4619      	mov	r1, r3
 8010644:	4610      	mov	r0, r2
 8010646:	f7fd fee0 	bl	800e40a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801064a:	bf00      	nop
 801064c:	3720      	adds	r7, #32
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}
 8010652:	bf00      	nop
 8010654:	200014fc 	.word	0x200014fc
 8010658:	20001500 	.word	0x20001500
 801065c:	200019d8 	.word	0x200019d8

08010660 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010660:	b480      	push	{r7}
 8010662:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010664:	4b07      	ldr	r3, [pc, #28]	; (8010684 <pvTaskIncrementMutexHeldCount+0x24>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d004      	beq.n	8010676 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801066c:	4b05      	ldr	r3, [pc, #20]	; (8010684 <pvTaskIncrementMutexHeldCount+0x24>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010672:	3201      	adds	r2, #1
 8010674:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010676:	4b03      	ldr	r3, [pc, #12]	; (8010684 <pvTaskIncrementMutexHeldCount+0x24>)
 8010678:	681b      	ldr	r3, [r3, #0]
	}
 801067a:	4618      	mov	r0, r3
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr
 8010684:	200014fc 	.word	0x200014fc

08010688 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010692:	4b21      	ldr	r3, [pc, #132]	; (8010718 <prvAddCurrentTaskToDelayedList+0x90>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010698:	4b20      	ldr	r3, [pc, #128]	; (801071c <prvAddCurrentTaskToDelayedList+0x94>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	3304      	adds	r3, #4
 801069e:	4618      	mov	r0, r3
 80106a0:	f7fd ff10 	bl	800e4c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106aa:	d10a      	bne.n	80106c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d007      	beq.n	80106c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80106b2:	4b1a      	ldr	r3, [pc, #104]	; (801071c <prvAddCurrentTaskToDelayedList+0x94>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	3304      	adds	r3, #4
 80106b8:	4619      	mov	r1, r3
 80106ba:	4819      	ldr	r0, [pc, #100]	; (8010720 <prvAddCurrentTaskToDelayedList+0x98>)
 80106bc:	f7fd fea5 	bl	800e40a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80106c0:	e026      	b.n	8010710 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80106c2:	68fa      	ldr	r2, [r7, #12]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	4413      	add	r3, r2
 80106c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80106ca:	4b14      	ldr	r3, [pc, #80]	; (801071c <prvAddCurrentTaskToDelayedList+0x94>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	68ba      	ldr	r2, [r7, #8]
 80106d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80106d2:	68ba      	ldr	r2, [r7, #8]
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d209      	bcs.n	80106ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80106da:	4b12      	ldr	r3, [pc, #72]	; (8010724 <prvAddCurrentTaskToDelayedList+0x9c>)
 80106dc:	681a      	ldr	r2, [r3, #0]
 80106de:	4b0f      	ldr	r3, [pc, #60]	; (801071c <prvAddCurrentTaskToDelayedList+0x94>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	3304      	adds	r3, #4
 80106e4:	4619      	mov	r1, r3
 80106e6:	4610      	mov	r0, r2
 80106e8:	f7fd feb3 	bl	800e452 <vListInsert>
}
 80106ec:	e010      	b.n	8010710 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80106ee:	4b0e      	ldr	r3, [pc, #56]	; (8010728 <prvAddCurrentTaskToDelayedList+0xa0>)
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	4b0a      	ldr	r3, [pc, #40]	; (801071c <prvAddCurrentTaskToDelayedList+0x94>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	3304      	adds	r3, #4
 80106f8:	4619      	mov	r1, r3
 80106fa:	4610      	mov	r0, r2
 80106fc:	f7fd fea9 	bl	800e452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010700:	4b0a      	ldr	r3, [pc, #40]	; (801072c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	68ba      	ldr	r2, [r7, #8]
 8010706:	429a      	cmp	r2, r3
 8010708:	d202      	bcs.n	8010710 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801070a:	4a08      	ldr	r2, [pc, #32]	; (801072c <prvAddCurrentTaskToDelayedList+0xa4>)
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	6013      	str	r3, [r2, #0]
}
 8010710:	bf00      	nop
 8010712:	3710      	adds	r7, #16
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	200019d4 	.word	0x200019d4
 801071c:	200014fc 	.word	0x200014fc
 8010720:	200019bc 	.word	0x200019bc
 8010724:	2000198c 	.word	0x2000198c
 8010728:	20001988 	.word	0x20001988
 801072c:	200019f0 	.word	0x200019f0

08010730 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b08a      	sub	sp, #40	; 0x28
 8010734:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010736:	2300      	movs	r3, #0
 8010738:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801073a:	f000 fb07 	bl	8010d4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801073e:	4b1c      	ldr	r3, [pc, #112]	; (80107b0 <xTimerCreateTimerTask+0x80>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d021      	beq.n	801078a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010746:	2300      	movs	r3, #0
 8010748:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801074a:	2300      	movs	r3, #0
 801074c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801074e:	1d3a      	adds	r2, r7, #4
 8010750:	f107 0108 	add.w	r1, r7, #8
 8010754:	f107 030c 	add.w	r3, r7, #12
 8010758:	4618      	mov	r0, r3
 801075a:	f7fd fe0f 	bl	800e37c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801075e:	6879      	ldr	r1, [r7, #4]
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	68fa      	ldr	r2, [r7, #12]
 8010764:	9202      	str	r2, [sp, #8]
 8010766:	9301      	str	r3, [sp, #4]
 8010768:	2302      	movs	r3, #2
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	2300      	movs	r3, #0
 801076e:	460a      	mov	r2, r1
 8010770:	4910      	ldr	r1, [pc, #64]	; (80107b4 <xTimerCreateTimerTask+0x84>)
 8010772:	4811      	ldr	r0, [pc, #68]	; (80107b8 <xTimerCreateTimerTask+0x88>)
 8010774:	f7fe ff94 	bl	800f6a0 <xTaskCreateStatic>
 8010778:	4603      	mov	r3, r0
 801077a:	4a10      	ldr	r2, [pc, #64]	; (80107bc <xTimerCreateTimerTask+0x8c>)
 801077c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801077e:	4b0f      	ldr	r3, [pc, #60]	; (80107bc <xTimerCreateTimerTask+0x8c>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d001      	beq.n	801078a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010786:	2301      	movs	r3, #1
 8010788:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d10a      	bne.n	80107a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010794:	f383 8811 	msr	BASEPRI, r3
 8010798:	f3bf 8f6f 	isb	sy
 801079c:	f3bf 8f4f 	dsb	sy
 80107a0:	613b      	str	r3, [r7, #16]
}
 80107a2:	bf00      	nop
 80107a4:	e7fe      	b.n	80107a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80107a6:	697b      	ldr	r3, [r7, #20]
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3718      	adds	r7, #24
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	20001a2c 	.word	0x20001a2c
 80107b4:	080161fc 	.word	0x080161fc
 80107b8:	080108f5 	.word	0x080108f5
 80107bc:	20001a30 	.word	0x20001a30

080107c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b08a      	sub	sp, #40	; 0x28
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	607a      	str	r2, [r7, #4]
 80107cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80107ce:	2300      	movs	r3, #0
 80107d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d10a      	bne.n	80107ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80107d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107dc:	f383 8811 	msr	BASEPRI, r3
 80107e0:	f3bf 8f6f 	isb	sy
 80107e4:	f3bf 8f4f 	dsb	sy
 80107e8:	623b      	str	r3, [r7, #32]
}
 80107ea:	bf00      	nop
 80107ec:	e7fe      	b.n	80107ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80107ee:	4b1a      	ldr	r3, [pc, #104]	; (8010858 <xTimerGenericCommand+0x98>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d02a      	beq.n	801084c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	2b05      	cmp	r3, #5
 8010806:	dc18      	bgt.n	801083a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010808:	f7ff fdb4 	bl	8010374 <xTaskGetSchedulerState>
 801080c:	4603      	mov	r3, r0
 801080e:	2b02      	cmp	r3, #2
 8010810:	d109      	bne.n	8010826 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010812:	4b11      	ldr	r3, [pc, #68]	; (8010858 <xTimerGenericCommand+0x98>)
 8010814:	6818      	ldr	r0, [r3, #0]
 8010816:	f107 0110 	add.w	r1, r7, #16
 801081a:	2300      	movs	r3, #0
 801081c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801081e:	f7fe f8d9 	bl	800e9d4 <xQueueGenericSend>
 8010822:	6278      	str	r0, [r7, #36]	; 0x24
 8010824:	e012      	b.n	801084c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010826:	4b0c      	ldr	r3, [pc, #48]	; (8010858 <xTimerGenericCommand+0x98>)
 8010828:	6818      	ldr	r0, [r3, #0]
 801082a:	f107 0110 	add.w	r1, r7, #16
 801082e:	2300      	movs	r3, #0
 8010830:	2200      	movs	r2, #0
 8010832:	f7fe f8cf 	bl	800e9d4 <xQueueGenericSend>
 8010836:	6278      	str	r0, [r7, #36]	; 0x24
 8010838:	e008      	b.n	801084c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801083a:	4b07      	ldr	r3, [pc, #28]	; (8010858 <xTimerGenericCommand+0x98>)
 801083c:	6818      	ldr	r0, [r3, #0]
 801083e:	f107 0110 	add.w	r1, r7, #16
 8010842:	2300      	movs	r3, #0
 8010844:	683a      	ldr	r2, [r7, #0]
 8010846:	f7fe f9c3 	bl	800ebd0 <xQueueGenericSendFromISR>
 801084a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801084e:	4618      	mov	r0, r3
 8010850:	3728      	adds	r7, #40	; 0x28
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	20001a2c 	.word	0x20001a2c

0801085c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b088      	sub	sp, #32
 8010860:	af02      	add	r7, sp, #8
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010866:	4b22      	ldr	r3, [pc, #136]	; (80108f0 <prvProcessExpiredTimer+0x94>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	68db      	ldr	r3, [r3, #12]
 801086e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	3304      	adds	r3, #4
 8010874:	4618      	mov	r0, r3
 8010876:	f7fd fe25 	bl	800e4c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010880:	f003 0304 	and.w	r3, r3, #4
 8010884:	2b00      	cmp	r3, #0
 8010886:	d022      	beq.n	80108ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	699a      	ldr	r2, [r3, #24]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	18d1      	adds	r1, r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	683a      	ldr	r2, [r7, #0]
 8010894:	6978      	ldr	r0, [r7, #20]
 8010896:	f000 f8d1 	bl	8010a3c <prvInsertTimerInActiveList>
 801089a:	4603      	mov	r3, r0
 801089c:	2b00      	cmp	r3, #0
 801089e:	d01f      	beq.n	80108e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80108a0:	2300      	movs	r3, #0
 80108a2:	9300      	str	r3, [sp, #0]
 80108a4:	2300      	movs	r3, #0
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	2100      	movs	r1, #0
 80108aa:	6978      	ldr	r0, [r7, #20]
 80108ac:	f7ff ff88 	bl	80107c0 <xTimerGenericCommand>
 80108b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d113      	bne.n	80108e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80108b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108bc:	f383 8811 	msr	BASEPRI, r3
 80108c0:	f3bf 8f6f 	isb	sy
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	60fb      	str	r3, [r7, #12]
}
 80108ca:	bf00      	nop
 80108cc:	e7fe      	b.n	80108cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108d4:	f023 0301 	bic.w	r3, r3, #1
 80108d8:	b2da      	uxtb	r2, r3
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	6a1b      	ldr	r3, [r3, #32]
 80108e4:	6978      	ldr	r0, [r7, #20]
 80108e6:	4798      	blx	r3
}
 80108e8:	bf00      	nop
 80108ea:	3718      	adds	r7, #24
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	20001a24 	.word	0x20001a24

080108f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80108fc:	f107 0308 	add.w	r3, r7, #8
 8010900:	4618      	mov	r0, r3
 8010902:	f000 f857 	bl	80109b4 <prvGetNextExpireTime>
 8010906:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	4619      	mov	r1, r3
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f000 f803 	bl	8010918 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010912:	f000 f8d5 	bl	8010ac0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010916:	e7f1      	b.n	80108fc <prvTimerTask+0x8>

08010918 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010922:	f7ff f919 	bl	800fb58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010926:	f107 0308 	add.w	r3, r7, #8
 801092a:	4618      	mov	r0, r3
 801092c:	f000 f866 	bl	80109fc <prvSampleTimeNow>
 8010930:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d130      	bne.n	801099a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d10a      	bne.n	8010954 <prvProcessTimerOrBlockTask+0x3c>
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	429a      	cmp	r2, r3
 8010944:	d806      	bhi.n	8010954 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010946:	f7ff f915 	bl	800fb74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801094a:	68f9      	ldr	r1, [r7, #12]
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f7ff ff85 	bl	801085c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010952:	e024      	b.n	801099e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d008      	beq.n	801096c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801095a:	4b13      	ldr	r3, [pc, #76]	; (80109a8 <prvProcessTimerOrBlockTask+0x90>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d101      	bne.n	8010968 <prvProcessTimerOrBlockTask+0x50>
 8010964:	2301      	movs	r3, #1
 8010966:	e000      	b.n	801096a <prvProcessTimerOrBlockTask+0x52>
 8010968:	2300      	movs	r3, #0
 801096a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801096c:	4b0f      	ldr	r3, [pc, #60]	; (80109ac <prvProcessTimerOrBlockTask+0x94>)
 801096e:	6818      	ldr	r0, [r3, #0]
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	1ad3      	subs	r3, r2, r3
 8010976:	683a      	ldr	r2, [r7, #0]
 8010978:	4619      	mov	r1, r3
 801097a:	f7fe fe5d 	bl	800f638 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801097e:	f7ff f8f9 	bl	800fb74 <xTaskResumeAll>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d10a      	bne.n	801099e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010988:	4b09      	ldr	r3, [pc, #36]	; (80109b0 <prvProcessTimerOrBlockTask+0x98>)
 801098a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801098e:	601a      	str	r2, [r3, #0]
 8010990:	f3bf 8f4f 	dsb	sy
 8010994:	f3bf 8f6f 	isb	sy
}
 8010998:	e001      	b.n	801099e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801099a:	f7ff f8eb 	bl	800fb74 <xTaskResumeAll>
}
 801099e:	bf00      	nop
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	20001a28 	.word	0x20001a28
 80109ac:	20001a2c 	.word	0x20001a2c
 80109b0:	e000ed04 	.word	0xe000ed04

080109b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80109b4:	b480      	push	{r7}
 80109b6:	b085      	sub	sp, #20
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80109bc:	4b0e      	ldr	r3, [pc, #56]	; (80109f8 <prvGetNextExpireTime+0x44>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d101      	bne.n	80109ca <prvGetNextExpireTime+0x16>
 80109c6:	2201      	movs	r2, #1
 80109c8:	e000      	b.n	80109cc <prvGetNextExpireTime+0x18>
 80109ca:	2200      	movs	r2, #0
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d105      	bne.n	80109e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80109d8:	4b07      	ldr	r3, [pc, #28]	; (80109f8 <prvGetNextExpireTime+0x44>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	68db      	ldr	r3, [r3, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	60fb      	str	r3, [r7, #12]
 80109e2:	e001      	b.n	80109e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80109e4:	2300      	movs	r3, #0
 80109e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80109e8:	68fb      	ldr	r3, [r7, #12]
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3714      	adds	r7, #20
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr
 80109f6:	bf00      	nop
 80109f8:	20001a24 	.word	0x20001a24

080109fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b084      	sub	sp, #16
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010a04:	f7ff f954 	bl	800fcb0 <xTaskGetTickCount>
 8010a08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010a0a:	4b0b      	ldr	r3, [pc, #44]	; (8010a38 <prvSampleTimeNow+0x3c>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	68fa      	ldr	r2, [r7, #12]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d205      	bcs.n	8010a20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010a14:	f000 f936 	bl	8010c84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	601a      	str	r2, [r3, #0]
 8010a1e:	e002      	b.n	8010a26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010a26:	4a04      	ldr	r2, [pc, #16]	; (8010a38 <prvSampleTimeNow+0x3c>)
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3710      	adds	r7, #16
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	20001a34 	.word	0x20001a34

08010a3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	607a      	str	r2, [r7, #4]
 8010a48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	68ba      	ldr	r2, [r7, #8]
 8010a52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	68fa      	ldr	r2, [r7, #12]
 8010a58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010a5a:	68ba      	ldr	r2, [r7, #8]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d812      	bhi.n	8010a88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	1ad2      	subs	r2, r2, r3
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	699b      	ldr	r3, [r3, #24]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d302      	bcc.n	8010a76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010a70:	2301      	movs	r3, #1
 8010a72:	617b      	str	r3, [r7, #20]
 8010a74:	e01b      	b.n	8010aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010a76:	4b10      	ldr	r3, [pc, #64]	; (8010ab8 <prvInsertTimerInActiveList+0x7c>)
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	3304      	adds	r3, #4
 8010a7e:	4619      	mov	r1, r3
 8010a80:	4610      	mov	r0, r2
 8010a82:	f7fd fce6 	bl	800e452 <vListInsert>
 8010a86:	e012      	b.n	8010aae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d206      	bcs.n	8010a9e <prvInsertTimerInActiveList+0x62>
 8010a90:	68ba      	ldr	r2, [r7, #8]
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d302      	bcc.n	8010a9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	617b      	str	r3, [r7, #20]
 8010a9c:	e007      	b.n	8010aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a9e:	4b07      	ldr	r3, [pc, #28]	; (8010abc <prvInsertTimerInActiveList+0x80>)
 8010aa0:	681a      	ldr	r2, [r3, #0]
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	3304      	adds	r3, #4
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	4610      	mov	r0, r2
 8010aaa:	f7fd fcd2 	bl	800e452 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010aae:	697b      	ldr	r3, [r7, #20]
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3718      	adds	r7, #24
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	20001a28 	.word	0x20001a28
 8010abc:	20001a24 	.word	0x20001a24

08010ac0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b08e      	sub	sp, #56	; 0x38
 8010ac4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ac6:	e0ca      	b.n	8010c5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	da18      	bge.n	8010b00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010ace:	1d3b      	adds	r3, r7, #4
 8010ad0:	3304      	adds	r3, #4
 8010ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d10a      	bne.n	8010af0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ade:	f383 8811 	msr	BASEPRI, r3
 8010ae2:	f3bf 8f6f 	isb	sy
 8010ae6:	f3bf 8f4f 	dsb	sy
 8010aea:	61fb      	str	r3, [r7, #28]
}
 8010aec:	bf00      	nop
 8010aee:	e7fe      	b.n	8010aee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010af6:	6850      	ldr	r0, [r2, #4]
 8010af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010afa:	6892      	ldr	r2, [r2, #8]
 8010afc:	4611      	mov	r1, r2
 8010afe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	f2c0 80aa 	blt.w	8010c5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0e:	695b      	ldr	r3, [r3, #20]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d004      	beq.n	8010b1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b16:	3304      	adds	r3, #4
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7fd fcd3 	bl	800e4c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b1e:	463b      	mov	r3, r7
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ff ff6b 	bl	80109fc <prvSampleTimeNow>
 8010b26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b09      	cmp	r3, #9
 8010b2c:	f200 8097 	bhi.w	8010c5e <prvProcessReceivedCommands+0x19e>
 8010b30:	a201      	add	r2, pc, #4	; (adr r2, 8010b38 <prvProcessReceivedCommands+0x78>)
 8010b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b36:	bf00      	nop
 8010b38:	08010b61 	.word	0x08010b61
 8010b3c:	08010b61 	.word	0x08010b61
 8010b40:	08010b61 	.word	0x08010b61
 8010b44:	08010bd5 	.word	0x08010bd5
 8010b48:	08010be9 	.word	0x08010be9
 8010b4c:	08010c33 	.word	0x08010c33
 8010b50:	08010b61 	.word	0x08010b61
 8010b54:	08010b61 	.word	0x08010b61
 8010b58:	08010bd5 	.word	0x08010bd5
 8010b5c:	08010be9 	.word	0x08010be9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b66:	f043 0301 	orr.w	r3, r3, #1
 8010b6a:	b2da      	uxtb	r2, r3
 8010b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010b72:	68ba      	ldr	r2, [r7, #8]
 8010b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b76:	699b      	ldr	r3, [r3, #24]
 8010b78:	18d1      	adds	r1, r2, r3
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b80:	f7ff ff5c 	bl	8010a3c <prvInsertTimerInActiveList>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d069      	beq.n	8010c5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8c:	6a1b      	ldr	r3, [r3, #32]
 8010b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b98:	f003 0304 	and.w	r3, r3, #4
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d05e      	beq.n	8010c5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010ba0:	68ba      	ldr	r2, [r7, #8]
 8010ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba4:	699b      	ldr	r3, [r3, #24]
 8010ba6:	441a      	add	r2, r3
 8010ba8:	2300      	movs	r3, #0
 8010baa:	9300      	str	r3, [sp, #0]
 8010bac:	2300      	movs	r3, #0
 8010bae:	2100      	movs	r1, #0
 8010bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bb2:	f7ff fe05 	bl	80107c0 <xTimerGenericCommand>
 8010bb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010bb8:	6a3b      	ldr	r3, [r7, #32]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d14f      	bne.n	8010c5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc2:	f383 8811 	msr	BASEPRI, r3
 8010bc6:	f3bf 8f6f 	isb	sy
 8010bca:	f3bf 8f4f 	dsb	sy
 8010bce:	61bb      	str	r3, [r7, #24]
}
 8010bd0:	bf00      	nop
 8010bd2:	e7fe      	b.n	8010bd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bda:	f023 0301 	bic.w	r3, r3, #1
 8010bde:	b2da      	uxtb	r2, r3
 8010be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010be6:	e03a      	b.n	8010c5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bee:	f043 0301 	orr.w	r3, r3, #1
 8010bf2:	b2da      	uxtb	r2, r3
 8010bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010bfa:	68ba      	ldr	r2, [r7, #8]
 8010bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c02:	699b      	ldr	r3, [r3, #24]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d10a      	bne.n	8010c1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c0c:	f383 8811 	msr	BASEPRI, r3
 8010c10:	f3bf 8f6f 	isb	sy
 8010c14:	f3bf 8f4f 	dsb	sy
 8010c18:	617b      	str	r3, [r7, #20]
}
 8010c1a:	bf00      	nop
 8010c1c:	e7fe      	b.n	8010c1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c20:	699a      	ldr	r2, [r3, #24]
 8010c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c24:	18d1      	adds	r1, r2, r3
 8010c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c2c:	f7ff ff06 	bl	8010a3c <prvInsertTimerInActiveList>
					break;
 8010c30:	e015      	b.n	8010c5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c38:	f003 0302 	and.w	r3, r3, #2
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d103      	bne.n	8010c48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c42:	f000 fbdd 	bl	8011400 <vPortFree>
 8010c46:	e00a      	b.n	8010c5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c4e:	f023 0301 	bic.w	r3, r3, #1
 8010c52:	b2da      	uxtb	r2, r3
 8010c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010c5a:	e000      	b.n	8010c5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010c5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010c5e:	4b08      	ldr	r3, [pc, #32]	; (8010c80 <prvProcessReceivedCommands+0x1c0>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	1d39      	adds	r1, r7, #4
 8010c64:	2200      	movs	r2, #0
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7fe f8da 	bl	800ee20 <xQueueReceive>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	f47f af2a 	bne.w	8010ac8 <prvProcessReceivedCommands+0x8>
	}
}
 8010c74:	bf00      	nop
 8010c76:	bf00      	nop
 8010c78:	3730      	adds	r7, #48	; 0x30
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
 8010c7e:	bf00      	nop
 8010c80:	20001a2c 	.word	0x20001a2c

08010c84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b088      	sub	sp, #32
 8010c88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c8a:	e048      	b.n	8010d1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c8c:	4b2d      	ldr	r3, [pc, #180]	; (8010d44 <prvSwitchTimerLists+0xc0>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c96:	4b2b      	ldr	r3, [pc, #172]	; (8010d44 <prvSwitchTimerLists+0xc0>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	3304      	adds	r3, #4
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7fd fc0d 	bl	800e4c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	6a1b      	ldr	r3, [r3, #32]
 8010cae:	68f8      	ldr	r0, [r7, #12]
 8010cb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cb8:	f003 0304 	and.w	r3, r3, #4
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d02e      	beq.n	8010d1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	699b      	ldr	r3, [r3, #24]
 8010cc4:	693a      	ldr	r2, [r7, #16]
 8010cc6:	4413      	add	r3, r2
 8010cc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010cca:	68ba      	ldr	r2, [r7, #8]
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d90e      	bls.n	8010cf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	68ba      	ldr	r2, [r7, #8]
 8010cd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	68fa      	ldr	r2, [r7, #12]
 8010cdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010cde:	4b19      	ldr	r3, [pc, #100]	; (8010d44 <prvSwitchTimerLists+0xc0>)
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	3304      	adds	r3, #4
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	4610      	mov	r0, r2
 8010cea:	f7fd fbb2 	bl	800e452 <vListInsert>
 8010cee:	e016      	b.n	8010d1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	9300      	str	r3, [sp, #0]
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	693a      	ldr	r2, [r7, #16]
 8010cf8:	2100      	movs	r1, #0
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f7ff fd60 	bl	80107c0 <xTimerGenericCommand>
 8010d00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d10a      	bne.n	8010d1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0c:	f383 8811 	msr	BASEPRI, r3
 8010d10:	f3bf 8f6f 	isb	sy
 8010d14:	f3bf 8f4f 	dsb	sy
 8010d18:	603b      	str	r3, [r7, #0]
}
 8010d1a:	bf00      	nop
 8010d1c:	e7fe      	b.n	8010d1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d1e:	4b09      	ldr	r3, [pc, #36]	; (8010d44 <prvSwitchTimerLists+0xc0>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d1b1      	bne.n	8010c8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010d28:	4b06      	ldr	r3, [pc, #24]	; (8010d44 <prvSwitchTimerLists+0xc0>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010d2e:	4b06      	ldr	r3, [pc, #24]	; (8010d48 <prvSwitchTimerLists+0xc4>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4a04      	ldr	r2, [pc, #16]	; (8010d44 <prvSwitchTimerLists+0xc0>)
 8010d34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010d36:	4a04      	ldr	r2, [pc, #16]	; (8010d48 <prvSwitchTimerLists+0xc4>)
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	6013      	str	r3, [r2, #0]
}
 8010d3c:	bf00      	nop
 8010d3e:	3718      	adds	r7, #24
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	20001a24 	.word	0x20001a24
 8010d48:	20001a28 	.word	0x20001a28

08010d4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010d52:	f000 f967 	bl	8011024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010d56:	4b15      	ldr	r3, [pc, #84]	; (8010dac <prvCheckForValidListAndQueue+0x60>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d120      	bne.n	8010da0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010d5e:	4814      	ldr	r0, [pc, #80]	; (8010db0 <prvCheckForValidListAndQueue+0x64>)
 8010d60:	f7fd fb26 	bl	800e3b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010d64:	4813      	ldr	r0, [pc, #76]	; (8010db4 <prvCheckForValidListAndQueue+0x68>)
 8010d66:	f7fd fb23 	bl	800e3b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010d6a:	4b13      	ldr	r3, [pc, #76]	; (8010db8 <prvCheckForValidListAndQueue+0x6c>)
 8010d6c:	4a10      	ldr	r2, [pc, #64]	; (8010db0 <prvCheckForValidListAndQueue+0x64>)
 8010d6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010d70:	4b12      	ldr	r3, [pc, #72]	; (8010dbc <prvCheckForValidListAndQueue+0x70>)
 8010d72:	4a10      	ldr	r2, [pc, #64]	; (8010db4 <prvCheckForValidListAndQueue+0x68>)
 8010d74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010d76:	2300      	movs	r3, #0
 8010d78:	9300      	str	r3, [sp, #0]
 8010d7a:	4b11      	ldr	r3, [pc, #68]	; (8010dc0 <prvCheckForValidListAndQueue+0x74>)
 8010d7c:	4a11      	ldr	r2, [pc, #68]	; (8010dc4 <prvCheckForValidListAndQueue+0x78>)
 8010d7e:	2110      	movs	r1, #16
 8010d80:	200a      	movs	r0, #10
 8010d82:	f7fd fc31 	bl	800e5e8 <xQueueGenericCreateStatic>
 8010d86:	4603      	mov	r3, r0
 8010d88:	4a08      	ldr	r2, [pc, #32]	; (8010dac <prvCheckForValidListAndQueue+0x60>)
 8010d8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010d8c:	4b07      	ldr	r3, [pc, #28]	; (8010dac <prvCheckForValidListAndQueue+0x60>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d005      	beq.n	8010da0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010d94:	4b05      	ldr	r3, [pc, #20]	; (8010dac <prvCheckForValidListAndQueue+0x60>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	490b      	ldr	r1, [pc, #44]	; (8010dc8 <prvCheckForValidListAndQueue+0x7c>)
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7fe fbf8 	bl	800f590 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010da0:	f000 f970 	bl	8011084 <vPortExitCritical>
}
 8010da4:	bf00      	nop
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
 8010daa:	bf00      	nop
 8010dac:	20001a2c 	.word	0x20001a2c
 8010db0:	200019fc 	.word	0x200019fc
 8010db4:	20001a10 	.word	0x20001a10
 8010db8:	20001a24 	.word	0x20001a24
 8010dbc:	20001a28 	.word	0x20001a28
 8010dc0:	20001ad8 	.word	0x20001ad8
 8010dc4:	20001a38 	.word	0x20001a38
 8010dc8:	08016204 	.word	0x08016204

08010dcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b085      	sub	sp, #20
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	3b04      	subs	r3, #4
 8010ddc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	3b04      	subs	r3, #4
 8010dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	f023 0201 	bic.w	r2, r3, #1
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	3b04      	subs	r3, #4
 8010dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010dfc:	4a0c      	ldr	r2, [pc, #48]	; (8010e30 <pxPortInitialiseStack+0x64>)
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	3b14      	subs	r3, #20
 8010e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010e08:	687a      	ldr	r2, [r7, #4]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	3b04      	subs	r3, #4
 8010e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f06f 0202 	mvn.w	r2, #2
 8010e1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	3b20      	subs	r3, #32
 8010e20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010e22:	68fb      	ldr	r3, [r7, #12]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3714      	adds	r7, #20
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr
 8010e30:	08010e35 	.word	0x08010e35

08010e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010e34:	b480      	push	{r7}
 8010e36:	b085      	sub	sp, #20
 8010e38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010e3e:	4b12      	ldr	r3, [pc, #72]	; (8010e88 <prvTaskExitError+0x54>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e46:	d00a      	beq.n	8010e5e <prvTaskExitError+0x2a>
	__asm volatile
 8010e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e4c:	f383 8811 	msr	BASEPRI, r3
 8010e50:	f3bf 8f6f 	isb	sy
 8010e54:	f3bf 8f4f 	dsb	sy
 8010e58:	60fb      	str	r3, [r7, #12]
}
 8010e5a:	bf00      	nop
 8010e5c:	e7fe      	b.n	8010e5c <prvTaskExitError+0x28>
	__asm volatile
 8010e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	60bb      	str	r3, [r7, #8]
}
 8010e70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010e72:	bf00      	nop
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d0fc      	beq.n	8010e74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010e7a:	bf00      	nop
 8010e7c:	bf00      	nop
 8010e7e:	3714      	adds	r7, #20
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr
 8010e88:	2000000c 	.word	0x2000000c
 8010e8c:	00000000 	.word	0x00000000

08010e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010e90:	4b07      	ldr	r3, [pc, #28]	; (8010eb0 <pxCurrentTCBConst2>)
 8010e92:	6819      	ldr	r1, [r3, #0]
 8010e94:	6808      	ldr	r0, [r1, #0]
 8010e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9a:	f380 8809 	msr	PSP, r0
 8010e9e:	f3bf 8f6f 	isb	sy
 8010ea2:	f04f 0000 	mov.w	r0, #0
 8010ea6:	f380 8811 	msr	BASEPRI, r0
 8010eaa:	4770      	bx	lr
 8010eac:	f3af 8000 	nop.w

08010eb0 <pxCurrentTCBConst2>:
 8010eb0:	200014fc 	.word	0x200014fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010eb4:	bf00      	nop
 8010eb6:	bf00      	nop

08010eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010eb8:	4808      	ldr	r0, [pc, #32]	; (8010edc <prvPortStartFirstTask+0x24>)
 8010eba:	6800      	ldr	r0, [r0, #0]
 8010ebc:	6800      	ldr	r0, [r0, #0]
 8010ebe:	f380 8808 	msr	MSP, r0
 8010ec2:	f04f 0000 	mov.w	r0, #0
 8010ec6:	f380 8814 	msr	CONTROL, r0
 8010eca:	b662      	cpsie	i
 8010ecc:	b661      	cpsie	f
 8010ece:	f3bf 8f4f 	dsb	sy
 8010ed2:	f3bf 8f6f 	isb	sy
 8010ed6:	df00      	svc	0
 8010ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010eda:	bf00      	nop
 8010edc:	e000ed08 	.word	0xe000ed08

08010ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b086      	sub	sp, #24
 8010ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010ee6:	4b46      	ldr	r3, [pc, #280]	; (8011000 <xPortStartScheduler+0x120>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4a46      	ldr	r2, [pc, #280]	; (8011004 <xPortStartScheduler+0x124>)
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d10a      	bne.n	8010f06 <xPortStartScheduler+0x26>
	__asm volatile
 8010ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef4:	f383 8811 	msr	BASEPRI, r3
 8010ef8:	f3bf 8f6f 	isb	sy
 8010efc:	f3bf 8f4f 	dsb	sy
 8010f00:	613b      	str	r3, [r7, #16]
}
 8010f02:	bf00      	nop
 8010f04:	e7fe      	b.n	8010f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010f06:	4b3e      	ldr	r3, [pc, #248]	; (8011000 <xPortStartScheduler+0x120>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a3f      	ldr	r2, [pc, #252]	; (8011008 <xPortStartScheduler+0x128>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d10a      	bne.n	8010f26 <xPortStartScheduler+0x46>
	__asm volatile
 8010f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f14:	f383 8811 	msr	BASEPRI, r3
 8010f18:	f3bf 8f6f 	isb	sy
 8010f1c:	f3bf 8f4f 	dsb	sy
 8010f20:	60fb      	str	r3, [r7, #12]
}
 8010f22:	bf00      	nop
 8010f24:	e7fe      	b.n	8010f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010f26:	4b39      	ldr	r3, [pc, #228]	; (801100c <xPortStartScheduler+0x12c>)
 8010f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	781b      	ldrb	r3, [r3, #0]
 8010f2e:	b2db      	uxtb	r3, r3
 8010f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	22ff      	movs	r2, #255	; 0xff
 8010f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010f40:	78fb      	ldrb	r3, [r7, #3]
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010f48:	b2da      	uxtb	r2, r3
 8010f4a:	4b31      	ldr	r3, [pc, #196]	; (8011010 <xPortStartScheduler+0x130>)
 8010f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010f4e:	4b31      	ldr	r3, [pc, #196]	; (8011014 <xPortStartScheduler+0x134>)
 8010f50:	2207      	movs	r2, #7
 8010f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f54:	e009      	b.n	8010f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010f56:	4b2f      	ldr	r3, [pc, #188]	; (8011014 <xPortStartScheduler+0x134>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	4a2d      	ldr	r2, [pc, #180]	; (8011014 <xPortStartScheduler+0x134>)
 8010f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010f60:	78fb      	ldrb	r3, [r7, #3]
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	005b      	lsls	r3, r3, #1
 8010f66:	b2db      	uxtb	r3, r3
 8010f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f6a:	78fb      	ldrb	r3, [r7, #3]
 8010f6c:	b2db      	uxtb	r3, r3
 8010f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f72:	2b80      	cmp	r3, #128	; 0x80
 8010f74:	d0ef      	beq.n	8010f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010f76:	4b27      	ldr	r3, [pc, #156]	; (8011014 <xPortStartScheduler+0x134>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f1c3 0307 	rsb	r3, r3, #7
 8010f7e:	2b04      	cmp	r3, #4
 8010f80:	d00a      	beq.n	8010f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8010f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f86:	f383 8811 	msr	BASEPRI, r3
 8010f8a:	f3bf 8f6f 	isb	sy
 8010f8e:	f3bf 8f4f 	dsb	sy
 8010f92:	60bb      	str	r3, [r7, #8]
}
 8010f94:	bf00      	nop
 8010f96:	e7fe      	b.n	8010f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010f98:	4b1e      	ldr	r3, [pc, #120]	; (8011014 <xPortStartScheduler+0x134>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	021b      	lsls	r3, r3, #8
 8010f9e:	4a1d      	ldr	r2, [pc, #116]	; (8011014 <xPortStartScheduler+0x134>)
 8010fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010fa2:	4b1c      	ldr	r3, [pc, #112]	; (8011014 <xPortStartScheduler+0x134>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010faa:	4a1a      	ldr	r2, [pc, #104]	; (8011014 <xPortStartScheduler+0x134>)
 8010fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	b2da      	uxtb	r2, r3
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010fb6:	4b18      	ldr	r3, [pc, #96]	; (8011018 <xPortStartScheduler+0x138>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	4a17      	ldr	r2, [pc, #92]	; (8011018 <xPortStartScheduler+0x138>)
 8010fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010fc2:	4b15      	ldr	r3, [pc, #84]	; (8011018 <xPortStartScheduler+0x138>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	4a14      	ldr	r2, [pc, #80]	; (8011018 <xPortStartScheduler+0x138>)
 8010fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010fce:	f000 f8dd 	bl	801118c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010fd2:	4b12      	ldr	r3, [pc, #72]	; (801101c <xPortStartScheduler+0x13c>)
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010fd8:	f000 f8fc 	bl	80111d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010fdc:	4b10      	ldr	r3, [pc, #64]	; (8011020 <xPortStartScheduler+0x140>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	4a0f      	ldr	r2, [pc, #60]	; (8011020 <xPortStartScheduler+0x140>)
 8010fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010fe8:	f7ff ff66 	bl	8010eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010fec:	f7fe ff3c 	bl	800fe68 <vTaskSwitchContext>
	prvTaskExitError();
 8010ff0:	f7ff ff20 	bl	8010e34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010ff4:	2300      	movs	r3, #0
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3718      	adds	r7, #24
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}
 8010ffe:	bf00      	nop
 8011000:	e000ed00 	.word	0xe000ed00
 8011004:	410fc271 	.word	0x410fc271
 8011008:	410fc270 	.word	0x410fc270
 801100c:	e000e400 	.word	0xe000e400
 8011010:	20001b28 	.word	0x20001b28
 8011014:	20001b2c 	.word	0x20001b2c
 8011018:	e000ed20 	.word	0xe000ed20
 801101c:	2000000c 	.word	0x2000000c
 8011020:	e000ef34 	.word	0xe000ef34

08011024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
	__asm volatile
 801102a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102e:	f383 8811 	msr	BASEPRI, r3
 8011032:	f3bf 8f6f 	isb	sy
 8011036:	f3bf 8f4f 	dsb	sy
 801103a:	607b      	str	r3, [r7, #4]
}
 801103c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801103e:	4b0f      	ldr	r3, [pc, #60]	; (801107c <vPortEnterCritical+0x58>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	3301      	adds	r3, #1
 8011044:	4a0d      	ldr	r2, [pc, #52]	; (801107c <vPortEnterCritical+0x58>)
 8011046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011048:	4b0c      	ldr	r3, [pc, #48]	; (801107c <vPortEnterCritical+0x58>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	2b01      	cmp	r3, #1
 801104e:	d10f      	bne.n	8011070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011050:	4b0b      	ldr	r3, [pc, #44]	; (8011080 <vPortEnterCritical+0x5c>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	b2db      	uxtb	r3, r3
 8011056:	2b00      	cmp	r3, #0
 8011058:	d00a      	beq.n	8011070 <vPortEnterCritical+0x4c>
	__asm volatile
 801105a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801105e:	f383 8811 	msr	BASEPRI, r3
 8011062:	f3bf 8f6f 	isb	sy
 8011066:	f3bf 8f4f 	dsb	sy
 801106a:	603b      	str	r3, [r7, #0]
}
 801106c:	bf00      	nop
 801106e:	e7fe      	b.n	801106e <vPortEnterCritical+0x4a>
	}
}
 8011070:	bf00      	nop
 8011072:	370c      	adds	r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr
 801107c:	2000000c 	.word	0x2000000c
 8011080:	e000ed04 	.word	0xe000ed04

08011084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011084:	b480      	push	{r7}
 8011086:	b083      	sub	sp, #12
 8011088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801108a:	4b12      	ldr	r3, [pc, #72]	; (80110d4 <vPortExitCritical+0x50>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d10a      	bne.n	80110a8 <vPortExitCritical+0x24>
	__asm volatile
 8011092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011096:	f383 8811 	msr	BASEPRI, r3
 801109a:	f3bf 8f6f 	isb	sy
 801109e:	f3bf 8f4f 	dsb	sy
 80110a2:	607b      	str	r3, [r7, #4]
}
 80110a4:	bf00      	nop
 80110a6:	e7fe      	b.n	80110a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80110a8:	4b0a      	ldr	r3, [pc, #40]	; (80110d4 <vPortExitCritical+0x50>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	3b01      	subs	r3, #1
 80110ae:	4a09      	ldr	r2, [pc, #36]	; (80110d4 <vPortExitCritical+0x50>)
 80110b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80110b2:	4b08      	ldr	r3, [pc, #32]	; (80110d4 <vPortExitCritical+0x50>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d105      	bne.n	80110c6 <vPortExitCritical+0x42>
 80110ba:	2300      	movs	r3, #0
 80110bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	f383 8811 	msr	BASEPRI, r3
}
 80110c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80110c6:	bf00      	nop
 80110c8:	370c      	adds	r7, #12
 80110ca:	46bd      	mov	sp, r7
 80110cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d0:	4770      	bx	lr
 80110d2:	bf00      	nop
 80110d4:	2000000c 	.word	0x2000000c
	...

080110e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80110e0:	f3ef 8009 	mrs	r0, PSP
 80110e4:	f3bf 8f6f 	isb	sy
 80110e8:	4b15      	ldr	r3, [pc, #84]	; (8011140 <pxCurrentTCBConst>)
 80110ea:	681a      	ldr	r2, [r3, #0]
 80110ec:	f01e 0f10 	tst.w	lr, #16
 80110f0:	bf08      	it	eq
 80110f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80110f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110fa:	6010      	str	r0, [r2, #0]
 80110fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011104:	f380 8811 	msr	BASEPRI, r0
 8011108:	f3bf 8f4f 	dsb	sy
 801110c:	f3bf 8f6f 	isb	sy
 8011110:	f7fe feaa 	bl	800fe68 <vTaskSwitchContext>
 8011114:	f04f 0000 	mov.w	r0, #0
 8011118:	f380 8811 	msr	BASEPRI, r0
 801111c:	bc09      	pop	{r0, r3}
 801111e:	6819      	ldr	r1, [r3, #0]
 8011120:	6808      	ldr	r0, [r1, #0]
 8011122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011126:	f01e 0f10 	tst.w	lr, #16
 801112a:	bf08      	it	eq
 801112c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011130:	f380 8809 	msr	PSP, r0
 8011134:	f3bf 8f6f 	isb	sy
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop
 801113c:	f3af 8000 	nop.w

08011140 <pxCurrentTCBConst>:
 8011140:	200014fc 	.word	0x200014fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011144:	bf00      	nop
 8011146:	bf00      	nop

08011148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
	__asm volatile
 801114e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011152:	f383 8811 	msr	BASEPRI, r3
 8011156:	f3bf 8f6f 	isb	sy
 801115a:	f3bf 8f4f 	dsb	sy
 801115e:	607b      	str	r3, [r7, #4]
}
 8011160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011162:	f7fe fdc7 	bl	800fcf4 <xTaskIncrementTick>
 8011166:	4603      	mov	r3, r0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d003      	beq.n	8011174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801116c:	4b06      	ldr	r3, [pc, #24]	; (8011188 <xPortSysTickHandler+0x40>)
 801116e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011172:	601a      	str	r2, [r3, #0]
 8011174:	2300      	movs	r3, #0
 8011176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	f383 8811 	msr	BASEPRI, r3
}
 801117e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011180:	bf00      	nop
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}
 8011188:	e000ed04 	.word	0xe000ed04

0801118c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801118c:	b480      	push	{r7}
 801118e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011190:	4b0b      	ldr	r3, [pc, #44]	; (80111c0 <vPortSetupTimerInterrupt+0x34>)
 8011192:	2200      	movs	r2, #0
 8011194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011196:	4b0b      	ldr	r3, [pc, #44]	; (80111c4 <vPortSetupTimerInterrupt+0x38>)
 8011198:	2200      	movs	r2, #0
 801119a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801119c:	4b0a      	ldr	r3, [pc, #40]	; (80111c8 <vPortSetupTimerInterrupt+0x3c>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	4a0a      	ldr	r2, [pc, #40]	; (80111cc <vPortSetupTimerInterrupt+0x40>)
 80111a2:	fba2 2303 	umull	r2, r3, r2, r3
 80111a6:	099b      	lsrs	r3, r3, #6
 80111a8:	4a09      	ldr	r2, [pc, #36]	; (80111d0 <vPortSetupTimerInterrupt+0x44>)
 80111aa:	3b01      	subs	r3, #1
 80111ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80111ae:	4b04      	ldr	r3, [pc, #16]	; (80111c0 <vPortSetupTimerInterrupt+0x34>)
 80111b0:	2207      	movs	r2, #7
 80111b2:	601a      	str	r2, [r3, #0]
}
 80111b4:	bf00      	nop
 80111b6:	46bd      	mov	sp, r7
 80111b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111bc:	4770      	bx	lr
 80111be:	bf00      	nop
 80111c0:	e000e010 	.word	0xe000e010
 80111c4:	e000e018 	.word	0xe000e018
 80111c8:	20000000 	.word	0x20000000
 80111cc:	10624dd3 	.word	0x10624dd3
 80111d0:	e000e014 	.word	0xe000e014

080111d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80111d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80111e4 <vPortEnableVFP+0x10>
 80111d8:	6801      	ldr	r1, [r0, #0]
 80111da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80111de:	6001      	str	r1, [r0, #0]
 80111e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80111e2:	bf00      	nop
 80111e4:	e000ed88 	.word	0xe000ed88

080111e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80111e8:	b480      	push	{r7}
 80111ea:	b085      	sub	sp, #20
 80111ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80111ee:	f3ef 8305 	mrs	r3, IPSR
 80111f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2b0f      	cmp	r3, #15
 80111f8:	d914      	bls.n	8011224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80111fa:	4a17      	ldr	r2, [pc, #92]	; (8011258 <vPortValidateInterruptPriority+0x70>)
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	4413      	add	r3, r2
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011204:	4b15      	ldr	r3, [pc, #84]	; (801125c <vPortValidateInterruptPriority+0x74>)
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	7afa      	ldrb	r2, [r7, #11]
 801120a:	429a      	cmp	r2, r3
 801120c:	d20a      	bcs.n	8011224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801120e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011212:	f383 8811 	msr	BASEPRI, r3
 8011216:	f3bf 8f6f 	isb	sy
 801121a:	f3bf 8f4f 	dsb	sy
 801121e:	607b      	str	r3, [r7, #4]
}
 8011220:	bf00      	nop
 8011222:	e7fe      	b.n	8011222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011224:	4b0e      	ldr	r3, [pc, #56]	; (8011260 <vPortValidateInterruptPriority+0x78>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801122c:	4b0d      	ldr	r3, [pc, #52]	; (8011264 <vPortValidateInterruptPriority+0x7c>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	429a      	cmp	r2, r3
 8011232:	d90a      	bls.n	801124a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011238:	f383 8811 	msr	BASEPRI, r3
 801123c:	f3bf 8f6f 	isb	sy
 8011240:	f3bf 8f4f 	dsb	sy
 8011244:	603b      	str	r3, [r7, #0]
}
 8011246:	bf00      	nop
 8011248:	e7fe      	b.n	8011248 <vPortValidateInterruptPriority+0x60>
	}
 801124a:	bf00      	nop
 801124c:	3714      	adds	r7, #20
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr
 8011256:	bf00      	nop
 8011258:	e000e3f0 	.word	0xe000e3f0
 801125c:	20001b28 	.word	0x20001b28
 8011260:	e000ed0c 	.word	0xe000ed0c
 8011264:	20001b2c 	.word	0x20001b2c

08011268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b08a      	sub	sp, #40	; 0x28
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011270:	2300      	movs	r3, #0
 8011272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011274:	f7fe fc70 	bl	800fb58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011278:	4b5b      	ldr	r3, [pc, #364]	; (80113e8 <pvPortMalloc+0x180>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d101      	bne.n	8011284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011280:	f000 f920 	bl	80114c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011284:	4b59      	ldr	r3, [pc, #356]	; (80113ec <pvPortMalloc+0x184>)
 8011286:	681a      	ldr	r2, [r3, #0]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	4013      	ands	r3, r2
 801128c:	2b00      	cmp	r3, #0
 801128e:	f040 8093 	bne.w	80113b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d01d      	beq.n	80112d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011298:	2208      	movs	r2, #8
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	4413      	add	r3, r2
 801129e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f003 0307 	and.w	r3, r3, #7
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d014      	beq.n	80112d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f023 0307 	bic.w	r3, r3, #7
 80112b0:	3308      	adds	r3, #8
 80112b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f003 0307 	and.w	r3, r3, #7
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00a      	beq.n	80112d4 <pvPortMalloc+0x6c>
	__asm volatile
 80112be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c2:	f383 8811 	msr	BASEPRI, r3
 80112c6:	f3bf 8f6f 	isb	sy
 80112ca:	f3bf 8f4f 	dsb	sy
 80112ce:	617b      	str	r3, [r7, #20]
}
 80112d0:	bf00      	nop
 80112d2:	e7fe      	b.n	80112d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d06e      	beq.n	80113b8 <pvPortMalloc+0x150>
 80112da:	4b45      	ldr	r3, [pc, #276]	; (80113f0 <pvPortMalloc+0x188>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	687a      	ldr	r2, [r7, #4]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d869      	bhi.n	80113b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80112e4:	4b43      	ldr	r3, [pc, #268]	; (80113f4 <pvPortMalloc+0x18c>)
 80112e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80112e8:	4b42      	ldr	r3, [pc, #264]	; (80113f4 <pvPortMalloc+0x18c>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80112ee:	e004      	b.n	80112fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80112f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80112f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80112fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	687a      	ldr	r2, [r7, #4]
 8011300:	429a      	cmp	r2, r3
 8011302:	d903      	bls.n	801130c <pvPortMalloc+0xa4>
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d1f1      	bne.n	80112f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801130c:	4b36      	ldr	r3, [pc, #216]	; (80113e8 <pvPortMalloc+0x180>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011312:	429a      	cmp	r2, r3
 8011314:	d050      	beq.n	80113b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011316:	6a3b      	ldr	r3, [r7, #32]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2208      	movs	r2, #8
 801131c:	4413      	add	r3, r2
 801131e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	6a3b      	ldr	r3, [r7, #32]
 8011326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132a:	685a      	ldr	r2, [r3, #4]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	1ad2      	subs	r2, r2, r3
 8011330:	2308      	movs	r3, #8
 8011332:	005b      	lsls	r3, r3, #1
 8011334:	429a      	cmp	r2, r3
 8011336:	d91f      	bls.n	8011378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	4413      	add	r3, r2
 801133e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011340:	69bb      	ldr	r3, [r7, #24]
 8011342:	f003 0307 	and.w	r3, r3, #7
 8011346:	2b00      	cmp	r3, #0
 8011348:	d00a      	beq.n	8011360 <pvPortMalloc+0xf8>
	__asm volatile
 801134a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134e:	f383 8811 	msr	BASEPRI, r3
 8011352:	f3bf 8f6f 	isb	sy
 8011356:	f3bf 8f4f 	dsb	sy
 801135a:	613b      	str	r3, [r7, #16]
}
 801135c:	bf00      	nop
 801135e:	e7fe      	b.n	801135e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011362:	685a      	ldr	r2, [r3, #4]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	1ad2      	subs	r2, r2, r3
 8011368:	69bb      	ldr	r3, [r7, #24]
 801136a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136e:	687a      	ldr	r2, [r7, #4]
 8011370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011372:	69b8      	ldr	r0, [r7, #24]
 8011374:	f000 f908 	bl	8011588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011378:	4b1d      	ldr	r3, [pc, #116]	; (80113f0 <pvPortMalloc+0x188>)
 801137a:	681a      	ldr	r2, [r3, #0]
 801137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	1ad3      	subs	r3, r2, r3
 8011382:	4a1b      	ldr	r2, [pc, #108]	; (80113f0 <pvPortMalloc+0x188>)
 8011384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011386:	4b1a      	ldr	r3, [pc, #104]	; (80113f0 <pvPortMalloc+0x188>)
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	4b1b      	ldr	r3, [pc, #108]	; (80113f8 <pvPortMalloc+0x190>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	429a      	cmp	r2, r3
 8011390:	d203      	bcs.n	801139a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011392:	4b17      	ldr	r3, [pc, #92]	; (80113f0 <pvPortMalloc+0x188>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	4a18      	ldr	r2, [pc, #96]	; (80113f8 <pvPortMalloc+0x190>)
 8011398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139c:	685a      	ldr	r2, [r3, #4]
 801139e:	4b13      	ldr	r3, [pc, #76]	; (80113ec <pvPortMalloc+0x184>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	431a      	orrs	r2, r3
 80113a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80113a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113aa:	2200      	movs	r2, #0
 80113ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80113ae:	4b13      	ldr	r3, [pc, #76]	; (80113fc <pvPortMalloc+0x194>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	3301      	adds	r3, #1
 80113b4:	4a11      	ldr	r2, [pc, #68]	; (80113fc <pvPortMalloc+0x194>)
 80113b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80113b8:	f7fe fbdc 	bl	800fb74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	f003 0307 	and.w	r3, r3, #7
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d00a      	beq.n	80113dc <pvPortMalloc+0x174>
	__asm volatile
 80113c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ca:	f383 8811 	msr	BASEPRI, r3
 80113ce:	f3bf 8f6f 	isb	sy
 80113d2:	f3bf 8f4f 	dsb	sy
 80113d6:	60fb      	str	r3, [r7, #12]
}
 80113d8:	bf00      	nop
 80113da:	e7fe      	b.n	80113da <pvPortMalloc+0x172>
	return pvReturn;
 80113dc:	69fb      	ldr	r3, [r7, #28]
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3728      	adds	r7, #40	; 0x28
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	200026f0 	.word	0x200026f0
 80113ec:	20002704 	.word	0x20002704
 80113f0:	200026f4 	.word	0x200026f4
 80113f4:	200026e8 	.word	0x200026e8
 80113f8:	200026f8 	.word	0x200026f8
 80113fc:	200026fc 	.word	0x200026fc

08011400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b086      	sub	sp, #24
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d04d      	beq.n	80114ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011412:	2308      	movs	r3, #8
 8011414:	425b      	negs	r3, r3
 8011416:	697a      	ldr	r2, [r7, #20]
 8011418:	4413      	add	r3, r2
 801141a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011420:	693b      	ldr	r3, [r7, #16]
 8011422:	685a      	ldr	r2, [r3, #4]
 8011424:	4b24      	ldr	r3, [pc, #144]	; (80114b8 <vPortFree+0xb8>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	4013      	ands	r3, r2
 801142a:	2b00      	cmp	r3, #0
 801142c:	d10a      	bne.n	8011444 <vPortFree+0x44>
	__asm volatile
 801142e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011432:	f383 8811 	msr	BASEPRI, r3
 8011436:	f3bf 8f6f 	isb	sy
 801143a:	f3bf 8f4f 	dsb	sy
 801143e:	60fb      	str	r3, [r7, #12]
}
 8011440:	bf00      	nop
 8011442:	e7fe      	b.n	8011442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00a      	beq.n	8011462 <vPortFree+0x62>
	__asm volatile
 801144c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011450:	f383 8811 	msr	BASEPRI, r3
 8011454:	f3bf 8f6f 	isb	sy
 8011458:	f3bf 8f4f 	dsb	sy
 801145c:	60bb      	str	r3, [r7, #8]
}
 801145e:	bf00      	nop
 8011460:	e7fe      	b.n	8011460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	685a      	ldr	r2, [r3, #4]
 8011466:	4b14      	ldr	r3, [pc, #80]	; (80114b8 <vPortFree+0xb8>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4013      	ands	r3, r2
 801146c:	2b00      	cmp	r3, #0
 801146e:	d01e      	beq.n	80114ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d11a      	bne.n	80114ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	685a      	ldr	r2, [r3, #4]
 801147c:	4b0e      	ldr	r3, [pc, #56]	; (80114b8 <vPortFree+0xb8>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	43db      	mvns	r3, r3
 8011482:	401a      	ands	r2, r3
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011488:	f7fe fb66 	bl	800fb58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	685a      	ldr	r2, [r3, #4]
 8011490:	4b0a      	ldr	r3, [pc, #40]	; (80114bc <vPortFree+0xbc>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	4413      	add	r3, r2
 8011496:	4a09      	ldr	r2, [pc, #36]	; (80114bc <vPortFree+0xbc>)
 8011498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801149a:	6938      	ldr	r0, [r7, #16]
 801149c:	f000 f874 	bl	8011588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80114a0:	4b07      	ldr	r3, [pc, #28]	; (80114c0 <vPortFree+0xc0>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	3301      	adds	r3, #1
 80114a6:	4a06      	ldr	r2, [pc, #24]	; (80114c0 <vPortFree+0xc0>)
 80114a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80114aa:	f7fe fb63 	bl	800fb74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80114ae:	bf00      	nop
 80114b0:	3718      	adds	r7, #24
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	20002704 	.word	0x20002704
 80114bc:	200026f4 	.word	0x200026f4
 80114c0:	20002700 	.word	0x20002700

080114c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80114c4:	b480      	push	{r7}
 80114c6:	b085      	sub	sp, #20
 80114c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80114ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80114ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80114d0:	4b27      	ldr	r3, [pc, #156]	; (8011570 <prvHeapInit+0xac>)
 80114d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	f003 0307 	and.w	r3, r3, #7
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d00c      	beq.n	80114f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	3307      	adds	r3, #7
 80114e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f023 0307 	bic.w	r3, r3, #7
 80114ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80114ec:	68ba      	ldr	r2, [r7, #8]
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	1ad3      	subs	r3, r2, r3
 80114f2:	4a1f      	ldr	r2, [pc, #124]	; (8011570 <prvHeapInit+0xac>)
 80114f4:	4413      	add	r3, r2
 80114f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80114fc:	4a1d      	ldr	r2, [pc, #116]	; (8011574 <prvHeapInit+0xb0>)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011502:	4b1c      	ldr	r3, [pc, #112]	; (8011574 <prvHeapInit+0xb0>)
 8011504:	2200      	movs	r2, #0
 8011506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	68ba      	ldr	r2, [r7, #8]
 801150c:	4413      	add	r3, r2
 801150e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011510:	2208      	movs	r2, #8
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	1a9b      	subs	r3, r3, r2
 8011516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f023 0307 	bic.w	r3, r3, #7
 801151e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	4a15      	ldr	r2, [pc, #84]	; (8011578 <prvHeapInit+0xb4>)
 8011524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011526:	4b14      	ldr	r3, [pc, #80]	; (8011578 <prvHeapInit+0xb4>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	2200      	movs	r2, #0
 801152c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801152e:	4b12      	ldr	r3, [pc, #72]	; (8011578 <prvHeapInit+0xb4>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	2200      	movs	r2, #0
 8011534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	68fa      	ldr	r2, [r7, #12]
 801153e:	1ad2      	subs	r2, r2, r3
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011544:	4b0c      	ldr	r3, [pc, #48]	; (8011578 <prvHeapInit+0xb4>)
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	4a0a      	ldr	r2, [pc, #40]	; (801157c <prvHeapInit+0xb8>)
 8011552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	4a09      	ldr	r2, [pc, #36]	; (8011580 <prvHeapInit+0xbc>)
 801155a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801155c:	4b09      	ldr	r3, [pc, #36]	; (8011584 <prvHeapInit+0xc0>)
 801155e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011562:	601a      	str	r2, [r3, #0]
}
 8011564:	bf00      	nop
 8011566:	3714      	adds	r7, #20
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr
 8011570:	20001b30 	.word	0x20001b30
 8011574:	200026e8 	.word	0x200026e8
 8011578:	200026f0 	.word	0x200026f0
 801157c:	200026f8 	.word	0x200026f8
 8011580:	200026f4 	.word	0x200026f4
 8011584:	20002704 	.word	0x20002704

08011588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011588:	b480      	push	{r7}
 801158a:	b085      	sub	sp, #20
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011590:	4b28      	ldr	r3, [pc, #160]	; (8011634 <prvInsertBlockIntoFreeList+0xac>)
 8011592:	60fb      	str	r3, [r7, #12]
 8011594:	e002      	b.n	801159c <prvInsertBlockIntoFreeList+0x14>
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	60fb      	str	r3, [r7, #12]
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d8f7      	bhi.n	8011596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	68ba      	ldr	r2, [r7, #8]
 80115b0:	4413      	add	r3, r2
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d108      	bne.n	80115ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	685a      	ldr	r2, [r3, #4]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	441a      	add	r2, r3
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	68ba      	ldr	r2, [r7, #8]
 80115d4:	441a      	add	r2, r3
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d118      	bne.n	8011610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	4b15      	ldr	r3, [pc, #84]	; (8011638 <prvInsertBlockIntoFreeList+0xb0>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d00d      	beq.n	8011606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	685a      	ldr	r2, [r3, #4]
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	441a      	add	r2, r3
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	601a      	str	r2, [r3, #0]
 8011604:	e008      	b.n	8011618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011606:	4b0c      	ldr	r3, [pc, #48]	; (8011638 <prvInsertBlockIntoFreeList+0xb0>)
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	601a      	str	r2, [r3, #0]
 801160e:	e003      	b.n	8011618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011618:	68fa      	ldr	r2, [r7, #12]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	429a      	cmp	r2, r3
 801161e:	d002      	beq.n	8011626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011626:	bf00      	nop
 8011628:	3714      	adds	r7, #20
 801162a:	46bd      	mov	sp, r7
 801162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop
 8011634:	200026e8 	.word	0x200026e8
 8011638:	200026f0 	.word	0x200026f0

0801163c <__errno>:
 801163c:	4b01      	ldr	r3, [pc, #4]	; (8011644 <__errno+0x8>)
 801163e:	6818      	ldr	r0, [r3, #0]
 8011640:	4770      	bx	lr
 8011642:	bf00      	nop
 8011644:	20000010 	.word	0x20000010

08011648 <std>:
 8011648:	2300      	movs	r3, #0
 801164a:	b510      	push	{r4, lr}
 801164c:	4604      	mov	r4, r0
 801164e:	e9c0 3300 	strd	r3, r3, [r0]
 8011652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011656:	6083      	str	r3, [r0, #8]
 8011658:	8181      	strh	r1, [r0, #12]
 801165a:	6643      	str	r3, [r0, #100]	; 0x64
 801165c:	81c2      	strh	r2, [r0, #14]
 801165e:	6183      	str	r3, [r0, #24]
 8011660:	4619      	mov	r1, r3
 8011662:	2208      	movs	r2, #8
 8011664:	305c      	adds	r0, #92	; 0x5c
 8011666:	f000 f91a 	bl	801189e <memset>
 801166a:	4b05      	ldr	r3, [pc, #20]	; (8011680 <std+0x38>)
 801166c:	6263      	str	r3, [r4, #36]	; 0x24
 801166e:	4b05      	ldr	r3, [pc, #20]	; (8011684 <std+0x3c>)
 8011670:	62a3      	str	r3, [r4, #40]	; 0x28
 8011672:	4b05      	ldr	r3, [pc, #20]	; (8011688 <std+0x40>)
 8011674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011676:	4b05      	ldr	r3, [pc, #20]	; (801168c <std+0x44>)
 8011678:	6224      	str	r4, [r4, #32]
 801167a:	6323      	str	r3, [r4, #48]	; 0x30
 801167c:	bd10      	pop	{r4, pc}
 801167e:	bf00      	nop
 8011680:	08012875 	.word	0x08012875
 8011684:	08012897 	.word	0x08012897
 8011688:	080128cf 	.word	0x080128cf
 801168c:	080128f3 	.word	0x080128f3

08011690 <_cleanup_r>:
 8011690:	4901      	ldr	r1, [pc, #4]	; (8011698 <_cleanup_r+0x8>)
 8011692:	f000 b8af 	b.w	80117f4 <_fwalk_reent>
 8011696:	bf00      	nop
 8011698:	080144a1 	.word	0x080144a1

0801169c <__sfmoreglue>:
 801169c:	b570      	push	{r4, r5, r6, lr}
 801169e:	2268      	movs	r2, #104	; 0x68
 80116a0:	1e4d      	subs	r5, r1, #1
 80116a2:	4355      	muls	r5, r2
 80116a4:	460e      	mov	r6, r1
 80116a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80116aa:	f000 f921 	bl	80118f0 <_malloc_r>
 80116ae:	4604      	mov	r4, r0
 80116b0:	b140      	cbz	r0, 80116c4 <__sfmoreglue+0x28>
 80116b2:	2100      	movs	r1, #0
 80116b4:	e9c0 1600 	strd	r1, r6, [r0]
 80116b8:	300c      	adds	r0, #12
 80116ba:	60a0      	str	r0, [r4, #8]
 80116bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80116c0:	f000 f8ed 	bl	801189e <memset>
 80116c4:	4620      	mov	r0, r4
 80116c6:	bd70      	pop	{r4, r5, r6, pc}

080116c8 <__sfp_lock_acquire>:
 80116c8:	4801      	ldr	r0, [pc, #4]	; (80116d0 <__sfp_lock_acquire+0x8>)
 80116ca:	f000 b8d8 	b.w	801187e <__retarget_lock_acquire_recursive>
 80116ce:	bf00      	nop
 80116d0:	20002709 	.word	0x20002709

080116d4 <__sfp_lock_release>:
 80116d4:	4801      	ldr	r0, [pc, #4]	; (80116dc <__sfp_lock_release+0x8>)
 80116d6:	f000 b8d3 	b.w	8011880 <__retarget_lock_release_recursive>
 80116da:	bf00      	nop
 80116dc:	20002709 	.word	0x20002709

080116e0 <__sinit_lock_acquire>:
 80116e0:	4801      	ldr	r0, [pc, #4]	; (80116e8 <__sinit_lock_acquire+0x8>)
 80116e2:	f000 b8cc 	b.w	801187e <__retarget_lock_acquire_recursive>
 80116e6:	bf00      	nop
 80116e8:	2000270a 	.word	0x2000270a

080116ec <__sinit_lock_release>:
 80116ec:	4801      	ldr	r0, [pc, #4]	; (80116f4 <__sinit_lock_release+0x8>)
 80116ee:	f000 b8c7 	b.w	8011880 <__retarget_lock_release_recursive>
 80116f2:	bf00      	nop
 80116f4:	2000270a 	.word	0x2000270a

080116f8 <__sinit>:
 80116f8:	b510      	push	{r4, lr}
 80116fa:	4604      	mov	r4, r0
 80116fc:	f7ff fff0 	bl	80116e0 <__sinit_lock_acquire>
 8011700:	69a3      	ldr	r3, [r4, #24]
 8011702:	b11b      	cbz	r3, 801170c <__sinit+0x14>
 8011704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011708:	f7ff bff0 	b.w	80116ec <__sinit_lock_release>
 801170c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011710:	6523      	str	r3, [r4, #80]	; 0x50
 8011712:	4b13      	ldr	r3, [pc, #76]	; (8011760 <__sinit+0x68>)
 8011714:	4a13      	ldr	r2, [pc, #76]	; (8011764 <__sinit+0x6c>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	62a2      	str	r2, [r4, #40]	; 0x28
 801171a:	42a3      	cmp	r3, r4
 801171c:	bf04      	itt	eq
 801171e:	2301      	moveq	r3, #1
 8011720:	61a3      	streq	r3, [r4, #24]
 8011722:	4620      	mov	r0, r4
 8011724:	f000 f820 	bl	8011768 <__sfp>
 8011728:	6060      	str	r0, [r4, #4]
 801172a:	4620      	mov	r0, r4
 801172c:	f000 f81c 	bl	8011768 <__sfp>
 8011730:	60a0      	str	r0, [r4, #8]
 8011732:	4620      	mov	r0, r4
 8011734:	f000 f818 	bl	8011768 <__sfp>
 8011738:	2200      	movs	r2, #0
 801173a:	60e0      	str	r0, [r4, #12]
 801173c:	2104      	movs	r1, #4
 801173e:	6860      	ldr	r0, [r4, #4]
 8011740:	f7ff ff82 	bl	8011648 <std>
 8011744:	68a0      	ldr	r0, [r4, #8]
 8011746:	2201      	movs	r2, #1
 8011748:	2109      	movs	r1, #9
 801174a:	f7ff ff7d 	bl	8011648 <std>
 801174e:	68e0      	ldr	r0, [r4, #12]
 8011750:	2202      	movs	r2, #2
 8011752:	2112      	movs	r1, #18
 8011754:	f7ff ff78 	bl	8011648 <std>
 8011758:	2301      	movs	r3, #1
 801175a:	61a3      	str	r3, [r4, #24]
 801175c:	e7d2      	b.n	8011704 <__sinit+0xc>
 801175e:	bf00      	nop
 8011760:	080163d0 	.word	0x080163d0
 8011764:	08011691 	.word	0x08011691

08011768 <__sfp>:
 8011768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801176a:	4607      	mov	r7, r0
 801176c:	f7ff ffac 	bl	80116c8 <__sfp_lock_acquire>
 8011770:	4b1e      	ldr	r3, [pc, #120]	; (80117ec <__sfp+0x84>)
 8011772:	681e      	ldr	r6, [r3, #0]
 8011774:	69b3      	ldr	r3, [r6, #24]
 8011776:	b913      	cbnz	r3, 801177e <__sfp+0x16>
 8011778:	4630      	mov	r0, r6
 801177a:	f7ff ffbd 	bl	80116f8 <__sinit>
 801177e:	3648      	adds	r6, #72	; 0x48
 8011780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011784:	3b01      	subs	r3, #1
 8011786:	d503      	bpl.n	8011790 <__sfp+0x28>
 8011788:	6833      	ldr	r3, [r6, #0]
 801178a:	b30b      	cbz	r3, 80117d0 <__sfp+0x68>
 801178c:	6836      	ldr	r6, [r6, #0]
 801178e:	e7f7      	b.n	8011780 <__sfp+0x18>
 8011790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011794:	b9d5      	cbnz	r5, 80117cc <__sfp+0x64>
 8011796:	4b16      	ldr	r3, [pc, #88]	; (80117f0 <__sfp+0x88>)
 8011798:	60e3      	str	r3, [r4, #12]
 801179a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801179e:	6665      	str	r5, [r4, #100]	; 0x64
 80117a0:	f000 f86c 	bl	801187c <__retarget_lock_init_recursive>
 80117a4:	f7ff ff96 	bl	80116d4 <__sfp_lock_release>
 80117a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80117ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80117b0:	6025      	str	r5, [r4, #0]
 80117b2:	61a5      	str	r5, [r4, #24]
 80117b4:	2208      	movs	r2, #8
 80117b6:	4629      	mov	r1, r5
 80117b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80117bc:	f000 f86f 	bl	801189e <memset>
 80117c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80117c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80117c8:	4620      	mov	r0, r4
 80117ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117cc:	3468      	adds	r4, #104	; 0x68
 80117ce:	e7d9      	b.n	8011784 <__sfp+0x1c>
 80117d0:	2104      	movs	r1, #4
 80117d2:	4638      	mov	r0, r7
 80117d4:	f7ff ff62 	bl	801169c <__sfmoreglue>
 80117d8:	4604      	mov	r4, r0
 80117da:	6030      	str	r0, [r6, #0]
 80117dc:	2800      	cmp	r0, #0
 80117de:	d1d5      	bne.n	801178c <__sfp+0x24>
 80117e0:	f7ff ff78 	bl	80116d4 <__sfp_lock_release>
 80117e4:	230c      	movs	r3, #12
 80117e6:	603b      	str	r3, [r7, #0]
 80117e8:	e7ee      	b.n	80117c8 <__sfp+0x60>
 80117ea:	bf00      	nop
 80117ec:	080163d0 	.word	0x080163d0
 80117f0:	ffff0001 	.word	0xffff0001

080117f4 <_fwalk_reent>:
 80117f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117f8:	4606      	mov	r6, r0
 80117fa:	4688      	mov	r8, r1
 80117fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011800:	2700      	movs	r7, #0
 8011802:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011806:	f1b9 0901 	subs.w	r9, r9, #1
 801180a:	d505      	bpl.n	8011818 <_fwalk_reent+0x24>
 801180c:	6824      	ldr	r4, [r4, #0]
 801180e:	2c00      	cmp	r4, #0
 8011810:	d1f7      	bne.n	8011802 <_fwalk_reent+0xe>
 8011812:	4638      	mov	r0, r7
 8011814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011818:	89ab      	ldrh	r3, [r5, #12]
 801181a:	2b01      	cmp	r3, #1
 801181c:	d907      	bls.n	801182e <_fwalk_reent+0x3a>
 801181e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011822:	3301      	adds	r3, #1
 8011824:	d003      	beq.n	801182e <_fwalk_reent+0x3a>
 8011826:	4629      	mov	r1, r5
 8011828:	4630      	mov	r0, r6
 801182a:	47c0      	blx	r8
 801182c:	4307      	orrs	r7, r0
 801182e:	3568      	adds	r5, #104	; 0x68
 8011830:	e7e9      	b.n	8011806 <_fwalk_reent+0x12>
	...

08011834 <__libc_init_array>:
 8011834:	b570      	push	{r4, r5, r6, lr}
 8011836:	4d0d      	ldr	r5, [pc, #52]	; (801186c <__libc_init_array+0x38>)
 8011838:	4c0d      	ldr	r4, [pc, #52]	; (8011870 <__libc_init_array+0x3c>)
 801183a:	1b64      	subs	r4, r4, r5
 801183c:	10a4      	asrs	r4, r4, #2
 801183e:	2600      	movs	r6, #0
 8011840:	42a6      	cmp	r6, r4
 8011842:	d109      	bne.n	8011858 <__libc_init_array+0x24>
 8011844:	4d0b      	ldr	r5, [pc, #44]	; (8011874 <__libc_init_array+0x40>)
 8011846:	4c0c      	ldr	r4, [pc, #48]	; (8011878 <__libc_init_array+0x44>)
 8011848:	f004 fc3c 	bl	80160c4 <_init>
 801184c:	1b64      	subs	r4, r4, r5
 801184e:	10a4      	asrs	r4, r4, #2
 8011850:	2600      	movs	r6, #0
 8011852:	42a6      	cmp	r6, r4
 8011854:	d105      	bne.n	8011862 <__libc_init_array+0x2e>
 8011856:	bd70      	pop	{r4, r5, r6, pc}
 8011858:	f855 3b04 	ldr.w	r3, [r5], #4
 801185c:	4798      	blx	r3
 801185e:	3601      	adds	r6, #1
 8011860:	e7ee      	b.n	8011840 <__libc_init_array+0xc>
 8011862:	f855 3b04 	ldr.w	r3, [r5], #4
 8011866:	4798      	blx	r3
 8011868:	3601      	adds	r6, #1
 801186a:	e7f2      	b.n	8011852 <__libc_init_array+0x1e>
 801186c:	08016814 	.word	0x08016814
 8011870:	08016814 	.word	0x08016814
 8011874:	08016814 	.word	0x08016814
 8011878:	08016818 	.word	0x08016818

0801187c <__retarget_lock_init_recursive>:
 801187c:	4770      	bx	lr

0801187e <__retarget_lock_acquire_recursive>:
 801187e:	4770      	bx	lr

08011880 <__retarget_lock_release_recursive>:
 8011880:	4770      	bx	lr

08011882 <memcpy>:
 8011882:	440a      	add	r2, r1
 8011884:	4291      	cmp	r1, r2
 8011886:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801188a:	d100      	bne.n	801188e <memcpy+0xc>
 801188c:	4770      	bx	lr
 801188e:	b510      	push	{r4, lr}
 8011890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011898:	4291      	cmp	r1, r2
 801189a:	d1f9      	bne.n	8011890 <memcpy+0xe>
 801189c:	bd10      	pop	{r4, pc}

0801189e <memset>:
 801189e:	4402      	add	r2, r0
 80118a0:	4603      	mov	r3, r0
 80118a2:	4293      	cmp	r3, r2
 80118a4:	d100      	bne.n	80118a8 <memset+0xa>
 80118a6:	4770      	bx	lr
 80118a8:	f803 1b01 	strb.w	r1, [r3], #1
 80118ac:	e7f9      	b.n	80118a2 <memset+0x4>
	...

080118b0 <sbrk_aligned>:
 80118b0:	b570      	push	{r4, r5, r6, lr}
 80118b2:	4e0e      	ldr	r6, [pc, #56]	; (80118ec <sbrk_aligned+0x3c>)
 80118b4:	460c      	mov	r4, r1
 80118b6:	6831      	ldr	r1, [r6, #0]
 80118b8:	4605      	mov	r5, r0
 80118ba:	b911      	cbnz	r1, 80118c2 <sbrk_aligned+0x12>
 80118bc:	f000 ff70 	bl	80127a0 <_sbrk_r>
 80118c0:	6030      	str	r0, [r6, #0]
 80118c2:	4621      	mov	r1, r4
 80118c4:	4628      	mov	r0, r5
 80118c6:	f000 ff6b 	bl	80127a0 <_sbrk_r>
 80118ca:	1c43      	adds	r3, r0, #1
 80118cc:	d00a      	beq.n	80118e4 <sbrk_aligned+0x34>
 80118ce:	1cc4      	adds	r4, r0, #3
 80118d0:	f024 0403 	bic.w	r4, r4, #3
 80118d4:	42a0      	cmp	r0, r4
 80118d6:	d007      	beq.n	80118e8 <sbrk_aligned+0x38>
 80118d8:	1a21      	subs	r1, r4, r0
 80118da:	4628      	mov	r0, r5
 80118dc:	f000 ff60 	bl	80127a0 <_sbrk_r>
 80118e0:	3001      	adds	r0, #1
 80118e2:	d101      	bne.n	80118e8 <sbrk_aligned+0x38>
 80118e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80118e8:	4620      	mov	r0, r4
 80118ea:	bd70      	pop	{r4, r5, r6, pc}
 80118ec:	20002710 	.word	0x20002710

080118f0 <_malloc_r>:
 80118f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118f4:	1ccd      	adds	r5, r1, #3
 80118f6:	f025 0503 	bic.w	r5, r5, #3
 80118fa:	3508      	adds	r5, #8
 80118fc:	2d0c      	cmp	r5, #12
 80118fe:	bf38      	it	cc
 8011900:	250c      	movcc	r5, #12
 8011902:	2d00      	cmp	r5, #0
 8011904:	4607      	mov	r7, r0
 8011906:	db01      	blt.n	801190c <_malloc_r+0x1c>
 8011908:	42a9      	cmp	r1, r5
 801190a:	d905      	bls.n	8011918 <_malloc_r+0x28>
 801190c:	230c      	movs	r3, #12
 801190e:	603b      	str	r3, [r7, #0]
 8011910:	2600      	movs	r6, #0
 8011912:	4630      	mov	r0, r6
 8011914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011918:	4e2e      	ldr	r6, [pc, #184]	; (80119d4 <_malloc_r+0xe4>)
 801191a:	f003 f99d 	bl	8014c58 <__malloc_lock>
 801191e:	6833      	ldr	r3, [r6, #0]
 8011920:	461c      	mov	r4, r3
 8011922:	bb34      	cbnz	r4, 8011972 <_malloc_r+0x82>
 8011924:	4629      	mov	r1, r5
 8011926:	4638      	mov	r0, r7
 8011928:	f7ff ffc2 	bl	80118b0 <sbrk_aligned>
 801192c:	1c43      	adds	r3, r0, #1
 801192e:	4604      	mov	r4, r0
 8011930:	d14d      	bne.n	80119ce <_malloc_r+0xde>
 8011932:	6834      	ldr	r4, [r6, #0]
 8011934:	4626      	mov	r6, r4
 8011936:	2e00      	cmp	r6, #0
 8011938:	d140      	bne.n	80119bc <_malloc_r+0xcc>
 801193a:	6823      	ldr	r3, [r4, #0]
 801193c:	4631      	mov	r1, r6
 801193e:	4638      	mov	r0, r7
 8011940:	eb04 0803 	add.w	r8, r4, r3
 8011944:	f000 ff2c 	bl	80127a0 <_sbrk_r>
 8011948:	4580      	cmp	r8, r0
 801194a:	d13a      	bne.n	80119c2 <_malloc_r+0xd2>
 801194c:	6821      	ldr	r1, [r4, #0]
 801194e:	3503      	adds	r5, #3
 8011950:	1a6d      	subs	r5, r5, r1
 8011952:	f025 0503 	bic.w	r5, r5, #3
 8011956:	3508      	adds	r5, #8
 8011958:	2d0c      	cmp	r5, #12
 801195a:	bf38      	it	cc
 801195c:	250c      	movcc	r5, #12
 801195e:	4629      	mov	r1, r5
 8011960:	4638      	mov	r0, r7
 8011962:	f7ff ffa5 	bl	80118b0 <sbrk_aligned>
 8011966:	3001      	adds	r0, #1
 8011968:	d02b      	beq.n	80119c2 <_malloc_r+0xd2>
 801196a:	6823      	ldr	r3, [r4, #0]
 801196c:	442b      	add	r3, r5
 801196e:	6023      	str	r3, [r4, #0]
 8011970:	e00e      	b.n	8011990 <_malloc_r+0xa0>
 8011972:	6822      	ldr	r2, [r4, #0]
 8011974:	1b52      	subs	r2, r2, r5
 8011976:	d41e      	bmi.n	80119b6 <_malloc_r+0xc6>
 8011978:	2a0b      	cmp	r2, #11
 801197a:	d916      	bls.n	80119aa <_malloc_r+0xba>
 801197c:	1961      	adds	r1, r4, r5
 801197e:	42a3      	cmp	r3, r4
 8011980:	6025      	str	r5, [r4, #0]
 8011982:	bf18      	it	ne
 8011984:	6059      	strne	r1, [r3, #4]
 8011986:	6863      	ldr	r3, [r4, #4]
 8011988:	bf08      	it	eq
 801198a:	6031      	streq	r1, [r6, #0]
 801198c:	5162      	str	r2, [r4, r5]
 801198e:	604b      	str	r3, [r1, #4]
 8011990:	4638      	mov	r0, r7
 8011992:	f104 060b 	add.w	r6, r4, #11
 8011996:	f003 f965 	bl	8014c64 <__malloc_unlock>
 801199a:	f026 0607 	bic.w	r6, r6, #7
 801199e:	1d23      	adds	r3, r4, #4
 80119a0:	1af2      	subs	r2, r6, r3
 80119a2:	d0b6      	beq.n	8011912 <_malloc_r+0x22>
 80119a4:	1b9b      	subs	r3, r3, r6
 80119a6:	50a3      	str	r3, [r4, r2]
 80119a8:	e7b3      	b.n	8011912 <_malloc_r+0x22>
 80119aa:	6862      	ldr	r2, [r4, #4]
 80119ac:	42a3      	cmp	r3, r4
 80119ae:	bf0c      	ite	eq
 80119b0:	6032      	streq	r2, [r6, #0]
 80119b2:	605a      	strne	r2, [r3, #4]
 80119b4:	e7ec      	b.n	8011990 <_malloc_r+0xa0>
 80119b6:	4623      	mov	r3, r4
 80119b8:	6864      	ldr	r4, [r4, #4]
 80119ba:	e7b2      	b.n	8011922 <_malloc_r+0x32>
 80119bc:	4634      	mov	r4, r6
 80119be:	6876      	ldr	r6, [r6, #4]
 80119c0:	e7b9      	b.n	8011936 <_malloc_r+0x46>
 80119c2:	230c      	movs	r3, #12
 80119c4:	603b      	str	r3, [r7, #0]
 80119c6:	4638      	mov	r0, r7
 80119c8:	f003 f94c 	bl	8014c64 <__malloc_unlock>
 80119cc:	e7a1      	b.n	8011912 <_malloc_r+0x22>
 80119ce:	6025      	str	r5, [r4, #0]
 80119d0:	e7de      	b.n	8011990 <_malloc_r+0xa0>
 80119d2:	bf00      	nop
 80119d4:	2000270c 	.word	0x2000270c

080119d8 <__cvt>:
 80119d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80119dc:	ec55 4b10 	vmov	r4, r5, d0
 80119e0:	2d00      	cmp	r5, #0
 80119e2:	460e      	mov	r6, r1
 80119e4:	4619      	mov	r1, r3
 80119e6:	462b      	mov	r3, r5
 80119e8:	bfbb      	ittet	lt
 80119ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80119ee:	461d      	movlt	r5, r3
 80119f0:	2300      	movge	r3, #0
 80119f2:	232d      	movlt	r3, #45	; 0x2d
 80119f4:	700b      	strb	r3, [r1, #0]
 80119f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80119fc:	4691      	mov	r9, r2
 80119fe:	f023 0820 	bic.w	r8, r3, #32
 8011a02:	bfbc      	itt	lt
 8011a04:	4622      	movlt	r2, r4
 8011a06:	4614      	movlt	r4, r2
 8011a08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011a0c:	d005      	beq.n	8011a1a <__cvt+0x42>
 8011a0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011a12:	d100      	bne.n	8011a16 <__cvt+0x3e>
 8011a14:	3601      	adds	r6, #1
 8011a16:	2102      	movs	r1, #2
 8011a18:	e000      	b.n	8011a1c <__cvt+0x44>
 8011a1a:	2103      	movs	r1, #3
 8011a1c:	ab03      	add	r3, sp, #12
 8011a1e:	9301      	str	r3, [sp, #4]
 8011a20:	ab02      	add	r3, sp, #8
 8011a22:	9300      	str	r3, [sp, #0]
 8011a24:	ec45 4b10 	vmov	d0, r4, r5
 8011a28:	4653      	mov	r3, sl
 8011a2a:	4632      	mov	r2, r6
 8011a2c:	f001 fec4 	bl	80137b8 <_dtoa_r>
 8011a30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011a34:	4607      	mov	r7, r0
 8011a36:	d102      	bne.n	8011a3e <__cvt+0x66>
 8011a38:	f019 0f01 	tst.w	r9, #1
 8011a3c:	d022      	beq.n	8011a84 <__cvt+0xac>
 8011a3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011a42:	eb07 0906 	add.w	r9, r7, r6
 8011a46:	d110      	bne.n	8011a6a <__cvt+0x92>
 8011a48:	783b      	ldrb	r3, [r7, #0]
 8011a4a:	2b30      	cmp	r3, #48	; 0x30
 8011a4c:	d10a      	bne.n	8011a64 <__cvt+0x8c>
 8011a4e:	2200      	movs	r2, #0
 8011a50:	2300      	movs	r3, #0
 8011a52:	4620      	mov	r0, r4
 8011a54:	4629      	mov	r1, r5
 8011a56:	f7ef f84f 	bl	8000af8 <__aeabi_dcmpeq>
 8011a5a:	b918      	cbnz	r0, 8011a64 <__cvt+0x8c>
 8011a5c:	f1c6 0601 	rsb	r6, r6, #1
 8011a60:	f8ca 6000 	str.w	r6, [sl]
 8011a64:	f8da 3000 	ldr.w	r3, [sl]
 8011a68:	4499      	add	r9, r3
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	4620      	mov	r0, r4
 8011a70:	4629      	mov	r1, r5
 8011a72:	f7ef f841 	bl	8000af8 <__aeabi_dcmpeq>
 8011a76:	b108      	cbz	r0, 8011a7c <__cvt+0xa4>
 8011a78:	f8cd 900c 	str.w	r9, [sp, #12]
 8011a7c:	2230      	movs	r2, #48	; 0x30
 8011a7e:	9b03      	ldr	r3, [sp, #12]
 8011a80:	454b      	cmp	r3, r9
 8011a82:	d307      	bcc.n	8011a94 <__cvt+0xbc>
 8011a84:	9b03      	ldr	r3, [sp, #12]
 8011a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a88:	1bdb      	subs	r3, r3, r7
 8011a8a:	4638      	mov	r0, r7
 8011a8c:	6013      	str	r3, [r2, #0]
 8011a8e:	b004      	add	sp, #16
 8011a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a94:	1c59      	adds	r1, r3, #1
 8011a96:	9103      	str	r1, [sp, #12]
 8011a98:	701a      	strb	r2, [r3, #0]
 8011a9a:	e7f0      	b.n	8011a7e <__cvt+0xa6>

08011a9c <__exponent>:
 8011a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2900      	cmp	r1, #0
 8011aa2:	bfb8      	it	lt
 8011aa4:	4249      	neglt	r1, r1
 8011aa6:	f803 2b02 	strb.w	r2, [r3], #2
 8011aaa:	bfb4      	ite	lt
 8011aac:	222d      	movlt	r2, #45	; 0x2d
 8011aae:	222b      	movge	r2, #43	; 0x2b
 8011ab0:	2909      	cmp	r1, #9
 8011ab2:	7042      	strb	r2, [r0, #1]
 8011ab4:	dd2a      	ble.n	8011b0c <__exponent+0x70>
 8011ab6:	f10d 0407 	add.w	r4, sp, #7
 8011aba:	46a4      	mov	ip, r4
 8011abc:	270a      	movs	r7, #10
 8011abe:	46a6      	mov	lr, r4
 8011ac0:	460a      	mov	r2, r1
 8011ac2:	fb91 f6f7 	sdiv	r6, r1, r7
 8011ac6:	fb07 1516 	mls	r5, r7, r6, r1
 8011aca:	3530      	adds	r5, #48	; 0x30
 8011acc:	2a63      	cmp	r2, #99	; 0x63
 8011ace:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011ad2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011ad6:	4631      	mov	r1, r6
 8011ad8:	dcf1      	bgt.n	8011abe <__exponent+0x22>
 8011ada:	3130      	adds	r1, #48	; 0x30
 8011adc:	f1ae 0502 	sub.w	r5, lr, #2
 8011ae0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011ae4:	1c44      	adds	r4, r0, #1
 8011ae6:	4629      	mov	r1, r5
 8011ae8:	4561      	cmp	r1, ip
 8011aea:	d30a      	bcc.n	8011b02 <__exponent+0x66>
 8011aec:	f10d 0209 	add.w	r2, sp, #9
 8011af0:	eba2 020e 	sub.w	r2, r2, lr
 8011af4:	4565      	cmp	r5, ip
 8011af6:	bf88      	it	hi
 8011af8:	2200      	movhi	r2, #0
 8011afa:	4413      	add	r3, r2
 8011afc:	1a18      	subs	r0, r3, r0
 8011afe:	b003      	add	sp, #12
 8011b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011b0a:	e7ed      	b.n	8011ae8 <__exponent+0x4c>
 8011b0c:	2330      	movs	r3, #48	; 0x30
 8011b0e:	3130      	adds	r1, #48	; 0x30
 8011b10:	7083      	strb	r3, [r0, #2]
 8011b12:	70c1      	strb	r1, [r0, #3]
 8011b14:	1d03      	adds	r3, r0, #4
 8011b16:	e7f1      	b.n	8011afc <__exponent+0x60>

08011b18 <_printf_float>:
 8011b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1c:	ed2d 8b02 	vpush	{d8}
 8011b20:	b08d      	sub	sp, #52	; 0x34
 8011b22:	460c      	mov	r4, r1
 8011b24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011b28:	4616      	mov	r6, r2
 8011b2a:	461f      	mov	r7, r3
 8011b2c:	4605      	mov	r5, r0
 8011b2e:	f003 f863 	bl	8014bf8 <_localeconv_r>
 8011b32:	f8d0 a000 	ldr.w	sl, [r0]
 8011b36:	4650      	mov	r0, sl
 8011b38:	f7ee fb62 	bl	8000200 <strlen>
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8011b40:	6823      	ldr	r3, [r4, #0]
 8011b42:	9305      	str	r3, [sp, #20]
 8011b44:	f8d8 3000 	ldr.w	r3, [r8]
 8011b48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011b4c:	3307      	adds	r3, #7
 8011b4e:	f023 0307 	bic.w	r3, r3, #7
 8011b52:	f103 0208 	add.w	r2, r3, #8
 8011b56:	f8c8 2000 	str.w	r2, [r8]
 8011b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011b62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011b66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011b6a:	9307      	str	r3, [sp, #28]
 8011b6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8011b70:	ee08 0a10 	vmov	s16, r0
 8011b74:	4b9f      	ldr	r3, [pc, #636]	; (8011df4 <_printf_float+0x2dc>)
 8011b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b7e:	f7ee ffed 	bl	8000b5c <__aeabi_dcmpun>
 8011b82:	bb88      	cbnz	r0, 8011be8 <_printf_float+0xd0>
 8011b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b88:	4b9a      	ldr	r3, [pc, #616]	; (8011df4 <_printf_float+0x2dc>)
 8011b8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b8e:	f7ee ffc7 	bl	8000b20 <__aeabi_dcmple>
 8011b92:	bb48      	cbnz	r0, 8011be8 <_printf_float+0xd0>
 8011b94:	2200      	movs	r2, #0
 8011b96:	2300      	movs	r3, #0
 8011b98:	4640      	mov	r0, r8
 8011b9a:	4649      	mov	r1, r9
 8011b9c:	f7ee ffb6 	bl	8000b0c <__aeabi_dcmplt>
 8011ba0:	b110      	cbz	r0, 8011ba8 <_printf_float+0x90>
 8011ba2:	232d      	movs	r3, #45	; 0x2d
 8011ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ba8:	4b93      	ldr	r3, [pc, #588]	; (8011df8 <_printf_float+0x2e0>)
 8011baa:	4894      	ldr	r0, [pc, #592]	; (8011dfc <_printf_float+0x2e4>)
 8011bac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011bb0:	bf94      	ite	ls
 8011bb2:	4698      	movls	r8, r3
 8011bb4:	4680      	movhi	r8, r0
 8011bb6:	2303      	movs	r3, #3
 8011bb8:	6123      	str	r3, [r4, #16]
 8011bba:	9b05      	ldr	r3, [sp, #20]
 8011bbc:	f023 0204 	bic.w	r2, r3, #4
 8011bc0:	6022      	str	r2, [r4, #0]
 8011bc2:	f04f 0900 	mov.w	r9, #0
 8011bc6:	9700      	str	r7, [sp, #0]
 8011bc8:	4633      	mov	r3, r6
 8011bca:	aa0b      	add	r2, sp, #44	; 0x2c
 8011bcc:	4621      	mov	r1, r4
 8011bce:	4628      	mov	r0, r5
 8011bd0:	f000 f9d8 	bl	8011f84 <_printf_common>
 8011bd4:	3001      	adds	r0, #1
 8011bd6:	f040 8090 	bne.w	8011cfa <_printf_float+0x1e2>
 8011bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bde:	b00d      	add	sp, #52	; 0x34
 8011be0:	ecbd 8b02 	vpop	{d8}
 8011be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be8:	4642      	mov	r2, r8
 8011bea:	464b      	mov	r3, r9
 8011bec:	4640      	mov	r0, r8
 8011bee:	4649      	mov	r1, r9
 8011bf0:	f7ee ffb4 	bl	8000b5c <__aeabi_dcmpun>
 8011bf4:	b140      	cbz	r0, 8011c08 <_printf_float+0xf0>
 8011bf6:	464b      	mov	r3, r9
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	bfbc      	itt	lt
 8011bfc:	232d      	movlt	r3, #45	; 0x2d
 8011bfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011c02:	487f      	ldr	r0, [pc, #508]	; (8011e00 <_printf_float+0x2e8>)
 8011c04:	4b7f      	ldr	r3, [pc, #508]	; (8011e04 <_printf_float+0x2ec>)
 8011c06:	e7d1      	b.n	8011bac <_printf_float+0x94>
 8011c08:	6863      	ldr	r3, [r4, #4]
 8011c0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011c0e:	9206      	str	r2, [sp, #24]
 8011c10:	1c5a      	adds	r2, r3, #1
 8011c12:	d13f      	bne.n	8011c94 <_printf_float+0x17c>
 8011c14:	2306      	movs	r3, #6
 8011c16:	6063      	str	r3, [r4, #4]
 8011c18:	9b05      	ldr	r3, [sp, #20]
 8011c1a:	6861      	ldr	r1, [r4, #4]
 8011c1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011c20:	2300      	movs	r3, #0
 8011c22:	9303      	str	r3, [sp, #12]
 8011c24:	ab0a      	add	r3, sp, #40	; 0x28
 8011c26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011c2a:	ab09      	add	r3, sp, #36	; 0x24
 8011c2c:	ec49 8b10 	vmov	d0, r8, r9
 8011c30:	9300      	str	r3, [sp, #0]
 8011c32:	6022      	str	r2, [r4, #0]
 8011c34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011c38:	4628      	mov	r0, r5
 8011c3a:	f7ff fecd 	bl	80119d8 <__cvt>
 8011c3e:	9b06      	ldr	r3, [sp, #24]
 8011c40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011c42:	2b47      	cmp	r3, #71	; 0x47
 8011c44:	4680      	mov	r8, r0
 8011c46:	d108      	bne.n	8011c5a <_printf_float+0x142>
 8011c48:	1cc8      	adds	r0, r1, #3
 8011c4a:	db02      	blt.n	8011c52 <_printf_float+0x13a>
 8011c4c:	6863      	ldr	r3, [r4, #4]
 8011c4e:	4299      	cmp	r1, r3
 8011c50:	dd41      	ble.n	8011cd6 <_printf_float+0x1be>
 8011c52:	f1ab 0b02 	sub.w	fp, fp, #2
 8011c56:	fa5f fb8b 	uxtb.w	fp, fp
 8011c5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011c5e:	d820      	bhi.n	8011ca2 <_printf_float+0x18a>
 8011c60:	3901      	subs	r1, #1
 8011c62:	465a      	mov	r2, fp
 8011c64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011c68:	9109      	str	r1, [sp, #36]	; 0x24
 8011c6a:	f7ff ff17 	bl	8011a9c <__exponent>
 8011c6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c70:	1813      	adds	r3, r2, r0
 8011c72:	2a01      	cmp	r2, #1
 8011c74:	4681      	mov	r9, r0
 8011c76:	6123      	str	r3, [r4, #16]
 8011c78:	dc02      	bgt.n	8011c80 <_printf_float+0x168>
 8011c7a:	6822      	ldr	r2, [r4, #0]
 8011c7c:	07d2      	lsls	r2, r2, #31
 8011c7e:	d501      	bpl.n	8011c84 <_printf_float+0x16c>
 8011c80:	3301      	adds	r3, #1
 8011c82:	6123      	str	r3, [r4, #16]
 8011c84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d09c      	beq.n	8011bc6 <_printf_float+0xae>
 8011c8c:	232d      	movs	r3, #45	; 0x2d
 8011c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c92:	e798      	b.n	8011bc6 <_printf_float+0xae>
 8011c94:	9a06      	ldr	r2, [sp, #24]
 8011c96:	2a47      	cmp	r2, #71	; 0x47
 8011c98:	d1be      	bne.n	8011c18 <_printf_float+0x100>
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d1bc      	bne.n	8011c18 <_printf_float+0x100>
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	e7b9      	b.n	8011c16 <_printf_float+0xfe>
 8011ca2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011ca6:	d118      	bne.n	8011cda <_printf_float+0x1c2>
 8011ca8:	2900      	cmp	r1, #0
 8011caa:	6863      	ldr	r3, [r4, #4]
 8011cac:	dd0b      	ble.n	8011cc6 <_printf_float+0x1ae>
 8011cae:	6121      	str	r1, [r4, #16]
 8011cb0:	b913      	cbnz	r3, 8011cb8 <_printf_float+0x1a0>
 8011cb2:	6822      	ldr	r2, [r4, #0]
 8011cb4:	07d0      	lsls	r0, r2, #31
 8011cb6:	d502      	bpl.n	8011cbe <_printf_float+0x1a6>
 8011cb8:	3301      	adds	r3, #1
 8011cba:	440b      	add	r3, r1
 8011cbc:	6123      	str	r3, [r4, #16]
 8011cbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8011cc0:	f04f 0900 	mov.w	r9, #0
 8011cc4:	e7de      	b.n	8011c84 <_printf_float+0x16c>
 8011cc6:	b913      	cbnz	r3, 8011cce <_printf_float+0x1b6>
 8011cc8:	6822      	ldr	r2, [r4, #0]
 8011cca:	07d2      	lsls	r2, r2, #31
 8011ccc:	d501      	bpl.n	8011cd2 <_printf_float+0x1ba>
 8011cce:	3302      	adds	r3, #2
 8011cd0:	e7f4      	b.n	8011cbc <_printf_float+0x1a4>
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	e7f2      	b.n	8011cbc <_printf_float+0x1a4>
 8011cd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cdc:	4299      	cmp	r1, r3
 8011cde:	db05      	blt.n	8011cec <_printf_float+0x1d4>
 8011ce0:	6823      	ldr	r3, [r4, #0]
 8011ce2:	6121      	str	r1, [r4, #16]
 8011ce4:	07d8      	lsls	r0, r3, #31
 8011ce6:	d5ea      	bpl.n	8011cbe <_printf_float+0x1a6>
 8011ce8:	1c4b      	adds	r3, r1, #1
 8011cea:	e7e7      	b.n	8011cbc <_printf_float+0x1a4>
 8011cec:	2900      	cmp	r1, #0
 8011cee:	bfd4      	ite	le
 8011cf0:	f1c1 0202 	rsble	r2, r1, #2
 8011cf4:	2201      	movgt	r2, #1
 8011cf6:	4413      	add	r3, r2
 8011cf8:	e7e0      	b.n	8011cbc <_printf_float+0x1a4>
 8011cfa:	6823      	ldr	r3, [r4, #0]
 8011cfc:	055a      	lsls	r2, r3, #21
 8011cfe:	d407      	bmi.n	8011d10 <_printf_float+0x1f8>
 8011d00:	6923      	ldr	r3, [r4, #16]
 8011d02:	4642      	mov	r2, r8
 8011d04:	4631      	mov	r1, r6
 8011d06:	4628      	mov	r0, r5
 8011d08:	47b8      	blx	r7
 8011d0a:	3001      	adds	r0, #1
 8011d0c:	d12c      	bne.n	8011d68 <_printf_float+0x250>
 8011d0e:	e764      	b.n	8011bda <_printf_float+0xc2>
 8011d10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011d14:	f240 80e0 	bls.w	8011ed8 <_printf_float+0x3c0>
 8011d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	2300      	movs	r3, #0
 8011d20:	f7ee feea 	bl	8000af8 <__aeabi_dcmpeq>
 8011d24:	2800      	cmp	r0, #0
 8011d26:	d034      	beq.n	8011d92 <_printf_float+0x27a>
 8011d28:	4a37      	ldr	r2, [pc, #220]	; (8011e08 <_printf_float+0x2f0>)
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	4631      	mov	r1, r6
 8011d2e:	4628      	mov	r0, r5
 8011d30:	47b8      	blx	r7
 8011d32:	3001      	adds	r0, #1
 8011d34:	f43f af51 	beq.w	8011bda <_printf_float+0xc2>
 8011d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	db02      	blt.n	8011d46 <_printf_float+0x22e>
 8011d40:	6823      	ldr	r3, [r4, #0]
 8011d42:	07d8      	lsls	r0, r3, #31
 8011d44:	d510      	bpl.n	8011d68 <_printf_float+0x250>
 8011d46:	ee18 3a10 	vmov	r3, s16
 8011d4a:	4652      	mov	r2, sl
 8011d4c:	4631      	mov	r1, r6
 8011d4e:	4628      	mov	r0, r5
 8011d50:	47b8      	blx	r7
 8011d52:	3001      	adds	r0, #1
 8011d54:	f43f af41 	beq.w	8011bda <_printf_float+0xc2>
 8011d58:	f04f 0800 	mov.w	r8, #0
 8011d5c:	f104 091a 	add.w	r9, r4, #26
 8011d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d62:	3b01      	subs	r3, #1
 8011d64:	4543      	cmp	r3, r8
 8011d66:	dc09      	bgt.n	8011d7c <_printf_float+0x264>
 8011d68:	6823      	ldr	r3, [r4, #0]
 8011d6a:	079b      	lsls	r3, r3, #30
 8011d6c:	f100 8105 	bmi.w	8011f7a <_printf_float+0x462>
 8011d70:	68e0      	ldr	r0, [r4, #12]
 8011d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d74:	4298      	cmp	r0, r3
 8011d76:	bfb8      	it	lt
 8011d78:	4618      	movlt	r0, r3
 8011d7a:	e730      	b.n	8011bde <_printf_float+0xc6>
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	464a      	mov	r2, r9
 8011d80:	4631      	mov	r1, r6
 8011d82:	4628      	mov	r0, r5
 8011d84:	47b8      	blx	r7
 8011d86:	3001      	adds	r0, #1
 8011d88:	f43f af27 	beq.w	8011bda <_printf_float+0xc2>
 8011d8c:	f108 0801 	add.w	r8, r8, #1
 8011d90:	e7e6      	b.n	8011d60 <_printf_float+0x248>
 8011d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	dc39      	bgt.n	8011e0c <_printf_float+0x2f4>
 8011d98:	4a1b      	ldr	r2, [pc, #108]	; (8011e08 <_printf_float+0x2f0>)
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	4631      	mov	r1, r6
 8011d9e:	4628      	mov	r0, r5
 8011da0:	47b8      	blx	r7
 8011da2:	3001      	adds	r0, #1
 8011da4:	f43f af19 	beq.w	8011bda <_printf_float+0xc2>
 8011da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011dac:	4313      	orrs	r3, r2
 8011dae:	d102      	bne.n	8011db6 <_printf_float+0x29e>
 8011db0:	6823      	ldr	r3, [r4, #0]
 8011db2:	07d9      	lsls	r1, r3, #31
 8011db4:	d5d8      	bpl.n	8011d68 <_printf_float+0x250>
 8011db6:	ee18 3a10 	vmov	r3, s16
 8011dba:	4652      	mov	r2, sl
 8011dbc:	4631      	mov	r1, r6
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	47b8      	blx	r7
 8011dc2:	3001      	adds	r0, #1
 8011dc4:	f43f af09 	beq.w	8011bda <_printf_float+0xc2>
 8011dc8:	f04f 0900 	mov.w	r9, #0
 8011dcc:	f104 0a1a 	add.w	sl, r4, #26
 8011dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dd2:	425b      	negs	r3, r3
 8011dd4:	454b      	cmp	r3, r9
 8011dd6:	dc01      	bgt.n	8011ddc <_printf_float+0x2c4>
 8011dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dda:	e792      	b.n	8011d02 <_printf_float+0x1ea>
 8011ddc:	2301      	movs	r3, #1
 8011dde:	4652      	mov	r2, sl
 8011de0:	4631      	mov	r1, r6
 8011de2:	4628      	mov	r0, r5
 8011de4:	47b8      	blx	r7
 8011de6:	3001      	adds	r0, #1
 8011de8:	f43f aef7 	beq.w	8011bda <_printf_float+0xc2>
 8011dec:	f109 0901 	add.w	r9, r9, #1
 8011df0:	e7ee      	b.n	8011dd0 <_printf_float+0x2b8>
 8011df2:	bf00      	nop
 8011df4:	7fefffff 	.word	0x7fefffff
 8011df8:	080163d4 	.word	0x080163d4
 8011dfc:	080163d8 	.word	0x080163d8
 8011e00:	080163e0 	.word	0x080163e0
 8011e04:	080163dc 	.word	0x080163dc
 8011e08:	080163e4 	.word	0x080163e4
 8011e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011e10:	429a      	cmp	r2, r3
 8011e12:	bfa8      	it	ge
 8011e14:	461a      	movge	r2, r3
 8011e16:	2a00      	cmp	r2, #0
 8011e18:	4691      	mov	r9, r2
 8011e1a:	dc37      	bgt.n	8011e8c <_printf_float+0x374>
 8011e1c:	f04f 0b00 	mov.w	fp, #0
 8011e20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e24:	f104 021a 	add.w	r2, r4, #26
 8011e28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011e2a:	9305      	str	r3, [sp, #20]
 8011e2c:	eba3 0309 	sub.w	r3, r3, r9
 8011e30:	455b      	cmp	r3, fp
 8011e32:	dc33      	bgt.n	8011e9c <_printf_float+0x384>
 8011e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	db3b      	blt.n	8011eb4 <_printf_float+0x39c>
 8011e3c:	6823      	ldr	r3, [r4, #0]
 8011e3e:	07da      	lsls	r2, r3, #31
 8011e40:	d438      	bmi.n	8011eb4 <_printf_float+0x39c>
 8011e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e44:	9a05      	ldr	r2, [sp, #20]
 8011e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e48:	1a9a      	subs	r2, r3, r2
 8011e4a:	eba3 0901 	sub.w	r9, r3, r1
 8011e4e:	4591      	cmp	r9, r2
 8011e50:	bfa8      	it	ge
 8011e52:	4691      	movge	r9, r2
 8011e54:	f1b9 0f00 	cmp.w	r9, #0
 8011e58:	dc35      	bgt.n	8011ec6 <_printf_float+0x3ae>
 8011e5a:	f04f 0800 	mov.w	r8, #0
 8011e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011e62:	f104 0a1a 	add.w	sl, r4, #26
 8011e66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e6a:	1a9b      	subs	r3, r3, r2
 8011e6c:	eba3 0309 	sub.w	r3, r3, r9
 8011e70:	4543      	cmp	r3, r8
 8011e72:	f77f af79 	ble.w	8011d68 <_printf_float+0x250>
 8011e76:	2301      	movs	r3, #1
 8011e78:	4652      	mov	r2, sl
 8011e7a:	4631      	mov	r1, r6
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	47b8      	blx	r7
 8011e80:	3001      	adds	r0, #1
 8011e82:	f43f aeaa 	beq.w	8011bda <_printf_float+0xc2>
 8011e86:	f108 0801 	add.w	r8, r8, #1
 8011e8a:	e7ec      	b.n	8011e66 <_printf_float+0x34e>
 8011e8c:	4613      	mov	r3, r2
 8011e8e:	4631      	mov	r1, r6
 8011e90:	4642      	mov	r2, r8
 8011e92:	4628      	mov	r0, r5
 8011e94:	47b8      	blx	r7
 8011e96:	3001      	adds	r0, #1
 8011e98:	d1c0      	bne.n	8011e1c <_printf_float+0x304>
 8011e9a:	e69e      	b.n	8011bda <_printf_float+0xc2>
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	4631      	mov	r1, r6
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	9205      	str	r2, [sp, #20]
 8011ea4:	47b8      	blx	r7
 8011ea6:	3001      	adds	r0, #1
 8011ea8:	f43f ae97 	beq.w	8011bda <_printf_float+0xc2>
 8011eac:	9a05      	ldr	r2, [sp, #20]
 8011eae:	f10b 0b01 	add.w	fp, fp, #1
 8011eb2:	e7b9      	b.n	8011e28 <_printf_float+0x310>
 8011eb4:	ee18 3a10 	vmov	r3, s16
 8011eb8:	4652      	mov	r2, sl
 8011eba:	4631      	mov	r1, r6
 8011ebc:	4628      	mov	r0, r5
 8011ebe:	47b8      	blx	r7
 8011ec0:	3001      	adds	r0, #1
 8011ec2:	d1be      	bne.n	8011e42 <_printf_float+0x32a>
 8011ec4:	e689      	b.n	8011bda <_printf_float+0xc2>
 8011ec6:	9a05      	ldr	r2, [sp, #20]
 8011ec8:	464b      	mov	r3, r9
 8011eca:	4442      	add	r2, r8
 8011ecc:	4631      	mov	r1, r6
 8011ece:	4628      	mov	r0, r5
 8011ed0:	47b8      	blx	r7
 8011ed2:	3001      	adds	r0, #1
 8011ed4:	d1c1      	bne.n	8011e5a <_printf_float+0x342>
 8011ed6:	e680      	b.n	8011bda <_printf_float+0xc2>
 8011ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011eda:	2a01      	cmp	r2, #1
 8011edc:	dc01      	bgt.n	8011ee2 <_printf_float+0x3ca>
 8011ede:	07db      	lsls	r3, r3, #31
 8011ee0:	d538      	bpl.n	8011f54 <_printf_float+0x43c>
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	4642      	mov	r2, r8
 8011ee6:	4631      	mov	r1, r6
 8011ee8:	4628      	mov	r0, r5
 8011eea:	47b8      	blx	r7
 8011eec:	3001      	adds	r0, #1
 8011eee:	f43f ae74 	beq.w	8011bda <_printf_float+0xc2>
 8011ef2:	ee18 3a10 	vmov	r3, s16
 8011ef6:	4652      	mov	r2, sl
 8011ef8:	4631      	mov	r1, r6
 8011efa:	4628      	mov	r0, r5
 8011efc:	47b8      	blx	r7
 8011efe:	3001      	adds	r0, #1
 8011f00:	f43f ae6b 	beq.w	8011bda <_printf_float+0xc2>
 8011f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011f08:	2200      	movs	r2, #0
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	f7ee fdf4 	bl	8000af8 <__aeabi_dcmpeq>
 8011f10:	b9d8      	cbnz	r0, 8011f4a <_printf_float+0x432>
 8011f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f14:	f108 0201 	add.w	r2, r8, #1
 8011f18:	3b01      	subs	r3, #1
 8011f1a:	4631      	mov	r1, r6
 8011f1c:	4628      	mov	r0, r5
 8011f1e:	47b8      	blx	r7
 8011f20:	3001      	adds	r0, #1
 8011f22:	d10e      	bne.n	8011f42 <_printf_float+0x42a>
 8011f24:	e659      	b.n	8011bda <_printf_float+0xc2>
 8011f26:	2301      	movs	r3, #1
 8011f28:	4652      	mov	r2, sl
 8011f2a:	4631      	mov	r1, r6
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	47b8      	blx	r7
 8011f30:	3001      	adds	r0, #1
 8011f32:	f43f ae52 	beq.w	8011bda <_printf_float+0xc2>
 8011f36:	f108 0801 	add.w	r8, r8, #1
 8011f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f3c:	3b01      	subs	r3, #1
 8011f3e:	4543      	cmp	r3, r8
 8011f40:	dcf1      	bgt.n	8011f26 <_printf_float+0x40e>
 8011f42:	464b      	mov	r3, r9
 8011f44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011f48:	e6dc      	b.n	8011d04 <_printf_float+0x1ec>
 8011f4a:	f04f 0800 	mov.w	r8, #0
 8011f4e:	f104 0a1a 	add.w	sl, r4, #26
 8011f52:	e7f2      	b.n	8011f3a <_printf_float+0x422>
 8011f54:	2301      	movs	r3, #1
 8011f56:	4642      	mov	r2, r8
 8011f58:	e7df      	b.n	8011f1a <_printf_float+0x402>
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	464a      	mov	r2, r9
 8011f5e:	4631      	mov	r1, r6
 8011f60:	4628      	mov	r0, r5
 8011f62:	47b8      	blx	r7
 8011f64:	3001      	adds	r0, #1
 8011f66:	f43f ae38 	beq.w	8011bda <_printf_float+0xc2>
 8011f6a:	f108 0801 	add.w	r8, r8, #1
 8011f6e:	68e3      	ldr	r3, [r4, #12]
 8011f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f72:	1a5b      	subs	r3, r3, r1
 8011f74:	4543      	cmp	r3, r8
 8011f76:	dcf0      	bgt.n	8011f5a <_printf_float+0x442>
 8011f78:	e6fa      	b.n	8011d70 <_printf_float+0x258>
 8011f7a:	f04f 0800 	mov.w	r8, #0
 8011f7e:	f104 0919 	add.w	r9, r4, #25
 8011f82:	e7f4      	b.n	8011f6e <_printf_float+0x456>

08011f84 <_printf_common>:
 8011f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f88:	4616      	mov	r6, r2
 8011f8a:	4699      	mov	r9, r3
 8011f8c:	688a      	ldr	r2, [r1, #8]
 8011f8e:	690b      	ldr	r3, [r1, #16]
 8011f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011f94:	4293      	cmp	r3, r2
 8011f96:	bfb8      	it	lt
 8011f98:	4613      	movlt	r3, r2
 8011f9a:	6033      	str	r3, [r6, #0]
 8011f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011fa0:	4607      	mov	r7, r0
 8011fa2:	460c      	mov	r4, r1
 8011fa4:	b10a      	cbz	r2, 8011faa <_printf_common+0x26>
 8011fa6:	3301      	adds	r3, #1
 8011fa8:	6033      	str	r3, [r6, #0]
 8011faa:	6823      	ldr	r3, [r4, #0]
 8011fac:	0699      	lsls	r1, r3, #26
 8011fae:	bf42      	ittt	mi
 8011fb0:	6833      	ldrmi	r3, [r6, #0]
 8011fb2:	3302      	addmi	r3, #2
 8011fb4:	6033      	strmi	r3, [r6, #0]
 8011fb6:	6825      	ldr	r5, [r4, #0]
 8011fb8:	f015 0506 	ands.w	r5, r5, #6
 8011fbc:	d106      	bne.n	8011fcc <_printf_common+0x48>
 8011fbe:	f104 0a19 	add.w	sl, r4, #25
 8011fc2:	68e3      	ldr	r3, [r4, #12]
 8011fc4:	6832      	ldr	r2, [r6, #0]
 8011fc6:	1a9b      	subs	r3, r3, r2
 8011fc8:	42ab      	cmp	r3, r5
 8011fca:	dc26      	bgt.n	801201a <_printf_common+0x96>
 8011fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011fd0:	1e13      	subs	r3, r2, #0
 8011fd2:	6822      	ldr	r2, [r4, #0]
 8011fd4:	bf18      	it	ne
 8011fd6:	2301      	movne	r3, #1
 8011fd8:	0692      	lsls	r2, r2, #26
 8011fda:	d42b      	bmi.n	8012034 <_printf_common+0xb0>
 8011fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011fe0:	4649      	mov	r1, r9
 8011fe2:	4638      	mov	r0, r7
 8011fe4:	47c0      	blx	r8
 8011fe6:	3001      	adds	r0, #1
 8011fe8:	d01e      	beq.n	8012028 <_printf_common+0xa4>
 8011fea:	6823      	ldr	r3, [r4, #0]
 8011fec:	68e5      	ldr	r5, [r4, #12]
 8011fee:	6832      	ldr	r2, [r6, #0]
 8011ff0:	f003 0306 	and.w	r3, r3, #6
 8011ff4:	2b04      	cmp	r3, #4
 8011ff6:	bf08      	it	eq
 8011ff8:	1aad      	subeq	r5, r5, r2
 8011ffa:	68a3      	ldr	r3, [r4, #8]
 8011ffc:	6922      	ldr	r2, [r4, #16]
 8011ffe:	bf0c      	ite	eq
 8012000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012004:	2500      	movne	r5, #0
 8012006:	4293      	cmp	r3, r2
 8012008:	bfc4      	itt	gt
 801200a:	1a9b      	subgt	r3, r3, r2
 801200c:	18ed      	addgt	r5, r5, r3
 801200e:	2600      	movs	r6, #0
 8012010:	341a      	adds	r4, #26
 8012012:	42b5      	cmp	r5, r6
 8012014:	d11a      	bne.n	801204c <_printf_common+0xc8>
 8012016:	2000      	movs	r0, #0
 8012018:	e008      	b.n	801202c <_printf_common+0xa8>
 801201a:	2301      	movs	r3, #1
 801201c:	4652      	mov	r2, sl
 801201e:	4649      	mov	r1, r9
 8012020:	4638      	mov	r0, r7
 8012022:	47c0      	blx	r8
 8012024:	3001      	adds	r0, #1
 8012026:	d103      	bne.n	8012030 <_printf_common+0xac>
 8012028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801202c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012030:	3501      	adds	r5, #1
 8012032:	e7c6      	b.n	8011fc2 <_printf_common+0x3e>
 8012034:	18e1      	adds	r1, r4, r3
 8012036:	1c5a      	adds	r2, r3, #1
 8012038:	2030      	movs	r0, #48	; 0x30
 801203a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801203e:	4422      	add	r2, r4
 8012040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012048:	3302      	adds	r3, #2
 801204a:	e7c7      	b.n	8011fdc <_printf_common+0x58>
 801204c:	2301      	movs	r3, #1
 801204e:	4622      	mov	r2, r4
 8012050:	4649      	mov	r1, r9
 8012052:	4638      	mov	r0, r7
 8012054:	47c0      	blx	r8
 8012056:	3001      	adds	r0, #1
 8012058:	d0e6      	beq.n	8012028 <_printf_common+0xa4>
 801205a:	3601      	adds	r6, #1
 801205c:	e7d9      	b.n	8012012 <_printf_common+0x8e>
	...

08012060 <_printf_i>:
 8012060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012064:	7e0f      	ldrb	r7, [r1, #24]
 8012066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012068:	2f78      	cmp	r7, #120	; 0x78
 801206a:	4691      	mov	r9, r2
 801206c:	4680      	mov	r8, r0
 801206e:	460c      	mov	r4, r1
 8012070:	469a      	mov	sl, r3
 8012072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012076:	d807      	bhi.n	8012088 <_printf_i+0x28>
 8012078:	2f62      	cmp	r7, #98	; 0x62
 801207a:	d80a      	bhi.n	8012092 <_printf_i+0x32>
 801207c:	2f00      	cmp	r7, #0
 801207e:	f000 80d8 	beq.w	8012232 <_printf_i+0x1d2>
 8012082:	2f58      	cmp	r7, #88	; 0x58
 8012084:	f000 80a3 	beq.w	80121ce <_printf_i+0x16e>
 8012088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801208c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012090:	e03a      	b.n	8012108 <_printf_i+0xa8>
 8012092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012096:	2b15      	cmp	r3, #21
 8012098:	d8f6      	bhi.n	8012088 <_printf_i+0x28>
 801209a:	a101      	add	r1, pc, #4	; (adr r1, 80120a0 <_printf_i+0x40>)
 801209c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120a0:	080120f9 	.word	0x080120f9
 80120a4:	0801210d 	.word	0x0801210d
 80120a8:	08012089 	.word	0x08012089
 80120ac:	08012089 	.word	0x08012089
 80120b0:	08012089 	.word	0x08012089
 80120b4:	08012089 	.word	0x08012089
 80120b8:	0801210d 	.word	0x0801210d
 80120bc:	08012089 	.word	0x08012089
 80120c0:	08012089 	.word	0x08012089
 80120c4:	08012089 	.word	0x08012089
 80120c8:	08012089 	.word	0x08012089
 80120cc:	08012219 	.word	0x08012219
 80120d0:	0801213d 	.word	0x0801213d
 80120d4:	080121fb 	.word	0x080121fb
 80120d8:	08012089 	.word	0x08012089
 80120dc:	08012089 	.word	0x08012089
 80120e0:	0801223b 	.word	0x0801223b
 80120e4:	08012089 	.word	0x08012089
 80120e8:	0801213d 	.word	0x0801213d
 80120ec:	08012089 	.word	0x08012089
 80120f0:	08012089 	.word	0x08012089
 80120f4:	08012203 	.word	0x08012203
 80120f8:	682b      	ldr	r3, [r5, #0]
 80120fa:	1d1a      	adds	r2, r3, #4
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	602a      	str	r2, [r5, #0]
 8012100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012108:	2301      	movs	r3, #1
 801210a:	e0a3      	b.n	8012254 <_printf_i+0x1f4>
 801210c:	6820      	ldr	r0, [r4, #0]
 801210e:	6829      	ldr	r1, [r5, #0]
 8012110:	0606      	lsls	r6, r0, #24
 8012112:	f101 0304 	add.w	r3, r1, #4
 8012116:	d50a      	bpl.n	801212e <_printf_i+0xce>
 8012118:	680e      	ldr	r6, [r1, #0]
 801211a:	602b      	str	r3, [r5, #0]
 801211c:	2e00      	cmp	r6, #0
 801211e:	da03      	bge.n	8012128 <_printf_i+0xc8>
 8012120:	232d      	movs	r3, #45	; 0x2d
 8012122:	4276      	negs	r6, r6
 8012124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012128:	485e      	ldr	r0, [pc, #376]	; (80122a4 <_printf_i+0x244>)
 801212a:	230a      	movs	r3, #10
 801212c:	e019      	b.n	8012162 <_printf_i+0x102>
 801212e:	680e      	ldr	r6, [r1, #0]
 8012130:	602b      	str	r3, [r5, #0]
 8012132:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012136:	bf18      	it	ne
 8012138:	b236      	sxthne	r6, r6
 801213a:	e7ef      	b.n	801211c <_printf_i+0xbc>
 801213c:	682b      	ldr	r3, [r5, #0]
 801213e:	6820      	ldr	r0, [r4, #0]
 8012140:	1d19      	adds	r1, r3, #4
 8012142:	6029      	str	r1, [r5, #0]
 8012144:	0601      	lsls	r1, r0, #24
 8012146:	d501      	bpl.n	801214c <_printf_i+0xec>
 8012148:	681e      	ldr	r6, [r3, #0]
 801214a:	e002      	b.n	8012152 <_printf_i+0xf2>
 801214c:	0646      	lsls	r6, r0, #25
 801214e:	d5fb      	bpl.n	8012148 <_printf_i+0xe8>
 8012150:	881e      	ldrh	r6, [r3, #0]
 8012152:	4854      	ldr	r0, [pc, #336]	; (80122a4 <_printf_i+0x244>)
 8012154:	2f6f      	cmp	r7, #111	; 0x6f
 8012156:	bf0c      	ite	eq
 8012158:	2308      	moveq	r3, #8
 801215a:	230a      	movne	r3, #10
 801215c:	2100      	movs	r1, #0
 801215e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012162:	6865      	ldr	r5, [r4, #4]
 8012164:	60a5      	str	r5, [r4, #8]
 8012166:	2d00      	cmp	r5, #0
 8012168:	bfa2      	ittt	ge
 801216a:	6821      	ldrge	r1, [r4, #0]
 801216c:	f021 0104 	bicge.w	r1, r1, #4
 8012170:	6021      	strge	r1, [r4, #0]
 8012172:	b90e      	cbnz	r6, 8012178 <_printf_i+0x118>
 8012174:	2d00      	cmp	r5, #0
 8012176:	d04d      	beq.n	8012214 <_printf_i+0x1b4>
 8012178:	4615      	mov	r5, r2
 801217a:	fbb6 f1f3 	udiv	r1, r6, r3
 801217e:	fb03 6711 	mls	r7, r3, r1, r6
 8012182:	5dc7      	ldrb	r7, [r0, r7]
 8012184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012188:	4637      	mov	r7, r6
 801218a:	42bb      	cmp	r3, r7
 801218c:	460e      	mov	r6, r1
 801218e:	d9f4      	bls.n	801217a <_printf_i+0x11a>
 8012190:	2b08      	cmp	r3, #8
 8012192:	d10b      	bne.n	80121ac <_printf_i+0x14c>
 8012194:	6823      	ldr	r3, [r4, #0]
 8012196:	07de      	lsls	r6, r3, #31
 8012198:	d508      	bpl.n	80121ac <_printf_i+0x14c>
 801219a:	6923      	ldr	r3, [r4, #16]
 801219c:	6861      	ldr	r1, [r4, #4]
 801219e:	4299      	cmp	r1, r3
 80121a0:	bfde      	ittt	le
 80121a2:	2330      	movle	r3, #48	; 0x30
 80121a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80121a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80121ac:	1b52      	subs	r2, r2, r5
 80121ae:	6122      	str	r2, [r4, #16]
 80121b0:	f8cd a000 	str.w	sl, [sp]
 80121b4:	464b      	mov	r3, r9
 80121b6:	aa03      	add	r2, sp, #12
 80121b8:	4621      	mov	r1, r4
 80121ba:	4640      	mov	r0, r8
 80121bc:	f7ff fee2 	bl	8011f84 <_printf_common>
 80121c0:	3001      	adds	r0, #1
 80121c2:	d14c      	bne.n	801225e <_printf_i+0x1fe>
 80121c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121c8:	b004      	add	sp, #16
 80121ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121ce:	4835      	ldr	r0, [pc, #212]	; (80122a4 <_printf_i+0x244>)
 80121d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80121d4:	6829      	ldr	r1, [r5, #0]
 80121d6:	6823      	ldr	r3, [r4, #0]
 80121d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80121dc:	6029      	str	r1, [r5, #0]
 80121de:	061d      	lsls	r5, r3, #24
 80121e0:	d514      	bpl.n	801220c <_printf_i+0x1ac>
 80121e2:	07df      	lsls	r7, r3, #31
 80121e4:	bf44      	itt	mi
 80121e6:	f043 0320 	orrmi.w	r3, r3, #32
 80121ea:	6023      	strmi	r3, [r4, #0]
 80121ec:	b91e      	cbnz	r6, 80121f6 <_printf_i+0x196>
 80121ee:	6823      	ldr	r3, [r4, #0]
 80121f0:	f023 0320 	bic.w	r3, r3, #32
 80121f4:	6023      	str	r3, [r4, #0]
 80121f6:	2310      	movs	r3, #16
 80121f8:	e7b0      	b.n	801215c <_printf_i+0xfc>
 80121fa:	6823      	ldr	r3, [r4, #0]
 80121fc:	f043 0320 	orr.w	r3, r3, #32
 8012200:	6023      	str	r3, [r4, #0]
 8012202:	2378      	movs	r3, #120	; 0x78
 8012204:	4828      	ldr	r0, [pc, #160]	; (80122a8 <_printf_i+0x248>)
 8012206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801220a:	e7e3      	b.n	80121d4 <_printf_i+0x174>
 801220c:	0659      	lsls	r1, r3, #25
 801220e:	bf48      	it	mi
 8012210:	b2b6      	uxthmi	r6, r6
 8012212:	e7e6      	b.n	80121e2 <_printf_i+0x182>
 8012214:	4615      	mov	r5, r2
 8012216:	e7bb      	b.n	8012190 <_printf_i+0x130>
 8012218:	682b      	ldr	r3, [r5, #0]
 801221a:	6826      	ldr	r6, [r4, #0]
 801221c:	6961      	ldr	r1, [r4, #20]
 801221e:	1d18      	adds	r0, r3, #4
 8012220:	6028      	str	r0, [r5, #0]
 8012222:	0635      	lsls	r5, r6, #24
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	d501      	bpl.n	801222c <_printf_i+0x1cc>
 8012228:	6019      	str	r1, [r3, #0]
 801222a:	e002      	b.n	8012232 <_printf_i+0x1d2>
 801222c:	0670      	lsls	r0, r6, #25
 801222e:	d5fb      	bpl.n	8012228 <_printf_i+0x1c8>
 8012230:	8019      	strh	r1, [r3, #0]
 8012232:	2300      	movs	r3, #0
 8012234:	6123      	str	r3, [r4, #16]
 8012236:	4615      	mov	r5, r2
 8012238:	e7ba      	b.n	80121b0 <_printf_i+0x150>
 801223a:	682b      	ldr	r3, [r5, #0]
 801223c:	1d1a      	adds	r2, r3, #4
 801223e:	602a      	str	r2, [r5, #0]
 8012240:	681d      	ldr	r5, [r3, #0]
 8012242:	6862      	ldr	r2, [r4, #4]
 8012244:	2100      	movs	r1, #0
 8012246:	4628      	mov	r0, r5
 8012248:	f7ed ffe2 	bl	8000210 <memchr>
 801224c:	b108      	cbz	r0, 8012252 <_printf_i+0x1f2>
 801224e:	1b40      	subs	r0, r0, r5
 8012250:	6060      	str	r0, [r4, #4]
 8012252:	6863      	ldr	r3, [r4, #4]
 8012254:	6123      	str	r3, [r4, #16]
 8012256:	2300      	movs	r3, #0
 8012258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801225c:	e7a8      	b.n	80121b0 <_printf_i+0x150>
 801225e:	6923      	ldr	r3, [r4, #16]
 8012260:	462a      	mov	r2, r5
 8012262:	4649      	mov	r1, r9
 8012264:	4640      	mov	r0, r8
 8012266:	47d0      	blx	sl
 8012268:	3001      	adds	r0, #1
 801226a:	d0ab      	beq.n	80121c4 <_printf_i+0x164>
 801226c:	6823      	ldr	r3, [r4, #0]
 801226e:	079b      	lsls	r3, r3, #30
 8012270:	d413      	bmi.n	801229a <_printf_i+0x23a>
 8012272:	68e0      	ldr	r0, [r4, #12]
 8012274:	9b03      	ldr	r3, [sp, #12]
 8012276:	4298      	cmp	r0, r3
 8012278:	bfb8      	it	lt
 801227a:	4618      	movlt	r0, r3
 801227c:	e7a4      	b.n	80121c8 <_printf_i+0x168>
 801227e:	2301      	movs	r3, #1
 8012280:	4632      	mov	r2, r6
 8012282:	4649      	mov	r1, r9
 8012284:	4640      	mov	r0, r8
 8012286:	47d0      	blx	sl
 8012288:	3001      	adds	r0, #1
 801228a:	d09b      	beq.n	80121c4 <_printf_i+0x164>
 801228c:	3501      	adds	r5, #1
 801228e:	68e3      	ldr	r3, [r4, #12]
 8012290:	9903      	ldr	r1, [sp, #12]
 8012292:	1a5b      	subs	r3, r3, r1
 8012294:	42ab      	cmp	r3, r5
 8012296:	dcf2      	bgt.n	801227e <_printf_i+0x21e>
 8012298:	e7eb      	b.n	8012272 <_printf_i+0x212>
 801229a:	2500      	movs	r5, #0
 801229c:	f104 0619 	add.w	r6, r4, #25
 80122a0:	e7f5      	b.n	801228e <_printf_i+0x22e>
 80122a2:	bf00      	nop
 80122a4:	080163e6 	.word	0x080163e6
 80122a8:	080163f7 	.word	0x080163f7

080122ac <_scanf_float>:
 80122ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b0:	b087      	sub	sp, #28
 80122b2:	4617      	mov	r7, r2
 80122b4:	9303      	str	r3, [sp, #12]
 80122b6:	688b      	ldr	r3, [r1, #8]
 80122b8:	1e5a      	subs	r2, r3, #1
 80122ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80122be:	bf83      	ittte	hi
 80122c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80122c4:	195b      	addhi	r3, r3, r5
 80122c6:	9302      	strhi	r3, [sp, #8]
 80122c8:	2300      	movls	r3, #0
 80122ca:	bf86      	itte	hi
 80122cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80122d0:	608b      	strhi	r3, [r1, #8]
 80122d2:	9302      	strls	r3, [sp, #8]
 80122d4:	680b      	ldr	r3, [r1, #0]
 80122d6:	468b      	mov	fp, r1
 80122d8:	2500      	movs	r5, #0
 80122da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80122de:	f84b 3b1c 	str.w	r3, [fp], #28
 80122e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80122e6:	4680      	mov	r8, r0
 80122e8:	460c      	mov	r4, r1
 80122ea:	465e      	mov	r6, fp
 80122ec:	46aa      	mov	sl, r5
 80122ee:	46a9      	mov	r9, r5
 80122f0:	9501      	str	r5, [sp, #4]
 80122f2:	68a2      	ldr	r2, [r4, #8]
 80122f4:	b152      	cbz	r2, 801230c <_scanf_float+0x60>
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	2b4e      	cmp	r3, #78	; 0x4e
 80122fc:	d864      	bhi.n	80123c8 <_scanf_float+0x11c>
 80122fe:	2b40      	cmp	r3, #64	; 0x40
 8012300:	d83c      	bhi.n	801237c <_scanf_float+0xd0>
 8012302:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012306:	b2c8      	uxtb	r0, r1
 8012308:	280e      	cmp	r0, #14
 801230a:	d93a      	bls.n	8012382 <_scanf_float+0xd6>
 801230c:	f1b9 0f00 	cmp.w	r9, #0
 8012310:	d003      	beq.n	801231a <_scanf_float+0x6e>
 8012312:	6823      	ldr	r3, [r4, #0]
 8012314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012318:	6023      	str	r3, [r4, #0]
 801231a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801231e:	f1ba 0f01 	cmp.w	sl, #1
 8012322:	f200 8113 	bhi.w	801254c <_scanf_float+0x2a0>
 8012326:	455e      	cmp	r6, fp
 8012328:	f200 8105 	bhi.w	8012536 <_scanf_float+0x28a>
 801232c:	2501      	movs	r5, #1
 801232e:	4628      	mov	r0, r5
 8012330:	b007      	add	sp, #28
 8012332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012336:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801233a:	2a0d      	cmp	r2, #13
 801233c:	d8e6      	bhi.n	801230c <_scanf_float+0x60>
 801233e:	a101      	add	r1, pc, #4	; (adr r1, 8012344 <_scanf_float+0x98>)
 8012340:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012344:	08012483 	.word	0x08012483
 8012348:	0801230d 	.word	0x0801230d
 801234c:	0801230d 	.word	0x0801230d
 8012350:	0801230d 	.word	0x0801230d
 8012354:	080124e3 	.word	0x080124e3
 8012358:	080124bb 	.word	0x080124bb
 801235c:	0801230d 	.word	0x0801230d
 8012360:	0801230d 	.word	0x0801230d
 8012364:	08012491 	.word	0x08012491
 8012368:	0801230d 	.word	0x0801230d
 801236c:	0801230d 	.word	0x0801230d
 8012370:	0801230d 	.word	0x0801230d
 8012374:	0801230d 	.word	0x0801230d
 8012378:	08012449 	.word	0x08012449
 801237c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012380:	e7db      	b.n	801233a <_scanf_float+0x8e>
 8012382:	290e      	cmp	r1, #14
 8012384:	d8c2      	bhi.n	801230c <_scanf_float+0x60>
 8012386:	a001      	add	r0, pc, #4	; (adr r0, 801238c <_scanf_float+0xe0>)
 8012388:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801238c:	0801243b 	.word	0x0801243b
 8012390:	0801230d 	.word	0x0801230d
 8012394:	0801243b 	.word	0x0801243b
 8012398:	080124cf 	.word	0x080124cf
 801239c:	0801230d 	.word	0x0801230d
 80123a0:	080123e9 	.word	0x080123e9
 80123a4:	08012425 	.word	0x08012425
 80123a8:	08012425 	.word	0x08012425
 80123ac:	08012425 	.word	0x08012425
 80123b0:	08012425 	.word	0x08012425
 80123b4:	08012425 	.word	0x08012425
 80123b8:	08012425 	.word	0x08012425
 80123bc:	08012425 	.word	0x08012425
 80123c0:	08012425 	.word	0x08012425
 80123c4:	08012425 	.word	0x08012425
 80123c8:	2b6e      	cmp	r3, #110	; 0x6e
 80123ca:	d809      	bhi.n	80123e0 <_scanf_float+0x134>
 80123cc:	2b60      	cmp	r3, #96	; 0x60
 80123ce:	d8b2      	bhi.n	8012336 <_scanf_float+0x8a>
 80123d0:	2b54      	cmp	r3, #84	; 0x54
 80123d2:	d077      	beq.n	80124c4 <_scanf_float+0x218>
 80123d4:	2b59      	cmp	r3, #89	; 0x59
 80123d6:	d199      	bne.n	801230c <_scanf_float+0x60>
 80123d8:	2d07      	cmp	r5, #7
 80123da:	d197      	bne.n	801230c <_scanf_float+0x60>
 80123dc:	2508      	movs	r5, #8
 80123de:	e029      	b.n	8012434 <_scanf_float+0x188>
 80123e0:	2b74      	cmp	r3, #116	; 0x74
 80123e2:	d06f      	beq.n	80124c4 <_scanf_float+0x218>
 80123e4:	2b79      	cmp	r3, #121	; 0x79
 80123e6:	e7f6      	b.n	80123d6 <_scanf_float+0x12a>
 80123e8:	6821      	ldr	r1, [r4, #0]
 80123ea:	05c8      	lsls	r0, r1, #23
 80123ec:	d51a      	bpl.n	8012424 <_scanf_float+0x178>
 80123ee:	9b02      	ldr	r3, [sp, #8]
 80123f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80123f4:	6021      	str	r1, [r4, #0]
 80123f6:	f109 0901 	add.w	r9, r9, #1
 80123fa:	b11b      	cbz	r3, 8012404 <_scanf_float+0x158>
 80123fc:	3b01      	subs	r3, #1
 80123fe:	3201      	adds	r2, #1
 8012400:	9302      	str	r3, [sp, #8]
 8012402:	60a2      	str	r2, [r4, #8]
 8012404:	68a3      	ldr	r3, [r4, #8]
 8012406:	3b01      	subs	r3, #1
 8012408:	60a3      	str	r3, [r4, #8]
 801240a:	6923      	ldr	r3, [r4, #16]
 801240c:	3301      	adds	r3, #1
 801240e:	6123      	str	r3, [r4, #16]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	3b01      	subs	r3, #1
 8012414:	2b00      	cmp	r3, #0
 8012416:	607b      	str	r3, [r7, #4]
 8012418:	f340 8084 	ble.w	8012524 <_scanf_float+0x278>
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	3301      	adds	r3, #1
 8012420:	603b      	str	r3, [r7, #0]
 8012422:	e766      	b.n	80122f2 <_scanf_float+0x46>
 8012424:	eb1a 0f05 	cmn.w	sl, r5
 8012428:	f47f af70 	bne.w	801230c <_scanf_float+0x60>
 801242c:	6822      	ldr	r2, [r4, #0]
 801242e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012432:	6022      	str	r2, [r4, #0]
 8012434:	f806 3b01 	strb.w	r3, [r6], #1
 8012438:	e7e4      	b.n	8012404 <_scanf_float+0x158>
 801243a:	6822      	ldr	r2, [r4, #0]
 801243c:	0610      	lsls	r0, r2, #24
 801243e:	f57f af65 	bpl.w	801230c <_scanf_float+0x60>
 8012442:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012446:	e7f4      	b.n	8012432 <_scanf_float+0x186>
 8012448:	f1ba 0f00 	cmp.w	sl, #0
 801244c:	d10e      	bne.n	801246c <_scanf_float+0x1c0>
 801244e:	f1b9 0f00 	cmp.w	r9, #0
 8012452:	d10e      	bne.n	8012472 <_scanf_float+0x1c6>
 8012454:	6822      	ldr	r2, [r4, #0]
 8012456:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801245a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801245e:	d108      	bne.n	8012472 <_scanf_float+0x1c6>
 8012460:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012464:	6022      	str	r2, [r4, #0]
 8012466:	f04f 0a01 	mov.w	sl, #1
 801246a:	e7e3      	b.n	8012434 <_scanf_float+0x188>
 801246c:	f1ba 0f02 	cmp.w	sl, #2
 8012470:	d055      	beq.n	801251e <_scanf_float+0x272>
 8012472:	2d01      	cmp	r5, #1
 8012474:	d002      	beq.n	801247c <_scanf_float+0x1d0>
 8012476:	2d04      	cmp	r5, #4
 8012478:	f47f af48 	bne.w	801230c <_scanf_float+0x60>
 801247c:	3501      	adds	r5, #1
 801247e:	b2ed      	uxtb	r5, r5
 8012480:	e7d8      	b.n	8012434 <_scanf_float+0x188>
 8012482:	f1ba 0f01 	cmp.w	sl, #1
 8012486:	f47f af41 	bne.w	801230c <_scanf_float+0x60>
 801248a:	f04f 0a02 	mov.w	sl, #2
 801248e:	e7d1      	b.n	8012434 <_scanf_float+0x188>
 8012490:	b97d      	cbnz	r5, 80124b2 <_scanf_float+0x206>
 8012492:	f1b9 0f00 	cmp.w	r9, #0
 8012496:	f47f af3c 	bne.w	8012312 <_scanf_float+0x66>
 801249a:	6822      	ldr	r2, [r4, #0]
 801249c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80124a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80124a4:	f47f af39 	bne.w	801231a <_scanf_float+0x6e>
 80124a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80124ac:	6022      	str	r2, [r4, #0]
 80124ae:	2501      	movs	r5, #1
 80124b0:	e7c0      	b.n	8012434 <_scanf_float+0x188>
 80124b2:	2d03      	cmp	r5, #3
 80124b4:	d0e2      	beq.n	801247c <_scanf_float+0x1d0>
 80124b6:	2d05      	cmp	r5, #5
 80124b8:	e7de      	b.n	8012478 <_scanf_float+0x1cc>
 80124ba:	2d02      	cmp	r5, #2
 80124bc:	f47f af26 	bne.w	801230c <_scanf_float+0x60>
 80124c0:	2503      	movs	r5, #3
 80124c2:	e7b7      	b.n	8012434 <_scanf_float+0x188>
 80124c4:	2d06      	cmp	r5, #6
 80124c6:	f47f af21 	bne.w	801230c <_scanf_float+0x60>
 80124ca:	2507      	movs	r5, #7
 80124cc:	e7b2      	b.n	8012434 <_scanf_float+0x188>
 80124ce:	6822      	ldr	r2, [r4, #0]
 80124d0:	0591      	lsls	r1, r2, #22
 80124d2:	f57f af1b 	bpl.w	801230c <_scanf_float+0x60>
 80124d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80124da:	6022      	str	r2, [r4, #0]
 80124dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80124e0:	e7a8      	b.n	8012434 <_scanf_float+0x188>
 80124e2:	6822      	ldr	r2, [r4, #0]
 80124e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80124e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80124ec:	d006      	beq.n	80124fc <_scanf_float+0x250>
 80124ee:	0550      	lsls	r0, r2, #21
 80124f0:	f57f af0c 	bpl.w	801230c <_scanf_float+0x60>
 80124f4:	f1b9 0f00 	cmp.w	r9, #0
 80124f8:	f43f af0f 	beq.w	801231a <_scanf_float+0x6e>
 80124fc:	0591      	lsls	r1, r2, #22
 80124fe:	bf58      	it	pl
 8012500:	9901      	ldrpl	r1, [sp, #4]
 8012502:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012506:	bf58      	it	pl
 8012508:	eba9 0101 	subpl.w	r1, r9, r1
 801250c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012510:	bf58      	it	pl
 8012512:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012516:	6022      	str	r2, [r4, #0]
 8012518:	f04f 0900 	mov.w	r9, #0
 801251c:	e78a      	b.n	8012434 <_scanf_float+0x188>
 801251e:	f04f 0a03 	mov.w	sl, #3
 8012522:	e787      	b.n	8012434 <_scanf_float+0x188>
 8012524:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012528:	4639      	mov	r1, r7
 801252a:	4640      	mov	r0, r8
 801252c:	4798      	blx	r3
 801252e:	2800      	cmp	r0, #0
 8012530:	f43f aedf 	beq.w	80122f2 <_scanf_float+0x46>
 8012534:	e6ea      	b.n	801230c <_scanf_float+0x60>
 8012536:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801253a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801253e:	463a      	mov	r2, r7
 8012540:	4640      	mov	r0, r8
 8012542:	4798      	blx	r3
 8012544:	6923      	ldr	r3, [r4, #16]
 8012546:	3b01      	subs	r3, #1
 8012548:	6123      	str	r3, [r4, #16]
 801254a:	e6ec      	b.n	8012326 <_scanf_float+0x7a>
 801254c:	1e6b      	subs	r3, r5, #1
 801254e:	2b06      	cmp	r3, #6
 8012550:	d825      	bhi.n	801259e <_scanf_float+0x2f2>
 8012552:	2d02      	cmp	r5, #2
 8012554:	d836      	bhi.n	80125c4 <_scanf_float+0x318>
 8012556:	455e      	cmp	r6, fp
 8012558:	f67f aee8 	bls.w	801232c <_scanf_float+0x80>
 801255c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012560:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012564:	463a      	mov	r2, r7
 8012566:	4640      	mov	r0, r8
 8012568:	4798      	blx	r3
 801256a:	6923      	ldr	r3, [r4, #16]
 801256c:	3b01      	subs	r3, #1
 801256e:	6123      	str	r3, [r4, #16]
 8012570:	e7f1      	b.n	8012556 <_scanf_float+0x2aa>
 8012572:	9802      	ldr	r0, [sp, #8]
 8012574:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012578:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801257c:	9002      	str	r0, [sp, #8]
 801257e:	463a      	mov	r2, r7
 8012580:	4640      	mov	r0, r8
 8012582:	4798      	blx	r3
 8012584:	6923      	ldr	r3, [r4, #16]
 8012586:	3b01      	subs	r3, #1
 8012588:	6123      	str	r3, [r4, #16]
 801258a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801258e:	fa5f fa8a 	uxtb.w	sl, sl
 8012592:	f1ba 0f02 	cmp.w	sl, #2
 8012596:	d1ec      	bne.n	8012572 <_scanf_float+0x2c6>
 8012598:	3d03      	subs	r5, #3
 801259a:	b2ed      	uxtb	r5, r5
 801259c:	1b76      	subs	r6, r6, r5
 801259e:	6823      	ldr	r3, [r4, #0]
 80125a0:	05da      	lsls	r2, r3, #23
 80125a2:	d52f      	bpl.n	8012604 <_scanf_float+0x358>
 80125a4:	055b      	lsls	r3, r3, #21
 80125a6:	d510      	bpl.n	80125ca <_scanf_float+0x31e>
 80125a8:	455e      	cmp	r6, fp
 80125aa:	f67f aebf 	bls.w	801232c <_scanf_float+0x80>
 80125ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80125b6:	463a      	mov	r2, r7
 80125b8:	4640      	mov	r0, r8
 80125ba:	4798      	blx	r3
 80125bc:	6923      	ldr	r3, [r4, #16]
 80125be:	3b01      	subs	r3, #1
 80125c0:	6123      	str	r3, [r4, #16]
 80125c2:	e7f1      	b.n	80125a8 <_scanf_float+0x2fc>
 80125c4:	46aa      	mov	sl, r5
 80125c6:	9602      	str	r6, [sp, #8]
 80125c8:	e7df      	b.n	801258a <_scanf_float+0x2de>
 80125ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80125ce:	6923      	ldr	r3, [r4, #16]
 80125d0:	2965      	cmp	r1, #101	; 0x65
 80125d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80125d6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80125da:	6123      	str	r3, [r4, #16]
 80125dc:	d00c      	beq.n	80125f8 <_scanf_float+0x34c>
 80125de:	2945      	cmp	r1, #69	; 0x45
 80125e0:	d00a      	beq.n	80125f8 <_scanf_float+0x34c>
 80125e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125e6:	463a      	mov	r2, r7
 80125e8:	4640      	mov	r0, r8
 80125ea:	4798      	blx	r3
 80125ec:	6923      	ldr	r3, [r4, #16]
 80125ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80125f2:	3b01      	subs	r3, #1
 80125f4:	1eb5      	subs	r5, r6, #2
 80125f6:	6123      	str	r3, [r4, #16]
 80125f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80125fc:	463a      	mov	r2, r7
 80125fe:	4640      	mov	r0, r8
 8012600:	4798      	blx	r3
 8012602:	462e      	mov	r6, r5
 8012604:	6825      	ldr	r5, [r4, #0]
 8012606:	f015 0510 	ands.w	r5, r5, #16
 801260a:	d159      	bne.n	80126c0 <_scanf_float+0x414>
 801260c:	7035      	strb	r5, [r6, #0]
 801260e:	6823      	ldr	r3, [r4, #0]
 8012610:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012618:	d11b      	bne.n	8012652 <_scanf_float+0x3a6>
 801261a:	9b01      	ldr	r3, [sp, #4]
 801261c:	454b      	cmp	r3, r9
 801261e:	eba3 0209 	sub.w	r2, r3, r9
 8012622:	d123      	bne.n	801266c <_scanf_float+0x3c0>
 8012624:	2200      	movs	r2, #0
 8012626:	4659      	mov	r1, fp
 8012628:	4640      	mov	r0, r8
 801262a:	f000 ff8b 	bl	8013544 <_strtod_r>
 801262e:	6822      	ldr	r2, [r4, #0]
 8012630:	9b03      	ldr	r3, [sp, #12]
 8012632:	f012 0f02 	tst.w	r2, #2
 8012636:	ec57 6b10 	vmov	r6, r7, d0
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	d021      	beq.n	8012682 <_scanf_float+0x3d6>
 801263e:	9903      	ldr	r1, [sp, #12]
 8012640:	1d1a      	adds	r2, r3, #4
 8012642:	600a      	str	r2, [r1, #0]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	e9c3 6700 	strd	r6, r7, [r3]
 801264a:	68e3      	ldr	r3, [r4, #12]
 801264c:	3301      	adds	r3, #1
 801264e:	60e3      	str	r3, [r4, #12]
 8012650:	e66d      	b.n	801232e <_scanf_float+0x82>
 8012652:	9b04      	ldr	r3, [sp, #16]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d0e5      	beq.n	8012624 <_scanf_float+0x378>
 8012658:	9905      	ldr	r1, [sp, #20]
 801265a:	230a      	movs	r3, #10
 801265c:	462a      	mov	r2, r5
 801265e:	3101      	adds	r1, #1
 8012660:	4640      	mov	r0, r8
 8012662:	f000 fff7 	bl	8013654 <_strtol_r>
 8012666:	9b04      	ldr	r3, [sp, #16]
 8012668:	9e05      	ldr	r6, [sp, #20]
 801266a:	1ac2      	subs	r2, r0, r3
 801266c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012670:	429e      	cmp	r6, r3
 8012672:	bf28      	it	cs
 8012674:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012678:	4912      	ldr	r1, [pc, #72]	; (80126c4 <_scanf_float+0x418>)
 801267a:	4630      	mov	r0, r6
 801267c:	f000 f8da 	bl	8012834 <siprintf>
 8012680:	e7d0      	b.n	8012624 <_scanf_float+0x378>
 8012682:	9903      	ldr	r1, [sp, #12]
 8012684:	f012 0f04 	tst.w	r2, #4
 8012688:	f103 0204 	add.w	r2, r3, #4
 801268c:	600a      	str	r2, [r1, #0]
 801268e:	d1d9      	bne.n	8012644 <_scanf_float+0x398>
 8012690:	f8d3 8000 	ldr.w	r8, [r3]
 8012694:	ee10 2a10 	vmov	r2, s0
 8012698:	ee10 0a10 	vmov	r0, s0
 801269c:	463b      	mov	r3, r7
 801269e:	4639      	mov	r1, r7
 80126a0:	f7ee fa5c 	bl	8000b5c <__aeabi_dcmpun>
 80126a4:	b128      	cbz	r0, 80126b2 <_scanf_float+0x406>
 80126a6:	4808      	ldr	r0, [pc, #32]	; (80126c8 <_scanf_float+0x41c>)
 80126a8:	f000 f88a 	bl	80127c0 <nanf>
 80126ac:	ed88 0a00 	vstr	s0, [r8]
 80126b0:	e7cb      	b.n	801264a <_scanf_float+0x39e>
 80126b2:	4630      	mov	r0, r6
 80126b4:	4639      	mov	r1, r7
 80126b6:	f7ee faaf 	bl	8000c18 <__aeabi_d2f>
 80126ba:	f8c8 0000 	str.w	r0, [r8]
 80126be:	e7c4      	b.n	801264a <_scanf_float+0x39e>
 80126c0:	2500      	movs	r5, #0
 80126c2:	e634      	b.n	801232e <_scanf_float+0x82>
 80126c4:	08016408 	.word	0x08016408
 80126c8:	08016810 	.word	0x08016810

080126cc <cleanup_glue>:
 80126cc:	b538      	push	{r3, r4, r5, lr}
 80126ce:	460c      	mov	r4, r1
 80126d0:	6809      	ldr	r1, [r1, #0]
 80126d2:	4605      	mov	r5, r0
 80126d4:	b109      	cbz	r1, 80126da <cleanup_glue+0xe>
 80126d6:	f7ff fff9 	bl	80126cc <cleanup_glue>
 80126da:	4621      	mov	r1, r4
 80126dc:	4628      	mov	r0, r5
 80126de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126e2:	f002 bf9d 	b.w	8015620 <_free_r>
	...

080126e8 <_reclaim_reent>:
 80126e8:	4b2c      	ldr	r3, [pc, #176]	; (801279c <_reclaim_reent+0xb4>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	4283      	cmp	r3, r0
 80126ee:	b570      	push	{r4, r5, r6, lr}
 80126f0:	4604      	mov	r4, r0
 80126f2:	d051      	beq.n	8012798 <_reclaim_reent+0xb0>
 80126f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80126f6:	b143      	cbz	r3, 801270a <_reclaim_reent+0x22>
 80126f8:	68db      	ldr	r3, [r3, #12]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d14a      	bne.n	8012794 <_reclaim_reent+0xac>
 80126fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012700:	6819      	ldr	r1, [r3, #0]
 8012702:	b111      	cbz	r1, 801270a <_reclaim_reent+0x22>
 8012704:	4620      	mov	r0, r4
 8012706:	f002 ff8b 	bl	8015620 <_free_r>
 801270a:	6961      	ldr	r1, [r4, #20]
 801270c:	b111      	cbz	r1, 8012714 <_reclaim_reent+0x2c>
 801270e:	4620      	mov	r0, r4
 8012710:	f002 ff86 	bl	8015620 <_free_r>
 8012714:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012716:	b111      	cbz	r1, 801271e <_reclaim_reent+0x36>
 8012718:	4620      	mov	r0, r4
 801271a:	f002 ff81 	bl	8015620 <_free_r>
 801271e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012720:	b111      	cbz	r1, 8012728 <_reclaim_reent+0x40>
 8012722:	4620      	mov	r0, r4
 8012724:	f002 ff7c 	bl	8015620 <_free_r>
 8012728:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801272a:	b111      	cbz	r1, 8012732 <_reclaim_reent+0x4a>
 801272c:	4620      	mov	r0, r4
 801272e:	f002 ff77 	bl	8015620 <_free_r>
 8012732:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012734:	b111      	cbz	r1, 801273c <_reclaim_reent+0x54>
 8012736:	4620      	mov	r0, r4
 8012738:	f002 ff72 	bl	8015620 <_free_r>
 801273c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801273e:	b111      	cbz	r1, 8012746 <_reclaim_reent+0x5e>
 8012740:	4620      	mov	r0, r4
 8012742:	f002 ff6d 	bl	8015620 <_free_r>
 8012746:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012748:	b111      	cbz	r1, 8012750 <_reclaim_reent+0x68>
 801274a:	4620      	mov	r0, r4
 801274c:	f002 ff68 	bl	8015620 <_free_r>
 8012750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012752:	b111      	cbz	r1, 801275a <_reclaim_reent+0x72>
 8012754:	4620      	mov	r0, r4
 8012756:	f002 ff63 	bl	8015620 <_free_r>
 801275a:	69a3      	ldr	r3, [r4, #24]
 801275c:	b1e3      	cbz	r3, 8012798 <_reclaim_reent+0xb0>
 801275e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012760:	4620      	mov	r0, r4
 8012762:	4798      	blx	r3
 8012764:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012766:	b1b9      	cbz	r1, 8012798 <_reclaim_reent+0xb0>
 8012768:	4620      	mov	r0, r4
 801276a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801276e:	f7ff bfad 	b.w	80126cc <cleanup_glue>
 8012772:	5949      	ldr	r1, [r1, r5]
 8012774:	b941      	cbnz	r1, 8012788 <_reclaim_reent+0xa0>
 8012776:	3504      	adds	r5, #4
 8012778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801277a:	2d80      	cmp	r5, #128	; 0x80
 801277c:	68d9      	ldr	r1, [r3, #12]
 801277e:	d1f8      	bne.n	8012772 <_reclaim_reent+0x8a>
 8012780:	4620      	mov	r0, r4
 8012782:	f002 ff4d 	bl	8015620 <_free_r>
 8012786:	e7ba      	b.n	80126fe <_reclaim_reent+0x16>
 8012788:	680e      	ldr	r6, [r1, #0]
 801278a:	4620      	mov	r0, r4
 801278c:	f002 ff48 	bl	8015620 <_free_r>
 8012790:	4631      	mov	r1, r6
 8012792:	e7ef      	b.n	8012774 <_reclaim_reent+0x8c>
 8012794:	2500      	movs	r5, #0
 8012796:	e7ef      	b.n	8012778 <_reclaim_reent+0x90>
 8012798:	bd70      	pop	{r4, r5, r6, pc}
 801279a:	bf00      	nop
 801279c:	20000010 	.word	0x20000010

080127a0 <_sbrk_r>:
 80127a0:	b538      	push	{r3, r4, r5, lr}
 80127a2:	4d06      	ldr	r5, [pc, #24]	; (80127bc <_sbrk_r+0x1c>)
 80127a4:	2300      	movs	r3, #0
 80127a6:	4604      	mov	r4, r0
 80127a8:	4608      	mov	r0, r1
 80127aa:	602b      	str	r3, [r5, #0]
 80127ac:	f7ef fcfe 	bl	80021ac <_sbrk>
 80127b0:	1c43      	adds	r3, r0, #1
 80127b2:	d102      	bne.n	80127ba <_sbrk_r+0x1a>
 80127b4:	682b      	ldr	r3, [r5, #0]
 80127b6:	b103      	cbz	r3, 80127ba <_sbrk_r+0x1a>
 80127b8:	6023      	str	r3, [r4, #0]
 80127ba:	bd38      	pop	{r3, r4, r5, pc}
 80127bc:	20002714 	.word	0x20002714

080127c0 <nanf>:
 80127c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80127c8 <nanf+0x8>
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	7fc00000 	.word	0x7fc00000

080127cc <sniprintf>:
 80127cc:	b40c      	push	{r2, r3}
 80127ce:	b530      	push	{r4, r5, lr}
 80127d0:	4b17      	ldr	r3, [pc, #92]	; (8012830 <sniprintf+0x64>)
 80127d2:	1e0c      	subs	r4, r1, #0
 80127d4:	681d      	ldr	r5, [r3, #0]
 80127d6:	b09d      	sub	sp, #116	; 0x74
 80127d8:	da08      	bge.n	80127ec <sniprintf+0x20>
 80127da:	238b      	movs	r3, #139	; 0x8b
 80127dc:	602b      	str	r3, [r5, #0]
 80127de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127e2:	b01d      	add	sp, #116	; 0x74
 80127e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127e8:	b002      	add	sp, #8
 80127ea:	4770      	bx	lr
 80127ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80127f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80127f4:	bf14      	ite	ne
 80127f6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80127fa:	4623      	moveq	r3, r4
 80127fc:	9304      	str	r3, [sp, #16]
 80127fe:	9307      	str	r3, [sp, #28]
 8012800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012804:	9002      	str	r0, [sp, #8]
 8012806:	9006      	str	r0, [sp, #24]
 8012808:	f8ad 3016 	strh.w	r3, [sp, #22]
 801280c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801280e:	ab21      	add	r3, sp, #132	; 0x84
 8012810:	a902      	add	r1, sp, #8
 8012812:	4628      	mov	r0, r5
 8012814:	9301      	str	r3, [sp, #4]
 8012816:	f002 ffab 	bl	8015770 <_svfiprintf_r>
 801281a:	1c43      	adds	r3, r0, #1
 801281c:	bfbc      	itt	lt
 801281e:	238b      	movlt	r3, #139	; 0x8b
 8012820:	602b      	strlt	r3, [r5, #0]
 8012822:	2c00      	cmp	r4, #0
 8012824:	d0dd      	beq.n	80127e2 <sniprintf+0x16>
 8012826:	9b02      	ldr	r3, [sp, #8]
 8012828:	2200      	movs	r2, #0
 801282a:	701a      	strb	r2, [r3, #0]
 801282c:	e7d9      	b.n	80127e2 <sniprintf+0x16>
 801282e:	bf00      	nop
 8012830:	20000010 	.word	0x20000010

08012834 <siprintf>:
 8012834:	b40e      	push	{r1, r2, r3}
 8012836:	b500      	push	{lr}
 8012838:	b09c      	sub	sp, #112	; 0x70
 801283a:	ab1d      	add	r3, sp, #116	; 0x74
 801283c:	9002      	str	r0, [sp, #8]
 801283e:	9006      	str	r0, [sp, #24]
 8012840:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012844:	4809      	ldr	r0, [pc, #36]	; (801286c <siprintf+0x38>)
 8012846:	9107      	str	r1, [sp, #28]
 8012848:	9104      	str	r1, [sp, #16]
 801284a:	4909      	ldr	r1, [pc, #36]	; (8012870 <siprintf+0x3c>)
 801284c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012850:	9105      	str	r1, [sp, #20]
 8012852:	6800      	ldr	r0, [r0, #0]
 8012854:	9301      	str	r3, [sp, #4]
 8012856:	a902      	add	r1, sp, #8
 8012858:	f002 ff8a 	bl	8015770 <_svfiprintf_r>
 801285c:	9b02      	ldr	r3, [sp, #8]
 801285e:	2200      	movs	r2, #0
 8012860:	701a      	strb	r2, [r3, #0]
 8012862:	b01c      	add	sp, #112	; 0x70
 8012864:	f85d eb04 	ldr.w	lr, [sp], #4
 8012868:	b003      	add	sp, #12
 801286a:	4770      	bx	lr
 801286c:	20000010 	.word	0x20000010
 8012870:	ffff0208 	.word	0xffff0208

08012874 <__sread>:
 8012874:	b510      	push	{r4, lr}
 8012876:	460c      	mov	r4, r1
 8012878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801287c:	f003 f878 	bl	8015970 <_read_r>
 8012880:	2800      	cmp	r0, #0
 8012882:	bfab      	itete	ge
 8012884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012886:	89a3      	ldrhlt	r3, [r4, #12]
 8012888:	181b      	addge	r3, r3, r0
 801288a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801288e:	bfac      	ite	ge
 8012890:	6563      	strge	r3, [r4, #84]	; 0x54
 8012892:	81a3      	strhlt	r3, [r4, #12]
 8012894:	bd10      	pop	{r4, pc}

08012896 <__swrite>:
 8012896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801289a:	461f      	mov	r7, r3
 801289c:	898b      	ldrh	r3, [r1, #12]
 801289e:	05db      	lsls	r3, r3, #23
 80128a0:	4605      	mov	r5, r0
 80128a2:	460c      	mov	r4, r1
 80128a4:	4616      	mov	r6, r2
 80128a6:	d505      	bpl.n	80128b4 <__swrite+0x1e>
 80128a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128ac:	2302      	movs	r3, #2
 80128ae:	2200      	movs	r2, #0
 80128b0:	f002 f9a6 	bl	8014c00 <_lseek_r>
 80128b4:	89a3      	ldrh	r3, [r4, #12]
 80128b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80128be:	81a3      	strh	r3, [r4, #12]
 80128c0:	4632      	mov	r2, r6
 80128c2:	463b      	mov	r3, r7
 80128c4:	4628      	mov	r0, r5
 80128c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128ca:	f000 bec5 	b.w	8013658 <_write_r>

080128ce <__sseek>:
 80128ce:	b510      	push	{r4, lr}
 80128d0:	460c      	mov	r4, r1
 80128d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128d6:	f002 f993 	bl	8014c00 <_lseek_r>
 80128da:	1c43      	adds	r3, r0, #1
 80128dc:	89a3      	ldrh	r3, [r4, #12]
 80128de:	bf15      	itete	ne
 80128e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80128e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80128e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80128ea:	81a3      	strheq	r3, [r4, #12]
 80128ec:	bf18      	it	ne
 80128ee:	81a3      	strhne	r3, [r4, #12]
 80128f0:	bd10      	pop	{r4, pc}

080128f2 <__sclose>:
 80128f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128f6:	f000 bec1 	b.w	801367c <_close_r>

080128fa <sulp>:
 80128fa:	b570      	push	{r4, r5, r6, lr}
 80128fc:	4604      	mov	r4, r0
 80128fe:	460d      	mov	r5, r1
 8012900:	ec45 4b10 	vmov	d0, r4, r5
 8012904:	4616      	mov	r6, r2
 8012906:	f002 fd25 	bl	8015354 <__ulp>
 801290a:	ec51 0b10 	vmov	r0, r1, d0
 801290e:	b17e      	cbz	r6, 8012930 <sulp+0x36>
 8012910:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012914:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012918:	2b00      	cmp	r3, #0
 801291a:	dd09      	ble.n	8012930 <sulp+0x36>
 801291c:	051b      	lsls	r3, r3, #20
 801291e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012922:	2400      	movs	r4, #0
 8012924:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012928:	4622      	mov	r2, r4
 801292a:	462b      	mov	r3, r5
 801292c:	f7ed fe7c 	bl	8000628 <__aeabi_dmul>
 8012930:	bd70      	pop	{r4, r5, r6, pc}
 8012932:	0000      	movs	r0, r0
 8012934:	0000      	movs	r0, r0
	...

08012938 <_strtod_l>:
 8012938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801293c:	ed2d 8b02 	vpush	{d8}
 8012940:	b09d      	sub	sp, #116	; 0x74
 8012942:	461f      	mov	r7, r3
 8012944:	2300      	movs	r3, #0
 8012946:	9318      	str	r3, [sp, #96]	; 0x60
 8012948:	4ba2      	ldr	r3, [pc, #648]	; (8012bd4 <_strtod_l+0x29c>)
 801294a:	9213      	str	r2, [sp, #76]	; 0x4c
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	9305      	str	r3, [sp, #20]
 8012950:	4604      	mov	r4, r0
 8012952:	4618      	mov	r0, r3
 8012954:	4688      	mov	r8, r1
 8012956:	f7ed fc53 	bl	8000200 <strlen>
 801295a:	f04f 0a00 	mov.w	sl, #0
 801295e:	4605      	mov	r5, r0
 8012960:	f04f 0b00 	mov.w	fp, #0
 8012964:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801296a:	781a      	ldrb	r2, [r3, #0]
 801296c:	2a2b      	cmp	r2, #43	; 0x2b
 801296e:	d04e      	beq.n	8012a0e <_strtod_l+0xd6>
 8012970:	d83b      	bhi.n	80129ea <_strtod_l+0xb2>
 8012972:	2a0d      	cmp	r2, #13
 8012974:	d834      	bhi.n	80129e0 <_strtod_l+0xa8>
 8012976:	2a08      	cmp	r2, #8
 8012978:	d834      	bhi.n	80129e4 <_strtod_l+0xac>
 801297a:	2a00      	cmp	r2, #0
 801297c:	d03e      	beq.n	80129fc <_strtod_l+0xc4>
 801297e:	2300      	movs	r3, #0
 8012980:	930a      	str	r3, [sp, #40]	; 0x28
 8012982:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012984:	7833      	ldrb	r3, [r6, #0]
 8012986:	2b30      	cmp	r3, #48	; 0x30
 8012988:	f040 80b0 	bne.w	8012aec <_strtod_l+0x1b4>
 801298c:	7873      	ldrb	r3, [r6, #1]
 801298e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012992:	2b58      	cmp	r3, #88	; 0x58
 8012994:	d168      	bne.n	8012a68 <_strtod_l+0x130>
 8012996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012998:	9301      	str	r3, [sp, #4]
 801299a:	ab18      	add	r3, sp, #96	; 0x60
 801299c:	9702      	str	r7, [sp, #8]
 801299e:	9300      	str	r3, [sp, #0]
 80129a0:	4a8d      	ldr	r2, [pc, #564]	; (8012bd8 <_strtod_l+0x2a0>)
 80129a2:	ab19      	add	r3, sp, #100	; 0x64
 80129a4:	a917      	add	r1, sp, #92	; 0x5c
 80129a6:	4620      	mov	r0, r4
 80129a8:	f001 fe1e 	bl	80145e8 <__gethex>
 80129ac:	f010 0707 	ands.w	r7, r0, #7
 80129b0:	4605      	mov	r5, r0
 80129b2:	d005      	beq.n	80129c0 <_strtod_l+0x88>
 80129b4:	2f06      	cmp	r7, #6
 80129b6:	d12c      	bne.n	8012a12 <_strtod_l+0xda>
 80129b8:	3601      	adds	r6, #1
 80129ba:	2300      	movs	r3, #0
 80129bc:	9617      	str	r6, [sp, #92]	; 0x5c
 80129be:	930a      	str	r3, [sp, #40]	; 0x28
 80129c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	f040 8590 	bne.w	80134e8 <_strtod_l+0xbb0>
 80129c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129ca:	b1eb      	cbz	r3, 8012a08 <_strtod_l+0xd0>
 80129cc:	4652      	mov	r2, sl
 80129ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80129d2:	ec43 2b10 	vmov	d0, r2, r3
 80129d6:	b01d      	add	sp, #116	; 0x74
 80129d8:	ecbd 8b02 	vpop	{d8}
 80129dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129e0:	2a20      	cmp	r2, #32
 80129e2:	d1cc      	bne.n	801297e <_strtod_l+0x46>
 80129e4:	3301      	adds	r3, #1
 80129e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80129e8:	e7be      	b.n	8012968 <_strtod_l+0x30>
 80129ea:	2a2d      	cmp	r2, #45	; 0x2d
 80129ec:	d1c7      	bne.n	801297e <_strtod_l+0x46>
 80129ee:	2201      	movs	r2, #1
 80129f0:	920a      	str	r2, [sp, #40]	; 0x28
 80129f2:	1c5a      	adds	r2, r3, #1
 80129f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80129f6:	785b      	ldrb	r3, [r3, #1]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d1c2      	bne.n	8012982 <_strtod_l+0x4a>
 80129fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80129fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	f040 856e 	bne.w	80134e4 <_strtod_l+0xbac>
 8012a08:	4652      	mov	r2, sl
 8012a0a:	465b      	mov	r3, fp
 8012a0c:	e7e1      	b.n	80129d2 <_strtod_l+0x9a>
 8012a0e:	2200      	movs	r2, #0
 8012a10:	e7ee      	b.n	80129f0 <_strtod_l+0xb8>
 8012a12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012a14:	b13a      	cbz	r2, 8012a26 <_strtod_l+0xee>
 8012a16:	2135      	movs	r1, #53	; 0x35
 8012a18:	a81a      	add	r0, sp, #104	; 0x68
 8012a1a:	f002 fda6 	bl	801556a <__copybits>
 8012a1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012a20:	4620      	mov	r0, r4
 8012a22:	f002 f965 	bl	8014cf0 <_Bfree>
 8012a26:	3f01      	subs	r7, #1
 8012a28:	2f04      	cmp	r7, #4
 8012a2a:	d806      	bhi.n	8012a3a <_strtod_l+0x102>
 8012a2c:	e8df f007 	tbb	[pc, r7]
 8012a30:	1714030a 	.word	0x1714030a
 8012a34:	0a          	.byte	0x0a
 8012a35:	00          	.byte	0x00
 8012a36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8012a3a:	0728      	lsls	r0, r5, #28
 8012a3c:	d5c0      	bpl.n	80129c0 <_strtod_l+0x88>
 8012a3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012a42:	e7bd      	b.n	80129c0 <_strtod_l+0x88>
 8012a44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8012a48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012a4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012a4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012a52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012a56:	e7f0      	b.n	8012a3a <_strtod_l+0x102>
 8012a58:	f8df b180 	ldr.w	fp, [pc, #384]	; 8012bdc <_strtod_l+0x2a4>
 8012a5c:	e7ed      	b.n	8012a3a <_strtod_l+0x102>
 8012a5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012a62:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012a66:	e7e8      	b.n	8012a3a <_strtod_l+0x102>
 8012a68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012a6a:	1c5a      	adds	r2, r3, #1
 8012a6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8012a6e:	785b      	ldrb	r3, [r3, #1]
 8012a70:	2b30      	cmp	r3, #48	; 0x30
 8012a72:	d0f9      	beq.n	8012a68 <_strtod_l+0x130>
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d0a3      	beq.n	80129c0 <_strtod_l+0x88>
 8012a78:	2301      	movs	r3, #1
 8012a7a:	f04f 0900 	mov.w	r9, #0
 8012a7e:	9304      	str	r3, [sp, #16]
 8012a80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012a82:	9308      	str	r3, [sp, #32]
 8012a84:	f8cd 901c 	str.w	r9, [sp, #28]
 8012a88:	464f      	mov	r7, r9
 8012a8a:	220a      	movs	r2, #10
 8012a8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012a8e:	7806      	ldrb	r6, [r0, #0]
 8012a90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012a94:	b2d9      	uxtb	r1, r3
 8012a96:	2909      	cmp	r1, #9
 8012a98:	d92a      	bls.n	8012af0 <_strtod_l+0x1b8>
 8012a9a:	9905      	ldr	r1, [sp, #20]
 8012a9c:	462a      	mov	r2, r5
 8012a9e:	f002 ff83 	bl	80159a8 <strncmp>
 8012aa2:	b398      	cbz	r0, 8012b0c <_strtod_l+0x1d4>
 8012aa4:	2000      	movs	r0, #0
 8012aa6:	4632      	mov	r2, r6
 8012aa8:	463d      	mov	r5, r7
 8012aaa:	9005      	str	r0, [sp, #20]
 8012aac:	4603      	mov	r3, r0
 8012aae:	2a65      	cmp	r2, #101	; 0x65
 8012ab0:	d001      	beq.n	8012ab6 <_strtod_l+0x17e>
 8012ab2:	2a45      	cmp	r2, #69	; 0x45
 8012ab4:	d118      	bne.n	8012ae8 <_strtod_l+0x1b0>
 8012ab6:	b91d      	cbnz	r5, 8012ac0 <_strtod_l+0x188>
 8012ab8:	9a04      	ldr	r2, [sp, #16]
 8012aba:	4302      	orrs	r2, r0
 8012abc:	d09e      	beq.n	80129fc <_strtod_l+0xc4>
 8012abe:	2500      	movs	r5, #0
 8012ac0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8012ac4:	f108 0201 	add.w	r2, r8, #1
 8012ac8:	9217      	str	r2, [sp, #92]	; 0x5c
 8012aca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012ace:	2a2b      	cmp	r2, #43	; 0x2b
 8012ad0:	d075      	beq.n	8012bbe <_strtod_l+0x286>
 8012ad2:	2a2d      	cmp	r2, #45	; 0x2d
 8012ad4:	d07b      	beq.n	8012bce <_strtod_l+0x296>
 8012ad6:	f04f 0c00 	mov.w	ip, #0
 8012ada:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012ade:	2909      	cmp	r1, #9
 8012ae0:	f240 8082 	bls.w	8012be8 <_strtod_l+0x2b0>
 8012ae4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012ae8:	2600      	movs	r6, #0
 8012aea:	e09d      	b.n	8012c28 <_strtod_l+0x2f0>
 8012aec:	2300      	movs	r3, #0
 8012aee:	e7c4      	b.n	8012a7a <_strtod_l+0x142>
 8012af0:	2f08      	cmp	r7, #8
 8012af2:	bfd8      	it	le
 8012af4:	9907      	ldrle	r1, [sp, #28]
 8012af6:	f100 0001 	add.w	r0, r0, #1
 8012afa:	bfda      	itte	le
 8012afc:	fb02 3301 	mlale	r3, r2, r1, r3
 8012b00:	9307      	strle	r3, [sp, #28]
 8012b02:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012b06:	3701      	adds	r7, #1
 8012b08:	9017      	str	r0, [sp, #92]	; 0x5c
 8012b0a:	e7bf      	b.n	8012a8c <_strtod_l+0x154>
 8012b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b0e:	195a      	adds	r2, r3, r5
 8012b10:	9217      	str	r2, [sp, #92]	; 0x5c
 8012b12:	5d5a      	ldrb	r2, [r3, r5]
 8012b14:	2f00      	cmp	r7, #0
 8012b16:	d037      	beq.n	8012b88 <_strtod_l+0x250>
 8012b18:	9005      	str	r0, [sp, #20]
 8012b1a:	463d      	mov	r5, r7
 8012b1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012b20:	2b09      	cmp	r3, #9
 8012b22:	d912      	bls.n	8012b4a <_strtod_l+0x212>
 8012b24:	2301      	movs	r3, #1
 8012b26:	e7c2      	b.n	8012aae <_strtod_l+0x176>
 8012b28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b2a:	1c5a      	adds	r2, r3, #1
 8012b2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8012b2e:	785a      	ldrb	r2, [r3, #1]
 8012b30:	3001      	adds	r0, #1
 8012b32:	2a30      	cmp	r2, #48	; 0x30
 8012b34:	d0f8      	beq.n	8012b28 <_strtod_l+0x1f0>
 8012b36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012b3a:	2b08      	cmp	r3, #8
 8012b3c:	f200 84d9 	bhi.w	80134f2 <_strtod_l+0xbba>
 8012b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012b42:	9005      	str	r0, [sp, #20]
 8012b44:	2000      	movs	r0, #0
 8012b46:	9308      	str	r3, [sp, #32]
 8012b48:	4605      	mov	r5, r0
 8012b4a:	3a30      	subs	r2, #48	; 0x30
 8012b4c:	f100 0301 	add.w	r3, r0, #1
 8012b50:	d014      	beq.n	8012b7c <_strtod_l+0x244>
 8012b52:	9905      	ldr	r1, [sp, #20]
 8012b54:	4419      	add	r1, r3
 8012b56:	9105      	str	r1, [sp, #20]
 8012b58:	462b      	mov	r3, r5
 8012b5a:	eb00 0e05 	add.w	lr, r0, r5
 8012b5e:	210a      	movs	r1, #10
 8012b60:	4573      	cmp	r3, lr
 8012b62:	d113      	bne.n	8012b8c <_strtod_l+0x254>
 8012b64:	182b      	adds	r3, r5, r0
 8012b66:	2b08      	cmp	r3, #8
 8012b68:	f105 0501 	add.w	r5, r5, #1
 8012b6c:	4405      	add	r5, r0
 8012b6e:	dc1c      	bgt.n	8012baa <_strtod_l+0x272>
 8012b70:	9907      	ldr	r1, [sp, #28]
 8012b72:	230a      	movs	r3, #10
 8012b74:	fb03 2301 	mla	r3, r3, r1, r2
 8012b78:	9307      	str	r3, [sp, #28]
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012b7e:	1c51      	adds	r1, r2, #1
 8012b80:	9117      	str	r1, [sp, #92]	; 0x5c
 8012b82:	7852      	ldrb	r2, [r2, #1]
 8012b84:	4618      	mov	r0, r3
 8012b86:	e7c9      	b.n	8012b1c <_strtod_l+0x1e4>
 8012b88:	4638      	mov	r0, r7
 8012b8a:	e7d2      	b.n	8012b32 <_strtod_l+0x1fa>
 8012b8c:	2b08      	cmp	r3, #8
 8012b8e:	dc04      	bgt.n	8012b9a <_strtod_l+0x262>
 8012b90:	9e07      	ldr	r6, [sp, #28]
 8012b92:	434e      	muls	r6, r1
 8012b94:	9607      	str	r6, [sp, #28]
 8012b96:	3301      	adds	r3, #1
 8012b98:	e7e2      	b.n	8012b60 <_strtod_l+0x228>
 8012b9a:	f103 0c01 	add.w	ip, r3, #1
 8012b9e:	f1bc 0f10 	cmp.w	ip, #16
 8012ba2:	bfd8      	it	le
 8012ba4:	fb01 f909 	mulle.w	r9, r1, r9
 8012ba8:	e7f5      	b.n	8012b96 <_strtod_l+0x25e>
 8012baa:	2d10      	cmp	r5, #16
 8012bac:	bfdc      	itt	le
 8012bae:	230a      	movle	r3, #10
 8012bb0:	fb03 2909 	mlale	r9, r3, r9, r2
 8012bb4:	e7e1      	b.n	8012b7a <_strtod_l+0x242>
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	9305      	str	r3, [sp, #20]
 8012bba:	2301      	movs	r3, #1
 8012bbc:	e77c      	b.n	8012ab8 <_strtod_l+0x180>
 8012bbe:	f04f 0c00 	mov.w	ip, #0
 8012bc2:	f108 0202 	add.w	r2, r8, #2
 8012bc6:	9217      	str	r2, [sp, #92]	; 0x5c
 8012bc8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8012bcc:	e785      	b.n	8012ada <_strtod_l+0x1a2>
 8012bce:	f04f 0c01 	mov.w	ip, #1
 8012bd2:	e7f6      	b.n	8012bc2 <_strtod_l+0x28a>
 8012bd4:	08016658 	.word	0x08016658
 8012bd8:	08016410 	.word	0x08016410
 8012bdc:	7ff00000 	.word	0x7ff00000
 8012be0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012be2:	1c51      	adds	r1, r2, #1
 8012be4:	9117      	str	r1, [sp, #92]	; 0x5c
 8012be6:	7852      	ldrb	r2, [r2, #1]
 8012be8:	2a30      	cmp	r2, #48	; 0x30
 8012bea:	d0f9      	beq.n	8012be0 <_strtod_l+0x2a8>
 8012bec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012bf0:	2908      	cmp	r1, #8
 8012bf2:	f63f af79 	bhi.w	8012ae8 <_strtod_l+0x1b0>
 8012bf6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8012bfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012bfc:	9206      	str	r2, [sp, #24]
 8012bfe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012c00:	1c51      	adds	r1, r2, #1
 8012c02:	9117      	str	r1, [sp, #92]	; 0x5c
 8012c04:	7852      	ldrb	r2, [r2, #1]
 8012c06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8012c0a:	2e09      	cmp	r6, #9
 8012c0c:	d937      	bls.n	8012c7e <_strtod_l+0x346>
 8012c0e:	9e06      	ldr	r6, [sp, #24]
 8012c10:	1b89      	subs	r1, r1, r6
 8012c12:	2908      	cmp	r1, #8
 8012c14:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8012c18:	dc02      	bgt.n	8012c20 <_strtod_l+0x2e8>
 8012c1a:	4576      	cmp	r6, lr
 8012c1c:	bfa8      	it	ge
 8012c1e:	4676      	movge	r6, lr
 8012c20:	f1bc 0f00 	cmp.w	ip, #0
 8012c24:	d000      	beq.n	8012c28 <_strtod_l+0x2f0>
 8012c26:	4276      	negs	r6, r6
 8012c28:	2d00      	cmp	r5, #0
 8012c2a:	d14d      	bne.n	8012cc8 <_strtod_l+0x390>
 8012c2c:	9904      	ldr	r1, [sp, #16]
 8012c2e:	4301      	orrs	r1, r0
 8012c30:	f47f aec6 	bne.w	80129c0 <_strtod_l+0x88>
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	f47f aee1 	bne.w	80129fc <_strtod_l+0xc4>
 8012c3a:	2a69      	cmp	r2, #105	; 0x69
 8012c3c:	d027      	beq.n	8012c8e <_strtod_l+0x356>
 8012c3e:	dc24      	bgt.n	8012c8a <_strtod_l+0x352>
 8012c40:	2a49      	cmp	r2, #73	; 0x49
 8012c42:	d024      	beq.n	8012c8e <_strtod_l+0x356>
 8012c44:	2a4e      	cmp	r2, #78	; 0x4e
 8012c46:	f47f aed9 	bne.w	80129fc <_strtod_l+0xc4>
 8012c4a:	499f      	ldr	r1, [pc, #636]	; (8012ec8 <_strtod_l+0x590>)
 8012c4c:	a817      	add	r0, sp, #92	; 0x5c
 8012c4e:	f001 ff23 	bl	8014a98 <__match>
 8012c52:	2800      	cmp	r0, #0
 8012c54:	f43f aed2 	beq.w	80129fc <_strtod_l+0xc4>
 8012c58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	2b28      	cmp	r3, #40	; 0x28
 8012c5e:	d12d      	bne.n	8012cbc <_strtod_l+0x384>
 8012c60:	499a      	ldr	r1, [pc, #616]	; (8012ecc <_strtod_l+0x594>)
 8012c62:	aa1a      	add	r2, sp, #104	; 0x68
 8012c64:	a817      	add	r0, sp, #92	; 0x5c
 8012c66:	f001 ff2b 	bl	8014ac0 <__hexnan>
 8012c6a:	2805      	cmp	r0, #5
 8012c6c:	d126      	bne.n	8012cbc <_strtod_l+0x384>
 8012c6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012c70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012c74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012c78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012c7c:	e6a0      	b.n	80129c0 <_strtod_l+0x88>
 8012c7e:	210a      	movs	r1, #10
 8012c80:	fb01 2e0e 	mla	lr, r1, lr, r2
 8012c84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012c88:	e7b9      	b.n	8012bfe <_strtod_l+0x2c6>
 8012c8a:	2a6e      	cmp	r2, #110	; 0x6e
 8012c8c:	e7db      	b.n	8012c46 <_strtod_l+0x30e>
 8012c8e:	4990      	ldr	r1, [pc, #576]	; (8012ed0 <_strtod_l+0x598>)
 8012c90:	a817      	add	r0, sp, #92	; 0x5c
 8012c92:	f001 ff01 	bl	8014a98 <__match>
 8012c96:	2800      	cmp	r0, #0
 8012c98:	f43f aeb0 	beq.w	80129fc <_strtod_l+0xc4>
 8012c9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c9e:	498d      	ldr	r1, [pc, #564]	; (8012ed4 <_strtod_l+0x59c>)
 8012ca0:	3b01      	subs	r3, #1
 8012ca2:	a817      	add	r0, sp, #92	; 0x5c
 8012ca4:	9317      	str	r3, [sp, #92]	; 0x5c
 8012ca6:	f001 fef7 	bl	8014a98 <__match>
 8012caa:	b910      	cbnz	r0, 8012cb2 <_strtod_l+0x37a>
 8012cac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012cae:	3301      	adds	r3, #1
 8012cb0:	9317      	str	r3, [sp, #92]	; 0x5c
 8012cb2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8012ee4 <_strtod_l+0x5ac>
 8012cb6:	f04f 0a00 	mov.w	sl, #0
 8012cba:	e681      	b.n	80129c0 <_strtod_l+0x88>
 8012cbc:	4886      	ldr	r0, [pc, #536]	; (8012ed8 <_strtod_l+0x5a0>)
 8012cbe:	f002 fe6b 	bl	8015998 <nan>
 8012cc2:	ec5b ab10 	vmov	sl, fp, d0
 8012cc6:	e67b      	b.n	80129c0 <_strtod_l+0x88>
 8012cc8:	9b05      	ldr	r3, [sp, #20]
 8012cca:	9807      	ldr	r0, [sp, #28]
 8012ccc:	1af3      	subs	r3, r6, r3
 8012cce:	2f00      	cmp	r7, #0
 8012cd0:	bf08      	it	eq
 8012cd2:	462f      	moveq	r7, r5
 8012cd4:	2d10      	cmp	r5, #16
 8012cd6:	9306      	str	r3, [sp, #24]
 8012cd8:	46a8      	mov	r8, r5
 8012cda:	bfa8      	it	ge
 8012cdc:	f04f 0810 	movge.w	r8, #16
 8012ce0:	f7ed fc28 	bl	8000534 <__aeabi_ui2d>
 8012ce4:	2d09      	cmp	r5, #9
 8012ce6:	4682      	mov	sl, r0
 8012ce8:	468b      	mov	fp, r1
 8012cea:	dd13      	ble.n	8012d14 <_strtod_l+0x3dc>
 8012cec:	4b7b      	ldr	r3, [pc, #492]	; (8012edc <_strtod_l+0x5a4>)
 8012cee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012cf2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012cf6:	f7ed fc97 	bl	8000628 <__aeabi_dmul>
 8012cfa:	4682      	mov	sl, r0
 8012cfc:	4648      	mov	r0, r9
 8012cfe:	468b      	mov	fp, r1
 8012d00:	f7ed fc18 	bl	8000534 <__aeabi_ui2d>
 8012d04:	4602      	mov	r2, r0
 8012d06:	460b      	mov	r3, r1
 8012d08:	4650      	mov	r0, sl
 8012d0a:	4659      	mov	r1, fp
 8012d0c:	f7ed fad6 	bl	80002bc <__adddf3>
 8012d10:	4682      	mov	sl, r0
 8012d12:	468b      	mov	fp, r1
 8012d14:	2d0f      	cmp	r5, #15
 8012d16:	dc38      	bgt.n	8012d8a <_strtod_l+0x452>
 8012d18:	9b06      	ldr	r3, [sp, #24]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	f43f ae50 	beq.w	80129c0 <_strtod_l+0x88>
 8012d20:	dd24      	ble.n	8012d6c <_strtod_l+0x434>
 8012d22:	2b16      	cmp	r3, #22
 8012d24:	dc0b      	bgt.n	8012d3e <_strtod_l+0x406>
 8012d26:	496d      	ldr	r1, [pc, #436]	; (8012edc <_strtod_l+0x5a4>)
 8012d28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d30:	4652      	mov	r2, sl
 8012d32:	465b      	mov	r3, fp
 8012d34:	f7ed fc78 	bl	8000628 <__aeabi_dmul>
 8012d38:	4682      	mov	sl, r0
 8012d3a:	468b      	mov	fp, r1
 8012d3c:	e640      	b.n	80129c0 <_strtod_l+0x88>
 8012d3e:	9a06      	ldr	r2, [sp, #24]
 8012d40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8012d44:	4293      	cmp	r3, r2
 8012d46:	db20      	blt.n	8012d8a <_strtod_l+0x452>
 8012d48:	4c64      	ldr	r4, [pc, #400]	; (8012edc <_strtod_l+0x5a4>)
 8012d4a:	f1c5 050f 	rsb	r5, r5, #15
 8012d4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012d52:	4652      	mov	r2, sl
 8012d54:	465b      	mov	r3, fp
 8012d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d5a:	f7ed fc65 	bl	8000628 <__aeabi_dmul>
 8012d5e:	9b06      	ldr	r3, [sp, #24]
 8012d60:	1b5d      	subs	r5, r3, r5
 8012d62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012d66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012d6a:	e7e3      	b.n	8012d34 <_strtod_l+0x3fc>
 8012d6c:	9b06      	ldr	r3, [sp, #24]
 8012d6e:	3316      	adds	r3, #22
 8012d70:	db0b      	blt.n	8012d8a <_strtod_l+0x452>
 8012d72:	9b05      	ldr	r3, [sp, #20]
 8012d74:	1b9e      	subs	r6, r3, r6
 8012d76:	4b59      	ldr	r3, [pc, #356]	; (8012edc <_strtod_l+0x5a4>)
 8012d78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8012d7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012d80:	4650      	mov	r0, sl
 8012d82:	4659      	mov	r1, fp
 8012d84:	f7ed fd7a 	bl	800087c <__aeabi_ddiv>
 8012d88:	e7d6      	b.n	8012d38 <_strtod_l+0x400>
 8012d8a:	9b06      	ldr	r3, [sp, #24]
 8012d8c:	eba5 0808 	sub.w	r8, r5, r8
 8012d90:	4498      	add	r8, r3
 8012d92:	f1b8 0f00 	cmp.w	r8, #0
 8012d96:	dd74      	ble.n	8012e82 <_strtod_l+0x54a>
 8012d98:	f018 030f 	ands.w	r3, r8, #15
 8012d9c:	d00a      	beq.n	8012db4 <_strtod_l+0x47c>
 8012d9e:	494f      	ldr	r1, [pc, #316]	; (8012edc <_strtod_l+0x5a4>)
 8012da0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012da4:	4652      	mov	r2, sl
 8012da6:	465b      	mov	r3, fp
 8012da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012dac:	f7ed fc3c 	bl	8000628 <__aeabi_dmul>
 8012db0:	4682      	mov	sl, r0
 8012db2:	468b      	mov	fp, r1
 8012db4:	f038 080f 	bics.w	r8, r8, #15
 8012db8:	d04f      	beq.n	8012e5a <_strtod_l+0x522>
 8012dba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012dbe:	dd22      	ble.n	8012e06 <_strtod_l+0x4ce>
 8012dc0:	2500      	movs	r5, #0
 8012dc2:	462e      	mov	r6, r5
 8012dc4:	9507      	str	r5, [sp, #28]
 8012dc6:	9505      	str	r5, [sp, #20]
 8012dc8:	2322      	movs	r3, #34	; 0x22
 8012dca:	f8df b118 	ldr.w	fp, [pc, #280]	; 8012ee4 <_strtod_l+0x5ac>
 8012dce:	6023      	str	r3, [r4, #0]
 8012dd0:	f04f 0a00 	mov.w	sl, #0
 8012dd4:	9b07      	ldr	r3, [sp, #28]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	f43f adf2 	beq.w	80129c0 <_strtod_l+0x88>
 8012ddc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012dde:	4620      	mov	r0, r4
 8012de0:	f001 ff86 	bl	8014cf0 <_Bfree>
 8012de4:	9905      	ldr	r1, [sp, #20]
 8012de6:	4620      	mov	r0, r4
 8012de8:	f001 ff82 	bl	8014cf0 <_Bfree>
 8012dec:	4631      	mov	r1, r6
 8012dee:	4620      	mov	r0, r4
 8012df0:	f001 ff7e 	bl	8014cf0 <_Bfree>
 8012df4:	9907      	ldr	r1, [sp, #28]
 8012df6:	4620      	mov	r0, r4
 8012df8:	f001 ff7a 	bl	8014cf0 <_Bfree>
 8012dfc:	4629      	mov	r1, r5
 8012dfe:	4620      	mov	r0, r4
 8012e00:	f001 ff76 	bl	8014cf0 <_Bfree>
 8012e04:	e5dc      	b.n	80129c0 <_strtod_l+0x88>
 8012e06:	4b36      	ldr	r3, [pc, #216]	; (8012ee0 <_strtod_l+0x5a8>)
 8012e08:	9304      	str	r3, [sp, #16]
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012e10:	4650      	mov	r0, sl
 8012e12:	4659      	mov	r1, fp
 8012e14:	4699      	mov	r9, r3
 8012e16:	f1b8 0f01 	cmp.w	r8, #1
 8012e1a:	dc21      	bgt.n	8012e60 <_strtod_l+0x528>
 8012e1c:	b10b      	cbz	r3, 8012e22 <_strtod_l+0x4ea>
 8012e1e:	4682      	mov	sl, r0
 8012e20:	468b      	mov	fp, r1
 8012e22:	4b2f      	ldr	r3, [pc, #188]	; (8012ee0 <_strtod_l+0x5a8>)
 8012e24:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012e28:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012e2c:	4652      	mov	r2, sl
 8012e2e:	465b      	mov	r3, fp
 8012e30:	e9d9 0100 	ldrd	r0, r1, [r9]
 8012e34:	f7ed fbf8 	bl	8000628 <__aeabi_dmul>
 8012e38:	4b2a      	ldr	r3, [pc, #168]	; (8012ee4 <_strtod_l+0x5ac>)
 8012e3a:	460a      	mov	r2, r1
 8012e3c:	400b      	ands	r3, r1
 8012e3e:	492a      	ldr	r1, [pc, #168]	; (8012ee8 <_strtod_l+0x5b0>)
 8012e40:	428b      	cmp	r3, r1
 8012e42:	4682      	mov	sl, r0
 8012e44:	d8bc      	bhi.n	8012dc0 <_strtod_l+0x488>
 8012e46:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012e4a:	428b      	cmp	r3, r1
 8012e4c:	bf86      	itte	hi
 8012e4e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8012eec <_strtod_l+0x5b4>
 8012e52:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8012e56:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	9304      	str	r3, [sp, #16]
 8012e5e:	e084      	b.n	8012f6a <_strtod_l+0x632>
 8012e60:	f018 0f01 	tst.w	r8, #1
 8012e64:	d005      	beq.n	8012e72 <_strtod_l+0x53a>
 8012e66:	9b04      	ldr	r3, [sp, #16]
 8012e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6c:	f7ed fbdc 	bl	8000628 <__aeabi_dmul>
 8012e70:	2301      	movs	r3, #1
 8012e72:	9a04      	ldr	r2, [sp, #16]
 8012e74:	3208      	adds	r2, #8
 8012e76:	f109 0901 	add.w	r9, r9, #1
 8012e7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012e7e:	9204      	str	r2, [sp, #16]
 8012e80:	e7c9      	b.n	8012e16 <_strtod_l+0x4de>
 8012e82:	d0ea      	beq.n	8012e5a <_strtod_l+0x522>
 8012e84:	f1c8 0800 	rsb	r8, r8, #0
 8012e88:	f018 020f 	ands.w	r2, r8, #15
 8012e8c:	d00a      	beq.n	8012ea4 <_strtod_l+0x56c>
 8012e8e:	4b13      	ldr	r3, [pc, #76]	; (8012edc <_strtod_l+0x5a4>)
 8012e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e94:	4650      	mov	r0, sl
 8012e96:	4659      	mov	r1, fp
 8012e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9c:	f7ed fcee 	bl	800087c <__aeabi_ddiv>
 8012ea0:	4682      	mov	sl, r0
 8012ea2:	468b      	mov	fp, r1
 8012ea4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012ea8:	d0d7      	beq.n	8012e5a <_strtod_l+0x522>
 8012eaa:	f1b8 0f1f 	cmp.w	r8, #31
 8012eae:	dd1f      	ble.n	8012ef0 <_strtod_l+0x5b8>
 8012eb0:	2500      	movs	r5, #0
 8012eb2:	462e      	mov	r6, r5
 8012eb4:	9507      	str	r5, [sp, #28]
 8012eb6:	9505      	str	r5, [sp, #20]
 8012eb8:	2322      	movs	r3, #34	; 0x22
 8012eba:	f04f 0a00 	mov.w	sl, #0
 8012ebe:	f04f 0b00 	mov.w	fp, #0
 8012ec2:	6023      	str	r3, [r4, #0]
 8012ec4:	e786      	b.n	8012dd4 <_strtod_l+0x49c>
 8012ec6:	bf00      	nop
 8012ec8:	080163e1 	.word	0x080163e1
 8012ecc:	08016424 	.word	0x08016424
 8012ed0:	080163d9 	.word	0x080163d9
 8012ed4:	08016564 	.word	0x08016564
 8012ed8:	08016810 	.word	0x08016810
 8012edc:	080166f0 	.word	0x080166f0
 8012ee0:	080166c8 	.word	0x080166c8
 8012ee4:	7ff00000 	.word	0x7ff00000
 8012ee8:	7ca00000 	.word	0x7ca00000
 8012eec:	7fefffff 	.word	0x7fefffff
 8012ef0:	f018 0310 	ands.w	r3, r8, #16
 8012ef4:	bf18      	it	ne
 8012ef6:	236a      	movne	r3, #106	; 0x6a
 8012ef8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80132a8 <_strtod_l+0x970>
 8012efc:	9304      	str	r3, [sp, #16]
 8012efe:	4650      	mov	r0, sl
 8012f00:	4659      	mov	r1, fp
 8012f02:	2300      	movs	r3, #0
 8012f04:	f018 0f01 	tst.w	r8, #1
 8012f08:	d004      	beq.n	8012f14 <_strtod_l+0x5dc>
 8012f0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012f0e:	f7ed fb8b 	bl	8000628 <__aeabi_dmul>
 8012f12:	2301      	movs	r3, #1
 8012f14:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012f18:	f109 0908 	add.w	r9, r9, #8
 8012f1c:	d1f2      	bne.n	8012f04 <_strtod_l+0x5cc>
 8012f1e:	b10b      	cbz	r3, 8012f24 <_strtod_l+0x5ec>
 8012f20:	4682      	mov	sl, r0
 8012f22:	468b      	mov	fp, r1
 8012f24:	9b04      	ldr	r3, [sp, #16]
 8012f26:	b1c3      	cbz	r3, 8012f5a <_strtod_l+0x622>
 8012f28:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012f2c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	4659      	mov	r1, fp
 8012f34:	dd11      	ble.n	8012f5a <_strtod_l+0x622>
 8012f36:	2b1f      	cmp	r3, #31
 8012f38:	f340 8124 	ble.w	8013184 <_strtod_l+0x84c>
 8012f3c:	2b34      	cmp	r3, #52	; 0x34
 8012f3e:	bfde      	ittt	le
 8012f40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012f44:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8012f48:	fa03 f202 	lslle.w	r2, r3, r2
 8012f4c:	f04f 0a00 	mov.w	sl, #0
 8012f50:	bfcc      	ite	gt
 8012f52:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012f56:	ea02 0b01 	andle.w	fp, r2, r1
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	4650      	mov	r0, sl
 8012f60:	4659      	mov	r1, fp
 8012f62:	f7ed fdc9 	bl	8000af8 <__aeabi_dcmpeq>
 8012f66:	2800      	cmp	r0, #0
 8012f68:	d1a2      	bne.n	8012eb0 <_strtod_l+0x578>
 8012f6a:	9b07      	ldr	r3, [sp, #28]
 8012f6c:	9300      	str	r3, [sp, #0]
 8012f6e:	9908      	ldr	r1, [sp, #32]
 8012f70:	462b      	mov	r3, r5
 8012f72:	463a      	mov	r2, r7
 8012f74:	4620      	mov	r0, r4
 8012f76:	f001 ff23 	bl	8014dc0 <__s2b>
 8012f7a:	9007      	str	r0, [sp, #28]
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	f43f af1f 	beq.w	8012dc0 <_strtod_l+0x488>
 8012f82:	9b05      	ldr	r3, [sp, #20]
 8012f84:	1b9e      	subs	r6, r3, r6
 8012f86:	9b06      	ldr	r3, [sp, #24]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	bfb4      	ite	lt
 8012f8c:	4633      	movlt	r3, r6
 8012f8e:	2300      	movge	r3, #0
 8012f90:	930c      	str	r3, [sp, #48]	; 0x30
 8012f92:	9b06      	ldr	r3, [sp, #24]
 8012f94:	2500      	movs	r5, #0
 8012f96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012f9a:	9312      	str	r3, [sp, #72]	; 0x48
 8012f9c:	462e      	mov	r6, r5
 8012f9e:	9b07      	ldr	r3, [sp, #28]
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	6859      	ldr	r1, [r3, #4]
 8012fa4:	f001 fe64 	bl	8014c70 <_Balloc>
 8012fa8:	9005      	str	r0, [sp, #20]
 8012faa:	2800      	cmp	r0, #0
 8012fac:	f43f af0c 	beq.w	8012dc8 <_strtod_l+0x490>
 8012fb0:	9b07      	ldr	r3, [sp, #28]
 8012fb2:	691a      	ldr	r2, [r3, #16]
 8012fb4:	3202      	adds	r2, #2
 8012fb6:	f103 010c 	add.w	r1, r3, #12
 8012fba:	0092      	lsls	r2, r2, #2
 8012fbc:	300c      	adds	r0, #12
 8012fbe:	f7fe fc60 	bl	8011882 <memcpy>
 8012fc2:	ec4b ab10 	vmov	d0, sl, fp
 8012fc6:	aa1a      	add	r2, sp, #104	; 0x68
 8012fc8:	a919      	add	r1, sp, #100	; 0x64
 8012fca:	4620      	mov	r0, r4
 8012fcc:	f002 fa3e 	bl	801544c <__d2b>
 8012fd0:	ec4b ab18 	vmov	d8, sl, fp
 8012fd4:	9018      	str	r0, [sp, #96]	; 0x60
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	f43f aef6 	beq.w	8012dc8 <_strtod_l+0x490>
 8012fdc:	2101      	movs	r1, #1
 8012fde:	4620      	mov	r0, r4
 8012fe0:	f001 ff88 	bl	8014ef4 <__i2b>
 8012fe4:	4606      	mov	r6, r0
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	f43f aeee 	beq.w	8012dc8 <_strtod_l+0x490>
 8012fec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012fee:	9904      	ldr	r1, [sp, #16]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	bfab      	itete	ge
 8012ff4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8012ff6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8012ff8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012ffa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8012ffe:	bfac      	ite	ge
 8013000:	eb03 0902 	addge.w	r9, r3, r2
 8013004:	1ad7      	sublt	r7, r2, r3
 8013006:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013008:	eba3 0801 	sub.w	r8, r3, r1
 801300c:	4490      	add	r8, r2
 801300e:	4ba1      	ldr	r3, [pc, #644]	; (8013294 <_strtod_l+0x95c>)
 8013010:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8013014:	4598      	cmp	r8, r3
 8013016:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801301a:	f280 80c7 	bge.w	80131ac <_strtod_l+0x874>
 801301e:	eba3 0308 	sub.w	r3, r3, r8
 8013022:	2b1f      	cmp	r3, #31
 8013024:	eba2 0203 	sub.w	r2, r2, r3
 8013028:	f04f 0101 	mov.w	r1, #1
 801302c:	f300 80b1 	bgt.w	8013192 <_strtod_l+0x85a>
 8013030:	fa01 f303 	lsl.w	r3, r1, r3
 8013034:	930d      	str	r3, [sp, #52]	; 0x34
 8013036:	2300      	movs	r3, #0
 8013038:	9308      	str	r3, [sp, #32]
 801303a:	eb09 0802 	add.w	r8, r9, r2
 801303e:	9b04      	ldr	r3, [sp, #16]
 8013040:	45c1      	cmp	r9, r8
 8013042:	4417      	add	r7, r2
 8013044:	441f      	add	r7, r3
 8013046:	464b      	mov	r3, r9
 8013048:	bfa8      	it	ge
 801304a:	4643      	movge	r3, r8
 801304c:	42bb      	cmp	r3, r7
 801304e:	bfa8      	it	ge
 8013050:	463b      	movge	r3, r7
 8013052:	2b00      	cmp	r3, #0
 8013054:	bfc2      	ittt	gt
 8013056:	eba8 0803 	subgt.w	r8, r8, r3
 801305a:	1aff      	subgt	r7, r7, r3
 801305c:	eba9 0903 	subgt.w	r9, r9, r3
 8013060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013062:	2b00      	cmp	r3, #0
 8013064:	dd17      	ble.n	8013096 <_strtod_l+0x75e>
 8013066:	4631      	mov	r1, r6
 8013068:	461a      	mov	r2, r3
 801306a:	4620      	mov	r0, r4
 801306c:	f002 f802 	bl	8015074 <__pow5mult>
 8013070:	4606      	mov	r6, r0
 8013072:	2800      	cmp	r0, #0
 8013074:	f43f aea8 	beq.w	8012dc8 <_strtod_l+0x490>
 8013078:	4601      	mov	r1, r0
 801307a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801307c:	4620      	mov	r0, r4
 801307e:	f001 ff4f 	bl	8014f20 <__multiply>
 8013082:	900b      	str	r0, [sp, #44]	; 0x2c
 8013084:	2800      	cmp	r0, #0
 8013086:	f43f ae9f 	beq.w	8012dc8 <_strtod_l+0x490>
 801308a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801308c:	4620      	mov	r0, r4
 801308e:	f001 fe2f 	bl	8014cf0 <_Bfree>
 8013092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013094:	9318      	str	r3, [sp, #96]	; 0x60
 8013096:	f1b8 0f00 	cmp.w	r8, #0
 801309a:	f300 808c 	bgt.w	80131b6 <_strtod_l+0x87e>
 801309e:	9b06      	ldr	r3, [sp, #24]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	dd08      	ble.n	80130b6 <_strtod_l+0x77e>
 80130a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80130a6:	9905      	ldr	r1, [sp, #20]
 80130a8:	4620      	mov	r0, r4
 80130aa:	f001 ffe3 	bl	8015074 <__pow5mult>
 80130ae:	9005      	str	r0, [sp, #20]
 80130b0:	2800      	cmp	r0, #0
 80130b2:	f43f ae89 	beq.w	8012dc8 <_strtod_l+0x490>
 80130b6:	2f00      	cmp	r7, #0
 80130b8:	dd08      	ble.n	80130cc <_strtod_l+0x794>
 80130ba:	9905      	ldr	r1, [sp, #20]
 80130bc:	463a      	mov	r2, r7
 80130be:	4620      	mov	r0, r4
 80130c0:	f002 f832 	bl	8015128 <__lshift>
 80130c4:	9005      	str	r0, [sp, #20]
 80130c6:	2800      	cmp	r0, #0
 80130c8:	f43f ae7e 	beq.w	8012dc8 <_strtod_l+0x490>
 80130cc:	f1b9 0f00 	cmp.w	r9, #0
 80130d0:	dd08      	ble.n	80130e4 <_strtod_l+0x7ac>
 80130d2:	4631      	mov	r1, r6
 80130d4:	464a      	mov	r2, r9
 80130d6:	4620      	mov	r0, r4
 80130d8:	f002 f826 	bl	8015128 <__lshift>
 80130dc:	4606      	mov	r6, r0
 80130de:	2800      	cmp	r0, #0
 80130e0:	f43f ae72 	beq.w	8012dc8 <_strtod_l+0x490>
 80130e4:	9a05      	ldr	r2, [sp, #20]
 80130e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80130e8:	4620      	mov	r0, r4
 80130ea:	f002 f8a9 	bl	8015240 <__mdiff>
 80130ee:	4605      	mov	r5, r0
 80130f0:	2800      	cmp	r0, #0
 80130f2:	f43f ae69 	beq.w	8012dc8 <_strtod_l+0x490>
 80130f6:	68c3      	ldr	r3, [r0, #12]
 80130f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80130fa:	2300      	movs	r3, #0
 80130fc:	60c3      	str	r3, [r0, #12]
 80130fe:	4631      	mov	r1, r6
 8013100:	f002 f882 	bl	8015208 <__mcmp>
 8013104:	2800      	cmp	r0, #0
 8013106:	da60      	bge.n	80131ca <_strtod_l+0x892>
 8013108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801310a:	ea53 030a 	orrs.w	r3, r3, sl
 801310e:	f040 8082 	bne.w	8013216 <_strtod_l+0x8de>
 8013112:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013116:	2b00      	cmp	r3, #0
 8013118:	d17d      	bne.n	8013216 <_strtod_l+0x8de>
 801311a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801311e:	0d1b      	lsrs	r3, r3, #20
 8013120:	051b      	lsls	r3, r3, #20
 8013122:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013126:	d976      	bls.n	8013216 <_strtod_l+0x8de>
 8013128:	696b      	ldr	r3, [r5, #20]
 801312a:	b913      	cbnz	r3, 8013132 <_strtod_l+0x7fa>
 801312c:	692b      	ldr	r3, [r5, #16]
 801312e:	2b01      	cmp	r3, #1
 8013130:	dd71      	ble.n	8013216 <_strtod_l+0x8de>
 8013132:	4629      	mov	r1, r5
 8013134:	2201      	movs	r2, #1
 8013136:	4620      	mov	r0, r4
 8013138:	f001 fff6 	bl	8015128 <__lshift>
 801313c:	4631      	mov	r1, r6
 801313e:	4605      	mov	r5, r0
 8013140:	f002 f862 	bl	8015208 <__mcmp>
 8013144:	2800      	cmp	r0, #0
 8013146:	dd66      	ble.n	8013216 <_strtod_l+0x8de>
 8013148:	9904      	ldr	r1, [sp, #16]
 801314a:	4a53      	ldr	r2, [pc, #332]	; (8013298 <_strtod_l+0x960>)
 801314c:	465b      	mov	r3, fp
 801314e:	2900      	cmp	r1, #0
 8013150:	f000 8081 	beq.w	8013256 <_strtod_l+0x91e>
 8013154:	ea02 010b 	and.w	r1, r2, fp
 8013158:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801315c:	dc7b      	bgt.n	8013256 <_strtod_l+0x91e>
 801315e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013162:	f77f aea9 	ble.w	8012eb8 <_strtod_l+0x580>
 8013166:	4b4d      	ldr	r3, [pc, #308]	; (801329c <_strtod_l+0x964>)
 8013168:	4650      	mov	r0, sl
 801316a:	4659      	mov	r1, fp
 801316c:	2200      	movs	r2, #0
 801316e:	f7ed fa5b 	bl	8000628 <__aeabi_dmul>
 8013172:	460b      	mov	r3, r1
 8013174:	4303      	orrs	r3, r0
 8013176:	bf08      	it	eq
 8013178:	2322      	moveq	r3, #34	; 0x22
 801317a:	4682      	mov	sl, r0
 801317c:	468b      	mov	fp, r1
 801317e:	bf08      	it	eq
 8013180:	6023      	streq	r3, [r4, #0]
 8013182:	e62b      	b.n	8012ddc <_strtod_l+0x4a4>
 8013184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013188:	fa02 f303 	lsl.w	r3, r2, r3
 801318c:	ea03 0a0a 	and.w	sl, r3, sl
 8013190:	e6e3      	b.n	8012f5a <_strtod_l+0x622>
 8013192:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013196:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801319a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801319e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80131a2:	fa01 f308 	lsl.w	r3, r1, r8
 80131a6:	9308      	str	r3, [sp, #32]
 80131a8:	910d      	str	r1, [sp, #52]	; 0x34
 80131aa:	e746      	b.n	801303a <_strtod_l+0x702>
 80131ac:	2300      	movs	r3, #0
 80131ae:	9308      	str	r3, [sp, #32]
 80131b0:	2301      	movs	r3, #1
 80131b2:	930d      	str	r3, [sp, #52]	; 0x34
 80131b4:	e741      	b.n	801303a <_strtod_l+0x702>
 80131b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80131b8:	4642      	mov	r2, r8
 80131ba:	4620      	mov	r0, r4
 80131bc:	f001 ffb4 	bl	8015128 <__lshift>
 80131c0:	9018      	str	r0, [sp, #96]	; 0x60
 80131c2:	2800      	cmp	r0, #0
 80131c4:	f47f af6b 	bne.w	801309e <_strtod_l+0x766>
 80131c8:	e5fe      	b.n	8012dc8 <_strtod_l+0x490>
 80131ca:	465f      	mov	r7, fp
 80131cc:	d16e      	bne.n	80132ac <_strtod_l+0x974>
 80131ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80131d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80131d4:	b342      	cbz	r2, 8013228 <_strtod_l+0x8f0>
 80131d6:	4a32      	ldr	r2, [pc, #200]	; (80132a0 <_strtod_l+0x968>)
 80131d8:	4293      	cmp	r3, r2
 80131da:	d128      	bne.n	801322e <_strtod_l+0x8f6>
 80131dc:	9b04      	ldr	r3, [sp, #16]
 80131de:	4651      	mov	r1, sl
 80131e0:	b1eb      	cbz	r3, 801321e <_strtod_l+0x8e6>
 80131e2:	4b2d      	ldr	r3, [pc, #180]	; (8013298 <_strtod_l+0x960>)
 80131e4:	403b      	ands	r3, r7
 80131e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80131ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131ee:	d819      	bhi.n	8013224 <_strtod_l+0x8ec>
 80131f0:	0d1b      	lsrs	r3, r3, #20
 80131f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80131f6:	fa02 f303 	lsl.w	r3, r2, r3
 80131fa:	4299      	cmp	r1, r3
 80131fc:	d117      	bne.n	801322e <_strtod_l+0x8f6>
 80131fe:	4b29      	ldr	r3, [pc, #164]	; (80132a4 <_strtod_l+0x96c>)
 8013200:	429f      	cmp	r7, r3
 8013202:	d102      	bne.n	801320a <_strtod_l+0x8d2>
 8013204:	3101      	adds	r1, #1
 8013206:	f43f addf 	beq.w	8012dc8 <_strtod_l+0x490>
 801320a:	4b23      	ldr	r3, [pc, #140]	; (8013298 <_strtod_l+0x960>)
 801320c:	403b      	ands	r3, r7
 801320e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013212:	f04f 0a00 	mov.w	sl, #0
 8013216:	9b04      	ldr	r3, [sp, #16]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d1a4      	bne.n	8013166 <_strtod_l+0x82e>
 801321c:	e5de      	b.n	8012ddc <_strtod_l+0x4a4>
 801321e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013222:	e7ea      	b.n	80131fa <_strtod_l+0x8c2>
 8013224:	4613      	mov	r3, r2
 8013226:	e7e8      	b.n	80131fa <_strtod_l+0x8c2>
 8013228:	ea53 030a 	orrs.w	r3, r3, sl
 801322c:	d08c      	beq.n	8013148 <_strtod_l+0x810>
 801322e:	9b08      	ldr	r3, [sp, #32]
 8013230:	b1db      	cbz	r3, 801326a <_strtod_l+0x932>
 8013232:	423b      	tst	r3, r7
 8013234:	d0ef      	beq.n	8013216 <_strtod_l+0x8de>
 8013236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013238:	9a04      	ldr	r2, [sp, #16]
 801323a:	4650      	mov	r0, sl
 801323c:	4659      	mov	r1, fp
 801323e:	b1c3      	cbz	r3, 8013272 <_strtod_l+0x93a>
 8013240:	f7ff fb5b 	bl	80128fa <sulp>
 8013244:	4602      	mov	r2, r0
 8013246:	460b      	mov	r3, r1
 8013248:	ec51 0b18 	vmov	r0, r1, d8
 801324c:	f7ed f836 	bl	80002bc <__adddf3>
 8013250:	4682      	mov	sl, r0
 8013252:	468b      	mov	fp, r1
 8013254:	e7df      	b.n	8013216 <_strtod_l+0x8de>
 8013256:	4013      	ands	r3, r2
 8013258:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801325c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013260:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013264:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8013268:	e7d5      	b.n	8013216 <_strtod_l+0x8de>
 801326a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801326c:	ea13 0f0a 	tst.w	r3, sl
 8013270:	e7e0      	b.n	8013234 <_strtod_l+0x8fc>
 8013272:	f7ff fb42 	bl	80128fa <sulp>
 8013276:	4602      	mov	r2, r0
 8013278:	460b      	mov	r3, r1
 801327a:	ec51 0b18 	vmov	r0, r1, d8
 801327e:	f7ed f81b 	bl	80002b8 <__aeabi_dsub>
 8013282:	2200      	movs	r2, #0
 8013284:	2300      	movs	r3, #0
 8013286:	4682      	mov	sl, r0
 8013288:	468b      	mov	fp, r1
 801328a:	f7ed fc35 	bl	8000af8 <__aeabi_dcmpeq>
 801328e:	2800      	cmp	r0, #0
 8013290:	d0c1      	beq.n	8013216 <_strtod_l+0x8de>
 8013292:	e611      	b.n	8012eb8 <_strtod_l+0x580>
 8013294:	fffffc02 	.word	0xfffffc02
 8013298:	7ff00000 	.word	0x7ff00000
 801329c:	39500000 	.word	0x39500000
 80132a0:	000fffff 	.word	0x000fffff
 80132a4:	7fefffff 	.word	0x7fefffff
 80132a8:	08016438 	.word	0x08016438
 80132ac:	4631      	mov	r1, r6
 80132ae:	4628      	mov	r0, r5
 80132b0:	f002 f928 	bl	8015504 <__ratio>
 80132b4:	ec59 8b10 	vmov	r8, r9, d0
 80132b8:	ee10 0a10 	vmov	r0, s0
 80132bc:	2200      	movs	r2, #0
 80132be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80132c2:	4649      	mov	r1, r9
 80132c4:	f7ed fc2c 	bl	8000b20 <__aeabi_dcmple>
 80132c8:	2800      	cmp	r0, #0
 80132ca:	d07a      	beq.n	80133c2 <_strtod_l+0xa8a>
 80132cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d04a      	beq.n	8013368 <_strtod_l+0xa30>
 80132d2:	4b95      	ldr	r3, [pc, #596]	; (8013528 <_strtod_l+0xbf0>)
 80132d4:	2200      	movs	r2, #0
 80132d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80132da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013528 <_strtod_l+0xbf0>
 80132de:	f04f 0800 	mov.w	r8, #0
 80132e2:	4b92      	ldr	r3, [pc, #584]	; (801352c <_strtod_l+0xbf4>)
 80132e4:	403b      	ands	r3, r7
 80132e6:	930d      	str	r3, [sp, #52]	; 0x34
 80132e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132ea:	4b91      	ldr	r3, [pc, #580]	; (8013530 <_strtod_l+0xbf8>)
 80132ec:	429a      	cmp	r2, r3
 80132ee:	f040 80b0 	bne.w	8013452 <_strtod_l+0xb1a>
 80132f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80132f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80132fa:	ec4b ab10 	vmov	d0, sl, fp
 80132fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013302:	f002 f827 	bl	8015354 <__ulp>
 8013306:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801330a:	ec53 2b10 	vmov	r2, r3, d0
 801330e:	f7ed f98b 	bl	8000628 <__aeabi_dmul>
 8013312:	4652      	mov	r2, sl
 8013314:	465b      	mov	r3, fp
 8013316:	f7ec ffd1 	bl	80002bc <__adddf3>
 801331a:	460b      	mov	r3, r1
 801331c:	4983      	ldr	r1, [pc, #524]	; (801352c <_strtod_l+0xbf4>)
 801331e:	4a85      	ldr	r2, [pc, #532]	; (8013534 <_strtod_l+0xbfc>)
 8013320:	4019      	ands	r1, r3
 8013322:	4291      	cmp	r1, r2
 8013324:	4682      	mov	sl, r0
 8013326:	d960      	bls.n	80133ea <_strtod_l+0xab2>
 8013328:	ee18 3a90 	vmov	r3, s17
 801332c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013330:	4293      	cmp	r3, r2
 8013332:	d104      	bne.n	801333e <_strtod_l+0xa06>
 8013334:	ee18 3a10 	vmov	r3, s16
 8013338:	3301      	adds	r3, #1
 801333a:	f43f ad45 	beq.w	8012dc8 <_strtod_l+0x490>
 801333e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8013540 <_strtod_l+0xc08>
 8013342:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8013346:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013348:	4620      	mov	r0, r4
 801334a:	f001 fcd1 	bl	8014cf0 <_Bfree>
 801334e:	9905      	ldr	r1, [sp, #20]
 8013350:	4620      	mov	r0, r4
 8013352:	f001 fccd 	bl	8014cf0 <_Bfree>
 8013356:	4631      	mov	r1, r6
 8013358:	4620      	mov	r0, r4
 801335a:	f001 fcc9 	bl	8014cf0 <_Bfree>
 801335e:	4629      	mov	r1, r5
 8013360:	4620      	mov	r0, r4
 8013362:	f001 fcc5 	bl	8014cf0 <_Bfree>
 8013366:	e61a      	b.n	8012f9e <_strtod_l+0x666>
 8013368:	f1ba 0f00 	cmp.w	sl, #0
 801336c:	d11b      	bne.n	80133a6 <_strtod_l+0xa6e>
 801336e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013372:	b9f3      	cbnz	r3, 80133b2 <_strtod_l+0xa7a>
 8013374:	4b6c      	ldr	r3, [pc, #432]	; (8013528 <_strtod_l+0xbf0>)
 8013376:	2200      	movs	r2, #0
 8013378:	4640      	mov	r0, r8
 801337a:	4649      	mov	r1, r9
 801337c:	f7ed fbc6 	bl	8000b0c <__aeabi_dcmplt>
 8013380:	b9d0      	cbnz	r0, 80133b8 <_strtod_l+0xa80>
 8013382:	4640      	mov	r0, r8
 8013384:	4649      	mov	r1, r9
 8013386:	4b6c      	ldr	r3, [pc, #432]	; (8013538 <_strtod_l+0xc00>)
 8013388:	2200      	movs	r2, #0
 801338a:	f7ed f94d 	bl	8000628 <__aeabi_dmul>
 801338e:	4680      	mov	r8, r0
 8013390:	4689      	mov	r9, r1
 8013392:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013396:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801339a:	9315      	str	r3, [sp, #84]	; 0x54
 801339c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80133a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80133a4:	e79d      	b.n	80132e2 <_strtod_l+0x9aa>
 80133a6:	f1ba 0f01 	cmp.w	sl, #1
 80133aa:	d102      	bne.n	80133b2 <_strtod_l+0xa7a>
 80133ac:	2f00      	cmp	r7, #0
 80133ae:	f43f ad83 	beq.w	8012eb8 <_strtod_l+0x580>
 80133b2:	4b62      	ldr	r3, [pc, #392]	; (801353c <_strtod_l+0xc04>)
 80133b4:	2200      	movs	r2, #0
 80133b6:	e78e      	b.n	80132d6 <_strtod_l+0x99e>
 80133b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8013538 <_strtod_l+0xc00>
 80133bc:	f04f 0800 	mov.w	r8, #0
 80133c0:	e7e7      	b.n	8013392 <_strtod_l+0xa5a>
 80133c2:	4b5d      	ldr	r3, [pc, #372]	; (8013538 <_strtod_l+0xc00>)
 80133c4:	4640      	mov	r0, r8
 80133c6:	4649      	mov	r1, r9
 80133c8:	2200      	movs	r2, #0
 80133ca:	f7ed f92d 	bl	8000628 <__aeabi_dmul>
 80133ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133d0:	4680      	mov	r8, r0
 80133d2:	4689      	mov	r9, r1
 80133d4:	b933      	cbnz	r3, 80133e4 <_strtod_l+0xaac>
 80133d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80133da:	900e      	str	r0, [sp, #56]	; 0x38
 80133dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80133de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80133e2:	e7dd      	b.n	80133a0 <_strtod_l+0xa68>
 80133e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80133e8:	e7f9      	b.n	80133de <_strtod_l+0xaa6>
 80133ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80133ee:	9b04      	ldr	r3, [sp, #16]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d1a8      	bne.n	8013346 <_strtod_l+0xa0e>
 80133f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80133f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80133fa:	0d1b      	lsrs	r3, r3, #20
 80133fc:	051b      	lsls	r3, r3, #20
 80133fe:	429a      	cmp	r2, r3
 8013400:	d1a1      	bne.n	8013346 <_strtod_l+0xa0e>
 8013402:	4640      	mov	r0, r8
 8013404:	4649      	mov	r1, r9
 8013406:	f7ed fc57 	bl	8000cb8 <__aeabi_d2lz>
 801340a:	f7ed f8df 	bl	80005cc <__aeabi_l2d>
 801340e:	4602      	mov	r2, r0
 8013410:	460b      	mov	r3, r1
 8013412:	4640      	mov	r0, r8
 8013414:	4649      	mov	r1, r9
 8013416:	f7ec ff4f 	bl	80002b8 <__aeabi_dsub>
 801341a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801341c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013420:	ea43 030a 	orr.w	r3, r3, sl
 8013424:	4313      	orrs	r3, r2
 8013426:	4680      	mov	r8, r0
 8013428:	4689      	mov	r9, r1
 801342a:	d055      	beq.n	80134d8 <_strtod_l+0xba0>
 801342c:	a336      	add	r3, pc, #216	; (adr r3, 8013508 <_strtod_l+0xbd0>)
 801342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013432:	f7ed fb6b 	bl	8000b0c <__aeabi_dcmplt>
 8013436:	2800      	cmp	r0, #0
 8013438:	f47f acd0 	bne.w	8012ddc <_strtod_l+0x4a4>
 801343c:	a334      	add	r3, pc, #208	; (adr r3, 8013510 <_strtod_l+0xbd8>)
 801343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013442:	4640      	mov	r0, r8
 8013444:	4649      	mov	r1, r9
 8013446:	f7ed fb7f 	bl	8000b48 <__aeabi_dcmpgt>
 801344a:	2800      	cmp	r0, #0
 801344c:	f43f af7b 	beq.w	8013346 <_strtod_l+0xa0e>
 8013450:	e4c4      	b.n	8012ddc <_strtod_l+0x4a4>
 8013452:	9b04      	ldr	r3, [sp, #16]
 8013454:	b333      	cbz	r3, 80134a4 <_strtod_l+0xb6c>
 8013456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013458:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801345c:	d822      	bhi.n	80134a4 <_strtod_l+0xb6c>
 801345e:	a32e      	add	r3, pc, #184	; (adr r3, 8013518 <_strtod_l+0xbe0>)
 8013460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013464:	4640      	mov	r0, r8
 8013466:	4649      	mov	r1, r9
 8013468:	f7ed fb5a 	bl	8000b20 <__aeabi_dcmple>
 801346c:	b1a0      	cbz	r0, 8013498 <_strtod_l+0xb60>
 801346e:	4649      	mov	r1, r9
 8013470:	4640      	mov	r0, r8
 8013472:	f7ed fbb1 	bl	8000bd8 <__aeabi_d2uiz>
 8013476:	2801      	cmp	r0, #1
 8013478:	bf38      	it	cc
 801347a:	2001      	movcc	r0, #1
 801347c:	f7ed f85a 	bl	8000534 <__aeabi_ui2d>
 8013480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013482:	4680      	mov	r8, r0
 8013484:	4689      	mov	r9, r1
 8013486:	bb23      	cbnz	r3, 80134d2 <_strtod_l+0xb9a>
 8013488:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801348c:	9010      	str	r0, [sp, #64]	; 0x40
 801348e:	9311      	str	r3, [sp, #68]	; 0x44
 8013490:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013494:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801349a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801349c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80134a0:	1a9b      	subs	r3, r3, r2
 80134a2:	9309      	str	r3, [sp, #36]	; 0x24
 80134a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80134a8:	eeb0 0a48 	vmov.f32	s0, s16
 80134ac:	eef0 0a68 	vmov.f32	s1, s17
 80134b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80134b4:	f001 ff4e 	bl	8015354 <__ulp>
 80134b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80134bc:	ec53 2b10 	vmov	r2, r3, d0
 80134c0:	f7ed f8b2 	bl	8000628 <__aeabi_dmul>
 80134c4:	ec53 2b18 	vmov	r2, r3, d8
 80134c8:	f7ec fef8 	bl	80002bc <__adddf3>
 80134cc:	4682      	mov	sl, r0
 80134ce:	468b      	mov	fp, r1
 80134d0:	e78d      	b.n	80133ee <_strtod_l+0xab6>
 80134d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80134d6:	e7db      	b.n	8013490 <_strtod_l+0xb58>
 80134d8:	a311      	add	r3, pc, #68	; (adr r3, 8013520 <_strtod_l+0xbe8>)
 80134da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134de:	f7ed fb15 	bl	8000b0c <__aeabi_dcmplt>
 80134e2:	e7b2      	b.n	801344a <_strtod_l+0xb12>
 80134e4:	2300      	movs	r3, #0
 80134e6:	930a      	str	r3, [sp, #40]	; 0x28
 80134e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80134ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80134ec:	6013      	str	r3, [r2, #0]
 80134ee:	f7ff ba6b 	b.w	80129c8 <_strtod_l+0x90>
 80134f2:	2a65      	cmp	r2, #101	; 0x65
 80134f4:	f43f ab5f 	beq.w	8012bb6 <_strtod_l+0x27e>
 80134f8:	2a45      	cmp	r2, #69	; 0x45
 80134fa:	f43f ab5c 	beq.w	8012bb6 <_strtod_l+0x27e>
 80134fe:	2301      	movs	r3, #1
 8013500:	f7ff bb94 	b.w	8012c2c <_strtod_l+0x2f4>
 8013504:	f3af 8000 	nop.w
 8013508:	94a03595 	.word	0x94a03595
 801350c:	3fdfffff 	.word	0x3fdfffff
 8013510:	35afe535 	.word	0x35afe535
 8013514:	3fe00000 	.word	0x3fe00000
 8013518:	ffc00000 	.word	0xffc00000
 801351c:	41dfffff 	.word	0x41dfffff
 8013520:	94a03595 	.word	0x94a03595
 8013524:	3fcfffff 	.word	0x3fcfffff
 8013528:	3ff00000 	.word	0x3ff00000
 801352c:	7ff00000 	.word	0x7ff00000
 8013530:	7fe00000 	.word	0x7fe00000
 8013534:	7c9fffff 	.word	0x7c9fffff
 8013538:	3fe00000 	.word	0x3fe00000
 801353c:	bff00000 	.word	0xbff00000
 8013540:	7fefffff 	.word	0x7fefffff

08013544 <_strtod_r>:
 8013544:	4b01      	ldr	r3, [pc, #4]	; (801354c <_strtod_r+0x8>)
 8013546:	f7ff b9f7 	b.w	8012938 <_strtod_l>
 801354a:	bf00      	nop
 801354c:	20000078 	.word	0x20000078

08013550 <_strtol_l.constprop.0>:
 8013550:	2b01      	cmp	r3, #1
 8013552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013556:	d001      	beq.n	801355c <_strtol_l.constprop.0+0xc>
 8013558:	2b24      	cmp	r3, #36	; 0x24
 801355a:	d906      	bls.n	801356a <_strtol_l.constprop.0+0x1a>
 801355c:	f7fe f86e 	bl	801163c <__errno>
 8013560:	2316      	movs	r3, #22
 8013562:	6003      	str	r3, [r0, #0]
 8013564:	2000      	movs	r0, #0
 8013566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801356a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013650 <_strtol_l.constprop.0+0x100>
 801356e:	460d      	mov	r5, r1
 8013570:	462e      	mov	r6, r5
 8013572:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013576:	f814 700c 	ldrb.w	r7, [r4, ip]
 801357a:	f017 0708 	ands.w	r7, r7, #8
 801357e:	d1f7      	bne.n	8013570 <_strtol_l.constprop.0+0x20>
 8013580:	2c2d      	cmp	r4, #45	; 0x2d
 8013582:	d132      	bne.n	80135ea <_strtol_l.constprop.0+0x9a>
 8013584:	782c      	ldrb	r4, [r5, #0]
 8013586:	2701      	movs	r7, #1
 8013588:	1cb5      	adds	r5, r6, #2
 801358a:	2b00      	cmp	r3, #0
 801358c:	d05b      	beq.n	8013646 <_strtol_l.constprop.0+0xf6>
 801358e:	2b10      	cmp	r3, #16
 8013590:	d109      	bne.n	80135a6 <_strtol_l.constprop.0+0x56>
 8013592:	2c30      	cmp	r4, #48	; 0x30
 8013594:	d107      	bne.n	80135a6 <_strtol_l.constprop.0+0x56>
 8013596:	782c      	ldrb	r4, [r5, #0]
 8013598:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801359c:	2c58      	cmp	r4, #88	; 0x58
 801359e:	d14d      	bne.n	801363c <_strtol_l.constprop.0+0xec>
 80135a0:	786c      	ldrb	r4, [r5, #1]
 80135a2:	2310      	movs	r3, #16
 80135a4:	3502      	adds	r5, #2
 80135a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80135aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80135ae:	f04f 0c00 	mov.w	ip, #0
 80135b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80135b6:	4666      	mov	r6, ip
 80135b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80135bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80135c0:	f1be 0f09 	cmp.w	lr, #9
 80135c4:	d816      	bhi.n	80135f4 <_strtol_l.constprop.0+0xa4>
 80135c6:	4674      	mov	r4, lr
 80135c8:	42a3      	cmp	r3, r4
 80135ca:	dd24      	ble.n	8013616 <_strtol_l.constprop.0+0xc6>
 80135cc:	f1bc 0f00 	cmp.w	ip, #0
 80135d0:	db1e      	blt.n	8013610 <_strtol_l.constprop.0+0xc0>
 80135d2:	45b1      	cmp	r9, r6
 80135d4:	d31c      	bcc.n	8013610 <_strtol_l.constprop.0+0xc0>
 80135d6:	d101      	bne.n	80135dc <_strtol_l.constprop.0+0x8c>
 80135d8:	45a2      	cmp	sl, r4
 80135da:	db19      	blt.n	8013610 <_strtol_l.constprop.0+0xc0>
 80135dc:	fb06 4603 	mla	r6, r6, r3, r4
 80135e0:	f04f 0c01 	mov.w	ip, #1
 80135e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80135e8:	e7e8      	b.n	80135bc <_strtol_l.constprop.0+0x6c>
 80135ea:	2c2b      	cmp	r4, #43	; 0x2b
 80135ec:	bf04      	itt	eq
 80135ee:	782c      	ldrbeq	r4, [r5, #0]
 80135f0:	1cb5      	addeq	r5, r6, #2
 80135f2:	e7ca      	b.n	801358a <_strtol_l.constprop.0+0x3a>
 80135f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80135f8:	f1be 0f19 	cmp.w	lr, #25
 80135fc:	d801      	bhi.n	8013602 <_strtol_l.constprop.0+0xb2>
 80135fe:	3c37      	subs	r4, #55	; 0x37
 8013600:	e7e2      	b.n	80135c8 <_strtol_l.constprop.0+0x78>
 8013602:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8013606:	f1be 0f19 	cmp.w	lr, #25
 801360a:	d804      	bhi.n	8013616 <_strtol_l.constprop.0+0xc6>
 801360c:	3c57      	subs	r4, #87	; 0x57
 801360e:	e7db      	b.n	80135c8 <_strtol_l.constprop.0+0x78>
 8013610:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013614:	e7e6      	b.n	80135e4 <_strtol_l.constprop.0+0x94>
 8013616:	f1bc 0f00 	cmp.w	ip, #0
 801361a:	da05      	bge.n	8013628 <_strtol_l.constprop.0+0xd8>
 801361c:	2322      	movs	r3, #34	; 0x22
 801361e:	6003      	str	r3, [r0, #0]
 8013620:	4646      	mov	r6, r8
 8013622:	b942      	cbnz	r2, 8013636 <_strtol_l.constprop.0+0xe6>
 8013624:	4630      	mov	r0, r6
 8013626:	e79e      	b.n	8013566 <_strtol_l.constprop.0+0x16>
 8013628:	b107      	cbz	r7, 801362c <_strtol_l.constprop.0+0xdc>
 801362a:	4276      	negs	r6, r6
 801362c:	2a00      	cmp	r2, #0
 801362e:	d0f9      	beq.n	8013624 <_strtol_l.constprop.0+0xd4>
 8013630:	f1bc 0f00 	cmp.w	ip, #0
 8013634:	d000      	beq.n	8013638 <_strtol_l.constprop.0+0xe8>
 8013636:	1e69      	subs	r1, r5, #1
 8013638:	6011      	str	r1, [r2, #0]
 801363a:	e7f3      	b.n	8013624 <_strtol_l.constprop.0+0xd4>
 801363c:	2430      	movs	r4, #48	; 0x30
 801363e:	2b00      	cmp	r3, #0
 8013640:	d1b1      	bne.n	80135a6 <_strtol_l.constprop.0+0x56>
 8013642:	2308      	movs	r3, #8
 8013644:	e7af      	b.n	80135a6 <_strtol_l.constprop.0+0x56>
 8013646:	2c30      	cmp	r4, #48	; 0x30
 8013648:	d0a5      	beq.n	8013596 <_strtol_l.constprop.0+0x46>
 801364a:	230a      	movs	r3, #10
 801364c:	e7ab      	b.n	80135a6 <_strtol_l.constprop.0+0x56>
 801364e:	bf00      	nop
 8013650:	08016461 	.word	0x08016461

08013654 <_strtol_r>:
 8013654:	f7ff bf7c 	b.w	8013550 <_strtol_l.constprop.0>

08013658 <_write_r>:
 8013658:	b538      	push	{r3, r4, r5, lr}
 801365a:	4d07      	ldr	r5, [pc, #28]	; (8013678 <_write_r+0x20>)
 801365c:	4604      	mov	r4, r0
 801365e:	4608      	mov	r0, r1
 8013660:	4611      	mov	r1, r2
 8013662:	2200      	movs	r2, #0
 8013664:	602a      	str	r2, [r5, #0]
 8013666:	461a      	mov	r2, r3
 8013668:	f7ee fd4f 	bl	800210a <_write>
 801366c:	1c43      	adds	r3, r0, #1
 801366e:	d102      	bne.n	8013676 <_write_r+0x1e>
 8013670:	682b      	ldr	r3, [r5, #0]
 8013672:	b103      	cbz	r3, 8013676 <_write_r+0x1e>
 8013674:	6023      	str	r3, [r4, #0]
 8013676:	bd38      	pop	{r3, r4, r5, pc}
 8013678:	20002714 	.word	0x20002714

0801367c <_close_r>:
 801367c:	b538      	push	{r3, r4, r5, lr}
 801367e:	4d06      	ldr	r5, [pc, #24]	; (8013698 <_close_r+0x1c>)
 8013680:	2300      	movs	r3, #0
 8013682:	4604      	mov	r4, r0
 8013684:	4608      	mov	r0, r1
 8013686:	602b      	str	r3, [r5, #0]
 8013688:	f7ee fd5b 	bl	8002142 <_close>
 801368c:	1c43      	adds	r3, r0, #1
 801368e:	d102      	bne.n	8013696 <_close_r+0x1a>
 8013690:	682b      	ldr	r3, [r5, #0]
 8013692:	b103      	cbz	r3, 8013696 <_close_r+0x1a>
 8013694:	6023      	str	r3, [r4, #0]
 8013696:	bd38      	pop	{r3, r4, r5, pc}
 8013698:	20002714 	.word	0x20002714

0801369c <quorem>:
 801369c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136a0:	6903      	ldr	r3, [r0, #16]
 80136a2:	690c      	ldr	r4, [r1, #16]
 80136a4:	42a3      	cmp	r3, r4
 80136a6:	4607      	mov	r7, r0
 80136a8:	f2c0 8081 	blt.w	80137ae <quorem+0x112>
 80136ac:	3c01      	subs	r4, #1
 80136ae:	f101 0814 	add.w	r8, r1, #20
 80136b2:	f100 0514 	add.w	r5, r0, #20
 80136b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80136ba:	9301      	str	r3, [sp, #4]
 80136bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80136c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80136c4:	3301      	adds	r3, #1
 80136c6:	429a      	cmp	r2, r3
 80136c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80136cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80136d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80136d4:	d331      	bcc.n	801373a <quorem+0x9e>
 80136d6:	f04f 0e00 	mov.w	lr, #0
 80136da:	4640      	mov	r0, r8
 80136dc:	46ac      	mov	ip, r5
 80136de:	46f2      	mov	sl, lr
 80136e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80136e4:	b293      	uxth	r3, r2
 80136e6:	fb06 e303 	mla	r3, r6, r3, lr
 80136ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	ebaa 0303 	sub.w	r3, sl, r3
 80136f4:	f8dc a000 	ldr.w	sl, [ip]
 80136f8:	0c12      	lsrs	r2, r2, #16
 80136fa:	fa13 f38a 	uxtah	r3, r3, sl
 80136fe:	fb06 e202 	mla	r2, r6, r2, lr
 8013702:	9300      	str	r3, [sp, #0]
 8013704:	9b00      	ldr	r3, [sp, #0]
 8013706:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801370a:	b292      	uxth	r2, r2
 801370c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013714:	f8bd 3000 	ldrh.w	r3, [sp]
 8013718:	4581      	cmp	r9, r0
 801371a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801371e:	f84c 3b04 	str.w	r3, [ip], #4
 8013722:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013726:	d2db      	bcs.n	80136e0 <quorem+0x44>
 8013728:	f855 300b 	ldr.w	r3, [r5, fp]
 801372c:	b92b      	cbnz	r3, 801373a <quorem+0x9e>
 801372e:	9b01      	ldr	r3, [sp, #4]
 8013730:	3b04      	subs	r3, #4
 8013732:	429d      	cmp	r5, r3
 8013734:	461a      	mov	r2, r3
 8013736:	d32e      	bcc.n	8013796 <quorem+0xfa>
 8013738:	613c      	str	r4, [r7, #16]
 801373a:	4638      	mov	r0, r7
 801373c:	f001 fd64 	bl	8015208 <__mcmp>
 8013740:	2800      	cmp	r0, #0
 8013742:	db24      	blt.n	801378e <quorem+0xf2>
 8013744:	3601      	adds	r6, #1
 8013746:	4628      	mov	r0, r5
 8013748:	f04f 0c00 	mov.w	ip, #0
 801374c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013750:	f8d0 e000 	ldr.w	lr, [r0]
 8013754:	b293      	uxth	r3, r2
 8013756:	ebac 0303 	sub.w	r3, ip, r3
 801375a:	0c12      	lsrs	r2, r2, #16
 801375c:	fa13 f38e 	uxtah	r3, r3, lr
 8013760:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013764:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013768:	b29b      	uxth	r3, r3
 801376a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801376e:	45c1      	cmp	r9, r8
 8013770:	f840 3b04 	str.w	r3, [r0], #4
 8013774:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013778:	d2e8      	bcs.n	801374c <quorem+0xb0>
 801377a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801377e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013782:	b922      	cbnz	r2, 801378e <quorem+0xf2>
 8013784:	3b04      	subs	r3, #4
 8013786:	429d      	cmp	r5, r3
 8013788:	461a      	mov	r2, r3
 801378a:	d30a      	bcc.n	80137a2 <quorem+0x106>
 801378c:	613c      	str	r4, [r7, #16]
 801378e:	4630      	mov	r0, r6
 8013790:	b003      	add	sp, #12
 8013792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013796:	6812      	ldr	r2, [r2, #0]
 8013798:	3b04      	subs	r3, #4
 801379a:	2a00      	cmp	r2, #0
 801379c:	d1cc      	bne.n	8013738 <quorem+0x9c>
 801379e:	3c01      	subs	r4, #1
 80137a0:	e7c7      	b.n	8013732 <quorem+0x96>
 80137a2:	6812      	ldr	r2, [r2, #0]
 80137a4:	3b04      	subs	r3, #4
 80137a6:	2a00      	cmp	r2, #0
 80137a8:	d1f0      	bne.n	801378c <quorem+0xf0>
 80137aa:	3c01      	subs	r4, #1
 80137ac:	e7eb      	b.n	8013786 <quorem+0xea>
 80137ae:	2000      	movs	r0, #0
 80137b0:	e7ee      	b.n	8013790 <quorem+0xf4>
 80137b2:	0000      	movs	r0, r0
 80137b4:	0000      	movs	r0, r0
	...

080137b8 <_dtoa_r>:
 80137b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137bc:	ed2d 8b04 	vpush	{d8-d9}
 80137c0:	ec57 6b10 	vmov	r6, r7, d0
 80137c4:	b093      	sub	sp, #76	; 0x4c
 80137c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80137c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80137cc:	9106      	str	r1, [sp, #24]
 80137ce:	ee10 aa10 	vmov	sl, s0
 80137d2:	4604      	mov	r4, r0
 80137d4:	9209      	str	r2, [sp, #36]	; 0x24
 80137d6:	930c      	str	r3, [sp, #48]	; 0x30
 80137d8:	46bb      	mov	fp, r7
 80137da:	b975      	cbnz	r5, 80137fa <_dtoa_r+0x42>
 80137dc:	2010      	movs	r0, #16
 80137de:	f001 fa21 	bl	8014c24 <malloc>
 80137e2:	4602      	mov	r2, r0
 80137e4:	6260      	str	r0, [r4, #36]	; 0x24
 80137e6:	b920      	cbnz	r0, 80137f2 <_dtoa_r+0x3a>
 80137e8:	4ba7      	ldr	r3, [pc, #668]	; (8013a88 <_dtoa_r+0x2d0>)
 80137ea:	21ea      	movs	r1, #234	; 0xea
 80137ec:	48a7      	ldr	r0, [pc, #668]	; (8013a8c <_dtoa_r+0x2d4>)
 80137ee:	f002 f8fd 	bl	80159ec <__assert_func>
 80137f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80137f6:	6005      	str	r5, [r0, #0]
 80137f8:	60c5      	str	r5, [r0, #12]
 80137fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137fc:	6819      	ldr	r1, [r3, #0]
 80137fe:	b151      	cbz	r1, 8013816 <_dtoa_r+0x5e>
 8013800:	685a      	ldr	r2, [r3, #4]
 8013802:	604a      	str	r2, [r1, #4]
 8013804:	2301      	movs	r3, #1
 8013806:	4093      	lsls	r3, r2
 8013808:	608b      	str	r3, [r1, #8]
 801380a:	4620      	mov	r0, r4
 801380c:	f001 fa70 	bl	8014cf0 <_Bfree>
 8013810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013812:	2200      	movs	r2, #0
 8013814:	601a      	str	r2, [r3, #0]
 8013816:	1e3b      	subs	r3, r7, #0
 8013818:	bfaa      	itet	ge
 801381a:	2300      	movge	r3, #0
 801381c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8013820:	f8c8 3000 	strge.w	r3, [r8]
 8013824:	4b9a      	ldr	r3, [pc, #616]	; (8013a90 <_dtoa_r+0x2d8>)
 8013826:	bfbc      	itt	lt
 8013828:	2201      	movlt	r2, #1
 801382a:	f8c8 2000 	strlt.w	r2, [r8]
 801382e:	ea33 030b 	bics.w	r3, r3, fp
 8013832:	d11b      	bne.n	801386c <_dtoa_r+0xb4>
 8013834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013836:	f242 730f 	movw	r3, #9999	; 0x270f
 801383a:	6013      	str	r3, [r2, #0]
 801383c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013840:	4333      	orrs	r3, r6
 8013842:	f000 8592 	beq.w	801436a <_dtoa_r+0xbb2>
 8013846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013848:	b963      	cbnz	r3, 8013864 <_dtoa_r+0xac>
 801384a:	4b92      	ldr	r3, [pc, #584]	; (8013a94 <_dtoa_r+0x2dc>)
 801384c:	e022      	b.n	8013894 <_dtoa_r+0xdc>
 801384e:	4b92      	ldr	r3, [pc, #584]	; (8013a98 <_dtoa_r+0x2e0>)
 8013850:	9301      	str	r3, [sp, #4]
 8013852:	3308      	adds	r3, #8
 8013854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013856:	6013      	str	r3, [r2, #0]
 8013858:	9801      	ldr	r0, [sp, #4]
 801385a:	b013      	add	sp, #76	; 0x4c
 801385c:	ecbd 8b04 	vpop	{d8-d9}
 8013860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013864:	4b8b      	ldr	r3, [pc, #556]	; (8013a94 <_dtoa_r+0x2dc>)
 8013866:	9301      	str	r3, [sp, #4]
 8013868:	3303      	adds	r3, #3
 801386a:	e7f3      	b.n	8013854 <_dtoa_r+0x9c>
 801386c:	2200      	movs	r2, #0
 801386e:	2300      	movs	r3, #0
 8013870:	4650      	mov	r0, sl
 8013872:	4659      	mov	r1, fp
 8013874:	f7ed f940 	bl	8000af8 <__aeabi_dcmpeq>
 8013878:	ec4b ab19 	vmov	d9, sl, fp
 801387c:	4680      	mov	r8, r0
 801387e:	b158      	cbz	r0, 8013898 <_dtoa_r+0xe0>
 8013880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013882:	2301      	movs	r3, #1
 8013884:	6013      	str	r3, [r2, #0]
 8013886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013888:	2b00      	cmp	r3, #0
 801388a:	f000 856b 	beq.w	8014364 <_dtoa_r+0xbac>
 801388e:	4883      	ldr	r0, [pc, #524]	; (8013a9c <_dtoa_r+0x2e4>)
 8013890:	6018      	str	r0, [r3, #0]
 8013892:	1e43      	subs	r3, r0, #1
 8013894:	9301      	str	r3, [sp, #4]
 8013896:	e7df      	b.n	8013858 <_dtoa_r+0xa0>
 8013898:	ec4b ab10 	vmov	d0, sl, fp
 801389c:	aa10      	add	r2, sp, #64	; 0x40
 801389e:	a911      	add	r1, sp, #68	; 0x44
 80138a0:	4620      	mov	r0, r4
 80138a2:	f001 fdd3 	bl	801544c <__d2b>
 80138a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80138aa:	ee08 0a10 	vmov	s16, r0
 80138ae:	2d00      	cmp	r5, #0
 80138b0:	f000 8084 	beq.w	80139bc <_dtoa_r+0x204>
 80138b4:	ee19 3a90 	vmov	r3, s19
 80138b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80138c0:	4656      	mov	r6, sl
 80138c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80138c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80138ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80138ce:	4b74      	ldr	r3, [pc, #464]	; (8013aa0 <_dtoa_r+0x2e8>)
 80138d0:	2200      	movs	r2, #0
 80138d2:	4630      	mov	r0, r6
 80138d4:	4639      	mov	r1, r7
 80138d6:	f7ec fcef 	bl	80002b8 <__aeabi_dsub>
 80138da:	a365      	add	r3, pc, #404	; (adr r3, 8013a70 <_dtoa_r+0x2b8>)
 80138dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e0:	f7ec fea2 	bl	8000628 <__aeabi_dmul>
 80138e4:	a364      	add	r3, pc, #400	; (adr r3, 8013a78 <_dtoa_r+0x2c0>)
 80138e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ea:	f7ec fce7 	bl	80002bc <__adddf3>
 80138ee:	4606      	mov	r6, r0
 80138f0:	4628      	mov	r0, r5
 80138f2:	460f      	mov	r7, r1
 80138f4:	f7ec fe2e 	bl	8000554 <__aeabi_i2d>
 80138f8:	a361      	add	r3, pc, #388	; (adr r3, 8013a80 <_dtoa_r+0x2c8>)
 80138fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fe:	f7ec fe93 	bl	8000628 <__aeabi_dmul>
 8013902:	4602      	mov	r2, r0
 8013904:	460b      	mov	r3, r1
 8013906:	4630      	mov	r0, r6
 8013908:	4639      	mov	r1, r7
 801390a:	f7ec fcd7 	bl	80002bc <__adddf3>
 801390e:	4606      	mov	r6, r0
 8013910:	460f      	mov	r7, r1
 8013912:	f7ed f939 	bl	8000b88 <__aeabi_d2iz>
 8013916:	2200      	movs	r2, #0
 8013918:	9000      	str	r0, [sp, #0]
 801391a:	2300      	movs	r3, #0
 801391c:	4630      	mov	r0, r6
 801391e:	4639      	mov	r1, r7
 8013920:	f7ed f8f4 	bl	8000b0c <__aeabi_dcmplt>
 8013924:	b150      	cbz	r0, 801393c <_dtoa_r+0x184>
 8013926:	9800      	ldr	r0, [sp, #0]
 8013928:	f7ec fe14 	bl	8000554 <__aeabi_i2d>
 801392c:	4632      	mov	r2, r6
 801392e:	463b      	mov	r3, r7
 8013930:	f7ed f8e2 	bl	8000af8 <__aeabi_dcmpeq>
 8013934:	b910      	cbnz	r0, 801393c <_dtoa_r+0x184>
 8013936:	9b00      	ldr	r3, [sp, #0]
 8013938:	3b01      	subs	r3, #1
 801393a:	9300      	str	r3, [sp, #0]
 801393c:	9b00      	ldr	r3, [sp, #0]
 801393e:	2b16      	cmp	r3, #22
 8013940:	d85a      	bhi.n	80139f8 <_dtoa_r+0x240>
 8013942:	9a00      	ldr	r2, [sp, #0]
 8013944:	4b57      	ldr	r3, [pc, #348]	; (8013aa4 <_dtoa_r+0x2ec>)
 8013946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801394e:	ec51 0b19 	vmov	r0, r1, d9
 8013952:	f7ed f8db 	bl	8000b0c <__aeabi_dcmplt>
 8013956:	2800      	cmp	r0, #0
 8013958:	d050      	beq.n	80139fc <_dtoa_r+0x244>
 801395a:	9b00      	ldr	r3, [sp, #0]
 801395c:	3b01      	subs	r3, #1
 801395e:	9300      	str	r3, [sp, #0]
 8013960:	2300      	movs	r3, #0
 8013962:	930b      	str	r3, [sp, #44]	; 0x2c
 8013964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013966:	1b5d      	subs	r5, r3, r5
 8013968:	1e6b      	subs	r3, r5, #1
 801396a:	9305      	str	r3, [sp, #20]
 801396c:	bf45      	ittet	mi
 801396e:	f1c5 0301 	rsbmi	r3, r5, #1
 8013972:	9304      	strmi	r3, [sp, #16]
 8013974:	2300      	movpl	r3, #0
 8013976:	2300      	movmi	r3, #0
 8013978:	bf4c      	ite	mi
 801397a:	9305      	strmi	r3, [sp, #20]
 801397c:	9304      	strpl	r3, [sp, #16]
 801397e:	9b00      	ldr	r3, [sp, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	db3d      	blt.n	8013a00 <_dtoa_r+0x248>
 8013984:	9b05      	ldr	r3, [sp, #20]
 8013986:	9a00      	ldr	r2, [sp, #0]
 8013988:	920a      	str	r2, [sp, #40]	; 0x28
 801398a:	4413      	add	r3, r2
 801398c:	9305      	str	r3, [sp, #20]
 801398e:	2300      	movs	r3, #0
 8013990:	9307      	str	r3, [sp, #28]
 8013992:	9b06      	ldr	r3, [sp, #24]
 8013994:	2b09      	cmp	r3, #9
 8013996:	f200 8089 	bhi.w	8013aac <_dtoa_r+0x2f4>
 801399a:	2b05      	cmp	r3, #5
 801399c:	bfc4      	itt	gt
 801399e:	3b04      	subgt	r3, #4
 80139a0:	9306      	strgt	r3, [sp, #24]
 80139a2:	9b06      	ldr	r3, [sp, #24]
 80139a4:	f1a3 0302 	sub.w	r3, r3, #2
 80139a8:	bfcc      	ite	gt
 80139aa:	2500      	movgt	r5, #0
 80139ac:	2501      	movle	r5, #1
 80139ae:	2b03      	cmp	r3, #3
 80139b0:	f200 8087 	bhi.w	8013ac2 <_dtoa_r+0x30a>
 80139b4:	e8df f003 	tbb	[pc, r3]
 80139b8:	59383a2d 	.word	0x59383a2d
 80139bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80139c0:	441d      	add	r5, r3
 80139c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80139c6:	2b20      	cmp	r3, #32
 80139c8:	bfc1      	itttt	gt
 80139ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80139ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80139d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80139d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80139da:	bfda      	itte	le
 80139dc:	f1c3 0320 	rsble	r3, r3, #32
 80139e0:	fa06 f003 	lslle.w	r0, r6, r3
 80139e4:	4318      	orrgt	r0, r3
 80139e6:	f7ec fda5 	bl	8000534 <__aeabi_ui2d>
 80139ea:	2301      	movs	r3, #1
 80139ec:	4606      	mov	r6, r0
 80139ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80139f2:	3d01      	subs	r5, #1
 80139f4:	930e      	str	r3, [sp, #56]	; 0x38
 80139f6:	e76a      	b.n	80138ce <_dtoa_r+0x116>
 80139f8:	2301      	movs	r3, #1
 80139fa:	e7b2      	b.n	8013962 <_dtoa_r+0x1aa>
 80139fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80139fe:	e7b1      	b.n	8013964 <_dtoa_r+0x1ac>
 8013a00:	9b04      	ldr	r3, [sp, #16]
 8013a02:	9a00      	ldr	r2, [sp, #0]
 8013a04:	1a9b      	subs	r3, r3, r2
 8013a06:	9304      	str	r3, [sp, #16]
 8013a08:	4253      	negs	r3, r2
 8013a0a:	9307      	str	r3, [sp, #28]
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8013a10:	e7bf      	b.n	8013992 <_dtoa_r+0x1da>
 8013a12:	2300      	movs	r3, #0
 8013a14:	9308      	str	r3, [sp, #32]
 8013a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	dc55      	bgt.n	8013ac8 <_dtoa_r+0x310>
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013a22:	461a      	mov	r2, r3
 8013a24:	9209      	str	r2, [sp, #36]	; 0x24
 8013a26:	e00c      	b.n	8013a42 <_dtoa_r+0x28a>
 8013a28:	2301      	movs	r3, #1
 8013a2a:	e7f3      	b.n	8013a14 <_dtoa_r+0x25c>
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a30:	9308      	str	r3, [sp, #32]
 8013a32:	9b00      	ldr	r3, [sp, #0]
 8013a34:	4413      	add	r3, r2
 8013a36:	9302      	str	r3, [sp, #8]
 8013a38:	3301      	adds	r3, #1
 8013a3a:	2b01      	cmp	r3, #1
 8013a3c:	9303      	str	r3, [sp, #12]
 8013a3e:	bfb8      	it	lt
 8013a40:	2301      	movlt	r3, #1
 8013a42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013a44:	2200      	movs	r2, #0
 8013a46:	6042      	str	r2, [r0, #4]
 8013a48:	2204      	movs	r2, #4
 8013a4a:	f102 0614 	add.w	r6, r2, #20
 8013a4e:	429e      	cmp	r6, r3
 8013a50:	6841      	ldr	r1, [r0, #4]
 8013a52:	d93d      	bls.n	8013ad0 <_dtoa_r+0x318>
 8013a54:	4620      	mov	r0, r4
 8013a56:	f001 f90b 	bl	8014c70 <_Balloc>
 8013a5a:	9001      	str	r0, [sp, #4]
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	d13b      	bne.n	8013ad8 <_dtoa_r+0x320>
 8013a60:	4b11      	ldr	r3, [pc, #68]	; (8013aa8 <_dtoa_r+0x2f0>)
 8013a62:	4602      	mov	r2, r0
 8013a64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013a68:	e6c0      	b.n	80137ec <_dtoa_r+0x34>
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	e7df      	b.n	8013a2e <_dtoa_r+0x276>
 8013a6e:	bf00      	nop
 8013a70:	636f4361 	.word	0x636f4361
 8013a74:	3fd287a7 	.word	0x3fd287a7
 8013a78:	8b60c8b3 	.word	0x8b60c8b3
 8013a7c:	3fc68a28 	.word	0x3fc68a28
 8013a80:	509f79fb 	.word	0x509f79fb
 8013a84:	3fd34413 	.word	0x3fd34413
 8013a88:	0801656e 	.word	0x0801656e
 8013a8c:	08016585 	.word	0x08016585
 8013a90:	7ff00000 	.word	0x7ff00000
 8013a94:	0801656a 	.word	0x0801656a
 8013a98:	08016561 	.word	0x08016561
 8013a9c:	080163e5 	.word	0x080163e5
 8013aa0:	3ff80000 	.word	0x3ff80000
 8013aa4:	080166f0 	.word	0x080166f0
 8013aa8:	080165e0 	.word	0x080165e0
 8013aac:	2501      	movs	r5, #1
 8013aae:	2300      	movs	r3, #0
 8013ab0:	9306      	str	r3, [sp, #24]
 8013ab2:	9508      	str	r5, [sp, #32]
 8013ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ab8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013abc:	2200      	movs	r2, #0
 8013abe:	2312      	movs	r3, #18
 8013ac0:	e7b0      	b.n	8013a24 <_dtoa_r+0x26c>
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	9308      	str	r3, [sp, #32]
 8013ac6:	e7f5      	b.n	8013ab4 <_dtoa_r+0x2fc>
 8013ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013ace:	e7b8      	b.n	8013a42 <_dtoa_r+0x28a>
 8013ad0:	3101      	adds	r1, #1
 8013ad2:	6041      	str	r1, [r0, #4]
 8013ad4:	0052      	lsls	r2, r2, #1
 8013ad6:	e7b8      	b.n	8013a4a <_dtoa_r+0x292>
 8013ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ada:	9a01      	ldr	r2, [sp, #4]
 8013adc:	601a      	str	r2, [r3, #0]
 8013ade:	9b03      	ldr	r3, [sp, #12]
 8013ae0:	2b0e      	cmp	r3, #14
 8013ae2:	f200 809d 	bhi.w	8013c20 <_dtoa_r+0x468>
 8013ae6:	2d00      	cmp	r5, #0
 8013ae8:	f000 809a 	beq.w	8013c20 <_dtoa_r+0x468>
 8013aec:	9b00      	ldr	r3, [sp, #0]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	dd32      	ble.n	8013b58 <_dtoa_r+0x3a0>
 8013af2:	4ab7      	ldr	r2, [pc, #732]	; (8013dd0 <_dtoa_r+0x618>)
 8013af4:	f003 030f 	and.w	r3, r3, #15
 8013af8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013afc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b00:	9b00      	ldr	r3, [sp, #0]
 8013b02:	05d8      	lsls	r0, r3, #23
 8013b04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013b08:	d516      	bpl.n	8013b38 <_dtoa_r+0x380>
 8013b0a:	4bb2      	ldr	r3, [pc, #712]	; (8013dd4 <_dtoa_r+0x61c>)
 8013b0c:	ec51 0b19 	vmov	r0, r1, d9
 8013b10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013b14:	f7ec feb2 	bl	800087c <__aeabi_ddiv>
 8013b18:	f007 070f 	and.w	r7, r7, #15
 8013b1c:	4682      	mov	sl, r0
 8013b1e:	468b      	mov	fp, r1
 8013b20:	2503      	movs	r5, #3
 8013b22:	4eac      	ldr	r6, [pc, #688]	; (8013dd4 <_dtoa_r+0x61c>)
 8013b24:	b957      	cbnz	r7, 8013b3c <_dtoa_r+0x384>
 8013b26:	4642      	mov	r2, r8
 8013b28:	464b      	mov	r3, r9
 8013b2a:	4650      	mov	r0, sl
 8013b2c:	4659      	mov	r1, fp
 8013b2e:	f7ec fea5 	bl	800087c <__aeabi_ddiv>
 8013b32:	4682      	mov	sl, r0
 8013b34:	468b      	mov	fp, r1
 8013b36:	e028      	b.n	8013b8a <_dtoa_r+0x3d2>
 8013b38:	2502      	movs	r5, #2
 8013b3a:	e7f2      	b.n	8013b22 <_dtoa_r+0x36a>
 8013b3c:	07f9      	lsls	r1, r7, #31
 8013b3e:	d508      	bpl.n	8013b52 <_dtoa_r+0x39a>
 8013b40:	4640      	mov	r0, r8
 8013b42:	4649      	mov	r1, r9
 8013b44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b48:	f7ec fd6e 	bl	8000628 <__aeabi_dmul>
 8013b4c:	3501      	adds	r5, #1
 8013b4e:	4680      	mov	r8, r0
 8013b50:	4689      	mov	r9, r1
 8013b52:	107f      	asrs	r7, r7, #1
 8013b54:	3608      	adds	r6, #8
 8013b56:	e7e5      	b.n	8013b24 <_dtoa_r+0x36c>
 8013b58:	f000 809b 	beq.w	8013c92 <_dtoa_r+0x4da>
 8013b5c:	9b00      	ldr	r3, [sp, #0]
 8013b5e:	4f9d      	ldr	r7, [pc, #628]	; (8013dd4 <_dtoa_r+0x61c>)
 8013b60:	425e      	negs	r6, r3
 8013b62:	4b9b      	ldr	r3, [pc, #620]	; (8013dd0 <_dtoa_r+0x618>)
 8013b64:	f006 020f 	and.w	r2, r6, #15
 8013b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b70:	ec51 0b19 	vmov	r0, r1, d9
 8013b74:	f7ec fd58 	bl	8000628 <__aeabi_dmul>
 8013b78:	1136      	asrs	r6, r6, #4
 8013b7a:	4682      	mov	sl, r0
 8013b7c:	468b      	mov	fp, r1
 8013b7e:	2300      	movs	r3, #0
 8013b80:	2502      	movs	r5, #2
 8013b82:	2e00      	cmp	r6, #0
 8013b84:	d17a      	bne.n	8013c7c <_dtoa_r+0x4c4>
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d1d3      	bne.n	8013b32 <_dtoa_r+0x37a>
 8013b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	f000 8082 	beq.w	8013c96 <_dtoa_r+0x4de>
 8013b92:	4b91      	ldr	r3, [pc, #580]	; (8013dd8 <_dtoa_r+0x620>)
 8013b94:	2200      	movs	r2, #0
 8013b96:	4650      	mov	r0, sl
 8013b98:	4659      	mov	r1, fp
 8013b9a:	f7ec ffb7 	bl	8000b0c <__aeabi_dcmplt>
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	d079      	beq.n	8013c96 <_dtoa_r+0x4de>
 8013ba2:	9b03      	ldr	r3, [sp, #12]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d076      	beq.n	8013c96 <_dtoa_r+0x4de>
 8013ba8:	9b02      	ldr	r3, [sp, #8]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	dd36      	ble.n	8013c1c <_dtoa_r+0x464>
 8013bae:	9b00      	ldr	r3, [sp, #0]
 8013bb0:	4650      	mov	r0, sl
 8013bb2:	4659      	mov	r1, fp
 8013bb4:	1e5f      	subs	r7, r3, #1
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	4b88      	ldr	r3, [pc, #544]	; (8013ddc <_dtoa_r+0x624>)
 8013bba:	f7ec fd35 	bl	8000628 <__aeabi_dmul>
 8013bbe:	9e02      	ldr	r6, [sp, #8]
 8013bc0:	4682      	mov	sl, r0
 8013bc2:	468b      	mov	fp, r1
 8013bc4:	3501      	adds	r5, #1
 8013bc6:	4628      	mov	r0, r5
 8013bc8:	f7ec fcc4 	bl	8000554 <__aeabi_i2d>
 8013bcc:	4652      	mov	r2, sl
 8013bce:	465b      	mov	r3, fp
 8013bd0:	f7ec fd2a 	bl	8000628 <__aeabi_dmul>
 8013bd4:	4b82      	ldr	r3, [pc, #520]	; (8013de0 <_dtoa_r+0x628>)
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	f7ec fb70 	bl	80002bc <__adddf3>
 8013bdc:	46d0      	mov	r8, sl
 8013bde:	46d9      	mov	r9, fp
 8013be0:	4682      	mov	sl, r0
 8013be2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8013be6:	2e00      	cmp	r6, #0
 8013be8:	d158      	bne.n	8013c9c <_dtoa_r+0x4e4>
 8013bea:	4b7e      	ldr	r3, [pc, #504]	; (8013de4 <_dtoa_r+0x62c>)
 8013bec:	2200      	movs	r2, #0
 8013bee:	4640      	mov	r0, r8
 8013bf0:	4649      	mov	r1, r9
 8013bf2:	f7ec fb61 	bl	80002b8 <__aeabi_dsub>
 8013bf6:	4652      	mov	r2, sl
 8013bf8:	465b      	mov	r3, fp
 8013bfa:	4680      	mov	r8, r0
 8013bfc:	4689      	mov	r9, r1
 8013bfe:	f7ec ffa3 	bl	8000b48 <__aeabi_dcmpgt>
 8013c02:	2800      	cmp	r0, #0
 8013c04:	f040 8295 	bne.w	8014132 <_dtoa_r+0x97a>
 8013c08:	4652      	mov	r2, sl
 8013c0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013c0e:	4640      	mov	r0, r8
 8013c10:	4649      	mov	r1, r9
 8013c12:	f7ec ff7b 	bl	8000b0c <__aeabi_dcmplt>
 8013c16:	2800      	cmp	r0, #0
 8013c18:	f040 8289 	bne.w	801412e <_dtoa_r+0x976>
 8013c1c:	ec5b ab19 	vmov	sl, fp, d9
 8013c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	f2c0 8148 	blt.w	8013eb8 <_dtoa_r+0x700>
 8013c28:	9a00      	ldr	r2, [sp, #0]
 8013c2a:	2a0e      	cmp	r2, #14
 8013c2c:	f300 8144 	bgt.w	8013eb8 <_dtoa_r+0x700>
 8013c30:	4b67      	ldr	r3, [pc, #412]	; (8013dd0 <_dtoa_r+0x618>)
 8013c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	f280 80d5 	bge.w	8013dec <_dtoa_r+0x634>
 8013c42:	9b03      	ldr	r3, [sp, #12]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	f300 80d1 	bgt.w	8013dec <_dtoa_r+0x634>
 8013c4a:	f040 826f 	bne.w	801412c <_dtoa_r+0x974>
 8013c4e:	4b65      	ldr	r3, [pc, #404]	; (8013de4 <_dtoa_r+0x62c>)
 8013c50:	2200      	movs	r2, #0
 8013c52:	4640      	mov	r0, r8
 8013c54:	4649      	mov	r1, r9
 8013c56:	f7ec fce7 	bl	8000628 <__aeabi_dmul>
 8013c5a:	4652      	mov	r2, sl
 8013c5c:	465b      	mov	r3, fp
 8013c5e:	f7ec ff69 	bl	8000b34 <__aeabi_dcmpge>
 8013c62:	9e03      	ldr	r6, [sp, #12]
 8013c64:	4637      	mov	r7, r6
 8013c66:	2800      	cmp	r0, #0
 8013c68:	f040 8245 	bne.w	80140f6 <_dtoa_r+0x93e>
 8013c6c:	9d01      	ldr	r5, [sp, #4]
 8013c6e:	2331      	movs	r3, #49	; 0x31
 8013c70:	f805 3b01 	strb.w	r3, [r5], #1
 8013c74:	9b00      	ldr	r3, [sp, #0]
 8013c76:	3301      	adds	r3, #1
 8013c78:	9300      	str	r3, [sp, #0]
 8013c7a:	e240      	b.n	80140fe <_dtoa_r+0x946>
 8013c7c:	07f2      	lsls	r2, r6, #31
 8013c7e:	d505      	bpl.n	8013c8c <_dtoa_r+0x4d4>
 8013c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c84:	f7ec fcd0 	bl	8000628 <__aeabi_dmul>
 8013c88:	3501      	adds	r5, #1
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	1076      	asrs	r6, r6, #1
 8013c8e:	3708      	adds	r7, #8
 8013c90:	e777      	b.n	8013b82 <_dtoa_r+0x3ca>
 8013c92:	2502      	movs	r5, #2
 8013c94:	e779      	b.n	8013b8a <_dtoa_r+0x3d2>
 8013c96:	9f00      	ldr	r7, [sp, #0]
 8013c98:	9e03      	ldr	r6, [sp, #12]
 8013c9a:	e794      	b.n	8013bc6 <_dtoa_r+0x40e>
 8013c9c:	9901      	ldr	r1, [sp, #4]
 8013c9e:	4b4c      	ldr	r3, [pc, #304]	; (8013dd0 <_dtoa_r+0x618>)
 8013ca0:	4431      	add	r1, r6
 8013ca2:	910d      	str	r1, [sp, #52]	; 0x34
 8013ca4:	9908      	ldr	r1, [sp, #32]
 8013ca6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013caa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013cae:	2900      	cmp	r1, #0
 8013cb0:	d043      	beq.n	8013d3a <_dtoa_r+0x582>
 8013cb2:	494d      	ldr	r1, [pc, #308]	; (8013de8 <_dtoa_r+0x630>)
 8013cb4:	2000      	movs	r0, #0
 8013cb6:	f7ec fde1 	bl	800087c <__aeabi_ddiv>
 8013cba:	4652      	mov	r2, sl
 8013cbc:	465b      	mov	r3, fp
 8013cbe:	f7ec fafb 	bl	80002b8 <__aeabi_dsub>
 8013cc2:	9d01      	ldr	r5, [sp, #4]
 8013cc4:	4682      	mov	sl, r0
 8013cc6:	468b      	mov	fp, r1
 8013cc8:	4649      	mov	r1, r9
 8013cca:	4640      	mov	r0, r8
 8013ccc:	f7ec ff5c 	bl	8000b88 <__aeabi_d2iz>
 8013cd0:	4606      	mov	r6, r0
 8013cd2:	f7ec fc3f 	bl	8000554 <__aeabi_i2d>
 8013cd6:	4602      	mov	r2, r0
 8013cd8:	460b      	mov	r3, r1
 8013cda:	4640      	mov	r0, r8
 8013cdc:	4649      	mov	r1, r9
 8013cde:	f7ec faeb 	bl	80002b8 <__aeabi_dsub>
 8013ce2:	3630      	adds	r6, #48	; 0x30
 8013ce4:	f805 6b01 	strb.w	r6, [r5], #1
 8013ce8:	4652      	mov	r2, sl
 8013cea:	465b      	mov	r3, fp
 8013cec:	4680      	mov	r8, r0
 8013cee:	4689      	mov	r9, r1
 8013cf0:	f7ec ff0c 	bl	8000b0c <__aeabi_dcmplt>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	d163      	bne.n	8013dc0 <_dtoa_r+0x608>
 8013cf8:	4642      	mov	r2, r8
 8013cfa:	464b      	mov	r3, r9
 8013cfc:	4936      	ldr	r1, [pc, #216]	; (8013dd8 <_dtoa_r+0x620>)
 8013cfe:	2000      	movs	r0, #0
 8013d00:	f7ec fada 	bl	80002b8 <__aeabi_dsub>
 8013d04:	4652      	mov	r2, sl
 8013d06:	465b      	mov	r3, fp
 8013d08:	f7ec ff00 	bl	8000b0c <__aeabi_dcmplt>
 8013d0c:	2800      	cmp	r0, #0
 8013d0e:	f040 80b5 	bne.w	8013e7c <_dtoa_r+0x6c4>
 8013d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d14:	429d      	cmp	r5, r3
 8013d16:	d081      	beq.n	8013c1c <_dtoa_r+0x464>
 8013d18:	4b30      	ldr	r3, [pc, #192]	; (8013ddc <_dtoa_r+0x624>)
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	4650      	mov	r0, sl
 8013d1e:	4659      	mov	r1, fp
 8013d20:	f7ec fc82 	bl	8000628 <__aeabi_dmul>
 8013d24:	4b2d      	ldr	r3, [pc, #180]	; (8013ddc <_dtoa_r+0x624>)
 8013d26:	4682      	mov	sl, r0
 8013d28:	468b      	mov	fp, r1
 8013d2a:	4640      	mov	r0, r8
 8013d2c:	4649      	mov	r1, r9
 8013d2e:	2200      	movs	r2, #0
 8013d30:	f7ec fc7a 	bl	8000628 <__aeabi_dmul>
 8013d34:	4680      	mov	r8, r0
 8013d36:	4689      	mov	r9, r1
 8013d38:	e7c6      	b.n	8013cc8 <_dtoa_r+0x510>
 8013d3a:	4650      	mov	r0, sl
 8013d3c:	4659      	mov	r1, fp
 8013d3e:	f7ec fc73 	bl	8000628 <__aeabi_dmul>
 8013d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d44:	9d01      	ldr	r5, [sp, #4]
 8013d46:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d48:	4682      	mov	sl, r0
 8013d4a:	468b      	mov	fp, r1
 8013d4c:	4649      	mov	r1, r9
 8013d4e:	4640      	mov	r0, r8
 8013d50:	f7ec ff1a 	bl	8000b88 <__aeabi_d2iz>
 8013d54:	4606      	mov	r6, r0
 8013d56:	f7ec fbfd 	bl	8000554 <__aeabi_i2d>
 8013d5a:	3630      	adds	r6, #48	; 0x30
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	460b      	mov	r3, r1
 8013d60:	4640      	mov	r0, r8
 8013d62:	4649      	mov	r1, r9
 8013d64:	f7ec faa8 	bl	80002b8 <__aeabi_dsub>
 8013d68:	f805 6b01 	strb.w	r6, [r5], #1
 8013d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d6e:	429d      	cmp	r5, r3
 8013d70:	4680      	mov	r8, r0
 8013d72:	4689      	mov	r9, r1
 8013d74:	f04f 0200 	mov.w	r2, #0
 8013d78:	d124      	bne.n	8013dc4 <_dtoa_r+0x60c>
 8013d7a:	4b1b      	ldr	r3, [pc, #108]	; (8013de8 <_dtoa_r+0x630>)
 8013d7c:	4650      	mov	r0, sl
 8013d7e:	4659      	mov	r1, fp
 8013d80:	f7ec fa9c 	bl	80002bc <__adddf3>
 8013d84:	4602      	mov	r2, r0
 8013d86:	460b      	mov	r3, r1
 8013d88:	4640      	mov	r0, r8
 8013d8a:	4649      	mov	r1, r9
 8013d8c:	f7ec fedc 	bl	8000b48 <__aeabi_dcmpgt>
 8013d90:	2800      	cmp	r0, #0
 8013d92:	d173      	bne.n	8013e7c <_dtoa_r+0x6c4>
 8013d94:	4652      	mov	r2, sl
 8013d96:	465b      	mov	r3, fp
 8013d98:	4913      	ldr	r1, [pc, #76]	; (8013de8 <_dtoa_r+0x630>)
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	f7ec fa8c 	bl	80002b8 <__aeabi_dsub>
 8013da0:	4602      	mov	r2, r0
 8013da2:	460b      	mov	r3, r1
 8013da4:	4640      	mov	r0, r8
 8013da6:	4649      	mov	r1, r9
 8013da8:	f7ec feb0 	bl	8000b0c <__aeabi_dcmplt>
 8013dac:	2800      	cmp	r0, #0
 8013dae:	f43f af35 	beq.w	8013c1c <_dtoa_r+0x464>
 8013db2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013db4:	1e6b      	subs	r3, r5, #1
 8013db6:	930f      	str	r3, [sp, #60]	; 0x3c
 8013db8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013dbc:	2b30      	cmp	r3, #48	; 0x30
 8013dbe:	d0f8      	beq.n	8013db2 <_dtoa_r+0x5fa>
 8013dc0:	9700      	str	r7, [sp, #0]
 8013dc2:	e049      	b.n	8013e58 <_dtoa_r+0x6a0>
 8013dc4:	4b05      	ldr	r3, [pc, #20]	; (8013ddc <_dtoa_r+0x624>)
 8013dc6:	f7ec fc2f 	bl	8000628 <__aeabi_dmul>
 8013dca:	4680      	mov	r8, r0
 8013dcc:	4689      	mov	r9, r1
 8013dce:	e7bd      	b.n	8013d4c <_dtoa_r+0x594>
 8013dd0:	080166f0 	.word	0x080166f0
 8013dd4:	080166c8 	.word	0x080166c8
 8013dd8:	3ff00000 	.word	0x3ff00000
 8013ddc:	40240000 	.word	0x40240000
 8013de0:	401c0000 	.word	0x401c0000
 8013de4:	40140000 	.word	0x40140000
 8013de8:	3fe00000 	.word	0x3fe00000
 8013dec:	9d01      	ldr	r5, [sp, #4]
 8013dee:	4656      	mov	r6, sl
 8013df0:	465f      	mov	r7, fp
 8013df2:	4642      	mov	r2, r8
 8013df4:	464b      	mov	r3, r9
 8013df6:	4630      	mov	r0, r6
 8013df8:	4639      	mov	r1, r7
 8013dfa:	f7ec fd3f 	bl	800087c <__aeabi_ddiv>
 8013dfe:	f7ec fec3 	bl	8000b88 <__aeabi_d2iz>
 8013e02:	4682      	mov	sl, r0
 8013e04:	f7ec fba6 	bl	8000554 <__aeabi_i2d>
 8013e08:	4642      	mov	r2, r8
 8013e0a:	464b      	mov	r3, r9
 8013e0c:	f7ec fc0c 	bl	8000628 <__aeabi_dmul>
 8013e10:	4602      	mov	r2, r0
 8013e12:	460b      	mov	r3, r1
 8013e14:	4630      	mov	r0, r6
 8013e16:	4639      	mov	r1, r7
 8013e18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8013e1c:	f7ec fa4c 	bl	80002b8 <__aeabi_dsub>
 8013e20:	f805 6b01 	strb.w	r6, [r5], #1
 8013e24:	9e01      	ldr	r6, [sp, #4]
 8013e26:	9f03      	ldr	r7, [sp, #12]
 8013e28:	1bae      	subs	r6, r5, r6
 8013e2a:	42b7      	cmp	r7, r6
 8013e2c:	4602      	mov	r2, r0
 8013e2e:	460b      	mov	r3, r1
 8013e30:	d135      	bne.n	8013e9e <_dtoa_r+0x6e6>
 8013e32:	f7ec fa43 	bl	80002bc <__adddf3>
 8013e36:	4642      	mov	r2, r8
 8013e38:	464b      	mov	r3, r9
 8013e3a:	4606      	mov	r6, r0
 8013e3c:	460f      	mov	r7, r1
 8013e3e:	f7ec fe83 	bl	8000b48 <__aeabi_dcmpgt>
 8013e42:	b9d0      	cbnz	r0, 8013e7a <_dtoa_r+0x6c2>
 8013e44:	4642      	mov	r2, r8
 8013e46:	464b      	mov	r3, r9
 8013e48:	4630      	mov	r0, r6
 8013e4a:	4639      	mov	r1, r7
 8013e4c:	f7ec fe54 	bl	8000af8 <__aeabi_dcmpeq>
 8013e50:	b110      	cbz	r0, 8013e58 <_dtoa_r+0x6a0>
 8013e52:	f01a 0f01 	tst.w	sl, #1
 8013e56:	d110      	bne.n	8013e7a <_dtoa_r+0x6c2>
 8013e58:	4620      	mov	r0, r4
 8013e5a:	ee18 1a10 	vmov	r1, s16
 8013e5e:	f000 ff47 	bl	8014cf0 <_Bfree>
 8013e62:	2300      	movs	r3, #0
 8013e64:	9800      	ldr	r0, [sp, #0]
 8013e66:	702b      	strb	r3, [r5, #0]
 8013e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e6a:	3001      	adds	r0, #1
 8013e6c:	6018      	str	r0, [r3, #0]
 8013e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	f43f acf1 	beq.w	8013858 <_dtoa_r+0xa0>
 8013e76:	601d      	str	r5, [r3, #0]
 8013e78:	e4ee      	b.n	8013858 <_dtoa_r+0xa0>
 8013e7a:	9f00      	ldr	r7, [sp, #0]
 8013e7c:	462b      	mov	r3, r5
 8013e7e:	461d      	mov	r5, r3
 8013e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e84:	2a39      	cmp	r2, #57	; 0x39
 8013e86:	d106      	bne.n	8013e96 <_dtoa_r+0x6de>
 8013e88:	9a01      	ldr	r2, [sp, #4]
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	d1f7      	bne.n	8013e7e <_dtoa_r+0x6c6>
 8013e8e:	9901      	ldr	r1, [sp, #4]
 8013e90:	2230      	movs	r2, #48	; 0x30
 8013e92:	3701      	adds	r7, #1
 8013e94:	700a      	strb	r2, [r1, #0]
 8013e96:	781a      	ldrb	r2, [r3, #0]
 8013e98:	3201      	adds	r2, #1
 8013e9a:	701a      	strb	r2, [r3, #0]
 8013e9c:	e790      	b.n	8013dc0 <_dtoa_r+0x608>
 8013e9e:	4ba6      	ldr	r3, [pc, #664]	; (8014138 <_dtoa_r+0x980>)
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	f7ec fbc1 	bl	8000628 <__aeabi_dmul>
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	4606      	mov	r6, r0
 8013eac:	460f      	mov	r7, r1
 8013eae:	f7ec fe23 	bl	8000af8 <__aeabi_dcmpeq>
 8013eb2:	2800      	cmp	r0, #0
 8013eb4:	d09d      	beq.n	8013df2 <_dtoa_r+0x63a>
 8013eb6:	e7cf      	b.n	8013e58 <_dtoa_r+0x6a0>
 8013eb8:	9a08      	ldr	r2, [sp, #32]
 8013eba:	2a00      	cmp	r2, #0
 8013ebc:	f000 80d7 	beq.w	801406e <_dtoa_r+0x8b6>
 8013ec0:	9a06      	ldr	r2, [sp, #24]
 8013ec2:	2a01      	cmp	r2, #1
 8013ec4:	f300 80ba 	bgt.w	801403c <_dtoa_r+0x884>
 8013ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013eca:	2a00      	cmp	r2, #0
 8013ecc:	f000 80b2 	beq.w	8014034 <_dtoa_r+0x87c>
 8013ed0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013ed4:	9e07      	ldr	r6, [sp, #28]
 8013ed6:	9d04      	ldr	r5, [sp, #16]
 8013ed8:	9a04      	ldr	r2, [sp, #16]
 8013eda:	441a      	add	r2, r3
 8013edc:	9204      	str	r2, [sp, #16]
 8013ede:	9a05      	ldr	r2, [sp, #20]
 8013ee0:	2101      	movs	r1, #1
 8013ee2:	441a      	add	r2, r3
 8013ee4:	4620      	mov	r0, r4
 8013ee6:	9205      	str	r2, [sp, #20]
 8013ee8:	f001 f804 	bl	8014ef4 <__i2b>
 8013eec:	4607      	mov	r7, r0
 8013eee:	2d00      	cmp	r5, #0
 8013ef0:	dd0c      	ble.n	8013f0c <_dtoa_r+0x754>
 8013ef2:	9b05      	ldr	r3, [sp, #20]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	dd09      	ble.n	8013f0c <_dtoa_r+0x754>
 8013ef8:	42ab      	cmp	r3, r5
 8013efa:	9a04      	ldr	r2, [sp, #16]
 8013efc:	bfa8      	it	ge
 8013efe:	462b      	movge	r3, r5
 8013f00:	1ad2      	subs	r2, r2, r3
 8013f02:	9204      	str	r2, [sp, #16]
 8013f04:	9a05      	ldr	r2, [sp, #20]
 8013f06:	1aed      	subs	r5, r5, r3
 8013f08:	1ad3      	subs	r3, r2, r3
 8013f0a:	9305      	str	r3, [sp, #20]
 8013f0c:	9b07      	ldr	r3, [sp, #28]
 8013f0e:	b31b      	cbz	r3, 8013f58 <_dtoa_r+0x7a0>
 8013f10:	9b08      	ldr	r3, [sp, #32]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	f000 80af 	beq.w	8014076 <_dtoa_r+0x8be>
 8013f18:	2e00      	cmp	r6, #0
 8013f1a:	dd13      	ble.n	8013f44 <_dtoa_r+0x78c>
 8013f1c:	4639      	mov	r1, r7
 8013f1e:	4632      	mov	r2, r6
 8013f20:	4620      	mov	r0, r4
 8013f22:	f001 f8a7 	bl	8015074 <__pow5mult>
 8013f26:	ee18 2a10 	vmov	r2, s16
 8013f2a:	4601      	mov	r1, r0
 8013f2c:	4607      	mov	r7, r0
 8013f2e:	4620      	mov	r0, r4
 8013f30:	f000 fff6 	bl	8014f20 <__multiply>
 8013f34:	ee18 1a10 	vmov	r1, s16
 8013f38:	4680      	mov	r8, r0
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	f000 fed8 	bl	8014cf0 <_Bfree>
 8013f40:	ee08 8a10 	vmov	s16, r8
 8013f44:	9b07      	ldr	r3, [sp, #28]
 8013f46:	1b9a      	subs	r2, r3, r6
 8013f48:	d006      	beq.n	8013f58 <_dtoa_r+0x7a0>
 8013f4a:	ee18 1a10 	vmov	r1, s16
 8013f4e:	4620      	mov	r0, r4
 8013f50:	f001 f890 	bl	8015074 <__pow5mult>
 8013f54:	ee08 0a10 	vmov	s16, r0
 8013f58:	2101      	movs	r1, #1
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	f000 ffca 	bl	8014ef4 <__i2b>
 8013f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	4606      	mov	r6, r0
 8013f66:	f340 8088 	ble.w	801407a <_dtoa_r+0x8c2>
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	4601      	mov	r1, r0
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f001 f880 	bl	8015074 <__pow5mult>
 8013f74:	9b06      	ldr	r3, [sp, #24]
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	4606      	mov	r6, r0
 8013f7a:	f340 8081 	ble.w	8014080 <_dtoa_r+0x8c8>
 8013f7e:	f04f 0800 	mov.w	r8, #0
 8013f82:	6933      	ldr	r3, [r6, #16]
 8013f84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013f88:	6918      	ldr	r0, [r3, #16]
 8013f8a:	f000 ff63 	bl	8014e54 <__hi0bits>
 8013f8e:	f1c0 0020 	rsb	r0, r0, #32
 8013f92:	9b05      	ldr	r3, [sp, #20]
 8013f94:	4418      	add	r0, r3
 8013f96:	f010 001f 	ands.w	r0, r0, #31
 8013f9a:	f000 8092 	beq.w	80140c2 <_dtoa_r+0x90a>
 8013f9e:	f1c0 0320 	rsb	r3, r0, #32
 8013fa2:	2b04      	cmp	r3, #4
 8013fa4:	f340 808a 	ble.w	80140bc <_dtoa_r+0x904>
 8013fa8:	f1c0 001c 	rsb	r0, r0, #28
 8013fac:	9b04      	ldr	r3, [sp, #16]
 8013fae:	4403      	add	r3, r0
 8013fb0:	9304      	str	r3, [sp, #16]
 8013fb2:	9b05      	ldr	r3, [sp, #20]
 8013fb4:	4403      	add	r3, r0
 8013fb6:	4405      	add	r5, r0
 8013fb8:	9305      	str	r3, [sp, #20]
 8013fba:	9b04      	ldr	r3, [sp, #16]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	dd07      	ble.n	8013fd0 <_dtoa_r+0x818>
 8013fc0:	ee18 1a10 	vmov	r1, s16
 8013fc4:	461a      	mov	r2, r3
 8013fc6:	4620      	mov	r0, r4
 8013fc8:	f001 f8ae 	bl	8015128 <__lshift>
 8013fcc:	ee08 0a10 	vmov	s16, r0
 8013fd0:	9b05      	ldr	r3, [sp, #20]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	dd05      	ble.n	8013fe2 <_dtoa_r+0x82a>
 8013fd6:	4631      	mov	r1, r6
 8013fd8:	461a      	mov	r2, r3
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f001 f8a4 	bl	8015128 <__lshift>
 8013fe0:	4606      	mov	r6, r0
 8013fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d06e      	beq.n	80140c6 <_dtoa_r+0x90e>
 8013fe8:	ee18 0a10 	vmov	r0, s16
 8013fec:	4631      	mov	r1, r6
 8013fee:	f001 f90b 	bl	8015208 <__mcmp>
 8013ff2:	2800      	cmp	r0, #0
 8013ff4:	da67      	bge.n	80140c6 <_dtoa_r+0x90e>
 8013ff6:	9b00      	ldr	r3, [sp, #0]
 8013ff8:	3b01      	subs	r3, #1
 8013ffa:	ee18 1a10 	vmov	r1, s16
 8013ffe:	9300      	str	r3, [sp, #0]
 8014000:	220a      	movs	r2, #10
 8014002:	2300      	movs	r3, #0
 8014004:	4620      	mov	r0, r4
 8014006:	f000 fe95 	bl	8014d34 <__multadd>
 801400a:	9b08      	ldr	r3, [sp, #32]
 801400c:	ee08 0a10 	vmov	s16, r0
 8014010:	2b00      	cmp	r3, #0
 8014012:	f000 81b1 	beq.w	8014378 <_dtoa_r+0xbc0>
 8014016:	2300      	movs	r3, #0
 8014018:	4639      	mov	r1, r7
 801401a:	220a      	movs	r2, #10
 801401c:	4620      	mov	r0, r4
 801401e:	f000 fe89 	bl	8014d34 <__multadd>
 8014022:	9b02      	ldr	r3, [sp, #8]
 8014024:	2b00      	cmp	r3, #0
 8014026:	4607      	mov	r7, r0
 8014028:	f300 808e 	bgt.w	8014148 <_dtoa_r+0x990>
 801402c:	9b06      	ldr	r3, [sp, #24]
 801402e:	2b02      	cmp	r3, #2
 8014030:	dc51      	bgt.n	80140d6 <_dtoa_r+0x91e>
 8014032:	e089      	b.n	8014148 <_dtoa_r+0x990>
 8014034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014036:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801403a:	e74b      	b.n	8013ed4 <_dtoa_r+0x71c>
 801403c:	9b03      	ldr	r3, [sp, #12]
 801403e:	1e5e      	subs	r6, r3, #1
 8014040:	9b07      	ldr	r3, [sp, #28]
 8014042:	42b3      	cmp	r3, r6
 8014044:	bfbf      	itttt	lt
 8014046:	9b07      	ldrlt	r3, [sp, #28]
 8014048:	9607      	strlt	r6, [sp, #28]
 801404a:	1af2      	sublt	r2, r6, r3
 801404c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801404e:	bfb6      	itet	lt
 8014050:	189b      	addlt	r3, r3, r2
 8014052:	1b9e      	subge	r6, r3, r6
 8014054:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014056:	9b03      	ldr	r3, [sp, #12]
 8014058:	bfb8      	it	lt
 801405a:	2600      	movlt	r6, #0
 801405c:	2b00      	cmp	r3, #0
 801405e:	bfb7      	itett	lt
 8014060:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014064:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014068:	1a9d      	sublt	r5, r3, r2
 801406a:	2300      	movlt	r3, #0
 801406c:	e734      	b.n	8013ed8 <_dtoa_r+0x720>
 801406e:	9e07      	ldr	r6, [sp, #28]
 8014070:	9d04      	ldr	r5, [sp, #16]
 8014072:	9f08      	ldr	r7, [sp, #32]
 8014074:	e73b      	b.n	8013eee <_dtoa_r+0x736>
 8014076:	9a07      	ldr	r2, [sp, #28]
 8014078:	e767      	b.n	8013f4a <_dtoa_r+0x792>
 801407a:	9b06      	ldr	r3, [sp, #24]
 801407c:	2b01      	cmp	r3, #1
 801407e:	dc18      	bgt.n	80140b2 <_dtoa_r+0x8fa>
 8014080:	f1ba 0f00 	cmp.w	sl, #0
 8014084:	d115      	bne.n	80140b2 <_dtoa_r+0x8fa>
 8014086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801408a:	b993      	cbnz	r3, 80140b2 <_dtoa_r+0x8fa>
 801408c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014090:	0d1b      	lsrs	r3, r3, #20
 8014092:	051b      	lsls	r3, r3, #20
 8014094:	b183      	cbz	r3, 80140b8 <_dtoa_r+0x900>
 8014096:	9b04      	ldr	r3, [sp, #16]
 8014098:	3301      	adds	r3, #1
 801409a:	9304      	str	r3, [sp, #16]
 801409c:	9b05      	ldr	r3, [sp, #20]
 801409e:	3301      	adds	r3, #1
 80140a0:	9305      	str	r3, [sp, #20]
 80140a2:	f04f 0801 	mov.w	r8, #1
 80140a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	f47f af6a 	bne.w	8013f82 <_dtoa_r+0x7ca>
 80140ae:	2001      	movs	r0, #1
 80140b0:	e76f      	b.n	8013f92 <_dtoa_r+0x7da>
 80140b2:	f04f 0800 	mov.w	r8, #0
 80140b6:	e7f6      	b.n	80140a6 <_dtoa_r+0x8ee>
 80140b8:	4698      	mov	r8, r3
 80140ba:	e7f4      	b.n	80140a6 <_dtoa_r+0x8ee>
 80140bc:	f43f af7d 	beq.w	8013fba <_dtoa_r+0x802>
 80140c0:	4618      	mov	r0, r3
 80140c2:	301c      	adds	r0, #28
 80140c4:	e772      	b.n	8013fac <_dtoa_r+0x7f4>
 80140c6:	9b03      	ldr	r3, [sp, #12]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	dc37      	bgt.n	801413c <_dtoa_r+0x984>
 80140cc:	9b06      	ldr	r3, [sp, #24]
 80140ce:	2b02      	cmp	r3, #2
 80140d0:	dd34      	ble.n	801413c <_dtoa_r+0x984>
 80140d2:	9b03      	ldr	r3, [sp, #12]
 80140d4:	9302      	str	r3, [sp, #8]
 80140d6:	9b02      	ldr	r3, [sp, #8]
 80140d8:	b96b      	cbnz	r3, 80140f6 <_dtoa_r+0x93e>
 80140da:	4631      	mov	r1, r6
 80140dc:	2205      	movs	r2, #5
 80140de:	4620      	mov	r0, r4
 80140e0:	f000 fe28 	bl	8014d34 <__multadd>
 80140e4:	4601      	mov	r1, r0
 80140e6:	4606      	mov	r6, r0
 80140e8:	ee18 0a10 	vmov	r0, s16
 80140ec:	f001 f88c 	bl	8015208 <__mcmp>
 80140f0:	2800      	cmp	r0, #0
 80140f2:	f73f adbb 	bgt.w	8013c6c <_dtoa_r+0x4b4>
 80140f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140f8:	9d01      	ldr	r5, [sp, #4]
 80140fa:	43db      	mvns	r3, r3
 80140fc:	9300      	str	r3, [sp, #0]
 80140fe:	f04f 0800 	mov.w	r8, #0
 8014102:	4631      	mov	r1, r6
 8014104:	4620      	mov	r0, r4
 8014106:	f000 fdf3 	bl	8014cf0 <_Bfree>
 801410a:	2f00      	cmp	r7, #0
 801410c:	f43f aea4 	beq.w	8013e58 <_dtoa_r+0x6a0>
 8014110:	f1b8 0f00 	cmp.w	r8, #0
 8014114:	d005      	beq.n	8014122 <_dtoa_r+0x96a>
 8014116:	45b8      	cmp	r8, r7
 8014118:	d003      	beq.n	8014122 <_dtoa_r+0x96a>
 801411a:	4641      	mov	r1, r8
 801411c:	4620      	mov	r0, r4
 801411e:	f000 fde7 	bl	8014cf0 <_Bfree>
 8014122:	4639      	mov	r1, r7
 8014124:	4620      	mov	r0, r4
 8014126:	f000 fde3 	bl	8014cf0 <_Bfree>
 801412a:	e695      	b.n	8013e58 <_dtoa_r+0x6a0>
 801412c:	2600      	movs	r6, #0
 801412e:	4637      	mov	r7, r6
 8014130:	e7e1      	b.n	80140f6 <_dtoa_r+0x93e>
 8014132:	9700      	str	r7, [sp, #0]
 8014134:	4637      	mov	r7, r6
 8014136:	e599      	b.n	8013c6c <_dtoa_r+0x4b4>
 8014138:	40240000 	.word	0x40240000
 801413c:	9b08      	ldr	r3, [sp, #32]
 801413e:	2b00      	cmp	r3, #0
 8014140:	f000 80ca 	beq.w	80142d8 <_dtoa_r+0xb20>
 8014144:	9b03      	ldr	r3, [sp, #12]
 8014146:	9302      	str	r3, [sp, #8]
 8014148:	2d00      	cmp	r5, #0
 801414a:	dd05      	ble.n	8014158 <_dtoa_r+0x9a0>
 801414c:	4639      	mov	r1, r7
 801414e:	462a      	mov	r2, r5
 8014150:	4620      	mov	r0, r4
 8014152:	f000 ffe9 	bl	8015128 <__lshift>
 8014156:	4607      	mov	r7, r0
 8014158:	f1b8 0f00 	cmp.w	r8, #0
 801415c:	d05b      	beq.n	8014216 <_dtoa_r+0xa5e>
 801415e:	6879      	ldr	r1, [r7, #4]
 8014160:	4620      	mov	r0, r4
 8014162:	f000 fd85 	bl	8014c70 <_Balloc>
 8014166:	4605      	mov	r5, r0
 8014168:	b928      	cbnz	r0, 8014176 <_dtoa_r+0x9be>
 801416a:	4b87      	ldr	r3, [pc, #540]	; (8014388 <_dtoa_r+0xbd0>)
 801416c:	4602      	mov	r2, r0
 801416e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014172:	f7ff bb3b 	b.w	80137ec <_dtoa_r+0x34>
 8014176:	693a      	ldr	r2, [r7, #16]
 8014178:	3202      	adds	r2, #2
 801417a:	0092      	lsls	r2, r2, #2
 801417c:	f107 010c 	add.w	r1, r7, #12
 8014180:	300c      	adds	r0, #12
 8014182:	f7fd fb7e 	bl	8011882 <memcpy>
 8014186:	2201      	movs	r2, #1
 8014188:	4629      	mov	r1, r5
 801418a:	4620      	mov	r0, r4
 801418c:	f000 ffcc 	bl	8015128 <__lshift>
 8014190:	9b01      	ldr	r3, [sp, #4]
 8014192:	f103 0901 	add.w	r9, r3, #1
 8014196:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801419a:	4413      	add	r3, r2
 801419c:	9305      	str	r3, [sp, #20]
 801419e:	f00a 0301 	and.w	r3, sl, #1
 80141a2:	46b8      	mov	r8, r7
 80141a4:	9304      	str	r3, [sp, #16]
 80141a6:	4607      	mov	r7, r0
 80141a8:	4631      	mov	r1, r6
 80141aa:	ee18 0a10 	vmov	r0, s16
 80141ae:	f7ff fa75 	bl	801369c <quorem>
 80141b2:	4641      	mov	r1, r8
 80141b4:	9002      	str	r0, [sp, #8]
 80141b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80141ba:	ee18 0a10 	vmov	r0, s16
 80141be:	f001 f823 	bl	8015208 <__mcmp>
 80141c2:	463a      	mov	r2, r7
 80141c4:	9003      	str	r0, [sp, #12]
 80141c6:	4631      	mov	r1, r6
 80141c8:	4620      	mov	r0, r4
 80141ca:	f001 f839 	bl	8015240 <__mdiff>
 80141ce:	68c2      	ldr	r2, [r0, #12]
 80141d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80141d4:	4605      	mov	r5, r0
 80141d6:	bb02      	cbnz	r2, 801421a <_dtoa_r+0xa62>
 80141d8:	4601      	mov	r1, r0
 80141da:	ee18 0a10 	vmov	r0, s16
 80141de:	f001 f813 	bl	8015208 <__mcmp>
 80141e2:	4602      	mov	r2, r0
 80141e4:	4629      	mov	r1, r5
 80141e6:	4620      	mov	r0, r4
 80141e8:	9207      	str	r2, [sp, #28]
 80141ea:	f000 fd81 	bl	8014cf0 <_Bfree>
 80141ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80141f2:	ea43 0102 	orr.w	r1, r3, r2
 80141f6:	9b04      	ldr	r3, [sp, #16]
 80141f8:	430b      	orrs	r3, r1
 80141fa:	464d      	mov	r5, r9
 80141fc:	d10f      	bne.n	801421e <_dtoa_r+0xa66>
 80141fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014202:	d02a      	beq.n	801425a <_dtoa_r+0xaa2>
 8014204:	9b03      	ldr	r3, [sp, #12]
 8014206:	2b00      	cmp	r3, #0
 8014208:	dd02      	ble.n	8014210 <_dtoa_r+0xa58>
 801420a:	9b02      	ldr	r3, [sp, #8]
 801420c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014210:	f88b a000 	strb.w	sl, [fp]
 8014214:	e775      	b.n	8014102 <_dtoa_r+0x94a>
 8014216:	4638      	mov	r0, r7
 8014218:	e7ba      	b.n	8014190 <_dtoa_r+0x9d8>
 801421a:	2201      	movs	r2, #1
 801421c:	e7e2      	b.n	80141e4 <_dtoa_r+0xa2c>
 801421e:	9b03      	ldr	r3, [sp, #12]
 8014220:	2b00      	cmp	r3, #0
 8014222:	db04      	blt.n	801422e <_dtoa_r+0xa76>
 8014224:	9906      	ldr	r1, [sp, #24]
 8014226:	430b      	orrs	r3, r1
 8014228:	9904      	ldr	r1, [sp, #16]
 801422a:	430b      	orrs	r3, r1
 801422c:	d122      	bne.n	8014274 <_dtoa_r+0xabc>
 801422e:	2a00      	cmp	r2, #0
 8014230:	ddee      	ble.n	8014210 <_dtoa_r+0xa58>
 8014232:	ee18 1a10 	vmov	r1, s16
 8014236:	2201      	movs	r2, #1
 8014238:	4620      	mov	r0, r4
 801423a:	f000 ff75 	bl	8015128 <__lshift>
 801423e:	4631      	mov	r1, r6
 8014240:	ee08 0a10 	vmov	s16, r0
 8014244:	f000 ffe0 	bl	8015208 <__mcmp>
 8014248:	2800      	cmp	r0, #0
 801424a:	dc03      	bgt.n	8014254 <_dtoa_r+0xa9c>
 801424c:	d1e0      	bne.n	8014210 <_dtoa_r+0xa58>
 801424e:	f01a 0f01 	tst.w	sl, #1
 8014252:	d0dd      	beq.n	8014210 <_dtoa_r+0xa58>
 8014254:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014258:	d1d7      	bne.n	801420a <_dtoa_r+0xa52>
 801425a:	2339      	movs	r3, #57	; 0x39
 801425c:	f88b 3000 	strb.w	r3, [fp]
 8014260:	462b      	mov	r3, r5
 8014262:	461d      	mov	r5, r3
 8014264:	3b01      	subs	r3, #1
 8014266:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801426a:	2a39      	cmp	r2, #57	; 0x39
 801426c:	d071      	beq.n	8014352 <_dtoa_r+0xb9a>
 801426e:	3201      	adds	r2, #1
 8014270:	701a      	strb	r2, [r3, #0]
 8014272:	e746      	b.n	8014102 <_dtoa_r+0x94a>
 8014274:	2a00      	cmp	r2, #0
 8014276:	dd07      	ble.n	8014288 <_dtoa_r+0xad0>
 8014278:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801427c:	d0ed      	beq.n	801425a <_dtoa_r+0xaa2>
 801427e:	f10a 0301 	add.w	r3, sl, #1
 8014282:	f88b 3000 	strb.w	r3, [fp]
 8014286:	e73c      	b.n	8014102 <_dtoa_r+0x94a>
 8014288:	9b05      	ldr	r3, [sp, #20]
 801428a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801428e:	4599      	cmp	r9, r3
 8014290:	d047      	beq.n	8014322 <_dtoa_r+0xb6a>
 8014292:	ee18 1a10 	vmov	r1, s16
 8014296:	2300      	movs	r3, #0
 8014298:	220a      	movs	r2, #10
 801429a:	4620      	mov	r0, r4
 801429c:	f000 fd4a 	bl	8014d34 <__multadd>
 80142a0:	45b8      	cmp	r8, r7
 80142a2:	ee08 0a10 	vmov	s16, r0
 80142a6:	f04f 0300 	mov.w	r3, #0
 80142aa:	f04f 020a 	mov.w	r2, #10
 80142ae:	4641      	mov	r1, r8
 80142b0:	4620      	mov	r0, r4
 80142b2:	d106      	bne.n	80142c2 <_dtoa_r+0xb0a>
 80142b4:	f000 fd3e 	bl	8014d34 <__multadd>
 80142b8:	4680      	mov	r8, r0
 80142ba:	4607      	mov	r7, r0
 80142bc:	f109 0901 	add.w	r9, r9, #1
 80142c0:	e772      	b.n	80141a8 <_dtoa_r+0x9f0>
 80142c2:	f000 fd37 	bl	8014d34 <__multadd>
 80142c6:	4639      	mov	r1, r7
 80142c8:	4680      	mov	r8, r0
 80142ca:	2300      	movs	r3, #0
 80142cc:	220a      	movs	r2, #10
 80142ce:	4620      	mov	r0, r4
 80142d0:	f000 fd30 	bl	8014d34 <__multadd>
 80142d4:	4607      	mov	r7, r0
 80142d6:	e7f1      	b.n	80142bc <_dtoa_r+0xb04>
 80142d8:	9b03      	ldr	r3, [sp, #12]
 80142da:	9302      	str	r3, [sp, #8]
 80142dc:	9d01      	ldr	r5, [sp, #4]
 80142de:	ee18 0a10 	vmov	r0, s16
 80142e2:	4631      	mov	r1, r6
 80142e4:	f7ff f9da 	bl	801369c <quorem>
 80142e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80142ec:	9b01      	ldr	r3, [sp, #4]
 80142ee:	f805 ab01 	strb.w	sl, [r5], #1
 80142f2:	1aea      	subs	r2, r5, r3
 80142f4:	9b02      	ldr	r3, [sp, #8]
 80142f6:	4293      	cmp	r3, r2
 80142f8:	dd09      	ble.n	801430e <_dtoa_r+0xb56>
 80142fa:	ee18 1a10 	vmov	r1, s16
 80142fe:	2300      	movs	r3, #0
 8014300:	220a      	movs	r2, #10
 8014302:	4620      	mov	r0, r4
 8014304:	f000 fd16 	bl	8014d34 <__multadd>
 8014308:	ee08 0a10 	vmov	s16, r0
 801430c:	e7e7      	b.n	80142de <_dtoa_r+0xb26>
 801430e:	9b02      	ldr	r3, [sp, #8]
 8014310:	2b00      	cmp	r3, #0
 8014312:	bfc8      	it	gt
 8014314:	461d      	movgt	r5, r3
 8014316:	9b01      	ldr	r3, [sp, #4]
 8014318:	bfd8      	it	le
 801431a:	2501      	movle	r5, #1
 801431c:	441d      	add	r5, r3
 801431e:	f04f 0800 	mov.w	r8, #0
 8014322:	ee18 1a10 	vmov	r1, s16
 8014326:	2201      	movs	r2, #1
 8014328:	4620      	mov	r0, r4
 801432a:	f000 fefd 	bl	8015128 <__lshift>
 801432e:	4631      	mov	r1, r6
 8014330:	ee08 0a10 	vmov	s16, r0
 8014334:	f000 ff68 	bl	8015208 <__mcmp>
 8014338:	2800      	cmp	r0, #0
 801433a:	dc91      	bgt.n	8014260 <_dtoa_r+0xaa8>
 801433c:	d102      	bne.n	8014344 <_dtoa_r+0xb8c>
 801433e:	f01a 0f01 	tst.w	sl, #1
 8014342:	d18d      	bne.n	8014260 <_dtoa_r+0xaa8>
 8014344:	462b      	mov	r3, r5
 8014346:	461d      	mov	r5, r3
 8014348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801434c:	2a30      	cmp	r2, #48	; 0x30
 801434e:	d0fa      	beq.n	8014346 <_dtoa_r+0xb8e>
 8014350:	e6d7      	b.n	8014102 <_dtoa_r+0x94a>
 8014352:	9a01      	ldr	r2, [sp, #4]
 8014354:	429a      	cmp	r2, r3
 8014356:	d184      	bne.n	8014262 <_dtoa_r+0xaaa>
 8014358:	9b00      	ldr	r3, [sp, #0]
 801435a:	3301      	adds	r3, #1
 801435c:	9300      	str	r3, [sp, #0]
 801435e:	2331      	movs	r3, #49	; 0x31
 8014360:	7013      	strb	r3, [r2, #0]
 8014362:	e6ce      	b.n	8014102 <_dtoa_r+0x94a>
 8014364:	4b09      	ldr	r3, [pc, #36]	; (801438c <_dtoa_r+0xbd4>)
 8014366:	f7ff ba95 	b.w	8013894 <_dtoa_r+0xdc>
 801436a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801436c:	2b00      	cmp	r3, #0
 801436e:	f47f aa6e 	bne.w	801384e <_dtoa_r+0x96>
 8014372:	4b07      	ldr	r3, [pc, #28]	; (8014390 <_dtoa_r+0xbd8>)
 8014374:	f7ff ba8e 	b.w	8013894 <_dtoa_r+0xdc>
 8014378:	9b02      	ldr	r3, [sp, #8]
 801437a:	2b00      	cmp	r3, #0
 801437c:	dcae      	bgt.n	80142dc <_dtoa_r+0xb24>
 801437e:	9b06      	ldr	r3, [sp, #24]
 8014380:	2b02      	cmp	r3, #2
 8014382:	f73f aea8 	bgt.w	80140d6 <_dtoa_r+0x91e>
 8014386:	e7a9      	b.n	80142dc <_dtoa_r+0xb24>
 8014388:	080165e0 	.word	0x080165e0
 801438c:	080163e4 	.word	0x080163e4
 8014390:	08016561 	.word	0x08016561

08014394 <__sflush_r>:
 8014394:	898a      	ldrh	r2, [r1, #12]
 8014396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801439a:	4605      	mov	r5, r0
 801439c:	0710      	lsls	r0, r2, #28
 801439e:	460c      	mov	r4, r1
 80143a0:	d458      	bmi.n	8014454 <__sflush_r+0xc0>
 80143a2:	684b      	ldr	r3, [r1, #4]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	dc05      	bgt.n	80143b4 <__sflush_r+0x20>
 80143a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	dc02      	bgt.n	80143b4 <__sflush_r+0x20>
 80143ae:	2000      	movs	r0, #0
 80143b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80143b6:	2e00      	cmp	r6, #0
 80143b8:	d0f9      	beq.n	80143ae <__sflush_r+0x1a>
 80143ba:	2300      	movs	r3, #0
 80143bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80143c0:	682f      	ldr	r7, [r5, #0]
 80143c2:	602b      	str	r3, [r5, #0]
 80143c4:	d032      	beq.n	801442c <__sflush_r+0x98>
 80143c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80143c8:	89a3      	ldrh	r3, [r4, #12]
 80143ca:	075a      	lsls	r2, r3, #29
 80143cc:	d505      	bpl.n	80143da <__sflush_r+0x46>
 80143ce:	6863      	ldr	r3, [r4, #4]
 80143d0:	1ac0      	subs	r0, r0, r3
 80143d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80143d4:	b10b      	cbz	r3, 80143da <__sflush_r+0x46>
 80143d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80143d8:	1ac0      	subs	r0, r0, r3
 80143da:	2300      	movs	r3, #0
 80143dc:	4602      	mov	r2, r0
 80143de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80143e0:	6a21      	ldr	r1, [r4, #32]
 80143e2:	4628      	mov	r0, r5
 80143e4:	47b0      	blx	r6
 80143e6:	1c43      	adds	r3, r0, #1
 80143e8:	89a3      	ldrh	r3, [r4, #12]
 80143ea:	d106      	bne.n	80143fa <__sflush_r+0x66>
 80143ec:	6829      	ldr	r1, [r5, #0]
 80143ee:	291d      	cmp	r1, #29
 80143f0:	d82c      	bhi.n	801444c <__sflush_r+0xb8>
 80143f2:	4a2a      	ldr	r2, [pc, #168]	; (801449c <__sflush_r+0x108>)
 80143f4:	40ca      	lsrs	r2, r1
 80143f6:	07d6      	lsls	r6, r2, #31
 80143f8:	d528      	bpl.n	801444c <__sflush_r+0xb8>
 80143fa:	2200      	movs	r2, #0
 80143fc:	6062      	str	r2, [r4, #4]
 80143fe:	04d9      	lsls	r1, r3, #19
 8014400:	6922      	ldr	r2, [r4, #16]
 8014402:	6022      	str	r2, [r4, #0]
 8014404:	d504      	bpl.n	8014410 <__sflush_r+0x7c>
 8014406:	1c42      	adds	r2, r0, #1
 8014408:	d101      	bne.n	801440e <__sflush_r+0x7a>
 801440a:	682b      	ldr	r3, [r5, #0]
 801440c:	b903      	cbnz	r3, 8014410 <__sflush_r+0x7c>
 801440e:	6560      	str	r0, [r4, #84]	; 0x54
 8014410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014412:	602f      	str	r7, [r5, #0]
 8014414:	2900      	cmp	r1, #0
 8014416:	d0ca      	beq.n	80143ae <__sflush_r+0x1a>
 8014418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801441c:	4299      	cmp	r1, r3
 801441e:	d002      	beq.n	8014426 <__sflush_r+0x92>
 8014420:	4628      	mov	r0, r5
 8014422:	f001 f8fd 	bl	8015620 <_free_r>
 8014426:	2000      	movs	r0, #0
 8014428:	6360      	str	r0, [r4, #52]	; 0x34
 801442a:	e7c1      	b.n	80143b0 <__sflush_r+0x1c>
 801442c:	6a21      	ldr	r1, [r4, #32]
 801442e:	2301      	movs	r3, #1
 8014430:	4628      	mov	r0, r5
 8014432:	47b0      	blx	r6
 8014434:	1c41      	adds	r1, r0, #1
 8014436:	d1c7      	bne.n	80143c8 <__sflush_r+0x34>
 8014438:	682b      	ldr	r3, [r5, #0]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d0c4      	beq.n	80143c8 <__sflush_r+0x34>
 801443e:	2b1d      	cmp	r3, #29
 8014440:	d001      	beq.n	8014446 <__sflush_r+0xb2>
 8014442:	2b16      	cmp	r3, #22
 8014444:	d101      	bne.n	801444a <__sflush_r+0xb6>
 8014446:	602f      	str	r7, [r5, #0]
 8014448:	e7b1      	b.n	80143ae <__sflush_r+0x1a>
 801444a:	89a3      	ldrh	r3, [r4, #12]
 801444c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014450:	81a3      	strh	r3, [r4, #12]
 8014452:	e7ad      	b.n	80143b0 <__sflush_r+0x1c>
 8014454:	690f      	ldr	r7, [r1, #16]
 8014456:	2f00      	cmp	r7, #0
 8014458:	d0a9      	beq.n	80143ae <__sflush_r+0x1a>
 801445a:	0793      	lsls	r3, r2, #30
 801445c:	680e      	ldr	r6, [r1, #0]
 801445e:	bf08      	it	eq
 8014460:	694b      	ldreq	r3, [r1, #20]
 8014462:	600f      	str	r7, [r1, #0]
 8014464:	bf18      	it	ne
 8014466:	2300      	movne	r3, #0
 8014468:	eba6 0807 	sub.w	r8, r6, r7
 801446c:	608b      	str	r3, [r1, #8]
 801446e:	f1b8 0f00 	cmp.w	r8, #0
 8014472:	dd9c      	ble.n	80143ae <__sflush_r+0x1a>
 8014474:	6a21      	ldr	r1, [r4, #32]
 8014476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014478:	4643      	mov	r3, r8
 801447a:	463a      	mov	r2, r7
 801447c:	4628      	mov	r0, r5
 801447e:	47b0      	blx	r6
 8014480:	2800      	cmp	r0, #0
 8014482:	dc06      	bgt.n	8014492 <__sflush_r+0xfe>
 8014484:	89a3      	ldrh	r3, [r4, #12]
 8014486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801448a:	81a3      	strh	r3, [r4, #12]
 801448c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014490:	e78e      	b.n	80143b0 <__sflush_r+0x1c>
 8014492:	4407      	add	r7, r0
 8014494:	eba8 0800 	sub.w	r8, r8, r0
 8014498:	e7e9      	b.n	801446e <__sflush_r+0xda>
 801449a:	bf00      	nop
 801449c:	20400001 	.word	0x20400001

080144a0 <_fflush_r>:
 80144a0:	b538      	push	{r3, r4, r5, lr}
 80144a2:	690b      	ldr	r3, [r1, #16]
 80144a4:	4605      	mov	r5, r0
 80144a6:	460c      	mov	r4, r1
 80144a8:	b913      	cbnz	r3, 80144b0 <_fflush_r+0x10>
 80144aa:	2500      	movs	r5, #0
 80144ac:	4628      	mov	r0, r5
 80144ae:	bd38      	pop	{r3, r4, r5, pc}
 80144b0:	b118      	cbz	r0, 80144ba <_fflush_r+0x1a>
 80144b2:	6983      	ldr	r3, [r0, #24]
 80144b4:	b90b      	cbnz	r3, 80144ba <_fflush_r+0x1a>
 80144b6:	f7fd f91f 	bl	80116f8 <__sinit>
 80144ba:	4b14      	ldr	r3, [pc, #80]	; (801450c <_fflush_r+0x6c>)
 80144bc:	429c      	cmp	r4, r3
 80144be:	d11b      	bne.n	80144f8 <_fflush_r+0x58>
 80144c0:	686c      	ldr	r4, [r5, #4]
 80144c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d0ef      	beq.n	80144aa <_fflush_r+0xa>
 80144ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80144cc:	07d0      	lsls	r0, r2, #31
 80144ce:	d404      	bmi.n	80144da <_fflush_r+0x3a>
 80144d0:	0599      	lsls	r1, r3, #22
 80144d2:	d402      	bmi.n	80144da <_fflush_r+0x3a>
 80144d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144d6:	f7fd f9d2 	bl	801187e <__retarget_lock_acquire_recursive>
 80144da:	4628      	mov	r0, r5
 80144dc:	4621      	mov	r1, r4
 80144de:	f7ff ff59 	bl	8014394 <__sflush_r>
 80144e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80144e4:	07da      	lsls	r2, r3, #31
 80144e6:	4605      	mov	r5, r0
 80144e8:	d4e0      	bmi.n	80144ac <_fflush_r+0xc>
 80144ea:	89a3      	ldrh	r3, [r4, #12]
 80144ec:	059b      	lsls	r3, r3, #22
 80144ee:	d4dd      	bmi.n	80144ac <_fflush_r+0xc>
 80144f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144f2:	f7fd f9c5 	bl	8011880 <__retarget_lock_release_recursive>
 80144f6:	e7d9      	b.n	80144ac <_fflush_r+0xc>
 80144f8:	4b05      	ldr	r3, [pc, #20]	; (8014510 <_fflush_r+0x70>)
 80144fa:	429c      	cmp	r4, r3
 80144fc:	d101      	bne.n	8014502 <_fflush_r+0x62>
 80144fe:	68ac      	ldr	r4, [r5, #8]
 8014500:	e7df      	b.n	80144c2 <_fflush_r+0x22>
 8014502:	4b04      	ldr	r3, [pc, #16]	; (8014514 <_fflush_r+0x74>)
 8014504:	429c      	cmp	r4, r3
 8014506:	bf08      	it	eq
 8014508:	68ec      	ldreq	r4, [r5, #12]
 801450a:	e7da      	b.n	80144c2 <_fflush_r+0x22>
 801450c:	08016390 	.word	0x08016390
 8014510:	080163b0 	.word	0x080163b0
 8014514:	08016370 	.word	0x08016370

08014518 <rshift>:
 8014518:	6903      	ldr	r3, [r0, #16]
 801451a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801451e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014522:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014526:	f100 0414 	add.w	r4, r0, #20
 801452a:	dd45      	ble.n	80145b8 <rshift+0xa0>
 801452c:	f011 011f 	ands.w	r1, r1, #31
 8014530:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014534:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014538:	d10c      	bne.n	8014554 <rshift+0x3c>
 801453a:	f100 0710 	add.w	r7, r0, #16
 801453e:	4629      	mov	r1, r5
 8014540:	42b1      	cmp	r1, r6
 8014542:	d334      	bcc.n	80145ae <rshift+0x96>
 8014544:	1a9b      	subs	r3, r3, r2
 8014546:	009b      	lsls	r3, r3, #2
 8014548:	1eea      	subs	r2, r5, #3
 801454a:	4296      	cmp	r6, r2
 801454c:	bf38      	it	cc
 801454e:	2300      	movcc	r3, #0
 8014550:	4423      	add	r3, r4
 8014552:	e015      	b.n	8014580 <rshift+0x68>
 8014554:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014558:	f1c1 0820 	rsb	r8, r1, #32
 801455c:	40cf      	lsrs	r7, r1
 801455e:	f105 0e04 	add.w	lr, r5, #4
 8014562:	46a1      	mov	r9, r4
 8014564:	4576      	cmp	r6, lr
 8014566:	46f4      	mov	ip, lr
 8014568:	d815      	bhi.n	8014596 <rshift+0x7e>
 801456a:	1a9a      	subs	r2, r3, r2
 801456c:	0092      	lsls	r2, r2, #2
 801456e:	3a04      	subs	r2, #4
 8014570:	3501      	adds	r5, #1
 8014572:	42ae      	cmp	r6, r5
 8014574:	bf38      	it	cc
 8014576:	2200      	movcc	r2, #0
 8014578:	18a3      	adds	r3, r4, r2
 801457a:	50a7      	str	r7, [r4, r2]
 801457c:	b107      	cbz	r7, 8014580 <rshift+0x68>
 801457e:	3304      	adds	r3, #4
 8014580:	1b1a      	subs	r2, r3, r4
 8014582:	42a3      	cmp	r3, r4
 8014584:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014588:	bf08      	it	eq
 801458a:	2300      	moveq	r3, #0
 801458c:	6102      	str	r2, [r0, #16]
 801458e:	bf08      	it	eq
 8014590:	6143      	streq	r3, [r0, #20]
 8014592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014596:	f8dc c000 	ldr.w	ip, [ip]
 801459a:	fa0c fc08 	lsl.w	ip, ip, r8
 801459e:	ea4c 0707 	orr.w	r7, ip, r7
 80145a2:	f849 7b04 	str.w	r7, [r9], #4
 80145a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80145aa:	40cf      	lsrs	r7, r1
 80145ac:	e7da      	b.n	8014564 <rshift+0x4c>
 80145ae:	f851 cb04 	ldr.w	ip, [r1], #4
 80145b2:	f847 cf04 	str.w	ip, [r7, #4]!
 80145b6:	e7c3      	b.n	8014540 <rshift+0x28>
 80145b8:	4623      	mov	r3, r4
 80145ba:	e7e1      	b.n	8014580 <rshift+0x68>

080145bc <__hexdig_fun>:
 80145bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80145c0:	2b09      	cmp	r3, #9
 80145c2:	d802      	bhi.n	80145ca <__hexdig_fun+0xe>
 80145c4:	3820      	subs	r0, #32
 80145c6:	b2c0      	uxtb	r0, r0
 80145c8:	4770      	bx	lr
 80145ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80145ce:	2b05      	cmp	r3, #5
 80145d0:	d801      	bhi.n	80145d6 <__hexdig_fun+0x1a>
 80145d2:	3847      	subs	r0, #71	; 0x47
 80145d4:	e7f7      	b.n	80145c6 <__hexdig_fun+0xa>
 80145d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80145da:	2b05      	cmp	r3, #5
 80145dc:	d801      	bhi.n	80145e2 <__hexdig_fun+0x26>
 80145de:	3827      	subs	r0, #39	; 0x27
 80145e0:	e7f1      	b.n	80145c6 <__hexdig_fun+0xa>
 80145e2:	2000      	movs	r0, #0
 80145e4:	4770      	bx	lr
	...

080145e8 <__gethex>:
 80145e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145ec:	ed2d 8b02 	vpush	{d8}
 80145f0:	b089      	sub	sp, #36	; 0x24
 80145f2:	ee08 0a10 	vmov	s16, r0
 80145f6:	9304      	str	r3, [sp, #16]
 80145f8:	4bb4      	ldr	r3, [pc, #720]	; (80148cc <__gethex+0x2e4>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	9301      	str	r3, [sp, #4]
 80145fe:	4618      	mov	r0, r3
 8014600:	468b      	mov	fp, r1
 8014602:	4690      	mov	r8, r2
 8014604:	f7eb fdfc 	bl	8000200 <strlen>
 8014608:	9b01      	ldr	r3, [sp, #4]
 801460a:	f8db 2000 	ldr.w	r2, [fp]
 801460e:	4403      	add	r3, r0
 8014610:	4682      	mov	sl, r0
 8014612:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014616:	9305      	str	r3, [sp, #20]
 8014618:	1c93      	adds	r3, r2, #2
 801461a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801461e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014622:	32fe      	adds	r2, #254	; 0xfe
 8014624:	18d1      	adds	r1, r2, r3
 8014626:	461f      	mov	r7, r3
 8014628:	f813 0b01 	ldrb.w	r0, [r3], #1
 801462c:	9100      	str	r1, [sp, #0]
 801462e:	2830      	cmp	r0, #48	; 0x30
 8014630:	d0f8      	beq.n	8014624 <__gethex+0x3c>
 8014632:	f7ff ffc3 	bl	80145bc <__hexdig_fun>
 8014636:	4604      	mov	r4, r0
 8014638:	2800      	cmp	r0, #0
 801463a:	d13a      	bne.n	80146b2 <__gethex+0xca>
 801463c:	9901      	ldr	r1, [sp, #4]
 801463e:	4652      	mov	r2, sl
 8014640:	4638      	mov	r0, r7
 8014642:	f001 f9b1 	bl	80159a8 <strncmp>
 8014646:	4605      	mov	r5, r0
 8014648:	2800      	cmp	r0, #0
 801464a:	d168      	bne.n	801471e <__gethex+0x136>
 801464c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014650:	eb07 060a 	add.w	r6, r7, sl
 8014654:	f7ff ffb2 	bl	80145bc <__hexdig_fun>
 8014658:	2800      	cmp	r0, #0
 801465a:	d062      	beq.n	8014722 <__gethex+0x13a>
 801465c:	4633      	mov	r3, r6
 801465e:	7818      	ldrb	r0, [r3, #0]
 8014660:	2830      	cmp	r0, #48	; 0x30
 8014662:	461f      	mov	r7, r3
 8014664:	f103 0301 	add.w	r3, r3, #1
 8014668:	d0f9      	beq.n	801465e <__gethex+0x76>
 801466a:	f7ff ffa7 	bl	80145bc <__hexdig_fun>
 801466e:	2301      	movs	r3, #1
 8014670:	fab0 f480 	clz	r4, r0
 8014674:	0964      	lsrs	r4, r4, #5
 8014676:	4635      	mov	r5, r6
 8014678:	9300      	str	r3, [sp, #0]
 801467a:	463a      	mov	r2, r7
 801467c:	4616      	mov	r6, r2
 801467e:	3201      	adds	r2, #1
 8014680:	7830      	ldrb	r0, [r6, #0]
 8014682:	f7ff ff9b 	bl	80145bc <__hexdig_fun>
 8014686:	2800      	cmp	r0, #0
 8014688:	d1f8      	bne.n	801467c <__gethex+0x94>
 801468a:	9901      	ldr	r1, [sp, #4]
 801468c:	4652      	mov	r2, sl
 801468e:	4630      	mov	r0, r6
 8014690:	f001 f98a 	bl	80159a8 <strncmp>
 8014694:	b980      	cbnz	r0, 80146b8 <__gethex+0xd0>
 8014696:	b94d      	cbnz	r5, 80146ac <__gethex+0xc4>
 8014698:	eb06 050a 	add.w	r5, r6, sl
 801469c:	462a      	mov	r2, r5
 801469e:	4616      	mov	r6, r2
 80146a0:	3201      	adds	r2, #1
 80146a2:	7830      	ldrb	r0, [r6, #0]
 80146a4:	f7ff ff8a 	bl	80145bc <__hexdig_fun>
 80146a8:	2800      	cmp	r0, #0
 80146aa:	d1f8      	bne.n	801469e <__gethex+0xb6>
 80146ac:	1bad      	subs	r5, r5, r6
 80146ae:	00ad      	lsls	r5, r5, #2
 80146b0:	e004      	b.n	80146bc <__gethex+0xd4>
 80146b2:	2400      	movs	r4, #0
 80146b4:	4625      	mov	r5, r4
 80146b6:	e7e0      	b.n	801467a <__gethex+0x92>
 80146b8:	2d00      	cmp	r5, #0
 80146ba:	d1f7      	bne.n	80146ac <__gethex+0xc4>
 80146bc:	7833      	ldrb	r3, [r6, #0]
 80146be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80146c2:	2b50      	cmp	r3, #80	; 0x50
 80146c4:	d13b      	bne.n	801473e <__gethex+0x156>
 80146c6:	7873      	ldrb	r3, [r6, #1]
 80146c8:	2b2b      	cmp	r3, #43	; 0x2b
 80146ca:	d02c      	beq.n	8014726 <__gethex+0x13e>
 80146cc:	2b2d      	cmp	r3, #45	; 0x2d
 80146ce:	d02e      	beq.n	801472e <__gethex+0x146>
 80146d0:	1c71      	adds	r1, r6, #1
 80146d2:	f04f 0900 	mov.w	r9, #0
 80146d6:	7808      	ldrb	r0, [r1, #0]
 80146d8:	f7ff ff70 	bl	80145bc <__hexdig_fun>
 80146dc:	1e43      	subs	r3, r0, #1
 80146de:	b2db      	uxtb	r3, r3
 80146e0:	2b18      	cmp	r3, #24
 80146e2:	d82c      	bhi.n	801473e <__gethex+0x156>
 80146e4:	f1a0 0210 	sub.w	r2, r0, #16
 80146e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80146ec:	f7ff ff66 	bl	80145bc <__hexdig_fun>
 80146f0:	1e43      	subs	r3, r0, #1
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	2b18      	cmp	r3, #24
 80146f6:	d91d      	bls.n	8014734 <__gethex+0x14c>
 80146f8:	f1b9 0f00 	cmp.w	r9, #0
 80146fc:	d000      	beq.n	8014700 <__gethex+0x118>
 80146fe:	4252      	negs	r2, r2
 8014700:	4415      	add	r5, r2
 8014702:	f8cb 1000 	str.w	r1, [fp]
 8014706:	b1e4      	cbz	r4, 8014742 <__gethex+0x15a>
 8014708:	9b00      	ldr	r3, [sp, #0]
 801470a:	2b00      	cmp	r3, #0
 801470c:	bf14      	ite	ne
 801470e:	2700      	movne	r7, #0
 8014710:	2706      	moveq	r7, #6
 8014712:	4638      	mov	r0, r7
 8014714:	b009      	add	sp, #36	; 0x24
 8014716:	ecbd 8b02 	vpop	{d8}
 801471a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801471e:	463e      	mov	r6, r7
 8014720:	4625      	mov	r5, r4
 8014722:	2401      	movs	r4, #1
 8014724:	e7ca      	b.n	80146bc <__gethex+0xd4>
 8014726:	f04f 0900 	mov.w	r9, #0
 801472a:	1cb1      	adds	r1, r6, #2
 801472c:	e7d3      	b.n	80146d6 <__gethex+0xee>
 801472e:	f04f 0901 	mov.w	r9, #1
 8014732:	e7fa      	b.n	801472a <__gethex+0x142>
 8014734:	230a      	movs	r3, #10
 8014736:	fb03 0202 	mla	r2, r3, r2, r0
 801473a:	3a10      	subs	r2, #16
 801473c:	e7d4      	b.n	80146e8 <__gethex+0x100>
 801473e:	4631      	mov	r1, r6
 8014740:	e7df      	b.n	8014702 <__gethex+0x11a>
 8014742:	1bf3      	subs	r3, r6, r7
 8014744:	3b01      	subs	r3, #1
 8014746:	4621      	mov	r1, r4
 8014748:	2b07      	cmp	r3, #7
 801474a:	dc0b      	bgt.n	8014764 <__gethex+0x17c>
 801474c:	ee18 0a10 	vmov	r0, s16
 8014750:	f000 fa8e 	bl	8014c70 <_Balloc>
 8014754:	4604      	mov	r4, r0
 8014756:	b940      	cbnz	r0, 801476a <__gethex+0x182>
 8014758:	4b5d      	ldr	r3, [pc, #372]	; (80148d0 <__gethex+0x2e8>)
 801475a:	4602      	mov	r2, r0
 801475c:	21de      	movs	r1, #222	; 0xde
 801475e:	485d      	ldr	r0, [pc, #372]	; (80148d4 <__gethex+0x2ec>)
 8014760:	f001 f944 	bl	80159ec <__assert_func>
 8014764:	3101      	adds	r1, #1
 8014766:	105b      	asrs	r3, r3, #1
 8014768:	e7ee      	b.n	8014748 <__gethex+0x160>
 801476a:	f100 0914 	add.w	r9, r0, #20
 801476e:	f04f 0b00 	mov.w	fp, #0
 8014772:	f1ca 0301 	rsb	r3, sl, #1
 8014776:	f8cd 9008 	str.w	r9, [sp, #8]
 801477a:	f8cd b000 	str.w	fp, [sp]
 801477e:	9306      	str	r3, [sp, #24]
 8014780:	42b7      	cmp	r7, r6
 8014782:	d340      	bcc.n	8014806 <__gethex+0x21e>
 8014784:	9802      	ldr	r0, [sp, #8]
 8014786:	9b00      	ldr	r3, [sp, #0]
 8014788:	f840 3b04 	str.w	r3, [r0], #4
 801478c:	eba0 0009 	sub.w	r0, r0, r9
 8014790:	1080      	asrs	r0, r0, #2
 8014792:	0146      	lsls	r6, r0, #5
 8014794:	6120      	str	r0, [r4, #16]
 8014796:	4618      	mov	r0, r3
 8014798:	f000 fb5c 	bl	8014e54 <__hi0bits>
 801479c:	1a30      	subs	r0, r6, r0
 801479e:	f8d8 6000 	ldr.w	r6, [r8]
 80147a2:	42b0      	cmp	r0, r6
 80147a4:	dd63      	ble.n	801486e <__gethex+0x286>
 80147a6:	1b87      	subs	r7, r0, r6
 80147a8:	4639      	mov	r1, r7
 80147aa:	4620      	mov	r0, r4
 80147ac:	f000 ff00 	bl	80155b0 <__any_on>
 80147b0:	4682      	mov	sl, r0
 80147b2:	b1a8      	cbz	r0, 80147e0 <__gethex+0x1f8>
 80147b4:	1e7b      	subs	r3, r7, #1
 80147b6:	1159      	asrs	r1, r3, #5
 80147b8:	f003 021f 	and.w	r2, r3, #31
 80147bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80147c0:	f04f 0a01 	mov.w	sl, #1
 80147c4:	fa0a f202 	lsl.w	r2, sl, r2
 80147c8:	420a      	tst	r2, r1
 80147ca:	d009      	beq.n	80147e0 <__gethex+0x1f8>
 80147cc:	4553      	cmp	r3, sl
 80147ce:	dd05      	ble.n	80147dc <__gethex+0x1f4>
 80147d0:	1eb9      	subs	r1, r7, #2
 80147d2:	4620      	mov	r0, r4
 80147d4:	f000 feec 	bl	80155b0 <__any_on>
 80147d8:	2800      	cmp	r0, #0
 80147da:	d145      	bne.n	8014868 <__gethex+0x280>
 80147dc:	f04f 0a02 	mov.w	sl, #2
 80147e0:	4639      	mov	r1, r7
 80147e2:	4620      	mov	r0, r4
 80147e4:	f7ff fe98 	bl	8014518 <rshift>
 80147e8:	443d      	add	r5, r7
 80147ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80147ee:	42ab      	cmp	r3, r5
 80147f0:	da4c      	bge.n	801488c <__gethex+0x2a4>
 80147f2:	ee18 0a10 	vmov	r0, s16
 80147f6:	4621      	mov	r1, r4
 80147f8:	f000 fa7a 	bl	8014cf0 <_Bfree>
 80147fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80147fe:	2300      	movs	r3, #0
 8014800:	6013      	str	r3, [r2, #0]
 8014802:	27a3      	movs	r7, #163	; 0xa3
 8014804:	e785      	b.n	8014712 <__gethex+0x12a>
 8014806:	1e73      	subs	r3, r6, #1
 8014808:	9a05      	ldr	r2, [sp, #20]
 801480a:	9303      	str	r3, [sp, #12]
 801480c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014810:	4293      	cmp	r3, r2
 8014812:	d019      	beq.n	8014848 <__gethex+0x260>
 8014814:	f1bb 0f20 	cmp.w	fp, #32
 8014818:	d107      	bne.n	801482a <__gethex+0x242>
 801481a:	9b02      	ldr	r3, [sp, #8]
 801481c:	9a00      	ldr	r2, [sp, #0]
 801481e:	f843 2b04 	str.w	r2, [r3], #4
 8014822:	9302      	str	r3, [sp, #8]
 8014824:	2300      	movs	r3, #0
 8014826:	9300      	str	r3, [sp, #0]
 8014828:	469b      	mov	fp, r3
 801482a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801482e:	f7ff fec5 	bl	80145bc <__hexdig_fun>
 8014832:	9b00      	ldr	r3, [sp, #0]
 8014834:	f000 000f 	and.w	r0, r0, #15
 8014838:	fa00 f00b 	lsl.w	r0, r0, fp
 801483c:	4303      	orrs	r3, r0
 801483e:	9300      	str	r3, [sp, #0]
 8014840:	f10b 0b04 	add.w	fp, fp, #4
 8014844:	9b03      	ldr	r3, [sp, #12]
 8014846:	e00d      	b.n	8014864 <__gethex+0x27c>
 8014848:	9b03      	ldr	r3, [sp, #12]
 801484a:	9a06      	ldr	r2, [sp, #24]
 801484c:	4413      	add	r3, r2
 801484e:	42bb      	cmp	r3, r7
 8014850:	d3e0      	bcc.n	8014814 <__gethex+0x22c>
 8014852:	4618      	mov	r0, r3
 8014854:	9901      	ldr	r1, [sp, #4]
 8014856:	9307      	str	r3, [sp, #28]
 8014858:	4652      	mov	r2, sl
 801485a:	f001 f8a5 	bl	80159a8 <strncmp>
 801485e:	9b07      	ldr	r3, [sp, #28]
 8014860:	2800      	cmp	r0, #0
 8014862:	d1d7      	bne.n	8014814 <__gethex+0x22c>
 8014864:	461e      	mov	r6, r3
 8014866:	e78b      	b.n	8014780 <__gethex+0x198>
 8014868:	f04f 0a03 	mov.w	sl, #3
 801486c:	e7b8      	b.n	80147e0 <__gethex+0x1f8>
 801486e:	da0a      	bge.n	8014886 <__gethex+0x29e>
 8014870:	1a37      	subs	r7, r6, r0
 8014872:	4621      	mov	r1, r4
 8014874:	ee18 0a10 	vmov	r0, s16
 8014878:	463a      	mov	r2, r7
 801487a:	f000 fc55 	bl	8015128 <__lshift>
 801487e:	1bed      	subs	r5, r5, r7
 8014880:	4604      	mov	r4, r0
 8014882:	f100 0914 	add.w	r9, r0, #20
 8014886:	f04f 0a00 	mov.w	sl, #0
 801488a:	e7ae      	b.n	80147ea <__gethex+0x202>
 801488c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014890:	42a8      	cmp	r0, r5
 8014892:	dd72      	ble.n	801497a <__gethex+0x392>
 8014894:	1b45      	subs	r5, r0, r5
 8014896:	42ae      	cmp	r6, r5
 8014898:	dc36      	bgt.n	8014908 <__gethex+0x320>
 801489a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801489e:	2b02      	cmp	r3, #2
 80148a0:	d02a      	beq.n	80148f8 <__gethex+0x310>
 80148a2:	2b03      	cmp	r3, #3
 80148a4:	d02c      	beq.n	8014900 <__gethex+0x318>
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d11c      	bne.n	80148e4 <__gethex+0x2fc>
 80148aa:	42ae      	cmp	r6, r5
 80148ac:	d11a      	bne.n	80148e4 <__gethex+0x2fc>
 80148ae:	2e01      	cmp	r6, #1
 80148b0:	d112      	bne.n	80148d8 <__gethex+0x2f0>
 80148b2:	9a04      	ldr	r2, [sp, #16]
 80148b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80148b8:	6013      	str	r3, [r2, #0]
 80148ba:	2301      	movs	r3, #1
 80148bc:	6123      	str	r3, [r4, #16]
 80148be:	f8c9 3000 	str.w	r3, [r9]
 80148c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80148c4:	2762      	movs	r7, #98	; 0x62
 80148c6:	601c      	str	r4, [r3, #0]
 80148c8:	e723      	b.n	8014712 <__gethex+0x12a>
 80148ca:	bf00      	nop
 80148cc:	08016658 	.word	0x08016658
 80148d0:	080165e0 	.word	0x080165e0
 80148d4:	080165f1 	.word	0x080165f1
 80148d8:	1e71      	subs	r1, r6, #1
 80148da:	4620      	mov	r0, r4
 80148dc:	f000 fe68 	bl	80155b0 <__any_on>
 80148e0:	2800      	cmp	r0, #0
 80148e2:	d1e6      	bne.n	80148b2 <__gethex+0x2ca>
 80148e4:	ee18 0a10 	vmov	r0, s16
 80148e8:	4621      	mov	r1, r4
 80148ea:	f000 fa01 	bl	8014cf0 <_Bfree>
 80148ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80148f0:	2300      	movs	r3, #0
 80148f2:	6013      	str	r3, [r2, #0]
 80148f4:	2750      	movs	r7, #80	; 0x50
 80148f6:	e70c      	b.n	8014712 <__gethex+0x12a>
 80148f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d1f2      	bne.n	80148e4 <__gethex+0x2fc>
 80148fe:	e7d8      	b.n	80148b2 <__gethex+0x2ca>
 8014900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014902:	2b00      	cmp	r3, #0
 8014904:	d1d5      	bne.n	80148b2 <__gethex+0x2ca>
 8014906:	e7ed      	b.n	80148e4 <__gethex+0x2fc>
 8014908:	1e6f      	subs	r7, r5, #1
 801490a:	f1ba 0f00 	cmp.w	sl, #0
 801490e:	d131      	bne.n	8014974 <__gethex+0x38c>
 8014910:	b127      	cbz	r7, 801491c <__gethex+0x334>
 8014912:	4639      	mov	r1, r7
 8014914:	4620      	mov	r0, r4
 8014916:	f000 fe4b 	bl	80155b0 <__any_on>
 801491a:	4682      	mov	sl, r0
 801491c:	117b      	asrs	r3, r7, #5
 801491e:	2101      	movs	r1, #1
 8014920:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014924:	f007 071f 	and.w	r7, r7, #31
 8014928:	fa01 f707 	lsl.w	r7, r1, r7
 801492c:	421f      	tst	r7, r3
 801492e:	4629      	mov	r1, r5
 8014930:	4620      	mov	r0, r4
 8014932:	bf18      	it	ne
 8014934:	f04a 0a02 	orrne.w	sl, sl, #2
 8014938:	1b76      	subs	r6, r6, r5
 801493a:	f7ff fded 	bl	8014518 <rshift>
 801493e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014942:	2702      	movs	r7, #2
 8014944:	f1ba 0f00 	cmp.w	sl, #0
 8014948:	d048      	beq.n	80149dc <__gethex+0x3f4>
 801494a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801494e:	2b02      	cmp	r3, #2
 8014950:	d015      	beq.n	801497e <__gethex+0x396>
 8014952:	2b03      	cmp	r3, #3
 8014954:	d017      	beq.n	8014986 <__gethex+0x39e>
 8014956:	2b01      	cmp	r3, #1
 8014958:	d109      	bne.n	801496e <__gethex+0x386>
 801495a:	f01a 0f02 	tst.w	sl, #2
 801495e:	d006      	beq.n	801496e <__gethex+0x386>
 8014960:	f8d9 0000 	ldr.w	r0, [r9]
 8014964:	ea4a 0a00 	orr.w	sl, sl, r0
 8014968:	f01a 0f01 	tst.w	sl, #1
 801496c:	d10e      	bne.n	801498c <__gethex+0x3a4>
 801496e:	f047 0710 	orr.w	r7, r7, #16
 8014972:	e033      	b.n	80149dc <__gethex+0x3f4>
 8014974:	f04f 0a01 	mov.w	sl, #1
 8014978:	e7d0      	b.n	801491c <__gethex+0x334>
 801497a:	2701      	movs	r7, #1
 801497c:	e7e2      	b.n	8014944 <__gethex+0x35c>
 801497e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014980:	f1c3 0301 	rsb	r3, r3, #1
 8014984:	9315      	str	r3, [sp, #84]	; 0x54
 8014986:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014988:	2b00      	cmp	r3, #0
 801498a:	d0f0      	beq.n	801496e <__gethex+0x386>
 801498c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014990:	f104 0314 	add.w	r3, r4, #20
 8014994:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014998:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801499c:	f04f 0c00 	mov.w	ip, #0
 80149a0:	4618      	mov	r0, r3
 80149a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80149a6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80149aa:	d01c      	beq.n	80149e6 <__gethex+0x3fe>
 80149ac:	3201      	adds	r2, #1
 80149ae:	6002      	str	r2, [r0, #0]
 80149b0:	2f02      	cmp	r7, #2
 80149b2:	f104 0314 	add.w	r3, r4, #20
 80149b6:	d13f      	bne.n	8014a38 <__gethex+0x450>
 80149b8:	f8d8 2000 	ldr.w	r2, [r8]
 80149bc:	3a01      	subs	r2, #1
 80149be:	42b2      	cmp	r2, r6
 80149c0:	d10a      	bne.n	80149d8 <__gethex+0x3f0>
 80149c2:	1171      	asrs	r1, r6, #5
 80149c4:	2201      	movs	r2, #1
 80149c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80149ca:	f006 061f 	and.w	r6, r6, #31
 80149ce:	fa02 f606 	lsl.w	r6, r2, r6
 80149d2:	421e      	tst	r6, r3
 80149d4:	bf18      	it	ne
 80149d6:	4617      	movne	r7, r2
 80149d8:	f047 0720 	orr.w	r7, r7, #32
 80149dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80149de:	601c      	str	r4, [r3, #0]
 80149e0:	9b04      	ldr	r3, [sp, #16]
 80149e2:	601d      	str	r5, [r3, #0]
 80149e4:	e695      	b.n	8014712 <__gethex+0x12a>
 80149e6:	4299      	cmp	r1, r3
 80149e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80149ec:	d8d8      	bhi.n	80149a0 <__gethex+0x3b8>
 80149ee:	68a3      	ldr	r3, [r4, #8]
 80149f0:	459b      	cmp	fp, r3
 80149f2:	db19      	blt.n	8014a28 <__gethex+0x440>
 80149f4:	6861      	ldr	r1, [r4, #4]
 80149f6:	ee18 0a10 	vmov	r0, s16
 80149fa:	3101      	adds	r1, #1
 80149fc:	f000 f938 	bl	8014c70 <_Balloc>
 8014a00:	4681      	mov	r9, r0
 8014a02:	b918      	cbnz	r0, 8014a0c <__gethex+0x424>
 8014a04:	4b1a      	ldr	r3, [pc, #104]	; (8014a70 <__gethex+0x488>)
 8014a06:	4602      	mov	r2, r0
 8014a08:	2184      	movs	r1, #132	; 0x84
 8014a0a:	e6a8      	b.n	801475e <__gethex+0x176>
 8014a0c:	6922      	ldr	r2, [r4, #16]
 8014a0e:	3202      	adds	r2, #2
 8014a10:	f104 010c 	add.w	r1, r4, #12
 8014a14:	0092      	lsls	r2, r2, #2
 8014a16:	300c      	adds	r0, #12
 8014a18:	f7fc ff33 	bl	8011882 <memcpy>
 8014a1c:	4621      	mov	r1, r4
 8014a1e:	ee18 0a10 	vmov	r0, s16
 8014a22:	f000 f965 	bl	8014cf0 <_Bfree>
 8014a26:	464c      	mov	r4, r9
 8014a28:	6923      	ldr	r3, [r4, #16]
 8014a2a:	1c5a      	adds	r2, r3, #1
 8014a2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014a30:	6122      	str	r2, [r4, #16]
 8014a32:	2201      	movs	r2, #1
 8014a34:	615a      	str	r2, [r3, #20]
 8014a36:	e7bb      	b.n	80149b0 <__gethex+0x3c8>
 8014a38:	6922      	ldr	r2, [r4, #16]
 8014a3a:	455a      	cmp	r2, fp
 8014a3c:	dd0b      	ble.n	8014a56 <__gethex+0x46e>
 8014a3e:	2101      	movs	r1, #1
 8014a40:	4620      	mov	r0, r4
 8014a42:	f7ff fd69 	bl	8014518 <rshift>
 8014a46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014a4a:	3501      	adds	r5, #1
 8014a4c:	42ab      	cmp	r3, r5
 8014a4e:	f6ff aed0 	blt.w	80147f2 <__gethex+0x20a>
 8014a52:	2701      	movs	r7, #1
 8014a54:	e7c0      	b.n	80149d8 <__gethex+0x3f0>
 8014a56:	f016 061f 	ands.w	r6, r6, #31
 8014a5a:	d0fa      	beq.n	8014a52 <__gethex+0x46a>
 8014a5c:	4453      	add	r3, sl
 8014a5e:	f1c6 0620 	rsb	r6, r6, #32
 8014a62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014a66:	f000 f9f5 	bl	8014e54 <__hi0bits>
 8014a6a:	42b0      	cmp	r0, r6
 8014a6c:	dbe7      	blt.n	8014a3e <__gethex+0x456>
 8014a6e:	e7f0      	b.n	8014a52 <__gethex+0x46a>
 8014a70:	080165e0 	.word	0x080165e0

08014a74 <L_shift>:
 8014a74:	f1c2 0208 	rsb	r2, r2, #8
 8014a78:	0092      	lsls	r2, r2, #2
 8014a7a:	b570      	push	{r4, r5, r6, lr}
 8014a7c:	f1c2 0620 	rsb	r6, r2, #32
 8014a80:	6843      	ldr	r3, [r0, #4]
 8014a82:	6804      	ldr	r4, [r0, #0]
 8014a84:	fa03 f506 	lsl.w	r5, r3, r6
 8014a88:	432c      	orrs	r4, r5
 8014a8a:	40d3      	lsrs	r3, r2
 8014a8c:	6004      	str	r4, [r0, #0]
 8014a8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014a92:	4288      	cmp	r0, r1
 8014a94:	d3f4      	bcc.n	8014a80 <L_shift+0xc>
 8014a96:	bd70      	pop	{r4, r5, r6, pc}

08014a98 <__match>:
 8014a98:	b530      	push	{r4, r5, lr}
 8014a9a:	6803      	ldr	r3, [r0, #0]
 8014a9c:	3301      	adds	r3, #1
 8014a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014aa2:	b914      	cbnz	r4, 8014aaa <__match+0x12>
 8014aa4:	6003      	str	r3, [r0, #0]
 8014aa6:	2001      	movs	r0, #1
 8014aa8:	bd30      	pop	{r4, r5, pc}
 8014aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014aae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014ab2:	2d19      	cmp	r5, #25
 8014ab4:	bf98      	it	ls
 8014ab6:	3220      	addls	r2, #32
 8014ab8:	42a2      	cmp	r2, r4
 8014aba:	d0f0      	beq.n	8014a9e <__match+0x6>
 8014abc:	2000      	movs	r0, #0
 8014abe:	e7f3      	b.n	8014aa8 <__match+0x10>

08014ac0 <__hexnan>:
 8014ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac4:	680b      	ldr	r3, [r1, #0]
 8014ac6:	115e      	asrs	r6, r3, #5
 8014ac8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014acc:	f013 031f 	ands.w	r3, r3, #31
 8014ad0:	b087      	sub	sp, #28
 8014ad2:	bf18      	it	ne
 8014ad4:	3604      	addne	r6, #4
 8014ad6:	2500      	movs	r5, #0
 8014ad8:	1f37      	subs	r7, r6, #4
 8014ada:	4690      	mov	r8, r2
 8014adc:	6802      	ldr	r2, [r0, #0]
 8014ade:	9301      	str	r3, [sp, #4]
 8014ae0:	4682      	mov	sl, r0
 8014ae2:	f846 5c04 	str.w	r5, [r6, #-4]
 8014ae6:	46b9      	mov	r9, r7
 8014ae8:	463c      	mov	r4, r7
 8014aea:	9502      	str	r5, [sp, #8]
 8014aec:	46ab      	mov	fp, r5
 8014aee:	7851      	ldrb	r1, [r2, #1]
 8014af0:	1c53      	adds	r3, r2, #1
 8014af2:	9303      	str	r3, [sp, #12]
 8014af4:	b341      	cbz	r1, 8014b48 <__hexnan+0x88>
 8014af6:	4608      	mov	r0, r1
 8014af8:	9205      	str	r2, [sp, #20]
 8014afa:	9104      	str	r1, [sp, #16]
 8014afc:	f7ff fd5e 	bl	80145bc <__hexdig_fun>
 8014b00:	2800      	cmp	r0, #0
 8014b02:	d14f      	bne.n	8014ba4 <__hexnan+0xe4>
 8014b04:	9904      	ldr	r1, [sp, #16]
 8014b06:	9a05      	ldr	r2, [sp, #20]
 8014b08:	2920      	cmp	r1, #32
 8014b0a:	d818      	bhi.n	8014b3e <__hexnan+0x7e>
 8014b0c:	9b02      	ldr	r3, [sp, #8]
 8014b0e:	459b      	cmp	fp, r3
 8014b10:	dd13      	ble.n	8014b3a <__hexnan+0x7a>
 8014b12:	454c      	cmp	r4, r9
 8014b14:	d206      	bcs.n	8014b24 <__hexnan+0x64>
 8014b16:	2d07      	cmp	r5, #7
 8014b18:	dc04      	bgt.n	8014b24 <__hexnan+0x64>
 8014b1a:	462a      	mov	r2, r5
 8014b1c:	4649      	mov	r1, r9
 8014b1e:	4620      	mov	r0, r4
 8014b20:	f7ff ffa8 	bl	8014a74 <L_shift>
 8014b24:	4544      	cmp	r4, r8
 8014b26:	d950      	bls.n	8014bca <__hexnan+0x10a>
 8014b28:	2300      	movs	r3, #0
 8014b2a:	f1a4 0904 	sub.w	r9, r4, #4
 8014b2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014b32:	f8cd b008 	str.w	fp, [sp, #8]
 8014b36:	464c      	mov	r4, r9
 8014b38:	461d      	mov	r5, r3
 8014b3a:	9a03      	ldr	r2, [sp, #12]
 8014b3c:	e7d7      	b.n	8014aee <__hexnan+0x2e>
 8014b3e:	2929      	cmp	r1, #41	; 0x29
 8014b40:	d156      	bne.n	8014bf0 <__hexnan+0x130>
 8014b42:	3202      	adds	r2, #2
 8014b44:	f8ca 2000 	str.w	r2, [sl]
 8014b48:	f1bb 0f00 	cmp.w	fp, #0
 8014b4c:	d050      	beq.n	8014bf0 <__hexnan+0x130>
 8014b4e:	454c      	cmp	r4, r9
 8014b50:	d206      	bcs.n	8014b60 <__hexnan+0xa0>
 8014b52:	2d07      	cmp	r5, #7
 8014b54:	dc04      	bgt.n	8014b60 <__hexnan+0xa0>
 8014b56:	462a      	mov	r2, r5
 8014b58:	4649      	mov	r1, r9
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f7ff ff8a 	bl	8014a74 <L_shift>
 8014b60:	4544      	cmp	r4, r8
 8014b62:	d934      	bls.n	8014bce <__hexnan+0x10e>
 8014b64:	f1a8 0204 	sub.w	r2, r8, #4
 8014b68:	4623      	mov	r3, r4
 8014b6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8014b6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014b72:	429f      	cmp	r7, r3
 8014b74:	d2f9      	bcs.n	8014b6a <__hexnan+0xaa>
 8014b76:	1b3b      	subs	r3, r7, r4
 8014b78:	f023 0303 	bic.w	r3, r3, #3
 8014b7c:	3304      	adds	r3, #4
 8014b7e:	3401      	adds	r4, #1
 8014b80:	3e03      	subs	r6, #3
 8014b82:	42b4      	cmp	r4, r6
 8014b84:	bf88      	it	hi
 8014b86:	2304      	movhi	r3, #4
 8014b88:	4443      	add	r3, r8
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	f843 2b04 	str.w	r2, [r3], #4
 8014b90:	429f      	cmp	r7, r3
 8014b92:	d2fb      	bcs.n	8014b8c <__hexnan+0xcc>
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	b91b      	cbnz	r3, 8014ba0 <__hexnan+0xe0>
 8014b98:	4547      	cmp	r7, r8
 8014b9a:	d127      	bne.n	8014bec <__hexnan+0x12c>
 8014b9c:	2301      	movs	r3, #1
 8014b9e:	603b      	str	r3, [r7, #0]
 8014ba0:	2005      	movs	r0, #5
 8014ba2:	e026      	b.n	8014bf2 <__hexnan+0x132>
 8014ba4:	3501      	adds	r5, #1
 8014ba6:	2d08      	cmp	r5, #8
 8014ba8:	f10b 0b01 	add.w	fp, fp, #1
 8014bac:	dd06      	ble.n	8014bbc <__hexnan+0xfc>
 8014bae:	4544      	cmp	r4, r8
 8014bb0:	d9c3      	bls.n	8014b3a <__hexnan+0x7a>
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	f844 3c04 	str.w	r3, [r4, #-4]
 8014bb8:	2501      	movs	r5, #1
 8014bba:	3c04      	subs	r4, #4
 8014bbc:	6822      	ldr	r2, [r4, #0]
 8014bbe:	f000 000f 	and.w	r0, r0, #15
 8014bc2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014bc6:	6022      	str	r2, [r4, #0]
 8014bc8:	e7b7      	b.n	8014b3a <__hexnan+0x7a>
 8014bca:	2508      	movs	r5, #8
 8014bcc:	e7b5      	b.n	8014b3a <__hexnan+0x7a>
 8014bce:	9b01      	ldr	r3, [sp, #4]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d0df      	beq.n	8014b94 <__hexnan+0xd4>
 8014bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014bd8:	f1c3 0320 	rsb	r3, r3, #32
 8014bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8014be0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014be4:	401a      	ands	r2, r3
 8014be6:	f846 2c04 	str.w	r2, [r6, #-4]
 8014bea:	e7d3      	b.n	8014b94 <__hexnan+0xd4>
 8014bec:	3f04      	subs	r7, #4
 8014bee:	e7d1      	b.n	8014b94 <__hexnan+0xd4>
 8014bf0:	2004      	movs	r0, #4
 8014bf2:	b007      	add	sp, #28
 8014bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014bf8 <_localeconv_r>:
 8014bf8:	4800      	ldr	r0, [pc, #0]	; (8014bfc <_localeconv_r+0x4>)
 8014bfa:	4770      	bx	lr
 8014bfc:	20000168 	.word	0x20000168

08014c00 <_lseek_r>:
 8014c00:	b538      	push	{r3, r4, r5, lr}
 8014c02:	4d07      	ldr	r5, [pc, #28]	; (8014c20 <_lseek_r+0x20>)
 8014c04:	4604      	mov	r4, r0
 8014c06:	4608      	mov	r0, r1
 8014c08:	4611      	mov	r1, r2
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	602a      	str	r2, [r5, #0]
 8014c0e:	461a      	mov	r2, r3
 8014c10:	f7ed fabe 	bl	8002190 <_lseek>
 8014c14:	1c43      	adds	r3, r0, #1
 8014c16:	d102      	bne.n	8014c1e <_lseek_r+0x1e>
 8014c18:	682b      	ldr	r3, [r5, #0]
 8014c1a:	b103      	cbz	r3, 8014c1e <_lseek_r+0x1e>
 8014c1c:	6023      	str	r3, [r4, #0]
 8014c1e:	bd38      	pop	{r3, r4, r5, pc}
 8014c20:	20002714 	.word	0x20002714

08014c24 <malloc>:
 8014c24:	4b02      	ldr	r3, [pc, #8]	; (8014c30 <malloc+0xc>)
 8014c26:	4601      	mov	r1, r0
 8014c28:	6818      	ldr	r0, [r3, #0]
 8014c2a:	f7fc be61 	b.w	80118f0 <_malloc_r>
 8014c2e:	bf00      	nop
 8014c30:	20000010 	.word	0x20000010

08014c34 <__ascii_mbtowc>:
 8014c34:	b082      	sub	sp, #8
 8014c36:	b901      	cbnz	r1, 8014c3a <__ascii_mbtowc+0x6>
 8014c38:	a901      	add	r1, sp, #4
 8014c3a:	b142      	cbz	r2, 8014c4e <__ascii_mbtowc+0x1a>
 8014c3c:	b14b      	cbz	r3, 8014c52 <__ascii_mbtowc+0x1e>
 8014c3e:	7813      	ldrb	r3, [r2, #0]
 8014c40:	600b      	str	r3, [r1, #0]
 8014c42:	7812      	ldrb	r2, [r2, #0]
 8014c44:	1e10      	subs	r0, r2, #0
 8014c46:	bf18      	it	ne
 8014c48:	2001      	movne	r0, #1
 8014c4a:	b002      	add	sp, #8
 8014c4c:	4770      	bx	lr
 8014c4e:	4610      	mov	r0, r2
 8014c50:	e7fb      	b.n	8014c4a <__ascii_mbtowc+0x16>
 8014c52:	f06f 0001 	mvn.w	r0, #1
 8014c56:	e7f8      	b.n	8014c4a <__ascii_mbtowc+0x16>

08014c58 <__malloc_lock>:
 8014c58:	4801      	ldr	r0, [pc, #4]	; (8014c60 <__malloc_lock+0x8>)
 8014c5a:	f7fc be10 	b.w	801187e <__retarget_lock_acquire_recursive>
 8014c5e:	bf00      	nop
 8014c60:	20002708 	.word	0x20002708

08014c64 <__malloc_unlock>:
 8014c64:	4801      	ldr	r0, [pc, #4]	; (8014c6c <__malloc_unlock+0x8>)
 8014c66:	f7fc be0b 	b.w	8011880 <__retarget_lock_release_recursive>
 8014c6a:	bf00      	nop
 8014c6c:	20002708 	.word	0x20002708

08014c70 <_Balloc>:
 8014c70:	b570      	push	{r4, r5, r6, lr}
 8014c72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014c74:	4604      	mov	r4, r0
 8014c76:	460d      	mov	r5, r1
 8014c78:	b976      	cbnz	r6, 8014c98 <_Balloc+0x28>
 8014c7a:	2010      	movs	r0, #16
 8014c7c:	f7ff ffd2 	bl	8014c24 <malloc>
 8014c80:	4602      	mov	r2, r0
 8014c82:	6260      	str	r0, [r4, #36]	; 0x24
 8014c84:	b920      	cbnz	r0, 8014c90 <_Balloc+0x20>
 8014c86:	4b18      	ldr	r3, [pc, #96]	; (8014ce8 <_Balloc+0x78>)
 8014c88:	4818      	ldr	r0, [pc, #96]	; (8014cec <_Balloc+0x7c>)
 8014c8a:	2166      	movs	r1, #102	; 0x66
 8014c8c:	f000 feae 	bl	80159ec <__assert_func>
 8014c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014c94:	6006      	str	r6, [r0, #0]
 8014c96:	60c6      	str	r6, [r0, #12]
 8014c98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014c9a:	68f3      	ldr	r3, [r6, #12]
 8014c9c:	b183      	cbz	r3, 8014cc0 <_Balloc+0x50>
 8014c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ca0:	68db      	ldr	r3, [r3, #12]
 8014ca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014ca6:	b9b8      	cbnz	r0, 8014cd8 <_Balloc+0x68>
 8014ca8:	2101      	movs	r1, #1
 8014caa:	fa01 f605 	lsl.w	r6, r1, r5
 8014cae:	1d72      	adds	r2, r6, #5
 8014cb0:	0092      	lsls	r2, r2, #2
 8014cb2:	4620      	mov	r0, r4
 8014cb4:	f000 fc9d 	bl	80155f2 <_calloc_r>
 8014cb8:	b160      	cbz	r0, 8014cd4 <_Balloc+0x64>
 8014cba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014cbe:	e00e      	b.n	8014cde <_Balloc+0x6e>
 8014cc0:	2221      	movs	r2, #33	; 0x21
 8014cc2:	2104      	movs	r1, #4
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	f000 fc94 	bl	80155f2 <_calloc_r>
 8014cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ccc:	60f0      	str	r0, [r6, #12]
 8014cce:	68db      	ldr	r3, [r3, #12]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d1e4      	bne.n	8014c9e <_Balloc+0x2e>
 8014cd4:	2000      	movs	r0, #0
 8014cd6:	bd70      	pop	{r4, r5, r6, pc}
 8014cd8:	6802      	ldr	r2, [r0, #0]
 8014cda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014cde:	2300      	movs	r3, #0
 8014ce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ce4:	e7f7      	b.n	8014cd6 <_Balloc+0x66>
 8014ce6:	bf00      	nop
 8014ce8:	0801656e 	.word	0x0801656e
 8014cec:	0801666c 	.word	0x0801666c

08014cf0 <_Bfree>:
 8014cf0:	b570      	push	{r4, r5, r6, lr}
 8014cf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014cf4:	4605      	mov	r5, r0
 8014cf6:	460c      	mov	r4, r1
 8014cf8:	b976      	cbnz	r6, 8014d18 <_Bfree+0x28>
 8014cfa:	2010      	movs	r0, #16
 8014cfc:	f7ff ff92 	bl	8014c24 <malloc>
 8014d00:	4602      	mov	r2, r0
 8014d02:	6268      	str	r0, [r5, #36]	; 0x24
 8014d04:	b920      	cbnz	r0, 8014d10 <_Bfree+0x20>
 8014d06:	4b09      	ldr	r3, [pc, #36]	; (8014d2c <_Bfree+0x3c>)
 8014d08:	4809      	ldr	r0, [pc, #36]	; (8014d30 <_Bfree+0x40>)
 8014d0a:	218a      	movs	r1, #138	; 0x8a
 8014d0c:	f000 fe6e 	bl	80159ec <__assert_func>
 8014d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014d14:	6006      	str	r6, [r0, #0]
 8014d16:	60c6      	str	r6, [r0, #12]
 8014d18:	b13c      	cbz	r4, 8014d2a <_Bfree+0x3a>
 8014d1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014d1c:	6862      	ldr	r2, [r4, #4]
 8014d1e:	68db      	ldr	r3, [r3, #12]
 8014d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014d24:	6021      	str	r1, [r4, #0]
 8014d26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014d2a:	bd70      	pop	{r4, r5, r6, pc}
 8014d2c:	0801656e 	.word	0x0801656e
 8014d30:	0801666c 	.word	0x0801666c

08014d34 <__multadd>:
 8014d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d38:	690d      	ldr	r5, [r1, #16]
 8014d3a:	4607      	mov	r7, r0
 8014d3c:	460c      	mov	r4, r1
 8014d3e:	461e      	mov	r6, r3
 8014d40:	f101 0c14 	add.w	ip, r1, #20
 8014d44:	2000      	movs	r0, #0
 8014d46:	f8dc 3000 	ldr.w	r3, [ip]
 8014d4a:	b299      	uxth	r1, r3
 8014d4c:	fb02 6101 	mla	r1, r2, r1, r6
 8014d50:	0c1e      	lsrs	r6, r3, #16
 8014d52:	0c0b      	lsrs	r3, r1, #16
 8014d54:	fb02 3306 	mla	r3, r2, r6, r3
 8014d58:	b289      	uxth	r1, r1
 8014d5a:	3001      	adds	r0, #1
 8014d5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014d60:	4285      	cmp	r5, r0
 8014d62:	f84c 1b04 	str.w	r1, [ip], #4
 8014d66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014d6a:	dcec      	bgt.n	8014d46 <__multadd+0x12>
 8014d6c:	b30e      	cbz	r6, 8014db2 <__multadd+0x7e>
 8014d6e:	68a3      	ldr	r3, [r4, #8]
 8014d70:	42ab      	cmp	r3, r5
 8014d72:	dc19      	bgt.n	8014da8 <__multadd+0x74>
 8014d74:	6861      	ldr	r1, [r4, #4]
 8014d76:	4638      	mov	r0, r7
 8014d78:	3101      	adds	r1, #1
 8014d7a:	f7ff ff79 	bl	8014c70 <_Balloc>
 8014d7e:	4680      	mov	r8, r0
 8014d80:	b928      	cbnz	r0, 8014d8e <__multadd+0x5a>
 8014d82:	4602      	mov	r2, r0
 8014d84:	4b0c      	ldr	r3, [pc, #48]	; (8014db8 <__multadd+0x84>)
 8014d86:	480d      	ldr	r0, [pc, #52]	; (8014dbc <__multadd+0x88>)
 8014d88:	21b5      	movs	r1, #181	; 0xb5
 8014d8a:	f000 fe2f 	bl	80159ec <__assert_func>
 8014d8e:	6922      	ldr	r2, [r4, #16]
 8014d90:	3202      	adds	r2, #2
 8014d92:	f104 010c 	add.w	r1, r4, #12
 8014d96:	0092      	lsls	r2, r2, #2
 8014d98:	300c      	adds	r0, #12
 8014d9a:	f7fc fd72 	bl	8011882 <memcpy>
 8014d9e:	4621      	mov	r1, r4
 8014da0:	4638      	mov	r0, r7
 8014da2:	f7ff ffa5 	bl	8014cf0 <_Bfree>
 8014da6:	4644      	mov	r4, r8
 8014da8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014dac:	3501      	adds	r5, #1
 8014dae:	615e      	str	r6, [r3, #20]
 8014db0:	6125      	str	r5, [r4, #16]
 8014db2:	4620      	mov	r0, r4
 8014db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014db8:	080165e0 	.word	0x080165e0
 8014dbc:	0801666c 	.word	0x0801666c

08014dc0 <__s2b>:
 8014dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dc4:	460c      	mov	r4, r1
 8014dc6:	4615      	mov	r5, r2
 8014dc8:	461f      	mov	r7, r3
 8014dca:	2209      	movs	r2, #9
 8014dcc:	3308      	adds	r3, #8
 8014dce:	4606      	mov	r6, r0
 8014dd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8014dd4:	2100      	movs	r1, #0
 8014dd6:	2201      	movs	r2, #1
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	db09      	blt.n	8014df0 <__s2b+0x30>
 8014ddc:	4630      	mov	r0, r6
 8014dde:	f7ff ff47 	bl	8014c70 <_Balloc>
 8014de2:	b940      	cbnz	r0, 8014df6 <__s2b+0x36>
 8014de4:	4602      	mov	r2, r0
 8014de6:	4b19      	ldr	r3, [pc, #100]	; (8014e4c <__s2b+0x8c>)
 8014de8:	4819      	ldr	r0, [pc, #100]	; (8014e50 <__s2b+0x90>)
 8014dea:	21ce      	movs	r1, #206	; 0xce
 8014dec:	f000 fdfe 	bl	80159ec <__assert_func>
 8014df0:	0052      	lsls	r2, r2, #1
 8014df2:	3101      	adds	r1, #1
 8014df4:	e7f0      	b.n	8014dd8 <__s2b+0x18>
 8014df6:	9b08      	ldr	r3, [sp, #32]
 8014df8:	6143      	str	r3, [r0, #20]
 8014dfa:	2d09      	cmp	r5, #9
 8014dfc:	f04f 0301 	mov.w	r3, #1
 8014e00:	6103      	str	r3, [r0, #16]
 8014e02:	dd16      	ble.n	8014e32 <__s2b+0x72>
 8014e04:	f104 0909 	add.w	r9, r4, #9
 8014e08:	46c8      	mov	r8, r9
 8014e0a:	442c      	add	r4, r5
 8014e0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014e10:	4601      	mov	r1, r0
 8014e12:	3b30      	subs	r3, #48	; 0x30
 8014e14:	220a      	movs	r2, #10
 8014e16:	4630      	mov	r0, r6
 8014e18:	f7ff ff8c 	bl	8014d34 <__multadd>
 8014e1c:	45a0      	cmp	r8, r4
 8014e1e:	d1f5      	bne.n	8014e0c <__s2b+0x4c>
 8014e20:	f1a5 0408 	sub.w	r4, r5, #8
 8014e24:	444c      	add	r4, r9
 8014e26:	1b2d      	subs	r5, r5, r4
 8014e28:	1963      	adds	r3, r4, r5
 8014e2a:	42bb      	cmp	r3, r7
 8014e2c:	db04      	blt.n	8014e38 <__s2b+0x78>
 8014e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e32:	340a      	adds	r4, #10
 8014e34:	2509      	movs	r5, #9
 8014e36:	e7f6      	b.n	8014e26 <__s2b+0x66>
 8014e38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014e3c:	4601      	mov	r1, r0
 8014e3e:	3b30      	subs	r3, #48	; 0x30
 8014e40:	220a      	movs	r2, #10
 8014e42:	4630      	mov	r0, r6
 8014e44:	f7ff ff76 	bl	8014d34 <__multadd>
 8014e48:	e7ee      	b.n	8014e28 <__s2b+0x68>
 8014e4a:	bf00      	nop
 8014e4c:	080165e0 	.word	0x080165e0
 8014e50:	0801666c 	.word	0x0801666c

08014e54 <__hi0bits>:
 8014e54:	0c03      	lsrs	r3, r0, #16
 8014e56:	041b      	lsls	r3, r3, #16
 8014e58:	b9d3      	cbnz	r3, 8014e90 <__hi0bits+0x3c>
 8014e5a:	0400      	lsls	r0, r0, #16
 8014e5c:	2310      	movs	r3, #16
 8014e5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014e62:	bf04      	itt	eq
 8014e64:	0200      	lsleq	r0, r0, #8
 8014e66:	3308      	addeq	r3, #8
 8014e68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014e6c:	bf04      	itt	eq
 8014e6e:	0100      	lsleq	r0, r0, #4
 8014e70:	3304      	addeq	r3, #4
 8014e72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014e76:	bf04      	itt	eq
 8014e78:	0080      	lsleq	r0, r0, #2
 8014e7a:	3302      	addeq	r3, #2
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	db05      	blt.n	8014e8c <__hi0bits+0x38>
 8014e80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014e84:	f103 0301 	add.w	r3, r3, #1
 8014e88:	bf08      	it	eq
 8014e8a:	2320      	moveq	r3, #32
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	4770      	bx	lr
 8014e90:	2300      	movs	r3, #0
 8014e92:	e7e4      	b.n	8014e5e <__hi0bits+0xa>

08014e94 <__lo0bits>:
 8014e94:	6803      	ldr	r3, [r0, #0]
 8014e96:	f013 0207 	ands.w	r2, r3, #7
 8014e9a:	4601      	mov	r1, r0
 8014e9c:	d00b      	beq.n	8014eb6 <__lo0bits+0x22>
 8014e9e:	07da      	lsls	r2, r3, #31
 8014ea0:	d423      	bmi.n	8014eea <__lo0bits+0x56>
 8014ea2:	0798      	lsls	r0, r3, #30
 8014ea4:	bf49      	itett	mi
 8014ea6:	085b      	lsrmi	r3, r3, #1
 8014ea8:	089b      	lsrpl	r3, r3, #2
 8014eaa:	2001      	movmi	r0, #1
 8014eac:	600b      	strmi	r3, [r1, #0]
 8014eae:	bf5c      	itt	pl
 8014eb0:	600b      	strpl	r3, [r1, #0]
 8014eb2:	2002      	movpl	r0, #2
 8014eb4:	4770      	bx	lr
 8014eb6:	b298      	uxth	r0, r3
 8014eb8:	b9a8      	cbnz	r0, 8014ee6 <__lo0bits+0x52>
 8014eba:	0c1b      	lsrs	r3, r3, #16
 8014ebc:	2010      	movs	r0, #16
 8014ebe:	b2da      	uxtb	r2, r3
 8014ec0:	b90a      	cbnz	r2, 8014ec6 <__lo0bits+0x32>
 8014ec2:	3008      	adds	r0, #8
 8014ec4:	0a1b      	lsrs	r3, r3, #8
 8014ec6:	071a      	lsls	r2, r3, #28
 8014ec8:	bf04      	itt	eq
 8014eca:	091b      	lsreq	r3, r3, #4
 8014ecc:	3004      	addeq	r0, #4
 8014ece:	079a      	lsls	r2, r3, #30
 8014ed0:	bf04      	itt	eq
 8014ed2:	089b      	lsreq	r3, r3, #2
 8014ed4:	3002      	addeq	r0, #2
 8014ed6:	07da      	lsls	r2, r3, #31
 8014ed8:	d403      	bmi.n	8014ee2 <__lo0bits+0x4e>
 8014eda:	085b      	lsrs	r3, r3, #1
 8014edc:	f100 0001 	add.w	r0, r0, #1
 8014ee0:	d005      	beq.n	8014eee <__lo0bits+0x5a>
 8014ee2:	600b      	str	r3, [r1, #0]
 8014ee4:	4770      	bx	lr
 8014ee6:	4610      	mov	r0, r2
 8014ee8:	e7e9      	b.n	8014ebe <__lo0bits+0x2a>
 8014eea:	2000      	movs	r0, #0
 8014eec:	4770      	bx	lr
 8014eee:	2020      	movs	r0, #32
 8014ef0:	4770      	bx	lr
	...

08014ef4 <__i2b>:
 8014ef4:	b510      	push	{r4, lr}
 8014ef6:	460c      	mov	r4, r1
 8014ef8:	2101      	movs	r1, #1
 8014efa:	f7ff feb9 	bl	8014c70 <_Balloc>
 8014efe:	4602      	mov	r2, r0
 8014f00:	b928      	cbnz	r0, 8014f0e <__i2b+0x1a>
 8014f02:	4b05      	ldr	r3, [pc, #20]	; (8014f18 <__i2b+0x24>)
 8014f04:	4805      	ldr	r0, [pc, #20]	; (8014f1c <__i2b+0x28>)
 8014f06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014f0a:	f000 fd6f 	bl	80159ec <__assert_func>
 8014f0e:	2301      	movs	r3, #1
 8014f10:	6144      	str	r4, [r0, #20]
 8014f12:	6103      	str	r3, [r0, #16]
 8014f14:	bd10      	pop	{r4, pc}
 8014f16:	bf00      	nop
 8014f18:	080165e0 	.word	0x080165e0
 8014f1c:	0801666c 	.word	0x0801666c

08014f20 <__multiply>:
 8014f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f24:	4691      	mov	r9, r2
 8014f26:	690a      	ldr	r2, [r1, #16]
 8014f28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	bfb8      	it	lt
 8014f30:	460b      	movlt	r3, r1
 8014f32:	460c      	mov	r4, r1
 8014f34:	bfbc      	itt	lt
 8014f36:	464c      	movlt	r4, r9
 8014f38:	4699      	movlt	r9, r3
 8014f3a:	6927      	ldr	r7, [r4, #16]
 8014f3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014f40:	68a3      	ldr	r3, [r4, #8]
 8014f42:	6861      	ldr	r1, [r4, #4]
 8014f44:	eb07 060a 	add.w	r6, r7, sl
 8014f48:	42b3      	cmp	r3, r6
 8014f4a:	b085      	sub	sp, #20
 8014f4c:	bfb8      	it	lt
 8014f4e:	3101      	addlt	r1, #1
 8014f50:	f7ff fe8e 	bl	8014c70 <_Balloc>
 8014f54:	b930      	cbnz	r0, 8014f64 <__multiply+0x44>
 8014f56:	4602      	mov	r2, r0
 8014f58:	4b44      	ldr	r3, [pc, #272]	; (801506c <__multiply+0x14c>)
 8014f5a:	4845      	ldr	r0, [pc, #276]	; (8015070 <__multiply+0x150>)
 8014f5c:	f240 115d 	movw	r1, #349	; 0x15d
 8014f60:	f000 fd44 	bl	80159ec <__assert_func>
 8014f64:	f100 0514 	add.w	r5, r0, #20
 8014f68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014f6c:	462b      	mov	r3, r5
 8014f6e:	2200      	movs	r2, #0
 8014f70:	4543      	cmp	r3, r8
 8014f72:	d321      	bcc.n	8014fb8 <__multiply+0x98>
 8014f74:	f104 0314 	add.w	r3, r4, #20
 8014f78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014f7c:	f109 0314 	add.w	r3, r9, #20
 8014f80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014f84:	9202      	str	r2, [sp, #8]
 8014f86:	1b3a      	subs	r2, r7, r4
 8014f88:	3a15      	subs	r2, #21
 8014f8a:	f022 0203 	bic.w	r2, r2, #3
 8014f8e:	3204      	adds	r2, #4
 8014f90:	f104 0115 	add.w	r1, r4, #21
 8014f94:	428f      	cmp	r7, r1
 8014f96:	bf38      	it	cc
 8014f98:	2204      	movcc	r2, #4
 8014f9a:	9201      	str	r2, [sp, #4]
 8014f9c:	9a02      	ldr	r2, [sp, #8]
 8014f9e:	9303      	str	r3, [sp, #12]
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d80c      	bhi.n	8014fbe <__multiply+0x9e>
 8014fa4:	2e00      	cmp	r6, #0
 8014fa6:	dd03      	ble.n	8014fb0 <__multiply+0x90>
 8014fa8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d05a      	beq.n	8015066 <__multiply+0x146>
 8014fb0:	6106      	str	r6, [r0, #16]
 8014fb2:	b005      	add	sp, #20
 8014fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb8:	f843 2b04 	str.w	r2, [r3], #4
 8014fbc:	e7d8      	b.n	8014f70 <__multiply+0x50>
 8014fbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8014fc2:	f1ba 0f00 	cmp.w	sl, #0
 8014fc6:	d024      	beq.n	8015012 <__multiply+0xf2>
 8014fc8:	f104 0e14 	add.w	lr, r4, #20
 8014fcc:	46a9      	mov	r9, r5
 8014fce:	f04f 0c00 	mov.w	ip, #0
 8014fd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014fd6:	f8d9 1000 	ldr.w	r1, [r9]
 8014fda:	fa1f fb82 	uxth.w	fp, r2
 8014fde:	b289      	uxth	r1, r1
 8014fe0:	fb0a 110b 	mla	r1, sl, fp, r1
 8014fe4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014fe8:	f8d9 2000 	ldr.w	r2, [r9]
 8014fec:	4461      	add	r1, ip
 8014fee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014ff2:	fb0a c20b 	mla	r2, sl, fp, ip
 8014ff6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014ffa:	b289      	uxth	r1, r1
 8014ffc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015000:	4577      	cmp	r7, lr
 8015002:	f849 1b04 	str.w	r1, [r9], #4
 8015006:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801500a:	d8e2      	bhi.n	8014fd2 <__multiply+0xb2>
 801500c:	9a01      	ldr	r2, [sp, #4]
 801500e:	f845 c002 	str.w	ip, [r5, r2]
 8015012:	9a03      	ldr	r2, [sp, #12]
 8015014:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015018:	3304      	adds	r3, #4
 801501a:	f1b9 0f00 	cmp.w	r9, #0
 801501e:	d020      	beq.n	8015062 <__multiply+0x142>
 8015020:	6829      	ldr	r1, [r5, #0]
 8015022:	f104 0c14 	add.w	ip, r4, #20
 8015026:	46ae      	mov	lr, r5
 8015028:	f04f 0a00 	mov.w	sl, #0
 801502c:	f8bc b000 	ldrh.w	fp, [ip]
 8015030:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015034:	fb09 220b 	mla	r2, r9, fp, r2
 8015038:	4492      	add	sl, r2
 801503a:	b289      	uxth	r1, r1
 801503c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015040:	f84e 1b04 	str.w	r1, [lr], #4
 8015044:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015048:	f8be 1000 	ldrh.w	r1, [lr]
 801504c:	0c12      	lsrs	r2, r2, #16
 801504e:	fb09 1102 	mla	r1, r9, r2, r1
 8015052:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015056:	4567      	cmp	r7, ip
 8015058:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801505c:	d8e6      	bhi.n	801502c <__multiply+0x10c>
 801505e:	9a01      	ldr	r2, [sp, #4]
 8015060:	50a9      	str	r1, [r5, r2]
 8015062:	3504      	adds	r5, #4
 8015064:	e79a      	b.n	8014f9c <__multiply+0x7c>
 8015066:	3e01      	subs	r6, #1
 8015068:	e79c      	b.n	8014fa4 <__multiply+0x84>
 801506a:	bf00      	nop
 801506c:	080165e0 	.word	0x080165e0
 8015070:	0801666c 	.word	0x0801666c

08015074 <__pow5mult>:
 8015074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015078:	4615      	mov	r5, r2
 801507a:	f012 0203 	ands.w	r2, r2, #3
 801507e:	4606      	mov	r6, r0
 8015080:	460f      	mov	r7, r1
 8015082:	d007      	beq.n	8015094 <__pow5mult+0x20>
 8015084:	4c25      	ldr	r4, [pc, #148]	; (801511c <__pow5mult+0xa8>)
 8015086:	3a01      	subs	r2, #1
 8015088:	2300      	movs	r3, #0
 801508a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801508e:	f7ff fe51 	bl	8014d34 <__multadd>
 8015092:	4607      	mov	r7, r0
 8015094:	10ad      	asrs	r5, r5, #2
 8015096:	d03d      	beq.n	8015114 <__pow5mult+0xa0>
 8015098:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801509a:	b97c      	cbnz	r4, 80150bc <__pow5mult+0x48>
 801509c:	2010      	movs	r0, #16
 801509e:	f7ff fdc1 	bl	8014c24 <malloc>
 80150a2:	4602      	mov	r2, r0
 80150a4:	6270      	str	r0, [r6, #36]	; 0x24
 80150a6:	b928      	cbnz	r0, 80150b4 <__pow5mult+0x40>
 80150a8:	4b1d      	ldr	r3, [pc, #116]	; (8015120 <__pow5mult+0xac>)
 80150aa:	481e      	ldr	r0, [pc, #120]	; (8015124 <__pow5mult+0xb0>)
 80150ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80150b0:	f000 fc9c 	bl	80159ec <__assert_func>
 80150b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80150b8:	6004      	str	r4, [r0, #0]
 80150ba:	60c4      	str	r4, [r0, #12]
 80150bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80150c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80150c4:	b94c      	cbnz	r4, 80150da <__pow5mult+0x66>
 80150c6:	f240 2171 	movw	r1, #625	; 0x271
 80150ca:	4630      	mov	r0, r6
 80150cc:	f7ff ff12 	bl	8014ef4 <__i2b>
 80150d0:	2300      	movs	r3, #0
 80150d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80150d6:	4604      	mov	r4, r0
 80150d8:	6003      	str	r3, [r0, #0]
 80150da:	f04f 0900 	mov.w	r9, #0
 80150de:	07eb      	lsls	r3, r5, #31
 80150e0:	d50a      	bpl.n	80150f8 <__pow5mult+0x84>
 80150e2:	4639      	mov	r1, r7
 80150e4:	4622      	mov	r2, r4
 80150e6:	4630      	mov	r0, r6
 80150e8:	f7ff ff1a 	bl	8014f20 <__multiply>
 80150ec:	4639      	mov	r1, r7
 80150ee:	4680      	mov	r8, r0
 80150f0:	4630      	mov	r0, r6
 80150f2:	f7ff fdfd 	bl	8014cf0 <_Bfree>
 80150f6:	4647      	mov	r7, r8
 80150f8:	106d      	asrs	r5, r5, #1
 80150fa:	d00b      	beq.n	8015114 <__pow5mult+0xa0>
 80150fc:	6820      	ldr	r0, [r4, #0]
 80150fe:	b938      	cbnz	r0, 8015110 <__pow5mult+0x9c>
 8015100:	4622      	mov	r2, r4
 8015102:	4621      	mov	r1, r4
 8015104:	4630      	mov	r0, r6
 8015106:	f7ff ff0b 	bl	8014f20 <__multiply>
 801510a:	6020      	str	r0, [r4, #0]
 801510c:	f8c0 9000 	str.w	r9, [r0]
 8015110:	4604      	mov	r4, r0
 8015112:	e7e4      	b.n	80150de <__pow5mult+0x6a>
 8015114:	4638      	mov	r0, r7
 8015116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801511a:	bf00      	nop
 801511c:	080167b8 	.word	0x080167b8
 8015120:	0801656e 	.word	0x0801656e
 8015124:	0801666c 	.word	0x0801666c

08015128 <__lshift>:
 8015128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801512c:	460c      	mov	r4, r1
 801512e:	6849      	ldr	r1, [r1, #4]
 8015130:	6923      	ldr	r3, [r4, #16]
 8015132:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015136:	68a3      	ldr	r3, [r4, #8]
 8015138:	4607      	mov	r7, r0
 801513a:	4691      	mov	r9, r2
 801513c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015140:	f108 0601 	add.w	r6, r8, #1
 8015144:	42b3      	cmp	r3, r6
 8015146:	db0b      	blt.n	8015160 <__lshift+0x38>
 8015148:	4638      	mov	r0, r7
 801514a:	f7ff fd91 	bl	8014c70 <_Balloc>
 801514e:	4605      	mov	r5, r0
 8015150:	b948      	cbnz	r0, 8015166 <__lshift+0x3e>
 8015152:	4602      	mov	r2, r0
 8015154:	4b2a      	ldr	r3, [pc, #168]	; (8015200 <__lshift+0xd8>)
 8015156:	482b      	ldr	r0, [pc, #172]	; (8015204 <__lshift+0xdc>)
 8015158:	f240 11d9 	movw	r1, #473	; 0x1d9
 801515c:	f000 fc46 	bl	80159ec <__assert_func>
 8015160:	3101      	adds	r1, #1
 8015162:	005b      	lsls	r3, r3, #1
 8015164:	e7ee      	b.n	8015144 <__lshift+0x1c>
 8015166:	2300      	movs	r3, #0
 8015168:	f100 0114 	add.w	r1, r0, #20
 801516c:	f100 0210 	add.w	r2, r0, #16
 8015170:	4618      	mov	r0, r3
 8015172:	4553      	cmp	r3, sl
 8015174:	db37      	blt.n	80151e6 <__lshift+0xbe>
 8015176:	6920      	ldr	r0, [r4, #16]
 8015178:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801517c:	f104 0314 	add.w	r3, r4, #20
 8015180:	f019 091f 	ands.w	r9, r9, #31
 8015184:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015188:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801518c:	d02f      	beq.n	80151ee <__lshift+0xc6>
 801518e:	f1c9 0e20 	rsb	lr, r9, #32
 8015192:	468a      	mov	sl, r1
 8015194:	f04f 0c00 	mov.w	ip, #0
 8015198:	681a      	ldr	r2, [r3, #0]
 801519a:	fa02 f209 	lsl.w	r2, r2, r9
 801519e:	ea42 020c 	orr.w	r2, r2, ip
 80151a2:	f84a 2b04 	str.w	r2, [sl], #4
 80151a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80151aa:	4298      	cmp	r0, r3
 80151ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80151b0:	d8f2      	bhi.n	8015198 <__lshift+0x70>
 80151b2:	1b03      	subs	r3, r0, r4
 80151b4:	3b15      	subs	r3, #21
 80151b6:	f023 0303 	bic.w	r3, r3, #3
 80151ba:	3304      	adds	r3, #4
 80151bc:	f104 0215 	add.w	r2, r4, #21
 80151c0:	4290      	cmp	r0, r2
 80151c2:	bf38      	it	cc
 80151c4:	2304      	movcc	r3, #4
 80151c6:	f841 c003 	str.w	ip, [r1, r3]
 80151ca:	f1bc 0f00 	cmp.w	ip, #0
 80151ce:	d001      	beq.n	80151d4 <__lshift+0xac>
 80151d0:	f108 0602 	add.w	r6, r8, #2
 80151d4:	3e01      	subs	r6, #1
 80151d6:	4638      	mov	r0, r7
 80151d8:	612e      	str	r6, [r5, #16]
 80151da:	4621      	mov	r1, r4
 80151dc:	f7ff fd88 	bl	8014cf0 <_Bfree>
 80151e0:	4628      	mov	r0, r5
 80151e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80151ea:	3301      	adds	r3, #1
 80151ec:	e7c1      	b.n	8015172 <__lshift+0x4a>
 80151ee:	3904      	subs	r1, #4
 80151f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80151f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80151f8:	4298      	cmp	r0, r3
 80151fa:	d8f9      	bhi.n	80151f0 <__lshift+0xc8>
 80151fc:	e7ea      	b.n	80151d4 <__lshift+0xac>
 80151fe:	bf00      	nop
 8015200:	080165e0 	.word	0x080165e0
 8015204:	0801666c 	.word	0x0801666c

08015208 <__mcmp>:
 8015208:	b530      	push	{r4, r5, lr}
 801520a:	6902      	ldr	r2, [r0, #16]
 801520c:	690c      	ldr	r4, [r1, #16]
 801520e:	1b12      	subs	r2, r2, r4
 8015210:	d10e      	bne.n	8015230 <__mcmp+0x28>
 8015212:	f100 0314 	add.w	r3, r0, #20
 8015216:	3114      	adds	r1, #20
 8015218:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801521c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015220:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015224:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015228:	42a5      	cmp	r5, r4
 801522a:	d003      	beq.n	8015234 <__mcmp+0x2c>
 801522c:	d305      	bcc.n	801523a <__mcmp+0x32>
 801522e:	2201      	movs	r2, #1
 8015230:	4610      	mov	r0, r2
 8015232:	bd30      	pop	{r4, r5, pc}
 8015234:	4283      	cmp	r3, r0
 8015236:	d3f3      	bcc.n	8015220 <__mcmp+0x18>
 8015238:	e7fa      	b.n	8015230 <__mcmp+0x28>
 801523a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801523e:	e7f7      	b.n	8015230 <__mcmp+0x28>

08015240 <__mdiff>:
 8015240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015244:	460c      	mov	r4, r1
 8015246:	4606      	mov	r6, r0
 8015248:	4611      	mov	r1, r2
 801524a:	4620      	mov	r0, r4
 801524c:	4690      	mov	r8, r2
 801524e:	f7ff ffdb 	bl	8015208 <__mcmp>
 8015252:	1e05      	subs	r5, r0, #0
 8015254:	d110      	bne.n	8015278 <__mdiff+0x38>
 8015256:	4629      	mov	r1, r5
 8015258:	4630      	mov	r0, r6
 801525a:	f7ff fd09 	bl	8014c70 <_Balloc>
 801525e:	b930      	cbnz	r0, 801526e <__mdiff+0x2e>
 8015260:	4b3a      	ldr	r3, [pc, #232]	; (801534c <__mdiff+0x10c>)
 8015262:	4602      	mov	r2, r0
 8015264:	f240 2132 	movw	r1, #562	; 0x232
 8015268:	4839      	ldr	r0, [pc, #228]	; (8015350 <__mdiff+0x110>)
 801526a:	f000 fbbf 	bl	80159ec <__assert_func>
 801526e:	2301      	movs	r3, #1
 8015270:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015274:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015278:	bfa4      	itt	ge
 801527a:	4643      	movge	r3, r8
 801527c:	46a0      	movge	r8, r4
 801527e:	4630      	mov	r0, r6
 8015280:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015284:	bfa6      	itte	ge
 8015286:	461c      	movge	r4, r3
 8015288:	2500      	movge	r5, #0
 801528a:	2501      	movlt	r5, #1
 801528c:	f7ff fcf0 	bl	8014c70 <_Balloc>
 8015290:	b920      	cbnz	r0, 801529c <__mdiff+0x5c>
 8015292:	4b2e      	ldr	r3, [pc, #184]	; (801534c <__mdiff+0x10c>)
 8015294:	4602      	mov	r2, r0
 8015296:	f44f 7110 	mov.w	r1, #576	; 0x240
 801529a:	e7e5      	b.n	8015268 <__mdiff+0x28>
 801529c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80152a0:	6926      	ldr	r6, [r4, #16]
 80152a2:	60c5      	str	r5, [r0, #12]
 80152a4:	f104 0914 	add.w	r9, r4, #20
 80152a8:	f108 0514 	add.w	r5, r8, #20
 80152ac:	f100 0e14 	add.w	lr, r0, #20
 80152b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80152b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80152b8:	f108 0210 	add.w	r2, r8, #16
 80152bc:	46f2      	mov	sl, lr
 80152be:	2100      	movs	r1, #0
 80152c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80152c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80152c8:	fa1f f883 	uxth.w	r8, r3
 80152cc:	fa11 f18b 	uxtah	r1, r1, fp
 80152d0:	0c1b      	lsrs	r3, r3, #16
 80152d2:	eba1 0808 	sub.w	r8, r1, r8
 80152d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80152da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80152de:	fa1f f888 	uxth.w	r8, r8
 80152e2:	1419      	asrs	r1, r3, #16
 80152e4:	454e      	cmp	r6, r9
 80152e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80152ea:	f84a 3b04 	str.w	r3, [sl], #4
 80152ee:	d8e7      	bhi.n	80152c0 <__mdiff+0x80>
 80152f0:	1b33      	subs	r3, r6, r4
 80152f2:	3b15      	subs	r3, #21
 80152f4:	f023 0303 	bic.w	r3, r3, #3
 80152f8:	3304      	adds	r3, #4
 80152fa:	3415      	adds	r4, #21
 80152fc:	42a6      	cmp	r6, r4
 80152fe:	bf38      	it	cc
 8015300:	2304      	movcc	r3, #4
 8015302:	441d      	add	r5, r3
 8015304:	4473      	add	r3, lr
 8015306:	469e      	mov	lr, r3
 8015308:	462e      	mov	r6, r5
 801530a:	4566      	cmp	r6, ip
 801530c:	d30e      	bcc.n	801532c <__mdiff+0xec>
 801530e:	f10c 0203 	add.w	r2, ip, #3
 8015312:	1b52      	subs	r2, r2, r5
 8015314:	f022 0203 	bic.w	r2, r2, #3
 8015318:	3d03      	subs	r5, #3
 801531a:	45ac      	cmp	ip, r5
 801531c:	bf38      	it	cc
 801531e:	2200      	movcc	r2, #0
 8015320:	441a      	add	r2, r3
 8015322:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015326:	b17b      	cbz	r3, 8015348 <__mdiff+0x108>
 8015328:	6107      	str	r7, [r0, #16]
 801532a:	e7a3      	b.n	8015274 <__mdiff+0x34>
 801532c:	f856 8b04 	ldr.w	r8, [r6], #4
 8015330:	fa11 f288 	uxtah	r2, r1, r8
 8015334:	1414      	asrs	r4, r2, #16
 8015336:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801533a:	b292      	uxth	r2, r2
 801533c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015340:	f84e 2b04 	str.w	r2, [lr], #4
 8015344:	1421      	asrs	r1, r4, #16
 8015346:	e7e0      	b.n	801530a <__mdiff+0xca>
 8015348:	3f01      	subs	r7, #1
 801534a:	e7ea      	b.n	8015322 <__mdiff+0xe2>
 801534c:	080165e0 	.word	0x080165e0
 8015350:	0801666c 	.word	0x0801666c

08015354 <__ulp>:
 8015354:	b082      	sub	sp, #8
 8015356:	ed8d 0b00 	vstr	d0, [sp]
 801535a:	9b01      	ldr	r3, [sp, #4]
 801535c:	4912      	ldr	r1, [pc, #72]	; (80153a8 <__ulp+0x54>)
 801535e:	4019      	ands	r1, r3
 8015360:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015364:	2900      	cmp	r1, #0
 8015366:	dd05      	ble.n	8015374 <__ulp+0x20>
 8015368:	2200      	movs	r2, #0
 801536a:	460b      	mov	r3, r1
 801536c:	ec43 2b10 	vmov	d0, r2, r3
 8015370:	b002      	add	sp, #8
 8015372:	4770      	bx	lr
 8015374:	4249      	negs	r1, r1
 8015376:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801537a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801537e:	f04f 0200 	mov.w	r2, #0
 8015382:	f04f 0300 	mov.w	r3, #0
 8015386:	da04      	bge.n	8015392 <__ulp+0x3e>
 8015388:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801538c:	fa41 f300 	asr.w	r3, r1, r0
 8015390:	e7ec      	b.n	801536c <__ulp+0x18>
 8015392:	f1a0 0114 	sub.w	r1, r0, #20
 8015396:	291e      	cmp	r1, #30
 8015398:	bfda      	itte	le
 801539a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801539e:	fa20 f101 	lsrle.w	r1, r0, r1
 80153a2:	2101      	movgt	r1, #1
 80153a4:	460a      	mov	r2, r1
 80153a6:	e7e1      	b.n	801536c <__ulp+0x18>
 80153a8:	7ff00000 	.word	0x7ff00000

080153ac <__b2d>:
 80153ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ae:	6905      	ldr	r5, [r0, #16]
 80153b0:	f100 0714 	add.w	r7, r0, #20
 80153b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80153b8:	1f2e      	subs	r6, r5, #4
 80153ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80153be:	4620      	mov	r0, r4
 80153c0:	f7ff fd48 	bl	8014e54 <__hi0bits>
 80153c4:	f1c0 0320 	rsb	r3, r0, #32
 80153c8:	280a      	cmp	r0, #10
 80153ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015448 <__b2d+0x9c>
 80153ce:	600b      	str	r3, [r1, #0]
 80153d0:	dc14      	bgt.n	80153fc <__b2d+0x50>
 80153d2:	f1c0 0e0b 	rsb	lr, r0, #11
 80153d6:	fa24 f10e 	lsr.w	r1, r4, lr
 80153da:	42b7      	cmp	r7, r6
 80153dc:	ea41 030c 	orr.w	r3, r1, ip
 80153e0:	bf34      	ite	cc
 80153e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80153e6:	2100      	movcs	r1, #0
 80153e8:	3015      	adds	r0, #21
 80153ea:	fa04 f000 	lsl.w	r0, r4, r0
 80153ee:	fa21 f10e 	lsr.w	r1, r1, lr
 80153f2:	ea40 0201 	orr.w	r2, r0, r1
 80153f6:	ec43 2b10 	vmov	d0, r2, r3
 80153fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153fc:	42b7      	cmp	r7, r6
 80153fe:	bf3a      	itte	cc
 8015400:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015404:	f1a5 0608 	subcc.w	r6, r5, #8
 8015408:	2100      	movcs	r1, #0
 801540a:	380b      	subs	r0, #11
 801540c:	d017      	beq.n	801543e <__b2d+0x92>
 801540e:	f1c0 0c20 	rsb	ip, r0, #32
 8015412:	fa04 f500 	lsl.w	r5, r4, r0
 8015416:	42be      	cmp	r6, r7
 8015418:	fa21 f40c 	lsr.w	r4, r1, ip
 801541c:	ea45 0504 	orr.w	r5, r5, r4
 8015420:	bf8c      	ite	hi
 8015422:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015426:	2400      	movls	r4, #0
 8015428:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801542c:	fa01 f000 	lsl.w	r0, r1, r0
 8015430:	fa24 f40c 	lsr.w	r4, r4, ip
 8015434:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015438:	ea40 0204 	orr.w	r2, r0, r4
 801543c:	e7db      	b.n	80153f6 <__b2d+0x4a>
 801543e:	ea44 030c 	orr.w	r3, r4, ip
 8015442:	460a      	mov	r2, r1
 8015444:	e7d7      	b.n	80153f6 <__b2d+0x4a>
 8015446:	bf00      	nop
 8015448:	3ff00000 	.word	0x3ff00000

0801544c <__d2b>:
 801544c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015450:	4689      	mov	r9, r1
 8015452:	2101      	movs	r1, #1
 8015454:	ec57 6b10 	vmov	r6, r7, d0
 8015458:	4690      	mov	r8, r2
 801545a:	f7ff fc09 	bl	8014c70 <_Balloc>
 801545e:	4604      	mov	r4, r0
 8015460:	b930      	cbnz	r0, 8015470 <__d2b+0x24>
 8015462:	4602      	mov	r2, r0
 8015464:	4b25      	ldr	r3, [pc, #148]	; (80154fc <__d2b+0xb0>)
 8015466:	4826      	ldr	r0, [pc, #152]	; (8015500 <__d2b+0xb4>)
 8015468:	f240 310a 	movw	r1, #778	; 0x30a
 801546c:	f000 fabe 	bl	80159ec <__assert_func>
 8015470:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015474:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015478:	bb35      	cbnz	r5, 80154c8 <__d2b+0x7c>
 801547a:	2e00      	cmp	r6, #0
 801547c:	9301      	str	r3, [sp, #4]
 801547e:	d028      	beq.n	80154d2 <__d2b+0x86>
 8015480:	4668      	mov	r0, sp
 8015482:	9600      	str	r6, [sp, #0]
 8015484:	f7ff fd06 	bl	8014e94 <__lo0bits>
 8015488:	9900      	ldr	r1, [sp, #0]
 801548a:	b300      	cbz	r0, 80154ce <__d2b+0x82>
 801548c:	9a01      	ldr	r2, [sp, #4]
 801548e:	f1c0 0320 	rsb	r3, r0, #32
 8015492:	fa02 f303 	lsl.w	r3, r2, r3
 8015496:	430b      	orrs	r3, r1
 8015498:	40c2      	lsrs	r2, r0
 801549a:	6163      	str	r3, [r4, #20]
 801549c:	9201      	str	r2, [sp, #4]
 801549e:	9b01      	ldr	r3, [sp, #4]
 80154a0:	61a3      	str	r3, [r4, #24]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	bf14      	ite	ne
 80154a6:	2202      	movne	r2, #2
 80154a8:	2201      	moveq	r2, #1
 80154aa:	6122      	str	r2, [r4, #16]
 80154ac:	b1d5      	cbz	r5, 80154e4 <__d2b+0x98>
 80154ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80154b2:	4405      	add	r5, r0
 80154b4:	f8c9 5000 	str.w	r5, [r9]
 80154b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80154bc:	f8c8 0000 	str.w	r0, [r8]
 80154c0:	4620      	mov	r0, r4
 80154c2:	b003      	add	sp, #12
 80154c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80154cc:	e7d5      	b.n	801547a <__d2b+0x2e>
 80154ce:	6161      	str	r1, [r4, #20]
 80154d0:	e7e5      	b.n	801549e <__d2b+0x52>
 80154d2:	a801      	add	r0, sp, #4
 80154d4:	f7ff fcde 	bl	8014e94 <__lo0bits>
 80154d8:	9b01      	ldr	r3, [sp, #4]
 80154da:	6163      	str	r3, [r4, #20]
 80154dc:	2201      	movs	r2, #1
 80154de:	6122      	str	r2, [r4, #16]
 80154e0:	3020      	adds	r0, #32
 80154e2:	e7e3      	b.n	80154ac <__d2b+0x60>
 80154e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80154e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80154ec:	f8c9 0000 	str.w	r0, [r9]
 80154f0:	6918      	ldr	r0, [r3, #16]
 80154f2:	f7ff fcaf 	bl	8014e54 <__hi0bits>
 80154f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80154fa:	e7df      	b.n	80154bc <__d2b+0x70>
 80154fc:	080165e0 	.word	0x080165e0
 8015500:	0801666c 	.word	0x0801666c

08015504 <__ratio>:
 8015504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015508:	4688      	mov	r8, r1
 801550a:	4669      	mov	r1, sp
 801550c:	4681      	mov	r9, r0
 801550e:	f7ff ff4d 	bl	80153ac <__b2d>
 8015512:	a901      	add	r1, sp, #4
 8015514:	4640      	mov	r0, r8
 8015516:	ec55 4b10 	vmov	r4, r5, d0
 801551a:	f7ff ff47 	bl	80153ac <__b2d>
 801551e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015522:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015526:	eba3 0c02 	sub.w	ip, r3, r2
 801552a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801552e:	1a9b      	subs	r3, r3, r2
 8015530:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015534:	ec51 0b10 	vmov	r0, r1, d0
 8015538:	2b00      	cmp	r3, #0
 801553a:	bfd6      	itet	le
 801553c:	460a      	movle	r2, r1
 801553e:	462a      	movgt	r2, r5
 8015540:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015544:	468b      	mov	fp, r1
 8015546:	462f      	mov	r7, r5
 8015548:	bfd4      	ite	le
 801554a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801554e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015552:	4620      	mov	r0, r4
 8015554:	ee10 2a10 	vmov	r2, s0
 8015558:	465b      	mov	r3, fp
 801555a:	4639      	mov	r1, r7
 801555c:	f7eb f98e 	bl	800087c <__aeabi_ddiv>
 8015560:	ec41 0b10 	vmov	d0, r0, r1
 8015564:	b003      	add	sp, #12
 8015566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801556a <__copybits>:
 801556a:	3901      	subs	r1, #1
 801556c:	b570      	push	{r4, r5, r6, lr}
 801556e:	1149      	asrs	r1, r1, #5
 8015570:	6914      	ldr	r4, [r2, #16]
 8015572:	3101      	adds	r1, #1
 8015574:	f102 0314 	add.w	r3, r2, #20
 8015578:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801557c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015580:	1f05      	subs	r5, r0, #4
 8015582:	42a3      	cmp	r3, r4
 8015584:	d30c      	bcc.n	80155a0 <__copybits+0x36>
 8015586:	1aa3      	subs	r3, r4, r2
 8015588:	3b11      	subs	r3, #17
 801558a:	f023 0303 	bic.w	r3, r3, #3
 801558e:	3211      	adds	r2, #17
 8015590:	42a2      	cmp	r2, r4
 8015592:	bf88      	it	hi
 8015594:	2300      	movhi	r3, #0
 8015596:	4418      	add	r0, r3
 8015598:	2300      	movs	r3, #0
 801559a:	4288      	cmp	r0, r1
 801559c:	d305      	bcc.n	80155aa <__copybits+0x40>
 801559e:	bd70      	pop	{r4, r5, r6, pc}
 80155a0:	f853 6b04 	ldr.w	r6, [r3], #4
 80155a4:	f845 6f04 	str.w	r6, [r5, #4]!
 80155a8:	e7eb      	b.n	8015582 <__copybits+0x18>
 80155aa:	f840 3b04 	str.w	r3, [r0], #4
 80155ae:	e7f4      	b.n	801559a <__copybits+0x30>

080155b0 <__any_on>:
 80155b0:	f100 0214 	add.w	r2, r0, #20
 80155b4:	6900      	ldr	r0, [r0, #16]
 80155b6:	114b      	asrs	r3, r1, #5
 80155b8:	4298      	cmp	r0, r3
 80155ba:	b510      	push	{r4, lr}
 80155bc:	db11      	blt.n	80155e2 <__any_on+0x32>
 80155be:	dd0a      	ble.n	80155d6 <__any_on+0x26>
 80155c0:	f011 011f 	ands.w	r1, r1, #31
 80155c4:	d007      	beq.n	80155d6 <__any_on+0x26>
 80155c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80155ca:	fa24 f001 	lsr.w	r0, r4, r1
 80155ce:	fa00 f101 	lsl.w	r1, r0, r1
 80155d2:	428c      	cmp	r4, r1
 80155d4:	d10b      	bne.n	80155ee <__any_on+0x3e>
 80155d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80155da:	4293      	cmp	r3, r2
 80155dc:	d803      	bhi.n	80155e6 <__any_on+0x36>
 80155de:	2000      	movs	r0, #0
 80155e0:	bd10      	pop	{r4, pc}
 80155e2:	4603      	mov	r3, r0
 80155e4:	e7f7      	b.n	80155d6 <__any_on+0x26>
 80155e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80155ea:	2900      	cmp	r1, #0
 80155ec:	d0f5      	beq.n	80155da <__any_on+0x2a>
 80155ee:	2001      	movs	r0, #1
 80155f0:	e7f6      	b.n	80155e0 <__any_on+0x30>

080155f2 <_calloc_r>:
 80155f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155f4:	fba1 2402 	umull	r2, r4, r1, r2
 80155f8:	b94c      	cbnz	r4, 801560e <_calloc_r+0x1c>
 80155fa:	4611      	mov	r1, r2
 80155fc:	9201      	str	r2, [sp, #4]
 80155fe:	f7fc f977 	bl	80118f0 <_malloc_r>
 8015602:	9a01      	ldr	r2, [sp, #4]
 8015604:	4605      	mov	r5, r0
 8015606:	b930      	cbnz	r0, 8015616 <_calloc_r+0x24>
 8015608:	4628      	mov	r0, r5
 801560a:	b003      	add	sp, #12
 801560c:	bd30      	pop	{r4, r5, pc}
 801560e:	220c      	movs	r2, #12
 8015610:	6002      	str	r2, [r0, #0]
 8015612:	2500      	movs	r5, #0
 8015614:	e7f8      	b.n	8015608 <_calloc_r+0x16>
 8015616:	4621      	mov	r1, r4
 8015618:	f7fc f941 	bl	801189e <memset>
 801561c:	e7f4      	b.n	8015608 <_calloc_r+0x16>
	...

08015620 <_free_r>:
 8015620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015622:	2900      	cmp	r1, #0
 8015624:	d044      	beq.n	80156b0 <_free_r+0x90>
 8015626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801562a:	9001      	str	r0, [sp, #4]
 801562c:	2b00      	cmp	r3, #0
 801562e:	f1a1 0404 	sub.w	r4, r1, #4
 8015632:	bfb8      	it	lt
 8015634:	18e4      	addlt	r4, r4, r3
 8015636:	f7ff fb0f 	bl	8014c58 <__malloc_lock>
 801563a:	4a1e      	ldr	r2, [pc, #120]	; (80156b4 <_free_r+0x94>)
 801563c:	9801      	ldr	r0, [sp, #4]
 801563e:	6813      	ldr	r3, [r2, #0]
 8015640:	b933      	cbnz	r3, 8015650 <_free_r+0x30>
 8015642:	6063      	str	r3, [r4, #4]
 8015644:	6014      	str	r4, [r2, #0]
 8015646:	b003      	add	sp, #12
 8015648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801564c:	f7ff bb0a 	b.w	8014c64 <__malloc_unlock>
 8015650:	42a3      	cmp	r3, r4
 8015652:	d908      	bls.n	8015666 <_free_r+0x46>
 8015654:	6825      	ldr	r5, [r4, #0]
 8015656:	1961      	adds	r1, r4, r5
 8015658:	428b      	cmp	r3, r1
 801565a:	bf01      	itttt	eq
 801565c:	6819      	ldreq	r1, [r3, #0]
 801565e:	685b      	ldreq	r3, [r3, #4]
 8015660:	1949      	addeq	r1, r1, r5
 8015662:	6021      	streq	r1, [r4, #0]
 8015664:	e7ed      	b.n	8015642 <_free_r+0x22>
 8015666:	461a      	mov	r2, r3
 8015668:	685b      	ldr	r3, [r3, #4]
 801566a:	b10b      	cbz	r3, 8015670 <_free_r+0x50>
 801566c:	42a3      	cmp	r3, r4
 801566e:	d9fa      	bls.n	8015666 <_free_r+0x46>
 8015670:	6811      	ldr	r1, [r2, #0]
 8015672:	1855      	adds	r5, r2, r1
 8015674:	42a5      	cmp	r5, r4
 8015676:	d10b      	bne.n	8015690 <_free_r+0x70>
 8015678:	6824      	ldr	r4, [r4, #0]
 801567a:	4421      	add	r1, r4
 801567c:	1854      	adds	r4, r2, r1
 801567e:	42a3      	cmp	r3, r4
 8015680:	6011      	str	r1, [r2, #0]
 8015682:	d1e0      	bne.n	8015646 <_free_r+0x26>
 8015684:	681c      	ldr	r4, [r3, #0]
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	6053      	str	r3, [r2, #4]
 801568a:	4421      	add	r1, r4
 801568c:	6011      	str	r1, [r2, #0]
 801568e:	e7da      	b.n	8015646 <_free_r+0x26>
 8015690:	d902      	bls.n	8015698 <_free_r+0x78>
 8015692:	230c      	movs	r3, #12
 8015694:	6003      	str	r3, [r0, #0]
 8015696:	e7d6      	b.n	8015646 <_free_r+0x26>
 8015698:	6825      	ldr	r5, [r4, #0]
 801569a:	1961      	adds	r1, r4, r5
 801569c:	428b      	cmp	r3, r1
 801569e:	bf04      	itt	eq
 80156a0:	6819      	ldreq	r1, [r3, #0]
 80156a2:	685b      	ldreq	r3, [r3, #4]
 80156a4:	6063      	str	r3, [r4, #4]
 80156a6:	bf04      	itt	eq
 80156a8:	1949      	addeq	r1, r1, r5
 80156aa:	6021      	streq	r1, [r4, #0]
 80156ac:	6054      	str	r4, [r2, #4]
 80156ae:	e7ca      	b.n	8015646 <_free_r+0x26>
 80156b0:	b003      	add	sp, #12
 80156b2:	bd30      	pop	{r4, r5, pc}
 80156b4:	2000270c 	.word	0x2000270c

080156b8 <__ssputs_r>:
 80156b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156bc:	688e      	ldr	r6, [r1, #8]
 80156be:	429e      	cmp	r6, r3
 80156c0:	4682      	mov	sl, r0
 80156c2:	460c      	mov	r4, r1
 80156c4:	4690      	mov	r8, r2
 80156c6:	461f      	mov	r7, r3
 80156c8:	d838      	bhi.n	801573c <__ssputs_r+0x84>
 80156ca:	898a      	ldrh	r2, [r1, #12]
 80156cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80156d0:	d032      	beq.n	8015738 <__ssputs_r+0x80>
 80156d2:	6825      	ldr	r5, [r4, #0]
 80156d4:	6909      	ldr	r1, [r1, #16]
 80156d6:	eba5 0901 	sub.w	r9, r5, r1
 80156da:	6965      	ldr	r5, [r4, #20]
 80156dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80156e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80156e4:	3301      	adds	r3, #1
 80156e6:	444b      	add	r3, r9
 80156e8:	106d      	asrs	r5, r5, #1
 80156ea:	429d      	cmp	r5, r3
 80156ec:	bf38      	it	cc
 80156ee:	461d      	movcc	r5, r3
 80156f0:	0553      	lsls	r3, r2, #21
 80156f2:	d531      	bpl.n	8015758 <__ssputs_r+0xa0>
 80156f4:	4629      	mov	r1, r5
 80156f6:	f7fc f8fb 	bl	80118f0 <_malloc_r>
 80156fa:	4606      	mov	r6, r0
 80156fc:	b950      	cbnz	r0, 8015714 <__ssputs_r+0x5c>
 80156fe:	230c      	movs	r3, #12
 8015700:	f8ca 3000 	str.w	r3, [sl]
 8015704:	89a3      	ldrh	r3, [r4, #12]
 8015706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801570a:	81a3      	strh	r3, [r4, #12]
 801570c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015714:	6921      	ldr	r1, [r4, #16]
 8015716:	464a      	mov	r2, r9
 8015718:	f7fc f8b3 	bl	8011882 <memcpy>
 801571c:	89a3      	ldrh	r3, [r4, #12]
 801571e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015726:	81a3      	strh	r3, [r4, #12]
 8015728:	6126      	str	r6, [r4, #16]
 801572a:	6165      	str	r5, [r4, #20]
 801572c:	444e      	add	r6, r9
 801572e:	eba5 0509 	sub.w	r5, r5, r9
 8015732:	6026      	str	r6, [r4, #0]
 8015734:	60a5      	str	r5, [r4, #8]
 8015736:	463e      	mov	r6, r7
 8015738:	42be      	cmp	r6, r7
 801573a:	d900      	bls.n	801573e <__ssputs_r+0x86>
 801573c:	463e      	mov	r6, r7
 801573e:	6820      	ldr	r0, [r4, #0]
 8015740:	4632      	mov	r2, r6
 8015742:	4641      	mov	r1, r8
 8015744:	f000 f982 	bl	8015a4c <memmove>
 8015748:	68a3      	ldr	r3, [r4, #8]
 801574a:	1b9b      	subs	r3, r3, r6
 801574c:	60a3      	str	r3, [r4, #8]
 801574e:	6823      	ldr	r3, [r4, #0]
 8015750:	4433      	add	r3, r6
 8015752:	6023      	str	r3, [r4, #0]
 8015754:	2000      	movs	r0, #0
 8015756:	e7db      	b.n	8015710 <__ssputs_r+0x58>
 8015758:	462a      	mov	r2, r5
 801575a:	f000 f991 	bl	8015a80 <_realloc_r>
 801575e:	4606      	mov	r6, r0
 8015760:	2800      	cmp	r0, #0
 8015762:	d1e1      	bne.n	8015728 <__ssputs_r+0x70>
 8015764:	6921      	ldr	r1, [r4, #16]
 8015766:	4650      	mov	r0, sl
 8015768:	f7ff ff5a 	bl	8015620 <_free_r>
 801576c:	e7c7      	b.n	80156fe <__ssputs_r+0x46>
	...

08015770 <_svfiprintf_r>:
 8015770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015774:	4698      	mov	r8, r3
 8015776:	898b      	ldrh	r3, [r1, #12]
 8015778:	061b      	lsls	r3, r3, #24
 801577a:	b09d      	sub	sp, #116	; 0x74
 801577c:	4607      	mov	r7, r0
 801577e:	460d      	mov	r5, r1
 8015780:	4614      	mov	r4, r2
 8015782:	d50e      	bpl.n	80157a2 <_svfiprintf_r+0x32>
 8015784:	690b      	ldr	r3, [r1, #16]
 8015786:	b963      	cbnz	r3, 80157a2 <_svfiprintf_r+0x32>
 8015788:	2140      	movs	r1, #64	; 0x40
 801578a:	f7fc f8b1 	bl	80118f0 <_malloc_r>
 801578e:	6028      	str	r0, [r5, #0]
 8015790:	6128      	str	r0, [r5, #16]
 8015792:	b920      	cbnz	r0, 801579e <_svfiprintf_r+0x2e>
 8015794:	230c      	movs	r3, #12
 8015796:	603b      	str	r3, [r7, #0]
 8015798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801579c:	e0d1      	b.n	8015942 <_svfiprintf_r+0x1d2>
 801579e:	2340      	movs	r3, #64	; 0x40
 80157a0:	616b      	str	r3, [r5, #20]
 80157a2:	2300      	movs	r3, #0
 80157a4:	9309      	str	r3, [sp, #36]	; 0x24
 80157a6:	2320      	movs	r3, #32
 80157a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80157ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80157b0:	2330      	movs	r3, #48	; 0x30
 80157b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801595c <_svfiprintf_r+0x1ec>
 80157b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80157ba:	f04f 0901 	mov.w	r9, #1
 80157be:	4623      	mov	r3, r4
 80157c0:	469a      	mov	sl, r3
 80157c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80157c6:	b10a      	cbz	r2, 80157cc <_svfiprintf_r+0x5c>
 80157c8:	2a25      	cmp	r2, #37	; 0x25
 80157ca:	d1f9      	bne.n	80157c0 <_svfiprintf_r+0x50>
 80157cc:	ebba 0b04 	subs.w	fp, sl, r4
 80157d0:	d00b      	beq.n	80157ea <_svfiprintf_r+0x7a>
 80157d2:	465b      	mov	r3, fp
 80157d4:	4622      	mov	r2, r4
 80157d6:	4629      	mov	r1, r5
 80157d8:	4638      	mov	r0, r7
 80157da:	f7ff ff6d 	bl	80156b8 <__ssputs_r>
 80157de:	3001      	adds	r0, #1
 80157e0:	f000 80aa 	beq.w	8015938 <_svfiprintf_r+0x1c8>
 80157e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157e6:	445a      	add	r2, fp
 80157e8:	9209      	str	r2, [sp, #36]	; 0x24
 80157ea:	f89a 3000 	ldrb.w	r3, [sl]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	f000 80a2 	beq.w	8015938 <_svfiprintf_r+0x1c8>
 80157f4:	2300      	movs	r3, #0
 80157f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80157fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157fe:	f10a 0a01 	add.w	sl, sl, #1
 8015802:	9304      	str	r3, [sp, #16]
 8015804:	9307      	str	r3, [sp, #28]
 8015806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801580a:	931a      	str	r3, [sp, #104]	; 0x68
 801580c:	4654      	mov	r4, sl
 801580e:	2205      	movs	r2, #5
 8015810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015814:	4851      	ldr	r0, [pc, #324]	; (801595c <_svfiprintf_r+0x1ec>)
 8015816:	f7ea fcfb 	bl	8000210 <memchr>
 801581a:	9a04      	ldr	r2, [sp, #16]
 801581c:	b9d8      	cbnz	r0, 8015856 <_svfiprintf_r+0xe6>
 801581e:	06d0      	lsls	r0, r2, #27
 8015820:	bf44      	itt	mi
 8015822:	2320      	movmi	r3, #32
 8015824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015828:	0711      	lsls	r1, r2, #28
 801582a:	bf44      	itt	mi
 801582c:	232b      	movmi	r3, #43	; 0x2b
 801582e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015832:	f89a 3000 	ldrb.w	r3, [sl]
 8015836:	2b2a      	cmp	r3, #42	; 0x2a
 8015838:	d015      	beq.n	8015866 <_svfiprintf_r+0xf6>
 801583a:	9a07      	ldr	r2, [sp, #28]
 801583c:	4654      	mov	r4, sl
 801583e:	2000      	movs	r0, #0
 8015840:	f04f 0c0a 	mov.w	ip, #10
 8015844:	4621      	mov	r1, r4
 8015846:	f811 3b01 	ldrb.w	r3, [r1], #1
 801584a:	3b30      	subs	r3, #48	; 0x30
 801584c:	2b09      	cmp	r3, #9
 801584e:	d94e      	bls.n	80158ee <_svfiprintf_r+0x17e>
 8015850:	b1b0      	cbz	r0, 8015880 <_svfiprintf_r+0x110>
 8015852:	9207      	str	r2, [sp, #28]
 8015854:	e014      	b.n	8015880 <_svfiprintf_r+0x110>
 8015856:	eba0 0308 	sub.w	r3, r0, r8
 801585a:	fa09 f303 	lsl.w	r3, r9, r3
 801585e:	4313      	orrs	r3, r2
 8015860:	9304      	str	r3, [sp, #16]
 8015862:	46a2      	mov	sl, r4
 8015864:	e7d2      	b.n	801580c <_svfiprintf_r+0x9c>
 8015866:	9b03      	ldr	r3, [sp, #12]
 8015868:	1d19      	adds	r1, r3, #4
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	9103      	str	r1, [sp, #12]
 801586e:	2b00      	cmp	r3, #0
 8015870:	bfbb      	ittet	lt
 8015872:	425b      	neglt	r3, r3
 8015874:	f042 0202 	orrlt.w	r2, r2, #2
 8015878:	9307      	strge	r3, [sp, #28]
 801587a:	9307      	strlt	r3, [sp, #28]
 801587c:	bfb8      	it	lt
 801587e:	9204      	strlt	r2, [sp, #16]
 8015880:	7823      	ldrb	r3, [r4, #0]
 8015882:	2b2e      	cmp	r3, #46	; 0x2e
 8015884:	d10c      	bne.n	80158a0 <_svfiprintf_r+0x130>
 8015886:	7863      	ldrb	r3, [r4, #1]
 8015888:	2b2a      	cmp	r3, #42	; 0x2a
 801588a:	d135      	bne.n	80158f8 <_svfiprintf_r+0x188>
 801588c:	9b03      	ldr	r3, [sp, #12]
 801588e:	1d1a      	adds	r2, r3, #4
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	9203      	str	r2, [sp, #12]
 8015894:	2b00      	cmp	r3, #0
 8015896:	bfb8      	it	lt
 8015898:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801589c:	3402      	adds	r4, #2
 801589e:	9305      	str	r3, [sp, #20]
 80158a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801596c <_svfiprintf_r+0x1fc>
 80158a4:	7821      	ldrb	r1, [r4, #0]
 80158a6:	2203      	movs	r2, #3
 80158a8:	4650      	mov	r0, sl
 80158aa:	f7ea fcb1 	bl	8000210 <memchr>
 80158ae:	b140      	cbz	r0, 80158c2 <_svfiprintf_r+0x152>
 80158b0:	2340      	movs	r3, #64	; 0x40
 80158b2:	eba0 000a 	sub.w	r0, r0, sl
 80158b6:	fa03 f000 	lsl.w	r0, r3, r0
 80158ba:	9b04      	ldr	r3, [sp, #16]
 80158bc:	4303      	orrs	r3, r0
 80158be:	3401      	adds	r4, #1
 80158c0:	9304      	str	r3, [sp, #16]
 80158c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158c6:	4826      	ldr	r0, [pc, #152]	; (8015960 <_svfiprintf_r+0x1f0>)
 80158c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80158cc:	2206      	movs	r2, #6
 80158ce:	f7ea fc9f 	bl	8000210 <memchr>
 80158d2:	2800      	cmp	r0, #0
 80158d4:	d038      	beq.n	8015948 <_svfiprintf_r+0x1d8>
 80158d6:	4b23      	ldr	r3, [pc, #140]	; (8015964 <_svfiprintf_r+0x1f4>)
 80158d8:	bb1b      	cbnz	r3, 8015922 <_svfiprintf_r+0x1b2>
 80158da:	9b03      	ldr	r3, [sp, #12]
 80158dc:	3307      	adds	r3, #7
 80158de:	f023 0307 	bic.w	r3, r3, #7
 80158e2:	3308      	adds	r3, #8
 80158e4:	9303      	str	r3, [sp, #12]
 80158e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158e8:	4433      	add	r3, r6
 80158ea:	9309      	str	r3, [sp, #36]	; 0x24
 80158ec:	e767      	b.n	80157be <_svfiprintf_r+0x4e>
 80158ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80158f2:	460c      	mov	r4, r1
 80158f4:	2001      	movs	r0, #1
 80158f6:	e7a5      	b.n	8015844 <_svfiprintf_r+0xd4>
 80158f8:	2300      	movs	r3, #0
 80158fa:	3401      	adds	r4, #1
 80158fc:	9305      	str	r3, [sp, #20]
 80158fe:	4619      	mov	r1, r3
 8015900:	f04f 0c0a 	mov.w	ip, #10
 8015904:	4620      	mov	r0, r4
 8015906:	f810 2b01 	ldrb.w	r2, [r0], #1
 801590a:	3a30      	subs	r2, #48	; 0x30
 801590c:	2a09      	cmp	r2, #9
 801590e:	d903      	bls.n	8015918 <_svfiprintf_r+0x1a8>
 8015910:	2b00      	cmp	r3, #0
 8015912:	d0c5      	beq.n	80158a0 <_svfiprintf_r+0x130>
 8015914:	9105      	str	r1, [sp, #20]
 8015916:	e7c3      	b.n	80158a0 <_svfiprintf_r+0x130>
 8015918:	fb0c 2101 	mla	r1, ip, r1, r2
 801591c:	4604      	mov	r4, r0
 801591e:	2301      	movs	r3, #1
 8015920:	e7f0      	b.n	8015904 <_svfiprintf_r+0x194>
 8015922:	ab03      	add	r3, sp, #12
 8015924:	9300      	str	r3, [sp, #0]
 8015926:	462a      	mov	r2, r5
 8015928:	4b0f      	ldr	r3, [pc, #60]	; (8015968 <_svfiprintf_r+0x1f8>)
 801592a:	a904      	add	r1, sp, #16
 801592c:	4638      	mov	r0, r7
 801592e:	f7fc f8f3 	bl	8011b18 <_printf_float>
 8015932:	1c42      	adds	r2, r0, #1
 8015934:	4606      	mov	r6, r0
 8015936:	d1d6      	bne.n	80158e6 <_svfiprintf_r+0x176>
 8015938:	89ab      	ldrh	r3, [r5, #12]
 801593a:	065b      	lsls	r3, r3, #25
 801593c:	f53f af2c 	bmi.w	8015798 <_svfiprintf_r+0x28>
 8015940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015942:	b01d      	add	sp, #116	; 0x74
 8015944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015948:	ab03      	add	r3, sp, #12
 801594a:	9300      	str	r3, [sp, #0]
 801594c:	462a      	mov	r2, r5
 801594e:	4b06      	ldr	r3, [pc, #24]	; (8015968 <_svfiprintf_r+0x1f8>)
 8015950:	a904      	add	r1, sp, #16
 8015952:	4638      	mov	r0, r7
 8015954:	f7fc fb84 	bl	8012060 <_printf_i>
 8015958:	e7eb      	b.n	8015932 <_svfiprintf_r+0x1c2>
 801595a:	bf00      	nop
 801595c:	080167c4 	.word	0x080167c4
 8015960:	080167ce 	.word	0x080167ce
 8015964:	08011b19 	.word	0x08011b19
 8015968:	080156b9 	.word	0x080156b9
 801596c:	080167ca 	.word	0x080167ca

08015970 <_read_r>:
 8015970:	b538      	push	{r3, r4, r5, lr}
 8015972:	4d07      	ldr	r5, [pc, #28]	; (8015990 <_read_r+0x20>)
 8015974:	4604      	mov	r4, r0
 8015976:	4608      	mov	r0, r1
 8015978:	4611      	mov	r1, r2
 801597a:	2200      	movs	r2, #0
 801597c:	602a      	str	r2, [r5, #0]
 801597e:	461a      	mov	r2, r3
 8015980:	f7ec fba6 	bl	80020d0 <_read>
 8015984:	1c43      	adds	r3, r0, #1
 8015986:	d102      	bne.n	801598e <_read_r+0x1e>
 8015988:	682b      	ldr	r3, [r5, #0]
 801598a:	b103      	cbz	r3, 801598e <_read_r+0x1e>
 801598c:	6023      	str	r3, [r4, #0]
 801598e:	bd38      	pop	{r3, r4, r5, pc}
 8015990:	20002714 	.word	0x20002714
 8015994:	00000000 	.word	0x00000000

08015998 <nan>:
 8015998:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80159a0 <nan+0x8>
 801599c:	4770      	bx	lr
 801599e:	bf00      	nop
 80159a0:	00000000 	.word	0x00000000
 80159a4:	7ff80000 	.word	0x7ff80000

080159a8 <strncmp>:
 80159a8:	b510      	push	{r4, lr}
 80159aa:	b17a      	cbz	r2, 80159cc <strncmp+0x24>
 80159ac:	4603      	mov	r3, r0
 80159ae:	3901      	subs	r1, #1
 80159b0:	1884      	adds	r4, r0, r2
 80159b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80159b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80159ba:	4290      	cmp	r0, r2
 80159bc:	d101      	bne.n	80159c2 <strncmp+0x1a>
 80159be:	42a3      	cmp	r3, r4
 80159c0:	d101      	bne.n	80159c6 <strncmp+0x1e>
 80159c2:	1a80      	subs	r0, r0, r2
 80159c4:	bd10      	pop	{r4, pc}
 80159c6:	2800      	cmp	r0, #0
 80159c8:	d1f3      	bne.n	80159b2 <strncmp+0xa>
 80159ca:	e7fa      	b.n	80159c2 <strncmp+0x1a>
 80159cc:	4610      	mov	r0, r2
 80159ce:	e7f9      	b.n	80159c4 <strncmp+0x1c>

080159d0 <__ascii_wctomb>:
 80159d0:	b149      	cbz	r1, 80159e6 <__ascii_wctomb+0x16>
 80159d2:	2aff      	cmp	r2, #255	; 0xff
 80159d4:	bf85      	ittet	hi
 80159d6:	238a      	movhi	r3, #138	; 0x8a
 80159d8:	6003      	strhi	r3, [r0, #0]
 80159da:	700a      	strbls	r2, [r1, #0]
 80159dc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80159e0:	bf98      	it	ls
 80159e2:	2001      	movls	r0, #1
 80159e4:	4770      	bx	lr
 80159e6:	4608      	mov	r0, r1
 80159e8:	4770      	bx	lr
	...

080159ec <__assert_func>:
 80159ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80159ee:	4614      	mov	r4, r2
 80159f0:	461a      	mov	r2, r3
 80159f2:	4b09      	ldr	r3, [pc, #36]	; (8015a18 <__assert_func+0x2c>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	4605      	mov	r5, r0
 80159f8:	68d8      	ldr	r0, [r3, #12]
 80159fa:	b14c      	cbz	r4, 8015a10 <__assert_func+0x24>
 80159fc:	4b07      	ldr	r3, [pc, #28]	; (8015a1c <__assert_func+0x30>)
 80159fe:	9100      	str	r1, [sp, #0]
 8015a00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a04:	4906      	ldr	r1, [pc, #24]	; (8015a20 <__assert_func+0x34>)
 8015a06:	462b      	mov	r3, r5
 8015a08:	f000 f80e 	bl	8015a28 <fiprintf>
 8015a0c:	f000 fa80 	bl	8015f10 <abort>
 8015a10:	4b04      	ldr	r3, [pc, #16]	; (8015a24 <__assert_func+0x38>)
 8015a12:	461c      	mov	r4, r3
 8015a14:	e7f3      	b.n	80159fe <__assert_func+0x12>
 8015a16:	bf00      	nop
 8015a18:	20000010 	.word	0x20000010
 8015a1c:	080167d5 	.word	0x080167d5
 8015a20:	080167e2 	.word	0x080167e2
 8015a24:	08016810 	.word	0x08016810

08015a28 <fiprintf>:
 8015a28:	b40e      	push	{r1, r2, r3}
 8015a2a:	b503      	push	{r0, r1, lr}
 8015a2c:	4601      	mov	r1, r0
 8015a2e:	ab03      	add	r3, sp, #12
 8015a30:	4805      	ldr	r0, [pc, #20]	; (8015a48 <fiprintf+0x20>)
 8015a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a36:	6800      	ldr	r0, [r0, #0]
 8015a38:	9301      	str	r3, [sp, #4]
 8015a3a:	f000 f879 	bl	8015b30 <_vfiprintf_r>
 8015a3e:	b002      	add	sp, #8
 8015a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a44:	b003      	add	sp, #12
 8015a46:	4770      	bx	lr
 8015a48:	20000010 	.word	0x20000010

08015a4c <memmove>:
 8015a4c:	4288      	cmp	r0, r1
 8015a4e:	b510      	push	{r4, lr}
 8015a50:	eb01 0402 	add.w	r4, r1, r2
 8015a54:	d902      	bls.n	8015a5c <memmove+0x10>
 8015a56:	4284      	cmp	r4, r0
 8015a58:	4623      	mov	r3, r4
 8015a5a:	d807      	bhi.n	8015a6c <memmove+0x20>
 8015a5c:	1e43      	subs	r3, r0, #1
 8015a5e:	42a1      	cmp	r1, r4
 8015a60:	d008      	beq.n	8015a74 <memmove+0x28>
 8015a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015a6a:	e7f8      	b.n	8015a5e <memmove+0x12>
 8015a6c:	4402      	add	r2, r0
 8015a6e:	4601      	mov	r1, r0
 8015a70:	428a      	cmp	r2, r1
 8015a72:	d100      	bne.n	8015a76 <memmove+0x2a>
 8015a74:	bd10      	pop	{r4, pc}
 8015a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015a7e:	e7f7      	b.n	8015a70 <memmove+0x24>

08015a80 <_realloc_r>:
 8015a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a84:	4680      	mov	r8, r0
 8015a86:	4614      	mov	r4, r2
 8015a88:	460e      	mov	r6, r1
 8015a8a:	b921      	cbnz	r1, 8015a96 <_realloc_r+0x16>
 8015a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a90:	4611      	mov	r1, r2
 8015a92:	f7fb bf2d 	b.w	80118f0 <_malloc_r>
 8015a96:	b92a      	cbnz	r2, 8015aa4 <_realloc_r+0x24>
 8015a98:	f7ff fdc2 	bl	8015620 <_free_r>
 8015a9c:	4625      	mov	r5, r4
 8015a9e:	4628      	mov	r0, r5
 8015aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aa4:	f000 faa0 	bl	8015fe8 <_malloc_usable_size_r>
 8015aa8:	4284      	cmp	r4, r0
 8015aaa:	4607      	mov	r7, r0
 8015aac:	d802      	bhi.n	8015ab4 <_realloc_r+0x34>
 8015aae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015ab2:	d812      	bhi.n	8015ada <_realloc_r+0x5a>
 8015ab4:	4621      	mov	r1, r4
 8015ab6:	4640      	mov	r0, r8
 8015ab8:	f7fb ff1a 	bl	80118f0 <_malloc_r>
 8015abc:	4605      	mov	r5, r0
 8015abe:	2800      	cmp	r0, #0
 8015ac0:	d0ed      	beq.n	8015a9e <_realloc_r+0x1e>
 8015ac2:	42bc      	cmp	r4, r7
 8015ac4:	4622      	mov	r2, r4
 8015ac6:	4631      	mov	r1, r6
 8015ac8:	bf28      	it	cs
 8015aca:	463a      	movcs	r2, r7
 8015acc:	f7fb fed9 	bl	8011882 <memcpy>
 8015ad0:	4631      	mov	r1, r6
 8015ad2:	4640      	mov	r0, r8
 8015ad4:	f7ff fda4 	bl	8015620 <_free_r>
 8015ad8:	e7e1      	b.n	8015a9e <_realloc_r+0x1e>
 8015ada:	4635      	mov	r5, r6
 8015adc:	e7df      	b.n	8015a9e <_realloc_r+0x1e>

08015ade <__sfputc_r>:
 8015ade:	6893      	ldr	r3, [r2, #8]
 8015ae0:	3b01      	subs	r3, #1
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	b410      	push	{r4}
 8015ae6:	6093      	str	r3, [r2, #8]
 8015ae8:	da08      	bge.n	8015afc <__sfputc_r+0x1e>
 8015aea:	6994      	ldr	r4, [r2, #24]
 8015aec:	42a3      	cmp	r3, r4
 8015aee:	db01      	blt.n	8015af4 <__sfputc_r+0x16>
 8015af0:	290a      	cmp	r1, #10
 8015af2:	d103      	bne.n	8015afc <__sfputc_r+0x1e>
 8015af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015af8:	f000 b94a 	b.w	8015d90 <__swbuf_r>
 8015afc:	6813      	ldr	r3, [r2, #0]
 8015afe:	1c58      	adds	r0, r3, #1
 8015b00:	6010      	str	r0, [r2, #0]
 8015b02:	7019      	strb	r1, [r3, #0]
 8015b04:	4608      	mov	r0, r1
 8015b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b0a:	4770      	bx	lr

08015b0c <__sfputs_r>:
 8015b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0e:	4606      	mov	r6, r0
 8015b10:	460f      	mov	r7, r1
 8015b12:	4614      	mov	r4, r2
 8015b14:	18d5      	adds	r5, r2, r3
 8015b16:	42ac      	cmp	r4, r5
 8015b18:	d101      	bne.n	8015b1e <__sfputs_r+0x12>
 8015b1a:	2000      	movs	r0, #0
 8015b1c:	e007      	b.n	8015b2e <__sfputs_r+0x22>
 8015b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b22:	463a      	mov	r2, r7
 8015b24:	4630      	mov	r0, r6
 8015b26:	f7ff ffda 	bl	8015ade <__sfputc_r>
 8015b2a:	1c43      	adds	r3, r0, #1
 8015b2c:	d1f3      	bne.n	8015b16 <__sfputs_r+0xa>
 8015b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015b30 <_vfiprintf_r>:
 8015b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b34:	460d      	mov	r5, r1
 8015b36:	b09d      	sub	sp, #116	; 0x74
 8015b38:	4614      	mov	r4, r2
 8015b3a:	4698      	mov	r8, r3
 8015b3c:	4606      	mov	r6, r0
 8015b3e:	b118      	cbz	r0, 8015b48 <_vfiprintf_r+0x18>
 8015b40:	6983      	ldr	r3, [r0, #24]
 8015b42:	b90b      	cbnz	r3, 8015b48 <_vfiprintf_r+0x18>
 8015b44:	f7fb fdd8 	bl	80116f8 <__sinit>
 8015b48:	4b89      	ldr	r3, [pc, #548]	; (8015d70 <_vfiprintf_r+0x240>)
 8015b4a:	429d      	cmp	r5, r3
 8015b4c:	d11b      	bne.n	8015b86 <_vfiprintf_r+0x56>
 8015b4e:	6875      	ldr	r5, [r6, #4]
 8015b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b52:	07d9      	lsls	r1, r3, #31
 8015b54:	d405      	bmi.n	8015b62 <_vfiprintf_r+0x32>
 8015b56:	89ab      	ldrh	r3, [r5, #12]
 8015b58:	059a      	lsls	r2, r3, #22
 8015b5a:	d402      	bmi.n	8015b62 <_vfiprintf_r+0x32>
 8015b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b5e:	f7fb fe8e 	bl	801187e <__retarget_lock_acquire_recursive>
 8015b62:	89ab      	ldrh	r3, [r5, #12]
 8015b64:	071b      	lsls	r3, r3, #28
 8015b66:	d501      	bpl.n	8015b6c <_vfiprintf_r+0x3c>
 8015b68:	692b      	ldr	r3, [r5, #16]
 8015b6a:	b9eb      	cbnz	r3, 8015ba8 <_vfiprintf_r+0x78>
 8015b6c:	4629      	mov	r1, r5
 8015b6e:	4630      	mov	r0, r6
 8015b70:	f000 f960 	bl	8015e34 <__swsetup_r>
 8015b74:	b1c0      	cbz	r0, 8015ba8 <_vfiprintf_r+0x78>
 8015b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b78:	07dc      	lsls	r4, r3, #31
 8015b7a:	d50e      	bpl.n	8015b9a <_vfiprintf_r+0x6a>
 8015b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b80:	b01d      	add	sp, #116	; 0x74
 8015b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b86:	4b7b      	ldr	r3, [pc, #492]	; (8015d74 <_vfiprintf_r+0x244>)
 8015b88:	429d      	cmp	r5, r3
 8015b8a:	d101      	bne.n	8015b90 <_vfiprintf_r+0x60>
 8015b8c:	68b5      	ldr	r5, [r6, #8]
 8015b8e:	e7df      	b.n	8015b50 <_vfiprintf_r+0x20>
 8015b90:	4b79      	ldr	r3, [pc, #484]	; (8015d78 <_vfiprintf_r+0x248>)
 8015b92:	429d      	cmp	r5, r3
 8015b94:	bf08      	it	eq
 8015b96:	68f5      	ldreq	r5, [r6, #12]
 8015b98:	e7da      	b.n	8015b50 <_vfiprintf_r+0x20>
 8015b9a:	89ab      	ldrh	r3, [r5, #12]
 8015b9c:	0598      	lsls	r0, r3, #22
 8015b9e:	d4ed      	bmi.n	8015b7c <_vfiprintf_r+0x4c>
 8015ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ba2:	f7fb fe6d 	bl	8011880 <__retarget_lock_release_recursive>
 8015ba6:	e7e9      	b.n	8015b7c <_vfiprintf_r+0x4c>
 8015ba8:	2300      	movs	r3, #0
 8015baa:	9309      	str	r3, [sp, #36]	; 0x24
 8015bac:	2320      	movs	r3, #32
 8015bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8015bb6:	2330      	movs	r3, #48	; 0x30
 8015bb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015d7c <_vfiprintf_r+0x24c>
 8015bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015bc0:	f04f 0901 	mov.w	r9, #1
 8015bc4:	4623      	mov	r3, r4
 8015bc6:	469a      	mov	sl, r3
 8015bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bcc:	b10a      	cbz	r2, 8015bd2 <_vfiprintf_r+0xa2>
 8015bce:	2a25      	cmp	r2, #37	; 0x25
 8015bd0:	d1f9      	bne.n	8015bc6 <_vfiprintf_r+0x96>
 8015bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8015bd6:	d00b      	beq.n	8015bf0 <_vfiprintf_r+0xc0>
 8015bd8:	465b      	mov	r3, fp
 8015bda:	4622      	mov	r2, r4
 8015bdc:	4629      	mov	r1, r5
 8015bde:	4630      	mov	r0, r6
 8015be0:	f7ff ff94 	bl	8015b0c <__sfputs_r>
 8015be4:	3001      	adds	r0, #1
 8015be6:	f000 80aa 	beq.w	8015d3e <_vfiprintf_r+0x20e>
 8015bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bec:	445a      	add	r2, fp
 8015bee:	9209      	str	r2, [sp, #36]	; 0x24
 8015bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	f000 80a2 	beq.w	8015d3e <_vfiprintf_r+0x20e>
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c04:	f10a 0a01 	add.w	sl, sl, #1
 8015c08:	9304      	str	r3, [sp, #16]
 8015c0a:	9307      	str	r3, [sp, #28]
 8015c0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c10:	931a      	str	r3, [sp, #104]	; 0x68
 8015c12:	4654      	mov	r4, sl
 8015c14:	2205      	movs	r2, #5
 8015c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c1a:	4858      	ldr	r0, [pc, #352]	; (8015d7c <_vfiprintf_r+0x24c>)
 8015c1c:	f7ea faf8 	bl	8000210 <memchr>
 8015c20:	9a04      	ldr	r2, [sp, #16]
 8015c22:	b9d8      	cbnz	r0, 8015c5c <_vfiprintf_r+0x12c>
 8015c24:	06d1      	lsls	r1, r2, #27
 8015c26:	bf44      	itt	mi
 8015c28:	2320      	movmi	r3, #32
 8015c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c2e:	0713      	lsls	r3, r2, #28
 8015c30:	bf44      	itt	mi
 8015c32:	232b      	movmi	r3, #43	; 0x2b
 8015c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c38:	f89a 3000 	ldrb.w	r3, [sl]
 8015c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8015c3e:	d015      	beq.n	8015c6c <_vfiprintf_r+0x13c>
 8015c40:	9a07      	ldr	r2, [sp, #28]
 8015c42:	4654      	mov	r4, sl
 8015c44:	2000      	movs	r0, #0
 8015c46:	f04f 0c0a 	mov.w	ip, #10
 8015c4a:	4621      	mov	r1, r4
 8015c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c50:	3b30      	subs	r3, #48	; 0x30
 8015c52:	2b09      	cmp	r3, #9
 8015c54:	d94e      	bls.n	8015cf4 <_vfiprintf_r+0x1c4>
 8015c56:	b1b0      	cbz	r0, 8015c86 <_vfiprintf_r+0x156>
 8015c58:	9207      	str	r2, [sp, #28]
 8015c5a:	e014      	b.n	8015c86 <_vfiprintf_r+0x156>
 8015c5c:	eba0 0308 	sub.w	r3, r0, r8
 8015c60:	fa09 f303 	lsl.w	r3, r9, r3
 8015c64:	4313      	orrs	r3, r2
 8015c66:	9304      	str	r3, [sp, #16]
 8015c68:	46a2      	mov	sl, r4
 8015c6a:	e7d2      	b.n	8015c12 <_vfiprintf_r+0xe2>
 8015c6c:	9b03      	ldr	r3, [sp, #12]
 8015c6e:	1d19      	adds	r1, r3, #4
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	9103      	str	r1, [sp, #12]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	bfbb      	ittet	lt
 8015c78:	425b      	neglt	r3, r3
 8015c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8015c7e:	9307      	strge	r3, [sp, #28]
 8015c80:	9307      	strlt	r3, [sp, #28]
 8015c82:	bfb8      	it	lt
 8015c84:	9204      	strlt	r2, [sp, #16]
 8015c86:	7823      	ldrb	r3, [r4, #0]
 8015c88:	2b2e      	cmp	r3, #46	; 0x2e
 8015c8a:	d10c      	bne.n	8015ca6 <_vfiprintf_r+0x176>
 8015c8c:	7863      	ldrb	r3, [r4, #1]
 8015c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8015c90:	d135      	bne.n	8015cfe <_vfiprintf_r+0x1ce>
 8015c92:	9b03      	ldr	r3, [sp, #12]
 8015c94:	1d1a      	adds	r2, r3, #4
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	9203      	str	r2, [sp, #12]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	bfb8      	it	lt
 8015c9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015ca2:	3402      	adds	r4, #2
 8015ca4:	9305      	str	r3, [sp, #20]
 8015ca6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015d8c <_vfiprintf_r+0x25c>
 8015caa:	7821      	ldrb	r1, [r4, #0]
 8015cac:	2203      	movs	r2, #3
 8015cae:	4650      	mov	r0, sl
 8015cb0:	f7ea faae 	bl	8000210 <memchr>
 8015cb4:	b140      	cbz	r0, 8015cc8 <_vfiprintf_r+0x198>
 8015cb6:	2340      	movs	r3, #64	; 0x40
 8015cb8:	eba0 000a 	sub.w	r0, r0, sl
 8015cbc:	fa03 f000 	lsl.w	r0, r3, r0
 8015cc0:	9b04      	ldr	r3, [sp, #16]
 8015cc2:	4303      	orrs	r3, r0
 8015cc4:	3401      	adds	r4, #1
 8015cc6:	9304      	str	r3, [sp, #16]
 8015cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ccc:	482c      	ldr	r0, [pc, #176]	; (8015d80 <_vfiprintf_r+0x250>)
 8015cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015cd2:	2206      	movs	r2, #6
 8015cd4:	f7ea fa9c 	bl	8000210 <memchr>
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	d03f      	beq.n	8015d5c <_vfiprintf_r+0x22c>
 8015cdc:	4b29      	ldr	r3, [pc, #164]	; (8015d84 <_vfiprintf_r+0x254>)
 8015cde:	bb1b      	cbnz	r3, 8015d28 <_vfiprintf_r+0x1f8>
 8015ce0:	9b03      	ldr	r3, [sp, #12]
 8015ce2:	3307      	adds	r3, #7
 8015ce4:	f023 0307 	bic.w	r3, r3, #7
 8015ce8:	3308      	adds	r3, #8
 8015cea:	9303      	str	r3, [sp, #12]
 8015cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cee:	443b      	add	r3, r7
 8015cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8015cf2:	e767      	b.n	8015bc4 <_vfiprintf_r+0x94>
 8015cf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8015cf8:	460c      	mov	r4, r1
 8015cfa:	2001      	movs	r0, #1
 8015cfc:	e7a5      	b.n	8015c4a <_vfiprintf_r+0x11a>
 8015cfe:	2300      	movs	r3, #0
 8015d00:	3401      	adds	r4, #1
 8015d02:	9305      	str	r3, [sp, #20]
 8015d04:	4619      	mov	r1, r3
 8015d06:	f04f 0c0a 	mov.w	ip, #10
 8015d0a:	4620      	mov	r0, r4
 8015d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d10:	3a30      	subs	r2, #48	; 0x30
 8015d12:	2a09      	cmp	r2, #9
 8015d14:	d903      	bls.n	8015d1e <_vfiprintf_r+0x1ee>
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d0c5      	beq.n	8015ca6 <_vfiprintf_r+0x176>
 8015d1a:	9105      	str	r1, [sp, #20]
 8015d1c:	e7c3      	b.n	8015ca6 <_vfiprintf_r+0x176>
 8015d1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d22:	4604      	mov	r4, r0
 8015d24:	2301      	movs	r3, #1
 8015d26:	e7f0      	b.n	8015d0a <_vfiprintf_r+0x1da>
 8015d28:	ab03      	add	r3, sp, #12
 8015d2a:	9300      	str	r3, [sp, #0]
 8015d2c:	462a      	mov	r2, r5
 8015d2e:	4b16      	ldr	r3, [pc, #88]	; (8015d88 <_vfiprintf_r+0x258>)
 8015d30:	a904      	add	r1, sp, #16
 8015d32:	4630      	mov	r0, r6
 8015d34:	f7fb fef0 	bl	8011b18 <_printf_float>
 8015d38:	4607      	mov	r7, r0
 8015d3a:	1c78      	adds	r0, r7, #1
 8015d3c:	d1d6      	bne.n	8015cec <_vfiprintf_r+0x1bc>
 8015d3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d40:	07d9      	lsls	r1, r3, #31
 8015d42:	d405      	bmi.n	8015d50 <_vfiprintf_r+0x220>
 8015d44:	89ab      	ldrh	r3, [r5, #12]
 8015d46:	059a      	lsls	r2, r3, #22
 8015d48:	d402      	bmi.n	8015d50 <_vfiprintf_r+0x220>
 8015d4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d4c:	f7fb fd98 	bl	8011880 <__retarget_lock_release_recursive>
 8015d50:	89ab      	ldrh	r3, [r5, #12]
 8015d52:	065b      	lsls	r3, r3, #25
 8015d54:	f53f af12 	bmi.w	8015b7c <_vfiprintf_r+0x4c>
 8015d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d5a:	e711      	b.n	8015b80 <_vfiprintf_r+0x50>
 8015d5c:	ab03      	add	r3, sp, #12
 8015d5e:	9300      	str	r3, [sp, #0]
 8015d60:	462a      	mov	r2, r5
 8015d62:	4b09      	ldr	r3, [pc, #36]	; (8015d88 <_vfiprintf_r+0x258>)
 8015d64:	a904      	add	r1, sp, #16
 8015d66:	4630      	mov	r0, r6
 8015d68:	f7fc f97a 	bl	8012060 <_printf_i>
 8015d6c:	e7e4      	b.n	8015d38 <_vfiprintf_r+0x208>
 8015d6e:	bf00      	nop
 8015d70:	08016390 	.word	0x08016390
 8015d74:	080163b0 	.word	0x080163b0
 8015d78:	08016370 	.word	0x08016370
 8015d7c:	080167c4 	.word	0x080167c4
 8015d80:	080167ce 	.word	0x080167ce
 8015d84:	08011b19 	.word	0x08011b19
 8015d88:	08015b0d 	.word	0x08015b0d
 8015d8c:	080167ca 	.word	0x080167ca

08015d90 <__swbuf_r>:
 8015d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d92:	460e      	mov	r6, r1
 8015d94:	4614      	mov	r4, r2
 8015d96:	4605      	mov	r5, r0
 8015d98:	b118      	cbz	r0, 8015da2 <__swbuf_r+0x12>
 8015d9a:	6983      	ldr	r3, [r0, #24]
 8015d9c:	b90b      	cbnz	r3, 8015da2 <__swbuf_r+0x12>
 8015d9e:	f7fb fcab 	bl	80116f8 <__sinit>
 8015da2:	4b21      	ldr	r3, [pc, #132]	; (8015e28 <__swbuf_r+0x98>)
 8015da4:	429c      	cmp	r4, r3
 8015da6:	d12b      	bne.n	8015e00 <__swbuf_r+0x70>
 8015da8:	686c      	ldr	r4, [r5, #4]
 8015daa:	69a3      	ldr	r3, [r4, #24]
 8015dac:	60a3      	str	r3, [r4, #8]
 8015dae:	89a3      	ldrh	r3, [r4, #12]
 8015db0:	071a      	lsls	r2, r3, #28
 8015db2:	d52f      	bpl.n	8015e14 <__swbuf_r+0x84>
 8015db4:	6923      	ldr	r3, [r4, #16]
 8015db6:	b36b      	cbz	r3, 8015e14 <__swbuf_r+0x84>
 8015db8:	6923      	ldr	r3, [r4, #16]
 8015dba:	6820      	ldr	r0, [r4, #0]
 8015dbc:	1ac0      	subs	r0, r0, r3
 8015dbe:	6963      	ldr	r3, [r4, #20]
 8015dc0:	b2f6      	uxtb	r6, r6
 8015dc2:	4283      	cmp	r3, r0
 8015dc4:	4637      	mov	r7, r6
 8015dc6:	dc04      	bgt.n	8015dd2 <__swbuf_r+0x42>
 8015dc8:	4621      	mov	r1, r4
 8015dca:	4628      	mov	r0, r5
 8015dcc:	f7fe fb68 	bl	80144a0 <_fflush_r>
 8015dd0:	bb30      	cbnz	r0, 8015e20 <__swbuf_r+0x90>
 8015dd2:	68a3      	ldr	r3, [r4, #8]
 8015dd4:	3b01      	subs	r3, #1
 8015dd6:	60a3      	str	r3, [r4, #8]
 8015dd8:	6823      	ldr	r3, [r4, #0]
 8015dda:	1c5a      	adds	r2, r3, #1
 8015ddc:	6022      	str	r2, [r4, #0]
 8015dde:	701e      	strb	r6, [r3, #0]
 8015de0:	6963      	ldr	r3, [r4, #20]
 8015de2:	3001      	adds	r0, #1
 8015de4:	4283      	cmp	r3, r0
 8015de6:	d004      	beq.n	8015df2 <__swbuf_r+0x62>
 8015de8:	89a3      	ldrh	r3, [r4, #12]
 8015dea:	07db      	lsls	r3, r3, #31
 8015dec:	d506      	bpl.n	8015dfc <__swbuf_r+0x6c>
 8015dee:	2e0a      	cmp	r6, #10
 8015df0:	d104      	bne.n	8015dfc <__swbuf_r+0x6c>
 8015df2:	4621      	mov	r1, r4
 8015df4:	4628      	mov	r0, r5
 8015df6:	f7fe fb53 	bl	80144a0 <_fflush_r>
 8015dfa:	b988      	cbnz	r0, 8015e20 <__swbuf_r+0x90>
 8015dfc:	4638      	mov	r0, r7
 8015dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e00:	4b0a      	ldr	r3, [pc, #40]	; (8015e2c <__swbuf_r+0x9c>)
 8015e02:	429c      	cmp	r4, r3
 8015e04:	d101      	bne.n	8015e0a <__swbuf_r+0x7a>
 8015e06:	68ac      	ldr	r4, [r5, #8]
 8015e08:	e7cf      	b.n	8015daa <__swbuf_r+0x1a>
 8015e0a:	4b09      	ldr	r3, [pc, #36]	; (8015e30 <__swbuf_r+0xa0>)
 8015e0c:	429c      	cmp	r4, r3
 8015e0e:	bf08      	it	eq
 8015e10:	68ec      	ldreq	r4, [r5, #12]
 8015e12:	e7ca      	b.n	8015daa <__swbuf_r+0x1a>
 8015e14:	4621      	mov	r1, r4
 8015e16:	4628      	mov	r0, r5
 8015e18:	f000 f80c 	bl	8015e34 <__swsetup_r>
 8015e1c:	2800      	cmp	r0, #0
 8015e1e:	d0cb      	beq.n	8015db8 <__swbuf_r+0x28>
 8015e20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015e24:	e7ea      	b.n	8015dfc <__swbuf_r+0x6c>
 8015e26:	bf00      	nop
 8015e28:	08016390 	.word	0x08016390
 8015e2c:	080163b0 	.word	0x080163b0
 8015e30:	08016370 	.word	0x08016370

08015e34 <__swsetup_r>:
 8015e34:	4b32      	ldr	r3, [pc, #200]	; (8015f00 <__swsetup_r+0xcc>)
 8015e36:	b570      	push	{r4, r5, r6, lr}
 8015e38:	681d      	ldr	r5, [r3, #0]
 8015e3a:	4606      	mov	r6, r0
 8015e3c:	460c      	mov	r4, r1
 8015e3e:	b125      	cbz	r5, 8015e4a <__swsetup_r+0x16>
 8015e40:	69ab      	ldr	r3, [r5, #24]
 8015e42:	b913      	cbnz	r3, 8015e4a <__swsetup_r+0x16>
 8015e44:	4628      	mov	r0, r5
 8015e46:	f7fb fc57 	bl	80116f8 <__sinit>
 8015e4a:	4b2e      	ldr	r3, [pc, #184]	; (8015f04 <__swsetup_r+0xd0>)
 8015e4c:	429c      	cmp	r4, r3
 8015e4e:	d10f      	bne.n	8015e70 <__swsetup_r+0x3c>
 8015e50:	686c      	ldr	r4, [r5, #4]
 8015e52:	89a3      	ldrh	r3, [r4, #12]
 8015e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e58:	0719      	lsls	r1, r3, #28
 8015e5a:	d42c      	bmi.n	8015eb6 <__swsetup_r+0x82>
 8015e5c:	06dd      	lsls	r5, r3, #27
 8015e5e:	d411      	bmi.n	8015e84 <__swsetup_r+0x50>
 8015e60:	2309      	movs	r3, #9
 8015e62:	6033      	str	r3, [r6, #0]
 8015e64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015e68:	81a3      	strh	r3, [r4, #12]
 8015e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e6e:	e03e      	b.n	8015eee <__swsetup_r+0xba>
 8015e70:	4b25      	ldr	r3, [pc, #148]	; (8015f08 <__swsetup_r+0xd4>)
 8015e72:	429c      	cmp	r4, r3
 8015e74:	d101      	bne.n	8015e7a <__swsetup_r+0x46>
 8015e76:	68ac      	ldr	r4, [r5, #8]
 8015e78:	e7eb      	b.n	8015e52 <__swsetup_r+0x1e>
 8015e7a:	4b24      	ldr	r3, [pc, #144]	; (8015f0c <__swsetup_r+0xd8>)
 8015e7c:	429c      	cmp	r4, r3
 8015e7e:	bf08      	it	eq
 8015e80:	68ec      	ldreq	r4, [r5, #12]
 8015e82:	e7e6      	b.n	8015e52 <__swsetup_r+0x1e>
 8015e84:	0758      	lsls	r0, r3, #29
 8015e86:	d512      	bpl.n	8015eae <__swsetup_r+0x7a>
 8015e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e8a:	b141      	cbz	r1, 8015e9e <__swsetup_r+0x6a>
 8015e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e90:	4299      	cmp	r1, r3
 8015e92:	d002      	beq.n	8015e9a <__swsetup_r+0x66>
 8015e94:	4630      	mov	r0, r6
 8015e96:	f7ff fbc3 	bl	8015620 <_free_r>
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8015e9e:	89a3      	ldrh	r3, [r4, #12]
 8015ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015ea4:	81a3      	strh	r3, [r4, #12]
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	6063      	str	r3, [r4, #4]
 8015eaa:	6923      	ldr	r3, [r4, #16]
 8015eac:	6023      	str	r3, [r4, #0]
 8015eae:	89a3      	ldrh	r3, [r4, #12]
 8015eb0:	f043 0308 	orr.w	r3, r3, #8
 8015eb4:	81a3      	strh	r3, [r4, #12]
 8015eb6:	6923      	ldr	r3, [r4, #16]
 8015eb8:	b94b      	cbnz	r3, 8015ece <__swsetup_r+0x9a>
 8015eba:	89a3      	ldrh	r3, [r4, #12]
 8015ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015ec4:	d003      	beq.n	8015ece <__swsetup_r+0x9a>
 8015ec6:	4621      	mov	r1, r4
 8015ec8:	4630      	mov	r0, r6
 8015eca:	f000 f84d 	bl	8015f68 <__smakebuf_r>
 8015ece:	89a0      	ldrh	r0, [r4, #12]
 8015ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015ed4:	f010 0301 	ands.w	r3, r0, #1
 8015ed8:	d00a      	beq.n	8015ef0 <__swsetup_r+0xbc>
 8015eda:	2300      	movs	r3, #0
 8015edc:	60a3      	str	r3, [r4, #8]
 8015ede:	6963      	ldr	r3, [r4, #20]
 8015ee0:	425b      	negs	r3, r3
 8015ee2:	61a3      	str	r3, [r4, #24]
 8015ee4:	6923      	ldr	r3, [r4, #16]
 8015ee6:	b943      	cbnz	r3, 8015efa <__swsetup_r+0xc6>
 8015ee8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015eec:	d1ba      	bne.n	8015e64 <__swsetup_r+0x30>
 8015eee:	bd70      	pop	{r4, r5, r6, pc}
 8015ef0:	0781      	lsls	r1, r0, #30
 8015ef2:	bf58      	it	pl
 8015ef4:	6963      	ldrpl	r3, [r4, #20]
 8015ef6:	60a3      	str	r3, [r4, #8]
 8015ef8:	e7f4      	b.n	8015ee4 <__swsetup_r+0xb0>
 8015efa:	2000      	movs	r0, #0
 8015efc:	e7f7      	b.n	8015eee <__swsetup_r+0xba>
 8015efe:	bf00      	nop
 8015f00:	20000010 	.word	0x20000010
 8015f04:	08016390 	.word	0x08016390
 8015f08:	080163b0 	.word	0x080163b0
 8015f0c:	08016370 	.word	0x08016370

08015f10 <abort>:
 8015f10:	b508      	push	{r3, lr}
 8015f12:	2006      	movs	r0, #6
 8015f14:	f000 f898 	bl	8016048 <raise>
 8015f18:	2001      	movs	r0, #1
 8015f1a:	f7ec f8cf 	bl	80020bc <_exit>

08015f1e <__swhatbuf_r>:
 8015f1e:	b570      	push	{r4, r5, r6, lr}
 8015f20:	460e      	mov	r6, r1
 8015f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f26:	2900      	cmp	r1, #0
 8015f28:	b096      	sub	sp, #88	; 0x58
 8015f2a:	4614      	mov	r4, r2
 8015f2c:	461d      	mov	r5, r3
 8015f2e:	da08      	bge.n	8015f42 <__swhatbuf_r+0x24>
 8015f30:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015f34:	2200      	movs	r2, #0
 8015f36:	602a      	str	r2, [r5, #0]
 8015f38:	061a      	lsls	r2, r3, #24
 8015f3a:	d410      	bmi.n	8015f5e <__swhatbuf_r+0x40>
 8015f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015f40:	e00e      	b.n	8015f60 <__swhatbuf_r+0x42>
 8015f42:	466a      	mov	r2, sp
 8015f44:	f000 f89c 	bl	8016080 <_fstat_r>
 8015f48:	2800      	cmp	r0, #0
 8015f4a:	dbf1      	blt.n	8015f30 <__swhatbuf_r+0x12>
 8015f4c:	9a01      	ldr	r2, [sp, #4]
 8015f4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015f52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015f56:	425a      	negs	r2, r3
 8015f58:	415a      	adcs	r2, r3
 8015f5a:	602a      	str	r2, [r5, #0]
 8015f5c:	e7ee      	b.n	8015f3c <__swhatbuf_r+0x1e>
 8015f5e:	2340      	movs	r3, #64	; 0x40
 8015f60:	2000      	movs	r0, #0
 8015f62:	6023      	str	r3, [r4, #0]
 8015f64:	b016      	add	sp, #88	; 0x58
 8015f66:	bd70      	pop	{r4, r5, r6, pc}

08015f68 <__smakebuf_r>:
 8015f68:	898b      	ldrh	r3, [r1, #12]
 8015f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015f6c:	079d      	lsls	r5, r3, #30
 8015f6e:	4606      	mov	r6, r0
 8015f70:	460c      	mov	r4, r1
 8015f72:	d507      	bpl.n	8015f84 <__smakebuf_r+0x1c>
 8015f74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015f78:	6023      	str	r3, [r4, #0]
 8015f7a:	6123      	str	r3, [r4, #16]
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	6163      	str	r3, [r4, #20]
 8015f80:	b002      	add	sp, #8
 8015f82:	bd70      	pop	{r4, r5, r6, pc}
 8015f84:	ab01      	add	r3, sp, #4
 8015f86:	466a      	mov	r2, sp
 8015f88:	f7ff ffc9 	bl	8015f1e <__swhatbuf_r>
 8015f8c:	9900      	ldr	r1, [sp, #0]
 8015f8e:	4605      	mov	r5, r0
 8015f90:	4630      	mov	r0, r6
 8015f92:	f7fb fcad 	bl	80118f0 <_malloc_r>
 8015f96:	b948      	cbnz	r0, 8015fac <__smakebuf_r+0x44>
 8015f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f9c:	059a      	lsls	r2, r3, #22
 8015f9e:	d4ef      	bmi.n	8015f80 <__smakebuf_r+0x18>
 8015fa0:	f023 0303 	bic.w	r3, r3, #3
 8015fa4:	f043 0302 	orr.w	r3, r3, #2
 8015fa8:	81a3      	strh	r3, [r4, #12]
 8015faa:	e7e3      	b.n	8015f74 <__smakebuf_r+0xc>
 8015fac:	4b0d      	ldr	r3, [pc, #52]	; (8015fe4 <__smakebuf_r+0x7c>)
 8015fae:	62b3      	str	r3, [r6, #40]	; 0x28
 8015fb0:	89a3      	ldrh	r3, [r4, #12]
 8015fb2:	6020      	str	r0, [r4, #0]
 8015fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fb8:	81a3      	strh	r3, [r4, #12]
 8015fba:	9b00      	ldr	r3, [sp, #0]
 8015fbc:	6163      	str	r3, [r4, #20]
 8015fbe:	9b01      	ldr	r3, [sp, #4]
 8015fc0:	6120      	str	r0, [r4, #16]
 8015fc2:	b15b      	cbz	r3, 8015fdc <__smakebuf_r+0x74>
 8015fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015fc8:	4630      	mov	r0, r6
 8015fca:	f000 f86b 	bl	80160a4 <_isatty_r>
 8015fce:	b128      	cbz	r0, 8015fdc <__smakebuf_r+0x74>
 8015fd0:	89a3      	ldrh	r3, [r4, #12]
 8015fd2:	f023 0303 	bic.w	r3, r3, #3
 8015fd6:	f043 0301 	orr.w	r3, r3, #1
 8015fda:	81a3      	strh	r3, [r4, #12]
 8015fdc:	89a0      	ldrh	r0, [r4, #12]
 8015fde:	4305      	orrs	r5, r0
 8015fe0:	81a5      	strh	r5, [r4, #12]
 8015fe2:	e7cd      	b.n	8015f80 <__smakebuf_r+0x18>
 8015fe4:	08011691 	.word	0x08011691

08015fe8 <_malloc_usable_size_r>:
 8015fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fec:	1f18      	subs	r0, r3, #4
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	bfbc      	itt	lt
 8015ff2:	580b      	ldrlt	r3, [r1, r0]
 8015ff4:	18c0      	addlt	r0, r0, r3
 8015ff6:	4770      	bx	lr

08015ff8 <_raise_r>:
 8015ff8:	291f      	cmp	r1, #31
 8015ffa:	b538      	push	{r3, r4, r5, lr}
 8015ffc:	4604      	mov	r4, r0
 8015ffe:	460d      	mov	r5, r1
 8016000:	d904      	bls.n	801600c <_raise_r+0x14>
 8016002:	2316      	movs	r3, #22
 8016004:	6003      	str	r3, [r0, #0]
 8016006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801600a:	bd38      	pop	{r3, r4, r5, pc}
 801600c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801600e:	b112      	cbz	r2, 8016016 <_raise_r+0x1e>
 8016010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016014:	b94b      	cbnz	r3, 801602a <_raise_r+0x32>
 8016016:	4620      	mov	r0, r4
 8016018:	f000 f830 	bl	801607c <_getpid_r>
 801601c:	462a      	mov	r2, r5
 801601e:	4601      	mov	r1, r0
 8016020:	4620      	mov	r0, r4
 8016022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016026:	f000 b817 	b.w	8016058 <_kill_r>
 801602a:	2b01      	cmp	r3, #1
 801602c:	d00a      	beq.n	8016044 <_raise_r+0x4c>
 801602e:	1c59      	adds	r1, r3, #1
 8016030:	d103      	bne.n	801603a <_raise_r+0x42>
 8016032:	2316      	movs	r3, #22
 8016034:	6003      	str	r3, [r0, #0]
 8016036:	2001      	movs	r0, #1
 8016038:	e7e7      	b.n	801600a <_raise_r+0x12>
 801603a:	2400      	movs	r4, #0
 801603c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016040:	4628      	mov	r0, r5
 8016042:	4798      	blx	r3
 8016044:	2000      	movs	r0, #0
 8016046:	e7e0      	b.n	801600a <_raise_r+0x12>

08016048 <raise>:
 8016048:	4b02      	ldr	r3, [pc, #8]	; (8016054 <raise+0xc>)
 801604a:	4601      	mov	r1, r0
 801604c:	6818      	ldr	r0, [r3, #0]
 801604e:	f7ff bfd3 	b.w	8015ff8 <_raise_r>
 8016052:	bf00      	nop
 8016054:	20000010 	.word	0x20000010

08016058 <_kill_r>:
 8016058:	b538      	push	{r3, r4, r5, lr}
 801605a:	4d07      	ldr	r5, [pc, #28]	; (8016078 <_kill_r+0x20>)
 801605c:	2300      	movs	r3, #0
 801605e:	4604      	mov	r4, r0
 8016060:	4608      	mov	r0, r1
 8016062:	4611      	mov	r1, r2
 8016064:	602b      	str	r3, [r5, #0]
 8016066:	f7ec f819 	bl	800209c <_kill>
 801606a:	1c43      	adds	r3, r0, #1
 801606c:	d102      	bne.n	8016074 <_kill_r+0x1c>
 801606e:	682b      	ldr	r3, [r5, #0]
 8016070:	b103      	cbz	r3, 8016074 <_kill_r+0x1c>
 8016072:	6023      	str	r3, [r4, #0]
 8016074:	bd38      	pop	{r3, r4, r5, pc}
 8016076:	bf00      	nop
 8016078:	20002714 	.word	0x20002714

0801607c <_getpid_r>:
 801607c:	f7ec b806 	b.w	800208c <_getpid>

08016080 <_fstat_r>:
 8016080:	b538      	push	{r3, r4, r5, lr}
 8016082:	4d07      	ldr	r5, [pc, #28]	; (80160a0 <_fstat_r+0x20>)
 8016084:	2300      	movs	r3, #0
 8016086:	4604      	mov	r4, r0
 8016088:	4608      	mov	r0, r1
 801608a:	4611      	mov	r1, r2
 801608c:	602b      	str	r3, [r5, #0]
 801608e:	f7ec f864 	bl	800215a <_fstat>
 8016092:	1c43      	adds	r3, r0, #1
 8016094:	d102      	bne.n	801609c <_fstat_r+0x1c>
 8016096:	682b      	ldr	r3, [r5, #0]
 8016098:	b103      	cbz	r3, 801609c <_fstat_r+0x1c>
 801609a:	6023      	str	r3, [r4, #0]
 801609c:	bd38      	pop	{r3, r4, r5, pc}
 801609e:	bf00      	nop
 80160a0:	20002714 	.word	0x20002714

080160a4 <_isatty_r>:
 80160a4:	b538      	push	{r3, r4, r5, lr}
 80160a6:	4d06      	ldr	r5, [pc, #24]	; (80160c0 <_isatty_r+0x1c>)
 80160a8:	2300      	movs	r3, #0
 80160aa:	4604      	mov	r4, r0
 80160ac:	4608      	mov	r0, r1
 80160ae:	602b      	str	r3, [r5, #0]
 80160b0:	f7ec f863 	bl	800217a <_isatty>
 80160b4:	1c43      	adds	r3, r0, #1
 80160b6:	d102      	bne.n	80160be <_isatty_r+0x1a>
 80160b8:	682b      	ldr	r3, [r5, #0]
 80160ba:	b103      	cbz	r3, 80160be <_isatty_r+0x1a>
 80160bc:	6023      	str	r3, [r4, #0]
 80160be:	bd38      	pop	{r3, r4, r5, pc}
 80160c0:	20002714 	.word	0x20002714

080160c4 <_init>:
 80160c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160c6:	bf00      	nop
 80160c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160ca:	bc08      	pop	{r3}
 80160cc:	469e      	mov	lr, r3
 80160ce:	4770      	bx	lr

080160d0 <_fini>:
 80160d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160d2:	bf00      	nop
 80160d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160d6:	bc08      	pop	{r3}
 80160d8:	469e      	mov	lr, r3
 80160da:	4770      	bx	lr
