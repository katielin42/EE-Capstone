
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015abc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  08015c80  08015c80  00025c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801630c  0801630c  000301f8  2**0
                  CONTENTS
  4 .ARM          00000000  0801630c  0801630c  000301f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801630c  0801630c  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801630c  0801630c  0002630c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016310  08016310  00026310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08016314  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a50  200001f8  0801650c  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20005c48  0801650c  00035c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031527  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006480  00000000  00000000  0006174f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002938  00000000  00000000  00067bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002660  00000000  00000000  0006a508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b417  00000000  00000000  0006cb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000337a8  00000000  00000000  000a7f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00152503  00000000  00000000  000db727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022dc2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c48c  00000000  00000000  0022dc7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08015c64 	.word	0x08015c64

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	08015c64 	.word	0x08015c64

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <ADC_Init>:
/* USER CODE BEGIN PV */



//initialize ADC thread
void ADC_Init(void *argument) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *hadc = argument;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]
	ADC_semHandle = osSemaphoreNew(1, 1, &ADC_sem_attributes);
 8000d30:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <ADC_Init+0x30>)
 8000d32:	2101      	movs	r1, #1
 8000d34:	2001      	movs	r0, #1
 8000d36:	f00c fe83 	bl	800da40 <osSemaphoreNew>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <ADC_Init+0x34>)
 8000d3e:	6013      	str	r3, [r2, #0]
	//start to collect ADC signals into ADC buffer through the DMA
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_buffer_raw, 9);
 8000d40:	2209      	movs	r2, #9
 8000d42:	4906      	ldr	r1, [pc, #24]	; (8000d5c <ADC_Init+0x38>)
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f001 fe7b 	bl	8002a40 <HAL_ADC_Start_DMA>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08015d14 	.word	0x08015d14
 8000d58:	20000234 	.word	0x20000234
 8000d5c:	20000214 	.word	0x20000214

08000d60 <HAL_ADC_ConvCpltCallback>:

//since ADC 1 has 3 pins we are getting data from, our adc buffer raw has space for 9 values
//aka 3x of adc pins.
//We average out the 3 ADC values for each pin
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	// average the ADC values from 3 consecutive samples and convert them into the analog values with the formula (VREF-GND)/ADC_BIT_RESOLUTION
	//// analog values from adc bit sample = (VREF-GND)*ADC_bits/4095
	for(int i = 0 ; i < 3; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	e039      	b.n	8000de2 <HAL_ADC_ConvCpltCallback+0x82>
		ADC_buffer_processed[i] = ((vref-gnd)/adc_reso)*(((float)ADC_buffer_raw[0 + i] + ADC_buffer_raw[3 + i] + ADC_buffer_raw[6 + i])/3);
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <HAL_ADC_ConvCpltCallback+0x9c>)
 8000d70:	ed93 7a00 	vldr	s14, [r3]
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000d76:	edd3 7a00 	vldr	s15, [r3]
 8000d7a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d88:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d90:	ee07 3a90 	vmov	s15, r3
 8000d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3303      	adds	r3, #3
 8000d9c:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000daa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3306      	adds	r3, #6
 8000db2:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000dc4:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8000dc8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_ADC_ConvCpltCallback+0xac>)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0 ; i < 3; i++) {
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3301      	adds	r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	ddc2      	ble.n	8000d6e <HAL_ADC_ConvCpltCallback+0xe>
	}
	osSemaphoreRelease(ADC_semHandle);
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f00c ff03 	bl	800dbf8 <osSemaphoreRelease>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000288 	.word	0x20000288
 8000e04:	20000004 	.word	0x20000004
 8000e08:	20000214 	.word	0x20000214
 8000e0c:	20000228 	.word	0x20000228
 8000e10:	20000234 	.word	0x20000234

08000e14 <state_machine_init>:

void controller_state_machine(void *args);



void state_machine_init(void){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	thr_1 = osThreadNew(controller_state_machine, &hadc1, &thr_1_attributes);
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <state_machine_init+0x18>)
 8000e1a:	4905      	ldr	r1, [pc, #20]	; (8000e30 <state_machine_init+0x1c>)
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <state_machine_init+0x20>)
 8000e1e:	f00c fc2e 	bl	800d67e <osThreadNew>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <state_machine_init+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	08015d24 	.word	0x08015d24
 8000e30:	200002a8 	.word	0x200002a8
 8000e34:	08000e3d 	.word	0x08000e3d
 8000e38:	2000028c 	.word	0x2000028c

08000e3c <controller_state_machine>:



void controller_state_machine(void *args){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	6078      	str	r0, [r7, #4]
	SD_init();
 8000e44:	f000 fd10 	bl	8001868 <SD_init>


//	SD_process(yourmom, &ADC_P0, sizeof(ADC_P0));
	  for(;;)
	  {
		  osSemaphoreAcquire(ADC_semHandle, 1);
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <controller_state_machine+0x5c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f00c fe80 	bl	800db54 <osSemaphoreAcquire>
		  ADC_P0=ADC_buffer_processed[0];
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <controller_state_machine+0x60>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <controller_state_machine+0x64>)
 8000e5a:	6013      	str	r3, [r2, #0]
		  int n = snprintf(buffer, sizeof(buffer), "PA0 Value is: %1.2f\n", ADC_P0);
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <controller_state_machine+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fb89 	bl	8000578 <__aeabi_f2d>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	e9cd 2300 	strd	r2, r3, [sp]
 8000e6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <controller_state_machine+0x68>)
 8000e70:	2114      	movs	r1, #20
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <controller_state_machine+0x6c>)
 8000e74:	f011 fa7a 	bl	801236c <sniprintf>
 8000e78:	60f8      	str	r0, [r7, #12]
		  osDelay(1000);
 8000e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e7e:	f00c fc90 	bl	800d7a2 <osDelay>
		  SD_process(yourmom, buffer, n);
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <controller_state_machine+0x6c>)
 8000e86:	4809      	ldr	r0, [pc, #36]	; (8000eac <controller_state_machine+0x70>)
 8000e88:	f000 fd14 	bl	80018b4 <SD_process>
	      osDelay(1000);
 8000e8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e90:	f00c fc87 	bl	800d7a2 <osDelay>
	  {
 8000e94:	e7d8      	b.n	8000e48 <controller_state_machine+0xc>
 8000e96:	bf00      	nop
 8000e98:	20000234 	.word	0x20000234
 8000e9c:	20000228 	.word	0x20000228
 8000ea0:	20000290 	.word	0x20000290
 8000ea4:	08015c94 	.word	0x08015c94
 8000ea8:	20000294 	.word	0x20000294
 8000eac:	20000008 	.word	0x20000008

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f001 fa2d 	bl	8002312 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f82c 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f000 fa66 	bl	800138c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec0:	f000 f9d4 	bl	800126c <MX_DMA_Init>
  MX_FMC_Init();
 8000ec4:	f000 f9fc 	bl	80012c0 <MX_FMC_Init>
  MX_I2C1_Init();
 8000ec8:	f000 f930 	bl	800112c <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8000ecc:	f000 f96e 	bl	80011ac <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000ed0:	f000 f98e 	bl	80011f0 <MX_SPI2_Init>
  MX_CAN1_Init();
 8000ed4:	f000 f8f4 	bl	80010c0 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000ed8:	f000 f86a 	bl	8000fb0 <MX_ADC1_Init>
  MX_FATFS_Init();
 8000edc:	f009 f9c8 	bl	800a270 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ee0:	f00c fb4c 	bl	800d57c <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <main+0x54>)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <main+0x58>)
 8000eea:	f00c fbc8 	bl	800d67e <osThreadNew>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <main+0x5c>)
 8000ef2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ADC_Init(&hadc1);
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <main+0x60>)
 8000ef6:	f7ff ff15 	bl	8000d24 <ADC_Init>

  state_machine_init();
 8000efa:	f7ff ff8b 	bl	8000e14 <state_machine_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000efe:	f00c fb83 	bl	800d608 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <main+0x52>
 8000f04:	08015d48 	.word	0x08015d48
 8000f08:	08001829 	.word	0x08001829
 8000f0c:	20000520 	.word	0x20000520
 8000f10:	200002a8 	.word	0x200002a8

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b096      	sub	sp, #88	; 0x58
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2244      	movs	r2, #68	; 0x44
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f010 fa8b 	bl	801143e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000f36:	2000      	movs	r0, #0
 8000f38:	f003 fc78 	bl	800482c <HAL_PWREx_ControlVoltageScaling>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000f42:	f000 fc8b 	bl	800185c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f46:	2301      	movs	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f54:	2303      	movs	r3, #3
 8000f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000f5c:	231e      	movs	r3, #30
 8000f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 fd0f 	bl	8004994 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000f7c:	f000 fc6e 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2303      	movs	r3, #3
 8000f86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	2105      	movs	r1, #5
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 f915 	bl	80051c8 <HAL_RCC_ClockConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fa4:	f000 fc5a 	bl	800185c <Error_Handler>
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3758      	adds	r7, #88	; 0x58
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fc6:	4b39      	ldr	r3, [pc, #228]	; (80010ac <MX_ADC1_Init+0xfc>)
 8000fc8:	4a39      	ldr	r2, [pc, #228]	; (80010b0 <MX_ADC1_Init+0x100>)
 8000fca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000fcc:	4b37      	ldr	r3, [pc, #220]	; (80010ac <MX_ADC1_Init+0xfc>)
 8000fce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd4:	4b35      	ldr	r3, [pc, #212]	; (80010ac <MX_ADC1_Init+0xfc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fda:	4b34      	ldr	r3, [pc, #208]	; (80010ac <MX_ADC1_Init+0xfc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <MX_ADC1_Init+0xfc>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fe6:	4b31      	ldr	r3, [pc, #196]	; (80010ac <MX_ADC1_Init+0xfc>)
 8000fe8:	2208      	movs	r2, #8
 8000fea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <MX_ADC1_Init+0xfc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <MX_ADC1_Init+0xfc>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <MX_ADC1_Init+0xfc>)
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <MX_ADC1_Init+0xfc>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001006:	4b29      	ldr	r3, [pc, #164]	; (80010ac <MX_ADC1_Init+0xfc>)
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <MX_ADC1_Init+0xfc>)
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <MX_ADC1_Init+0xfc>)
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <MX_ADC1_Init+0xfc>)
 800101c:	2200      	movs	r2, #0
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MX_ADC1_Init+0xfc>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <MX_ADC1_Init+0xfc>)
 800102a:	2204      	movs	r2, #4
 800102c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102e:	481f      	ldr	r0, [pc, #124]	; (80010ac <MX_ADC1_Init+0xfc>)
 8001030:	f001 fbba 	bl	80027a8 <HAL_ADC_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800103a:	f000 fc0f 	bl	800185c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_ADC1_Init+0x104>)
 8001040:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001042:	2306      	movs	r3, #6
 8001044:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001046:	2305      	movs	r3, #5
 8001048:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800104a:	237f      	movs	r3, #127	; 0x7f
 800104c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800104e:	2304      	movs	r3, #4
 8001050:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4814      	ldr	r0, [pc, #80]	; (80010ac <MX_ADC1_Init+0xfc>)
 800105c:	f001 ff46 	bl	8002eec <HAL_ADC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8001066:	f000 fbf9 	bl	800185c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_ADC1_Init+0x108>)
 800106c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800106e:	230c      	movs	r3, #12
 8001070:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_ADC1_Init+0xfc>)
 8001078:	f001 ff38 	bl	8002eec <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8001082:	f000 fbeb 	bl	800185c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <MX_ADC1_Init+0x10c>)
 8001088:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800108a:	2312      	movs	r3, #18
 800108c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_ADC1_Init+0xfc>)
 8001094:	f001 ff2a 	bl	8002eec <HAL_ADC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800109e:	f000 fbdd 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200002a8 	.word	0x200002a8
 80010b0:	50040000 	.word	0x50040000
 80010b4:	14f00020 	.word	0x14f00020
 80010b8:	19200040 	.word	0x19200040
 80010bc:	1d500080 	.word	0x1d500080

080010c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_CAN1_Init+0x64>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_CAN1_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_CAN1_Init+0x64>)
 80010cc:	2214      	movs	r2, #20
 80010ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_CAN1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_CAN1_Init+0x64>)
 80010de:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80010e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_CAN1_Init+0x64>)
 80010e6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80010ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <MX_CAN1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_CAN1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_CAN1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_CAN1_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_CAN1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_CAN1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_CAN1_Init+0x64>)
 8001112:	f002 fc33 	bl	800397c <HAL_CAN_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800111c:	f000 fb9e 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000370 	.word	0x20000370
 8001128:	40006400 	.word	0x40006400

0800112c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <MX_I2C1_Init+0x78>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <MX_I2C1_Init+0x7c>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_I2C1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001144:	2201      	movs	r2, #1
 8001146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_I2C1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001166:	480e      	ldr	r0, [pc, #56]	; (80011a0 <MX_I2C1_Init+0x74>)
 8001168:	f003 fa1a 	bl	80045a0 <HAL_I2C_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001172:	f000 fb73 	bl	800185c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <MX_I2C1_Init+0x74>)
 800117a:	f003 faa0 	bl	80046be <HAL_I2CEx_ConfigAnalogFilter>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001184:	f000 fb6a 	bl	800185c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001188:	2100      	movs	r1, #0
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_I2C1_Init+0x74>)
 800118c:	f003 fae2 	bl	8004754 <HAL_I2CEx_ConfigDigitalFilter>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001196:	f000 fb61 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000398 	.word	0x20000398
 80011a4:	40005400 	.word	0x40005400
 80011a8:	307075b1 	.word	0x307075b1

080011ac <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <MX_SDMMC1_SD_Init+0x3c>)
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <MX_SDMMC1_SD_Init+0x40>)
 80011b4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_SDMMC1_SD_Init+0x3c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_SDMMC1_SD_Init+0x3c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_SDMMC1_SD_Init+0x3c>)
 80011c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_SDMMC1_SD_Init+0x3c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <MX_SDMMC1_SD_Init+0x3c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <MX_SDMMC1_SD_Init+0x3c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200003ec 	.word	0x200003ec
 80011ec:	50062400 	.word	0x50062400

080011f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_SPI2_Init+0x74>)
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <MX_SPI2_Init+0x78>)
 80011f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_SPI2_Init+0x74>)
 80011fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001200:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_SPI2_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_SPI2_Init+0x74>)
 800120a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800120e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_SPI2_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_SPI2_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_SPI2_Init+0x74>)
 800121e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001222:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_SPI2_Init+0x74>)
 8001226:	2208      	movs	r2, #8
 8001228:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_SPI2_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_SPI2_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_SPI2_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_SPI2_Init+0x74>)
 800123e:	2207      	movs	r2, #7
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_SPI2_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_SPI2_Init+0x74>)
 800124a:	2208      	movs	r2, #8
 800124c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_SPI2_Init+0x74>)
 8001250:	f007 fd45 	bl	8008cde <HAL_SPI_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800125a:	f000 faff 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000046c 	.word	0x2000046c
 8001268:	40003800 	.word	0x40003800

0800126c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_DMA_Init+0x50>)
 8001274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001276:	4a11      	ldr	r2, [pc, #68]	; (80012bc <MX_DMA_Init+0x50>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	6493      	str	r3, [r2, #72]	; 0x48
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_DMA_Init+0x50>)
 8001280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_DMA_Init+0x50>)
 800128c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <MX_DMA_Init+0x50>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6493      	str	r3, [r2, #72]	; 0x48
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_DMA_Init+0x50>)
 8001298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2105      	movs	r1, #5
 80012a6:	200e      	movs	r0, #14
 80012a8:	f002 fd1c 	bl	8003ce4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80012ac:	200e      	movs	r0, #14
 80012ae:	f002 fd35 	bl	8003d1c <HAL_NVIC_EnableIRQ>

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000

080012c0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2220      	movs	r2, #32
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f010 f8b6 	bl	801143e <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <MX_FMC_Init+0xc4>)
 80012d4:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012d8:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <MX_FMC_Init+0xc4>)
 80012dc:	4a2a      	ldr	r2, [pc, #168]	; (8001388 <MX_FMC_Init+0xc8>)
 80012de:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80012e0:	4b28      	ldr	r3, [pc, #160]	; (8001384 <MX_FMC_Init+0xc4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <MX_FMC_Init+0xc4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80012ec:	4b25      	ldr	r3, [pc, #148]	; (8001384 <MX_FMC_Init+0xc4>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <MX_FMC_Init+0xc4>)
 80012f4:	2210      	movs	r2, #16
 80012f6:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_FMC_Init+0xc4>)
 80012fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_FMC_Init+0xc4>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_FMC_Init+0xc4>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_FMC_Init+0xc4>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_FMC_Init+0xc4>)
 8001314:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_FMC_Init+0xc4>)
 800131c:	2200      	movs	r2, #0
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_FMC_Init+0xc4>)
 8001322:	2200      	movs	r2, #0
 8001324:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_FMC_Init+0xc4>)
 8001328:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800132c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_FMC_Init+0xc4>)
 8001330:	2200      	movs	r2, #0
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_FMC_Init+0xc4>)
 8001336:	2200      	movs	r2, #0
 8001338:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_FMC_Init+0xc4>)
 800133c:	2200      	movs	r2, #0
 800133e:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <MX_FMC_Init+0xc4>)
 8001342:	2200      	movs	r2, #0
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001346:	230f      	movs	r3, #15
 8001348:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800134a:	230f      	movs	r3, #15
 800134c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800134e:	23ff      	movs	r3, #255	; 0xff
 8001350:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001356:	230f      	movs	r3, #15
 8001358:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800135a:	2310      	movs	r3, #16
 800135c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_FMC_Init+0xc4>)
 800136e:	f007 fd59 	bl	8008e24 <HAL_SRAM_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8001378:	f000 fa70 	bl	800185c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200004d0 	.word	0x200004d0
 8001388:	a0000104 	.word	0xa0000104

0800138c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	; 0x38
 8001390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013a2:	4bb2      	ldr	r3, [pc, #712]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4ab1      	ldr	r2, [pc, #708]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4baf      	ldr	r3, [pc, #700]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	623b      	str	r3, [r7, #32]
 80013b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	4bac      	ldr	r3, [pc, #688]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4aab      	ldr	r2, [pc, #684]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4ba9      	ldr	r3, [pc, #676]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d2:	4ba6      	ldr	r3, [pc, #664]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4aa5      	ldr	r2, [pc, #660]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4ba3      	ldr	r3, [pc, #652]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4ba0      	ldr	r3, [pc, #640]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a9f      	ldr	r2, [pc, #636]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b9d      	ldr	r3, [pc, #628]	; (800166c <MX_GPIO_Init+0x2e0>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b9a      	ldr	r3, [pc, #616]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a99      	ldr	r2, [pc, #612]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b97      	ldr	r3, [pc, #604]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800141a:	4b94      	ldr	r3, [pc, #592]	; (800166c <MX_GPIO_Init+0x2e0>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a93      	ldr	r2, [pc, #588]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b91      	ldr	r3, [pc, #580]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001432:	f003 fa9f 	bl	8004974 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	4b8d      	ldr	r3, [pc, #564]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a8c      	ldr	r2, [pc, #560]	; (800166c <MX_GPIO_Init+0x2e0>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b8a      	ldr	r3, [pc, #552]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b87      	ldr	r3, [pc, #540]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a86      	ldr	r2, [pc, #536]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b84      	ldr	r3, [pc, #528]	; (800166c <MX_GPIO_Init+0x2e0>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001466:	4b81      	ldr	r3, [pc, #516]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a80      	ldr	r2, [pc, #512]	; (800166c <MX_GPIO_Init+0x2e0>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b7e      	ldr	r3, [pc, #504]	; (800166c <MX_GPIO_Init+0x2e0>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	f244 0114 	movw	r1, #16404	; 0x4014
 8001484:	487a      	ldr	r0, [pc, #488]	; (8001670 <MX_GPIO_Init+0x2e4>)
 8001486:	f003 f873 	bl	8004570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001490:	4878      	ldr	r0, [pc, #480]	; (8001674 <MX_GPIO_Init+0x2e8>)
 8001492:	f003 f86d 	bl	8004570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2140      	movs	r1, #64	; 0x40
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f003 f867 	bl	8004570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2104      	movs	r1, #4
 80014a6:	4874      	ldr	r0, [pc, #464]	; (8001678 <MX_GPIO_Init+0x2ec>)
 80014a8:	f003 f862 	bl	8004570 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 80014ac:	f44f 6344 	mov.w	r3, #3136	; 0xc40
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80014be:	2305      	movs	r3, #5
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	486c      	ldr	r0, [pc, #432]	; (800167c <MX_GPIO_Init+0x2f0>)
 80014ca:	f002 fea7 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 80014ce:	f244 0314 	movw	r3, #16404	; 0x4014
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	4619      	mov	r1, r3
 80014e6:	4862      	ldr	r0, [pc, #392]	; (8001670 <MX_GPIO_Init+0x2e4>)
 80014e8:	f002 fe98 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80014ec:	2310      	movs	r3, #16
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014fc:	2302      	movs	r3, #2
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	4619      	mov	r1, r3
 8001506:	485c      	ldr	r0, [pc, #368]	; (8001678 <MX_GPIO_Init+0x2ec>)
 8001508:	f002 fe88 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 800150c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800151e:	2307      	movs	r3, #7
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152c:	f002 fe76 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001530:	23b0      	movs	r3, #176	; 0xb0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001540:	230a      	movs	r3, #10
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	484c      	ldr	r0, [pc, #304]	; (800167c <MX_GPIO_Init+0x2f0>)
 800154c:	f002 fe66 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SDB_Pin SAI1_FSA_Pin */
  GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 8001550:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001562:	230d      	movs	r3, #13
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4842      	ldr	r0, [pc, #264]	; (8001678 <MX_GPIO_Init+0x2ec>)
 800156e:	f002 fe55 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8001572:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8001584:	2305      	movs	r3, #5
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	483c      	ldr	r0, [pc, #240]	; (8001680 <MX_GPIO_Init+0x2f4>)
 8001590:	f002 fe44 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001594:	2302      	movs	r3, #2
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001598:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	4834      	ldr	r0, [pc, #208]	; (800167c <MX_GPIO_Init+0x2f0>)
 80015aa:	f002 fe37 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 80015ae:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80015c0:	230a      	movs	r3, #10
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4829      	ldr	r0, [pc, #164]	; (8001670 <MX_GPIO_Init+0x2e4>)
 80015cc:	f002 fe26 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 80015d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80015e2:	2303      	movs	r3, #3
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	4820      	ldr	r0, [pc, #128]	; (8001670 <MX_GPIO_Init+0x2e4>)
 80015ee:	f002 fe15 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 80015f2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8001604:	2305      	movs	r3, #5
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4818      	ldr	r0, [pc, #96]	; (8001670 <MX_GPIO_Init+0x2e4>)
 8001610:	f002 fe04 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_MCKA_Pin SAI1_SDA_Pin SAI1_SCKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001624:	230d      	movs	r3, #13
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	4619      	mov	r1, r3
 800162e:	4815      	ldr	r0, [pc, #84]	; (8001684 <MX_GPIO_Init+0x2f8>)
 8001630:	f002 fdf4 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin;
 8001634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001646:	230a      	movs	r3, #10
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTGFS_ID_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f002 fde2 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8001658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
 800166a:	e00d      	b.n	8001688 <MX_GPIO_Init+0x2fc>
 800166c:	40021000 	.word	0x40021000
 8001670:	48001c00 	.word	0x48001c00
 8001674:	48000800 	.word	0x48000800
 8001678:	48000400 	.word	0x48000400
 800167c:	48002000 	.word	0x48002000
 8001680:	48001800 	.word	0x48001800
 8001684:	48001000 	.word	0x48001000
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168c:	4619      	mov	r1, r3
 800168e:	4862      	ldr	r0, [pc, #392]	; (8001818 <MX_GPIO_Init+0x48c>)
 8001690:	f002 fdc4 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8001694:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169a:	2312      	movs	r3, #18
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016a6:	2304      	movs	r3, #4
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ae:	4619      	mov	r1, r3
 80016b0:	485a      	ldr	r0, [pc, #360]	; (800181c <MX_GPIO_Init+0x490>)
 80016b2:	f002 fdb3 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80016b6:	2340      	movs	r3, #64	; 0x40
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	4853      	ldr	r0, [pc, #332]	; (8001818 <MX_GPIO_Init+0x48c>)
 80016cc:	f002 fda6 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 80016d0:	2384      	movs	r3, #132	; 0x84
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016e0:	2306      	movs	r3, #6
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4619      	mov	r1, r3
 80016ea:	484b      	ldr	r0, [pc, #300]	; (8001818 <MX_GPIO_Init+0x48c>)
 80016ec:	f002 fd96 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 80016f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001702:	2307      	movs	r3, #7
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	4619      	mov	r1, r3
 800170c:	4844      	ldr	r0, [pc, #272]	; (8001820 <MX_GPIO_Init+0x494>)
 800170e:	f002 fd85 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001712:	2303      	movs	r3, #3
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001722:	2308      	movs	r3, #8
 8001724:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172a:	4619      	mov	r1, r3
 800172c:	483a      	ldr	r0, [pc, #232]	; (8001818 <MX_GPIO_Init+0x48c>)
 800172e:	f002 fd75 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001732:	2320      	movs	r3, #32
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f002 fd68 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800174c:	2340      	movs	r3, #64	; 0x40
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001766:	f002 fd59 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_RX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 800176a:	2308      	movs	r3, #8
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177a:	2307      	movs	r3, #7
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4619      	mov	r1, r3
 8001784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001788:	f002 fd48 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 800178c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 800179e:	230b      	movs	r3, #11
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	481e      	ldr	r0, [pc, #120]	; (8001824 <MX_GPIO_Init+0x498>)
 80017aa:	f002 fd37 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 80017ae:	2310      	movs	r3, #16
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80017be:	230a      	movs	r3, #10
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017cc:	f002 fd26 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80017d0:	2304      	movs	r3, #4
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <MX_GPIO_Init+0x494>)
 80017e8:	f002 fd18 	bl	800421c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80017ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017fe:	2306      	movs	r3, #6
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_GPIO_Init+0x494>)
 800180a:	f002 fd07 	bl	800421c <HAL_GPIO_Init>

}
 800180e:	bf00      	nop
 8001810:	3738      	adds	r7, #56	; 0x38
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	48000800 	.word	0x48000800
 800181c:	48001800 	.word	0x48001800
 8001820:	48000400 	.word	0x48000400
 8001824:	48001400 	.word	0x48001400

08001828 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    osDelay(1);
 8001830:	2001      	movs	r0, #1
 8001832:	f00b ffb6 	bl	800d7a2 <osDelay>
 8001836:	e7fb      	b.n	8001830 <StartDefaultTask+0x8>

08001838 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800184a:	f000 fd7b 	bl	8002344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40001000 	.word	0x40001000

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	e7fe      	b.n	8001864 <Error_Handler+0x8>
	...

08001868 <SD_init>:
uint16_t rtext[_MAX_SS];/* File read buffer */
/* USER CODE END 1 */


//if unmount SD card, need to rerun this block SD_init again to re-mount sd card, otherwise data collection process will be halted.
void SD_init(void){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af02      	add	r7, sp, #8
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK){
 800186e:	2200      	movs	r2, #0
 8001870:	490d      	ldr	r1, [pc, #52]	; (80018a8 <SD_init+0x40>)
 8001872:	480e      	ldr	r0, [pc, #56]	; (80018ac <SD_init+0x44>)
 8001874:	f00a fcec 	bl	800c250 <f_mount>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <SD_init+0x1c>
		Error_Handler();
 800187e:	f7ff ffed 	bl	800185c <Error_Handler>
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
		{
			Error_Handler();
		}
	}
}
 8001882:	e00d      	b.n	80018a0 <SD_init+0x38>
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8001884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <SD_init+0x48>)
 800188c:	2200      	movs	r2, #0
 800188e:	2107      	movs	r1, #7
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <SD_init+0x40>)
 8001892:	f00b f963 	bl	800cb5c <f_mkfs>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SD_init+0x38>
			Error_Handler();
 800189c:	f7ff ffde 	bl	800185c <Error_Handler>
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000988 	.word	0x20000988
 80018ac:	2000098c 	.word	0x2000098c
 80018b0:	2000052c 	.word	0x2000052c

080018b4 <SD_process>:
//
//void* is common denominator for all pointers. Temp var to be changed to use with anything else
void SD_process(char *filename, void *buffer, int length){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
			//Open file for writing (Create)
//			if(f_open(&SDFile, filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK){
			if(f_open(&SDFile, filename, FA_OPEN_APPEND | FA_WRITE) != FR_OK){
 80018c0:	2232      	movs	r2, #50	; 0x32
 80018c2:	68f9      	ldr	r1, [r7, #12]
 80018c4:	4812      	ldr	r0, [pc, #72]	; (8001910 <SD_process+0x5c>)
 80018c6:	f00a fd27 	bl	800c318 <f_open>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <SD_process+0x22>
				Error_Handler();
 80018d0:	f7ff ffc4 	bl	800185c <Error_Handler>
					f_close(&SDFile);
				}
			}
			//create if condition to check if buffer is null/bad function calls
//	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
}
 80018d4:	e017      	b.n	8001906 <SD_process+0x52>
				res = f_write(&SDFile, buffer, length, (void *)&byteswritten);
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <SD_process+0x60>)
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <SD_process+0x5c>)
 80018de:	f00a fee0 	bl	800c6a2 <f_write>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <SD_process+0x64>)
 80018e8:	701a      	strb	r2, [r3, #0]
				if((byteswritten == 0) || (res != FR_OK)){
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <SD_process+0x60>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <SD_process+0x46>
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <SD_process+0x64>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <SD_process+0x4c>
					Error_Handler();
 80018fa:	f7ff ffaf 	bl	800185c <Error_Handler>
}
 80018fe:	e002      	b.n	8001906 <SD_process+0x52>
					f_close(&SDFile);
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <SD_process+0x5c>)
 8001902:	f00b f8fb 	bl	800cafc <f_close>
}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000bc0 	.word	0x20000bc0
 8001914:	20000528 	.word	0x20000528
 8001918:	20000524 	.word	0x20000524

0800191c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_MspInit+0x4c>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <HAL_MspInit+0x4c>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6613      	str	r3, [r2, #96]	; 0x60
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_MspInit+0x4c>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_MspInit+0x4c>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_MspInit+0x4c>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6593      	str	r3, [r2, #88]	; 0x58
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_MspInit+0x4c>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	210f      	movs	r1, #15
 8001956:	f06f 0001 	mvn.w	r0, #1
 800195a:	f002 f9c3 	bl	8003ce4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0b2      	sub	sp, #200	; 0xc8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	229c      	movs	r2, #156	; 0x9c
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f00f fd56 	bl	801143e <memset>
  if(hadc->Instance==ADC1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a5d      	ldr	r2, [pc, #372]	; (8001b0c <HAL_ADC_MspInit+0x1a0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	f040 80b2 	bne.w	8001b02 <HAL_ADC_MspInit+0x196>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800199e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80019ac:	2303      	movs	r3, #3
 80019ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80019b4:	2308      	movs	r3, #8
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80019b8:	2302      	movs	r3, #2
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019bc:	2302      	movs	r3, #2
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019c0:	2302      	movs	r3, #2
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ca:	f107 0318 	add.w	r3, r7, #24
 80019ce:	4618      	mov	r0, r3
 80019d0:	f003 fee6 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 80019da:	f7ff ff3f 	bl	800185c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019de:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 80019e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ea:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	4b46      	ldr	r3, [pc, #280]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a45      	ldr	r2, [pc, #276]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	4a3f      	ldr	r2, [pc, #252]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1a:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	4a39      	ldr	r2, [pc, #228]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <HAL_ADC_MspInit+0x1a4>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN6
    PA7     ------> ADC1_IN12
    PA2     ------> ADC1_IN7
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8001a3e:	2318      	movs	r3, #24
 8001a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a44:	230b      	movs	r3, #11
 8001a46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a50:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a54:	4619      	mov	r1, r3
 8001a56:	482f      	ldr	r0, [pc, #188]	; (8001b14 <HAL_ADC_MspInit+0x1a8>)
 8001a58:	f002 fbe0 	bl	800421c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_A0_Pin|GPIO_PIN_2;
 8001a5c:	2387      	movs	r3, #135	; 0x87
 8001a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a62:	230b      	movs	r3, #11
 8001a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a78:	f002 fbd0 	bl	800421c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a82:	230b      	movs	r3, #11
 8001a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4820      	ldr	r0, [pc, #128]	; (8001b18 <HAL_ADC_MspInit+0x1ac>)
 8001a96:	f002 fbc1 	bl	800421c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001a9c:	4a20      	ldr	r2, [pc, #128]	; (8001b20 <HAL_ADC_MspInit+0x1b4>)
 8001a9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001aa2:	2205      	movs	r2, #5
 8001aa4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001abe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001aca:	2220      	movs	r2, #32
 8001acc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001ad0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001ad4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ad6:	4811      	ldr	r0, [pc, #68]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001ad8:	f002 f92e 	bl	8003d38 <HAL_DMA_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_ADC_MspInit+0x17a>
    {
      Error_Handler();
 8001ae2:	f7ff febb 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001aea:	651a      	str	r2, [r3, #80]	; 0x50
 8001aec:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <HAL_ADC_MspInit+0x1b0>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2105      	movs	r1, #5
 8001af6:	2012      	movs	r0, #18
 8001af8:	f002 f8f4 	bl	8003ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001afc:	2012      	movs	r0, #18
 8001afe:	f002 f90d 	bl	8003d1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	37c8      	adds	r7, #200	; 0xc8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	50040000 	.word	0x50040000
 8001b10:	40021000 	.word	0x40021000
 8001b14:	48000800 	.word	0x48000800
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	20000310 	.word	0x20000310
 8001b20:	40020044 	.word	0x40020044

08001b24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <HAL_CAN_MspInit+0x80>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d129      	bne.n	8001b9a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_CAN_MspInit+0x84>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <HAL_CAN_MspInit+0x84>)
 8001b4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b50:	6593      	str	r3, [r2, #88]	; 0x58
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_CAN_MspInit+0x84>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_CAN_MspInit+0x84>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <HAL_CAN_MspInit+0x84>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_CAN_MspInit+0x84>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA12     ------> CAN1_TX
    PA11     ------> CAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001b76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b88:	2309      	movs	r3, #9
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b96:	f002 fb41 	bl	800421c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40006400 	.word	0x40006400
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0b2      	sub	sp, #200	; 0xc8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc4:	f107 0318 	add.w	r3, r7, #24
 8001bc8:	229c      	movs	r2, #156	; 0x9c
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00f fc36 	bl	801143e <memset>
  if(hi2c->Instance==I2C1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a33      	ldr	r2, [pc, #204]	; (8001ca4 <HAL_I2C_MspInit+0xf8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d15e      	bne.n	8001c9a <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bdc:	2340      	movs	r3, #64	; 0x40
 8001bde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fdd9 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bf4:	f7ff fe32 	bl	800185c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_I2C_MspInit+0xfc>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_I2C_MspInit+0xfc>)
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c04:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <HAL_I2C_MspInit+0xfc>)
 8001c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_I2C_MspInit+0xfc>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c14:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <HAL_I2C_MspInit+0xfc>)
 8001c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_I2C_MspInit+0xfc>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001c28:	f002 fea4 	bl	8004974 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8001c2c:	2340      	movs	r3, #64	; 0x40
 8001c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c32:	2312      	movs	r3, #18
 8001c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c44:	2304      	movs	r3, #4
 8001c46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4816      	ldr	r0, [pc, #88]	; (8001cac <HAL_I2C_MspInit+0x100>)
 8001c52:	f002 fae3 	bl	800421c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8001c56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5e:	2312      	movs	r3, #18
 8001c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c70:	2304      	movs	r3, #4
 8001c72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <HAL_I2C_MspInit+0x104>)
 8001c7e:	f002 facd 	bl	800421c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_I2C_MspInit+0xfc>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_I2C_MspInit+0xfc>)
 8001c88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_I2C_MspInit+0xfc>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	37c8      	adds	r7, #200	; 0xc8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40005400 	.word	0x40005400
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	48000400 	.word	0x48000400
 8001cb0:	48001800 	.word	0x48001800

08001cb4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b0b2      	sub	sp, #200	; 0xc8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	229c      	movs	r2, #156	; 0x9c
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00f fbb2 	bl	801143e <memset>
  if(hsd->Instance==SDMMC1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a37      	ldr	r2, [pc, #220]	; (8001dbc <HAL_SD_MspInit+0x108>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d167      	bne.n	8001db4 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001ce4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ce8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8001cea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf2:	f107 0318 	add.w	r3, r7, #24
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 fd52 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001d02:	f7ff fdab 	bl	800185c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001d06:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_SD_MspInit+0x10c>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a2d      	ldr	r2, [pc, #180]	; (8001dc0 <HAL_SD_MspInit+0x10c>)
 8001d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_SD_MspInit+0x10c>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1e:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <HAL_SD_MspInit+0x10c>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	4a27      	ldr	r2, [pc, #156]	; (8001dc0 <HAL_SD_MspInit+0x10c>)
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2a:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <HAL_SD_MspInit+0x10c>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_SD_MspInit+0x10c>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <HAL_SD_MspInit+0x10c>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d42:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_SD_MspInit+0x10c>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d66:	230c      	movs	r3, #12
 8001d68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4814      	ldr	r0, [pc, #80]	; (8001dc4 <HAL_SD_MspInit+0x110>)
 8001d74:	f002 fa52 	bl	800421c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8001d78:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d92:	230c      	movs	r3, #12
 8001d94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <HAL_SD_MspInit+0x114>)
 8001da0:	f002 fa3c 	bl	800421c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2105      	movs	r1, #5
 8001da8:	2031      	movs	r0, #49	; 0x31
 8001daa:	f001 ff9b 	bl	8003ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001dae:	2031      	movs	r0, #49	; 0x31
 8001db0:	f001 ffb4 	bl	8003d1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	37c8      	adds	r7, #200	; 0xc8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	50062400 	.word	0x50062400
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	48000c00 	.word	0x48000c00
 8001dc8:	48000800 	.word	0x48000800

08001dcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a25      	ldr	r2, [pc, #148]	; (8001e80 <HAL_SPI_MspInit+0xb4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d144      	bne.n	8001e78 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <HAL_SPI_MspInit+0xb8>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <HAL_SPI_MspInit+0xb8>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_SPI_MspInit+0xb8>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e06:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_SPI_MspInit+0xb8>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <HAL_SPI_MspInit+0xb8>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_SPI_MspInit+0xb8>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_SPI_MspInit+0xb8>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_SPI_MspInit+0xb8>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_SPI_MspInit+0xb8>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 8001e36:	2301      	movs	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e46:	2305      	movs	r3, #5
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <HAL_SPI_MspInit+0xbc>)
 8001e52:	f002 f9e3 	bl	800421c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001e56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e68:	2305      	movs	r3, #5
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	4806      	ldr	r0, [pc, #24]	; (8001e8c <HAL_SPI_MspInit+0xc0>)
 8001e74:	f002 f9d2 	bl	800421c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e78:	bf00      	nop
 8001e7a:	3728      	adds	r7, #40	; 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40003800 	.word	0x40003800
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48002000 	.word	0x48002000
 8001e8c:	48000400 	.word	0x48000400

08001e90 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <HAL_FMC_MspInit+0xe0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d15d      	bne.n	8001f68 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 8001eac:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_FMC_MspInit+0xe0>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_FMC_MspInit+0xe4>)
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb6:	4a2f      	ldr	r2, [pc, #188]	; (8001f74 <HAL_FMC_MspInit+0xe4>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6513      	str	r3, [r2, #80]	; 0x50
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_FMC_MspInit+0xe4>)
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 8001eca:	f64f 739b 	movw	r3, #65435	; 0xff9b
 8001ece:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001edc:	230c      	movs	r3, #12
 8001ede:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4824      	ldr	r0, [pc, #144]	; (8001f78 <HAL_FMC_MspInit+0xe8>)
 8001ee6:	f002 f999 	bl	800421c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8001eea:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001eee:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001efc:	230c      	movs	r3, #12
 8001efe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	481d      	ldr	r0, [pc, #116]	; (8001f7c <HAL_FMC_MspInit+0xec>)
 8001f06:	f002 f989 	bl	800421c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4817      	ldr	r0, [pc, #92]	; (8001f80 <HAL_FMC_MspInit+0xf0>)
 8001f24:	f002 f97a 	bl	800421c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001f28:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001f2c:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4810      	ldr	r0, [pc, #64]	; (8001f84 <HAL_FMC_MspInit+0xf4>)
 8001f44:	f002 f96a 	bl	800421c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 8001f48:	233f      	movs	r3, #63	; 0x3f
 8001f4a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f58:	230c      	movs	r3, #12
 8001f5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4809      	ldr	r0, [pc, #36]	; (8001f88 <HAL_FMC_MspInit+0xf8>)
 8001f62:	f002 f95b 	bl	800421c <HAL_GPIO_Init>
 8001f66:	e000      	b.n	8001f6a <HAL_FMC_MspInit+0xda>
    return;
 8001f68:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	2000092c 	.word	0x2000092c
 8001f74:	40021000 	.word	0x40021000
 8001f78:	48001000 	.word	0x48001000
 8001f7c:	48000c00 	.word	0x48000c00
 8001f80:	48000400 	.word	0x48000400
 8001f84:	48001400 	.word	0x48001400
 8001f88:	48001800 	.word	0x48001800

08001f8c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f94:	f7ff ff7c 	bl	8001e90 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08e      	sub	sp, #56	; 0x38
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fae:	4b34      	ldr	r3, [pc, #208]	; (8002080 <HAL_InitTick+0xe0>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	4a33      	ldr	r2, [pc, #204]	; (8002080 <HAL_InitTick+0xe0>)
 8001fb4:	f043 0310 	orr.w	r3, r3, #16
 8001fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <HAL_InitTick+0xe0>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fc6:	f107 0210 	add.w	r2, r7, #16
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 faf5 	bl	80055c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fe0:	f003 fac2 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8001fe4:	6378      	str	r0, [r7, #52]	; 0x34
 8001fe6:	e004      	b.n	8001ff2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fe8:	f003 fabe 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8001fec:	4603      	mov	r3, r0
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff4:	4a23      	ldr	r2, [pc, #140]	; (8002084 <HAL_InitTick+0xe4>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0c9b      	lsrs	r3, r3, #18
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_InitTick+0xe8>)
 8002002:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_InitTick+0xec>)
 8002004:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_InitTick+0xe8>)
 8002008:	f240 32e7 	movw	r2, #999	; 0x3e7
 800200c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800200e:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_InitTick+0xe8>)
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_InitTick+0xe8>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_InitTick+0xe8>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_InitTick+0xe8>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002026:	4818      	ldr	r0, [pc, #96]	; (8002088 <HAL_InitTick+0xe8>)
 8002028:	f006 ff44 	bl	8008eb4 <HAL_TIM_Base_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002032:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002036:	2b00      	cmp	r3, #0
 8002038:	d11b      	bne.n	8002072 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800203a:	4813      	ldr	r0, [pc, #76]	; (8002088 <HAL_InitTick+0xe8>)
 800203c:	f006 ff9c 	bl	8008f78 <HAL_TIM_Base_Start_IT>
 8002040:	4603      	mov	r3, r0
 8002042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002046:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800204a:	2b00      	cmp	r3, #0
 800204c:	d111      	bne.n	8002072 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800204e:	2036      	movs	r0, #54	; 0x36
 8002050:	f001 fe64 	bl	8003d1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	d808      	bhi.n	800206c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800205a:	2200      	movs	r2, #0
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	2036      	movs	r0, #54	; 0x36
 8002060:	f001 fe40 	bl	8003ce4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_InitTick+0xf0>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e002      	b.n	8002072 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002072:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002076:	4618      	mov	r0, r3
 8002078:	3738      	adds	r7, #56	; 0x38
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	431bde83 	.word	0x431bde83
 8002088:	20000930 	.word	0x20000930
 800208c:	40001000 	.word	0x40001000
 8002090:	20000018 	.word	0x20000018

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <NMI_Handler+0x4>

0800209a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <MemManage_Handler+0x4>

080020a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <DMA1_Channel4_IRQHandler+0x10>)
 80020c6:	f001 ff5a 	bl	8003f7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000310 	.word	0x20000310

080020d4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <ADC1_IRQHandler+0x10>)
 80020da:	f000 fd35 	bl	8002b48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200002a8 	.word	0x200002a8

080020e8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <SDMMC1_IRQHandler+0x10>)
 80020ee:	f005 fb79 	bl	80077e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200003ec 	.word	0x200003ec

080020fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <TIM6_DAC_IRQHandler+0x10>)
 8002102:	f006 ffa9 	bl	8009058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000930 	.word	0x20000930

08002110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return 1;
 8002114:	2301      	movs	r3, #1
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_kill>:

int _kill(int pid, int sig)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800212a:	f00f f857 	bl	80111dc <__errno>
 800212e:	4603      	mov	r3, r0
 8002130:	2216      	movs	r2, #22
 8002132:	601a      	str	r2, [r3, #0]
  return -1;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_exit>:

void _exit (int status)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ffe7 	bl	8002120 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002152:	e7fe      	b.n	8002152 <_exit+0x12>

08002154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e00a      	b.n	800217c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002166:	f3af 8000 	nop.w
 800216a:	4601      	mov	r1, r0
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	b2ca      	uxtb	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf0      	blt.n	8002166 <_read+0x12>
  }

  return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e009      	b.n	80021b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dbf1      	blt.n	80021a0 <_write+0x12>
  }
  return len;
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_close>:

int _close(int file)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ee:	605a      	str	r2, [r3, #4]
  return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_isatty>:

int _isatty(int file)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <_sbrk+0x5c>)
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <_sbrk+0x60>)
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <_sbrk+0x64>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <_sbrk+0x68>)
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	429a      	cmp	r2, r3
 800225e:	d207      	bcs.n	8002270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002260:	f00e ffbc 	bl	80111dc <__errno>
 8002264:	4603      	mov	r3, r0
 8002266:	220c      	movs	r2, #12
 8002268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800226e:	e009      	b.n	8002284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <_sbrk+0x64>)
 8002280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200a0000 	.word	0x200a0000
 8002290:	00000800 	.word	0x00000800
 8002294:	2000097c 	.word	0x2000097c
 8002298:	20005c48 	.word	0x20005c48

0800229c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <SystemInit+0x20>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <SystemInit+0x20>)
 80022a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022c4:	f7ff ffea 	bl	800229c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c8:	480c      	ldr	r0, [pc, #48]	; (80022fc <LoopForever+0x6>)
  ldr r1, =_edata
 80022ca:	490d      	ldr	r1, [pc, #52]	; (8002300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <LoopForever+0xe>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d0:	e002      	b.n	80022d8 <LoopCopyDataInit>

080022d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022d6:	3304      	adds	r3, #4

080022d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022dc:	d3f9      	bcc.n	80022d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022de:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022e0:	4c0a      	ldr	r4, [pc, #40]	; (800230c <LoopForever+0x16>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022e4:	e001      	b.n	80022ea <LoopFillZerobss>

080022e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e8:	3204      	adds	r2, #4

080022ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ec:	d3fb      	bcc.n	80022e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ee:	f00f f871 	bl	80113d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022f2:	f7fe fddd 	bl	8000eb0 <main>

080022f6 <LoopForever>:

LoopForever:
    b LoopForever
 80022f6:	e7fe      	b.n	80022f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022f8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80022fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002300:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002304:	08016314 	.word	0x08016314
  ldr r2, =_sbss
 8002308:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800230c:	20005c48 	.word	0x20005c48

08002310 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002310:	e7fe      	b.n	8002310 <CAN1_RX0_IRQHandler>

08002312 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231c:	2003      	movs	r0, #3
 800231e:	f001 fcd6 	bl	8003cce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002322:	200f      	movs	r0, #15
 8002324:	f7ff fe3c 	bl	8001fa0 <HAL_InitTick>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	71fb      	strb	r3, [r7, #7]
 8002332:	e001      	b.n	8002338 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002334:	f7ff faf2 	bl	800191c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002338:	79fb      	ldrb	r3, [r7, #7]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2000001c 	.word	0x2000001c
 8002368:	20000980 	.word	0x20000980

0800236c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetTick+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000980 	.word	0x20000980

08002384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff ffee 	bl	800236c <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800239c:	d005      	beq.n	80023aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_Delay+0x44>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023aa:	bf00      	nop
 80023ac:	f7ff ffde 	bl	800236c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d8f7      	bhi.n	80023ac <HAL_Delay+0x28>
  {
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000001c 	.word	0x2000001c

080023cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	609a      	str	r2, [r3, #8]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3360      	adds	r3, #96	; 0x60
 8002446:	461a      	mov	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <LL_ADC_SetOffset+0x44>)
 8002456:	4013      	ands	r3, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	4313      	orrs	r3, r2
 8002464:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800246c:	bf00      	nop
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	03fff000 	.word	0x03fff000

0800247c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3360      	adds	r3, #96	; 0x60
 800248a:	461a      	mov	r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3360      	adds	r3, #96	; 0x60
 80024b8:	461a      	mov	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	615a      	str	r2, [r3, #20]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800252a:	b480      	push	{r7}
 800252c:	b087      	sub	sp, #28
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3330      	adds	r3, #48	; 0x30
 800253a:	461a      	mov	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	4413      	add	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	211f      	movs	r1, #31
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	401a      	ands	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0e9b      	lsrs	r3, r3, #26
 8002562:	f003 011f 	and.w	r1, r3, #31
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f003 031f 	and.w	r3, r3, #31
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	431a      	orrs	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3314      	adds	r3, #20
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	0e5b      	lsrs	r3, r3, #25
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	4413      	add	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	0d1b      	lsrs	r3, r3, #20
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2107      	movs	r1, #7
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	401a      	ands	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	0d1b      	lsrs	r3, r3, #20
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	431a      	orrs	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025f2:	bf00      	nop
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002618:	43db      	mvns	r3, r3
 800261a:	401a      	ands	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0318 	and.w	r3, r3, #24
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002624:	40d9      	lsrs	r1, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	400b      	ands	r3, r1
 800262a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262e:	431a      	orrs	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	0007ffff 	.word	0x0007ffff

08002648 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002658:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6093      	str	r3, [r2, #8]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800267c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002680:	d101      	bne.n	8002686 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026d0:	d101      	bne.n	80026d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <LL_ADC_IsEnabled+0x18>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_ADC_IsEnabled+0x1a>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002742:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002746:	f043 0204 	orr.w	r2, r3, #4
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b04      	cmp	r3, #4
 800276c:	d101      	bne.n	8002772 <LL_ADC_REG_IsConversionOngoing+0x18>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b08      	cmp	r3, #8
 8002792:	d101      	bne.n	8002798 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e12f      	b.n	8002a22 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff f8cb 	bl	800196c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff3f 	bl	800266c <LL_ADC_IsDeepPowerDownEnabled>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff25 	bl	8002648 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff5a 	bl	80026bc <LL_ADC_IsInternalRegulatorEnabled>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d115      	bne.n	800283a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff3e 	bl	8002694 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002818:	4b84      	ldr	r3, [pc, #528]	; (8002a2c <HAL_ADC_Init+0x284>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	4a84      	ldr	r2, [pc, #528]	; (8002a30 <HAL_ADC_Init+0x288>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	3301      	adds	r3, #1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800282c:	e002      	b.n	8002834 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	3b01      	subs	r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f9      	bne.n	800282e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff3c 	bl	80026bc <LL_ADC_IsInternalRegulatorEnabled>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	f043 0210 	orr.w	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff75 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8002870:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 80c8 	bne.w	8002a10 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 80c4 	bne.w	8002a10 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002890:	f043 0202 	orr.w	r2, r3, #2
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff35 	bl	800270c <LL_ADC_IsEnabled>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10b      	bne.n	80028c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028a8:	4862      	ldr	r0, [pc, #392]	; (8002a34 <HAL_ADC_Init+0x28c>)
 80028aa:	f7ff ff2f 	bl	800270c <LL_ADC_IsEnabled>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4619      	mov	r1, r3
 80028ba:	485f      	ldr	r0, [pc, #380]	; (8002a38 <HAL_ADC_Init+0x290>)
 80028bc:	f7ff fd86 	bl	80023cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7e5b      	ldrb	r3, [r3, #25]
 80028c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80028d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80028d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d106      	bne.n	80028fc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	3b01      	subs	r3, #1
 80028f4:	045b      	lsls	r3, r3, #17
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_ADC_Init+0x294>)
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	69b9      	ldr	r1, [r7, #24]
 8002928:	430b      	orrs	r3, r1
 800292a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff12 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8002936:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff1f 	bl	8002780 <LL_ADC_INJ_IsConversionOngoing>
 8002942:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d140      	bne.n	80029cc <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d13d      	bne.n	80029cc <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7e1b      	ldrb	r3, [r3, #24]
 8002958:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800295a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002962:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002972:	f023 0306 	bic.w	r3, r3, #6
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	430b      	orrs	r3, r1
 800297e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002986:	2b01      	cmp	r3, #1
 8002988:	d118      	bne.n	80029bc <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029a0:	4311      	orrs	r1, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029ac:	430a      	orrs	r2, r1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	611a      	str	r2, [r3, #16]
 80029ba:	e007      	b.n	80029cc <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d10c      	bne.n	80029ee <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f023 010f 	bic.w	r1, r3, #15
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	1e5a      	subs	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
 80029ec:	e007      	b.n	80029fe <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 020f 	bic.w	r2, r2, #15
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	659a      	str	r2, [r3, #88]	; 0x58
 8002a0e:	e007      	b.n	8002a20 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	f043 0210 	orr.w	r2, r3, #16
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000014 	.word	0x20000014
 8002a30:	053e2d63 	.word	0x053e2d63
 8002a34:	50040000 	.word	0x50040000
 8002a38:	50040300 	.word	0x50040300
 8002a3c:	fff0c007 	.word	0xfff0c007

08002a40 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fe82 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d167      	bne.n	8002b2c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_Start_DMA+0x2a>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e063      	b.n	8002b32 <HAL_ADC_Start_DMA+0xf2>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fe36 	bl	80036e4 <ADC_Enable>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d14f      	bne.n	8002b22 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	f023 0206 	bic.w	r2, r3, #6
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aae:	e002      	b.n	8002ab6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	4a20      	ldr	r2, [pc, #128]	; (8002b3c <HAL_ADC_Start_DMA+0xfc>)
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac2:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <HAL_ADC_Start_DMA+0x100>)
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_ADC_Start_DMA+0x104>)
 8002acc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	221c      	movs	r2, #28
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0210 	orr.w	r2, r2, #16
 8002aec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3340      	adds	r3, #64	; 0x40
 8002b08:	4619      	mov	r1, r3
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f001 f9bb 	bl	8003e88 <HAL_DMA_Start_IT>
 8002b12:	4603      	mov	r3, r0
 8002b14:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fe09 	bl	8002732 <LL_ADC_REG_StartConversion>
 8002b20:	e006      	b.n	8002b30 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002b2a:	e001      	b.n	8002b30 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	080037f1 	.word	0x080037f1
 8002b40:	080038c9 	.word	0x080038c9
 8002b44:	080038e5 	.word	0x080038e5

08002b48 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d017      	beq.n	8002b9e <HAL_ADC_IRQHandler+0x56>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fee9 	bl	8003968 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <HAL_ADC_IRQHandler+0x6a>
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05e      	beq.n	8002c7a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d059      	beq.n	8002c7a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fc8e 	bl	8002504 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d03e      	beq.n	8002c6c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d135      	bne.n	8002c6c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d12e      	bne.n	8002c6c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fda1 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d11a      	bne.n	8002c54 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 020c 	bic.w	r2, r2, #12
 8002c2c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d112      	bne.n	8002c6c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	659a      	str	r2, [r3, #88]	; 0x58
 8002c52:	e00b      	b.n	8002c6c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	f043 0210 	orr.w	r2, r3, #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fe f877 	bl	8000d60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	220c      	movs	r2, #12
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <HAL_ADC_IRQHandler+0x146>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d072      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d06d      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fc5f 	bl	8002582 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002cc4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fc1a 	bl	8002504 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cd0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d047      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x1b2>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d03f      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d13a      	bne.n	8002d70 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	d133      	bne.n	8002d70 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d12e      	bne.n	8002d70 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fd32 	bl	8002780 <LL_ADC_INJ_IsConversionOngoing>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d11a      	bne.n	8002d58 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d30:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d112      	bne.n	8002d70 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	659a      	str	r2, [r3, #88]	; 0x58
 8002d56:	e00b      	b.n	8002d70 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	f043 0210 	orr.w	r2, r3, #16
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	f043 0201 	orr.w	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fdd1 	bl	8003918 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2260      	movs	r2, #96	; 0x60
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d011      	beq.n	8002dac <HAL_ADC_IRQHandler+0x264>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00c      	beq.n	8002dac <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f890 	bl	8002ec4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d012      	beq.n	8002ddc <HAL_ADC_IRQHandler+0x294>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00d      	beq.n	8002ddc <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fdb7 	bl	8003940 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d012      	beq.n	8002e0c <HAL_ADC_IRQHandler+0x2c4>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00d      	beq.n	8002e0c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fda9 	bl	8003954 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d02a      	beq.n	8002e6c <HAL_ADC_IRQHandler+0x324>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d025      	beq.n	8002e6c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	e008      	b.n	8002e40 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d10e      	bne.n	8002e64 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	f043 0202 	orr.w	r2, r3, #2
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f83a 	bl	8002ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2210      	movs	r2, #16
 8002e6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <HAL_ADC_IRQHandler+0x360>
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	f043 0208 	orr.w	r2, r3, #8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fd42 	bl	800392c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002ea8:	bf00      	nop
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b0b6      	sub	sp, #216	; 0xd8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x22>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e3d5      	b.n	80036ba <HAL_ADC_ConfigChannel+0x7ce>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fc1d 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 83ba 	bne.w	800369c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d824      	bhi.n	8002f7a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	3b02      	subs	r3, #2
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d81b      	bhi.n	8002f72 <HAL_ADC_ConfigChannel+0x86>
 8002f3a:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <HAL_ADC_ConfigChannel+0x54>)
 8002f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f40:	08002f51 	.word	0x08002f51
 8002f44:	08002f59 	.word	0x08002f59
 8002f48:	08002f61 	.word	0x08002f61
 8002f4c:	08002f69 	.word	0x08002f69
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	220c      	movs	r2, #12
 8002f54:	605a      	str	r2, [r3, #4]
          break;
 8002f56:	e011      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2212      	movs	r2, #18
 8002f5c:	605a      	str	r2, [r3, #4]
          break;
 8002f5e:	e00d      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2218      	movs	r2, #24
 8002f64:	605a      	str	r2, [r3, #4]
          break;
 8002f66:	e009      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f6e:	605a      	str	r2, [r3, #4]
          break;
 8002f70:	e004      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2206      	movs	r2, #6
 8002f76:	605a      	str	r2, [r3, #4]
          break;
 8002f78:	e000      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002f7a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f7ff face 	bl	800252a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fbe1 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8002f98:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fbed 	bl	8002780 <LL_ADC_INJ_IsConversionOngoing>
 8002fa6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002faa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f040 81c1 	bne.w	8003336 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 81bc 	bne.w	8003336 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc6:	d10f      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f7ff fae8 	bl	80025a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fa7c 	bl	80024de <LL_ADC_SetSamplingTimeCommonConfig>
 8002fe6:	e00e      	b.n	8003006 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f7ff fad7 	bl	80025a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fa6c 	bl	80024de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	08db      	lsrs	r3, r3, #3
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d00a      	beq.n	800303e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6919      	ldr	r1, [r3, #16]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003038:	f7ff f9fc 	bl	8002434 <LL_ADC_SetOffset>
 800303c:	e17b      	b.n	8003336 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fa19 	bl	800247c <LL_ADC_GetOffsetChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_ADC_ConfigChannel+0x17e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fa0e 	bl	800247c <LL_ADC_GetOffsetChannel>
 8003060:	4603      	mov	r3, r0
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	e01e      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x1bc>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fa03 	bl	800247c <LL_ADC_GetOffsetChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003088:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800308c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003090:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	e004      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800309c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x1d4>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	0e9b      	lsrs	r3, r3, #26
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	e018      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x206>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80030d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80030dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80030e4:	2320      	movs	r3, #32
 80030e6:	e004      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80030e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d106      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f9d2 	bl	80024a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff f9b6 	bl	800247c <LL_ADC_GetOffsetChannel>
 8003110:	4603      	mov	r3, r0
 8003112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x244>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff f9ab 	bl	800247c <LL_ADC_GetOffsetChannel>
 8003126:	4603      	mov	r3, r0
 8003128:	0e9b      	lsrs	r3, r3, #26
 800312a:	f003 021f 	and.w	r2, r3, #31
 800312e:	e01e      	b.n	800316e <HAL_ADC_ConfigChannel+0x282>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2101      	movs	r1, #1
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f9a0 	bl	800247c <LL_ADC_GetOffsetChannel>
 800313c:	4603      	mov	r3, r0
 800313e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800314e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003156:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800315e:	2320      	movs	r3, #32
 8003160:	e004      	b.n	800316c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003162:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003176:	2b00      	cmp	r3, #0
 8003178:	d105      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x29a>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	0e9b      	lsrs	r3, r3, #26
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	e018      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x2cc>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800319a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800319e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80031a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80031aa:	2320      	movs	r3, #32
 80031ac:	e004      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80031ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d106      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2200      	movs	r2, #0
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff f96f 	bl	80024a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2102      	movs	r1, #2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff f953 	bl	800247c <LL_ADC_GetOffsetChannel>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x30a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2102      	movs	r1, #2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f948 	bl	800247c <LL_ADC_GetOffsetChannel>
 80031ec:	4603      	mov	r3, r0
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	e01e      	b.n	8003234 <HAL_ADC_ConfigChannel+0x348>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2102      	movs	r1, #2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff f93d 	bl	800247c <LL_ADC_GetOffsetChannel>
 8003202:	4603      	mov	r3, r0
 8003204:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003218:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800321c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003224:	2320      	movs	r3, #32
 8003226:	e004      	b.n	8003232 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003228:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_ADC_ConfigChannel+0x360>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0e9b      	lsrs	r3, r3, #26
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	e016      	b.n	800327a <HAL_ADC_ConfigChannel+0x38e>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800325e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800326c:	2320      	movs	r3, #32
 800326e:	e004      	b.n	800327a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003274:	fab3 f383 	clz	r3, r3
 8003278:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800327a:	429a      	cmp	r2, r3
 800327c:	d106      	bne.n	800328c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2200      	movs	r2, #0
 8003284:	2102      	movs	r1, #2
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f90e 	bl	80024a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2103      	movs	r1, #3
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f8f2 	bl	800247c <LL_ADC_GetOffsetChannel>
 8003298:	4603      	mov	r3, r0
 800329a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x3cc>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2103      	movs	r1, #3
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff f8e7 	bl	800247c <LL_ADC_GetOffsetChannel>
 80032ae:	4603      	mov	r3, r0
 80032b0:	0e9b      	lsrs	r3, r3, #26
 80032b2:	f003 021f 	and.w	r2, r3, #31
 80032b6:	e017      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x3fc>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2103      	movs	r1, #3
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff f8dc 	bl	800247c <LL_ADC_GetOffsetChannel>
 80032c4:	4603      	mov	r3, r0
 80032c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80032d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80032d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80032da:	2320      	movs	r3, #32
 80032dc:	e003      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80032de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e0:	fab3 f383 	clz	r3, r3
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x414>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	e011      	b.n	8003324 <HAL_ADC_ConfigChannel+0x438>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800330e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003310:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003318:	2320      	movs	r3, #32
 800331a:	e003      	b.n	8003324 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800331c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003324:	429a      	cmp	r2, r3
 8003326:	d106      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2200      	movs	r2, #0
 800332e:	2103      	movs	r1, #3
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff f8b9 	bl	80024a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff f9e6 	bl	800270c <LL_ADC_IsEnabled>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 8140 	bne.w	80035c8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	461a      	mov	r2, r3
 8003356:	f7ff f953 	bl	8002600 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4a8f      	ldr	r2, [pc, #572]	; (800359c <HAL_ADC_ConfigChannel+0x6b0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	f040 8131 	bne.w	80035c8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10b      	bne.n	800338e <HAL_ADC_ConfigChannel+0x4a2>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	0e9b      	lsrs	r3, r3, #26
 800337c:	3301      	adds	r3, #1
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	2b09      	cmp	r3, #9
 8003384:	bf94      	ite	ls
 8003386:	2301      	movls	r3, #1
 8003388:	2300      	movhi	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	e019      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x4d6>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800339c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80033a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80033a6:	2320      	movs	r3, #32
 80033a8:	e003      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80033aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	2b09      	cmp	r3, #9
 80033ba:	bf94      	ite	ls
 80033bc:	2301      	movls	r3, #1
 80033be:	2300      	movhi	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d079      	beq.n	80034ba <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d107      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x4f6>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0e9b      	lsrs	r3, r3, #26
 80033d8:	3301      	adds	r3, #1
 80033da:	069b      	lsls	r3, r3, #26
 80033dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e0:	e015      	b.n	800340e <HAL_ADC_ConfigChannel+0x522>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80033fa:	2320      	movs	r3, #32
 80033fc:	e003      	b.n	8003406 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80033fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
 8003406:	3301      	adds	r3, #1
 8003408:	069b      	lsls	r3, r3, #26
 800340a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_ADC_ConfigChannel+0x542>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	0e9b      	lsrs	r3, r3, #26
 8003420:	3301      	adds	r3, #1
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	2101      	movs	r1, #1
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	e017      	b.n	800345e <HAL_ADC_ConfigChannel+0x572>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800343c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003446:	2320      	movs	r3, #32
 8003448:	e003      	b.n	8003452 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800344a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3301      	adds	r3, #1
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2101      	movs	r1, #1
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	ea42 0103 	orr.w	r1, r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x598>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	0e9b      	lsrs	r3, r3, #26
 8003474:	3301      	adds	r3, #1
 8003476:	f003 021f 	and.w	r2, r3, #31
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	051b      	lsls	r3, r3, #20
 8003482:	e018      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x5ca>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800349c:	2320      	movs	r3, #32
 800349e:	e003      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80034a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f003 021f 	and.w	r2, r3, #31
 80034ae:	4613      	mov	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b6:	430b      	orrs	r3, r1
 80034b8:	e081      	b.n	80035be <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x5ea>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	0e9b      	lsrs	r3, r3, #26
 80034cc:	3301      	adds	r3, #1
 80034ce:	069b      	lsls	r3, r3, #26
 80034d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034d4:	e015      	b.n	8003502 <HAL_ADC_ConfigChannel+0x616>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80034ee:	2320      	movs	r3, #32
 80034f0:	e003      	b.n	80034fa <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	fab3 f383 	clz	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	069b      	lsls	r3, r3, #26
 80034fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x636>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	0e9b      	lsrs	r3, r3, #26
 8003514:	3301      	adds	r3, #1
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f303 	lsl.w	r3, r1, r3
 8003520:	e017      	b.n	8003552 <HAL_ADC_ConfigChannel+0x666>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	61fb      	str	r3, [r7, #28]
  return result;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800353a:	2320      	movs	r3, #32
 800353c:	e003      	b.n	8003546 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	ea42 0103 	orr.w	r1, r2, r3
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10d      	bne.n	800357e <HAL_ADC_ConfigChannel+0x692>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	0e9b      	lsrs	r3, r3, #26
 8003568:	3301      	adds	r3, #1
 800356a:	f003 021f 	and.w	r2, r3, #31
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	3b1e      	subs	r3, #30
 8003576:	051b      	lsls	r3, r3, #20
 8003578:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800357c:	e01e      	b.n	80035bc <HAL_ADC_ConfigChannel+0x6d0>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	fa93 f3a3 	rbit	r3, r3
 800358a:	613b      	str	r3, [r7, #16]
  return result;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003596:	2320      	movs	r3, #32
 8003598:	e006      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x6bc>
 800359a:	bf00      	nop
 800359c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	3301      	adds	r3, #1
 80035aa:	f003 021f 	and.w	r2, r3, #31
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	3b1e      	subs	r3, #30
 80035b6:	051b      	lsls	r3, r3, #20
 80035b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035bc:	430b      	orrs	r3, r1
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	6892      	ldr	r2, [r2, #8]
 80035c2:	4619      	mov	r1, r3
 80035c4:	f7fe fff0 	bl	80025a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_ADC_ConfigChannel+0x7d8>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d06c      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035d4:	483c      	ldr	r0, [pc, #240]	; (80036c8 <HAL_ADC_ConfigChannel+0x7dc>)
 80035d6:	f7fe ff1f 	bl	8002418 <LL_ADC_GetCommonPathInternalCh>
 80035da:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a3a      	ldr	r2, [pc, #232]	; (80036cc <HAL_ADC_ConfigChannel+0x7e0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d127      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d121      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a35      	ldr	r2, [pc, #212]	; (80036d0 <HAL_ADC_ConfigChannel+0x7e4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d157      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003606:	4619      	mov	r1, r3
 8003608:	482f      	ldr	r0, [pc, #188]	; (80036c8 <HAL_ADC_ConfigChannel+0x7dc>)
 800360a:	f7fe fef2 	bl	80023f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_ADC_ConfigChannel+0x7e8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	4a30      	ldr	r2, [pc, #192]	; (80036d8 <HAL_ADC_ConfigChannel+0x7ec>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	099b      	lsrs	r3, r3, #6
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003628:	e002      	b.n	8003630 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3b01      	subs	r3, #1
 800362e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f9      	bne.n	800362a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003636:	e03a      	b.n	80036ae <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a27      	ldr	r2, [pc, #156]	; (80036dc <HAL_ADC_ConfigChannel+0x7f0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d113      	bne.n	800366a <HAL_ADC_ConfigChannel+0x77e>
 8003642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d12a      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800365c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003660:	4619      	mov	r1, r3
 8003662:	4819      	ldr	r0, [pc, #100]	; (80036c8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003664:	f7fe fec5 	bl	80023f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003668:	e021      	b.n	80036ae <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1c      	ldr	r2, [pc, #112]	; (80036e0 <HAL_ADC_ConfigChannel+0x7f4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d11c      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d116      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d111      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800368a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800368e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003692:	4619      	mov	r1, r3
 8003694:	480c      	ldr	r0, [pc, #48]	; (80036c8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003696:	f7fe feac 	bl	80023f2 <LL_ADC_SetCommonPathInternalCh>
 800369a:	e008      	b.n	80036ae <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80036b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	37d8      	adds	r7, #216	; 0xd8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	80080000 	.word	0x80080000
 80036c8:	50040300 	.word	0x50040300
 80036cc:	c7520000 	.word	0xc7520000
 80036d0:	50040000 	.word	0x50040000
 80036d4:	20000014 	.word	0x20000014
 80036d8:	053e2d63 	.word	0x053e2d63
 80036dc:	cb840000 	.word	0xcb840000
 80036e0:	80000001 	.word	0x80000001

080036e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f809 	bl	800270c <LL_ADC_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d169      	bne.n	80037d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <ADC_Enable+0xfc>)
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00d      	beq.n	800372a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	f043 0210 	orr.w	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e055      	b.n	80037d6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe ffd8 	bl	80026e4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003734:	482b      	ldr	r0, [pc, #172]	; (80037e4 <ADC_Enable+0x100>)
 8003736:	f7fe fe6f 	bl	8002418 <LL_ADC_GetCommonPathInternalCh>
 800373a:	4603      	mov	r3, r0
 800373c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d013      	beq.n	800376c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <ADC_Enable+0x104>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	4a28      	ldr	r2, [pc, #160]	; (80037ec <ADC_Enable+0x108>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800375e:	e002      	b.n	8003766 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	3b01      	subs	r3, #1
 8003764:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f9      	bne.n	8003760 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800376c:	f7fe fdfe 	bl	800236c <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003772:	e028      	b.n	80037c6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe ffc7 	bl	800270c <LL_ADC_IsEnabled>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe ffab 	bl	80026e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800378e:	f7fe fded 	bl	800236c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d914      	bls.n	80037c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d00d      	beq.n	80037c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	f043 0210 	orr.w	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e007      	b.n	80037d6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d1cf      	bne.n	8003774 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	8000003f 	.word	0x8000003f
 80037e4:	50040300 	.word	0x50040300
 80037e8:	20000014 	.word	0x20000014
 80037ec:	053e2d63 	.word	0x053e2d63

080037f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003806:	2b00      	cmp	r3, #0
 8003808:	d14b      	bne.n	80038a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d021      	beq.n	8003868 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe fe6b 	bl	8002504 <LL_ADC_REG_IsTriggerSourceSWStart>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d032      	beq.n	800389a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d12b      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11f      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	f043 0201 	orr.w	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	659a      	str	r2, [r3, #88]	; 0x58
 8003866:	e018      	b.n	800389a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d111      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	f043 0201 	orr.w	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f7fd fa60 	bl	8000d60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038a0:	e00e      	b.n	80038c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff fb12 	bl	8002ed8 <HAL_ADC_ErrorCallback>
}
 80038b4:	e004      	b.n	80038c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff faea 	bl	8002eb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff fae4 	bl	8002ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0ed      	b.n	8003b6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fe f8c2 	bl	8001b24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039b0:	f7fe fcdc 	bl	800236c <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039b6:	e012      	b.n	80039de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039b8:	f7fe fcd8 	bl	800236c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b0a      	cmp	r3, #10
 80039c4:	d90b      	bls.n	80039de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2205      	movs	r2, #5
 80039d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0c5      	b.n	8003b6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0e5      	beq.n	80039b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0202 	bic.w	r2, r2, #2
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039fc:	f7fe fcb6 	bl	800236c <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a02:	e012      	b.n	8003a2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a04:	f7fe fcb2 	bl	800236c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b0a      	cmp	r3, #10
 8003a10:	d90b      	bls.n	8003a2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2205      	movs	r2, #5
 8003a22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e09f      	b.n	8003b6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1e5      	bne.n	8003a04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7e1b      	ldrb	r3, [r3, #24]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d108      	bne.n	8003a52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	e007      	b.n	8003a62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	7e5b      	ldrb	r3, [r3, #25]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d108      	bne.n	8003a7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e007      	b.n	8003a8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	7e9b      	ldrb	r3, [r3, #26]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d108      	bne.n	8003aa6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0220 	orr.w	r2, r2, #32
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e007      	b.n	8003ab6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0220 	bic.w	r2, r2, #32
 8003ab4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7edb      	ldrb	r3, [r3, #27]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d108      	bne.n	8003ad0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0210 	bic.w	r2, r2, #16
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e007      	b.n	8003ae0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0210 	orr.w	r2, r2, #16
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7f1b      	ldrb	r3, [r3, #28]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d108      	bne.n	8003afa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0208 	orr.w	r2, r2, #8
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	e007      	b.n	8003b0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0208 	bic.w	r2, r2, #8
 8003b08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7f5b      	ldrb	r3, [r3, #29]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d108      	bne.n	8003b24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0204 	orr.w	r2, r2, #4
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	e007      	b.n	8003b34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0204 	bic.w	r2, r2, #4
 8003b32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	ea42 0103 	orr.w	r1, r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	1e5a      	subs	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b90:	4013      	ands	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba6:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	60d3      	str	r3, [r2, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	f003 0307 	and.w	r3, r3, #7
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db0b      	blt.n	8003c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	f003 021f 	and.w	r2, r3, #31
 8003bf0:	4907      	ldr	r1, [pc, #28]	; (8003c10 <__NVIC_EnableIRQ+0x38>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000e100 	.word	0xe000e100

08003c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db0a      	blt.n	8003c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	490c      	ldr	r1, [pc, #48]	; (8003c60 <__NVIC_SetPriority+0x4c>)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c3c:	e00a      	b.n	8003c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4908      	ldr	r1, [pc, #32]	; (8003c64 <__NVIC_SetPriority+0x50>)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	3b04      	subs	r3, #4
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	440b      	add	r3, r1
 8003c52:	761a      	strb	r2, [r3, #24]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000e100 	.word	0xe000e100
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b089      	sub	sp, #36	; 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f1c3 0307 	rsb	r3, r3, #7
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	bf28      	it	cs
 8003c86:	2304      	movcs	r3, #4
 8003c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	d902      	bls.n	8003c98 <NVIC_EncodePriority+0x30>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3b03      	subs	r3, #3
 8003c96:	e000      	b.n	8003c9a <NVIC_EncodePriority+0x32>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	401a      	ands	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43d9      	mvns	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	4313      	orrs	r3, r2
         );
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	; 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff ff4c 	bl	8003b74 <__NVIC_SetPriorityGrouping>
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf6:	f7ff ff61 	bl	8003bbc <__NVIC_GetPriorityGrouping>
 8003cfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	6978      	ldr	r0, [r7, #20]
 8003d02:	f7ff ffb1 	bl	8003c68 <NVIC_EncodePriority>
 8003d06:	4602      	mov	r2, r0
 8003d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ff80 	bl	8003c14 <__NVIC_SetPriority>
}
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff ff54 	bl	8003bd8 <__NVIC_EnableIRQ>
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e08d      	b.n	8003e66 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_DMA_Init+0x138>)
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d80f      	bhi.n	8003d76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b45      	ldr	r3, [pc, #276]	; (8003e74 <HAL_DMA_Init+0x13c>)
 8003d5e:	4413      	add	r3, r2
 8003d60:	4a45      	ldr	r2, [pc, #276]	; (8003e78 <HAL_DMA_Init+0x140>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	009a      	lsls	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a42      	ldr	r2, [pc, #264]	; (8003e7c <HAL_DMA_Init+0x144>)
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
 8003d74:	e00e      	b.n	8003d94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b40      	ldr	r3, [pc, #256]	; (8003e80 <HAL_DMA_Init+0x148>)
 8003d7e:	4413      	add	r3, r2
 8003d80:	4a3d      	ldr	r2, [pc, #244]	; (8003e78 <HAL_DMA_Init+0x140>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	009a      	lsls	r2, r3, #2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a3c      	ldr	r2, [pc, #240]	; (8003e84 <HAL_DMA_Init+0x14c>)
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f9b6 	bl	8004158 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003df4:	d102      	bne.n	8003dfc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e10:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <HAL_DMA_Init+0x104>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d80c      	bhi.n	8003e3c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f9d6 	bl	80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	e008      	b.n	8003e4e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40020407 	.word	0x40020407
 8003e74:	bffdfff8 	.word	0xbffdfff8
 8003e78:	cccccccd 	.word	0xcccccccd
 8003e7c:	40020000 	.word	0x40020000
 8003e80:	bffdfbf8 	.word	0xbffdfbf8
 8003e84:	40020400 	.word	0x40020400

08003e88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_DMA_Start_IT+0x20>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e066      	b.n	8003f76 <HAL_DMA_Start_IT+0xee>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d155      	bne.n	8003f68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f8fb 	bl	80040dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 020e 	orr.w	r2, r2, #14
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e00f      	b.n	8003f20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0204 	bic.w	r2, r2, #4
 8003f0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 020a 	orr.w	r2, r2, #10
 8003f1e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d007      	beq.n	8003f3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f3c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f54:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e005      	b.n	8003f74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
 8003f72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f003 031c 	and.w	r3, r3, #28
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d026      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x7a>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d021      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d107      	bne.n	8003fd2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0204 	bic.w	r2, r2, #4
 8003fd0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	f003 021c 	and.w	r2, r3, #28
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2104      	movs	r1, #4
 8003fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d071      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003ff6:	e06c      	b.n	80040d2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	f003 031c 	and.w	r3, r3, #28
 8004000:	2202      	movs	r2, #2
 8004002:	409a      	lsls	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02e      	beq.n	800406a <HAL_DMA_IRQHandler+0xec>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d029      	beq.n	800406a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 020a 	bic.w	r2, r2, #10
 8004032:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	f003 021c 	and.w	r2, r3, #28
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	2102      	movs	r1, #2
 800404a:	fa01 f202 	lsl.w	r2, r1, r2
 800404e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d038      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004068:	e033      	b.n	80040d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f003 031c 	and.w	r3, r3, #28
 8004072:	2208      	movs	r2, #8
 8004074:	409a      	lsls	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02a      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x156>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d025      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 020e 	bic.w	r2, r2, #14
 8004096:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	f003 021c 	and.w	r2, r3, #28
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	2101      	movs	r1, #1
 80040a6:	fa01 f202 	lsl.w	r2, r1, r2
 80040aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d004      	beq.n	80040d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
}
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040f2:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004104:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f003 021c 	and.w	r2, r3, #28
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2101      	movs	r1, #1
 8004114:	fa01 f202 	lsl.w	r2, r1, r2
 8004118:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b10      	cmp	r3, #16
 8004128:	d108      	bne.n	800413c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800413a:	e007      	b.n	800414c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	60da      	str	r2, [r3, #12]
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	4b17      	ldr	r3, [pc, #92]	; (80041c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004168:	429a      	cmp	r2, r3
 800416a:	d80a      	bhi.n	8004182 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004178:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6493      	str	r3, [r2, #72]	; 0x48
 8004180:	e007      	b.n	8004192 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	009a      	lsls	r2, r3, #2
 800418a:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800418c:	4413      	add	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	3b08      	subs	r3, #8
 800419a:	4a0c      	ldr	r2, [pc, #48]	; (80041cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80041a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2201      	movs	r2, #1
 80041b2:	409a      	lsls	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40020407 	.word	0x40020407
 80041c8:	4002081c 	.word	0x4002081c
 80041cc:	cccccccd 	.word	0xcccccccd
 80041d0:	40020880 	.word	0x40020880

080041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	461a      	mov	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a08      	ldr	r2, [pc, #32]	; (8004218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2201      	movs	r2, #1
 8004202:	409a      	lsls	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	1000823f 	.word	0x1000823f
 8004218:	40020940 	.word	0x40020940

0800421c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800422a:	e166      	b.n	80044fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2101      	movs	r1, #1
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8158 	beq.w	80044f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d005      	beq.n	800425c <HAL_GPIO_Init+0x40>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d130      	bne.n	80042be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	2203      	movs	r2, #3
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004292:	2201      	movs	r2, #1
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 0201 	and.w	r2, r3, #1
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d017      	beq.n	80042fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	2203      	movs	r2, #3
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4013      	ands	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d123      	bne.n	800434e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	08da      	lsrs	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3208      	adds	r2, #8
 800430e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	220f      	movs	r2, #15
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4013      	ands	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	08da      	lsrs	r2, r3, #3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3208      	adds	r2, #8
 8004348:	6939      	ldr	r1, [r7, #16]
 800434a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	2203      	movs	r2, #3
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4013      	ands	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0203 	and.w	r2, r3, #3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80b2 	beq.w	80044f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004390:	4b61      	ldr	r3, [pc, #388]	; (8004518 <HAL_GPIO_Init+0x2fc>)
 8004392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004394:	4a60      	ldr	r2, [pc, #384]	; (8004518 <HAL_GPIO_Init+0x2fc>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6613      	str	r3, [r2, #96]	; 0x60
 800439c:	4b5e      	ldr	r3, [pc, #376]	; (8004518 <HAL_GPIO_Init+0x2fc>)
 800439e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043a8:	4a5c      	ldr	r2, [pc, #368]	; (800451c <HAL_GPIO_Init+0x300>)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	089b      	lsrs	r3, r3, #2
 80043ae:	3302      	adds	r3, #2
 80043b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	220f      	movs	r2, #15
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043d2:	d02b      	beq.n	800442c <HAL_GPIO_Init+0x210>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a52      	ldr	r2, [pc, #328]	; (8004520 <HAL_GPIO_Init+0x304>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d025      	beq.n	8004428 <HAL_GPIO_Init+0x20c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a51      	ldr	r2, [pc, #324]	; (8004524 <HAL_GPIO_Init+0x308>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d01f      	beq.n	8004424 <HAL_GPIO_Init+0x208>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a50      	ldr	r2, [pc, #320]	; (8004528 <HAL_GPIO_Init+0x30c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d019      	beq.n	8004420 <HAL_GPIO_Init+0x204>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a4f      	ldr	r2, [pc, #316]	; (800452c <HAL_GPIO_Init+0x310>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <HAL_GPIO_Init+0x200>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a4e      	ldr	r2, [pc, #312]	; (8004530 <HAL_GPIO_Init+0x314>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00d      	beq.n	8004418 <HAL_GPIO_Init+0x1fc>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a4d      	ldr	r2, [pc, #308]	; (8004534 <HAL_GPIO_Init+0x318>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d007      	beq.n	8004414 <HAL_GPIO_Init+0x1f8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a4c      	ldr	r2, [pc, #304]	; (8004538 <HAL_GPIO_Init+0x31c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_GPIO_Init+0x1f4>
 800440c:	2307      	movs	r3, #7
 800440e:	e00e      	b.n	800442e <HAL_GPIO_Init+0x212>
 8004410:	2308      	movs	r3, #8
 8004412:	e00c      	b.n	800442e <HAL_GPIO_Init+0x212>
 8004414:	2306      	movs	r3, #6
 8004416:	e00a      	b.n	800442e <HAL_GPIO_Init+0x212>
 8004418:	2305      	movs	r3, #5
 800441a:	e008      	b.n	800442e <HAL_GPIO_Init+0x212>
 800441c:	2304      	movs	r3, #4
 800441e:	e006      	b.n	800442e <HAL_GPIO_Init+0x212>
 8004420:	2303      	movs	r3, #3
 8004422:	e004      	b.n	800442e <HAL_GPIO_Init+0x212>
 8004424:	2302      	movs	r3, #2
 8004426:	e002      	b.n	800442e <HAL_GPIO_Init+0x212>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_GPIO_Init+0x212>
 800442c:	2300      	movs	r3, #0
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	f002 0203 	and.w	r2, r2, #3
 8004434:	0092      	lsls	r2, r2, #2
 8004436:	4093      	lsls	r3, r2
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800443e:	4937      	ldr	r1, [pc, #220]	; (800451c <HAL_GPIO_Init+0x300>)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	089b      	lsrs	r3, r3, #2
 8004444:	3302      	adds	r3, #2
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800444c:	4b3b      	ldr	r3, [pc, #236]	; (800453c <HAL_GPIO_Init+0x320>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	43db      	mvns	r3, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004470:	4a32      	ldr	r2, [pc, #200]	; (800453c <HAL_GPIO_Init+0x320>)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004476:	4b31      	ldr	r3, [pc, #196]	; (800453c <HAL_GPIO_Init+0x320>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	43db      	mvns	r3, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800449a:	4a28      	ldr	r2, [pc, #160]	; (800453c <HAL_GPIO_Init+0x320>)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80044a0:	4b26      	ldr	r3, [pc, #152]	; (800453c <HAL_GPIO_Init+0x320>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044c4:	4a1d      	ldr	r2, [pc, #116]	; (800453c <HAL_GPIO_Init+0x320>)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_GPIO_Init+0x320>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044ee:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_GPIO_Init+0x320>)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	3301      	adds	r3, #1
 80044f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	fa22 f303 	lsr.w	r3, r2, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	f47f ae91 	bne.w	800422c <HAL_GPIO_Init+0x10>
  }
}
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	40021000 	.word	0x40021000
 800451c:	40010000 	.word	0x40010000
 8004520:	48000400 	.word	0x48000400
 8004524:	48000800 	.word	0x48000800
 8004528:	48000c00 	.word	0x48000c00
 800452c:	48001000 	.word	0x48001000
 8004530:	48001400 	.word	0x48001400
 8004534:	48001800 	.word	0x48001800
 8004538:	48001c00 	.word	0x48001c00
 800453c:	40010400 	.word	0x40010400

08004540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	887b      	ldrh	r3, [r7, #2]
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
 800455c:	e001      	b.n	8004562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004562:	7bfb      	ldrb	r3, [r7, #15]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
 800457c:	4613      	mov	r3, r2
 800457e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004580:	787b      	ldrb	r3, [r7, #1]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004586:	887a      	ldrh	r2, [r7, #2]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800458c:	e002      	b.n	8004594 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e081      	b.n	80046b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd faf0 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2224      	movs	r2, #36	; 0x24
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004600:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d107      	bne.n	800461a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	e006      	b.n	8004628 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004626:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d104      	bne.n	800463a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004638:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800465c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69d9      	ldr	r1, [r3, #28]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1a      	ldr	r2, [r3, #32]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d138      	bne.n	8004746 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046de:	2302      	movs	r3, #2
 80046e0:	e032      	b.n	8004748 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2224      	movs	r2, #36	; 0x24
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0201 	bic.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004710:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6819      	ldr	r1, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b20      	cmp	r3, #32
 8004768:	d139      	bne.n	80047de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004774:	2302      	movs	r3, #2
 8004776:	e033      	b.n	80047e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2224      	movs	r2, #36	; 0x24
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <HAL_PWREx_GetVoltageRange+0x3c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fc:	d102      	bne.n	8004804 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80047fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004802:	e00b      	b.n	800481c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004812:	d102      	bne.n	800481a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004818:	e000      	b.n	800481c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800481a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40007000 	.word	0x40007000

0800482c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d141      	bne.n	80048be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800483a:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004846:	d131      	bne.n	80048ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004848:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800484e:	4a46      	ldr	r2, [pc, #280]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004858:	4b43      	ldr	r3, [pc, #268]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004860:	4a41      	ldr	r2, [pc, #260]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004866:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004868:	4b40      	ldr	r3, [pc, #256]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2232      	movs	r2, #50	; 0x32
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	4a3f      	ldr	r2, [pc, #252]	; (8004970 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	0c9b      	lsrs	r3, r3, #18
 800487a:	3301      	adds	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800487e:	e002      	b.n	8004886 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3b01      	subs	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004886:	4b38      	ldr	r3, [pc, #224]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004892:	d102      	bne.n	800489a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f2      	bne.n	8004880 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800489a:	4b33      	ldr	r3, [pc, #204]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a6:	d158      	bne.n	800495a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e057      	b.n	800495c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048ac:	4b2e      	ldr	r3, [pc, #184]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b2:	4a2d      	ldr	r2, [pc, #180]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048bc:	e04d      	b.n	800495a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c4:	d141      	bne.n	800494a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048c6:	4b28      	ldr	r3, [pc, #160]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d2:	d131      	bne.n	8004938 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d4:	4b24      	ldr	r3, [pc, #144]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048da:	4a23      	ldr	r2, [pc, #140]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048e4:	4b20      	ldr	r3, [pc, #128]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ec:	4a1e      	ldr	r2, [pc, #120]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2232      	movs	r2, #50	; 0x32
 80048fa:	fb02 f303 	mul.w	r3, r2, r3
 80048fe:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	0c9b      	lsrs	r3, r3, #18
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800490a:	e002      	b.n	8004912 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3b01      	subs	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491e:	d102      	bne.n	8004926 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f2      	bne.n	800490c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004926:	4b10      	ldr	r3, [pc, #64]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004932:	d112      	bne.n	800495a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e011      	b.n	800495c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800493e:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004948:	e007      	b.n	800495a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004952:	4a05      	ldr	r2, [pc, #20]	; (8004968 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004954:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004958:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	40007000 	.word	0x40007000
 800496c:	20000014 	.word	0x20000014
 8004970:	431bde83 	.word	0x431bde83

08004974 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_PWREx_EnableVddIO2+0x1c>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a04      	ldr	r2, [pc, #16]	; (8004990 <HAL_PWREx_EnableVddIO2+0x1c>)
 800497e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004982:	6053      	str	r3, [r2, #4]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40007000 	.word	0x40007000

08004994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f000 bc08 	b.w	80051b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a8:	4b96      	ldr	r3, [pc, #600]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 030c 	and.w	r3, r3, #12
 80049b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b2:	4b94      	ldr	r3, [pc, #592]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80e4 	beq.w	8004b92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_RCC_OscConfig+0x4c>
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b0c      	cmp	r3, #12
 80049d4:	f040 808b 	bne.w	8004aee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	f040 8087 	bne.w	8004aee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049e0:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_OscConfig+0x64>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e3df      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1a      	ldr	r2, [r3, #32]
 80049fc:	4b81      	ldr	r3, [pc, #516]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d004      	beq.n	8004a12 <HAL_RCC_OscConfig+0x7e>
 8004a08:	4b7e      	ldr	r3, [pc, #504]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a10:	e005      	b.n	8004a1e <HAL_RCC_OscConfig+0x8a>
 8004a12:	4b7c      	ldr	r3, [pc, #496]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a18:	091b      	lsrs	r3, r3, #4
 8004a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d223      	bcs.n	8004a6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fdfc 	bl	8005624 <RCC_SetFlashLatencyFromMSIRange>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e3c0      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a36:	4b73      	ldr	r3, [pc, #460]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a72      	ldr	r2, [pc, #456]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a3c:	f043 0308 	orr.w	r3, r3, #8
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4b70      	ldr	r3, [pc, #448]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	496d      	ldr	r1, [pc, #436]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a54:	4b6b      	ldr	r3, [pc, #428]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	4968      	ldr	r1, [pc, #416]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	604b      	str	r3, [r1, #4]
 8004a68:	e025      	b.n	8004ab6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a6a:	4b66      	ldr	r3, [pc, #408]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a65      	ldr	r2, [pc, #404]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a70:	f043 0308 	orr.w	r3, r3, #8
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b63      	ldr	r3, [pc, #396]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	4960      	ldr	r1, [pc, #384]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a88:	4b5e      	ldr	r3, [pc, #376]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	495b      	ldr	r1, [pc, #364]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fdbc 	bl	8005624 <RCC_SetFlashLatencyFromMSIRange>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e380      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ab6:	f000 fcc1 	bl	800543c <HAL_RCC_GetSysClockFreq>
 8004aba:	4602      	mov	r2, r0
 8004abc:	4b51      	ldr	r3, [pc, #324]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	4950      	ldr	r1, [pc, #320]	; (8004c08 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	5ccb      	ldrb	r3, [r1, r3]
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad2:	4a4e      	ldr	r2, [pc, #312]	; (8004c0c <HAL_RCC_OscConfig+0x278>)
 8004ad4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ad6:	4b4e      	ldr	r3, [pc, #312]	; (8004c10 <HAL_RCC_OscConfig+0x27c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fd fa60 	bl	8001fa0 <HAL_InitTick>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d052      	beq.n	8004b90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
 8004aec:	e364      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d032      	beq.n	8004b5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004af6:	4b43      	ldr	r3, [pc, #268]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a42      	ldr	r2, [pc, #264]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b02:	f7fd fc33 	bl	800236c <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b0a:	f7fd fc2f 	bl	800236c <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e34d      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b1c:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b28:	4b36      	ldr	r3, [pc, #216]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a35      	ldr	r2, [pc, #212]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b2e:	f043 0308 	orr.w	r3, r3, #8
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4930      	ldr	r1, [pc, #192]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b46:	4b2f      	ldr	r3, [pc, #188]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	492b      	ldr	r1, [pc, #172]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	604b      	str	r3, [r1, #4]
 8004b5a:	e01a      	b.n	8004b92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b5c:	4b29      	ldr	r3, [pc, #164]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a28      	ldr	r2, [pc, #160]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b68:	f7fd fc00 	bl	800236c <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b70:	f7fd fbfc 	bl	800236c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e31a      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b82:	4b20      	ldr	r3, [pc, #128]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x1dc>
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d073      	beq.n	8004c86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x21c>
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d10b      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb0:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d063      	beq.n	8004c84 <HAL_RCC_OscConfig+0x2f0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d15f      	bne.n	8004c84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e2f7      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd0:	d106      	bne.n	8004be0 <HAL_RCC_OscConfig+0x24c>
 8004bd2:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a0b      	ldr	r2, [pc, #44]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e025      	b.n	8004c2c <HAL_RCC_OscConfig+0x298>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be8:	d114      	bne.n	8004c14 <HAL_RCC_OscConfig+0x280>
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a02      	ldr	r2, [pc, #8]	; (8004c04 <HAL_RCC_OscConfig+0x270>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e013      	b.n	8004c2c <HAL_RCC_OscConfig+0x298>
 8004c04:	40021000 	.word	0x40021000
 8004c08:	08015d6c 	.word	0x08015d6c
 8004c0c:	20000014 	.word	0x20000014
 8004c10:	20000018 	.word	0x20000018
 8004c14:	4ba0      	ldr	r3, [pc, #640]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a9f      	ldr	r2, [pc, #636]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	4b9d      	ldr	r3, [pc, #628]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a9c      	ldr	r2, [pc, #624]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd fb9a 	bl	800236c <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7fd fb96 	bl	800236c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	; 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e2b4      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c4e:	4b92      	ldr	r3, [pc, #584]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x2a8>
 8004c5a:	e014      	b.n	8004c86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fd fb86 	bl	800236c <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c64:	f7fd fb82 	bl	800236c <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	; 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e2a0      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c76:	4b88      	ldr	r3, [pc, #544]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0x2d0>
 8004c82:	e000      	b.n	8004c86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d060      	beq.n	8004d54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x310>
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	2b0c      	cmp	r3, #12
 8004c9c:	d119      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d116      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ca4:	4b7c      	ldr	r3, [pc, #496]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_OscConfig+0x328>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e27d      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	4b76      	ldr	r3, [pc, #472]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	061b      	lsls	r3, r3, #24
 8004cca:	4973      	ldr	r1, [pc, #460]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cd0:	e040      	b.n	8004d54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d023      	beq.n	8004d22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cda:	4b6f      	ldr	r3, [pc, #444]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6e      	ldr	r2, [pc, #440]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fb41 	bl	800236c <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cee:	f7fd fb3d 	bl	800236c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e25b      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d00:	4b65      	ldr	r3, [pc, #404]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0c:	4b62      	ldr	r3, [pc, #392]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	061b      	lsls	r3, r3, #24
 8004d1a:	495f      	ldr	r1, [pc, #380]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]
 8004d20:	e018      	b.n	8004d54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d22:	4b5d      	ldr	r3, [pc, #372]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a5c      	ldr	r2, [pc, #368]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2e:	f7fd fb1d 	bl	800236c <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d36:	f7fd fb19 	bl	800236c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e237      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d48:	4b53      	ldr	r3, [pc, #332]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d03c      	beq.n	8004dda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01c      	beq.n	8004da2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d68:	4b4b      	ldr	r3, [pc, #300]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d6e:	4a4a      	ldr	r2, [pc, #296]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d78:	f7fd faf8 	bl	800236c <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d80:	f7fd faf4 	bl	800236c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e212      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d92:	4b41      	ldr	r3, [pc, #260]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0ef      	beq.n	8004d80 <HAL_RCC_OscConfig+0x3ec>
 8004da0:	e01b      	b.n	8004dda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da2:	4b3d      	ldr	r3, [pc, #244]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da8:	4a3b      	ldr	r2, [pc, #236]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db2:	f7fd fadb 	bl	800236c <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dba:	f7fd fad7 	bl	800236c <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e1f5      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dcc:	4b32      	ldr	r3, [pc, #200]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1ef      	bne.n	8004dba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80a6 	beq.w	8004f34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de8:	2300      	movs	r3, #0
 8004dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dec:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10d      	bne.n	8004e14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df8:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfc:	4a26      	ldr	r2, [pc, #152]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e02:	6593      	str	r3, [r2, #88]	; 0x58
 8004e04:	4b24      	ldr	r3, [pc, #144]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e10:	2301      	movs	r3, #1
 8004e12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e14:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <HAL_RCC_OscConfig+0x508>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d118      	bne.n	8004e52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e20:	4b1e      	ldr	r3, [pc, #120]	; (8004e9c <HAL_RCC_OscConfig+0x508>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1d      	ldr	r2, [pc, #116]	; (8004e9c <HAL_RCC_OscConfig+0x508>)
 8004e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2c:	f7fd fa9e 	bl	800236c <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e34:	f7fd fa9a 	bl	800236c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e1b8      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <HAL_RCC_OscConfig+0x508>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d108      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4d8>
 8004e5a:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e60:	4a0d      	ldr	r2, [pc, #52]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e6a:	e029      	b.n	8004ec0 <HAL_RCC_OscConfig+0x52c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b05      	cmp	r3, #5
 8004e72:	d115      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x50c>
 8004e74:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7a:	4a07      	ldr	r2, [pc, #28]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e7c:	f043 0304 	orr.w	r3, r3, #4
 8004e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e84:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8a:	4a03      	ldr	r2, [pc, #12]	; (8004e98 <HAL_RCC_OscConfig+0x504>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e94:	e014      	b.n	8004ec0 <HAL_RCC_OscConfig+0x52c>
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40007000 	.word	0x40007000
 8004ea0:	4b9d      	ldr	r3, [pc, #628]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea6:	4a9c      	ldr	r2, [pc, #624]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eb0:	4b99      	ldr	r3, [pc, #612]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb6:	4a98      	ldr	r2, [pc, #608]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004eb8:	f023 0304 	bic.w	r3, r3, #4
 8004ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d016      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fd fa50 	bl	800236c <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed0:	f7fd fa4c 	bl	800236c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e168      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee6:	4b8c      	ldr	r3, [pc, #560]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ed      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x53c>
 8004ef4:	e015      	b.n	8004f22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef6:	f7fd fa39 	bl	800236c <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7fd fa35 	bl	800236c <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e151      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f14:	4b80      	ldr	r3, [pc, #512]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ed      	bne.n	8004efe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f28:	4b7b      	ldr	r3, [pc, #492]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2c:	4a7a      	ldr	r2, [pc, #488]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d03c      	beq.n	8004fba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01c      	beq.n	8004f82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f48:	4b73      	ldr	r3, [pc, #460]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f4e:	4a72      	ldr	r2, [pc, #456]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fd fa08 	bl	800236c <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f60:	f7fd fa04 	bl	800236c <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e122      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f72:	4b69      	ldr	r3, [pc, #420]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0ef      	beq.n	8004f60 <HAL_RCC_OscConfig+0x5cc>
 8004f80:	e01b      	b.n	8004fba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f82:	4b65      	ldr	r3, [pc, #404]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f88:	4a63      	ldr	r2, [pc, #396]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fd f9eb 	bl	800236c <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f9a:	f7fd f9e7 	bl	800236c <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e105      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fac:	4b5a      	ldr	r3, [pc, #360]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1ef      	bne.n	8004f9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80f9 	beq.w	80051b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	f040 80cf 	bne.w	800516c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004fce:	4b52      	ldr	r3, [pc, #328]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 0203 	and.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d12c      	bne.n	800503c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fec:	3b01      	subs	r3, #1
 8004fee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d123      	bne.n	800503c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d11b      	bne.n	800503c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005010:	429a      	cmp	r2, r3
 8005012:	d113      	bne.n	800503c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	3b01      	subs	r3, #1
 8005022:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d109      	bne.n	800503c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	085b      	lsrs	r3, r3, #1
 8005034:	3b01      	subs	r3, #1
 8005036:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d071      	beq.n	8005120 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d068      	beq.n	8005114 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005042:	4b35      	ldr	r3, [pc, #212]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d105      	bne.n	800505a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800504e:	4b32      	ldr	r3, [pc, #200]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0ac      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800505e:	4b2e      	ldr	r3, [pc, #184]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a2d      	ldr	r2, [pc, #180]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8005064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005068:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800506a:	f7fd f97f 	bl	800236c <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005072:	f7fd f97b 	bl	800236c <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e099      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005084:	4b24      	ldr	r3, [pc, #144]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f0      	bne.n	8005072 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005090:	4b21      	ldr	r3, [pc, #132]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	4b21      	ldr	r3, [pc, #132]	; (800511c <HAL_RCC_OscConfig+0x788>)
 8005096:	4013      	ands	r3, r2
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050a0:	3a01      	subs	r2, #1
 80050a2:	0112      	lsls	r2, r2, #4
 80050a4:	4311      	orrs	r1, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050aa:	0212      	lsls	r2, r2, #8
 80050ac:	4311      	orrs	r1, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050b2:	0852      	lsrs	r2, r2, #1
 80050b4:	3a01      	subs	r2, #1
 80050b6:	0552      	lsls	r2, r2, #21
 80050b8:	4311      	orrs	r1, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050be:	0852      	lsrs	r2, r2, #1
 80050c0:	3a01      	subs	r2, #1
 80050c2:	0652      	lsls	r2, r2, #25
 80050c4:	4311      	orrs	r1, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050ca:	06d2      	lsls	r2, r2, #27
 80050cc:	430a      	orrs	r2, r1
 80050ce:	4912      	ldr	r1, [pc, #72]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050d4:	4b10      	ldr	r3, [pc, #64]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a0f      	ldr	r2, [pc, #60]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 80050da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050e0:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4a0c      	ldr	r2, [pc, #48]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 80050e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050ec:	f7fd f93e 	bl	800236c <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f4:	f7fd f93a 	bl	800236c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e058      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005106:	4b04      	ldr	r3, [pc, #16]	; (8005118 <HAL_RCC_OscConfig+0x784>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005112:	e050      	b.n	80051b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e04f      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
 8005118:	40021000 	.word	0x40021000
 800511c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005120:	4b27      	ldr	r3, [pc, #156]	; (80051c0 <HAL_RCC_OscConfig+0x82c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d144      	bne.n	80051b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800512c:	4b24      	ldr	r3, [pc, #144]	; (80051c0 <HAL_RCC_OscConfig+0x82c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a23      	ldr	r2, [pc, #140]	; (80051c0 <HAL_RCC_OscConfig+0x82c>)
 8005132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005136:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005138:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <HAL_RCC_OscConfig+0x82c>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <HAL_RCC_OscConfig+0x82c>)
 800513e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005142:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005144:	f7fd f912 	bl	800236c <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800514c:	f7fd f90e 	bl	800236c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e02c      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800515e:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <HAL_RCC_OscConfig+0x82c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x7b8>
 800516a:	e024      	b.n	80051b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b0c      	cmp	r3, #12
 8005170:	d01f      	beq.n	80051b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_RCC_OscConfig+0x82c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <HAL_RCC_OscConfig+0x82c>)
 8005178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800517c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517e:	f7fd f8f5 	bl	800236c <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005186:	f7fd f8f1 	bl	800236c <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e00f      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005198:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <HAL_RCC_OscConfig+0x82c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f0      	bne.n	8005186 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <HAL_RCC_OscConfig+0x82c>)
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	4905      	ldr	r1, [pc, #20]	; (80051c0 <HAL_RCC_OscConfig+0x82c>)
 80051aa:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <HAL_RCC_OscConfig+0x830>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	60cb      	str	r3, [r1, #12]
 80051b0:	e001      	b.n	80051b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40021000 	.word	0x40021000
 80051c4:	feeefffc 	.word	0xfeeefffc

080051c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e11d      	b.n	800541c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051e0:	4b90      	ldr	r3, [pc, #576]	; (8005424 <HAL_RCC_ClockConfig+0x25c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d910      	bls.n	8005210 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ee:	4b8d      	ldr	r3, [pc, #564]	; (8005424 <HAL_RCC_ClockConfig+0x25c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f023 020f 	bic.w	r2, r3, #15
 80051f6:	498b      	ldr	r1, [pc, #556]	; (8005424 <HAL_RCC_ClockConfig+0x25c>)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fe:	4b89      	ldr	r3, [pc, #548]	; (8005424 <HAL_RCC_ClockConfig+0x25c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d001      	beq.n	8005210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e105      	b.n	800541c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d010      	beq.n	800523e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	4b81      	ldr	r3, [pc, #516]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005228:	429a      	cmp	r2, r3
 800522a:	d908      	bls.n	800523e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800522c:	4b7e      	ldr	r3, [pc, #504]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	497b      	ldr	r1, [pc, #492]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d079      	beq.n	800533e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d11e      	bne.n	8005290 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005252:	4b75      	ldr	r3, [pc, #468]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e0dc      	b.n	800541c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005262:	f000 fa39 	bl	80056d8 <RCC_GetSysClockFreqFromPLLSource>
 8005266:	4603      	mov	r3, r0
 8005268:	4a70      	ldr	r2, [pc, #448]	; (800542c <HAL_RCC_ClockConfig+0x264>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d946      	bls.n	80052fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800526e:	4b6e      	ldr	r3, [pc, #440]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d140      	bne.n	80052fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800527a:	4b6b      	ldr	r3, [pc, #428]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005282:	4a69      	ldr	r2, [pc, #420]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 8005284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005288:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e035      	b.n	80052fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b02      	cmp	r3, #2
 8005296:	d107      	bne.n	80052a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005298:	4b63      	ldr	r3, [pc, #396]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d115      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0b9      	b.n	800541c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d107      	bne.n	80052c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052b0:	4b5d      	ldr	r3, [pc, #372]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d109      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0ad      	b.n	800541c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052c0:	4b59      	ldr	r3, [pc, #356]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0a5      	b.n	800541c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80052d0:	f000 f8b4 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80052d4:	4603      	mov	r3, r0
 80052d6:	4a55      	ldr	r2, [pc, #340]	; (800542c <HAL_RCC_ClockConfig+0x264>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d90f      	bls.n	80052fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80052dc:	4b52      	ldr	r3, [pc, #328]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d109      	bne.n	80052fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052e8:	4b4f      	ldr	r3, [pc, #316]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f0:	4a4d      	ldr	r2, [pc, #308]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 80052f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052fc:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f023 0203 	bic.w	r2, r3, #3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	4947      	ldr	r1, [pc, #284]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530e:	f7fd f82d 	bl	800236c <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005314:	e00a      	b.n	800532c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005316:	f7fd f829 	bl	800236c <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	f241 3288 	movw	r2, #5000	; 0x1388
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e077      	b.n	800541c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532c:	4b3e      	ldr	r3, [pc, #248]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 020c 	and.w	r2, r3, #12
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	429a      	cmp	r2, r3
 800533c:	d1eb      	bne.n	8005316 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	d105      	bne.n	8005350 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005344:	4b38      	ldr	r3, [pc, #224]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	4a37      	ldr	r2, [pc, #220]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 800534a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800534e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d010      	beq.n	800537e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	4b31      	ldr	r3, [pc, #196]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005368:	429a      	cmp	r2, r3
 800536a:	d208      	bcs.n	800537e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800536c:	4b2e      	ldr	r3, [pc, #184]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	492b      	ldr	r1, [pc, #172]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800537e:	4b29      	ldr	r3, [pc, #164]	; (8005424 <HAL_RCC_ClockConfig+0x25c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d210      	bcs.n	80053ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538c:	4b25      	ldr	r3, [pc, #148]	; (8005424 <HAL_RCC_ClockConfig+0x25c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f023 020f 	bic.w	r2, r3, #15
 8005394:	4923      	ldr	r1, [pc, #140]	; (8005424 <HAL_RCC_ClockConfig+0x25c>)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539c:	4b21      	ldr	r3, [pc, #132]	; (8005424 <HAL_RCC_ClockConfig+0x25c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e036      	b.n	800541c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ba:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	4918      	ldr	r1, [pc, #96]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d009      	beq.n	80053ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053d8:	4b13      	ldr	r3, [pc, #76]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4910      	ldr	r1, [pc, #64]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053ec:	f000 f826 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80053f0:	4602      	mov	r2, r0
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <HAL_RCC_ClockConfig+0x260>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	091b      	lsrs	r3, r3, #4
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	490c      	ldr	r1, [pc, #48]	; (8005430 <HAL_RCC_ClockConfig+0x268>)
 80053fe:	5ccb      	ldrb	r3, [r1, r3]
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
 8005408:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <HAL_RCC_ClockConfig+0x26c>)
 800540a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <HAL_RCC_ClockConfig+0x270>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7fc fdc5 	bl	8001fa0 <HAL_InitTick>
 8005416:	4603      	mov	r3, r0
 8005418:	73fb      	strb	r3, [r7, #15]

  return status;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40022000 	.word	0x40022000
 8005428:	40021000 	.word	0x40021000
 800542c:	04c4b400 	.word	0x04c4b400
 8005430:	08015d6c 	.word	0x08015d6c
 8005434:	20000014 	.word	0x20000014
 8005438:	20000018 	.word	0x20000018

0800543c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	2300      	movs	r3, #0
 8005448:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544a:	4b3e      	ldr	r3, [pc, #248]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 030c 	and.w	r3, r3, #12
 8005452:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005454:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_GetSysClockFreq+0x34>
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b0c      	cmp	r3, #12
 8005468:	d121      	bne.n	80054ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d11e      	bne.n	80054ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005470:	4b34      	ldr	r3, [pc, #208]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d107      	bne.n	800548c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800547c:	4b31      	ldr	r3, [pc, #196]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 800547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	e005      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800548c:	4b2d      	ldr	r3, [pc, #180]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005498:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <HAL_RCC_GetSysClockFreq+0x10c>)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10d      	bne.n	80054c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d102      	bne.n	80054ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <HAL_RCC_GetSysClockFreq+0x110>)
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	e004      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054c0:	4b22      	ldr	r3, [pc, #136]	; (800554c <HAL_RCC_GetSysClockFreq+0x110>)
 80054c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b0c      	cmp	r3, #12
 80054c8:	d134      	bne.n	8005534 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054ca:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d003      	beq.n	80054e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d003      	beq.n	80054e8 <HAL_RCC_GetSysClockFreq+0xac>
 80054e0:	e005      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054e2:	4b1a      	ldr	r3, [pc, #104]	; (800554c <HAL_RCC_GetSysClockFreq+0x110>)
 80054e4:	617b      	str	r3, [r7, #20]
      break;
 80054e6:	e005      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054e8:	4b18      	ldr	r3, [pc, #96]	; (800554c <HAL_RCC_GetSysClockFreq+0x110>)
 80054ea:	617b      	str	r3, [r7, #20]
      break;
 80054ec:	e002      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	617b      	str	r3, [r7, #20]
      break;
 80054f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054f4:	4b13      	ldr	r3, [pc, #76]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	3301      	adds	r3, #1
 8005500:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005502:	4b10      	ldr	r3, [pc, #64]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	fb03 f202 	mul.w	r2, r3, r2
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	fbb2 f3f3 	udiv	r3, r2, r3
 8005518:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	0e5b      	lsrs	r3, r3, #25
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	3301      	adds	r3, #1
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005534:	69bb      	ldr	r3, [r7, #24]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3724      	adds	r7, #36	; 0x24
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40021000 	.word	0x40021000
 8005548:	08015d84 	.word	0x08015d84
 800554c:	00f42400 	.word	0x00f42400

08005550 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <HAL_RCC_GetHCLKFreq+0x14>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000014 	.word	0x20000014

08005568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800556c:	f7ff fff0 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4904      	ldr	r1, [pc, #16]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40021000 	.word	0x40021000
 8005590:	08015d7c 	.word	0x08015d7c

08005594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005598:	f7ff ffda 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0adb      	lsrs	r3, r3, #11
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4904      	ldr	r1, [pc, #16]	; (80055bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40021000 	.word	0x40021000
 80055bc:	08015d7c 	.word	0x08015d7c

080055c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	220f      	movs	r2, #15
 80055ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80055d0:	4b12      	ldr	r3, [pc, #72]	; (800561c <HAL_RCC_GetClockConfig+0x5c>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0203 	and.w	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <HAL_RCC_GetClockConfig+0x5c>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <HAL_RCC_GetClockConfig+0x5c>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80055f4:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCC_GetClockConfig+0x5c>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	08db      	lsrs	r3, r3, #3
 80055fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005602:	4b07      	ldr	r3, [pc, #28]	; (8005620 <HAL_RCC_GetClockConfig+0x60>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 020f 	and.w	r2, r3, #15
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	601a      	str	r2, [r3, #0]
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000
 8005620:	40022000 	.word	0x40022000

08005624 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005630:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800563c:	f7ff f8d6 	bl	80047ec <HAL_PWREx_GetVoltageRange>
 8005640:	6178      	str	r0, [r7, #20]
 8005642:	e014      	b.n	800566e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005644:	4b22      	ldr	r3, [pc, #136]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005648:	4a21      	ldr	r2, [pc, #132]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800564a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564e:	6593      	str	r3, [r2, #88]	; 0x58
 8005650:	4b1f      	ldr	r3, [pc, #124]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800565c:	f7ff f8c6 	bl	80047ec <HAL_PWREx_GetVoltageRange>
 8005660:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005662:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005666:	4a1a      	ldr	r2, [pc, #104]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800566c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005674:	d10b      	bne.n	800568e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b80      	cmp	r3, #128	; 0x80
 800567a:	d913      	bls.n	80056a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2ba0      	cmp	r3, #160	; 0xa0
 8005680:	d902      	bls.n	8005688 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005682:	2302      	movs	r3, #2
 8005684:	613b      	str	r3, [r7, #16]
 8005686:	e00d      	b.n	80056a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005688:	2301      	movs	r3, #1
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	e00a      	b.n	80056a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b7f      	cmp	r3, #127	; 0x7f
 8005692:	d902      	bls.n	800569a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005694:	2302      	movs	r3, #2
 8005696:	613b      	str	r3, [r7, #16]
 8005698:	e004      	b.n	80056a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b70      	cmp	r3, #112	; 0x70
 800569e:	d101      	bne.n	80056a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056a0:	2301      	movs	r3, #1
 80056a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f023 020f 	bic.w	r2, r3, #15
 80056ac:	4909      	ldr	r1, [pc, #36]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056b4:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d001      	beq.n	80056c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e000      	b.n	80056c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40022000 	.word	0x40022000

080056d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056de:	4b2d      	ldr	r3, [pc, #180]	; (8005794 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d00b      	beq.n	8005706 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d825      	bhi.n	8005740 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d008      	beq.n	800570c <RCC_GetSysClockFreqFromPLLSource+0x34>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d11f      	bne.n	8005740 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005700:	4b25      	ldr	r3, [pc, #148]	; (8005798 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005702:	613b      	str	r3, [r7, #16]
    break;
 8005704:	e01f      	b.n	8005746 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005706:	4b24      	ldr	r3, [pc, #144]	; (8005798 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005708:	613b      	str	r3, [r7, #16]
    break;
 800570a:	e01c      	b.n	8005746 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800570c:	4b21      	ldr	r3, [pc, #132]	; (8005794 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d107      	bne.n	8005728 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005718:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800571a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800571e:	0a1b      	lsrs	r3, r3, #8
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	e005      	b.n	8005734 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005728:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	091b      	lsrs	r3, r3, #4
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005734:	4a19      	ldr	r2, [pc, #100]	; (800579c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573c:	613b      	str	r3, [r7, #16]
    break;
 800573e:	e002      	b.n	8005746 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	613b      	str	r3, [r7, #16]
    break;
 8005744:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005746:	4b13      	ldr	r3, [pc, #76]	; (8005794 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	091b      	lsrs	r3, r3, #4
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	3301      	adds	r3, #1
 8005752:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005754:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	fb03 f202 	mul.w	r2, r3, r2
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	fbb2 f3f3 	udiv	r3, r2, r3
 800576a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800576c:	4b09      	ldr	r3, [pc, #36]	; (8005794 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	0e5b      	lsrs	r3, r3, #25
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	3301      	adds	r3, #1
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005786:	683b      	ldr	r3, [r7, #0]
}
 8005788:	4618      	mov	r0, r3
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	40021000 	.word	0x40021000
 8005798:	00f42400 	.word	0x00f42400
 800579c:	08015d84 	.word	0x08015d84

080057a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057a8:	2300      	movs	r3, #0
 80057aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057ac:	2300      	movs	r3, #0
 80057ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d040      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	d02a      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057c4:	2b80      	cmp	r3, #128	; 0x80
 80057c6:	d825      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057c8:	2b60      	cmp	r3, #96	; 0x60
 80057ca:	d026      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057cc:	2b60      	cmp	r3, #96	; 0x60
 80057ce:	d821      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d006      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d81d      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d009      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d010      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80057e0:	e018      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057e2:	4b89      	ldr	r3, [pc, #548]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	4a88      	ldr	r2, [pc, #544]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ec:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057ee:	e015      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	2100      	movs	r1, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 fa82 	bl	8006d00 <RCCEx_PLLSAI1_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005800:	e00c      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3320      	adds	r3, #32
 8005806:	2100      	movs	r1, #0
 8005808:	4618      	mov	r0, r3
 800580a:	f001 fb6d 	bl	8006ee8 <RCCEx_PLLSAI2_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005812:	e003      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	74fb      	strb	r3, [r7, #19]
      break;
 8005818:	e000      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800581a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10b      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005822:	4b79      	ldr	r3, [pc, #484]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005828:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005830:	4975      	ldr	r1, [pc, #468]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005838:	e001      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d047      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005852:	d030      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005858:	d82a      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800585a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800585e:	d02a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005864:	d824      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800586a:	d008      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800586c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005870:	d81e      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800587a:	d010      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800587c:	e018      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800587e:	4b62      	ldr	r3, [pc, #392]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	4a61      	ldr	r2, [pc, #388]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005888:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800588a:	e015      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3304      	adds	r3, #4
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f001 fa34 	bl	8006d00 <RCCEx_PLLSAI1_Config>
 8005898:	4603      	mov	r3, r0
 800589a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800589c:	e00c      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3320      	adds	r3, #32
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 fb1f 	bl	8006ee8 <RCCEx_PLLSAI2_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058ae:	e003      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	74fb      	strb	r3, [r7, #19]
      break;
 80058b4:	e000      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80058b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058be:	4b52      	ldr	r3, [pc, #328]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	494e      	ldr	r1, [pc, #312]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80058d4:	e001      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d6:	7cfb      	ldrb	r3, [r7, #19]
 80058d8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 809f 	beq.w	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058e8:	2300      	movs	r3, #0
 80058ea:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058ec:	4b46      	ldr	r3, [pc, #280]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80058fc:	2300      	movs	r3, #0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00d      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	4b41      	ldr	r3, [pc, #260]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005906:	4a40      	ldr	r2, [pc, #256]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590c:	6593      	str	r3, [r2, #88]	; 0x58
 800590e:	4b3e      	ldr	r3, [pc, #248]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005916:	60bb      	str	r3, [r7, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800591a:	2301      	movs	r3, #1
 800591c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800591e:	4b3b      	ldr	r3, [pc, #236]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a3a      	ldr	r2, [pc, #232]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005928:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800592a:	f7fc fd1f 	bl	800236c <HAL_GetTick>
 800592e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005930:	e009      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005932:	f7fc fd1b 	bl	800236c <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d902      	bls.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	74fb      	strb	r3, [r7, #19]
        break;
 8005944:	e005      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005946:	4b31      	ldr	r3, [pc, #196]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ef      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005952:	7cfb      	ldrb	r3, [r7, #19]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d15b      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005958:	4b2b      	ldr	r3, [pc, #172]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005962:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01f      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	429a      	cmp	r2, r3
 8005974:	d019      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005976:	4b24      	ldr	r3, [pc, #144]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005980:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005982:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005988:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800598a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005992:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005998:	4a1b      	ldr	r2, [pc, #108]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800599a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059a2:	4a19      	ldr	r2, [pc, #100]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d016      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b4:	f7fc fcda 	bl	800236c <HAL_GetTick>
 80059b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ba:	e00b      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059bc:	f7fc fcd6 	bl	800236c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d902      	bls.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	74fb      	strb	r3, [r7, #19]
            break;
 80059d2:	e006      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0ec      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80059e2:	7cfb      	ldrb	r3, [r7, #19]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10c      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059e8:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059f8:	4903      	ldr	r1, [pc, #12]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a00:	e008      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a02:	7cfb      	ldrb	r3, [r7, #19]
 8005a04:	74bb      	strb	r3, [r7, #18]
 8005a06:	e005      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	7cfb      	ldrb	r3, [r7, #19]
 8005a12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a14:	7c7b      	ldrb	r3, [r7, #17]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d105      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a1a:	4ba0      	ldr	r3, [pc, #640]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1e:	4a9f      	ldr	r2, [pc, #636]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a32:	4b9a      	ldr	r3, [pc, #616]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	f023 0203 	bic.w	r2, r3, #3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a40:	4996      	ldr	r1, [pc, #600]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a54:	4b91      	ldr	r3, [pc, #580]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f023 020c 	bic.w	r2, r3, #12
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	498e      	ldr	r1, [pc, #568]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a76:	4b89      	ldr	r3, [pc, #548]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a84:	4985      	ldr	r1, [pc, #532]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a98:	4b80      	ldr	r3, [pc, #512]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa6:	497d      	ldr	r1, [pc, #500]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aba:	4b78      	ldr	r3, [pc, #480]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac8:	4974      	ldr	r1, [pc, #464]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005adc:	4b6f      	ldr	r3, [pc, #444]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aea:	496c      	ldr	r1, [pc, #432]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005afe:	4b67      	ldr	r3, [pc, #412]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b0c:	4963      	ldr	r1, [pc, #396]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b20:	4b5e      	ldr	r3, [pc, #376]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b2e:	495b      	ldr	r1, [pc, #364]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b42:	4b56      	ldr	r3, [pc, #344]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b50:	4952      	ldr	r1, [pc, #328]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b64:	4b4d      	ldr	r3, [pc, #308]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b72:	494a      	ldr	r1, [pc, #296]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b86:	4b45      	ldr	r3, [pc, #276]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b94:	4941      	ldr	r1, [pc, #260]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ba8:	4b3c      	ldr	r3, [pc, #240]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bae:	f023 0203 	bic.w	r2, r3, #3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb6:	4939      	ldr	r1, [pc, #228]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d028      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bca:	4b34      	ldr	r3, [pc, #208]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd8:	4930      	ldr	r1, [pc, #192]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005be8:	d106      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bea:	4b2c      	ldr	r3, [pc, #176]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	4a2b      	ldr	r2, [pc, #172]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bf4:	60d3      	str	r3, [r2, #12]
 8005bf6:	e011      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c00:	d10c      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3304      	adds	r3, #4
 8005c06:	2101      	movs	r1, #1
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 f879 	bl	8006d00 <RCCEx_PLLSAI1_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c12:	7cfb      	ldrb	r3, [r7, #19]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005c18:	7cfb      	ldrb	r3, [r7, #19]
 8005c1a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d04d      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c30:	d108      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005c32:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c38:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c3e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005c42:	e012      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005c44:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c4a:	4a14      	ldr	r2, [pc, #80]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c50:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005c54:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c62:	490e      	ldr	r1, [pc, #56]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c72:	d106      	bne.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c74:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c7e:	60d3      	str	r3, [r2, #12]
 8005c80:	e020      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c8a:	d109      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c8c:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	4a02      	ldr	r2, [pc, #8]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c96:	60d3      	str	r3, [r2, #12]
 8005c98:	e014      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005c9a:	bf00      	nop
 8005c9c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ca8:	d10c      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 f825 	bl	8006d00 <RCCEx_PLLSAI1_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cba:	7cfb      	ldrb	r3, [r7, #19]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d028      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cd0:	4b7a      	ldr	r3, [pc, #488]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cde:	4977      	ldr	r1, [pc, #476]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cee:	d106      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cf0:	4b72      	ldr	r3, [pc, #456]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	4a71      	ldr	r2, [pc, #452]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cfa:	60d3      	str	r3, [r2, #12]
 8005cfc:	e011      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d06:	d10c      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fff6 	bl	8006d00 <RCCEx_PLLSAI1_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005d1e:	7cfb      	ldrb	r3, [r7, #19]
 8005d20:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01e      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d2e:	4b63      	ldr	r3, [pc, #396]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d3e:	495f      	ldr	r1, [pc, #380]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d50:	d10c      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	3304      	adds	r3, #4
 8005d56:	2102      	movs	r1, #2
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 ffd1 	bl	8006d00 <RCCEx_PLLSAI1_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d62:	7cfb      	ldrb	r3, [r7, #19]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005d68:	7cfb      	ldrb	r3, [r7, #19]
 8005d6a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d78:	4b50      	ldr	r3, [pc, #320]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d7e:	f023 0204 	bic.w	r2, r3, #4
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d88:	494c      	ldr	r1, [pc, #304]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005d9c:	4b47      	ldr	r3, [pc, #284]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005da2:	f023 0218 	bic.w	r2, r3, #24
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	4943      	ldr	r1, [pc, #268]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d035      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005dc0:	4b3e      	ldr	r3, [pc, #248]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a3d      	ldr	r2, [pc, #244]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dcc:	f7fc face 	bl	800236c <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dd2:	e009      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dd4:	f7fc faca 	bl	800236c <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d902      	bls.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	74fb      	strb	r3, [r7, #19]
        break;
 8005de6:	e005      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005de8:	4b34      	ldr	r3, [pc, #208]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1ef      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005df4:	7cfb      	ldrb	r3, [r7, #19]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d113      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005dfa:	4b30      	ldr	r3, [pc, #192]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e0a:	492c      	ldr	r1, [pc, #176]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3320      	adds	r3, #32
 8005e16:	2102      	movs	r1, #2
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 f865 	bl	8006ee8 <RCCEx_PLLSAI2_Config>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005e22:	7cfb      	ldrb	r3, [r7, #19]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005e28:	7cfb      	ldrb	r3, [r7, #19]
 8005e2a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01e      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005e38:	4b20      	ldr	r3, [pc, #128]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e48:	491c      	ldr	r1, [pc, #112]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5a:	d10c      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3320      	adds	r3, #32
 8005e60:	2101      	movs	r1, #1
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 f840 	bl	8006ee8 <RCCEx_PLLSAI2_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e6c:	7cfb      	ldrb	r3, [r7, #19]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005e72:	7cfb      	ldrb	r3, [r7, #19]
 8005e74:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d017      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e82:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e92:	490a      	ldr	r1, [pc, #40]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea4:	d105      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea6:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	4a04      	ldr	r2, [pc, #16]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005eac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eb0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005eb2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40021000 	.word	0x40021000

08005ec0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ed2:	d13e      	bne.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005ed4:	4bb6      	ldr	r3, [pc, #728]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ede:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee6:	d028      	beq.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eee:	f200 86f2 	bhi.w	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef8:	d005      	beq.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f00:	d00e      	beq.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005f02:	f000 bee8 	b.w	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f06:	4baa      	ldr	r3, [pc, #680]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	f040 86e2 	bne.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8005f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1a:	61fb      	str	r3, [r7, #28]
      break;
 8005f1c:	f000 bedd 	b.w	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005f20:	4ba3      	ldr	r3, [pc, #652]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	f040 86d7 	bne.w	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8005f30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005f34:	61fb      	str	r3, [r7, #28]
      break;
 8005f36:	f000 bed2 	b.w	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f3a:	4b9d      	ldr	r3, [pc, #628]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f46:	f040 86cc 	bne.w	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8005f4a:	4b9a      	ldr	r3, [pc, #616]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005f4c:	61fb      	str	r3, [r7, #28]
      break;
 8005f4e:	f000 bec8 	b.w	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f52:	4b97      	ldr	r3, [pc, #604]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d036      	beq.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d840      	bhi.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d003      	beq.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d020      	beq.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005f74:	e039      	b.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f76:	4b8e      	ldr	r3, [pc, #568]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d116      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005f82:	4b8b      	ldr	r3, [pc, #556]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	091b      	lsrs	r3, r3, #4
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	e005      	b.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005f9a:	4b85      	ldr	r3, [pc, #532]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa0:	0a1b      	lsrs	r3, r3, #8
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	4a84      	ldr	r2, [pc, #528]	; (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005fae:	e01f      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61bb      	str	r3, [r7, #24]
      break;
 8005fb4:	e01c      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fb6:	4b7e      	ldr	r3, [pc, #504]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc2:	d102      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005fc4:	4b7d      	ldr	r3, [pc, #500]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005fc6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005fc8:	e012      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61bb      	str	r3, [r7, #24]
      break;
 8005fce:	e00f      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fd0:	4b77      	ldr	r3, [pc, #476]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fdc:	d102      	bne.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005fde:	4b77      	ldr	r3, [pc, #476]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005fe0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005fe2:	e005      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
      break;
 8005fe8:	e002      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
      break;
 8005fee:	bf00      	nop
    }

    switch(PeriphClk)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ff6:	f000 8604 	beq.w	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006000:	f200 8671 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800600a:	f000 8467 	beq.w	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006014:	f200 8667 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800601e:	f000 852f 	beq.w	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006028:	f200 865d 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006032:	f000 8185 	beq.w	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800603c:	f200 8653 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006046:	f000 80cb 	beq.w	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006050:	f200 8649 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605a:	f000 842e 	beq.w	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006064:	f200 863f 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800606e:	f000 83e2 	beq.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006078:	f200 8635 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006082:	f000 80ad 	beq.w	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608c:	f200 862b 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006096:	f000 809b 	beq.w	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a0:	f200 8621 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060aa:	f000 8089 	beq.w	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b4:	f200 8617 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060be:	f000 8552 	beq.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c8:	f200 860d 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d2:	f000 84fe 	beq.w	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060dc:	f200 8603 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e6:	f000 849f 	beq.w	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f0:	f200 85f9 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b80      	cmp	r3, #128	; 0x80
 80060f8:	f000 846a 	beq.w	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	f200 85f1 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b20      	cmp	r3, #32
 8006108:	d84c      	bhi.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 85ea 	beq.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3b01      	subs	r3, #1
 8006116:	2b1f      	cmp	r3, #31
 8006118:	f200 85e5 	bhi.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800611c:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	08006535 	.word	0x08006535
 8006128:	080065a3 	.word	0x080065a3
 800612c:	08006ce7 	.word	0x08006ce7
 8006130:	08006637 	.word	0x08006637
 8006134:	08006ce7 	.word	0x08006ce7
 8006138:	08006ce7 	.word	0x08006ce7
 800613c:	08006ce7 	.word	0x08006ce7
 8006140:	080066af 	.word	0x080066af
 8006144:	08006ce7 	.word	0x08006ce7
 8006148:	08006ce7 	.word	0x08006ce7
 800614c:	08006ce7 	.word	0x08006ce7
 8006150:	08006ce7 	.word	0x08006ce7
 8006154:	08006ce7 	.word	0x08006ce7
 8006158:	08006ce7 	.word	0x08006ce7
 800615c:	08006ce7 	.word	0x08006ce7
 8006160:	08006733 	.word	0x08006733
 8006164:	08006ce7 	.word	0x08006ce7
 8006168:	08006ce7 	.word	0x08006ce7
 800616c:	08006ce7 	.word	0x08006ce7
 8006170:	08006ce7 	.word	0x08006ce7
 8006174:	08006ce7 	.word	0x08006ce7
 8006178:	08006ce7 	.word	0x08006ce7
 800617c:	08006ce7 	.word	0x08006ce7
 8006180:	08006ce7 	.word	0x08006ce7
 8006184:	08006ce7 	.word	0x08006ce7
 8006188:	08006ce7 	.word	0x08006ce7
 800618c:	08006ce7 	.word	0x08006ce7
 8006190:	08006ce7 	.word	0x08006ce7
 8006194:	08006ce7 	.word	0x08006ce7
 8006198:	08006ce7 	.word	0x08006ce7
 800619c:	08006ce7 	.word	0x08006ce7
 80061a0:	080067b5 	.word	0x080067b5
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	f000 83e6 	beq.w	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80061ac:	f000 bd9b 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80061b0:	40021000 	.word	0x40021000
 80061b4:	0007a120 	.word	0x0007a120
 80061b8:	08015d84 	.word	0x08015d84
 80061bc:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80061c0:	69b9      	ldr	r1, [r7, #24]
 80061c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80061c6:	f000 ff83 	bl	80070d0 <RCCEx_GetSAIxPeriphCLKFreq>
 80061ca:	61f8      	str	r0, [r7, #28]
      break;
 80061cc:	f000 bd8e 	b.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80061d0:	69b9      	ldr	r1, [r7, #24]
 80061d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80061d6:	f000 ff7b 	bl	80070d0 <RCCEx_GetSAIxPeriphCLKFreq>
 80061da:	61f8      	str	r0, [r7, #28]
      break;
 80061dc:	f000 bd86 	b.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80061e0:	4b9a      	ldr	r3, [pc, #616]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061f2:	d015      	beq.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061fa:	f200 8092 	bhi.w	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006204:	d029      	beq.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800620c:	f200 8089 	bhi.w	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d07b      	beq.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800621c:	d04a      	beq.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 800621e:	e080      	b.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006220:	4b8a      	ldr	r3, [pc, #552]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b02      	cmp	r3, #2
 800622a:	d17d      	bne.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800622c:	4b87      	ldr	r3, [pc, #540]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8006238:	4b84      	ldr	r3, [pc, #528]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	e005      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8006244:	4b81      	ldr	r3, [pc, #516]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	4a7f      	ldr	r2, [pc, #508]	; (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006256:	61fb      	str	r3, [r7, #28]
          break;
 8006258:	e066      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800625a:	4b7c      	ldr	r3, [pc, #496]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006266:	d162      	bne.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006268:	4b78      	ldr	r3, [pc, #480]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006274:	d15b      	bne.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006276:	4b75      	ldr	r3, [pc, #468]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	0a1b      	lsrs	r3, r3, #8
 800627c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006280:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	fb03 f202 	mul.w	r2, r3, r2
 800628a:	4b70      	ldr	r3, [pc, #448]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	091b      	lsrs	r3, r3, #4
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	3301      	adds	r3, #1
 8006296:	fbb2 f3f3 	udiv	r3, r2, r3
 800629a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800629c:	4b6b      	ldr	r3, [pc, #428]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	0d5b      	lsrs	r3, r3, #21
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	3301      	adds	r3, #1
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b0:	61fb      	str	r3, [r7, #28]
          break;
 80062b2:	e03c      	b.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80062b4:	4b65      	ldr	r3, [pc, #404]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062c0:	d138      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80062c2:	4b62      	ldr	r3, [pc, #392]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ce:	d131      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80062d0:	4b5e      	ldr	r3, [pc, #376]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	0a1b      	lsrs	r3, r3, #8
 80062d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062da:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	fb03 f202 	mul.w	r2, r3, r2
 80062e4:	4b59      	ldr	r3, [pc, #356]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	091b      	lsrs	r3, r3, #4
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	3301      	adds	r3, #1
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80062f6:	4b55      	ldr	r3, [pc, #340]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	0d5b      	lsrs	r3, r3, #21
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	3301      	adds	r3, #1
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	fbb2 f3f3 	udiv	r3, r2, r3
 800630a:	61fb      	str	r3, [r7, #28]
          break;
 800630c:	e012      	b.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800630e:	4b4f      	ldr	r3, [pc, #316]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006310:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b02      	cmp	r3, #2
 800631a:	d10e      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 800631c:	4b4d      	ldr	r3, [pc, #308]	; (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800631e:	61fb      	str	r3, [r7, #28]
          break;
 8006320:	e00b      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8006322:	bf00      	nop
 8006324:	f000 bce2 	b.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006328:	bf00      	nop
 800632a:	f000 bcdf 	b.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800632e:	bf00      	nop
 8006330:	f000 bcdc 	b.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006334:	bf00      	nop
 8006336:	f000 bcd9 	b.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800633a:	bf00      	nop
        break;
 800633c:	f000 bcd6 	b.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006340:	4b42      	ldr	r3, [pc, #264]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800634e:	d13d      	bne.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006350:	4b3e      	ldr	r3, [pc, #248]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006358:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800635c:	f040 84c5 	bne.w	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006360:	4b3a      	ldr	r3, [pc, #232]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800636c:	f040 84bd 	bne.w	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006370:	4b36      	ldr	r3, [pc, #216]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	0a1b      	lsrs	r3, r3, #8
 8006376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	fb03 f202 	mul.w	r2, r3, r2
 8006384:	4b31      	ldr	r3, [pc, #196]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	3301      	adds	r3, #1
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006396:	4b2d      	ldr	r3, [pc, #180]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	0edb      	lsrs	r3, r3, #27
 800639c:	f003 031f 	and.w	r3, r3, #31
 80063a0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80063a8:	4b28      	ldr	r3, [pc, #160]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 80063b4:	2311      	movs	r3, #17
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e001      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 80063ba:	2307      	movs	r3, #7
 80063bc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c6:	61fb      	str	r3, [r7, #28]
      break;
 80063c8:	f000 bc8f 	b.w	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80063cc:	4b1f      	ldr	r3, [pc, #124]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80063de:	d016      	beq.n	800640e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80063e6:	f200 809b 	bhi.w	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063f0:	d032      	beq.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063f8:	f200 8092 	bhi.w	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8084 	beq.w	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800640a:	d052      	beq.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 800640c:	e088      	b.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800640e:	4b0f      	ldr	r3, [pc, #60]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b02      	cmp	r3, #2
 8006418:	f040 8084 	bne.w	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800641c:	4b0b      	ldr	r3, [pc, #44]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8006428:	4b08      	ldr	r3, [pc, #32]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	e005      	b.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8006434:	4b05      	ldr	r3, [pc, #20]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800643a:	0a1b      	lsrs	r3, r3, #8
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	4a03      	ldr	r2, [pc, #12]	; (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006446:	61fb      	str	r3, [r7, #28]
          break;
 8006448:	e06c      	b.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800644a:	bf00      	nop
 800644c:	40021000 	.word	0x40021000
 8006450:	08015d84 	.word	0x08015d84
 8006454:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006458:	4ba5      	ldr	r3, [pc, #660]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006460:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006464:	d160      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006466:	4ba2      	ldr	r3, [pc, #648]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800646e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006472:	d159      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006474:	4b9e      	ldr	r3, [pc, #632]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	fb03 f202 	mul.w	r2, r3, r2
 8006488:	4b99      	ldr	r3, [pc, #612]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	3301      	adds	r3, #1
 8006494:	fbb2 f3f3 	udiv	r3, r2, r3
 8006498:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800649a:	4b95      	ldr	r3, [pc, #596]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	0d5b      	lsrs	r3, r3, #21
 80064a0:	f003 0303 	and.w	r3, r3, #3
 80064a4:	3301      	adds	r3, #1
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ae:	61fb      	str	r3, [r7, #28]
          break;
 80064b0:	e03a      	b.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80064b2:	4b8f      	ldr	r3, [pc, #572]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064be:	d135      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80064c0:	4b8b      	ldr	r3, [pc, #556]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064cc:	d12e      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80064ce:	4b88      	ldr	r3, [pc, #544]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064d8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	fb03 f202 	mul.w	r2, r3, r2
 80064e2:	4b83      	ldr	r3, [pc, #524]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	091b      	lsrs	r3, r3, #4
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	3301      	adds	r3, #1
 80064ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80064f4:	4b7e      	ldr	r3, [pc, #504]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	0d5b      	lsrs	r3, r3, #21
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	3301      	adds	r3, #1
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	fbb2 f3f3 	udiv	r3, r2, r3
 8006508:	61fb      	str	r3, [r7, #28]
          break;
 800650a:	e00f      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800650c:	4b78      	ldr	r3, [pc, #480]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800650e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d10a      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800651a:	4b76      	ldr	r3, [pc, #472]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800651c:	61fb      	str	r3, [r7, #28]
          break;
 800651e:	e007      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8006520:	bf00      	nop
 8006522:	e3e2      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006524:	bf00      	nop
 8006526:	e3e0      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006528:	bf00      	nop
 800652a:	e3de      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800652c:	bf00      	nop
 800652e:	e3dc      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8006530:	bf00      	nop
      break;
 8006532:	e3da      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006534:	4b6e      	ldr	r3, [pc, #440]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b03      	cmp	r3, #3
 8006544:	d827      	bhi.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8006546:	a201      	add	r2, pc, #4	; (adr r2, 800654c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	0800655d 	.word	0x0800655d
 8006550:	08006565 	.word	0x08006565
 8006554:	0800656d 	.word	0x0800656d
 8006558:	08006581 	.word	0x08006581
          frequency = HAL_RCC_GetPCLK2Freq();
 800655c:	f7ff f81a 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8006560:	61f8      	str	r0, [r7, #28]
          break;
 8006562:	e01d      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006564:	f7fe ff6a 	bl	800543c <HAL_RCC_GetSysClockFreq>
 8006568:	61f8      	str	r0, [r7, #28]
          break;
 800656a:	e019      	b.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800656c:	4b60      	ldr	r3, [pc, #384]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006578:	d10f      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 800657a:	4b5f      	ldr	r3, [pc, #380]	; (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800657c:	61fb      	str	r3, [r7, #28]
          break;
 800657e:	e00c      	b.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006580:	4b5b      	ldr	r3, [pc, #364]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b02      	cmp	r3, #2
 800658c:	d107      	bne.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800658e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006592:	61fb      	str	r3, [r7, #28]
          break;
 8006594:	e003      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8006596:	bf00      	nop
 8006598:	e3a8      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800659a:	bf00      	nop
 800659c:	e3a6      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800659e:	bf00      	nop
        break;
 80065a0:	e3a4      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80065a2:	4b53      	ldr	r3, [pc, #332]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a8:	f003 030c 	and.w	r3, r3, #12
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b0c      	cmp	r3, #12
 80065b2:	d83a      	bhi.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80065b4:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	080065f1 	.word	0x080065f1
 80065c0:	0800662b 	.word	0x0800662b
 80065c4:	0800662b 	.word	0x0800662b
 80065c8:	0800662b 	.word	0x0800662b
 80065cc:	080065f9 	.word	0x080065f9
 80065d0:	0800662b 	.word	0x0800662b
 80065d4:	0800662b 	.word	0x0800662b
 80065d8:	0800662b 	.word	0x0800662b
 80065dc:	08006601 	.word	0x08006601
 80065e0:	0800662b 	.word	0x0800662b
 80065e4:	0800662b 	.word	0x0800662b
 80065e8:	0800662b 	.word	0x0800662b
 80065ec:	08006615 	.word	0x08006615
          frequency = HAL_RCC_GetPCLK1Freq();
 80065f0:	f7fe ffba 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 80065f4:	61f8      	str	r0, [r7, #28]
          break;
 80065f6:	e01d      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 80065f8:	f7fe ff20 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80065fc:	61f8      	str	r0, [r7, #28]
          break;
 80065fe:	e019      	b.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006600:	4b3b      	ldr	r3, [pc, #236]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660c:	d10f      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 800660e:	4b3a      	ldr	r3, [pc, #232]	; (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006610:	61fb      	str	r3, [r7, #28]
          break;
 8006612:	e00c      	b.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006614:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b02      	cmp	r3, #2
 8006620:	d107      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8006622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006626:	61fb      	str	r3, [r7, #28]
          break;
 8006628:	e003      	b.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800662a:	bf00      	nop
 800662c:	e35e      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800662e:	bf00      	nop
 8006630:	e35c      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006632:	bf00      	nop
        break;
 8006634:	e35a      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006636:	4b2e      	ldr	r3, [pc, #184]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b30      	cmp	r3, #48	; 0x30
 8006646:	d021      	beq.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b30      	cmp	r3, #48	; 0x30
 800664c:	d829      	bhi.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b20      	cmp	r3, #32
 8006652:	d011      	beq.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b20      	cmp	r3, #32
 8006658:	d823      	bhi.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b10      	cmp	r3, #16
 8006664:	d004      	beq.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8006666:	e01c      	b.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006668:	f7fe ff7e 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 800666c:	61f8      	str	r0, [r7, #28]
          break;
 800666e:	e01d      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8006670:	f7fe fee4 	bl	800543c <HAL_RCC_GetSysClockFreq>
 8006674:	61f8      	str	r0, [r7, #28]
          break;
 8006676:	e019      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006678:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006684:	d10f      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8006686:	4b1c      	ldr	r3, [pc, #112]	; (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006688:	61fb      	str	r3, [r7, #28]
          break;
 800668a:	e00c      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800668c:	4b18      	ldr	r3, [pc, #96]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b02      	cmp	r3, #2
 8006698:	d107      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 800669a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800669e:	61fb      	str	r3, [r7, #28]
          break;
 80066a0:	e003      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80066a2:	bf00      	nop
 80066a4:	e322      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80066a6:	bf00      	nop
 80066a8:	e320      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80066aa:	bf00      	nop
        break;
 80066ac:	e31e      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80066ae:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80066b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2bc0      	cmp	r3, #192	; 0xc0
 80066be:	d027      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2bc0      	cmp	r3, #192	; 0xc0
 80066c4:	d82f      	bhi.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	d017      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d829      	bhi.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	d004      	beq.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80066de:	e022      	b.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066e0:	f7fe ff42 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 80066e4:	61f8      	str	r0, [r7, #28]
          break;
 80066e6:	e023      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80066e8:	f7fe fea8 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80066ec:	61f8      	str	r0, [r7, #28]
          break;
 80066ee:	e01f      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80066f0:	40021000 	.word	0x40021000
 80066f4:	02dc6c00 	.word	0x02dc6c00
 80066f8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066fc:	4b9b      	ldr	r3, [pc, #620]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006708:	d10f      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800670a:	4b99      	ldr	r3, [pc, #612]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800670c:	61fb      	str	r3, [r7, #28]
          break;
 800670e:	e00c      	b.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006710:	4b96      	ldr	r3, [pc, #600]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d107      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 800671e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006722:	61fb      	str	r3, [r7, #28]
          break;
 8006724:	e003      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8006726:	bf00      	nop
 8006728:	e2e0      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800672a:	bf00      	nop
 800672c:	e2de      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800672e:	bf00      	nop
        break;
 8006730:	e2dc      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006732:	4b8e      	ldr	r3, [pc, #568]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006744:	d025      	beq.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800674c:	d82c      	bhi.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006754:	d013      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800675c:	d824      	bhi.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d004      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800676a:	d004      	beq.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 800676c:	e01c      	b.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800676e:	f7fe fefb 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8006772:	61f8      	str	r0, [r7, #28]
          break;
 8006774:	e01d      	b.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006776:	f7fe fe61 	bl	800543c <HAL_RCC_GetSysClockFreq>
 800677a:	61f8      	str	r0, [r7, #28]
          break;
 800677c:	e019      	b.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800677e:	4b7b      	ldr	r3, [pc, #492]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800678a:	d10f      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 800678c:	4b78      	ldr	r3, [pc, #480]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800678e:	61fb      	str	r3, [r7, #28]
          break;
 8006790:	e00c      	b.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006792:	4b76      	ldr	r3, [pc, #472]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b02      	cmp	r3, #2
 800679e:	d107      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 80067a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a4:	61fb      	str	r3, [r7, #28]
          break;
 80067a6:	e003      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80067a8:	bf00      	nop
 80067aa:	e29f      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80067ac:	bf00      	nop
 80067ae:	e29d      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80067b0:	bf00      	nop
        break;
 80067b2:	e29b      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80067b4:	4b6d      	ldr	r3, [pc, #436]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067c6:	d025      	beq.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ce:	d82c      	bhi.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d6:	d013      	beq.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067de:	d824      	bhi.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ec:	d004      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80067ee:	e01c      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fe feba 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 80067f4:	61f8      	str	r0, [r7, #28]
          break;
 80067f6:	e01d      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 80067f8:	f7fe fe20 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80067fc:	61f8      	str	r0, [r7, #28]
          break;
 80067fe:	e019      	b.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006800:	4b5a      	ldr	r3, [pc, #360]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680c:	d10f      	bne.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 800680e:	4b58      	ldr	r3, [pc, #352]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006810:	61fb      	str	r3, [r7, #28]
          break;
 8006812:	e00c      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006814:	4b55      	ldr	r3, [pc, #340]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b02      	cmp	r3, #2
 8006820:	d107      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8006822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006826:	61fb      	str	r3, [r7, #28]
          break;
 8006828:	e003      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 800682a:	bf00      	nop
 800682c:	e25e      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800682e:	bf00      	nop
 8006830:	e25c      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006832:	bf00      	nop
        break;
 8006834:	e25a      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006836:	4b4d      	ldr	r3, [pc, #308]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006848:	d007      	beq.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006850:	d12f      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006852:	f7fe fdf3 	bl	800543c <HAL_RCC_GetSysClockFreq>
 8006856:	61f8      	str	r0, [r7, #28]
          break;
 8006858:	e02e      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800685a:	4b44      	ldr	r3, [pc, #272]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006866:	d126      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8006868:	4b40      	ldr	r3, [pc, #256]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d020      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006874:	4b3d      	ldr	r3, [pc, #244]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	0a1b      	lsrs	r3, r3, #8
 800687a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800687e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	fb03 f202 	mul.w	r2, r3, r2
 8006888:	4b38      	ldr	r3, [pc, #224]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	091b      	lsrs	r3, r3, #4
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	3301      	adds	r3, #1
 8006894:	fbb2 f3f3 	udiv	r3, r2, r3
 8006898:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800689a:	4b34      	ldr	r3, [pc, #208]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	0e5b      	lsrs	r3, r3, #25
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	3301      	adds	r3, #1
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ae:	61fb      	str	r3, [r7, #28]
          break;
 80068b0:	e001      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 80068b2:	bf00      	nop
 80068b4:	e21a      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80068b6:	bf00      	nop
        break;
 80068b8:	e218      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80068ba:	4b2c      	ldr	r3, [pc, #176]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80068bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d103      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80068cc:	f7fe fe62 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 80068d0:	61f8      	str	r0, [r7, #28]
        break;
 80068d2:	e20b      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80068d4:	f7fe fdb2 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80068d8:	61f8      	str	r0, [r7, #28]
        break;
 80068da:	e207      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80068dc:	4b23      	ldr	r3, [pc, #140]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80068de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068e2:	f003 0318 	and.w	r3, r3, #24
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b10      	cmp	r3, #16
 80068ec:	d010      	beq.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b10      	cmp	r3, #16
 80068f2:	d834      	bhi.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d024      	beq.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8006900:	e02d      	b.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006902:	69b9      	ldr	r1, [r7, #24]
 8006904:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006908:	f000 fbe2 	bl	80070d0 <RCCEx_GetSAIxPeriphCLKFreq>
 800690c:	61f8      	str	r0, [r7, #28]
          break;
 800690e:	e02b      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006910:	4b16      	ldr	r3, [pc, #88]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b02      	cmp	r3, #2
 800691a:	d122      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800691c:	4b13      	ldr	r3, [pc, #76]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8006928:	4b10      	ldr	r3, [pc, #64]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	091b      	lsrs	r3, r3, #4
 800692e:	f003 030f 	and.w	r3, r3, #15
 8006932:	e005      	b.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006934:	4b0d      	ldr	r3, [pc, #52]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800693a:	0a1b      	lsrs	r3, r3, #8
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	4a0c      	ldr	r2, [pc, #48]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006946:	61fb      	str	r3, [r7, #28]
          break;
 8006948:	e00b      	b.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800694a:	4b08      	ldr	r3, [pc, #32]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006956:	d106      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8006958:	4b05      	ldr	r3, [pc, #20]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800695a:	61fb      	str	r3, [r7, #28]
          break;
 800695c:	e003      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 800695e:	bf00      	nop
 8006960:	e1c4      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006962:	bf00      	nop
 8006964:	e1c2      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006966:	bf00      	nop
        break;
 8006968:	e1c0      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800696a:	bf00      	nop
 800696c:	40021000 	.word	0x40021000
 8006970:	00f42400 	.word	0x00f42400
 8006974:	08015d84 	.word	0x08015d84
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006978:	4b96      	ldr	r3, [pc, #600]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800697a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698a:	d013      	beq.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006992:	d819      	bhi.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a0:	d004      	beq.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 80069a2:	e011      	b.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069a4:	f7fe fde0 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 80069a8:	61f8      	str	r0, [r7, #28]
          break;
 80069aa:	e010      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80069ac:	f7fe fd46 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80069b0:	61f8      	str	r0, [r7, #28]
          break;
 80069b2:	e00c      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b4:	4b87      	ldr	r3, [pc, #540]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c0:	d104      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 80069c2:	4b85      	ldr	r3, [pc, #532]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80069c4:	61fb      	str	r3, [r7, #28]
          break;
 80069c6:	e001      	b.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80069c8:	bf00      	nop
 80069ca:	e18f      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80069cc:	bf00      	nop
        break;
 80069ce:	e18d      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80069d0:	4b80      	ldr	r3, [pc, #512]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80069d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e2:	d013      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ea:	d819      	bhi.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d004      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069f8:	d004      	beq.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 80069fa:	e011      	b.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069fc:	f7fe fdb4 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8006a00:	61f8      	str	r0, [r7, #28]
          break;
 8006a02:	e010      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a04:	f7fe fd1a 	bl	800543c <HAL_RCC_GetSysClockFreq>
 8006a08:	61f8      	str	r0, [r7, #28]
          break;
 8006a0a:	e00c      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a0c:	4b71      	ldr	r3, [pc, #452]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a18:	d104      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8006a1a:	4b6f      	ldr	r3, [pc, #444]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a1c:	61fb      	str	r3, [r7, #28]
          break;
 8006a1e:	e001      	b.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8006a20:	bf00      	nop
 8006a22:	e163      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006a24:	bf00      	nop
        break;
 8006a26:	e161      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006a28:	4b6a      	ldr	r3, [pc, #424]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a3a:	d013      	beq.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a42:	d819      	bhi.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a50:	d004      	beq.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8006a52:	e011      	b.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a54:	f7fe fd88 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8006a58:	61f8      	str	r0, [r7, #28]
          break;
 8006a5a:	e010      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a5c:	f7fe fcee 	bl	800543c <HAL_RCC_GetSysClockFreq>
 8006a60:	61f8      	str	r0, [r7, #28]
          break;
 8006a62:	e00c      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a64:	4b5b      	ldr	r3, [pc, #364]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a70:	d104      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8006a72:	4b59      	ldr	r3, [pc, #356]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006a74:	61fb      	str	r3, [r7, #28]
          break;
 8006a76:	e001      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8006a78:	bf00      	nop
 8006a7a:	e137      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006a7c:	bf00      	nop
        break;
 8006a7e:	e135      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006a80:	4b54      	ldr	r3, [pc, #336]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d011      	beq.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d818      	bhi.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d004      	beq.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8006aa4:	e011      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006aa6:	f7fe fd5f 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8006aaa:	61f8      	str	r0, [r7, #28]
          break;
 8006aac:	e010      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8006aae:	f7fe fcc5 	bl	800543c <HAL_RCC_GetSysClockFreq>
 8006ab2:	61f8      	str	r0, [r7, #28]
          break;
 8006ab4:	e00c      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ab6:	4b47      	ldr	r3, [pc, #284]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac2:	d104      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8006ac4:	4b44      	ldr	r3, [pc, #272]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006ac6:	61fb      	str	r3, [r7, #28]
          break;
 8006ac8:	e001      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8006aca:	bf00      	nop
 8006acc:	e10e      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ace:	bf00      	nop
        break;
 8006ad0:	e10c      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ad2:	4b40      	ldr	r3, [pc, #256]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ae4:	d02c      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006aec:	d833      	bhi.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006af4:	d01a      	beq.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006afc:	d82b      	bhi.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d004      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b0a:	d004      	beq.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8006b0c:	e023      	b.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b0e:	f7fe fd2b 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8006b12:	61f8      	str	r0, [r7, #28]
          break;
 8006b14:	e026      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006b16:	4b2f      	ldr	r3, [pc, #188]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d11a      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8006b24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b28:	61fb      	str	r3, [r7, #28]
          break;
 8006b2a:	e016      	b.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b2c:	4b29      	ldr	r3, [pc, #164]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b38:	d111      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8006b3a:	4b27      	ldr	r3, [pc, #156]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006b3c:	61fb      	str	r3, [r7, #28]
          break;
 8006b3e:	e00e      	b.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b40:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d109      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8006b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b52:	61fb      	str	r3, [r7, #28]
          break;
 8006b54:	e005      	b.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8006b56:	bf00      	nop
 8006b58:	e0c8      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006b5a:	bf00      	nop
 8006b5c:	e0c6      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006b5e:	bf00      	nop
 8006b60:	e0c4      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006b62:	bf00      	nop
        break;
 8006b64:	e0c2      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006b66:	4b1b      	ldr	r3, [pc, #108]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b78:	d030      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b80:	d837      	bhi.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b88:	d01a      	beq.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b90:	d82f      	bhi.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b9e:	d004      	beq.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8006ba0:	e027      	b.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ba2:	f7fe fce1 	bl	8005568 <HAL_RCC_GetPCLK1Freq>
 8006ba6:	61f8      	str	r0, [r7, #28]
          break;
 8006ba8:	e02a      	b.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d11e      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8006bb8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006bbc:	61fb      	str	r3, [r7, #28]
          break;
 8006bbe:	e01a      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bc0:	4b04      	ldr	r3, [pc, #16]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bcc:	d115      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8006bce:	4b02      	ldr	r3, [pc, #8]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006bd0:	61fb      	str	r3, [r7, #28]
          break;
 8006bd2:	e012      	b.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bdc:	4b46      	ldr	r3, [pc, #280]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d109      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8006bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bee:	61fb      	str	r3, [r7, #28]
          break;
 8006bf0:	e005      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8006bf2:	bf00      	nop
 8006bf4:	e07a      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006bf6:	bf00      	nop
 8006bf8:	e078      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006bfa:	bf00      	nop
 8006bfc:	e076      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006bfe:	bf00      	nop
        break;
 8006c00:	e074      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006c02:	4b3d      	ldr	r3, [pc, #244]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006c04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c08:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c14:	d02c      	beq.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c1c:	d855      	bhi.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d004      	beq.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c2a:	d004      	beq.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8006c2c:	e04d      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c2e:	f7fe fc05 	bl	800543c <HAL_RCC_GetSysClockFreq>
 8006c32:	61f8      	str	r0, [r7, #28]
          break;
 8006c34:	e04e      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006c36:	4b30      	ldr	r3, [pc, #192]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d145      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006c42:	4b2d      	ldr	r3, [pc, #180]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8006c4e:	4b2a      	ldr	r3, [pc, #168]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	091b      	lsrs	r3, r3, #4
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	e005      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8006c5a:	4b27      	ldr	r3, [pc, #156]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c60:	0a1b      	lsrs	r3, r3, #8
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	4a25      	ldr	r2, [pc, #148]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8006c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6c:	61fb      	str	r3, [r7, #28]
          break;
 8006c6e:	e02e      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006c70:	4b21      	ldr	r3, [pc, #132]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c7c:	d129      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006c7e:	4b1e      	ldr	r3, [pc, #120]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8a:	d122      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006c8c:	4b1a      	ldr	r3, [pc, #104]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	0a1b      	lsrs	r3, r3, #8
 8006c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c96:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	fb03 f202 	mul.w	r2, r3, r2
 8006ca0:	4b15      	ldr	r3, [pc, #84]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	3301      	adds	r3, #1
 8006cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006cb2:	4b11      	ldr	r3, [pc, #68]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	0d5b      	lsrs	r3, r3, #21
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc6:	61fb      	str	r3, [r7, #28]
          break;
 8006cc8:	e003      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8006cca:	bf00      	nop
 8006ccc:	e00e      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006cce:	bf00      	nop
 8006cd0:	e00c      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006cd2:	bf00      	nop
        break;
 8006cd4:	e00a      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006cd6:	bf00      	nop
 8006cd8:	e008      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006cda:	bf00      	nop
 8006cdc:	e006      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006cde:	bf00      	nop
 8006ce0:	e004      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006ce2:	bf00      	nop
 8006ce4:	e002      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8006cea:	bf00      	nop
    }
  }

  return(frequency);
 8006cec:	69fb      	ldr	r3, [r7, #28]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	08015d84 	.word	0x08015d84

08006d00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d0e:	4b72      	ldr	r3, [pc, #456]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00e      	beq.n	8006d38 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d1a:	4b6f      	ldr	r3, [pc, #444]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f003 0203 	and.w	r2, r3, #3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d103      	bne.n	8006d32 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d142      	bne.n	8006db8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	73fb      	strb	r3, [r7, #15]
 8006d36:	e03f      	b.n	8006db8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d018      	beq.n	8006d72 <RCCEx_PLLSAI1_Config+0x72>
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d825      	bhi.n	8006d90 <RCCEx_PLLSAI1_Config+0x90>
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d002      	beq.n	8006d4e <RCCEx_PLLSAI1_Config+0x4e>
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d009      	beq.n	8006d60 <RCCEx_PLLSAI1_Config+0x60>
 8006d4c:	e020      	b.n	8006d90 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d4e:	4b62      	ldr	r3, [pc, #392]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d11d      	bne.n	8006d96 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d5e:	e01a      	b.n	8006d96 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d60:	4b5d      	ldr	r3, [pc, #372]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d116      	bne.n	8006d9a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d70:	e013      	b.n	8006d9a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d72:	4b59      	ldr	r3, [pc, #356]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10f      	bne.n	8006d9e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d7e:	4b56      	ldr	r3, [pc, #344]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d8e:	e006      	b.n	8006d9e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	73fb      	strb	r3, [r7, #15]
      break;
 8006d94:	e004      	b.n	8006da0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d96:	bf00      	nop
 8006d98:	e002      	b.n	8006da0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d9a:	bf00      	nop
 8006d9c:	e000      	b.n	8006da0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006d9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d108      	bne.n	8006db8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006da6:	4b4c      	ldr	r3, [pc, #304]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f023 0203 	bic.w	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4949      	ldr	r1, [pc, #292]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f040 8086 	bne.w	8006ecc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006dc0:	4b45      	ldr	r3, [pc, #276]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a44      	ldr	r2, [pc, #272]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dcc:	f7fb face 	bl	800236c <HAL_GetTick>
 8006dd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006dd2:	e009      	b.n	8006de8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006dd4:	f7fb faca 	bl	800236c <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d902      	bls.n	8006de8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	73fb      	strb	r3, [r7, #15]
        break;
 8006de6:	e005      	b.n	8006df4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006de8:	4b3b      	ldr	r3, [pc, #236]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1ef      	bne.n	8006dd4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d168      	bne.n	8006ecc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d113      	bne.n	8006e28 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e00:	4b35      	ldr	r3, [pc, #212]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	4b35      	ldr	r3, [pc, #212]	; (8006edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8006e06:	4013      	ands	r3, r2
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6892      	ldr	r2, [r2, #8]
 8006e0c:	0211      	lsls	r1, r2, #8
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	68d2      	ldr	r2, [r2, #12]
 8006e12:	06d2      	lsls	r2, r2, #27
 8006e14:	4311      	orrs	r1, r2
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6852      	ldr	r2, [r2, #4]
 8006e1a:	3a01      	subs	r2, #1
 8006e1c:	0112      	lsls	r2, r2, #4
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	492d      	ldr	r1, [pc, #180]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	610b      	str	r3, [r1, #16]
 8006e26:	e02d      	b.n	8006e84 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d115      	bne.n	8006e5a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e2e:	4b2a      	ldr	r3, [pc, #168]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	4b2b      	ldr	r3, [pc, #172]	; (8006ee0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6892      	ldr	r2, [r2, #8]
 8006e3a:	0211      	lsls	r1, r2, #8
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6912      	ldr	r2, [r2, #16]
 8006e40:	0852      	lsrs	r2, r2, #1
 8006e42:	3a01      	subs	r2, #1
 8006e44:	0552      	lsls	r2, r2, #21
 8006e46:	4311      	orrs	r1, r2
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6852      	ldr	r2, [r2, #4]
 8006e4c:	3a01      	subs	r2, #1
 8006e4e:	0112      	lsls	r2, r2, #4
 8006e50:	430a      	orrs	r2, r1
 8006e52:	4921      	ldr	r1, [pc, #132]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	610b      	str	r3, [r1, #16]
 8006e58:	e014      	b.n	8006e84 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e5a:	4b1f      	ldr	r3, [pc, #124]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e5c:	691a      	ldr	r2, [r3, #16]
 8006e5e:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e60:	4013      	ands	r3, r2
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6892      	ldr	r2, [r2, #8]
 8006e66:	0211      	lsls	r1, r2, #8
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6952      	ldr	r2, [r2, #20]
 8006e6c:	0852      	lsrs	r2, r2, #1
 8006e6e:	3a01      	subs	r2, #1
 8006e70:	0652      	lsls	r2, r2, #25
 8006e72:	4311      	orrs	r1, r2
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6852      	ldr	r2, [r2, #4]
 8006e78:	3a01      	subs	r2, #1
 8006e7a:	0112      	lsls	r2, r2, #4
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	4916      	ldr	r1, [pc, #88]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e84:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006e8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e90:	f7fb fa6c 	bl	800236c <HAL_GetTick>
 8006e94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e96:	e009      	b.n	8006eac <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e98:	f7fb fa68 	bl	800236c <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d902      	bls.n	8006eac <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	73fb      	strb	r3, [r7, #15]
          break;
 8006eaa:	e005      	b.n	8006eb8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006eac:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0ef      	beq.n	8006e98 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ebe:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	4904      	ldr	r1, [pc, #16]	; (8006ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	07ff800f 	.word	0x07ff800f
 8006ee0:	ff9f800f 	.word	0xff9f800f
 8006ee4:	f9ff800f 	.word	0xf9ff800f

08006ee8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ef6:	4b72      	ldr	r3, [pc, #456]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00e      	beq.n	8006f20 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006f02:	4b6f      	ldr	r3, [pc, #444]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f003 0203 	and.w	r2, r3, #3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d103      	bne.n	8006f1a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
       ||
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d142      	bne.n	8006fa0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	73fb      	strb	r3, [r7, #15]
 8006f1e:	e03f      	b.n	8006fa0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d018      	beq.n	8006f5a <RCCEx_PLLSAI2_Config+0x72>
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d825      	bhi.n	8006f78 <RCCEx_PLLSAI2_Config+0x90>
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d002      	beq.n	8006f36 <RCCEx_PLLSAI2_Config+0x4e>
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d009      	beq.n	8006f48 <RCCEx_PLLSAI2_Config+0x60>
 8006f34:	e020      	b.n	8006f78 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f36:	4b62      	ldr	r3, [pc, #392]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d11d      	bne.n	8006f7e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f46:	e01a      	b.n	8006f7e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f48:	4b5d      	ldr	r3, [pc, #372]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d116      	bne.n	8006f82 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f58:	e013      	b.n	8006f82 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f5a:	4b59      	ldr	r3, [pc, #356]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10f      	bne.n	8006f86 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f66:	4b56      	ldr	r3, [pc, #344]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f76:	e006      	b.n	8006f86 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f7c:	e004      	b.n	8006f88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006f7e:	bf00      	nop
 8006f80:	e002      	b.n	8006f88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006f82:	bf00      	nop
 8006f84:	e000      	b.n	8006f88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006f86:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d108      	bne.n	8006fa0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006f8e:	4b4c      	ldr	r3, [pc, #304]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f023 0203 	bic.w	r2, r3, #3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4949      	ldr	r1, [pc, #292]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f040 8086 	bne.w	80070b4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006fa8:	4b45      	ldr	r3, [pc, #276]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a44      	ldr	r2, [pc, #272]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb4:	f7fb f9da 	bl	800236c <HAL_GetTick>
 8006fb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fba:	e009      	b.n	8006fd0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fbc:	f7fb f9d6 	bl	800236c <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d902      	bls.n	8006fd0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8006fce:	e005      	b.n	8006fdc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fd0:	4b3b      	ldr	r3, [pc, #236]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1ef      	bne.n	8006fbc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d168      	bne.n	80070b4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d113      	bne.n	8007010 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fe8:	4b35      	ldr	r3, [pc, #212]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006fea:	695a      	ldr	r2, [r3, #20]
 8006fec:	4b35      	ldr	r3, [pc, #212]	; (80070c4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006fee:	4013      	ands	r3, r2
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6892      	ldr	r2, [r2, #8]
 8006ff4:	0211      	lsls	r1, r2, #8
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	68d2      	ldr	r2, [r2, #12]
 8006ffa:	06d2      	lsls	r2, r2, #27
 8006ffc:	4311      	orrs	r1, r2
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6852      	ldr	r2, [r2, #4]
 8007002:	3a01      	subs	r2, #1
 8007004:	0112      	lsls	r2, r2, #4
 8007006:	430a      	orrs	r2, r1
 8007008:	492d      	ldr	r1, [pc, #180]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800700a:	4313      	orrs	r3, r2
 800700c:	614b      	str	r3, [r1, #20]
 800700e:	e02d      	b.n	800706c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d115      	bne.n	8007042 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007016:	4b2a      	ldr	r3, [pc, #168]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007018:	695a      	ldr	r2, [r3, #20]
 800701a:	4b2b      	ldr	r3, [pc, #172]	; (80070c8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800701c:	4013      	ands	r3, r2
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6892      	ldr	r2, [r2, #8]
 8007022:	0211      	lsls	r1, r2, #8
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6912      	ldr	r2, [r2, #16]
 8007028:	0852      	lsrs	r2, r2, #1
 800702a:	3a01      	subs	r2, #1
 800702c:	0552      	lsls	r2, r2, #21
 800702e:	4311      	orrs	r1, r2
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6852      	ldr	r2, [r2, #4]
 8007034:	3a01      	subs	r2, #1
 8007036:	0112      	lsls	r2, r2, #4
 8007038:	430a      	orrs	r2, r1
 800703a:	4921      	ldr	r1, [pc, #132]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800703c:	4313      	orrs	r3, r2
 800703e:	614b      	str	r3, [r1, #20]
 8007040:	e014      	b.n	800706c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007042:	4b1f      	ldr	r3, [pc, #124]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	4b21      	ldr	r3, [pc, #132]	; (80070cc <RCCEx_PLLSAI2_Config+0x1e4>)
 8007048:	4013      	ands	r3, r2
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	6892      	ldr	r2, [r2, #8]
 800704e:	0211      	lsls	r1, r2, #8
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6952      	ldr	r2, [r2, #20]
 8007054:	0852      	lsrs	r2, r2, #1
 8007056:	3a01      	subs	r2, #1
 8007058:	0652      	lsls	r2, r2, #25
 800705a:	4311      	orrs	r1, r2
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6852      	ldr	r2, [r2, #4]
 8007060:	3a01      	subs	r2, #1
 8007062:	0112      	lsls	r2, r2, #4
 8007064:	430a      	orrs	r2, r1
 8007066:	4916      	ldr	r1, [pc, #88]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007068:	4313      	orrs	r3, r2
 800706a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800706c:	4b14      	ldr	r3, [pc, #80]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a13      	ldr	r2, [pc, #76]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007076:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007078:	f7fb f978 	bl	800236c <HAL_GetTick>
 800707c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800707e:	e009      	b.n	8007094 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007080:	f7fb f974 	bl	800236c <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d902      	bls.n	8007094 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	73fb      	strb	r3, [r7, #15]
          break;
 8007092:	e005      	b.n	80070a0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007094:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0ef      	beq.n	8007080 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80070a6:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070a8:	695a      	ldr	r2, [r3, #20]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	4904      	ldr	r1, [pc, #16]	; (80070c0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	40021000 	.word	0x40021000
 80070c4:	07ff800f 	.word	0x07ff800f
 80070c8:	ff9f800f 	.word	0xff9f800f
 80070cc:	f9ff800f 	.word	0xf9ff800f

080070d0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b089      	sub	sp, #36	; 0x24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ec:	d10b      	bne.n	8007106 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80070ee:	4b7e      	ldr	r3, [pc, #504]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070f4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80070f8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b60      	cmp	r3, #96	; 0x60
 80070fe:	d112      	bne.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007100:	4b7a      	ldr	r3, [pc, #488]	; (80072ec <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007102:	61fb      	str	r3, [r7, #28]
 8007104:	e00f      	b.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710c:	d10b      	bne.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800710e:	4b76      	ldr	r3, [pc, #472]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007110:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007114:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007118:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007120:	d101      	bne.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8007122:	4b72      	ldr	r3, [pc, #456]	; (80072ec <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8007124:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f040 80d6 	bne.w	80072da <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	2b40      	cmp	r3, #64	; 0x40
 8007136:	d003      	beq.n	8007140 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800713e:	d13b      	bne.n	80071b8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007140:	4b69      	ldr	r3, [pc, #420]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800714c:	f040 80c4 	bne.w	80072d8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007150:	4b65      	ldr	r3, [pc, #404]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80bd 	beq.w	80072d8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800715e:	4b62      	ldr	r3, [pc, #392]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	091b      	lsrs	r3, r3, #4
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	3301      	adds	r3, #1
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007170:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007172:	4b5d      	ldr	r3, [pc, #372]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	0a1b      	lsrs	r3, r3, #8
 8007178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800717c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800717e:	4b5a      	ldr	r3, [pc, #360]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	0edb      	lsrs	r3, r3, #27
 8007184:	f003 031f 	and.w	r3, r3, #31
 8007188:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10a      	bne.n	80071a6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007190:	4b55      	ldr	r3, [pc, #340]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800719c:	2311      	movs	r3, #17
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e001      	b.n	80071a6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80071a2:	2307      	movs	r3, #7
 80071a4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	fb03 f202 	mul.w	r2, r3, r2
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80071b6:	e08f      	b.n	80072d8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d13a      	bne.n	8007234 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80071be:	4b4a      	ldr	r3, [pc, #296]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ca:	f040 8086 	bne.w	80072da <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80071ce:	4b46      	ldr	r3, [pc, #280]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d07f      	beq.n	80072da <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80071da:	4b43      	ldr	r3, [pc, #268]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	091b      	lsrs	r3, r3, #4
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	3301      	adds	r3, #1
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ec:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80071ee:	4b3e      	ldr	r3, [pc, #248]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80071fa:	4b3b      	ldr	r3, [pc, #236]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	0edb      	lsrs	r3, r3, #27
 8007200:	f003 031f 	and.w	r3, r3, #31
 8007204:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10a      	bne.n	8007222 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800720c:	4b36      	ldr	r3, [pc, #216]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007218:	2311      	movs	r3, #17
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	e001      	b.n	8007222 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800721e:	2307      	movs	r3, #7
 8007220:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	fb03 f202 	mul.w	r2, r3, r2
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007230:	61fb      	str	r3, [r7, #28]
 8007232:	e052      	b.n	80072da <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b80      	cmp	r3, #128	; 0x80
 8007238:	d003      	beq.n	8007242 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007240:	d109      	bne.n	8007256 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007242:	4b29      	ldr	r3, [pc, #164]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800724a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800724e:	d144      	bne.n	80072da <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007250:	4b27      	ldr	r3, [pc, #156]	; (80072f0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007252:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007254:	e041      	b.n	80072da <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2b20      	cmp	r3, #32
 800725a:	d003      	beq.n	8007264 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007262:	d13a      	bne.n	80072da <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007264:	4b20      	ldr	r3, [pc, #128]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800726c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007270:	d133      	bne.n	80072da <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8007272:	4b1d      	ldr	r3, [pc, #116]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d02d      	beq.n	80072da <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800727e:	4b1a      	ldr	r3, [pc, #104]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	091b      	lsrs	r3, r3, #4
 8007284:	f003 030f 	and.w	r3, r3, #15
 8007288:	3301      	adds	r3, #1
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007290:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007292:	4b15      	ldr	r3, [pc, #84]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	0a1b      	lsrs	r3, r3, #8
 8007298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800729c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800729e:	4b12      	ldr	r3, [pc, #72]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	0edb      	lsrs	r3, r3, #27
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10a      	bne.n	80072c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80072b0:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80072bc:	2311      	movs	r3, #17
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	e001      	b.n	80072c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80072c2:	2307      	movs	r3, #7
 80072c4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	fb03 f202 	mul.w	r2, r3, r2
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	e000      	b.n	80072da <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80072d8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80072da:	69fb      	ldr	r3, [r7, #28]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3724      	adds	r7, #36	; 0x24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	40021000 	.word	0x40021000
 80072ec:	001fff68 	.word	0x001fff68
 80072f0:	00f42400 	.word	0x00f42400

080072f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08a      	sub	sp, #40	; 0x28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e078      	b.n	80073f8 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d105      	bne.n	800731e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fa fccb 	bl	8001cb4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2203      	movs	r2, #3
 8007322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f86a 	bl	8007400 <HAL_SD_InitCard>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e060      	b.n	80073f8 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007336:	f107 0308 	add.w	r3, r7, #8
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fdb5 	bl	8007eac <HAL_SD_GetCardStatus>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e055      	b.n	80073f8 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800734c:	7e3b      	ldrb	r3, [r7, #24]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007352:	7e7b      	ldrb	r3, [r7, #25]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735c:	2b01      	cmp	r3, #1
 800735e:	d10a      	bne.n	8007376 <HAL_SD_Init+0x82>
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <HAL_SD_Init+0x78>
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d004      	beq.n	8007376 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007372:	65da      	str	r2, [r3, #92]	; 0x5c
 8007374:	e00b      	b.n	800738e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737a:	2b01      	cmp	r3, #1
 800737c:	d104      	bne.n	8007388 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007384:	65da      	str	r2, [r3, #92]	; 0x5c
 8007386:	e002      	b.n	800738e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fe6b 	bl	8008070 <HAL_SD_ConfigWideBusOperation>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e029      	b.n	80073f8 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80073a4:	f7fa ffe2 	bl	800236c <HAL_GetTick>
 80073a8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80073aa:	e014      	b.n	80073d6 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80073ac:	f7fa ffde 	bl	800236c <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ba:	d10c      	bne.n	80073d6 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e010      	b.n	80073f8 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 ff5e 	bl	8008298 <HAL_SD_GetCardState>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d1e4      	bne.n	80073ac <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3728      	adds	r7, #40	; 0x28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007400:	b5b0      	push	{r4, r5, r7, lr}
 8007402:	b08e      	sub	sp, #56	; 0x38
 8007404:	af04      	add	r7, sp, #16
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007408:	2300      	movs	r3, #0
 800740a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007410:	2300      	movs	r3, #0
 8007412:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007418:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800741c:	f7fe fd50 	bl	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007420:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	d109      	bne.n	800743c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e079      	b.n	8007530 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	0a1b      	lsrs	r3, r3, #8
 8007440:	4a3d      	ldr	r2, [pc, #244]	; (8007538 <HAL_SD_InitCard+0x138>)
 8007442:	fba2 2303 	umull	r2, r3, r2, r3
 8007446:	091b      	lsrs	r3, r3, #4
 8007448:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d107      	bne.n	8007468 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0210 	orr.w	r2, r2, #16
 8007466:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681d      	ldr	r5, [r3, #0]
 800746c:	466c      	mov	r4, sp
 800746e:	f107 0314 	add.w	r3, r7, #20
 8007472:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007476:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800747a:	f107 0308 	add.w	r3, r7, #8
 800747e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007480:	4628      	mov	r0, r5
 8007482:	f002 f90f 	bl	80096a4 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4618      	mov	r0, r3
 800748c:	f002 f952 	bl	8009734 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007496:	fbb2 f3f3 	udiv	r3, r2, r3
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800749c:	4a27      	ldr	r2, [pc, #156]	; (800753c <HAL_SD_InitCard+0x13c>)
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a4:	3301      	adds	r3, #1
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fa ff6c 	bl	8002384 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 ffd3 	bl	8008458 <SD_PowerON>
 80074b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e02e      	b.n	8007530 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 ff00 	bl	80082d8 <SD_InitCard>
 80074d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e01b      	b.n	8007530 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007500:	4618      	mov	r0, r3
 8007502:	f002 f9ad 	bl	8009860 <SDMMC_CmdBlockLength>
 8007506:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00f      	beq.n	800752e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a0b      	ldr	r2, [pc, #44]	; (8007540 <HAL_SD_InitCard+0x140>)
 8007514:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e000      	b.n	8007530 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3728      	adds	r7, #40	; 0x28
 8007534:	46bd      	mov	sp, r7
 8007536:	bdb0      	pop	{r4, r5, r7, pc}
 8007538:	014f8b59 	.word	0x014f8b59
 800753c:	00012110 	.word	0x00012110
 8007540:	1fe00fff 	.word	0x1fe00fff

08007544 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08c      	sub	sp, #48	; 0x30
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d107      	bne.n	800756c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e08d      	b.n	8007688 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	f040 8086 	bne.w	8007686 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	441a      	add	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758a:	429a      	cmp	r2, r3
 800758c:	d907      	bls.n	800759e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e074      	b.n	8007688 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2203      	movs	r2, #3
 80075a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2200      	movs	r2, #0
 80075ac:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	025a      	lsls	r2, r3, #9
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d002      	beq.n	80075ca <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	025b      	lsls	r3, r3, #9
 80075c8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80075ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	025b      	lsls	r3, r3, #9
 80075d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80075d6:	2390      	movs	r3, #144	; 0x90
 80075d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80075da:	2302      	movs	r3, #2
 80075dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80075de:	2300      	movs	r3, #0
 80075e0:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f107 0210 	add.w	r2, r7, #16
 80075ee:	4611      	mov	r1, r2
 80075f0:	4618      	mov	r0, r3
 80075f2:	f002 f909 	bl	8009808 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007604:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2201      	movs	r2, #1
 8007614:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d90a      	bls.n	8007632 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2282      	movs	r2, #130	; 0x82
 8007620:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007628:	4618      	mov	r0, r3
 800762a:	f002 f95f 	bl	80098ec <SDMMC_CmdReadMultiBlock>
 800762e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007630:	e009      	b.n	8007646 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2281      	movs	r2, #129	; 0x81
 8007636:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800763e:	4618      	mov	r0, r3
 8007640:	f002 f931 	bl	80098a6 <SDMMC_CmdReadSingleBlock>
 8007644:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d012      	beq.n	8007672 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a0f      	ldr	r2, [pc, #60]	; (8007690 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007652:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	431a      	orrs	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e00a      	b.n	8007688 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007680:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	e000      	b.n	8007688 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007686:	2302      	movs	r3, #2
  }
}
 8007688:	4618      	mov	r0, r3
 800768a:	3730      	adds	r7, #48	; 0x30
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	1fe00fff 	.word	0x1fe00fff

08007694 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08c      	sub	sp, #48	; 0x30
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d107      	bne.n	80076bc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e08d      	b.n	80077d8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	f040 8086 	bne.w	80077d6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80076d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	441a      	add	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076da:	429a      	cmp	r2, r3
 80076dc:	d907      	bls.n	80076ee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e074      	b.n	80077d8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2203      	movs	r2, #3
 80076f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2200      	movs	r2, #0
 80076fc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	025a      	lsls	r2, r3, #9
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d002      	beq.n	800771a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	025b      	lsls	r3, r3, #9
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800771a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800771e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	025b      	lsls	r3, r3, #9
 8007724:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007726:	2390      	movs	r3, #144	; 0x90
 8007728:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800772e:	2300      	movs	r3, #0
 8007730:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007732:	2300      	movs	r3, #0
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f107 0210 	add.w	r2, r7, #16
 800773e:	4611      	mov	r1, r2
 8007740:	4618      	mov	r0, r3
 8007742:	f002 f861 	bl	8009808 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007754:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d90a      	bls.n	8007782 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	22a0      	movs	r2, #160	; 0xa0
 8007770:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007778:	4618      	mov	r0, r3
 800777a:	f002 f8fd 	bl	8009978 <SDMMC_CmdWriteMultiBlock>
 800777e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007780:	e009      	b.n	8007796 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2290      	movs	r2, #144	; 0x90
 8007786:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800778e:	4618      	mov	r0, r3
 8007790:	f002 f8cf 	bl	8009932 <SDMMC_CmdWriteSingleBlock>
 8007794:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d012      	beq.n	80077c2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a0f      	ldr	r2, [pc, #60]	; (80077e0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80077a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	431a      	orrs	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e00a      	b.n	80077d8 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80077d0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	e000      	b.n	80077d8 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
  }
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3730      	adds	r7, #48	; 0x30
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	1fe00fff 	.word	0x1fe00fff

080077e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d008      	beq.n	8007812 <HAL_SD_IRQHandler+0x2e>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 f98e 	bl	8008b2c <SD_Read_IT>
 8007810:	e199      	b.n	8007b46 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80ae 	beq.w	800797e <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800782a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800783a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800783e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800784e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800785e:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f003 0308 	and.w	r3, r3, #8
 8007866:	2b00      	cmp	r3, #0
 8007868:	d038      	beq.n	80078dc <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <HAL_SD_IRQHandler+0x9a>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b00      	cmp	r3, #0
 800787c:	d011      	beq.n	80078a2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4618      	mov	r0, r3
 8007884:	f002 f89c 	bl	80099c0 <SDMMC_CmdStopTransfer>
 8007888:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d008      	beq.n	80078a2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f957 	bl	8007b50 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a90      	ldr	r2, [pc, #576]	; (8007ae8 <HAL_SD_IRQHandler+0x304>)
 80078a8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <HAL_SD_IRQHandler+0xe8>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f002 fd6b 	bl	800a3a8 <HAL_SD_RxCpltCallback>
 80078d2:	e138      	b.n	8007b46 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f002 fd5d 	bl	800a394 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80078da:	e134      	b.n	8007b46 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 812f 	beq.w	8007b46 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2200      	movs	r2, #0
 80078ee:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2200      	movs	r2, #0
 80078f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2200      	movs	r2, #0
 80078fe:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d104      	bne.n	8007914 <HAL_SD_IRQHandler+0x130>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d011      	beq.n	8007938 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f002 f851 	bl	80099c0 <SDMMC_CmdStopTransfer>
 800791e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d008      	beq.n	8007938 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f90c 	bl	8007b50 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f003 0310 	and.w	r3, r3, #16
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <HAL_SD_IRQHandler+0x176>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f002 fd1a 	bl	800a394 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d105      	bne.n	8007976 <HAL_SD_IRQHandler+0x192>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 80e8 	beq.w	8007b46 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f002 fd16 	bl	800a3a8 <HAL_SD_RxCpltCallback>
}
 800797c:	e0e3      	b.n	8007b46 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d008      	beq.n	800799e <HAL_SD_IRQHandler+0x1ba>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 f919 	bl	8008bce <SD_Write_IT>
 800799c:	e0d3      	b.n	8007b46 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 809f 	beq.w	8007aec <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c0:	f043 0202 	orr.w	r2, r3, #2
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ce:	f003 0308 	and.w	r3, r3, #8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	f043 0208 	orr.w	r2, r3, #8
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f4:	f043 0220 	orr.w	r2, r3, #32
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a02:	f003 0310 	and.w	r3, r3, #16
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	f043 0210 	orr.w	r2, r3, #16
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a33      	ldr	r2, [pc, #204]	; (8007ae8 <HAL_SD_IRQHandler+0x304>)
 8007a1c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007a2c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a3c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a5c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f001 ffac 	bl	80099c0 <SDMMC_CmdStopTransfer>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a82:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f852 	bl	8007b50 <HAL_SD_ErrorCallback>
}
 8007aac:	e04b      	b.n	8007b46 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d046      	beq.n	8007b46 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d042      	beq.n	8007b46 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007ace:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f835 	bl	8007b50 <HAL_SD_ErrorCallback>
}
 8007ae6:	e02e      	b.n	8007b46 <HAL_SD_IRQHandler+0x362>
 8007ae8:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d025      	beq.n	8007b46 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10c      	bne.n	8007b2c <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f003 0320 	and.w	r3, r3, #32
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 f8d4 	bl	8008cca <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8007b22:	e010      	b.n	8007b46 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 f8bc 	bl	8008ca2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8007b2a:	e00c      	b.n	8007b46 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 f8bd 	bl	8008cb6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8007b3c:	e003      	b.n	8007b46 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 f8a5 	bl	8008c8e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8007b44:	e7ff      	b.n	8007b46 <HAL_SD_IRQHandler+0x362>
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop

08007b50 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b72:	0f9b      	lsrs	r3, r3, #30
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b7e:	0e9b      	lsrs	r3, r3, #26
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b90:	0e1b      	lsrs	r3, r3, #24
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	f003 0303 	and.w	r3, r3, #3
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba2:	0c1b      	lsrs	r3, r3, #16
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bae:	0a1b      	lsrs	r3, r3, #8
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc4:	0d1b      	lsrs	r3, r3, #20
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd0:	0c1b      	lsrs	r3, r3, #16
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f003 030f 	and.w	r3, r3, #15
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be2:	0bdb      	lsrs	r3, r3, #15
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bf4:	0b9b      	lsrs	r3, r3, #14
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c06:	0b5b      	lsrs	r3, r3, #13
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c18:	0b1b      	lsrs	r3, r3, #12
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d163      	bne.n	8007cfc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c38:	009a      	lsls	r2, r3, #2
 8007c3a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c3e:	4013      	ands	r3, r2
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007c44:	0f92      	lsrs	r2, r2, #30
 8007c46:	431a      	orrs	r2, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c50:	0edb      	lsrs	r3, r3, #27
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c62:	0e1b      	lsrs	r3, r3, #24
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c74:	0d5b      	lsrs	r3, r3, #21
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c86:	0c9b      	lsrs	r3, r3, #18
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f003 0307 	and.w	r3, r3, #7
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c98:	0bdb      	lsrs	r3, r3, #15
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	7e1b      	ldrb	r3, [r3, #24]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	3302      	adds	r3, #2
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007cc6:	fb03 f202 	mul.w	r2, r3, r2
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	7a1b      	ldrb	r3, [r3, #8]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	2201      	movs	r2, #1
 8007cda:	409a      	lsls	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ce8:	0a52      	lsrs	r2, r2, #9
 8007cea:	fb03 f202 	mul.w	r2, r3, r2
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf8:	659a      	str	r2, [r3, #88]	; 0x58
 8007cfa:	e031      	b.n	8007d60 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d11d      	bne.n	8007d40 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d08:	041b      	lsls	r3, r3, #16
 8007d0a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d12:	0c1b      	lsrs	r3, r3, #16
 8007d14:	431a      	orrs	r2, r3
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	029a      	lsls	r2, r3, #10
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d34:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	659a      	str	r2, [r3, #88]	; 0x58
 8007d3e:	e00f      	b.n	8007d60 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a58      	ldr	r2, [pc, #352]	; (8007ea8 <HAL_SD_GetCardCSD+0x344>)
 8007d46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e09d      	b.n	8007e9c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d64:	0b9b      	lsrs	r3, r3, #14
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d76:	09db      	lsrs	r3, r3, #7
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d98:	0fdb      	lsrs	r3, r3, #31
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da4:	0f5b      	lsrs	r3, r3, #29
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db6:	0e9b      	lsrs	r3, r3, #26
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dc8:	0d9b      	lsrs	r3, r3, #22
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dda:	0d5b      	lsrs	r3, r3, #21
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df6:	0c1b      	lsrs	r3, r3, #16
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0a:	0bdb      	lsrs	r3, r3, #15
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1e:	0b9b      	lsrs	r3, r3, #14
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e32:	0b5b      	lsrs	r3, r3, #13
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e46:	0b1b      	lsrs	r3, r3, #12
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e5a:	0a9b      	lsrs	r3, r3, #10
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e6e:	0a1b      	lsrs	r3, r3, #8
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e82:	085b      	lsrs	r3, r3, #1
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	1fe00fff 	.word	0x1fe00fff

08007eac <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b094      	sub	sp, #80	; 0x50
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007ebc:	f107 0308 	add.w	r3, r7, #8
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fbd4 	bl	8008670 <SD_SendSDStatus>
 8007ec8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d011      	beq.n	8007ef4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a4f      	ldr	r2, [pc, #316]	; (8008014 <HAL_SD_GetCardStatus+0x168>)
 8007ed6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007ef2:	e070      	b.n	8007fd6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	099b      	lsrs	r3, r3, #6
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	095b      	lsrs	r3, r3, #5
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	0a1b      	lsrs	r3, r3, #8
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	0e1b      	lsrs	r3, r3, #24
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	4313      	orrs	r3, r2
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	061a      	lsls	r2, r3, #24
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	021b      	lsls	r3, r3, #8
 8007f36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f3a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	0a1b      	lsrs	r3, r3, #8
 8007f40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f44:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	0e1b      	lsrs	r3, r3, #24
 8007f4a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	0a1b      	lsrs	r3, r3, #8
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	0d1b      	lsrs	r3, r3, #20
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	f003 030f 	and.w	r3, r3, #15
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	4313      	orrs	r3, r2
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	0a9b      	lsrs	r3, r3, #10
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	0a1b      	lsrs	r3, r3, #8
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	091b      	lsrs	r3, r3, #4
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f003 030f 	and.w	r3, r3, #15
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	0e1b      	lsrs	r3, r3, #24
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 fc3e 	bl	8009860 <SDMMC_CmdBlockLength>
 8007fe4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00d      	beq.n	8008008 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a08      	ldr	r2, [pc, #32]	; (8008014 <HAL_SD_GetCardStatus+0x168>)
 8007ff2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008008:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800800c:	4618      	mov	r0, r3
 800800e:	3750      	adds	r7, #80	; 0x50
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	1fe00fff 	.word	0x1fe00fff

08008018 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008070:	b5b0      	push	{r4, r5, r7, lr}
 8008072:	b090      	sub	sp, #64	; 0x40
 8008074:	af04      	add	r7, sp, #16
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2203      	movs	r2, #3
 8008084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808c:	2b03      	cmp	r3, #3
 800808e:	d02e      	beq.n	80080ee <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008096:	d106      	bne.n	80080a6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	639a      	str	r2, [r3, #56]	; 0x38
 80080a4:	e029      	b.n	80080fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ac:	d10a      	bne.n	80080c4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fbd6 	bl	8008860 <SD_WideBus_Enable>
 80080b4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	431a      	orrs	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38
 80080c2:	e01a      	b.n	80080fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fc13 	bl	80088f6 <SD_WideBus_Disable>
 80080d0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
 80080de:	e00c      	b.n	80080fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38
 80080ec:	e005      	b.n	80080fa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d007      	beq.n	8008112 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a60      	ldr	r2, [pc, #384]	; (8008288 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008108:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008110:	e097      	b.n	8008242 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008112:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008116:	f7fd fed3 	bl	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq>
 800811a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 8086 	beq.w	8008230 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	695a      	ldr	r2, [r3, #20]
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	4952      	ldr	r1, [pc, #328]	; (800828c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008142:	fba1 1303 	umull	r1, r3, r1, r3
 8008146:	0e1b      	lsrs	r3, r3, #24
 8008148:	429a      	cmp	r2, r3
 800814a:	d303      	bcc.n	8008154 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	61fb      	str	r3, [r7, #28]
 8008152:	e05a      	b.n	800820a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800815c:	d103      	bne.n	8008166 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	61fb      	str	r3, [r7, #28]
 8008164:	e051      	b.n	800820a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800816a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816e:	d126      	bne.n	80081be <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10e      	bne.n	8008196 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	4a45      	ldr	r2, [pc, #276]	; (8008290 <HAL_SD_ConfigWideBusOperation+0x220>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d906      	bls.n	800818e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	4a42      	ldr	r2, [pc, #264]	; (800828c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008184:	fba2 2303 	umull	r2, r3, r2, r3
 8008188:	0e5b      	lsrs	r3, r3, #25
 800818a:	61fb      	str	r3, [r7, #28]
 800818c:	e03d      	b.n	800820a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	61fb      	str	r3, [r7, #28]
 8008194:	e039      	b.n	800820a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819e:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a2:	4a3b      	ldr	r2, [pc, #236]	; (8008290 <HAL_SD_ConfigWideBusOperation+0x220>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d906      	bls.n	80081b6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	4a38      	ldr	r2, [pc, #224]	; (800828c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80081ac:	fba2 2303 	umull	r2, r3, r2, r3
 80081b0:	0e5b      	lsrs	r3, r3, #25
 80081b2:	61fb      	str	r3, [r7, #28]
 80081b4:	e029      	b.n	800820a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	61fb      	str	r3, [r7, #28]
 80081bc:	e025      	b.n	800820a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10e      	bne.n	80081e4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	4a32      	ldr	r2, [pc, #200]	; (8008294 <HAL_SD_ConfigWideBusOperation+0x224>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d906      	bls.n	80081dc <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	4a2e      	ldr	r2, [pc, #184]	; (800828c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80081d2:	fba2 2303 	umull	r2, r3, r2, r3
 80081d6:	0e1b      	lsrs	r3, r3, #24
 80081d8:	61fb      	str	r3, [r7, #28]
 80081da:	e016      	b.n	800820a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	61fb      	str	r3, [r7, #28]
 80081e2:	e012      	b.n	800820a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f0:	4a28      	ldr	r2, [pc, #160]	; (8008294 <HAL_SD_ConfigWideBusOperation+0x224>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d906      	bls.n	8008204 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	4a24      	ldr	r2, [pc, #144]	; (800828c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80081fa:	fba2 2303 	umull	r2, r3, r2, r3
 80081fe:	0e1b      	lsrs	r3, r3, #24
 8008200:	61fb      	str	r3, [r7, #28]
 8008202:	e002      	b.n	800820a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681d      	ldr	r5, [r3, #0]
 8008214:	466c      	mov	r4, sp
 8008216:	f107 0318 	add.w	r3, r7, #24
 800821a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800821e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008222:	f107 030c 	add.w	r3, r7, #12
 8008226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008228:	4628      	mov	r0, r5
 800822a:	f001 fa3b 	bl	80096a4 <SDMMC_Init>
 800822e:	e008      	b.n	8008242 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800824a:	4618      	mov	r0, r3
 800824c:	f001 fb08 	bl	8009860 <SDMMC_CmdBlockLength>
 8008250:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00c      	beq.n	8008272 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a0a      	ldr	r2, [pc, #40]	; (8008288 <HAL_SD_ConfigWideBusOperation+0x218>)
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	431a      	orrs	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800827a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800827e:	4618      	mov	r0, r3
 8008280:	3730      	adds	r7, #48	; 0x30
 8008282:	46bd      	mov	sp, r7
 8008284:	bdb0      	pop	{r4, r5, r7, pc}
 8008286:	bf00      	nop
 8008288:	1fe00fff 	.word	0x1fe00fff
 800828c:	55e63b89 	.word	0x55e63b89
 8008290:	02faf080 	.word	0x02faf080
 8008294:	017d7840 	.word	0x017d7840

08008298 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80082a4:	f107 030c 	add.w	r3, r7, #12
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fab0 	bl	8008810 <SD_SendStatus>
 80082b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d005      	beq.n	80082c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	431a      	orrs	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	0a5b      	lsrs	r3, r3, #9
 80082c8:	f003 030f 	and.w	r3, r3, #15
 80082cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80082ce:	693b      	ldr	r3, [r7, #16]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082d8:	b5b0      	push	{r4, r5, r7, lr}
 80082da:	b090      	sub	sp, #64	; 0x40
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80082e0:	2301      	movs	r3, #1
 80082e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f001 fa35 	bl	8009758 <SDMMC_GetPowerState>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80082f8:	e0a9      	b.n	800844e <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d02e      	beq.n	8008360 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f001 fc7a 	bl	8009c00 <SDMMC_CmdSendCID>
 800830c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800830e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <SD_InitCard+0x40>
    {
      return errorstate;
 8008314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008316:	e09a      	b.n	800844e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2100      	movs	r1, #0
 800831e:	4618      	mov	r0, r3
 8008320:	f001 fa5f 	bl	80097e2 <SDMMC_GetResponse>
 8008324:	4602      	mov	r2, r0
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2104      	movs	r1, #4
 8008330:	4618      	mov	r0, r3
 8008332:	f001 fa56 	bl	80097e2 <SDMMC_GetResponse>
 8008336:	4602      	mov	r2, r0
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2108      	movs	r1, #8
 8008342:	4618      	mov	r0, r3
 8008344:	f001 fa4d 	bl	80097e2 <SDMMC_GetResponse>
 8008348:	4602      	mov	r2, r0
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	210c      	movs	r1, #12
 8008354:	4618      	mov	r0, r3
 8008356:	f001 fa44 	bl	80097e2 <SDMMC_GetResponse>
 800835a:	4602      	mov	r2, r0
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008364:	2b03      	cmp	r3, #3
 8008366:	d00d      	beq.n	8008384 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f107 020e 	add.w	r2, r7, #14
 8008370:	4611      	mov	r1, r2
 8008372:	4618      	mov	r0, r3
 8008374:	f001 fc83 	bl	8009c7e <SDMMC_CmdSetRelAdd>
 8008378:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800837a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <SD_InitCard+0xac>
    {
      return errorstate;
 8008380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008382:	e064      	b.n	800844e <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008388:	2b03      	cmp	r3, #3
 800838a:	d036      	beq.n	80083fa <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800838c:	89fb      	ldrh	r3, [r7, #14]
 800838e:	461a      	mov	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800839c:	041b      	lsls	r3, r3, #16
 800839e:	4619      	mov	r1, r3
 80083a0:	4610      	mov	r0, r2
 80083a2:	f001 fc4c 	bl	8009c3e <SDMMC_CmdSendCSD>
 80083a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80083a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <SD_InitCard+0xda>
    {
      return errorstate;
 80083ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b0:	e04d      	b.n	800844e <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2100      	movs	r1, #0
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 fa12 	bl	80097e2 <SDMMC_GetResponse>
 80083be:	4602      	mov	r2, r0
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2104      	movs	r1, #4
 80083ca:	4618      	mov	r0, r3
 80083cc:	f001 fa09 	bl	80097e2 <SDMMC_GetResponse>
 80083d0:	4602      	mov	r2, r0
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2108      	movs	r1, #8
 80083dc:	4618      	mov	r0, r3
 80083de:	f001 fa00 	bl	80097e2 <SDMMC_GetResponse>
 80083e2:	4602      	mov	r2, r0
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	210c      	movs	r1, #12
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 f9f7 	bl	80097e2 <SDMMC_GetResponse>
 80083f4:	4602      	mov	r2, r0
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2104      	movs	r1, #4
 8008400:	4618      	mov	r0, r3
 8008402:	f001 f9ee 	bl	80097e2 <SDMMC_GetResponse>
 8008406:	4603      	mov	r3, r0
 8008408:	0d1a      	lsrs	r2, r3, #20
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800840e:	f107 0310 	add.w	r3, r7, #16
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff fba5 	bl	8007b64 <HAL_SD_GetCardCSD>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008420:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008424:	e013      	b.n	800844e <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6819      	ldr	r1, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800842e:	041b      	lsls	r3, r3, #16
 8008430:	2200      	movs	r2, #0
 8008432:	461c      	mov	r4, r3
 8008434:	4615      	mov	r5, r2
 8008436:	4622      	mov	r2, r4
 8008438:	462b      	mov	r3, r5
 800843a:	4608      	mov	r0, r1
 800843c:	f001 faf6 	bl	8009a2c <SDMMC_CmdSelDesel>
 8008440:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <SD_InitCard+0x174>
  {
    return errorstate;
 8008448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844a:	e000      	b.n	800844e <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3740      	adds	r7, #64	; 0x40
 8008452:	46bd      	mov	sp, r7
 8008454:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008458 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b088      	sub	sp, #32
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	61fb      	str	r3, [r7, #28]
 8008468:	2300      	movs	r3, #0
 800846a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800846c:	f7f9 ff7e 	bl	800236c <HAL_GetTick>
 8008470:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4618      	mov	r0, r3
 8008478:	f001 fafc 	bl	8009a74 <SDMMC_CmdGoIdleState>
 800847c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <SD_PowerON+0x30>
  {
    return errorstate;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	e0ed      	b.n	8008664 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4618      	mov	r0, r3
 800848e:	f001 fb0f 	bl	8009ab0 <SDMMC_CmdOperCond>
 8008492:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00d      	beq.n	80084b6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f001 fae5 	bl	8009a74 <SDMMC_CmdGoIdleState>
 80084aa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d004      	beq.n	80084bc <SD_PowerON+0x64>
    {
      return errorstate;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	e0d6      	b.n	8008664 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d137      	bne.n	8008534 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2100      	movs	r1, #0
 80084ca:	4618      	mov	r0, r3
 80084cc:	f001 fb10 	bl	8009af0 <SDMMC_CmdAppCommand>
 80084d0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d02d      	beq.n	8008534 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084dc:	e0c2      	b.n	8008664 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2100      	movs	r1, #0
 80084e4:	4618      	mov	r0, r3
 80084e6:	f001 fb03 	bl	8009af0 <SDMMC_CmdAppCommand>
 80084ea:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <SD_PowerON+0x9e>
    {
      return errorstate;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	e0b6      	b.n	8008664 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	495c      	ldr	r1, [pc, #368]	; (800866c <SD_PowerON+0x214>)
 80084fc:	4618      	mov	r0, r3
 80084fe:	f001 fb1a 	bl	8009b36 <SDMMC_CmdAppOperCommand>
 8008502:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d002      	beq.n	8008510 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800850a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800850e:	e0a9      	b.n	8008664 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2100      	movs	r1, #0
 8008516:	4618      	mov	r0, r3
 8008518:	f001 f963 	bl	80097e2 <SDMMC_GetResponse>
 800851c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	0fdb      	lsrs	r3, r3, #31
 8008522:	2b01      	cmp	r3, #1
 8008524:	d101      	bne.n	800852a <SD_PowerON+0xd2>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <SD_PowerON+0xd4>
 800852a:	2300      	movs	r3, #0
 800852c:	61bb      	str	r3, [r7, #24]

    count++;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3301      	adds	r3, #1
 8008532:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800853a:	4293      	cmp	r3, r2
 800853c:	d802      	bhi.n	8008544 <SD_PowerON+0xec>
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d0cc      	beq.n	80084de <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800854a:	4293      	cmp	r3, r2
 800854c:	d902      	bls.n	8008554 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800854e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008552:	e087      	b.n	8008664 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d07e      	beq.n	800865c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d17a      	bne.n	8008662 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d075      	beq.n	8008662 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800857c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f042 0208 	orr.w	r2, r2, #8
 800858c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f001 fbda 	bl	8009d4c <SDMMC_CmdVoltageSwitch>
 8008598:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00c      	beq.n	80085ba <SD_PowerON+0x162>
        {
          return errorstate;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	e05f      	b.n	8008664 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80085a4:	f7f9 fee2 	bl	800236c <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085b2:	d102      	bne.n	80085ba <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80085b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085b8:	e054      	b.n	8008664 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085c8:	d1ec      	bne.n	80085a4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085e2:	d002      	beq.n	80085ea <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80085e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085e8:	e03c      	b.n	8008664 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80085ea:	2001      	movs	r0, #1
 80085ec:	f000 fb44 	bl	8008c78 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f042 0204 	orr.w	r2, r2, #4
 80085fe:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008600:	e00a      	b.n	8008618 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008602:	f7f9 feb3 	bl	800236c <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008610:	d102      	bne.n	8008618 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008612:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008616:	e025      	b.n	8008664 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008626:	d1ec      	bne.n	8008602 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008630:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800863c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008640:	d102      	bne.n	8008648 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008646:	e00d      	b.n	8008664 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2213      	movs	r2, #19
 800864e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008658:	639a      	str	r2, [r3, #56]	; 0x38
 800865a:	e002      	b.n	8008662 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3720      	adds	r7, #32
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	c1100000 	.word	0xc1100000

08008670 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08c      	sub	sp, #48	; 0x30
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800867a:	f7f9 fe77 	bl	800236c <HAL_GetTick>
 800867e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2100      	movs	r1, #0
 800868a:	4618      	mov	r0, r3
 800868c:	f001 f8a9 	bl	80097e2 <SDMMC_GetResponse>
 8008690:	4603      	mov	r3, r0
 8008692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800869a:	d102      	bne.n	80086a2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800869c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086a0:	e0b0      	b.n	8008804 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2140      	movs	r1, #64	; 0x40
 80086a8:	4618      	mov	r0, r3
 80086aa:	f001 f8d9 	bl	8009860 <SDMMC_CmdBlockLength>
 80086ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	e0a0      	b.n	8008804 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ca:	041b      	lsls	r3, r3, #16
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f001 fa0e 	bl	8009af0 <SDMMC_CmdAppCommand>
 80086d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	e08d      	b.n	8008804 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086ec:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80086ee:	2340      	movs	r3, #64	; 0x40
 80086f0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80086f2:	2360      	movs	r3, #96	; 0x60
 80086f4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80086f6:	2302      	movs	r3, #2
 80086f8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80086fe:	2301      	movs	r3, #1
 8008700:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f107 0208 	add.w	r2, r7, #8
 800870a:	4611      	mov	r1, r2
 800870c:	4618      	mov	r0, r3
 800870e:	f001 f87b 	bl	8009808 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f001 faf6 	bl	8009d08 <SDMMC_CmdStatusRegister>
 800871c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d02b      	beq.n	800877c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	e069      	b.n	8008804 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d013      	beq.n	8008766 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800873e:	2300      	movs	r3, #0
 8008740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008742:	e00d      	b.n	8008760 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4618      	mov	r0, r3
 800874a:	f000 ffd5 	bl	80096f8 <SDMMC_ReadFIFO>
 800874e:	4602      	mov	r2, r0
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	601a      	str	r2, [r3, #0]
        pData++;
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	3304      	adds	r3, #4
 8008758:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	3301      	adds	r3, #1
 800875e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	2b07      	cmp	r3, #7
 8008764:	d9ee      	bls.n	8008744 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008766:	f7f9 fe01 	bl	800236c <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008774:	d102      	bne.n	800877c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008776:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800877a:	e043      	b.n	8008804 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008782:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0d2      	beq.n	8008730 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008798:	2308      	movs	r3, #8
 800879a:	e033      	b.n	8008804 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80087aa:	2302      	movs	r3, #2
 80087ac:	e02a      	b.n	8008804 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d017      	beq.n	80087ec <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80087bc:	2320      	movs	r3, #32
 80087be:	e021      	b.n	8008804 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 ff97 	bl	80096f8 <SDMMC_ReadFIFO>
 80087ca:	4602      	mov	r2, r0
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	601a      	str	r2, [r3, #0]
    pData++;
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	3304      	adds	r3, #4
 80087d4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80087d6:	f7f9 fdc9 	bl	800236c <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087e4:	d102      	bne.n	80087ec <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80087e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087ea:	e00b      	b.n	8008804 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1e2      	bne.n	80087c0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a03      	ldr	r2, [pc, #12]	; (800880c <SD_SendSDStatus+0x19c>)
 8008800:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3730      	adds	r7, #48	; 0x30
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	18000f3a 	.word	0x18000f3a

08008810 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008820:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008824:	e018      	b.n	8008858 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800882e:	041b      	lsls	r3, r3, #16
 8008830:	4619      	mov	r1, r3
 8008832:	4610      	mov	r0, r2
 8008834:	f001 fa45 	bl	8009cc2 <SDMMC_CmdSendStatus>
 8008838:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	e009      	b.n	8008858 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2100      	movs	r1, #0
 800884a:	4618      	mov	r0, r3
 800884c:	f000 ffc9 	bl	80097e2 <SDMMC_GetResponse>
 8008850:	4602      	mov	r2, r0
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	2300      	movs	r3, #0
 800886e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2100      	movs	r1, #0
 8008876:	4618      	mov	r0, r3
 8008878:	f000 ffb3 	bl	80097e2 <SDMMC_GetResponse>
 800887c:	4603      	mov	r3, r0
 800887e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008882:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008886:	d102      	bne.n	800888e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800888c:	e02f      	b.n	80088ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800888e:	f107 030c 	add.w	r3, r7, #12
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f879 	bl	800898c <SD_FindSCR>
 800889a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	e023      	b.n	80088ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01c      	beq.n	80088ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b8:	041b      	lsls	r3, r3, #16
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f001 f917 	bl	8009af0 <SDMMC_CmdAppCommand>
 80088c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	e00f      	b.n	80088ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2102      	movs	r1, #2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f001 f94e 	bl	8009b76 <SDMMC_CmdBusWidth>
 80088da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	e003      	b.n	80088ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e001      	b.n	80088ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	2300      	movs	r3, #0
 8008904:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2100      	movs	r1, #0
 800890c:	4618      	mov	r0, r3
 800890e:	f000 ff68 	bl	80097e2 <SDMMC_GetResponse>
 8008912:	4603      	mov	r3, r0
 8008914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800891c:	d102      	bne.n	8008924 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800891e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008922:	e02f      	b.n	8008984 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008924:	f107 030c 	add.w	r3, r7, #12
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f82e 	bl	800898c <SD_FindSCR>
 8008930:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	e023      	b.n	8008984 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d01c      	beq.n	8008980 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800894e:	041b      	lsls	r3, r3, #16
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f001 f8cc 	bl	8009af0 <SDMMC_CmdAppCommand>
 8008958:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	e00f      	b.n	8008984 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2100      	movs	r1, #0
 800896a:	4618      	mov	r0, r3
 800896c:	f001 f903 	bl	8009b76 <SDMMC_CmdBusWidth>
 8008970:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	e003      	b.n	8008984 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800897c:	2300      	movs	r3, #0
 800897e:	e001      	b.n	8008984 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008980:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b08e      	sub	sp, #56	; 0x38
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008996:	f7f9 fce9 	bl	800236c <HAL_GetTick>
 800899a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80089a0:	2300      	movs	r3, #0
 80089a2:	60bb      	str	r3, [r7, #8]
 80089a4:	2300      	movs	r3, #0
 80089a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2108      	movs	r1, #8
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 ff54 	bl	8009860 <SDMMC_CmdBlockLength>
 80089b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	e0ad      	b.n	8008b20 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089cc:	041b      	lsls	r3, r3, #16
 80089ce:	4619      	mov	r1, r3
 80089d0:	4610      	mov	r0, r2
 80089d2:	f001 f88d 	bl	8009af0 <SDMMC_CmdAppCommand>
 80089d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	e09e      	b.n	8008b20 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80089e8:	2308      	movs	r3, #8
 80089ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80089ec:	2330      	movs	r3, #48	; 0x30
 80089ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80089f0:	2302      	movs	r3, #2
 80089f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80089f8:	2301      	movs	r3, #1
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f107 0210 	add.w	r2, r7, #16
 8008a04:	4611      	mov	r1, r2
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 fefe 	bl	8009808 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f001 f8d3 	bl	8009bbc <SDMMC_CmdSendSCR>
 8008a16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d027      	beq.n	8008a6e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a20:	e07e      	b.n	8008b20 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d113      	bne.n	8008a58 <SD_FindSCR+0xcc>
 8008a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d110      	bne.n	8008a58 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 fe5c 	bl	80096f8 <SDMMC_ReadFIFO>
 8008a40:	4603      	mov	r3, r0
 8008a42:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fe55 	bl	80096f8 <SDMMC_ReadFIFO>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	60fb      	str	r3, [r7, #12]
      index++;
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	3301      	adds	r3, #1
 8008a56:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a58:	f7f9 fc88 	bl	800236c <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a66:	d102      	bne.n	8008a6e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a6c:	e058      	b.n	8008b20 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a74:	f240 532a 	movw	r3, #1322	; 0x52a
 8008a78:	4013      	ands	r3, r2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0d1      	beq.n	8008a22 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a84:	f003 0308 	and.w	r3, r3, #8
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2208      	movs	r2, #8
 8008a92:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a94:	2308      	movs	r3, #8
 8008a96:	e043      	b.n	8008b20 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9e:	f003 0302 	and.w	r3, r3, #2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d005      	beq.n	8008ab2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	e036      	b.n	8008b20 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab8:	f003 0320 	and.w	r3, r3, #32
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d005      	beq.n	8008acc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008ac8:	2320      	movs	r3, #32
 8008aca:	e029      	b.n	8008b20 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a15      	ldr	r2, [pc, #84]	; (8008b28 <SD_FindSCR+0x19c>)
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	061a      	lsls	r2, r3, #24
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	021b      	lsls	r3, r3, #8
 8008adc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ae0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	0a1b      	lsrs	r3, r3, #8
 8008ae6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008aea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	0e1b      	lsrs	r3, r3, #24
 8008af0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	601a      	str	r2, [r3, #0]
    scr++;
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	3304      	adds	r3, #4
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	061a      	lsls	r2, r3, #24
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	021b      	lsls	r3, r3, #8
 8008b04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b08:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	0a1b      	lsrs	r3, r3, #8
 8008b0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b12:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	0e1b      	lsrs	r3, r3, #24
 8008b18:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3738      	adds	r7, #56	; 0x38
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	18000f3a 	.word	0x18000f3a

08008b2c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b38:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d03f      	beq.n	8008bc6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008b46:	2300      	movs	r3, #0
 8008b48:	617b      	str	r3, [r7, #20]
 8008b4a:	e033      	b.n	8008bb4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 fdd1 	bl	80096f8 <SDMMC_ReadFIFO>
 8008b56:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	0a1b      	lsrs	r3, r3, #8
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	0c1b      	lsrs	r3, r3, #16
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	0e1b      	lsrs	r3, r3, #24
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b07      	cmp	r3, #7
 8008bb8:	d9c8      	bls.n	8008b4c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008bc6:	bf00      	nop
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b086      	sub	sp, #24
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d043      	beq.n	8008c70 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008be8:	2300      	movs	r3, #0
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	e037      	b.n	8008c5e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	021a      	lsls	r2, r3, #8
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	3b01      	subs	r3, #1
 8008c16:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	041a      	lsls	r2, r3, #16
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3301      	adds	r3, #1
 8008c28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	061a      	lsls	r2, r3, #24
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f107 0208 	add.w	r2, r7, #8
 8008c50:	4611      	mov	r1, r2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fd5d 	bl	8009712 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	617b      	str	r3, [r7, #20]
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b07      	cmp	r3, #7
 8008c62:	d9c4      	bls.n	8008bee <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008c70:	bf00      	nop
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8008c82:	bf00      	nop
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8008caa:	bf00      	nop
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008cbe:	bf00      	nop
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b083      	sub	sp, #12
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008cd2:	bf00      	nop
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e095      	b.n	8008e1c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d108      	bne.n	8008d0a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d00:	d009      	beq.n	8008d16 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	61da      	str	r2, [r3, #28]
 8008d08:	e005      	b.n	8008d16 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d106      	bne.n	8008d36 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7f9 f84b 	bl	8001dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d4c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d56:	d902      	bls.n	8008d5e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	e002      	b.n	8008d64 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008d6c:	d007      	beq.n	8008d7e <HAL_SPI_Init+0xa0>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d76:	d002      	beq.n	8008d7e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f003 0302 	and.w	r3, r3, #2
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	431a      	orrs	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dac:	431a      	orrs	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008db6:	431a      	orrs	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc0:	ea42 0103 	orr.w	r1, r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	0c1b      	lsrs	r3, r3, #16
 8008dda:	f003 0204 	and.w	r2, r3, #4
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	f003 0310 	and.w	r3, r3, #16
 8008de6:	431a      	orrs	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dec:	f003 0308 	and.w	r3, r3, #8
 8008df0:	431a      	orrs	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008dfa:	ea42 0103 	orr.w	r1, r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e038      	b.n	8008eac <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d106      	bne.n	8008e54 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f7f9 f89c 	bl	8001f8c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4610      	mov	r0, r2
 8008e60:	f000 fafa 	bl	8009458 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	68b9      	ldr	r1, [r7, #8]
 8008e70:	f000 fb8c 	bl	800958c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6858      	ldr	r0, [r3, #4]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	689a      	ldr	r2, [r3, #8]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	f000 fbd5 	bl	8009630 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	6892      	ldr	r2, [r2, #8]
 8008e8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	6892      	ldr	r2, [r2, #8]
 8008e9a:	f041 0101 	orr.w	r1, r1, #1
 8008e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e049      	b.n	8008f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d106      	bne.n	8008ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f841 	bl	8008f62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	f000 f9f8 	bl	80092e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008f6a:	bf00      	nop
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
	...

08008f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d001      	beq.n	8008f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e04f      	b.n	8009030 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68da      	ldr	r2, [r3, #12]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f042 0201 	orr.w	r2, r2, #1
 8008fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a23      	ldr	r2, [pc, #140]	; (800903c <HAL_TIM_Base_Start_IT+0xc4>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d01d      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fba:	d018      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1f      	ldr	r2, [pc, #124]	; (8009040 <HAL_TIM_Base_Start_IT+0xc8>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d013      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a1e      	ldr	r2, [pc, #120]	; (8009044 <HAL_TIM_Base_Start_IT+0xcc>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00e      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a1c      	ldr	r2, [pc, #112]	; (8009048 <HAL_TIM_Base_Start_IT+0xd0>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d009      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a1b      	ldr	r2, [pc, #108]	; (800904c <HAL_TIM_Base_Start_IT+0xd4>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d004      	beq.n	8008fee <HAL_TIM_Base_Start_IT+0x76>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a19      	ldr	r2, [pc, #100]	; (8009050 <HAL_TIM_Base_Start_IT+0xd8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d115      	bne.n	800901a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	4b17      	ldr	r3, [pc, #92]	; (8009054 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b06      	cmp	r3, #6
 8008ffe:	d015      	beq.n	800902c <HAL_TIM_Base_Start_IT+0xb4>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009006:	d011      	beq.n	800902c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009018:	e008      	b.n	800902c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f042 0201 	orr.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	e000      	b.n	800902e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800902c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	40012c00 	.word	0x40012c00
 8009040:	40000400 	.word	0x40000400
 8009044:	40000800 	.word	0x40000800
 8009048:	40000c00 	.word	0x40000c00
 800904c:	40013400 	.word	0x40013400
 8009050:	40014000 	.word	0x40014000
 8009054:	00010007 	.word	0x00010007

08009058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b02      	cmp	r3, #2
 800906c:	d122      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b02      	cmp	r3, #2
 800907a:	d11b      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f06f 0202 	mvn.w	r2, #2
 8009084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f905 	bl	80092aa <HAL_TIM_IC_CaptureCallback>
 80090a0:	e005      	b.n	80090ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f8f7 	bl	8009296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f908 	bl	80092be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	f003 0304 	and.w	r3, r3, #4
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d122      	bne.n	8009108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	d11b      	bne.n	8009108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0204 	mvn.w	r2, #4
 80090d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f8db 	bl	80092aa <HAL_TIM_IC_CaptureCallback>
 80090f4:	e005      	b.n	8009102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f8cd 	bl	8009296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f8de 	bl	80092be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0308 	and.w	r3, r3, #8
 8009112:	2b08      	cmp	r3, #8
 8009114:	d122      	bne.n	800915c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0308 	and.w	r3, r3, #8
 8009120:	2b08      	cmp	r3, #8
 8009122:	d11b      	bne.n	800915c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0208 	mvn.w	r2, #8
 800912c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2204      	movs	r2, #4
 8009132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f8b1 	bl	80092aa <HAL_TIM_IC_CaptureCallback>
 8009148:	e005      	b.n	8009156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f8a3 	bl	8009296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f8b4 	bl	80092be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	f003 0310 	and.w	r3, r3, #16
 8009166:	2b10      	cmp	r3, #16
 8009168:	d122      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f003 0310 	and.w	r3, r3, #16
 8009174:	2b10      	cmp	r3, #16
 8009176:	d11b      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0210 	mvn.w	r2, #16
 8009180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2208      	movs	r2, #8
 8009186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f887 	bl	80092aa <HAL_TIM_IC_CaptureCallback>
 800919c:	e005      	b.n	80091aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f879 	bl	8009296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f88a 	bl	80092be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d10e      	bne.n	80091dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d107      	bne.n	80091dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0201 	mvn.w	r2, #1
 80091d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7f8 fb2e 	bl	8001838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e6:	2b80      	cmp	r3, #128	; 0x80
 80091e8:	d10e      	bne.n	8009208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f4:	2b80      	cmp	r3, #128	; 0x80
 80091f6:	d107      	bne.n	8009208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f914 	bl	8009430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009216:	d10e      	bne.n	8009236 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009222:	2b80      	cmp	r3, #128	; 0x80
 8009224:	d107      	bne.n	8009236 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800922e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f907 	bl	8009444 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009240:	2b40      	cmp	r3, #64	; 0x40
 8009242:	d10e      	bne.n	8009262 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800924e:	2b40      	cmp	r3, #64	; 0x40
 8009250:	d107      	bne.n	8009262 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800925a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f838 	bl	80092d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	2b20      	cmp	r3, #32
 800926e:	d10e      	bne.n	800928e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	f003 0320 	and.w	r3, r3, #32
 800927a:	2b20      	cmp	r3, #32
 800927c:	d107      	bne.n	800928e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f06f 0220 	mvn.w	r2, #32
 8009286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f8c7 	bl	800941c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800928e:	bf00      	nop
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b083      	sub	sp, #12
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092be:	b480      	push	{r7}
 80092c0:	b083      	sub	sp, #12
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
	...

080092e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a40      	ldr	r2, [pc, #256]	; (80093fc <TIM_Base_SetConfig+0x114>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d013      	beq.n	8009328 <TIM_Base_SetConfig+0x40>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009306:	d00f      	beq.n	8009328 <TIM_Base_SetConfig+0x40>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a3d      	ldr	r2, [pc, #244]	; (8009400 <TIM_Base_SetConfig+0x118>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d00b      	beq.n	8009328 <TIM_Base_SetConfig+0x40>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a3c      	ldr	r2, [pc, #240]	; (8009404 <TIM_Base_SetConfig+0x11c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d007      	beq.n	8009328 <TIM_Base_SetConfig+0x40>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a3b      	ldr	r2, [pc, #236]	; (8009408 <TIM_Base_SetConfig+0x120>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d003      	beq.n	8009328 <TIM_Base_SetConfig+0x40>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a3a      	ldr	r2, [pc, #232]	; (800940c <TIM_Base_SetConfig+0x124>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d108      	bne.n	800933a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800932e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	4313      	orrs	r3, r2
 8009338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a2f      	ldr	r2, [pc, #188]	; (80093fc <TIM_Base_SetConfig+0x114>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d01f      	beq.n	8009382 <TIM_Base_SetConfig+0x9a>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009348:	d01b      	beq.n	8009382 <TIM_Base_SetConfig+0x9a>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a2c      	ldr	r2, [pc, #176]	; (8009400 <TIM_Base_SetConfig+0x118>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d017      	beq.n	8009382 <TIM_Base_SetConfig+0x9a>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a2b      	ldr	r2, [pc, #172]	; (8009404 <TIM_Base_SetConfig+0x11c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d013      	beq.n	8009382 <TIM_Base_SetConfig+0x9a>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a2a      	ldr	r2, [pc, #168]	; (8009408 <TIM_Base_SetConfig+0x120>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d00f      	beq.n	8009382 <TIM_Base_SetConfig+0x9a>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a29      	ldr	r2, [pc, #164]	; (800940c <TIM_Base_SetConfig+0x124>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d00b      	beq.n	8009382 <TIM_Base_SetConfig+0x9a>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a28      	ldr	r2, [pc, #160]	; (8009410 <TIM_Base_SetConfig+0x128>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d007      	beq.n	8009382 <TIM_Base_SetConfig+0x9a>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a27      	ldr	r2, [pc, #156]	; (8009414 <TIM_Base_SetConfig+0x12c>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d003      	beq.n	8009382 <TIM_Base_SetConfig+0x9a>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a26      	ldr	r2, [pc, #152]	; (8009418 <TIM_Base_SetConfig+0x130>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d108      	bne.n	8009394 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	4313      	orrs	r3, r2
 8009392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a10      	ldr	r2, [pc, #64]	; (80093fc <TIM_Base_SetConfig+0x114>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d00f      	beq.n	80093e0 <TIM_Base_SetConfig+0xf8>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a12      	ldr	r2, [pc, #72]	; (800940c <TIM_Base_SetConfig+0x124>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00b      	beq.n	80093e0 <TIM_Base_SetConfig+0xf8>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a11      	ldr	r2, [pc, #68]	; (8009410 <TIM_Base_SetConfig+0x128>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d007      	beq.n	80093e0 <TIM_Base_SetConfig+0xf8>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a10      	ldr	r2, [pc, #64]	; (8009414 <TIM_Base_SetConfig+0x12c>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d003      	beq.n	80093e0 <TIM_Base_SetConfig+0xf8>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a0f      	ldr	r2, [pc, #60]	; (8009418 <TIM_Base_SetConfig+0x130>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d103      	bne.n	80093e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	691a      	ldr	r2, [r3, #16]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	615a      	str	r2, [r3, #20]
}
 80093ee:	bf00      	nop
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	40012c00 	.word	0x40012c00
 8009400:	40000400 	.word	0x40000400
 8009404:	40000800 	.word	0x40000800
 8009408:	40000c00 	.word	0x40000c00
 800940c:	40013400 	.word	0x40013400
 8009410:	40014000 	.word	0x40014000
 8009414:	40014400 	.word	0x40014400
 8009418:	40014800 	.word	0x40014800

0800941c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	6812      	ldr	r2, [r2, #0]
 8009470:	f023 0101 	bic.w	r1, r3, #1
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	2b08      	cmp	r3, #8
 8009480:	d102      	bne.n	8009488 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009482:	2340      	movs	r3, #64	; 0x40
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	e001      	b.n	800948c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009488:	2300      	movs	r3, #0
 800948a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009498:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800949e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80094a4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80094aa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80094b0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80094b6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80094bc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80094c2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80094c8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80094ce:	4313      	orrs	r3, r2
 80094d0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	4313      	orrs	r3, r2
 80094da:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80094fa:	4b23      	ldr	r3, [pc, #140]	; (8009588 <FMC_NORSRAM_Init+0x130>)
 80094fc:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009504:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800950c:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8009514:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800951c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	43db      	mvns	r3, r3
 800952c:	ea02 0103 	and.w	r1, r2, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	4319      	orrs	r1, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009546:	d10c      	bne.n	8009562 <FMC_NORSRAM_Init+0x10a>
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d008      	beq.n	8009562 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955c:	431a      	orrs	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d006      	beq.n	8009578 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009572:	431a      	orrs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	0008fb7f 	.word	0x0008fb7f

0800958c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800958c:	b480      	push	{r7}
 800958e:	b087      	sub	sp, #28
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	431a      	orrs	r2, r3
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	021b      	lsls	r3, r3, #8
 80095b4:	431a      	orrs	r2, r3
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	079b      	lsls	r3, r3, #30
 80095bc:	431a      	orrs	r2, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	041b      	lsls	r3, r3, #16
 80095c4:	431a      	orrs	r2, r3
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	051b      	lsls	r3, r3, #20
 80095ce:	431a      	orrs	r2, r3
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	3b02      	subs	r3, #2
 80095d6:	061b      	lsls	r3, r3, #24
 80095d8:	ea42 0103 	orr.w	r1, r2, r3
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	3201      	adds	r2, #1
 80095e4:	4319      	orrs	r1, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095f8:	d113      	bne.n	8009622 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009602:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	695b      	ldr	r3, [r3, #20]
 8009608:	3b01      	subs	r3, #1
 800960a:	051b      	lsls	r3, r3, #20
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	4313      	orrs	r3, r2
 8009610:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	431a      	orrs	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	371c      	adds	r7, #28
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009644:	d121      	bne.n	800968a <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964e:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	6819      	ldr	r1, [r3, #0]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	011b      	lsls	r3, r3, #4
 800965c:	4319      	orrs	r1, r3
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	021b      	lsls	r3, r3, #8
 8009664:	4319      	orrs	r1, r3
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	079b      	lsls	r3, r3, #30
 800966c:	4319      	orrs	r1, r3
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	4319      	orrs	r1, r3
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	041b      	lsls	r3, r3, #16
 800967a:	430b      	orrs	r3, r1
 800967c:	ea42 0103 	orr.w	r1, r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009688:	e005      	b.n	8009696 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80096a4:	b084      	sub	sp, #16
 80096a6:	b480      	push	{r7}
 80096a8:	b085      	sub	sp, #20
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	f107 001c 	add.w	r0, r7, #28
 80096b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80096ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80096bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80096be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80096c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80096c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80096ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685a      	ldr	r2, [r3, #4]
 80096d6:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <SDMMC_Init+0x50>)
 80096d8:	4013      	ands	r3, r2
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	431a      	orrs	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	b004      	add	sp, #16
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	ffc02c00 	.word	0xffc02c00

080096f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009706:	4618      	mov	r0, r3
 8009708:	370c      	adds	r7, #12
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f043 0203 	orr.w	r2, r3, #3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009748:	2002      	movs	r0, #2
 800974a:	f7f8 fe1b 	bl	8002384 <HAL_Delay>

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0303 	and.w	r3, r3, #3
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800977e:	2300      	movs	r3, #0
 8009780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009792:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009798:	431a      	orrs	r2, r3
                       Command->CPSM);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800979e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	4b06      	ldr	r3, [pc, #24]	; (80097c4 <SDMMC_SendCommand+0x50>)
 80097ac:	4013      	ands	r3, r2
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr
 80097c4:	fffee0c0 	.word	0xfffee0c0

080097c8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	b2db      	uxtb	r3, r3
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b085      	sub	sp, #20
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3314      	adds	r3, #20
 80097f0:	461a      	mov	r2, r3
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	4413      	add	r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800982e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009834:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800983a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	4313      	orrs	r3, r2
 8009840:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009846:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	431a      	orrs	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009852:	2300      	movs	r3, #0

}
 8009854:	4618      	mov	r0, r3
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800986e:	2310      	movs	r3, #16
 8009870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800987c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009880:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009882:	f107 0308 	add.w	r3, r7, #8
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff ff73 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800988e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009892:	2110      	movs	r1, #16
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fa7b 	bl	8009d90 <SDMMC_GetCmdResp1>
 800989a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800989c:	69fb      	ldr	r3, [r7, #28]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3720      	adds	r7, #32
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b088      	sub	sp, #32
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80098b4:	2311      	movs	r3, #17
 80098b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098be:	2300      	movs	r3, #0
 80098c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098c8:	f107 0308 	add.w	r3, r7, #8
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff ff50 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80098d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098d8:	2111      	movs	r1, #17
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fa58 	bl	8009d90 <SDMMC_GetCmdResp1>
 80098e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098e2:	69fb      	ldr	r3, [r7, #28]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3720      	adds	r7, #32
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80098fa:	2312      	movs	r3, #18
 80098fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009904:	2300      	movs	r3, #0
 8009906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800990c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800990e:	f107 0308 	add.w	r3, r7, #8
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff ff2d 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800991a:	f241 3288 	movw	r2, #5000	; 0x1388
 800991e:	2112      	movs	r1, #18
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fa35 	bl	8009d90 <SDMMC_GetCmdResp1>
 8009926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009928:	69fb      	ldr	r3, [r7, #28]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3720      	adds	r7, #32
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b088      	sub	sp, #32
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009940:	2318      	movs	r3, #24
 8009942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800994a:	2300      	movs	r3, #0
 800994c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800994e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009954:	f107 0308 	add.w	r3, r7, #8
 8009958:	4619      	mov	r1, r3
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7ff ff0a 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009960:	f241 3288 	movw	r2, #5000	; 0x1388
 8009964:	2118      	movs	r1, #24
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fa12 	bl	8009d90 <SDMMC_GetCmdResp1>
 800996c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800996e:	69fb      	ldr	r3, [r7, #28]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3720      	adds	r7, #32
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b088      	sub	sp, #32
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009986:	2319      	movs	r3, #25
 8009988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800998a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800998e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009990:	2300      	movs	r3, #0
 8009992:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009998:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800999a:	f107 0308 	add.w	r3, r7, #8
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff fee7 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80099a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099aa:	2119      	movs	r1, #25
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f9ef 	bl	8009d90 <SDMMC_GetCmdResp1>
 80099b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099b4:	69fb      	ldr	r3, [r7, #28]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3720      	adds	r7, #32
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b088      	sub	sp, #32
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80099c8:	2300      	movs	r3, #0
 80099ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80099cc:	230c      	movs	r3, #12
 80099ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099de:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099f8:	f107 0308 	add.w	r3, r7, #8
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7ff feb8 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009a04:	4a08      	ldr	r2, [pc, #32]	; (8009a28 <SDMMC_CmdStopTransfer+0x68>)
 8009a06:	210c      	movs	r1, #12
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f9c1 	bl	8009d90 <SDMMC_GetCmdResp1>
 8009a0e:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	05f5e100 	.word	0x05f5e100

08009a2c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08a      	sub	sp, #40	; 0x28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009a3c:	2307      	movs	r3, #7
 8009a3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a44:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a4e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a50:	f107 0310 	add.w	r3, r7, #16
 8009a54:	4619      	mov	r1, r3
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff fe8c 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a60:	2107      	movs	r1, #7
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 f994 	bl	8009d90 <SDMMC_GetCmdResp1>
 8009a68:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3728      	adds	r7, #40	; 0x28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009a80:	2300      	movs	r3, #0
 8009a82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009a84:	2300      	movs	r3, #0
 8009a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a92:	f107 0308 	add.w	r3, r7, #8
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7ff fe6b 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fbb8 	bl	800a214 <SDMMC_GetCmdError>
 8009aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3720      	adds	r7, #32
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b088      	sub	sp, #32
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009ab8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009abc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009abe:	2308      	movs	r3, #8
 8009ac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ad0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ad2:	f107 0308 	add.w	r3, r7, #8
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff fe4b 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fb4a 	bl	800a178 <SDMMC_GetCmdResp7>
 8009ae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ae6:	69fb      	ldr	r3, [r7, #28]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3720      	adds	r7, #32
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009afe:	2337      	movs	r3, #55	; 0x37
 8009b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b12:	f107 0308 	add.w	r3, r7, #8
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7ff fe2b 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b22:	2137      	movs	r1, #55	; 0x37
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f933 	bl	8009d90 <SDMMC_GetCmdResp1>
 8009b2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b2c:	69fb      	ldr	r3, [r7, #28]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3720      	adds	r7, #32
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b088      	sub	sp, #32
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009b44:	2329      	movs	r3, #41	; 0x29
 8009b46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b58:	f107 0308 	add.w	r3, r7, #8
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff fe08 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fa4f 	bl	800a008 <SDMMC_GetCmdResp3>
 8009b6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b6c:	69fb      	ldr	r3, [r7, #28]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3720      	adds	r7, #32
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b088      	sub	sp, #32
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009b84:	2306      	movs	r3, #6
 8009b86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b98:	f107 0308 	add.w	r3, r7, #8
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7ff fde8 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ba8:	2106      	movs	r1, #6
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f8f0 	bl	8009d90 <SDMMC_GetCmdResp1>
 8009bb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bb2:	69fb      	ldr	r3, [r7, #28]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3720      	adds	r7, #32
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009bc8:	2333      	movs	r3, #51	; 0x33
 8009bca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bdc:	f107 0308 	add.w	r3, r7, #8
 8009be0:	4619      	mov	r1, r3
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff fdc6 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bec:	2133      	movs	r1, #51	; 0x33
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f8ce 	bl	8009d90 <SDMMC_GetCmdResp1>
 8009bf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bf6:	69fb      	ldr	r3, [r7, #28]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3720      	adds	r7, #32
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b088      	sub	sp, #32
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009c10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c16:	2300      	movs	r3, #0
 8009c18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c20:	f107 0308 	add.w	r3, r7, #8
 8009c24:	4619      	mov	r1, r3
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff fda4 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f9a1 	bl	8009f74 <SDMMC_GetCmdResp2>
 8009c32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c34:	69fb      	ldr	r3, [r7, #28]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3720      	adds	r7, #32
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b088      	sub	sp, #32
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009c4c:	2309      	movs	r3, #9
 8009c4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009c50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c56:	2300      	movs	r3, #0
 8009c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c60:	f107 0308 	add.w	r3, r7, #8
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7ff fd84 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f981 	bl	8009f74 <SDMMC_GetCmdResp2>
 8009c72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c74:	69fb      	ldr	r3, [r7, #28]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3720      	adds	r7, #32
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b088      	sub	sp, #32
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c96:	2300      	movs	r3, #0
 8009c98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ca0:	f107 0308 	add.w	r3, r7, #8
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff fd64 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	2103      	movs	r1, #3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f9e9 	bl	800a088 <SDMMC_GetCmdResp6>
 8009cb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cb8:	69fb      	ldr	r3, [r7, #28]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3720      	adds	r7, #32
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b088      	sub	sp, #32
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009cd0:	230d      	movs	r3, #13
 8009cd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ce4:	f107 0308 	add.w	r3, r7, #8
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff fd42 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf4:	210d      	movs	r1, #13
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f84a 	bl	8009d90 <SDMMC_GetCmdResp1>
 8009cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cfe:	69fb      	ldr	r3, [r7, #28]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3720      	adds	r7, #32
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009d14:	230d      	movs	r3, #13
 8009d16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d28:	f107 0308 	add.w	r3, r7, #8
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7ff fd20 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d38:	210d      	movs	r1, #13
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f828 	bl	8009d90 <SDMMC_GetCmdResp1>
 8009d40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d42:	69fb      	ldr	r3, [r7, #28]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3720      	adds	r7, #32
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009d54:	2300      	movs	r3, #0
 8009d56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009d58:	230b      	movs	r3, #11
 8009d5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d62:	2300      	movs	r3, #0
 8009d64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d6c:	f107 0308 	add.w	r3, r7, #8
 8009d70:	4619      	mov	r1, r3
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7ff fcfe 	bl	8009774 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d7c:	210b      	movs	r1, #11
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f806 	bl	8009d90 <SDMMC_GetCmdResp1>
 8009d84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d86:	69fb      	ldr	r3, [r7, #28]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3720      	adds	r7, #32
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b088      	sub	sp, #32
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	607a      	str	r2, [r7, #4]
 8009d9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009d9e:	4b70      	ldr	r3, [pc, #448]	; (8009f60 <SDMMC_GetCmdResp1+0x1d0>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a70      	ldr	r2, [pc, #448]	; (8009f64 <SDMMC_GetCmdResp1+0x1d4>)
 8009da4:	fba2 2303 	umull	r2, r3, r2, r3
 8009da8:	0a5a      	lsrs	r2, r3, #9
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	fb02 f303 	mul.w	r3, r2, r3
 8009db0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	1e5a      	subs	r2, r3, #1
 8009db6:	61fa      	str	r2, [r7, #28]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d102      	bne.n	8009dc2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dc0:	e0c9      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc6:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	4b67      	ldr	r3, [pc, #412]	; (8009f68 <SDMMC_GetCmdResp1+0x1d8>)
 8009dcc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d0ef      	beq.n	8009db2 <SDMMC_GetCmdResp1+0x22>
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1ea      	bne.n	8009db2 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de0:	f003 0304 	and.w	r3, r3, #4
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d004      	beq.n	8009df2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2204      	movs	r2, #4
 8009dec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dee:	2304      	movs	r3, #4
 8009df0:	e0b1      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d004      	beq.n	8009e08 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2201      	movs	r2, #1
 8009e02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e0a6      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4a58      	ldr	r2, [pc, #352]	; (8009f6c <SDMMC_GetCmdResp1+0x1dc>)
 8009e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f7ff fcda 	bl	80097c8 <SDMMC_GetCommandResponse>
 8009e14:	4603      	mov	r3, r0
 8009e16:	461a      	mov	r2, r3
 8009e18:	7afb      	ldrb	r3, [r7, #11]
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d001      	beq.n	8009e22 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e099      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009e22:	2100      	movs	r1, #0
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f7ff fcdc 	bl	80097e2 <SDMMC_GetResponse>
 8009e2a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	4b50      	ldr	r3, [pc, #320]	; (8009f70 <SDMMC_GetCmdResp1+0x1e0>)
 8009e30:	4013      	ands	r3, r2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	e08d      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	da02      	bge.n	8009e46 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e44:	e087      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e50:	2340      	movs	r3, #64	; 0x40
 8009e52:	e080      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e5e:	2380      	movs	r3, #128	; 0x80
 8009e60:	e079      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e70:	e071      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e80:	e069      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e90:	e061      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ea0:	e059      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eb0:	e051      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ec0:	e049      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009ecc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ed0:	e041      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ee0:	e039      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009ef0:	e031      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009efc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009f00:	e029      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f10:	e021      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009f20:	e019      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009f30:	e011      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f40:	e009      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f003 0308 	and.w	r3, r3, #8
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009f50:	e001      	b.n	8009f56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3720      	adds	r7, #32
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20000014 	.word	0x20000014
 8009f64:	10624dd3 	.word	0x10624dd3
 8009f68:	00200045 	.word	0x00200045
 8009f6c:	002000c5 	.word	0x002000c5
 8009f70:	fdffe008 	.word	0xfdffe008

08009f74 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f7c:	4b1f      	ldr	r3, [pc, #124]	; (8009ffc <SDMMC_GetCmdResp2+0x88>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a1f      	ldr	r2, [pc, #124]	; (800a000 <SDMMC_GetCmdResp2+0x8c>)
 8009f82:	fba2 2303 	umull	r2, r3, r2, r3
 8009f86:	0a5b      	lsrs	r3, r3, #9
 8009f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f8c:	fb02 f303 	mul.w	r3, r2, r3
 8009f90:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	60fa      	str	r2, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d102      	bne.n	8009fa2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fa0:	e026      	b.n	8009ff0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d0ef      	beq.n	8009f92 <SDMMC_GetCmdResp2+0x1e>
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1ea      	bne.n	8009f92 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc0:	f003 0304 	and.w	r3, r3, #4
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d004      	beq.n	8009fd2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2204      	movs	r2, #4
 8009fcc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fce:	2304      	movs	r3, #4
 8009fd0:	e00e      	b.n	8009ff0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d004      	beq.n	8009fe8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e003      	b.n	8009ff0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a06      	ldr	r2, [pc, #24]	; (800a004 <SDMMC_GetCmdResp2+0x90>)
 8009fec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	20000014 	.word	0x20000014
 800a000:	10624dd3 	.word	0x10624dd3
 800a004:	002000c5 	.word	0x002000c5

0800a008 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a010:	4b1a      	ldr	r3, [pc, #104]	; (800a07c <SDMMC_GetCmdResp3+0x74>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a1a      	ldr	r2, [pc, #104]	; (800a080 <SDMMC_GetCmdResp3+0x78>)
 800a016:	fba2 2303 	umull	r2, r3, r2, r3
 800a01a:	0a5b      	lsrs	r3, r3, #9
 800a01c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a020:	fb02 f303 	mul.w	r3, r2, r3
 800a024:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	1e5a      	subs	r2, r3, #1
 800a02a:	60fa      	str	r2, [r7, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a030:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a034:	e01b      	b.n	800a06e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0ef      	beq.n	800a026 <SDMMC_GetCmdResp3+0x1e>
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1ea      	bne.n	800a026 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d004      	beq.n	800a066 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2204      	movs	r2, #4
 800a060:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a062:	2304      	movs	r3, #4
 800a064:	e003      	b.n	800a06e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a06      	ldr	r2, [pc, #24]	; (800a084 <SDMMC_GetCmdResp3+0x7c>)
 800a06a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	20000014 	.word	0x20000014
 800a080:	10624dd3 	.word	0x10624dd3
 800a084:	002000c5 	.word	0x002000c5

0800a088 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b088      	sub	sp, #32
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	460b      	mov	r3, r1
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a096:	4b35      	ldr	r3, [pc, #212]	; (800a16c <SDMMC_GetCmdResp6+0xe4>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a35      	ldr	r2, [pc, #212]	; (800a170 <SDMMC_GetCmdResp6+0xe8>)
 800a09c:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a0:	0a5b      	lsrs	r3, r3, #9
 800a0a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a6:	fb02 f303 	mul.w	r3, r2, r3
 800a0aa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	1e5a      	subs	r2, r3, #1
 800a0b0:	61fa      	str	r2, [r7, #28]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d102      	bne.n	800a0bc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0ba:	e052      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d0ef      	beq.n	800a0ac <SDMMC_GetCmdResp6+0x24>
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1ea      	bne.n	800a0ac <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0da:	f003 0304 	and.w	r3, r3, #4
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d004      	beq.n	800a0ec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2204      	movs	r2, #4
 800a0e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	e03a      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d004      	beq.n	800a102 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e02f      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7ff fb60 	bl	80097c8 <SDMMC_GetCommandResponse>
 800a108:	4603      	mov	r3, r0
 800a10a:	461a      	mov	r2, r3
 800a10c:	7afb      	ldrb	r3, [r7, #11]
 800a10e:	4293      	cmp	r3, r2
 800a110:	d001      	beq.n	800a116 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a112:	2301      	movs	r3, #1
 800a114:	e025      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	4a16      	ldr	r2, [pc, #88]	; (800a174 <SDMMC_GetCmdResp6+0xec>)
 800a11a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a11c:	2100      	movs	r1, #0
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7ff fb5f 	bl	80097e2 <SDMMC_GetResponse>
 800a124:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d106      	bne.n	800a13e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	0c1b      	lsrs	r3, r3, #16
 800a134:	b29a      	uxth	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a13a:	2300      	movs	r3, #0
 800a13c:	e011      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a14c:	e009      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a15c:	e001      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a15e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a162:	4618      	mov	r0, r3
 800a164:	3720      	adds	r7, #32
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000014 	.word	0x20000014
 800a170:	10624dd3 	.word	0x10624dd3
 800a174:	002000c5 	.word	0x002000c5

0800a178 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a180:	4b22      	ldr	r3, [pc, #136]	; (800a20c <SDMMC_GetCmdResp7+0x94>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a22      	ldr	r2, [pc, #136]	; (800a210 <SDMMC_GetCmdResp7+0x98>)
 800a186:	fba2 2303 	umull	r2, r3, r2, r3
 800a18a:	0a5b      	lsrs	r3, r3, #9
 800a18c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a190:	fb02 f303 	mul.w	r3, r2, r3
 800a194:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	1e5a      	subs	r2, r3, #1
 800a19a:	60fa      	str	r2, [r7, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1a4:	e02c      	b.n	800a200 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0ef      	beq.n	800a196 <SDMMC_GetCmdResp7+0x1e>
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1ea      	bne.n	800a196 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d004      	beq.n	800a1d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2204      	movs	r2, #4
 800a1d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1d2:	2304      	movs	r3, #4
 800a1d4:	e014      	b.n	800a200 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d004      	beq.n	800a1ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e009      	b.n	800a200 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2240      	movs	r2, #64	; 0x40
 800a1fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a1fe:	2300      	movs	r3, #0

}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20000014 	.word	0x20000014
 800a210:	10624dd3 	.word	0x10624dd3

0800a214 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a21c:	4b11      	ldr	r3, [pc, #68]	; (800a264 <SDMMC_GetCmdError+0x50>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a11      	ldr	r2, [pc, #68]	; (800a268 <SDMMC_GetCmdError+0x54>)
 800a222:	fba2 2303 	umull	r2, r3, r2, r3
 800a226:	0a5b      	lsrs	r3, r3, #9
 800a228:	f241 3288 	movw	r2, #5000	; 0x1388
 800a22c:	fb02 f303 	mul.w	r3, r2, r3
 800a230:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	1e5a      	subs	r2, r3, #1
 800a236:	60fa      	str	r2, [r7, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d102      	bne.n	800a242 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a23c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a240:	e009      	b.n	800a256 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d0f1      	beq.n	800a232 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a06      	ldr	r2, [pc, #24]	; (800a26c <SDMMC_GetCmdError+0x58>)
 800a252:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20000014 	.word	0x20000014
 800a268:	10624dd3 	.word	0x10624dd3
 800a26c:	002000c5 	.word	0x002000c5

0800a270 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a274:	4904      	ldr	r1, [pc, #16]	; (800a288 <MX_FATFS_Init+0x18>)
 800a276:	4805      	ldr	r0, [pc, #20]	; (800a28c <MX_FATFS_Init+0x1c>)
 800a278:	f003 f8e8 	bl	800d44c <FATFS_LinkDriver>
 800a27c:	4603      	mov	r3, r0
 800a27e:	461a      	mov	r2, r3
 800a280:	4b03      	ldr	r3, [pc, #12]	; (800a290 <MX_FATFS_Init+0x20>)
 800a282:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a284:	bf00      	nop
 800a286:	bd80      	pop	{r7, pc}
 800a288:	20000988 	.word	0x20000988
 800a28c:	08015db4 	.word	0x08015db4
 800a290:	20000984 	.word	0x20000984

0800a294 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a294:	b480      	push	{r7}
 800a296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a298:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a2ae:	f000 f885 	bl	800a3bc <BSP_SD_IsDetected>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d001      	beq.n	800a2bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e012      	b.n	800a2e2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a2bc:	480b      	ldr	r0, [pc, #44]	; (800a2ec <BSP_SD_Init+0x48>)
 800a2be:	f7fd f819 	bl	80072f4 <HAL_SD_Init>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a2c6:	79fb      	ldrb	r3, [r7, #7]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d109      	bne.n	800a2e0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a2cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a2d0:	4806      	ldr	r0, [pc, #24]	; (800a2ec <BSP_SD_Init+0x48>)
 800a2d2:	f7fd fecd 	bl	8008070 <HAL_SD_ConfigWideBusOperation>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a2e0:	79fb      	ldrb	r3, [r7, #7]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	200003ec 	.word	0x200003ec

0800a2f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68ba      	ldr	r2, [r7, #8]
 800a304:	68f9      	ldr	r1, [r7, #12]
 800a306:	4806      	ldr	r0, [pc, #24]	; (800a320 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a308:	f7fd f91c 	bl	8007544 <HAL_SD_ReadBlocks_DMA>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a316:	7dfb      	ldrb	r3, [r7, #23]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	200003ec 	.word	0x200003ec

0800a324 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	68f9      	ldr	r1, [r7, #12]
 800a33a:	4806      	ldr	r0, [pc, #24]	; (800a354 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a33c:	f7fd f9aa 	bl	8007694 <HAL_SD_WriteBlocks_DMA>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	200003ec 	.word	0x200003ec

0800a358 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a35c:	4805      	ldr	r0, [pc, #20]	; (800a374 <BSP_SD_GetCardState+0x1c>)
 800a35e:	f7fd ff9b 	bl	8008298 <HAL_SD_GetCardState>
 800a362:	4603      	mov	r3, r0
 800a364:	2b04      	cmp	r3, #4
 800a366:	bf14      	ite	ne
 800a368:	2301      	movne	r3, #1
 800a36a:	2300      	moveq	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
}
 800a36e:	4618      	mov	r0, r3
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	200003ec 	.word	0x200003ec

0800a378 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a380:	6879      	ldr	r1, [r7, #4]
 800a382:	4803      	ldr	r0, [pc, #12]	; (800a390 <BSP_SD_GetCardInfo+0x18>)
 800a384:	f7fd fe48 	bl	8008018 <HAL_SD_GetCardInfo>
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	200003ec 	.word	0x200003ec

0800a394 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a39c:	f000 f9aa 	bl	800a6f4 <BSP_SD_WriteCpltCallback>
}
 800a3a0:	bf00      	nop
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a3b0:	f000 f9b2 	bl	800a718 <BSP_SD_ReadCpltCallback>
}
 800a3b4:	bf00      	nop
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a3c6:	f000 f80b 	bl	800a3e0 <BSP_PlatformIsDetected>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	b2db      	uxtb	r3, r3
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a3ea:	2120      	movs	r1, #32
 800a3ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a3f0:	f7fa f8a6 	bl	8004540 <HAL_GPIO_ReadPin>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
}
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a410:	f003 f920 	bl	800d654 <osKernelGetTickCount>
 800a414:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a416:	e006      	b.n	800a426 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a418:	f7ff ff9e 	bl	800a358 <BSP_SD_GetCardState>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a422:	2300      	movs	r3, #0
 800a424:	e009      	b.n	800a43a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a426:	f003 f915 	bl	800d654 <osKernelGetTickCount>
 800a42a:	4602      	mov	r2, r0
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	429a      	cmp	r2, r3
 800a434:	d8f0      	bhi.n	800a418 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
	...

0800a444 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a44e:	4b0b      	ldr	r3, [pc, #44]	; (800a47c <SD_CheckStatus+0x38>)
 800a450:	2201      	movs	r2, #1
 800a452:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a454:	f7ff ff80 	bl	800a358 <BSP_SD_GetCardState>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d107      	bne.n	800a46e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a45e:	4b07      	ldr	r3, [pc, #28]	; (800a47c <SD_CheckStatus+0x38>)
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	b2db      	uxtb	r3, r3
 800a464:	f023 0301 	bic.w	r3, r3, #1
 800a468:	b2da      	uxtb	r2, r3
 800a46a:	4b04      	ldr	r3, [pc, #16]	; (800a47c <SD_CheckStatus+0x38>)
 800a46c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a46e:	4b03      	ldr	r3, [pc, #12]	; (800a47c <SD_CheckStatus+0x38>)
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	b2db      	uxtb	r3, r3
}
 800a474:	4618      	mov	r0, r3
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	2000001d 	.word	0x2000001d

0800a480 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a48a:	4b1c      	ldr	r3, [pc, #112]	; (800a4fc <SD_initialize+0x7c>)
 800a48c:	2201      	movs	r2, #1
 800a48e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a490:	f003 f898 	bl	800d5c4 <osKernelGetState>
 800a494:	4603      	mov	r3, r0
 800a496:	2b02      	cmp	r3, #2
 800a498:	d129      	bne.n	800a4ee <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a49a:	f7ff ff03 	bl	800a2a4 <BSP_SD_Init>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d107      	bne.n	800a4b4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a4a4:	79fb      	ldrb	r3, [r7, #7]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7ff ffcc 	bl	800a444 <SD_CheckStatus>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	4b12      	ldr	r3, [pc, #72]	; (800a4fc <SD_initialize+0x7c>)
 800a4b2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a4b4:	4b11      	ldr	r3, [pc, #68]	; (800a4fc <SD_initialize+0x7c>)
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d017      	beq.n	800a4ee <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800a4be:	4b10      	ldr	r3, [pc, #64]	; (800a500 <SD_initialize+0x80>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d107      	bne.n	800a4d6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2102      	movs	r1, #2
 800a4ca:	200a      	movs	r0, #10
 800a4cc:	f003 fbd8 	bl	800dc80 <osMessageQueueNew>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	4a0b      	ldr	r2, [pc, #44]	; (800a500 <SD_initialize+0x80>)
 800a4d4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800a4d6:	4b0a      	ldr	r3, [pc, #40]	; (800a500 <SD_initialize+0x80>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d107      	bne.n	800a4ee <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800a4de:	4b07      	ldr	r3, [pc, #28]	; (800a4fc <SD_initialize+0x7c>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	f043 0301 	orr.w	r3, r3, #1
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <SD_initialize+0x7c>)
 800a4ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a4ee:	4b03      	ldr	r3, [pc, #12]	; (800a4fc <SD_initialize+0x7c>)
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	b2db      	uxtb	r3, r3
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	2000001d 	.word	0x2000001d
 800a500:	20000df0 	.word	0x20000df0

0800a504 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a50e:	79fb      	ldrb	r3, [r7, #7]
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff ff97 	bl	800a444 <SD_CheckStatus>
 800a516:	4603      	mov	r3, r0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af00      	add	r7, sp, #0
 800a526:	60b9      	str	r1, [r7, #8]
 800a528:	607a      	str	r2, [r7, #4]
 800a52a:	603b      	str	r3, [r7, #0]
 800a52c:	4603      	mov	r3, r0
 800a52e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a534:	f247 5030 	movw	r0, #30000	; 0x7530
 800a538:	f7ff ff66 	bl	800a408 <SD_CheckStatusWithTimeout>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	da01      	bge.n	800a546 <SD_read+0x26>
  {
    return res;
 800a542:	7ffb      	ldrb	r3, [r7, #31]
 800a544:	e02f      	b.n	800a5a6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	68b8      	ldr	r0, [r7, #8]
 800a54c:	f7ff fed0 	bl	800a2f0 <BSP_SD_ReadBlocks_DMA>
 800a550:	4603      	mov	r3, r0
 800a552:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800a554:	7fbb      	ldrb	r3, [r7, #30]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d124      	bne.n	800a5a4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a55a:	4b15      	ldr	r3, [pc, #84]	; (800a5b0 <SD_read+0x90>)
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	f107 0112 	add.w	r1, r7, #18
 800a562:	f247 5330 	movw	r3, #30000	; 0x7530
 800a566:	2200      	movs	r2, #0
 800a568:	f003 fc5e 	bl	800de28 <osMessageQueueGet>
 800a56c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d117      	bne.n	800a5a4 <SD_read+0x84>
 800a574:	8a7b      	ldrh	r3, [r7, #18]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d114      	bne.n	800a5a4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800a57a:	f003 f86b 	bl	800d654 <osKernelGetTickCount>
 800a57e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a580:	e007      	b.n	800a592 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a582:	f7ff fee9 	bl	800a358 <BSP_SD_GetCardState>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <SD_read+0x72>
              {
                res = RES_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a590:	e008      	b.n	800a5a4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a592:	f003 f85f 	bl	800d654 <osKernelGetTickCount>
 800a596:	4602      	mov	r2, r0
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d9ee      	bls.n	800a582 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a5a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3720      	adds	r7, #32
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20000df0 	.word	0x20000df0

0800a5b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b088      	sub	sp, #32
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60b9      	str	r1, [r7, #8]
 800a5bc:	607a      	str	r2, [r7, #4]
 800a5be:	603b      	str	r3, [r7, #0]
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a5c8:	f247 5030 	movw	r0, #30000	; 0x7530
 800a5cc:	f7ff ff1c 	bl	800a408 <SD_CheckStatusWithTimeout>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	da01      	bge.n	800a5da <SD_write+0x26>
  {
    return res;
 800a5d6:	7ffb      	ldrb	r3, [r7, #31]
 800a5d8:	e02d      	b.n	800a636 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	6879      	ldr	r1, [r7, #4]
 800a5de:	68b8      	ldr	r0, [r7, #8]
 800a5e0:	f7ff fea0 	bl	800a324 <BSP_SD_WriteBlocks_DMA>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d124      	bne.n	800a634 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a5ea:	4b15      	ldr	r3, [pc, #84]	; (800a640 <SD_write+0x8c>)
 800a5ec:	6818      	ldr	r0, [r3, #0]
 800a5ee:	f107 0112 	add.w	r1, r7, #18
 800a5f2:	f247 5330 	movw	r3, #30000	; 0x7530
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f003 fc16 	bl	800de28 <osMessageQueueGet>
 800a5fc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d117      	bne.n	800a634 <SD_write+0x80>
 800a604:	8a7b      	ldrh	r3, [r7, #18]
 800a606:	2b02      	cmp	r3, #2
 800a608:	d114      	bne.n	800a634 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800a60a:	f003 f823 	bl	800d654 <osKernelGetTickCount>
 800a60e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a610:	e007      	b.n	800a622 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a612:	f7ff fea1 	bl	800a358 <BSP_SD_GetCardState>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d102      	bne.n	800a622 <SD_write+0x6e>
          {
            res = RES_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	77fb      	strb	r3, [r7, #31]
            break;
 800a620:	e008      	b.n	800a634 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a622:	f003 f817 	bl	800d654 <osKernelGetTickCount>
 800a626:	4602      	mov	r2, r0
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a630:	4293      	cmp	r3, r2
 800a632:	d9ee      	bls.n	800a612 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800a634:	7ffb      	ldrb	r3, [r7, #31]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3720      	adds	r7, #32
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	20000df0 	.word	0x20000df0

0800a644 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b08c      	sub	sp, #48	; 0x30
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	603a      	str	r2, [r7, #0]
 800a64e:	71fb      	strb	r3, [r7, #7]
 800a650:	460b      	mov	r3, r1
 800a652:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a65a:	4b25      	ldr	r3, [pc, #148]	; (800a6f0 <SD_ioctl+0xac>)
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <SD_ioctl+0x28>
 800a668:	2303      	movs	r3, #3
 800a66a:	e03c      	b.n	800a6e6 <SD_ioctl+0xa2>

  switch (cmd)
 800a66c:	79bb      	ldrb	r3, [r7, #6]
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d834      	bhi.n	800a6dc <SD_ioctl+0x98>
 800a672:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <SD_ioctl+0x34>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a689 	.word	0x0800a689
 800a67c:	0800a691 	.word	0x0800a691
 800a680:	0800a6a9 	.word	0x0800a6a9
 800a684:	0800a6c3 	.word	0x0800a6c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a688:	2300      	movs	r3, #0
 800a68a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a68e:	e028      	b.n	800a6e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a690:	f107 0308 	add.w	r3, r7, #8
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff fe6f 	bl	800a378 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a69a:	6a3a      	ldr	r2, [r7, #32]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a6a6:	e01c      	b.n	800a6e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff fe63 	bl	800a378 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a6c0:	e00f      	b.n	800a6e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a6c2:	f107 0308 	add.w	r3, r7, #8
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7ff fe56 	bl	800a378 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	0a5a      	lsrs	r2, r3, #9
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a6da:	e002      	b.n	800a6e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a6dc:	2304      	movs	r3, #4
 800a6de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a6e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3730      	adds	r7, #48	; 0x30
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	2000001d 	.word	0x2000001d

0800a6f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a6fe:	4b05      	ldr	r3, [pc, #20]	; (800a714 <BSP_SD_WriteCpltCallback+0x20>)
 800a700:	6818      	ldr	r0, [r3, #0]
 800a702:	1db9      	adds	r1, r7, #6
 800a704:	2300      	movs	r3, #0
 800a706:	2200      	movs	r2, #0
 800a708:	f003 fb2e 	bl	800dd68 <osMessageQueuePut>
#endif
}
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	20000df0 	.word	0x20000df0

0800a718 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800a71e:	2301      	movs	r3, #1
 800a720:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a722:	4b05      	ldr	r3, [pc, #20]	; (800a738 <BSP_SD_ReadCpltCallback+0x20>)
 800a724:	6818      	ldr	r0, [r3, #0]
 800a726:	1db9      	adds	r1, r7, #6
 800a728:	2300      	movs	r3, #0
 800a72a:	2200      	movs	r2, #0
 800a72c:	f003 fb1c 	bl	800dd68 <osMessageQueuePut>
#endif
}
 800a730:	bf00      	nop
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	20000df0 	.word	0x20000df0

0800a73c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	4603      	mov	r3, r0
 800a744:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	4a08      	ldr	r2, [pc, #32]	; (800a76c <disk_status+0x30>)
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	4413      	add	r3, r2
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	79fa      	ldrb	r2, [r7, #7]
 800a754:	4905      	ldr	r1, [pc, #20]	; (800a76c <disk_status+0x30>)
 800a756:	440a      	add	r2, r1
 800a758:	7a12      	ldrb	r2, [r2, #8]
 800a75a:	4610      	mov	r0, r2
 800a75c:	4798      	blx	r3
 800a75e:	4603      	mov	r3, r0
 800a760:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	20000e1c 	.word	0x20000e1c

0800a770 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	4a0d      	ldr	r2, [pc, #52]	; (800a7b8 <disk_initialize+0x48>)
 800a782:	5cd3      	ldrb	r3, [r2, r3]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d111      	bne.n	800a7ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a788:	79fb      	ldrb	r3, [r7, #7]
 800a78a:	4a0b      	ldr	r2, [pc, #44]	; (800a7b8 <disk_initialize+0x48>)
 800a78c:	2101      	movs	r1, #1
 800a78e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a790:	79fb      	ldrb	r3, [r7, #7]
 800a792:	4a09      	ldr	r2, [pc, #36]	; (800a7b8 <disk_initialize+0x48>)
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	79fa      	ldrb	r2, [r7, #7]
 800a79e:	4906      	ldr	r1, [pc, #24]	; (800a7b8 <disk_initialize+0x48>)
 800a7a0:	440a      	add	r2, r1
 800a7a2:	7a12      	ldrb	r2, [r2, #8]
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	4798      	blx	r3
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20000e1c 	.word	0x20000e1c

0800a7bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a7bc:	b590      	push	{r4, r7, lr}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60b9      	str	r1, [r7, #8]
 800a7c4:	607a      	str	r2, [r7, #4]
 800a7c6:	603b      	str	r3, [r7, #0]
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
 800a7ce:	4a0a      	ldr	r2, [pc, #40]	; (800a7f8 <disk_read+0x3c>)
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	689c      	ldr	r4, [r3, #8]
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	4a07      	ldr	r2, [pc, #28]	; (800a7f8 <disk_read+0x3c>)
 800a7dc:	4413      	add	r3, r2
 800a7de:	7a18      	ldrb	r0, [r3, #8]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	47a0      	blx	r4
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800a7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	371c      	adds	r7, #28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd90      	pop	{r4, r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20000e1c 	.word	0x20000e1c

0800a7fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a7fc:	b590      	push	{r4, r7, lr}
 800a7fe:	b087      	sub	sp, #28
 800a800:	af00      	add	r7, sp, #0
 800a802:	60b9      	str	r1, [r7, #8]
 800a804:	607a      	str	r2, [r7, #4]
 800a806:	603b      	str	r3, [r7, #0]
 800a808:	4603      	mov	r3, r0
 800a80a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
 800a80e:	4a0a      	ldr	r2, [pc, #40]	; (800a838 <disk_write+0x3c>)
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	68dc      	ldr	r4, [r3, #12]
 800a818:	7bfb      	ldrb	r3, [r7, #15]
 800a81a:	4a07      	ldr	r2, [pc, #28]	; (800a838 <disk_write+0x3c>)
 800a81c:	4413      	add	r3, r2
 800a81e:	7a18      	ldrb	r0, [r3, #8]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	68b9      	ldr	r1, [r7, #8]
 800a826:	47a0      	blx	r4
 800a828:	4603      	mov	r3, r0
 800a82a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	371c      	adds	r7, #28
 800a832:	46bd      	mov	sp, r7
 800a834:	bd90      	pop	{r4, r7, pc}
 800a836:	bf00      	nop
 800a838:	20000e1c 	.word	0x20000e1c

0800a83c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	4603      	mov	r3, r0
 800a844:	603a      	str	r2, [r7, #0]
 800a846:	71fb      	strb	r3, [r7, #7]
 800a848:	460b      	mov	r3, r1
 800a84a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a84c:	79fb      	ldrb	r3, [r7, #7]
 800a84e:	4a09      	ldr	r2, [pc, #36]	; (800a874 <disk_ioctl+0x38>)
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	79fa      	ldrb	r2, [r7, #7]
 800a85a:	4906      	ldr	r1, [pc, #24]	; (800a874 <disk_ioctl+0x38>)
 800a85c:	440a      	add	r2, r1
 800a85e:	7a10      	ldrb	r0, [r2, #8]
 800a860:	79b9      	ldrb	r1, [r7, #6]
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	4798      	blx	r3
 800a866:	4603      	mov	r3, r0
 800a868:	73fb      	strb	r3, [r7, #15]
  return res;
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20000e1c 	.word	0x20000e1c

0800a878 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	3301      	adds	r3, #1
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a888:	89fb      	ldrh	r3, [r7, #14]
 800a88a:	021b      	lsls	r3, r3, #8
 800a88c:	b21a      	sxth	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	b21b      	sxth	r3, r3
 800a894:	4313      	orrs	r3, r2
 800a896:	b21b      	sxth	r3, r3
 800a898:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a89a:	89fb      	ldrh	r3, [r7, #14]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3303      	adds	r3, #3
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	021b      	lsls	r3, r3, #8
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	3202      	adds	r2, #2
 800a8c0:	7812      	ldrb	r2, [r2, #0]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	021b      	lsls	r3, r3, #8
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	3201      	adds	r2, #1
 800a8ce:	7812      	ldrb	r2, [r2, #0]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	021b      	lsls	r3, r3, #8
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	7812      	ldrb	r2, [r2, #0]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
	return rv;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b083      	sub	sp, #12
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	1c5a      	adds	r2, r3, #1
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	887a      	ldrh	r2, [r7, #2]
 800a902:	b2d2      	uxtb	r2, r2
 800a904:	701a      	strb	r2, [r3, #0]
 800a906:	887b      	ldrh	r3, [r7, #2]
 800a908:	0a1b      	lsrs	r3, r3, #8
 800a90a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	1c5a      	adds	r2, r3, #1
 800a910:	607a      	str	r2, [r7, #4]
 800a912:	887a      	ldrh	r2, [r7, #2]
 800a914:	b2d2      	uxtb	r2, r2
 800a916:	701a      	strb	r2, [r3, #0]
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	b2d2      	uxtb	r2, r2
 800a938:	701a      	strb	r2, [r3, #0]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	0a1b      	lsrs	r3, r3, #8
 800a93e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	1c5a      	adds	r2, r3, #1
 800a944:	607a      	str	r2, [r7, #4]
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	b2d2      	uxtb	r2, r2
 800a94a:	701a      	strb	r2, [r3, #0]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	0a1b      	lsrs	r3, r3, #8
 800a950:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	1c5a      	adds	r2, r3, #1
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	b2d2      	uxtb	r2, r2
 800a95c:	701a      	strb	r2, [r3, #0]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	0a1b      	lsrs	r3, r3, #8
 800a962:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	1c5a      	adds	r2, r3, #1
 800a968:	607a      	str	r2, [r7, #4]
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	b2d2      	uxtb	r2, r2
 800a96e:	701a      	strb	r2, [r3, #0]
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00d      	beq.n	800a9b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a996:	693a      	ldr	r2, [r7, #16]
 800a998:	1c53      	adds	r3, r2, #1
 800a99a:	613b      	str	r3, [r7, #16]
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	1c59      	adds	r1, r3, #1
 800a9a0:	6179      	str	r1, [r7, #20]
 800a9a2:	7812      	ldrb	r2, [r2, #0]
 800a9a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	607b      	str	r3, [r7, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1f1      	bne.n	800a996 <mem_cpy+0x1a>
	}
}
 800a9b2:	bf00      	nop
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a9be:	b480      	push	{r7}
 800a9c0:	b087      	sub	sp, #28
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	60f8      	str	r0, [r7, #12]
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	1c5a      	adds	r2, r3, #1
 800a9d2:	617a      	str	r2, [r7, #20]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	b2d2      	uxtb	r2, r2
 800a9d8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	607b      	str	r3, [r7, #4]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f3      	bne.n	800a9ce <mem_set+0x10>
}
 800a9e6:	bf00      	nop
 800a9e8:	bf00      	nop
 800a9ea:	371c      	adds	r7, #28
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a9f4:	b480      	push	{r7}
 800a9f6:	b089      	sub	sp, #36	; 0x24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	61fb      	str	r3, [r7, #28]
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	1c5a      	adds	r2, r3, #1
 800aa10:	61fa      	str	r2, [r7, #28]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	4619      	mov	r1, r3
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	61ba      	str	r2, [r7, #24]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	1acb      	subs	r3, r1, r3
 800aa20:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	3b01      	subs	r3, #1
 800aa26:	607b      	str	r3, [r7, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <mem_cmp+0x40>
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d0eb      	beq.n	800aa0c <mem_cmp+0x18>

	return r;
 800aa34:	697b      	ldr	r3, [r7, #20]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3724      	adds	r7, #36	; 0x24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aa42:	b480      	push	{r7}
 800aa44:	b083      	sub	sp, #12
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aa4c:	e002      	b.n	800aa54 <chk_chr+0x12>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3301      	adds	r3, #1
 800aa52:	607b      	str	r3, [r7, #4]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d005      	beq.n	800aa68 <chk_chr+0x26>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	461a      	mov	r2, r3
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d1f2      	bne.n	800aa4e <chk_chr+0xc>
	return *str;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d009      	beq.n	800aa9a <lock_fs+0x22>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f002 fd12 	bl	800d4b4 <ff_req_grant>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <lock_fs+0x22>
 800aa96:	2301      	movs	r3, #1
 800aa98:	e000      	b.n	800aa9c <lock_fs+0x24>
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00d      	beq.n	800aad2 <unlock_fs+0x2e>
 800aab6:	78fb      	ldrb	r3, [r7, #3]
 800aab8:	2b0c      	cmp	r3, #12
 800aaba:	d00a      	beq.n	800aad2 <unlock_fs+0x2e>
 800aabc:	78fb      	ldrb	r3, [r7, #3]
 800aabe:	2b0b      	cmp	r3, #11
 800aac0:	d007      	beq.n	800aad2 <unlock_fs+0x2e>
 800aac2:	78fb      	ldrb	r3, [r7, #3]
 800aac4:	2b0f      	cmp	r3, #15
 800aac6:	d004      	beq.n	800aad2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	4618      	mov	r0, r3
 800aace:	f002 fd06 	bl	800d4de <ff_rel_grant>
	}
}
 800aad2:	bf00      	nop
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
	...

0800aadc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aae6:	2300      	movs	r3, #0
 800aae8:	60bb      	str	r3, [r7, #8]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	60fb      	str	r3, [r7, #12]
 800aaee:	e029      	b.n	800ab44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aaf0:	4a27      	ldr	r2, [pc, #156]	; (800ab90 <chk_lock+0xb4>)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	011b      	lsls	r3, r3, #4
 800aaf6:	4413      	add	r3, r2
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d01d      	beq.n	800ab3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aafe:	4a24      	ldr	r2, [pc, #144]	; (800ab90 <chk_lock+0xb4>)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	011b      	lsls	r3, r3, #4
 800ab04:	4413      	add	r3, r2
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d116      	bne.n	800ab3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ab10:	4a1f      	ldr	r2, [pc, #124]	; (800ab90 <chk_lock+0xb4>)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	011b      	lsls	r3, r3, #4
 800ab16:	4413      	add	r3, r2
 800ab18:	3304      	adds	r3, #4
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d10c      	bne.n	800ab3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab24:	4a1a      	ldr	r2, [pc, #104]	; (800ab90 <chk_lock+0xb4>)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	011b      	lsls	r3, r3, #4
 800ab2a:	4413      	add	r3, r2
 800ab2c:	3308      	adds	r3, #8
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d102      	bne.n	800ab3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab38:	e007      	b.n	800ab4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3301      	adds	r3, #1
 800ab42:	60fb      	str	r3, [r7, #12]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d9d2      	bls.n	800aaf0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d109      	bne.n	800ab64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d102      	bne.n	800ab5c <chk_lock+0x80>
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d101      	bne.n	800ab60 <chk_lock+0x84>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	e010      	b.n	800ab82 <chk_lock+0xa6>
 800ab60:	2312      	movs	r3, #18
 800ab62:	e00e      	b.n	800ab82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d108      	bne.n	800ab7c <chk_lock+0xa0>
 800ab6a:	4a09      	ldr	r2, [pc, #36]	; (800ab90 <chk_lock+0xb4>)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	011b      	lsls	r3, r3, #4
 800ab70:	4413      	add	r3, r2
 800ab72:	330c      	adds	r3, #12
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab7a:	d101      	bne.n	800ab80 <chk_lock+0xa4>
 800ab7c:	2310      	movs	r3, #16
 800ab7e:	e000      	b.n	800ab82 <chk_lock+0xa6>
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	20000dfc 	.word	0x20000dfc

0800ab94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	607b      	str	r3, [r7, #4]
 800ab9e:	e002      	b.n	800aba6 <enq_lock+0x12>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3301      	adds	r3, #1
 800aba4:	607b      	str	r3, [r7, #4]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d806      	bhi.n	800abba <enq_lock+0x26>
 800abac:	4a09      	ldr	r2, [pc, #36]	; (800abd4 <enq_lock+0x40>)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	011b      	lsls	r3, r3, #4
 800abb2:	4413      	add	r3, r2
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1f2      	bne.n	800aba0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	bf14      	ite	ne
 800abc0:	2301      	movne	r3, #1
 800abc2:	2300      	moveq	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop
 800abd4:	20000dfc 	.word	0x20000dfc

0800abd8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800abe2:	2300      	movs	r3, #0
 800abe4:	60fb      	str	r3, [r7, #12]
 800abe6:	e01f      	b.n	800ac28 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800abe8:	4a41      	ldr	r2, [pc, #260]	; (800acf0 <inc_lock+0x118>)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	011b      	lsls	r3, r3, #4
 800abee:	4413      	add	r3, r2
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d113      	bne.n	800ac22 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800abfa:	4a3d      	ldr	r2, [pc, #244]	; (800acf0 <inc_lock+0x118>)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	011b      	lsls	r3, r3, #4
 800ac00:	4413      	add	r3, r2
 800ac02:	3304      	adds	r3, #4
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d109      	bne.n	800ac22 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ac0e:	4a38      	ldr	r2, [pc, #224]	; (800acf0 <inc_lock+0x118>)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	011b      	lsls	r3, r3, #4
 800ac14:	4413      	add	r3, r2
 800ac16:	3308      	adds	r3, #8
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d006      	beq.n	800ac30 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3301      	adds	r3, #1
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d9dc      	bls.n	800abe8 <inc_lock+0x10>
 800ac2e:	e000      	b.n	800ac32 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ac30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d132      	bne.n	800ac9e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	e002      	b.n	800ac44 <inc_lock+0x6c>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3301      	adds	r3, #1
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d806      	bhi.n	800ac58 <inc_lock+0x80>
 800ac4a:	4a29      	ldr	r2, [pc, #164]	; (800acf0 <inc_lock+0x118>)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	011b      	lsls	r3, r3, #4
 800ac50:	4413      	add	r3, r2
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1f2      	bne.n	800ac3e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d101      	bne.n	800ac62 <inc_lock+0x8a>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e040      	b.n	800ace4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	4922      	ldr	r1, [pc, #136]	; (800acf0 <inc_lock+0x118>)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	011b      	lsls	r3, r3, #4
 800ac6c:	440b      	add	r3, r1
 800ac6e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689a      	ldr	r2, [r3, #8]
 800ac74:	491e      	ldr	r1, [pc, #120]	; (800acf0 <inc_lock+0x118>)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	011b      	lsls	r3, r3, #4
 800ac7a:	440b      	add	r3, r1
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	695a      	ldr	r2, [r3, #20]
 800ac84:	491a      	ldr	r1, [pc, #104]	; (800acf0 <inc_lock+0x118>)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	011b      	lsls	r3, r3, #4
 800ac8a:	440b      	add	r3, r1
 800ac8c:	3308      	adds	r3, #8
 800ac8e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ac90:	4a17      	ldr	r2, [pc, #92]	; (800acf0 <inc_lock+0x118>)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	011b      	lsls	r3, r3, #4
 800ac96:	4413      	add	r3, r2
 800ac98:	330c      	adds	r3, #12
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d009      	beq.n	800acb8 <inc_lock+0xe0>
 800aca4:	4a12      	ldr	r2, [pc, #72]	; (800acf0 <inc_lock+0x118>)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	011b      	lsls	r3, r3, #4
 800acaa:	4413      	add	r3, r2
 800acac:	330c      	adds	r3, #12
 800acae:	881b      	ldrh	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <inc_lock+0xe0>
 800acb4:	2300      	movs	r3, #0
 800acb6:	e015      	b.n	800ace4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d108      	bne.n	800acd0 <inc_lock+0xf8>
 800acbe:	4a0c      	ldr	r2, [pc, #48]	; (800acf0 <inc_lock+0x118>)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	011b      	lsls	r3, r3, #4
 800acc4:	4413      	add	r3, r2
 800acc6:	330c      	adds	r3, #12
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	3301      	adds	r3, #1
 800accc:	b29a      	uxth	r2, r3
 800acce:	e001      	b.n	800acd4 <inc_lock+0xfc>
 800acd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acd4:	4906      	ldr	r1, [pc, #24]	; (800acf0 <inc_lock+0x118>)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	011b      	lsls	r3, r3, #4
 800acda:	440b      	add	r3, r1
 800acdc:	330c      	adds	r3, #12
 800acde:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	3301      	adds	r3, #1
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	20000dfc 	.word	0x20000dfc

0800acf4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3b01      	subs	r3, #1
 800ad00:	607b      	str	r3, [r7, #4]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d825      	bhi.n	800ad54 <dec_lock+0x60>
		n = Files[i].ctr;
 800ad08:	4a17      	ldr	r2, [pc, #92]	; (800ad68 <dec_lock+0x74>)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	011b      	lsls	r3, r3, #4
 800ad0e:	4413      	add	r3, r2
 800ad10:	330c      	adds	r3, #12
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ad16:	89fb      	ldrh	r3, [r7, #14]
 800ad18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad1c:	d101      	bne.n	800ad22 <dec_lock+0x2e>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ad22:	89fb      	ldrh	r3, [r7, #14]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <dec_lock+0x3a>
 800ad28:	89fb      	ldrh	r3, [r7, #14]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ad2e:	4a0e      	ldr	r2, [pc, #56]	; (800ad68 <dec_lock+0x74>)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	011b      	lsls	r3, r3, #4
 800ad34:	4413      	add	r3, r2
 800ad36:	330c      	adds	r3, #12
 800ad38:	89fa      	ldrh	r2, [r7, #14]
 800ad3a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ad3c:	89fb      	ldrh	r3, [r7, #14]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d105      	bne.n	800ad4e <dec_lock+0x5a>
 800ad42:	4a09      	ldr	r2, [pc, #36]	; (800ad68 <dec_lock+0x74>)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	011b      	lsls	r3, r3, #4
 800ad48:	4413      	add	r3, r2
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	737b      	strb	r3, [r7, #13]
 800ad52:	e001      	b.n	800ad58 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ad54:	2302      	movs	r3, #2
 800ad56:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ad58:	7b7b      	ldrb	r3, [r7, #13]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	20000dfc 	.word	0x20000dfc

0800ad6c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ad74:	2300      	movs	r3, #0
 800ad76:	60fb      	str	r3, [r7, #12]
 800ad78:	e010      	b.n	800ad9c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ad7a:	4a0d      	ldr	r2, [pc, #52]	; (800adb0 <clear_lock+0x44>)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	4413      	add	r3, r2
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d105      	bne.n	800ad96 <clear_lock+0x2a>
 800ad8a:	4a09      	ldr	r2, [pc, #36]	; (800adb0 <clear_lock+0x44>)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	4413      	add	r3, r2
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d9eb      	bls.n	800ad7a <clear_lock+0xe>
	}
}
 800ada2:	bf00      	nop
 800ada4:	bf00      	nop
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr
 800adb0:	20000dfc 	.word	0x20000dfc

0800adb4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	78db      	ldrb	r3, [r3, #3]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d034      	beq.n	800ae32 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adcc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	7858      	ldrb	r0, [r3, #1]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800add8:	2301      	movs	r3, #1
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	f7ff fd0e 	bl	800a7fc <disk_write>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <sync_window+0x38>
			res = FR_DISK_ERR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	73fb      	strb	r3, [r7, #15]
 800adea:	e022      	b.n	800ae32 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	1ad2      	subs	r2, r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d217      	bcs.n	800ae32 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	789b      	ldrb	r3, [r3, #2]
 800ae06:	613b      	str	r3, [r7, #16]
 800ae08:	e010      	b.n	800ae2c <sync_window+0x78>
					wsect += fs->fsize;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	4413      	add	r3, r2
 800ae12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	7858      	ldrb	r0, [r3, #1]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae1e:	2301      	movs	r3, #1
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	f7ff fceb 	bl	800a7fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	613b      	str	r3, [r7, #16]
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d8eb      	bhi.n	800ae0a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ae32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d01b      	beq.n	800ae8c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7ff ffad 	bl	800adb4 <sync_window>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d113      	bne.n	800ae8c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	7858      	ldrb	r0, [r3, #1]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae6e:	2301      	movs	r3, #1
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	f7ff fca3 	bl	800a7bc <disk_read>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d004      	beq.n	800ae86 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ae7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
	...

0800ae98 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff ff87 	bl	800adb4 <sync_window>
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d158      	bne.n	800af62 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	2b03      	cmp	r3, #3
 800aeb6:	d148      	bne.n	800af4a <sync_fs+0xb2>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	791b      	ldrb	r3, [r3, #4]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d144      	bne.n	800af4a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3334      	adds	r3, #52	; 0x34
 800aec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aec8:	2100      	movs	r1, #0
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7ff fd77 	bl	800a9be <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3334      	adds	r3, #52	; 0x34
 800aed4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aed8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff fd06 	bl	800a8ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	3334      	adds	r3, #52	; 0x34
 800aee6:	4921      	ldr	r1, [pc, #132]	; (800af6c <sync_fs+0xd4>)
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff fd1b 	bl	800a924 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	3334      	adds	r3, #52	; 0x34
 800aef2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aef6:	491e      	ldr	r1, [pc, #120]	; (800af70 <sync_fs+0xd8>)
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7ff fd13 	bl	800a924 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	3334      	adds	r3, #52	; 0x34
 800af02:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	4619      	mov	r1, r3
 800af0c:	4610      	mov	r0, r2
 800af0e:	f7ff fd09 	bl	800a924 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3334      	adds	r3, #52	; 0x34
 800af16:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	4619      	mov	r1, r3
 800af20:	4610      	mov	r0, r2
 800af22:	f7ff fcff 	bl	800a924 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	7858      	ldrb	r0, [r3, #1]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af3e:	2301      	movs	r3, #1
 800af40:	f7ff fc5c 	bl	800a7fc <disk_write>
			fs->fsi_flag = 0;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	785b      	ldrb	r3, [r3, #1]
 800af4e:	2200      	movs	r2, #0
 800af50:	2100      	movs	r1, #0
 800af52:	4618      	mov	r0, r3
 800af54:	f7ff fc72 	bl	800a83c <disk_ioctl>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d001      	beq.n	800af62 <sync_fs+0xca>
 800af5e:	2301      	movs	r3, #1
 800af60:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800af62:	7bfb      	ldrb	r3, [r7, #15]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	41615252 	.word	0x41615252
 800af70:	61417272 	.word	0x61417272

0800af74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	3b02      	subs	r3, #2
 800af82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	3b02      	subs	r3, #2
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d301      	bcc.n	800af94 <clust2sect+0x20>
 800af90:	2300      	movs	r3, #0
 800af92:	e008      	b.n	800afa6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	895b      	ldrh	r3, [r3, #10]
 800af98:	461a      	mov	r2, r3
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	fb03 f202 	mul.w	r2, r3, r2
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa4:	4413      	add	r3, r2
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b086      	sub	sp, #24
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d904      	bls.n	800afd2 <get_fat+0x20>
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d302      	bcc.n	800afd8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800afd2:	2301      	movs	r3, #1
 800afd4:	617b      	str	r3, [r7, #20]
 800afd6:	e08f      	b.n	800b0f8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800afd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afdc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d062      	beq.n	800b0ac <get_fat+0xfa>
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	dc7c      	bgt.n	800b0e4 <get_fat+0x132>
 800afea:	2b01      	cmp	r3, #1
 800afec:	d002      	beq.n	800aff4 <get_fat+0x42>
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d042      	beq.n	800b078 <get_fat+0xc6>
 800aff2:	e077      	b.n	800b0e4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	085b      	lsrs	r3, r3, #1
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	4413      	add	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	0a5b      	lsrs	r3, r3, #9
 800b00a:	4413      	add	r3, r2
 800b00c:	4619      	mov	r1, r3
 800b00e:	6938      	ldr	r0, [r7, #16]
 800b010:	f7ff ff14 	bl	800ae3c <move_window>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d167      	bne.n	800b0ea <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	1c5a      	adds	r2, r3, #1
 800b01e:	60fa      	str	r2, [r7, #12]
 800b020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	4413      	add	r3, r2
 800b028:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b02c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	0a5b      	lsrs	r3, r3, #9
 800b036:	4413      	add	r3, r2
 800b038:	4619      	mov	r1, r3
 800b03a:	6938      	ldr	r0, [r7, #16]
 800b03c:	f7ff fefe 	bl	800ae3c <move_window>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d153      	bne.n	800b0ee <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	4413      	add	r3, r2
 800b050:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b054:	021b      	lsls	r3, r3, #8
 800b056:	461a      	mov	r2, r3
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <get_fat+0xbc>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	091b      	lsrs	r3, r3, #4
 800b06c:	e002      	b.n	800b074 <get_fat+0xc2>
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b074:	617b      	str	r3, [r7, #20]
			break;
 800b076:	e03f      	b.n	800b0f8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	0a1b      	lsrs	r3, r3, #8
 800b080:	4413      	add	r3, r2
 800b082:	4619      	mov	r1, r3
 800b084:	6938      	ldr	r0, [r7, #16]
 800b086:	f7ff fed9 	bl	800ae3c <move_window>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d130      	bne.n	800b0f2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b09e:	4413      	add	r3, r2
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7ff fbe9 	bl	800a878 <ld_word>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	617b      	str	r3, [r7, #20]
			break;
 800b0aa:	e025      	b.n	800b0f8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	09db      	lsrs	r3, r3, #7
 800b0b4:	4413      	add	r3, r2
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	6938      	ldr	r0, [r7, #16]
 800b0ba:	f7ff febf 	bl	800ae3c <move_window>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d118      	bne.n	800b0f6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b0d2:	4413      	add	r3, r2
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff fbe7 	bl	800a8a8 <ld_dword>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b0e0:	617b      	str	r3, [r7, #20]
			break;
 800b0e2:	e009      	b.n	800b0f8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	617b      	str	r3, [r7, #20]
 800b0e8:	e006      	b.n	800b0f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0ea:	bf00      	nop
 800b0ec:	e004      	b.n	800b0f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0ee:	bf00      	nop
 800b0f0:	e002      	b.n	800b0f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b0f2:	bf00      	nop
 800b0f4:	e000      	b.n	800b0f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b0f6:	bf00      	nop
		}
	}

	return val;
 800b0f8:	697b      	ldr	r3, [r7, #20]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b102:	b590      	push	{r4, r7, lr}
 800b104:	b089      	sub	sp, #36	; 0x24
 800b106:	af00      	add	r7, sp, #0
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	60b9      	str	r1, [r7, #8]
 800b10c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b10e:	2302      	movs	r3, #2
 800b110:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2b01      	cmp	r3, #1
 800b116:	f240 80d2 	bls.w	800b2be <put_fat+0x1bc>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	699b      	ldr	r3, [r3, #24]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	429a      	cmp	r2, r3
 800b122:	f080 80cc 	bcs.w	800b2be <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	f000 8096 	beq.w	800b25c <put_fat+0x15a>
 800b130:	2b03      	cmp	r3, #3
 800b132:	f300 80cd 	bgt.w	800b2d0 <put_fat+0x1ce>
 800b136:	2b01      	cmp	r3, #1
 800b138:	d002      	beq.n	800b140 <put_fat+0x3e>
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d06e      	beq.n	800b21c <put_fat+0x11a>
 800b13e:	e0c7      	b.n	800b2d0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	61bb      	str	r3, [r7, #24]
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	085b      	lsrs	r3, r3, #1
 800b148:	69ba      	ldr	r2, [r7, #24]
 800b14a:	4413      	add	r3, r2
 800b14c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	0a5b      	lsrs	r3, r3, #9
 800b156:	4413      	add	r3, r2
 800b158:	4619      	mov	r1, r3
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f7ff fe6e 	bl	800ae3c <move_window>
 800b160:	4603      	mov	r3, r0
 800b162:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b164:	7ffb      	ldrb	r3, [r7, #31]
 800b166:	2b00      	cmp	r3, #0
 800b168:	f040 80ab 	bne.w	800b2c2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	1c59      	adds	r1, r3, #1
 800b176:	61b9      	str	r1, [r7, #24]
 800b178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b17c:	4413      	add	r3, r2
 800b17e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00d      	beq.n	800b1a6 <put_fat+0xa4>
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	b25b      	sxtb	r3, r3
 800b190:	f003 030f 	and.w	r3, r3, #15
 800b194:	b25a      	sxtb	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	011b      	lsls	r3, r3, #4
 800b19c:	b25b      	sxtb	r3, r3
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	b25b      	sxtb	r3, r3
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	e001      	b.n	800b1aa <put_fat+0xa8>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	0a5b      	lsrs	r3, r3, #9
 800b1bc:	4413      	add	r3, r2
 800b1be:	4619      	mov	r1, r3
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f7ff fe3b 	bl	800ae3c <move_window>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1ca:	7ffb      	ldrb	r3, [r7, #31]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d17a      	bne.n	800b2c6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1dc:	4413      	add	r3, r2
 800b1de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <put_fat+0xf0>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	091b      	lsrs	r3, r3, #4
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	e00e      	b.n	800b210 <put_fat+0x10e>
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	b25b      	sxtb	r3, r3
 800b1f8:	f023 030f 	bic.w	r3, r3, #15
 800b1fc:	b25a      	sxtb	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	0a1b      	lsrs	r3, r3, #8
 800b202:	b25b      	sxtb	r3, r3
 800b204:	f003 030f 	and.w	r3, r3, #15
 800b208:	b25b      	sxtb	r3, r3
 800b20a:	4313      	orrs	r3, r2
 800b20c:	b25b      	sxtb	r3, r3
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2201      	movs	r2, #1
 800b218:	70da      	strb	r2, [r3, #3]
			break;
 800b21a:	e059      	b.n	800b2d0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	0a1b      	lsrs	r3, r3, #8
 800b224:	4413      	add	r3, r2
 800b226:	4619      	mov	r1, r3
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f7ff fe07 	bl	800ae3c <move_window>
 800b22e:	4603      	mov	r3, r0
 800b230:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b232:	7ffb      	ldrb	r3, [r7, #31]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d148      	bne.n	800b2ca <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b246:	4413      	add	r3, r2
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	b292      	uxth	r2, r2
 800b24c:	4611      	mov	r1, r2
 800b24e:	4618      	mov	r0, r3
 800b250:	f7ff fb4d 	bl	800a8ee <st_word>
			fs->wflag = 1;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2201      	movs	r2, #1
 800b258:	70da      	strb	r2, [r3, #3]
			break;
 800b25a:	e039      	b.n	800b2d0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	09db      	lsrs	r3, r3, #7
 800b264:	4413      	add	r3, r2
 800b266:	4619      	mov	r1, r3
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f7ff fde7 	bl	800ae3c <move_window>
 800b26e:	4603      	mov	r3, r0
 800b270:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b272:	7ffb      	ldrb	r3, [r7, #31]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d12a      	bne.n	800b2ce <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b28c:	4413      	add	r3, r2
 800b28e:	4618      	mov	r0, r3
 800b290:	f7ff fb0a 	bl	800a8a8 <ld_dword>
 800b294:	4603      	mov	r3, r0
 800b296:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b29a:	4323      	orrs	r3, r4
 800b29c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b2ac:	4413      	add	r3, r2
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7ff fb37 	bl	800a924 <st_dword>
			fs->wflag = 1;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	70da      	strb	r2, [r3, #3]
			break;
 800b2bc:	e008      	b.n	800b2d0 <put_fat+0x1ce>
		}
	}
 800b2be:	bf00      	nop
 800b2c0:	e006      	b.n	800b2d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2c2:	bf00      	nop
 800b2c4:	e004      	b.n	800b2d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2c6:	bf00      	nop
 800b2c8:	e002      	b.n	800b2d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2ca:	bf00      	nop
 800b2cc:	e000      	b.n	800b2d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b2ce:	bf00      	nop
	return res;
 800b2d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3724      	adds	r7, #36	; 0x24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd90      	pop	{r4, r7, pc}

0800b2da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b088      	sub	sp, #32
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	60f8      	str	r0, [r7, #12]
 800b2e2:	60b9      	str	r1, [r7, #8]
 800b2e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d904      	bls.n	800b300 <remove_chain+0x26>
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d301      	bcc.n	800b304 <remove_chain+0x2a>
 800b300:	2302      	movs	r3, #2
 800b302:	e04b      	b.n	800b39c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00c      	beq.n	800b324 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b30a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b30e:	6879      	ldr	r1, [r7, #4]
 800b310:	69b8      	ldr	r0, [r7, #24]
 800b312:	f7ff fef6 	bl	800b102 <put_fat>
 800b316:	4603      	mov	r3, r0
 800b318:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b31a:	7ffb      	ldrb	r3, [r7, #31]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d001      	beq.n	800b324 <remove_chain+0x4a>
 800b320:	7ffb      	ldrb	r3, [r7, #31]
 800b322:	e03b      	b.n	800b39c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f7ff fe43 	bl	800afb2 <get_fat>
 800b32c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d031      	beq.n	800b398 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d101      	bne.n	800b33e <remove_chain+0x64>
 800b33a:	2302      	movs	r3, #2
 800b33c:	e02e      	b.n	800b39c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b344:	d101      	bne.n	800b34a <remove_chain+0x70>
 800b346:	2301      	movs	r3, #1
 800b348:	e028      	b.n	800b39c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b34a:	2200      	movs	r2, #0
 800b34c:	68b9      	ldr	r1, [r7, #8]
 800b34e:	69b8      	ldr	r0, [r7, #24]
 800b350:	f7ff fed7 	bl	800b102 <put_fat>
 800b354:	4603      	mov	r3, r0
 800b356:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b358:	7ffb      	ldrb	r3, [r7, #31]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d001      	beq.n	800b362 <remove_chain+0x88>
 800b35e:	7ffb      	ldrb	r3, [r7, #31]
 800b360:	e01c      	b.n	800b39c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	695a      	ldr	r2, [r3, #20]
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	3b02      	subs	r3, #2
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d20b      	bcs.n	800b388 <remove_chain+0xae>
			fs->free_clst++;
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	1c5a      	adds	r2, r3, #1
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	791b      	ldrb	r3, [r3, #4]
 800b37e:	f043 0301 	orr.w	r3, r3, #1
 800b382:	b2da      	uxtb	r2, r3
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	699b      	ldr	r3, [r3, #24]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	429a      	cmp	r2, r3
 800b394:	d3c6      	bcc.n	800b324 <remove_chain+0x4a>
 800b396:	e000      	b.n	800b39a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b398:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3720      	adds	r7, #32
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b088      	sub	sp, #32
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10d      	bne.n	800b3d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d004      	beq.n	800b3d0 <create_chain+0x2c>
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	69ba      	ldr	r2, [r7, #24]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d31b      	bcc.n	800b408 <create_chain+0x64>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	61bb      	str	r3, [r7, #24]
 800b3d4:	e018      	b.n	800b408 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f7ff fdea 	bl	800afb2 <get_fat>
 800b3de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d801      	bhi.n	800b3ea <create_chain+0x46>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e070      	b.n	800b4cc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3f0:	d101      	bne.n	800b3f6 <create_chain+0x52>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	e06a      	b.n	800b4cc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d201      	bcs.n	800b404 <create_chain+0x60>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	e063      	b.n	800b4cc <create_chain+0x128>
		scl = clst;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	3301      	adds	r3, #1
 800b410:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	69fa      	ldr	r2, [r7, #28]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d307      	bcc.n	800b42c <create_chain+0x88>
				ncl = 2;
 800b41c:	2302      	movs	r3, #2
 800b41e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b420:	69fa      	ldr	r2, [r7, #28]
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	429a      	cmp	r2, r3
 800b426:	d901      	bls.n	800b42c <create_chain+0x88>
 800b428:	2300      	movs	r3, #0
 800b42a:	e04f      	b.n	800b4cc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b42c:	69f9      	ldr	r1, [r7, #28]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7ff fdbf 	bl	800afb2 <get_fat>
 800b434:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00e      	beq.n	800b45a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d003      	beq.n	800b44a <create_chain+0xa6>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b448:	d101      	bne.n	800b44e <create_chain+0xaa>
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	e03e      	b.n	800b4cc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b44e:	69fa      	ldr	r2, [r7, #28]
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	429a      	cmp	r2, r3
 800b454:	d1da      	bne.n	800b40c <create_chain+0x68>
 800b456:	2300      	movs	r3, #0
 800b458:	e038      	b.n	800b4cc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b45a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b45c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b460:	69f9      	ldr	r1, [r7, #28]
 800b462:	6938      	ldr	r0, [r7, #16]
 800b464:	f7ff fe4d 	bl	800b102 <put_fat>
 800b468:	4603      	mov	r3, r0
 800b46a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d109      	bne.n	800b486 <create_chain+0xe2>
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d006      	beq.n	800b486 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b478:	69fa      	ldr	r2, [r7, #28]
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6938      	ldr	r0, [r7, #16]
 800b47e:	f7ff fe40 	bl	800b102 <put_fat>
 800b482:	4603      	mov	r3, r0
 800b484:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b486:	7dfb      	ldrb	r3, [r7, #23]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d116      	bne.n	800b4ba <create_chain+0x116>
		fs->last_clst = ncl;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	69fa      	ldr	r2, [r7, #28]
 800b490:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	695a      	ldr	r2, [r3, #20]
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	3b02      	subs	r3, #2
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d804      	bhi.n	800b4aa <create_chain+0x106>
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	1e5a      	subs	r2, r3, #1
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	791b      	ldrb	r3, [r3, #4]
 800b4ae:	f043 0301 	orr.w	r3, r3, #1
 800b4b2:	b2da      	uxtb	r2, r3
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	711a      	strb	r2, [r3, #4]
 800b4b8:	e007      	b.n	800b4ca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d102      	bne.n	800b4c6 <create_chain+0x122>
 800b4c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4c4:	e000      	b.n	800b4c8 <create_chain+0x124>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b4ca:	69fb      	ldr	r3, [r7, #28]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3720      	adds	r7, #32
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	0a5b      	lsrs	r3, r3, #9
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	8952      	ldrh	r2, [r2, #10]
 800b4f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	1d1a      	adds	r2, r3, #4
 800b4fe:	613a      	str	r2, [r7, #16]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d101      	bne.n	800b50e <clmt_clust+0x3a>
 800b50a:	2300      	movs	r3, #0
 800b50c:	e010      	b.n	800b530 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b50e:	697a      	ldr	r2, [r7, #20]
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	429a      	cmp	r2, r3
 800b514:	d307      	bcc.n	800b526 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	617b      	str	r3, [r7, #20]
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	3304      	adds	r3, #4
 800b522:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b524:	e7e9      	b.n	800b4fa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b526:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	4413      	add	r3, r2
}
 800b530:	4618      	mov	r0, r3
 800b532:	371c      	adds	r7, #28
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b552:	d204      	bcs.n	800b55e <dir_sdi+0x22>
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	f003 031f 	and.w	r3, r3, #31
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b55e:	2302      	movs	r3, #2
 800b560:	e063      	b.n	800b62a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d106      	bne.n	800b582 <dir_sdi+0x46>
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d902      	bls.n	800b582 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b580:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10c      	bne.n	800b5a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	095b      	lsrs	r3, r3, #5
 800b58c:	693a      	ldr	r2, [r7, #16]
 800b58e:	8912      	ldrh	r2, [r2, #8]
 800b590:	4293      	cmp	r3, r2
 800b592:	d301      	bcc.n	800b598 <dir_sdi+0x5c>
 800b594:	2302      	movs	r3, #2
 800b596:	e048      	b.n	800b62a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	61da      	str	r2, [r3, #28]
 800b5a0:	e029      	b.n	800b5f6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	895b      	ldrh	r3, [r3, #10]
 800b5a6:	025b      	lsls	r3, r3, #9
 800b5a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5aa:	e019      	b.n	800b5e0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6979      	ldr	r1, [r7, #20]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7ff fcfe 	bl	800afb2 <get_fat>
 800b5b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5be:	d101      	bne.n	800b5c4 <dir_sdi+0x88>
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e032      	b.n	800b62a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d904      	bls.n	800b5d4 <dir_sdi+0x98>
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	699b      	ldr	r3, [r3, #24]
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d301      	bcc.n	800b5d8 <dir_sdi+0x9c>
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	e028      	b.n	800b62a <dir_sdi+0xee>
			ofs -= csz;
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d2e1      	bcs.n	800b5ac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b5e8:	6979      	ldr	r1, [r7, #20]
 800b5ea:	6938      	ldr	r0, [r7, #16]
 800b5ec:	f7ff fcc2 	bl	800af74 <clust2sect>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	69db      	ldr	r3, [r3, #28]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <dir_sdi+0xcc>
 800b604:	2302      	movs	r3, #2
 800b606:	e010      	b.n	800b62a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	69da      	ldr	r2, [r3, #28]
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	0a5b      	lsrs	r3, r3, #9
 800b610:	441a      	add	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b622:	441a      	add	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b086      	sub	sp, #24
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
 800b63a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	3320      	adds	r3, #32
 800b648:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <dir_next+0x28>
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b658:	d301      	bcc.n	800b65e <dir_next+0x2c>
 800b65a:	2304      	movs	r3, #4
 800b65c:	e0aa      	b.n	800b7b4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b664:	2b00      	cmp	r3, #0
 800b666:	f040 8098 	bne.w	800b79a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	69db      	ldr	r3, [r3, #28]
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10b      	bne.n	800b694 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	095b      	lsrs	r3, r3, #5
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	8912      	ldrh	r2, [r2, #8]
 800b684:	4293      	cmp	r3, r2
 800b686:	f0c0 8088 	bcc.w	800b79a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	61da      	str	r2, [r3, #28]
 800b690:	2304      	movs	r3, #4
 800b692:	e08f      	b.n	800b7b4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	0a5b      	lsrs	r3, r3, #9
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	8952      	ldrh	r2, [r2, #10]
 800b69c:	3a01      	subs	r2, #1
 800b69e:	4013      	ands	r3, r2
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d17a      	bne.n	800b79a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	f7ff fc80 	bl	800afb2 <get_fat>
 800b6b2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d801      	bhi.n	800b6be <dir_next+0x8c>
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	e07a      	b.n	800b7b4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6c4:	d101      	bne.n	800b6ca <dir_next+0x98>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e074      	b.n	800b7b4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d358      	bcc.n	800b786 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d104      	bne.n	800b6e4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	61da      	str	r2, [r3, #28]
 800b6e0:	2304      	movs	r3, #4
 800b6e2:	e067      	b.n	800b7b4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	f7ff fe59 	bl	800b3a4 <create_chain>
 800b6f2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d101      	bne.n	800b6fe <dir_next+0xcc>
 800b6fa:	2307      	movs	r3, #7
 800b6fc:	e05a      	b.n	800b7b4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d101      	bne.n	800b708 <dir_next+0xd6>
 800b704:	2302      	movs	r3, #2
 800b706:	e055      	b.n	800b7b4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b70e:	d101      	bne.n	800b714 <dir_next+0xe2>
 800b710:	2301      	movs	r3, #1
 800b712:	e04f      	b.n	800b7b4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f7ff fb4d 	bl	800adb4 <sync_window>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <dir_next+0xf2>
 800b720:	2301      	movs	r3, #1
 800b722:	e047      	b.n	800b7b4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3334      	adds	r3, #52	; 0x34
 800b728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b72c:	2100      	movs	r1, #0
 800b72e:	4618      	mov	r0, r3
 800b730:	f7ff f945 	bl	800a9be <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b734:	2300      	movs	r3, #0
 800b736:	613b      	str	r3, [r7, #16]
 800b738:	6979      	ldr	r1, [r7, #20]
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f7ff fc1a 	bl	800af74 <clust2sect>
 800b740:	4602      	mov	r2, r0
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	631a      	str	r2, [r3, #48]	; 0x30
 800b746:	e012      	b.n	800b76e <dir_next+0x13c>
						fs->wflag = 1;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2201      	movs	r2, #1
 800b74c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f7ff fb30 	bl	800adb4 <sync_window>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <dir_next+0x12c>
 800b75a:	2301      	movs	r3, #1
 800b75c:	e02a      	b.n	800b7b4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	3301      	adds	r3, #1
 800b762:	613b      	str	r3, [r7, #16]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	631a      	str	r2, [r3, #48]	; 0x30
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	895b      	ldrh	r3, [r3, #10]
 800b772:	461a      	mov	r2, r3
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	4293      	cmp	r3, r2
 800b778:	d3e6      	bcc.n	800b748 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	1ad2      	subs	r2, r2, r3
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b78c:	6979      	ldr	r1, [r7, #20]
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f7ff fbf0 	bl	800af74 <clust2sect>
 800b794:	4602      	mov	r2, r0
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ac:	441a      	add	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3718      	adds	r7, #24
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff feb4 	bl	800b53c <dir_sdi>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b7d8:	7dfb      	ldrb	r3, [r7, #23]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d12b      	bne.n	800b836 <dir_alloc+0x7a>
		n = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	69db      	ldr	r3, [r3, #28]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f7ff fb27 	bl	800ae3c <move_window>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b7f2:	7dfb      	ldrb	r3, [r7, #23]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d11d      	bne.n	800b834 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a1b      	ldr	r3, [r3, #32]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	2be5      	cmp	r3, #229	; 0xe5
 800b800:	d004      	beq.n	800b80c <dir_alloc+0x50>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d107      	bne.n	800b81c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	3301      	adds	r3, #1
 800b810:	613b      	str	r3, [r7, #16]
 800b812:	693a      	ldr	r2, [r7, #16]
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	429a      	cmp	r2, r3
 800b818:	d102      	bne.n	800b820 <dir_alloc+0x64>
 800b81a:	e00c      	b.n	800b836 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b81c:	2300      	movs	r3, #0
 800b81e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b820:	2101      	movs	r1, #1
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff ff05 	bl	800b632 <dir_next>
 800b828:	4603      	mov	r3, r0
 800b82a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d0d7      	beq.n	800b7e2 <dir_alloc+0x26>
 800b832:	e000      	b.n	800b836 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b834:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b836:	7dfb      	ldrb	r3, [r7, #23]
 800b838:	2b04      	cmp	r3, #4
 800b83a:	d101      	bne.n	800b840 <dir_alloc+0x84>
 800b83c:	2307      	movs	r3, #7
 800b83e:	75fb      	strb	r3, [r7, #23]
	return res;
 800b840:	7dfb      	ldrb	r3, [r7, #23]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3718      	adds	r7, #24
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b084      	sub	sp, #16
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
 800b852:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	331a      	adds	r3, #26
 800b858:	4618      	mov	r0, r3
 800b85a:	f7ff f80d 	bl	800a878 <ld_word>
 800b85e:	4603      	mov	r3, r0
 800b860:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	2b03      	cmp	r3, #3
 800b868:	d109      	bne.n	800b87e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	3314      	adds	r3, #20
 800b86e:	4618      	mov	r0, r3
 800b870:	f7ff f802 	bl	800a878 <ld_word>
 800b874:	4603      	mov	r3, r0
 800b876:	041b      	lsls	r3, r3, #16
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b87e:	68fb      	ldr	r3, [r7, #12]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	331a      	adds	r3, #26
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	b292      	uxth	r2, r2
 800b89c:	4611      	mov	r1, r2
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff f825 	bl	800a8ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	2b03      	cmp	r3, #3
 800b8aa:	d109      	bne.n	800b8c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	f103 0214 	add.w	r2, r3, #20
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	0c1b      	lsrs	r3, r3, #16
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	4610      	mov	r0, r2
 800b8bc:	f7ff f817 	bl	800a8ee <st_word>
	}
}
 800b8c0:	bf00      	nop
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b086      	sub	sp, #24
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7ff fe2f 	bl	800b53c <dir_sdi>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d001      	beq.n	800b8ec <dir_find+0x24>
 800b8e8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ea:	e03e      	b.n	800b96a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	69db      	ldr	r3, [r3, #28]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	6938      	ldr	r0, [r7, #16]
 800b8f4:	f7ff faa2 	bl	800ae3c <move_window>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d12f      	bne.n	800b962 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d102      	bne.n	800b916 <dir_find+0x4e>
 800b910:	2304      	movs	r3, #4
 800b912:	75fb      	strb	r3, [r7, #23]
 800b914:	e028      	b.n	800b968 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	330b      	adds	r3, #11
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b922:	b2da      	uxtb	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a1b      	ldr	r3, [r3, #32]
 800b92c:	330b      	adds	r3, #11
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	f003 0308 	and.w	r3, r3, #8
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10a      	bne.n	800b94e <dir_find+0x86>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6a18      	ldr	r0, [r3, #32]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3324      	adds	r3, #36	; 0x24
 800b940:	220b      	movs	r2, #11
 800b942:	4619      	mov	r1, r3
 800b944:	f7ff f856 	bl	800a9f4 <mem_cmp>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00b      	beq.n	800b966 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b94e:	2100      	movs	r1, #0
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7ff fe6e 	bl	800b632 <dir_next>
 800b956:	4603      	mov	r3, r0
 800b958:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d0c5      	beq.n	800b8ec <dir_find+0x24>
 800b960:	e002      	b.n	800b968 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b962:	bf00      	nop
 800b964:	e000      	b.n	800b968 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b966:	bf00      	nop

	return res;
 800b968:	7dfb      	ldrb	r3, [r7, #23]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3718      	adds	r7, #24
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b084      	sub	sp, #16
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b980:	2101      	movs	r1, #1
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff ff1a 	bl	800b7bc <dir_alloc>
 800b988:	4603      	mov	r3, r0
 800b98a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d11c      	bne.n	800b9cc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	69db      	ldr	r3, [r3, #28]
 800b996:	4619      	mov	r1, r3
 800b998:	68b8      	ldr	r0, [r7, #8]
 800b99a:	f7ff fa4f 	bl	800ae3c <move_window>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d111      	bne.n	800b9cc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a1b      	ldr	r3, [r3, #32]
 800b9ac:	2220      	movs	r2, #32
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7ff f804 	bl	800a9be <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a18      	ldr	r0, [r3, #32]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	3324      	adds	r3, #36	; 0x24
 800b9be:	220b      	movs	r2, #11
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	f7fe ffdb 	bl	800a97c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
	...

0800b9d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b088      	sub	sp, #32
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	60fb      	str	r3, [r7, #12]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3324      	adds	r3, #36	; 0x24
 800b9ec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b9ee:	220b      	movs	r2, #11
 800b9f0:	2120      	movs	r1, #32
 800b9f2:	68b8      	ldr	r0, [r7, #8]
 800b9f4:	f7fe ffe3 	bl	800a9be <mem_set>
	si = i = 0; ni = 8;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	613b      	str	r3, [r7, #16]
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	61fb      	str	r3, [r7, #28]
 800ba00:	2308      	movs	r3, #8
 800ba02:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	1c5a      	adds	r2, r3, #1
 800ba08:	61fa      	str	r2, [r7, #28]
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ba12:	7efb      	ldrb	r3, [r7, #27]
 800ba14:	2b20      	cmp	r3, #32
 800ba16:	d94e      	bls.n	800bab6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ba18:	7efb      	ldrb	r3, [r7, #27]
 800ba1a:	2b2f      	cmp	r3, #47	; 0x2f
 800ba1c:	d006      	beq.n	800ba2c <create_name+0x54>
 800ba1e:	7efb      	ldrb	r3, [r7, #27]
 800ba20:	2b5c      	cmp	r3, #92	; 0x5c
 800ba22:	d110      	bne.n	800ba46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ba24:	e002      	b.n	800ba2c <create_name+0x54>
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	61fb      	str	r3, [r7, #28]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	4413      	add	r3, r2
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	2b2f      	cmp	r3, #47	; 0x2f
 800ba36:	d0f6      	beq.n	800ba26 <create_name+0x4e>
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b5c      	cmp	r3, #92	; 0x5c
 800ba42:	d0f0      	beq.n	800ba26 <create_name+0x4e>
			break;
 800ba44:	e038      	b.n	800bab8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ba46:	7efb      	ldrb	r3, [r7, #27]
 800ba48:	2b2e      	cmp	r3, #46	; 0x2e
 800ba4a:	d003      	beq.n	800ba54 <create_name+0x7c>
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d30c      	bcc.n	800ba6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	2b0b      	cmp	r3, #11
 800ba58:	d002      	beq.n	800ba60 <create_name+0x88>
 800ba5a:	7efb      	ldrb	r3, [r7, #27]
 800ba5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba5e:	d001      	beq.n	800ba64 <create_name+0x8c>
 800ba60:	2306      	movs	r3, #6
 800ba62:	e044      	b.n	800baee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ba64:	2308      	movs	r3, #8
 800ba66:	613b      	str	r3, [r7, #16]
 800ba68:	230b      	movs	r3, #11
 800ba6a:	617b      	str	r3, [r7, #20]
			continue;
 800ba6c:	e022      	b.n	800bab4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ba6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	da04      	bge.n	800ba80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ba76:	7efb      	ldrb	r3, [r7, #27]
 800ba78:	3b80      	subs	r3, #128	; 0x80
 800ba7a:	4a1f      	ldr	r2, [pc, #124]	; (800baf8 <create_name+0x120>)
 800ba7c:	5cd3      	ldrb	r3, [r2, r3]
 800ba7e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ba80:	7efb      	ldrb	r3, [r7, #27]
 800ba82:	4619      	mov	r1, r3
 800ba84:	481d      	ldr	r0, [pc, #116]	; (800bafc <create_name+0x124>)
 800ba86:	f7fe ffdc 	bl	800aa42 <chk_chr>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d001      	beq.n	800ba94 <create_name+0xbc>
 800ba90:	2306      	movs	r3, #6
 800ba92:	e02c      	b.n	800baee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ba94:	7efb      	ldrb	r3, [r7, #27]
 800ba96:	2b60      	cmp	r3, #96	; 0x60
 800ba98:	d905      	bls.n	800baa6 <create_name+0xce>
 800ba9a:	7efb      	ldrb	r3, [r7, #27]
 800ba9c:	2b7a      	cmp	r3, #122	; 0x7a
 800ba9e:	d802      	bhi.n	800baa6 <create_name+0xce>
 800baa0:	7efb      	ldrb	r3, [r7, #27]
 800baa2:	3b20      	subs	r3, #32
 800baa4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	1c5a      	adds	r2, r3, #1
 800baaa:	613a      	str	r2, [r7, #16]
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	4413      	add	r3, r2
 800bab0:	7efa      	ldrb	r2, [r7, #27]
 800bab2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bab4:	e7a6      	b.n	800ba04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bab6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	441a      	add	r2, r3
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <create_name+0xf4>
 800bac8:	2306      	movs	r3, #6
 800baca:	e010      	b.n	800baee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	2be5      	cmp	r3, #229	; 0xe5
 800bad2:	d102      	bne.n	800bada <create_name+0x102>
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	2205      	movs	r2, #5
 800bad8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bada:	7efb      	ldrb	r3, [r7, #27]
 800badc:	2b20      	cmp	r3, #32
 800bade:	d801      	bhi.n	800bae4 <create_name+0x10c>
 800bae0:	2204      	movs	r2, #4
 800bae2:	e000      	b.n	800bae6 <create_name+0x10e>
 800bae4:	2200      	movs	r2, #0
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	330b      	adds	r3, #11
 800baea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800baec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3720      	adds	r7, #32
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	08015dc8 	.word	0x08015dc8
 800bafc:	08015cb8 	.word	0x08015cb8

0800bb00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bb14:	e002      	b.n	800bb1c <follow_path+0x1c>
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	603b      	str	r3, [r7, #0]
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	2b2f      	cmp	r3, #47	; 0x2f
 800bb22:	d0f8      	beq.n	800bb16 <follow_path+0x16>
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	2b5c      	cmp	r3, #92	; 0x5c
 800bb2a:	d0f4      	beq.n	800bb16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b1f      	cmp	r3, #31
 800bb38:	d80a      	bhi.n	800bb50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2280      	movs	r2, #128	; 0x80
 800bb3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bb42:	2100      	movs	r1, #0
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7ff fcf9 	bl	800b53c <dir_sdi>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	75fb      	strb	r3, [r7, #23]
 800bb4e:	e043      	b.n	800bbd8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb50:	463b      	mov	r3, r7
 800bb52:	4619      	mov	r1, r3
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7ff ff3f 	bl	800b9d8 <create_name>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d134      	bne.n	800bbce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7ff feaf 	bl	800b8c8 <dir_find>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bb76:	7dfb      	ldrb	r3, [r7, #23]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00a      	beq.n	800bb92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bb7c:	7dfb      	ldrb	r3, [r7, #23]
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d127      	bne.n	800bbd2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bb82:	7afb      	ldrb	r3, [r7, #11]
 800bb84:	f003 0304 	and.w	r3, r3, #4
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d122      	bne.n	800bbd2 <follow_path+0xd2>
 800bb8c:	2305      	movs	r3, #5
 800bb8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bb90:	e01f      	b.n	800bbd2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb92:	7afb      	ldrb	r3, [r7, #11]
 800bb94:	f003 0304 	and.w	r3, r3, #4
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d11c      	bne.n	800bbd6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	799b      	ldrb	r3, [r3, #6]
 800bba0:	f003 0310 	and.w	r3, r3, #16
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d102      	bne.n	800bbae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bba8:	2305      	movs	r3, #5
 800bbaa:	75fb      	strb	r3, [r7, #23]
 800bbac:	e014      	b.n	800bbd8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	695b      	ldr	r3, [r3, #20]
 800bbb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbbc:	4413      	add	r3, r2
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f7ff fe42 	bl	800b84a <ld_clust>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bbcc:	e7c0      	b.n	800bb50 <follow_path+0x50>
			if (res != FR_OK) break;
 800bbce:	bf00      	nop
 800bbd0:	e002      	b.n	800bbd8 <follow_path+0xd8>
				break;
 800bbd2:	bf00      	nop
 800bbd4:	e000      	b.n	800bbd8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bbd6:	bf00      	nop
			}
		}
	}

	return res;
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b087      	sub	sp, #28
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bbea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d031      	beq.n	800bc5c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	617b      	str	r3, [r7, #20]
 800bbfe:	e002      	b.n	800bc06 <get_ldnumber+0x24>
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	3301      	adds	r3, #1
 800bc04:	617b      	str	r3, [r7, #20]
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2b20      	cmp	r3, #32
 800bc0c:	d903      	bls.n	800bc16 <get_ldnumber+0x34>
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	2b3a      	cmp	r3, #58	; 0x3a
 800bc14:	d1f4      	bne.n	800bc00 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	2b3a      	cmp	r3, #58	; 0x3a
 800bc1c:	d11c      	bne.n	800bc58 <get_ldnumber+0x76>
			tp = *path;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	1c5a      	adds	r2, r3, #1
 800bc28:	60fa      	str	r2, [r7, #12]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	3b30      	subs	r3, #48	; 0x30
 800bc2e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2b09      	cmp	r3, #9
 800bc34:	d80e      	bhi.n	800bc54 <get_ldnumber+0x72>
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d10a      	bne.n	800bc54 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d107      	bne.n	800bc54 <get_ldnumber+0x72>
					vol = (int)i;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	617b      	str	r3, [r7, #20]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	697a      	ldr	r2, [r7, #20]
 800bc52:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	e002      	b.n	800bc5e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bc58:	2300      	movs	r3, #0
 800bc5a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bc5c:	693b      	ldr	r3, [r7, #16]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	371c      	adds	r7, #28
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr
	...

0800bc6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	70da      	strb	r2, [r3, #3]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc82:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bc84:	6839      	ldr	r1, [r7, #0]
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff f8d8 	bl	800ae3c <move_window>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <check_fs+0x2a>
 800bc92:	2304      	movs	r3, #4
 800bc94:	e038      	b.n	800bd08 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	3334      	adds	r3, #52	; 0x34
 800bc9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fe fdea 	bl	800a878 <ld_word>
 800bca4:	4603      	mov	r3, r0
 800bca6:	461a      	mov	r2, r3
 800bca8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d001      	beq.n	800bcb4 <check_fs+0x48>
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e029      	b.n	800bd08 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcba:	2be9      	cmp	r3, #233	; 0xe9
 800bcbc:	d009      	beq.n	800bcd2 <check_fs+0x66>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcc4:	2beb      	cmp	r3, #235	; 0xeb
 800bcc6:	d11e      	bne.n	800bd06 <check_fs+0x9a>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bcce:	2b90      	cmp	r3, #144	; 0x90
 800bcd0:	d119      	bne.n	800bd06 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	3334      	adds	r3, #52	; 0x34
 800bcd6:	3336      	adds	r3, #54	; 0x36
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe fde5 	bl	800a8a8 <ld_dword>
 800bcde:	4603      	mov	r3, r0
 800bce0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bce4:	4a0a      	ldr	r2, [pc, #40]	; (800bd10 <check_fs+0xa4>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d101      	bne.n	800bcee <check_fs+0x82>
 800bcea:	2300      	movs	r3, #0
 800bcec:	e00c      	b.n	800bd08 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	3334      	adds	r3, #52	; 0x34
 800bcf2:	3352      	adds	r3, #82	; 0x52
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fe fdd7 	bl	800a8a8 <ld_dword>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	4a05      	ldr	r2, [pc, #20]	; (800bd14 <check_fs+0xa8>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d101      	bne.n	800bd06 <check_fs+0x9a>
 800bd02:	2300      	movs	r3, #0
 800bd04:	e000      	b.n	800bd08 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bd06:	2302      	movs	r3, #2
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	00544146 	.word	0x00544146
 800bd14:	33544146 	.word	0x33544146

0800bd18 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b096      	sub	sp, #88	; 0x58
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7ff ff58 	bl	800bbe2 <get_ldnumber>
 800bd32:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	da01      	bge.n	800bd3e <find_volume+0x26>
 800bd3a:	230b      	movs	r3, #11
 800bd3c:	e235      	b.n	800c1aa <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bd3e:	4aa5      	ldr	r2, [pc, #660]	; (800bfd4 <find_volume+0x2bc>)
 800bd40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd46:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <find_volume+0x3a>
 800bd4e:	230c      	movs	r3, #12
 800bd50:	e22b      	b.n	800c1aa <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800bd52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd54:	f7fe fe90 	bl	800aa78 <lock_fs>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d101      	bne.n	800bd62 <find_volume+0x4a>
 800bd5e:	230f      	movs	r3, #15
 800bd60:	e223      	b.n	800c1aa <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bd68:	79fb      	ldrb	r3, [r7, #7]
 800bd6a:	f023 0301 	bic.w	r3, r3, #1
 800bd6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d01a      	beq.n	800bdae <find_volume+0x96>
		stat = disk_status(fs->drv);
 800bd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7a:	785b      	ldrb	r3, [r3, #1]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fe fcdd 	bl	800a73c <disk_status>
 800bd82:	4603      	mov	r3, r0
 800bd84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bd88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10c      	bne.n	800bdae <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bd94:	79fb      	ldrb	r3, [r7, #7]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d007      	beq.n	800bdaa <find_volume+0x92>
 800bd9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd9e:	f003 0304 	and.w	r3, r3, #4
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d001      	beq.n	800bdaa <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800bda6:	230a      	movs	r3, #10
 800bda8:	e1ff      	b.n	800c1aa <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800bdaa:	2300      	movs	r3, #0
 800bdac:	e1fd      	b.n	800c1aa <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bdb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb6:	b2da      	uxtb	r2, r3
 800bdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbe:	785b      	ldrb	r3, [r3, #1]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe fcd5 	bl	800a770 <disk_initialize>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bdcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdd0:	f003 0301 	and.w	r3, r3, #1
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d001      	beq.n	800bddc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bdd8:	2303      	movs	r3, #3
 800bdda:	e1e6      	b.n	800c1aa <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bddc:	79fb      	ldrb	r3, [r7, #7]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d007      	beq.n	800bdf2 <find_volume+0xda>
 800bde2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bde6:	f003 0304 	and.w	r3, r3, #4
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800bdee:	230a      	movs	r3, #10
 800bdf0:	e1db      	b.n	800c1aa <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bdf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bdf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bdfa:	f7ff ff37 	bl	800bc6c <check_fs>
 800bdfe:	4603      	mov	r3, r0
 800be00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800be04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be08:	2b02      	cmp	r3, #2
 800be0a:	d149      	bne.n	800bea0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be0c:	2300      	movs	r3, #0
 800be0e:	643b      	str	r3, [r7, #64]	; 0x40
 800be10:	e01e      	b.n	800be50 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800be12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be14:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800be18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be1a:	011b      	lsls	r3, r3, #4
 800be1c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800be20:	4413      	add	r3, r2
 800be22:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	3304      	adds	r3, #4
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d006      	beq.n	800be3c <find_volume+0x124>
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	3308      	adds	r3, #8
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe fd38 	bl	800a8a8 <ld_dword>
 800be38:	4602      	mov	r2, r0
 800be3a:	e000      	b.n	800be3e <find_volume+0x126>
 800be3c:	2200      	movs	r2, #0
 800be3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	3358      	adds	r3, #88	; 0x58
 800be44:	443b      	add	r3, r7
 800be46:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be4c:	3301      	adds	r3, #1
 800be4e:	643b      	str	r3, [r7, #64]	; 0x40
 800be50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be52:	2b03      	cmp	r3, #3
 800be54:	d9dd      	bls.n	800be12 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800be56:	2300      	movs	r3, #0
 800be58:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800be5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d002      	beq.n	800be66 <find_volume+0x14e>
 800be60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be62:	3b01      	subs	r3, #1
 800be64:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800be66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	3358      	adds	r3, #88	; 0x58
 800be6c:	443b      	add	r3, r7
 800be6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800be72:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800be74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be76:	2b00      	cmp	r3, #0
 800be78:	d005      	beq.n	800be86 <find_volume+0x16e>
 800be7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be7e:	f7ff fef5 	bl	800bc6c <check_fs>
 800be82:	4603      	mov	r3, r0
 800be84:	e000      	b.n	800be88 <find_volume+0x170>
 800be86:	2303      	movs	r3, #3
 800be88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800be8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be90:	2b01      	cmp	r3, #1
 800be92:	d905      	bls.n	800bea0 <find_volume+0x188>
 800be94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be96:	3301      	adds	r3, #1
 800be98:	643b      	str	r3, [r7, #64]	; 0x40
 800be9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be9c:	2b03      	cmp	r3, #3
 800be9e:	d9e2      	bls.n	800be66 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bea0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bea4:	2b04      	cmp	r3, #4
 800bea6:	d101      	bne.n	800beac <find_volume+0x194>
 800bea8:	2301      	movs	r3, #1
 800beaa:	e17e      	b.n	800c1aa <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800beac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d901      	bls.n	800beb8 <find_volume+0x1a0>
 800beb4:	230d      	movs	r3, #13
 800beb6:	e178      	b.n	800c1aa <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800beb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beba:	3334      	adds	r3, #52	; 0x34
 800bebc:	330b      	adds	r3, #11
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fe fcda 	bl	800a878 <ld_word>
 800bec4:	4603      	mov	r3, r0
 800bec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800beca:	d001      	beq.n	800bed0 <find_volume+0x1b8>
 800becc:	230d      	movs	r3, #13
 800bece:	e16c      	b.n	800c1aa <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed2:	3334      	adds	r3, #52	; 0x34
 800bed4:	3316      	adds	r3, #22
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fe fcce 	bl	800a878 <ld_word>
 800bedc:	4603      	mov	r3, r0
 800bede:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d106      	bne.n	800bef4 <find_volume+0x1dc>
 800bee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee8:	3334      	adds	r3, #52	; 0x34
 800beea:	3324      	adds	r3, #36	; 0x24
 800beec:	4618      	mov	r0, r3
 800beee:	f7fe fcdb 	bl	800a8a8 <ld_dword>
 800bef2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bef8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800befa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf02:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	789b      	ldrb	r3, [r3, #2]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d005      	beq.n	800bf18 <find_volume+0x200>
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0e:	789b      	ldrb	r3, [r3, #2]
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d001      	beq.n	800bf18 <find_volume+0x200>
 800bf14:	230d      	movs	r3, #13
 800bf16:	e148      	b.n	800c1aa <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1a:	789b      	ldrb	r3, [r3, #2]
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf20:	fb02 f303 	mul.w	r3, r2, r3
 800bf24:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf34:	895b      	ldrh	r3, [r3, #10]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d008      	beq.n	800bf4c <find_volume+0x234>
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	895b      	ldrh	r3, [r3, #10]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf42:	895b      	ldrh	r3, [r3, #10]
 800bf44:	3b01      	subs	r3, #1
 800bf46:	4013      	ands	r3, r2
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <find_volume+0x238>
 800bf4c:	230d      	movs	r3, #13
 800bf4e:	e12c      	b.n	800c1aa <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf52:	3334      	adds	r3, #52	; 0x34
 800bf54:	3311      	adds	r3, #17
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe fc8e 	bl	800a878 <ld_word>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	461a      	mov	r2, r3
 800bf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf62:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf66:	891b      	ldrh	r3, [r3, #8]
 800bf68:	f003 030f 	and.w	r3, r3, #15
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d001      	beq.n	800bf76 <find_volume+0x25e>
 800bf72:	230d      	movs	r3, #13
 800bf74:	e119      	b.n	800c1aa <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	3334      	adds	r3, #52	; 0x34
 800bf7a:	3313      	adds	r3, #19
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fe fc7b 	bl	800a878 <ld_word>
 800bf82:	4603      	mov	r3, r0
 800bf84:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bf86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d106      	bne.n	800bf9a <find_volume+0x282>
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	3334      	adds	r3, #52	; 0x34
 800bf90:	3320      	adds	r3, #32
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fe fc88 	bl	800a8a8 <ld_dword>
 800bf98:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9c:	3334      	adds	r3, #52	; 0x34
 800bf9e:	330e      	adds	r3, #14
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fe fc69 	bl	800a878 <ld_word>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bfaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <find_volume+0x29c>
 800bfb0:	230d      	movs	r3, #13
 800bfb2:	e0fa      	b.n	800c1aa <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bfb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bfb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb8:	4413      	add	r3, r2
 800bfba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfbc:	8912      	ldrh	r2, [r2, #8]
 800bfbe:	0912      	lsrs	r2, r2, #4
 800bfc0:	b292      	uxth	r2, r2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bfc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d204      	bcs.n	800bfd8 <find_volume+0x2c0>
 800bfce:	230d      	movs	r3, #13
 800bfd0:	e0eb      	b.n	800c1aa <find_volume+0x492>
 800bfd2:	bf00      	nop
 800bfd4:	20000df4 	.word	0x20000df4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bfd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfe0:	8952      	ldrh	r2, [r2, #10]
 800bfe2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfe6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d101      	bne.n	800bff2 <find_volume+0x2da>
 800bfee:	230d      	movs	r3, #13
 800bff0:	e0db      	b.n	800c1aa <find_volume+0x492>
		fmt = FS_FAT32;
 800bff2:	2303      	movs	r3, #3
 800bff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bffe:	4293      	cmp	r3, r2
 800c000:	d802      	bhi.n	800c008 <find_volume+0x2f0>
 800c002:	2302      	movs	r3, #2
 800c004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c00e:	4293      	cmp	r3, r2
 800c010:	d802      	bhi.n	800c018 <find_volume+0x300>
 800c012:	2301      	movs	r3, #1
 800c014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	1c9a      	adds	r2, r3, #2
 800c01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c022:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c024:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c026:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c02a:	441a      	add	r2, r3
 800c02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c030:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c034:	441a      	add	r2, r3
 800c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c038:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c03a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d11e      	bne.n	800c080 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	3334      	adds	r3, #52	; 0x34
 800c046:	332a      	adds	r3, #42	; 0x2a
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fe fc15 	bl	800a878 <ld_word>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <find_volume+0x340>
 800c054:	230d      	movs	r3, #13
 800c056:	e0a8      	b.n	800c1aa <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05a:	891b      	ldrh	r3, [r3, #8]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <find_volume+0x34c>
 800c060:	230d      	movs	r3, #13
 800c062:	e0a2      	b.n	800c1aa <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	3334      	adds	r3, #52	; 0x34
 800c068:	332c      	adds	r3, #44	; 0x2c
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fe fc1c 	bl	800a8a8 <ld_dword>
 800c070:	4602      	mov	r2, r0
 800c072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c074:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	647b      	str	r3, [r7, #68]	; 0x44
 800c07e:	e01f      	b.n	800c0c0 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	891b      	ldrh	r3, [r3, #8]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d101      	bne.n	800c08c <find_volume+0x374>
 800c088:	230d      	movs	r3, #13
 800c08a:	e08e      	b.n	800c1aa <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c092:	441a      	add	r2, r3
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d103      	bne.n	800c0a8 <find_volume+0x390>
 800c0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	005b      	lsls	r3, r3, #1
 800c0a6:	e00a      	b.n	800c0be <find_volume+0x3a6>
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0aa:	699a      	ldr	r2, [r3, #24]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	4413      	add	r3, r2
 800c0b2:	085a      	lsrs	r2, r3, #1
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	699b      	ldr	r3, [r3, #24]
 800c0b8:	f003 0301 	and.w	r3, r3, #1
 800c0bc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c0be:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	69da      	ldr	r2, [r3, #28]
 800c0c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c0ca:	0a5b      	lsrs	r3, r3, #9
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d201      	bcs.n	800c0d4 <find_volume+0x3bc>
 800c0d0:	230d      	movs	r3, #13
 800c0d2:	e06a      	b.n	800c1aa <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0da:	615a      	str	r2, [r3, #20]
 800c0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0de:	695a      	ldr	r2, [r3, #20]
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e6:	2280      	movs	r2, #128	; 0x80
 800c0e8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c0ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d149      	bne.n	800c186 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f4:	3334      	adds	r3, #52	; 0x34
 800c0f6:	3330      	adds	r3, #48	; 0x30
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fe fbbd 	bl	800a878 <ld_word>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b01      	cmp	r3, #1
 800c102:	d140      	bne.n	800c186 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c106:	3301      	adds	r3, #1
 800c108:	4619      	mov	r1, r3
 800c10a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c10c:	f7fe fe96 	bl	800ae3c <move_window>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d137      	bne.n	800c186 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800c116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c118:	2200      	movs	r2, #0
 800c11a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11e:	3334      	adds	r3, #52	; 0x34
 800c120:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c124:	4618      	mov	r0, r3
 800c126:	f7fe fba7 	bl	800a878 <ld_word>
 800c12a:	4603      	mov	r3, r0
 800c12c:	461a      	mov	r2, r3
 800c12e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c132:	429a      	cmp	r2, r3
 800c134:	d127      	bne.n	800c186 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c138:	3334      	adds	r3, #52	; 0x34
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe fbb4 	bl	800a8a8 <ld_dword>
 800c140:	4603      	mov	r3, r0
 800c142:	4a1c      	ldr	r2, [pc, #112]	; (800c1b4 <find_volume+0x49c>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d11e      	bne.n	800c186 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	3334      	adds	r3, #52	; 0x34
 800c14c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c150:	4618      	mov	r0, r3
 800c152:	f7fe fba9 	bl	800a8a8 <ld_dword>
 800c156:	4603      	mov	r3, r0
 800c158:	4a17      	ldr	r2, [pc, #92]	; (800c1b8 <find_volume+0x4a0>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d113      	bne.n	800c186 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c160:	3334      	adds	r3, #52	; 0x34
 800c162:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c166:	4618      	mov	r0, r3
 800c168:	f7fe fb9e 	bl	800a8a8 <ld_dword>
 800c16c:	4602      	mov	r2, r0
 800c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c170:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c174:	3334      	adds	r3, #52	; 0x34
 800c176:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe fb94 	bl	800a8a8 <ld_dword>
 800c180:	4602      	mov	r2, r0
 800c182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c184:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c188:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c18c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c18e:	4b0b      	ldr	r3, [pc, #44]	; (800c1bc <find_volume+0x4a4>)
 800c190:	881b      	ldrh	r3, [r3, #0]
 800c192:	3301      	adds	r3, #1
 800c194:	b29a      	uxth	r2, r3
 800c196:	4b09      	ldr	r3, [pc, #36]	; (800c1bc <find_volume+0x4a4>)
 800c198:	801a      	strh	r2, [r3, #0]
 800c19a:	4b08      	ldr	r3, [pc, #32]	; (800c1bc <find_volume+0x4a4>)
 800c19c:	881a      	ldrh	r2, [r3, #0]
 800c19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c1a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1a4:	f7fe fde2 	bl	800ad6c <clear_lock>
#endif
	return FR_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3758      	adds	r7, #88	; 0x58
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	41615252 	.word	0x41615252
 800c1b8:	61417272 	.word	0x61417272
 800c1bc:	20000df8 	.word	0x20000df8

0800c1c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c1ca:	2309      	movs	r3, #9
 800c1cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d02e      	beq.n	800c232 <validate+0x72>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d02a      	beq.n	800c232 <validate+0x72>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d025      	beq.n	800c232 <validate+0x72>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	889a      	ldrh	r2, [r3, #4]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	88db      	ldrh	r3, [r3, #6]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d11e      	bne.n	800c232 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fe fc3d 	bl	800aa78 <lock_fs>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d014      	beq.n	800c22e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	785b      	ldrb	r3, [r3, #1]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe fa96 	bl	800a73c <disk_status>
 800c210:	4603      	mov	r3, r0
 800c212:	f003 0301 	and.w	r3, r3, #1
 800c216:	2b00      	cmp	r3, #0
 800c218:	d102      	bne.n	800c220 <validate+0x60>
				res = FR_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]
 800c21e:	e008      	b.n	800c232 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2100      	movs	r1, #0
 800c226:	4618      	mov	r0, r3
 800c228:	f7fe fc3c 	bl	800aaa4 <unlock_fs>
 800c22c:	e001      	b.n	800c232 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c22e:	230f      	movs	r3, #15
 800c230:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c232:	7bfb      	ldrb	r3, [r7, #15]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d102      	bne.n	800c23e <validate+0x7e>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	e000      	b.n	800c240 <validate+0x80>
 800c23e:	2300      	movs	r3, #0
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	6013      	str	r3, [r2, #0]
	return res;
 800c244:	7bfb      	ldrb	r3, [r7, #15]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
	...

0800c250 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	4613      	mov	r3, r2
 800c25c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c262:	f107 0310 	add.w	r3, r7, #16
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff fcbb 	bl	800bbe2 <get_ldnumber>
 800c26c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	2b00      	cmp	r3, #0
 800c272:	da01      	bge.n	800c278 <f_mount+0x28>
 800c274:	230b      	movs	r3, #11
 800c276:	e048      	b.n	800c30a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c278:	4a26      	ldr	r2, [pc, #152]	; (800c314 <f_mount+0xc4>)
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c280:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00f      	beq.n	800c2a8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c288:	69b8      	ldr	r0, [r7, #24]
 800c28a:	f7fe fd6f 	bl	800ad6c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	4618      	mov	r0, r3
 800c294:	f001 f902 	bl	800d49c <ff_del_syncobj>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d101      	bne.n	800c2a2 <f_mount+0x52>
 800c29e:	2302      	movs	r3, #2
 800c2a0:	e033      	b.n	800c30a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00f      	beq.n	800c2ce <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	330c      	adds	r3, #12
 800c2bc:	4619      	mov	r1, r3
 800c2be:	4610      	mov	r0, r2
 800c2c0:	f001 f8d3 	bl	800d46a <ff_cre_syncobj>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d101      	bne.n	800c2ce <f_mount+0x7e>
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	e01d      	b.n	800c30a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	4910      	ldr	r1, [pc, #64]	; (800c314 <f_mount+0xc4>)
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d002      	beq.n	800c2e4 <f_mount+0x94>
 800c2de:	79fb      	ldrb	r3, [r7, #7]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d001      	beq.n	800c2e8 <f_mount+0x98>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	e010      	b.n	800c30a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c2e8:	f107 010c 	add.w	r1, r7, #12
 800c2ec:	f107 0308 	add.w	r3, r7, #8
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7ff fd10 	bl	800bd18 <find_volume>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	7dfa      	ldrb	r2, [r7, #23]
 800c300:	4611      	mov	r1, r2
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe fbce 	bl	800aaa4 <unlock_fs>
 800c308:	7dfb      	ldrb	r3, [r7, #23]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3720      	adds	r7, #32
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	20000df4 	.word	0x20000df4

0800c318 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b098      	sub	sp, #96	; 0x60
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	4613      	mov	r3, r2
 800c324:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d101      	bne.n	800c330 <f_open+0x18>
 800c32c:	2309      	movs	r3, #9
 800c32e:	e1b4      	b.n	800c69a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c330:	79fb      	ldrb	r3, [r7, #7]
 800c332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c336:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c338:	79fa      	ldrb	r2, [r7, #7]
 800c33a:	f107 0110 	add.w	r1, r7, #16
 800c33e:	f107 0308 	add.w	r3, r7, #8
 800c342:	4618      	mov	r0, r3
 800c344:	f7ff fce8 	bl	800bd18 <find_volume>
 800c348:	4603      	mov	r3, r0
 800c34a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c34e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c352:	2b00      	cmp	r3, #0
 800c354:	f040 8191 	bne.w	800c67a <f_open+0x362>
		dj.obj.fs = fs;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	f107 0314 	add.w	r3, r7, #20
 800c362:	4611      	mov	r1, r2
 800c364:	4618      	mov	r0, r3
 800c366:	f7ff fbcb 	bl	800bb00 <follow_path>
 800c36a:	4603      	mov	r3, r0
 800c36c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c370:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c374:	2b00      	cmp	r3, #0
 800c376:	d11a      	bne.n	800c3ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c378:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c37c:	b25b      	sxtb	r3, r3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	da03      	bge.n	800c38a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c382:	2306      	movs	r3, #6
 800c384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c388:	e011      	b.n	800c3ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c38a:	79fb      	ldrb	r3, [r7, #7]
 800c38c:	f023 0301 	bic.w	r3, r3, #1
 800c390:	2b00      	cmp	r3, #0
 800c392:	bf14      	ite	ne
 800c394:	2301      	movne	r3, #1
 800c396:	2300      	moveq	r3, #0
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	461a      	mov	r2, r3
 800c39c:	f107 0314 	add.w	r3, r7, #20
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7fe fb9a 	bl	800aadc <chk_lock>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c3ae:	79fb      	ldrb	r3, [r7, #7]
 800c3b0:	f003 031c 	and.w	r3, r3, #28
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d07f      	beq.n	800c4b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c3b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d017      	beq.n	800c3f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c3c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3c4:	2b04      	cmp	r3, #4
 800c3c6:	d10e      	bne.n	800c3e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c3c8:	f7fe fbe4 	bl	800ab94 <enq_lock>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d006      	beq.n	800c3e0 <f_open+0xc8>
 800c3d2:	f107 0314 	add.w	r3, r7, #20
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff facb 	bl	800b972 <dir_register>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	e000      	b.n	800c3e2 <f_open+0xca>
 800c3e0:	2312      	movs	r3, #18
 800c3e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c3e6:	79fb      	ldrb	r3, [r7, #7]
 800c3e8:	f043 0308 	orr.w	r3, r3, #8
 800c3ec:	71fb      	strb	r3, [r7, #7]
 800c3ee:	e010      	b.n	800c412 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c3f0:	7ebb      	ldrb	r3, [r7, #26]
 800c3f2:	f003 0311 	and.w	r3, r3, #17
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d003      	beq.n	800c402 <f_open+0xea>
					res = FR_DENIED;
 800c3fa:	2307      	movs	r3, #7
 800c3fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c400:	e007      	b.n	800c412 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c402:	79fb      	ldrb	r3, [r7, #7]
 800c404:	f003 0304 	and.w	r3, r3, #4
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d002      	beq.n	800c412 <f_open+0xfa>
 800c40c:	2308      	movs	r3, #8
 800c40e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c416:	2b00      	cmp	r3, #0
 800c418:	d168      	bne.n	800c4ec <f_open+0x1d4>
 800c41a:	79fb      	ldrb	r3, [r7, #7]
 800c41c:	f003 0308 	and.w	r3, r3, #8
 800c420:	2b00      	cmp	r3, #0
 800c422:	d063      	beq.n	800c4ec <f_open+0x1d4>
				dw = GET_FATTIME();
 800c424:	f7fd ff36 	bl	800a294 <get_fattime>
 800c428:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42c:	330e      	adds	r3, #14
 800c42e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c430:	4618      	mov	r0, r3
 800c432:	f7fe fa77 	bl	800a924 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c438:	3316      	adds	r3, #22
 800c43a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fe fa71 	bl	800a924 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c444:	330b      	adds	r3, #11
 800c446:	2220      	movs	r2, #32
 800c448:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c44e:	4611      	mov	r1, r2
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff f9fa 	bl	800b84a <ld_clust>
 800c456:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c45c:	2200      	movs	r2, #0
 800c45e:	4618      	mov	r0, r3
 800c460:	f7ff fa12 	bl	800b888 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c466:	331c      	adds	r3, #28
 800c468:	2100      	movs	r1, #0
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fe fa5a 	bl	800a924 <st_dword>
					fs->wflag = 1;
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	2201      	movs	r2, #1
 800c474:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d037      	beq.n	800c4ec <f_open+0x1d4>
						dw = fs->winsect;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c480:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c482:	f107 0314 	add.w	r3, r7, #20
 800c486:	2200      	movs	r2, #0
 800c488:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fe ff25 	bl	800b2da <remove_chain>
 800c490:	4603      	mov	r3, r0
 800c492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d126      	bne.n	800c4ec <f_open+0x1d4>
							res = move_window(fs, dw);
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fe fcca 	bl	800ae3c <move_window>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4b2:	3a01      	subs	r2, #1
 800c4b4:	611a      	str	r2, [r3, #16]
 800c4b6:	e019      	b.n	800c4ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c4b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d115      	bne.n	800c4ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c4c0:	7ebb      	ldrb	r3, [r7, #26]
 800c4c2:	f003 0310 	and.w	r3, r3, #16
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d003      	beq.n	800c4d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c4ca:	2304      	movs	r3, #4
 800c4cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c4d0:	e00c      	b.n	800c4ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c4d2:	79fb      	ldrb	r3, [r7, #7]
 800c4d4:	f003 0302 	and.w	r3, r3, #2
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d007      	beq.n	800c4ec <f_open+0x1d4>
 800c4dc:	7ebb      	ldrb	r3, [r7, #26]
 800c4de:	f003 0301 	and.w	r3, r3, #1
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d002      	beq.n	800c4ec <f_open+0x1d4>
						res = FR_DENIED;
 800c4e6:	2307      	movs	r3, #7
 800c4e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c4ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d128      	bne.n	800c546 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c4f4:	79fb      	ldrb	r3, [r7, #7]
 800c4f6:	f003 0308 	and.w	r3, r3, #8
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d003      	beq.n	800c506 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c4fe:	79fb      	ldrb	r3, [r7, #7]
 800c500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c504:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c50e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c514:	79fb      	ldrb	r3, [r7, #7]
 800c516:	f023 0301 	bic.w	r3, r3, #1
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	bf14      	ite	ne
 800c51e:	2301      	movne	r3, #1
 800c520:	2300      	moveq	r3, #0
 800c522:	b2db      	uxtb	r3, r3
 800c524:	461a      	mov	r2, r3
 800c526:	f107 0314 	add.w	r3, r7, #20
 800c52a:	4611      	mov	r1, r2
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fe fb53 	bl	800abd8 <inc_lock>
 800c532:	4602      	mov	r2, r0
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d102      	bne.n	800c546 <f_open+0x22e>
 800c540:	2302      	movs	r3, #2
 800c542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f040 8095 	bne.w	800c67a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c554:	4611      	mov	r1, r2
 800c556:	4618      	mov	r0, r3
 800c558:	f7ff f977 	bl	800b84a <ld_clust>
 800c55c:	4602      	mov	r2, r0
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c564:	331c      	adds	r3, #28
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe f99e 	bl	800a8a8 <ld_dword>
 800c56c:	4602      	mov	r2, r0
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c578:	693a      	ldr	r2, [r7, #16]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	88da      	ldrh	r2, [r3, #6]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	79fa      	ldrb	r2, [r7, #7]
 800c58a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2200      	movs	r2, #0
 800c596:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	3330      	adds	r3, #48	; 0x30
 800c5a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fe fa08 	bl	800a9be <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c5ae:	79fb      	ldrb	r3, [r7, #7]
 800c5b0:	f003 0320 	and.w	r3, r3, #32
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d060      	beq.n	800c67a <f_open+0x362>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d05c      	beq.n	800c67a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	68da      	ldr	r2, [r3, #12]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	895b      	ldrh	r3, [r3, #10]
 800c5cc:	025b      	lsls	r3, r3, #9
 800c5ce:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	657b      	str	r3, [r7, #84]	; 0x54
 800c5dc:	e016      	b.n	800c60c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe fce5 	bl	800afb2 <get_fat>
 800c5e8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c5ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d802      	bhi.n	800c5f6 <f_open+0x2de>
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c5f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5fc:	d102      	bne.n	800c604 <f_open+0x2ec>
 800c5fe:	2301      	movs	r3, #1
 800c600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	657b      	str	r3, [r7, #84]	; 0x54
 800c60c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c610:	2b00      	cmp	r3, #0
 800c612:	d103      	bne.n	800c61c <f_open+0x304>
 800c614:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c618:	429a      	cmp	r2, r3
 800c61a:	d8e0      	bhi.n	800c5de <f_open+0x2c6>
				}
				fp->clust = clst;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c620:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c626:	2b00      	cmp	r3, #0
 800c628:	d127      	bne.n	800c67a <f_open+0x362>
 800c62a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c62c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c630:	2b00      	cmp	r3, #0
 800c632:	d022      	beq.n	800c67a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fe fc9b 	bl	800af74 <clust2sect>
 800c63e:	6478      	str	r0, [r7, #68]	; 0x44
 800c640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c642:	2b00      	cmp	r3, #0
 800c644:	d103      	bne.n	800c64e <f_open+0x336>
						res = FR_INT_ERR;
 800c646:	2302      	movs	r3, #2
 800c648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c64c:	e015      	b.n	800c67a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c64e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c650:	0a5a      	lsrs	r2, r3, #9
 800c652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c654:	441a      	add	r2, r3
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	7858      	ldrb	r0, [r3, #1]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6a1a      	ldr	r2, [r3, #32]
 800c668:	2301      	movs	r3, #1
 800c66a:	f7fe f8a7 	bl	800a7bc <disk_read>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d002      	beq.n	800c67a <f_open+0x362>
 800c674:	2301      	movs	r3, #1
 800c676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c67a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d002      	beq.n	800c688 <f_open+0x370>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c68e:	4611      	mov	r1, r2
 800c690:	4618      	mov	r0, r3
 800c692:	f7fe fa07 	bl	800aaa4 <unlock_fs>
 800c696:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3760      	adds	r7, #96	; 0x60
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b08c      	sub	sp, #48	; 0x30
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	60f8      	str	r0, [r7, #12]
 800c6aa:	60b9      	str	r1, [r7, #8]
 800c6ac:	607a      	str	r2, [r7, #4]
 800c6ae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f107 0210 	add.w	r2, r7, #16
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7ff fd7c 	bl	800c1c0 <validate>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c6ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d107      	bne.n	800c6e6 <f_write+0x44>
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	7d5b      	ldrb	r3, [r3, #21]
 800c6da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c6de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d009      	beq.n	800c6fa <f_write+0x58>
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fe f9d8 	bl	800aaa4 <unlock_fs>
 800c6f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6f8:	e173      	b.n	800c9e2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	7d1b      	ldrb	r3, [r3, #20]
 800c6fe:	f003 0302 	and.w	r3, r3, #2
 800c702:	2b00      	cmp	r3, #0
 800c704:	d106      	bne.n	800c714 <f_write+0x72>
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	2107      	movs	r1, #7
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fe f9ca 	bl	800aaa4 <unlock_fs>
 800c710:	2307      	movs	r3, #7
 800c712:	e166      	b.n	800c9e2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	699a      	ldr	r2, [r3, #24]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	441a      	add	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	429a      	cmp	r2, r3
 800c722:	f080 814b 	bcs.w	800c9bc <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	43db      	mvns	r3, r3
 800c72c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c72e:	e145      	b.n	800c9bc <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f040 8101 	bne.w	800c940 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	699b      	ldr	r3, [r3, #24]
 800c742:	0a5b      	lsrs	r3, r3, #9
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	8952      	ldrh	r2, [r2, #10]
 800c748:	3a01      	subs	r2, #1
 800c74a:	4013      	ands	r3, r2
 800c74c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d14d      	bne.n	800c7f0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10c      	bne.n	800c776 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	2b00      	cmp	r3, #0
 800c766:	d11a      	bne.n	800c79e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2100      	movs	r1, #0
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fe fe19 	bl	800b3a4 <create_chain>
 800c772:	62b8      	str	r0, [r7, #40]	; 0x28
 800c774:	e013      	b.n	800c79e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d007      	beq.n	800c78e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	699b      	ldr	r3, [r3, #24]
 800c782:	4619      	mov	r1, r3
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f7fe fea5 	bl	800b4d4 <clmt_clust>
 800c78a:	62b8      	str	r0, [r7, #40]	; 0x28
 800c78c:	e007      	b.n	800c79e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	69db      	ldr	r3, [r3, #28]
 800c794:	4619      	mov	r1, r3
 800c796:	4610      	mov	r0, r2
 800c798:	f7fe fe04 	bl	800b3a4 <create_chain>
 800c79c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f000 8110 	beq.w	800c9c6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d109      	bne.n	800c7c0 <f_write+0x11e>
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	755a      	strb	r2, [r3, #21]
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	2102      	movs	r1, #2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fe f974 	bl	800aaa4 <unlock_fs>
 800c7bc:	2302      	movs	r3, #2
 800c7be:	e110      	b.n	800c9e2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7c6:	d109      	bne.n	800c7dc <f_write+0x13a>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	755a      	strb	r2, [r3, #21]
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	2101      	movs	r1, #1
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe f966 	bl	800aaa4 <unlock_fs>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e102      	b.n	800c9e2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7e0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d102      	bne.n	800c7f0 <f_write+0x14e>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	7d1b      	ldrb	r3, [r3, #20]
 800c7f4:	b25b      	sxtb	r3, r3
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	da1d      	bge.n	800c836 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	7858      	ldrb	r0, [r3, #1]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6a1a      	ldr	r2, [r3, #32]
 800c808:	2301      	movs	r3, #1
 800c80a:	f7fd fff7 	bl	800a7fc <disk_write>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d009      	beq.n	800c828 <f_write+0x186>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2201      	movs	r2, #1
 800c818:	755a      	strb	r2, [r3, #21]
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	2101      	movs	r1, #1
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fe f940 	bl	800aaa4 <unlock_fs>
 800c824:	2301      	movs	r3, #1
 800c826:	e0dc      	b.n	800c9e2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	7d1b      	ldrb	r3, [r3, #20]
 800c82c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c830:	b2da      	uxtb	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	69db      	ldr	r3, [r3, #28]
 800c83c:	4619      	mov	r1, r3
 800c83e:	4610      	mov	r0, r2
 800c840:	f7fe fb98 	bl	800af74 <clust2sect>
 800c844:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d109      	bne.n	800c860 <f_write+0x1be>
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2202      	movs	r2, #2
 800c850:	755a      	strb	r2, [r3, #21]
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	2102      	movs	r1, #2
 800c856:	4618      	mov	r0, r3
 800c858:	f7fe f924 	bl	800aaa4 <unlock_fs>
 800c85c:	2302      	movs	r3, #2
 800c85e:	e0c0      	b.n	800c9e2 <f_write+0x340>
			sect += csect;
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	4413      	add	r3, r2
 800c866:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	0a5b      	lsrs	r3, r3, #9
 800c86c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c86e:	6a3b      	ldr	r3, [r7, #32]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d041      	beq.n	800c8f8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c874:	69ba      	ldr	r2, [r7, #24]
 800c876:	6a3b      	ldr	r3, [r7, #32]
 800c878:	4413      	add	r3, r2
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	8952      	ldrh	r2, [r2, #10]
 800c87e:	4293      	cmp	r3, r2
 800c880:	d905      	bls.n	800c88e <f_write+0x1ec>
					cc = fs->csize - csect;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	895b      	ldrh	r3, [r3, #10]
 800c886:	461a      	mov	r2, r3
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	7858      	ldrb	r0, [r3, #1]
 800c892:	6a3b      	ldr	r3, [r7, #32]
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	69f9      	ldr	r1, [r7, #28]
 800c898:	f7fd ffb0 	bl	800a7fc <disk_write>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d009      	beq.n	800c8b6 <f_write+0x214>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	755a      	strb	r2, [r3, #21]
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe f8f9 	bl	800aaa4 <unlock_fs>
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e095      	b.n	800c9e2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6a1a      	ldr	r2, [r3, #32]
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	6a3a      	ldr	r2, [r7, #32]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d915      	bls.n	800c8f0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6a1a      	ldr	r2, [r3, #32]
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	025b      	lsls	r3, r3, #9
 800c8d4:	69fa      	ldr	r2, [r7, #28]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8dc:	4619      	mov	r1, r3
 800c8de:	f7fe f84d 	bl	800a97c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	7d1b      	ldrb	r3, [r3, #20]
 800c8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c8f0:	6a3b      	ldr	r3, [r7, #32]
 800c8f2:	025b      	lsls	r3, r3, #9
 800c8f4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c8f6:	e044      	b.n	800c982 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6a1b      	ldr	r3, [r3, #32]
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d01b      	beq.n	800c93a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	699a      	ldr	r2, [r3, #24]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d215      	bcs.n	800c93a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	7858      	ldrb	r0, [r3, #1]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c918:	2301      	movs	r3, #1
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	f7fd ff4e 	bl	800a7bc <disk_read>
 800c920:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c922:	2b00      	cmp	r3, #0
 800c924:	d009      	beq.n	800c93a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2201      	movs	r2, #1
 800c92a:	755a      	strb	r2, [r3, #21]
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	2101      	movs	r1, #1
 800c930:	4618      	mov	r0, r3
 800c932:	f7fe f8b7 	bl	800aaa4 <unlock_fs>
 800c936:	2301      	movs	r3, #1
 800c938:	e053      	b.n	800c9e2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	697a      	ldr	r2, [r7, #20]
 800c93e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c948:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c94c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c94e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	429a      	cmp	r2, r3
 800c954:	d901      	bls.n	800c95a <f_write+0x2b8>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c968:	4413      	add	r3, r2
 800c96a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c96c:	69f9      	ldr	r1, [r7, #28]
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fe f804 	bl	800a97c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	7d1b      	ldrb	r3, [r3, #20]
 800c978:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c97c:	b2da      	uxtb	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c982:	69fa      	ldr	r2, [r7, #28]
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	4413      	add	r3, r2
 800c988:	61fb      	str	r3, [r7, #28]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	699a      	ldr	r2, [r3, #24]
 800c98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c990:	441a      	add	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	619a      	str	r2, [r3, #24]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	68da      	ldr	r2, [r3, #12]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	699b      	ldr	r3, [r3, #24]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	bf38      	it	cc
 800c9a2:	461a      	movcc	r2, r3
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	60da      	str	r2, [r3, #12]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ae:	441a      	add	r2, r3
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	f47f aeb6 	bne.w	800c730 <f_write+0x8e>
 800c9c4:	e000      	b.n	800c9c8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c9c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	7d1b      	ldrb	r3, [r3, #20]
 800c9cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9d0:	b2da      	uxtb	r2, r3
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	2100      	movs	r1, #0
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fe f862 	bl	800aaa4 <unlock_fs>
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3730      	adds	r7, #48	; 0x30
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b086      	sub	sp, #24
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f107 0208 	add.w	r2, r7, #8
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7ff fbe0 	bl	800c1c0 <validate>
 800ca00:	4603      	mov	r3, r0
 800ca02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d16d      	bne.n	800cae6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	7d1b      	ldrb	r3, [r3, #20]
 800ca0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d067      	beq.n	800cae6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	7d1b      	ldrb	r3, [r3, #20]
 800ca1a:	b25b      	sxtb	r3, r3
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	da1a      	bge.n	800ca56 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	7858      	ldrb	r0, [r3, #1]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a1a      	ldr	r2, [r3, #32]
 800ca2e:	2301      	movs	r3, #1
 800ca30:	f7fd fee4 	bl	800a7fc <disk_write>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d006      	beq.n	800ca48 <f_sync+0x5e>
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe f830 	bl	800aaa4 <unlock_fs>
 800ca44:	2301      	movs	r3, #1
 800ca46:	e055      	b.n	800caf4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	7d1b      	ldrb	r3, [r3, #20]
 800ca4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca56:	f7fd fc1d 	bl	800a294 <get_fattime>
 800ca5a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca62:	4619      	mov	r1, r3
 800ca64:	4610      	mov	r0, r2
 800ca66:	f7fe f9e9 	bl	800ae3c <move_window>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d138      	bne.n	800cae6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca78:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	330b      	adds	r3, #11
 800ca7e:	781a      	ldrb	r2, [r3, #0]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	330b      	adds	r3, #11
 800ca84:	f042 0220 	orr.w	r2, r2, #32
 800ca88:	b2d2      	uxtb	r2, r2
 800ca8a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6818      	ldr	r0, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	461a      	mov	r2, r3
 800ca96:	68f9      	ldr	r1, [r7, #12]
 800ca98:	f7fe fef6 	bl	800b888 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f103 021c 	add.w	r2, r3, #28
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	4619      	mov	r1, r3
 800caa8:	4610      	mov	r0, r2
 800caaa:	f7fd ff3b 	bl	800a924 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3316      	adds	r3, #22
 800cab2:	6939      	ldr	r1, [r7, #16]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fd ff35 	bl	800a924 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	3312      	adds	r3, #18
 800cabe:	2100      	movs	r1, #0
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fd ff14 	bl	800a8ee <st_word>
					fs->wflag = 1;
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	2201      	movs	r2, #1
 800caca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fe f9e2 	bl	800ae98 <sync_fs>
 800cad4:	4603      	mov	r3, r0
 800cad6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7d1b      	ldrb	r3, [r3, #20]
 800cadc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	7dfa      	ldrb	r2, [r7, #23]
 800caea:	4611      	mov	r1, r2
 800caec:	4618      	mov	r0, r3
 800caee:	f7fd ffd9 	bl	800aaa4 <unlock_fs>
 800caf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3718      	adds	r7, #24
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7ff ff70 	bl	800c9ea <f_sync>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cb0e:	7bfb      	ldrb	r3, [r7, #15]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d11d      	bne.n	800cb50 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f107 0208 	add.w	r2, r7, #8
 800cb1a:	4611      	mov	r1, r2
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7ff fb4f 	bl	800c1c0 <validate>
 800cb22:	4603      	mov	r3, r0
 800cb24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cb26:	7bfb      	ldrb	r3, [r7, #15]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d111      	bne.n	800cb50 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7fe f8df 	bl	800acf4 <dec_lock>
 800cb36:	4603      	mov	r3, r0
 800cb38:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d102      	bne.n	800cb46 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	2100      	movs	r1, #0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fd ffaa 	bl	800aaa4 <unlock_fs>
#endif
		}
	}
	return res;
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800cb5c:	b590      	push	{r4, r7, lr}
 800cb5e:	b09d      	sub	sp, #116	; 0x74
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	607a      	str	r2, [r7, #4]
 800cb66:	603b      	str	r3, [r7, #0]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800cb70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb74:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800cb76:	f107 030c 	add.w	r3, r7, #12
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7ff f831 	bl	800bbe2 <get_ldnumber>
 800cb80:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	da02      	bge.n	800cb8e <f_mkfs+0x32>
 800cb88:	230b      	movs	r3, #11
 800cb8a:	f000 bc0d 	b.w	800d3a8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800cb8e:	4a94      	ldr	r2, [pc, #592]	; (800cde0 <f_mkfs+0x284>)
 800cb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d005      	beq.n	800cba6 <f_mkfs+0x4a>
 800cb9a:	4a91      	ldr	r2, [pc, #580]	; (800cde0 <f_mkfs+0x284>)
 800cb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800cba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800cbac:	2300      	movs	r3, #0
 800cbae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800cbb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fd fdda 	bl	800a770 <disk_initialize>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800cbc2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <f_mkfs+0x76>
 800cbce:	2303      	movs	r3, #3
 800cbd0:	e3ea      	b.n	800d3a8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800cbd2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cbd6:	f003 0304 	and.w	r3, r3, #4
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <f_mkfs+0x86>
 800cbde:	230a      	movs	r3, #10
 800cbe0:	e3e2      	b.n	800d3a8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800cbe2:	f107 0214 	add.w	r2, r7, #20
 800cbe6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cbea:	2103      	movs	r1, #3
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fd fe25 	bl	800a83c <disk_ioctl>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10c      	bne.n	800cc12 <f_mkfs+0xb6>
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d009      	beq.n	800cc12 <f_mkfs+0xb6>
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc04:	d805      	bhi.n	800cc12 <f_mkfs+0xb6>
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	1e5a      	subs	r2, r3, #1
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d001      	beq.n	800cc16 <f_mkfs+0xba>
 800cc12:	2301      	movs	r3, #1
 800cc14:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800cc16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc1a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d003      	beq.n	800cc2a <f_mkfs+0xce>
 800cc22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d309      	bcc.n	800cc3e <f_mkfs+0xe2>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc30:	d805      	bhi.n	800cc3e <f_mkfs+0xe2>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	1e5a      	subs	r2, r3, #1
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4013      	ands	r3, r2
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d001      	beq.n	800cc42 <f_mkfs+0xe6>
 800cc3e:	2313      	movs	r3, #19
 800cc40:	e3b2      	b.n	800d3a8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800cc42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc4a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800cc50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cc56:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800cc5c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	fb02 f303 	mul.w	r3, r2, r3
 800cc64:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d101      	bne.n	800cc70 <f_mkfs+0x114>
 800cc6c:	230e      	movs	r3, #14
 800cc6e:	e39b      	b.n	800d3a8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800cc70:	f107 0210 	add.w	r2, r7, #16
 800cc74:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cc78:	2101      	movs	r1, #1
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fd fdde 	bl	800a83c <disk_ioctl>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <f_mkfs+0x12e>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e38e      	b.n	800d3a8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800cc8a:	7afb      	ldrb	r3, [r7, #11]
 800cc8c:	f003 0308 	and.w	r3, r3, #8
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <f_mkfs+0x13c>
 800cc94:	2300      	movs	r3, #0
 800cc96:	e000      	b.n	800cc9a <f_mkfs+0x13e>
 800cc98:	233f      	movs	r3, #63	; 0x3f
 800cc9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d901      	bls.n	800cca8 <f_mkfs+0x14c>
 800cca4:	230e      	movs	r3, #14
 800cca6:	e37f      	b.n	800d3a8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800cca8:	693a      	ldr	r2, [r7, #16]
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	2b7f      	cmp	r3, #127	; 0x7f
 800ccb4:	d801      	bhi.n	800ccba <f_mkfs+0x15e>
 800ccb6:	230e      	movs	r3, #14
 800ccb8:	e376      	b.n	800d3a8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2b80      	cmp	r3, #128	; 0x80
 800ccbe:	d901      	bls.n	800ccc4 <f_mkfs+0x168>
 800ccc0:	2313      	movs	r3, #19
 800ccc2:	e371      	b.n	800d3a8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800ccc4:	7afb      	ldrb	r3, [r7, #11]
 800ccc6:	f003 0302 	and.w	r3, r3, #2
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00d      	beq.n	800ccea <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800ccce:	7afb      	ldrb	r3, [r7, #11]
 800ccd0:	f003 0307 	and.w	r3, r3, #7
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d004      	beq.n	800cce2 <f_mkfs+0x186>
 800ccd8:	7afb      	ldrb	r3, [r7, #11]
 800ccda:	f003 0301 	and.w	r3, r3, #1
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d103      	bne.n	800ccea <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800cce2:	2303      	movs	r3, #3
 800cce4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cce8:	e009      	b.n	800ccfe <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800ccea:	7afb      	ldrb	r3, [r7, #11]
 800ccec:	f003 0301 	and.w	r3, r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d101      	bne.n	800ccf8 <f_mkfs+0x19c>
 800ccf4:	2313      	movs	r3, #19
 800ccf6:	e357      	b.n	800d3a8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800cd02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	d13c      	bne.n	800cd84 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800cd0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d11b      	bne.n	800cd48 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	0c5b      	lsrs	r3, r3, #17
 800cd14:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800cd16:	2300      	movs	r3, #0
 800cd18:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	653b      	str	r3, [r7, #80]	; 0x50
 800cd1e:	e005      	b.n	800cd2c <f_mkfs+0x1d0>
 800cd20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd22:	3301      	adds	r3, #1
 800cd24:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd28:	005b      	lsls	r3, r3, #1
 800cd2a:	653b      	str	r3, [r7, #80]	; 0x50
 800cd2c:	4a2d      	ldr	r2, [pc, #180]	; (800cde4 <f_mkfs+0x288>)
 800cd2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d007      	beq.n	800cd48 <f_mkfs+0x1ec>
 800cd38:	4a2a      	ldr	r2, [pc, #168]	; (800cde4 <f_mkfs+0x288>)
 800cd3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd40:	461a      	mov	r2, r3
 800cd42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d2eb      	bcs.n	800cd20 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800cd48:	693a      	ldr	r2, [r7, #16]
 800cd4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd50:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	3302      	adds	r3, #2
 800cd56:	009a      	lsls	r2, r3, #2
 800cd58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cd5a:	4413      	add	r3, r2
 800cd5c:	1e5a      	subs	r2, r3, #1
 800cd5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cd60:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd64:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800cd66:	2320      	movs	r3, #32
 800cd68:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800cd6e:	6a3b      	ldr	r3, [r7, #32]
 800cd70:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d903      	bls.n	800cd80 <f_mkfs+0x224>
 800cd78:	6a3b      	ldr	r3, [r7, #32]
 800cd7a:	4a1b      	ldr	r2, [pc, #108]	; (800cde8 <f_mkfs+0x28c>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d952      	bls.n	800ce26 <f_mkfs+0x2ca>
 800cd80:	230e      	movs	r3, #14
 800cd82:	e311      	b.n	800d3a8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800cd84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d11b      	bne.n	800cdc2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	0b1b      	lsrs	r3, r3, #12
 800cd8e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800cd90:	2300      	movs	r3, #0
 800cd92:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd94:	2301      	movs	r3, #1
 800cd96:	653b      	str	r3, [r7, #80]	; 0x50
 800cd98:	e005      	b.n	800cda6 <f_mkfs+0x24a>
 800cd9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cda0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	653b      	str	r3, [r7, #80]	; 0x50
 800cda6:	4a11      	ldr	r2, [pc, #68]	; (800cdec <f_mkfs+0x290>)
 800cda8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d007      	beq.n	800cdc2 <f_mkfs+0x266>
 800cdb2:	4a0e      	ldr	r2, [pc, #56]	; (800cdec <f_mkfs+0x290>)
 800cdb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d2eb      	bcs.n	800cd9a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdca:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800cdcc:	6a3b      	ldr	r3, [r7, #32]
 800cdce:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d90c      	bls.n	800cdf0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800cdd6:	6a3b      	ldr	r3, [r7, #32]
 800cdd8:	3302      	adds	r3, #2
 800cdda:	005b      	lsls	r3, r3, #1
 800cddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdde:	e012      	b.n	800ce06 <f_mkfs+0x2aa>
 800cde0:	20000df4 	.word	0x20000df4
 800cde4:	08015e48 	.word	0x08015e48
 800cde8:	0ffffff5 	.word	0x0ffffff5
 800cdec:	08015e58 	.word	0x08015e58
				} else {
					fmt = FS_FAT12;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800cdf6:	6a3a      	ldr	r2, [r7, #32]
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	4413      	add	r3, r2
 800cdfe:	3301      	adds	r3, #1
 800ce00:	085b      	lsrs	r3, r3, #1
 800ce02:	3303      	adds	r3, #3
 800ce04:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800ce06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ce08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce0a:	4413      	add	r3, r2
 800ce0c:	1e5a      	subs	r2, r3, #1
 800ce0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce14:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800ce16:	2301      	movs	r3, #1
 800ce18:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800ce1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce1c:	015a      	lsls	r2, r3, #5
 800ce1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce24:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ce26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce2a:	4413      	add	r3, r2
 800ce2c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800ce2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce32:	fb03 f202 	mul.w	r2, r3, r2
 800ce36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce38:	4413      	add	r3, r2
 800ce3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ce3c:	4413      	add	r3, r2
 800ce3e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800ce40:	697a      	ldr	r2, [r7, #20]
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	4413      	add	r3, r2
 800ce46:	1e5a      	subs	r2, r3, #1
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	425b      	negs	r3, r3
 800ce4c:	401a      	ands	r2, r3
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800ce54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ce58:	2b03      	cmp	r3, #3
 800ce5a:	d108      	bne.n	800ce6e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800ce5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce60:	4413      	add	r3, r2
 800ce62:	657b      	str	r3, [r7, #84]	; 0x54
 800ce64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce68:	4413      	add	r3, r2
 800ce6a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce6c:	e006      	b.n	800ce7c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800ce6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce78:	4413      	add	r3, r2
 800ce7a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800ce7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce7e:	011a      	lsls	r2, r3, #4
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	441a      	add	r2, r3
 800ce84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce86:	1ad2      	subs	r2, r2, r3
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d901      	bls.n	800ce92 <f_mkfs+0x336>
 800ce8e:	230e      	movs	r3, #14
 800ce90:	e28a      	b.n	800d3a8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800ce92:	693a      	ldr	r2, [r7, #16]
 800ce94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce96:	1ad2      	subs	r2, r2, r3
 800ce98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce9c:	fb01 f303 	mul.w	r3, r1, r3
 800cea0:	1ad2      	subs	r2, r2, r3
 800cea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cea4:	1ad2      	subs	r2, r2, r3
 800cea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cea8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceac:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800ceae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ceb2:	2b03      	cmp	r3, #3
 800ceb4:	d10f      	bne.n	800ced6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800ceb6:	6a3b      	ldr	r3, [r7, #32]
 800ceb8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d80a      	bhi.n	800ced6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d105      	bne.n	800ced2 <f_mkfs+0x376>
 800cec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cec8:	085b      	lsrs	r3, r3, #1
 800ceca:	607b      	str	r3, [r7, #4]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d144      	bne.n	800cf5c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800ced2:	230e      	movs	r3, #14
 800ced4:	e268      	b.n	800d3a8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800ced6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	d133      	bne.n	800cf46 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d91e      	bls.n	800cf26 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d107      	bne.n	800cefe <f_mkfs+0x3a2>
 800ceee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cef0:	005b      	lsls	r3, r3, #1
 800cef2:	2b40      	cmp	r3, #64	; 0x40
 800cef4:	d803      	bhi.n	800cefe <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800cef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cef8:	005b      	lsls	r3, r3, #1
 800cefa:	607b      	str	r3, [r7, #4]
 800cefc:	e033      	b.n	800cf66 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800cefe:	7afb      	ldrb	r3, [r7, #11]
 800cf00:	f003 0302 	and.w	r3, r3, #2
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d003      	beq.n	800cf10 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800cf08:	2303      	movs	r3, #3
 800cf0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cf0e:	e02a      	b.n	800cf66 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d105      	bne.n	800cf22 <f_mkfs+0x3c6>
 800cf16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf18:	005b      	lsls	r3, r3, #1
 800cf1a:	607b      	str	r3, [r7, #4]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b80      	cmp	r3, #128	; 0x80
 800cf20:	d91e      	bls.n	800cf60 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800cf22:	230e      	movs	r3, #14
 800cf24:	e240      	b.n	800d3a8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800cf26:	6a3b      	ldr	r3, [r7, #32]
 800cf28:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d80a      	bhi.n	800cf46 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d105      	bne.n	800cf42 <f_mkfs+0x3e6>
 800cf36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf38:	005b      	lsls	r3, r3, #1
 800cf3a:	607b      	str	r3, [r7, #4]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b80      	cmp	r3, #128	; 0x80
 800cf40:	d910      	bls.n	800cf64 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800cf42:	230e      	movs	r3, #14
 800cf44:	e230      	b.n	800d3a8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800cf46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d10c      	bne.n	800cf68 <f_mkfs+0x40c>
 800cf4e:	6a3b      	ldr	r3, [r7, #32]
 800cf50:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d907      	bls.n	800cf68 <f_mkfs+0x40c>
 800cf58:	230e      	movs	r3, #14
 800cf5a:	e225      	b.n	800d3a8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800cf5c:	bf00      	nop
 800cf5e:	e6ce      	b.n	800ccfe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cf60:	bf00      	nop
 800cf62:	e6cc      	b.n	800ccfe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800cf64:	bf00      	nop
			pau = au;
 800cf66:	e6ca      	b.n	800ccfe <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800cf68:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800cf6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	2100      	movs	r1, #0
 800cf70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf72:	f7fd fd24 	bl	800a9be <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800cf76:	220b      	movs	r2, #11
 800cf78:	49b2      	ldr	r1, [pc, #712]	; (800d244 <f_mkfs+0x6e8>)
 800cf7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf7c:	f7fd fcfe 	bl	800a97c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800cf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf82:	330b      	adds	r3, #11
 800cf84:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cf86:	4611      	mov	r1, r2
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7fd fcb0 	bl	800a8ee <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf90:	330d      	adds	r3, #13
 800cf92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf94:	b2d2      	uxtb	r2, r2
 800cf96:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800cf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9a:	330e      	adds	r3, #14
 800cf9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf9e:	b292      	uxth	r2, r2
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fd fca3 	bl	800a8ee <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800cfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfaa:	3310      	adds	r3, #16
 800cfac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfae:	b2d2      	uxtb	r2, r2
 800cfb0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb4:	f103 0211 	add.w	r2, r3, #17
 800cfb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cfbc:	2b03      	cmp	r3, #3
 800cfbe:	d002      	beq.n	800cfc6 <f_mkfs+0x46a>
 800cfc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	e000      	b.n	800cfc8 <f_mkfs+0x46c>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	4619      	mov	r1, r3
 800cfca:	4610      	mov	r0, r2
 800cfcc:	f7fd fc8f 	bl	800a8ee <st_word>
		if (sz_vol < 0x10000) {
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfd6:	d208      	bcs.n	800cfea <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800cfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfda:	3313      	adds	r3, #19
 800cfdc:	693a      	ldr	r2, [r7, #16]
 800cfde:	b292      	uxth	r2, r2
 800cfe0:	4611      	mov	r1, r2
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fd fc83 	bl	800a8ee <st_word>
 800cfe8:	e006      	b.n	800cff8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800cfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfec:	3320      	adds	r3, #32
 800cfee:	693a      	ldr	r2, [r7, #16]
 800cff0:	4611      	mov	r1, r2
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fd fc96 	bl	800a924 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800cff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffa:	3315      	adds	r3, #21
 800cffc:	22f8      	movs	r2, #248	; 0xf8
 800cffe:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800d000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d002:	3318      	adds	r3, #24
 800d004:	213f      	movs	r1, #63	; 0x3f
 800d006:	4618      	mov	r0, r3
 800d008:	f7fd fc71 	bl	800a8ee <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800d00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00e:	331a      	adds	r3, #26
 800d010:	21ff      	movs	r1, #255	; 0xff
 800d012:	4618      	mov	r0, r3
 800d014:	f7fd fc6b 	bl	800a8ee <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800d018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01a:	331c      	adds	r3, #28
 800d01c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fd fc80 	bl	800a924 <st_dword>
		if (fmt == FS_FAT32) {
 800d024:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d028:	2b03      	cmp	r3, #3
 800d02a:	d131      	bne.n	800d090 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800d02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800d032:	f7fd f92f 	bl	800a294 <get_fattime>
 800d036:	4603      	mov	r3, r0
 800d038:	4619      	mov	r1, r3
 800d03a:	4620      	mov	r0, r4
 800d03c:	f7fd fc72 	bl	800a924 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800d040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d042:	3324      	adds	r3, #36	; 0x24
 800d044:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d046:	4618      	mov	r0, r3
 800d048:	f7fd fc6c 	bl	800a924 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04e:	332c      	adds	r3, #44	; 0x2c
 800d050:	2102      	movs	r1, #2
 800d052:	4618      	mov	r0, r3
 800d054:	f7fd fc66 	bl	800a924 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800d058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05a:	3330      	adds	r3, #48	; 0x30
 800d05c:	2101      	movs	r1, #1
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fd fc45 	bl	800a8ee <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	3332      	adds	r3, #50	; 0x32
 800d068:	2106      	movs	r1, #6
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fd fc3f 	bl	800a8ee <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800d070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d072:	3340      	adds	r3, #64	; 0x40
 800d074:	2280      	movs	r2, #128	; 0x80
 800d076:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800d078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07a:	3342      	adds	r3, #66	; 0x42
 800d07c:	2229      	movs	r2, #41	; 0x29
 800d07e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800d080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d082:	3347      	adds	r3, #71	; 0x47
 800d084:	2213      	movs	r2, #19
 800d086:	4970      	ldr	r1, [pc, #448]	; (800d248 <f_mkfs+0x6ec>)
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fd fc77 	bl	800a97c <mem_cpy>
 800d08e:	e020      	b.n	800d0d2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800d090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d092:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800d096:	f7fd f8fd 	bl	800a294 <get_fattime>
 800d09a:	4603      	mov	r3, r0
 800d09c:	4619      	mov	r1, r3
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f7fd fc40 	bl	800a924 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a6:	3316      	adds	r3, #22
 800d0a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d0aa:	b292      	uxth	r2, r2
 800d0ac:	4611      	mov	r1, r2
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fd fc1d 	bl	800a8ee <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b6:	3324      	adds	r3, #36	; 0x24
 800d0b8:	2280      	movs	r2, #128	; 0x80
 800d0ba:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0be:	3326      	adds	r3, #38	; 0x26
 800d0c0:	2229      	movs	r2, #41	; 0x29
 800d0c2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c6:	332b      	adds	r3, #43	; 0x2b
 800d0c8:	2213      	movs	r2, #19
 800d0ca:	4960      	ldr	r1, [pc, #384]	; (800d24c <f_mkfs+0x6f0>)
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7fd fc55 	bl	800a97c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d0d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fd fc06 	bl	800a8ee <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800d0e2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0ec:	f7fd fb86 	bl	800a7fc <disk_write>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d001      	beq.n	800d0fa <f_mkfs+0x59e>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e156      	b.n	800d3a8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800d0fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d0fe:	2b03      	cmp	r3, #3
 800d100:	d140      	bne.n	800d184 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800d102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d104:	1d9a      	adds	r2, r3, #6
 800d106:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d10a:	2301      	movs	r3, #1
 800d10c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d10e:	f7fd fb75 	bl	800a7fc <disk_write>
			mem_set(buf, 0, ss);
 800d112:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d114:	461a      	mov	r2, r3
 800d116:	2100      	movs	r1, #0
 800d118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d11a:	f7fd fc50 	bl	800a9be <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800d11e:	494c      	ldr	r1, [pc, #304]	; (800d250 <f_mkfs+0x6f4>)
 800d120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d122:	f7fd fbff 	bl	800a924 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800d126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d128:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d12c:	4949      	ldr	r1, [pc, #292]	; (800d254 <f_mkfs+0x6f8>)
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fd fbf8 	bl	800a924 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800d134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d136:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	3b01      	subs	r3, #1
 800d13e:	4619      	mov	r1, r3
 800d140:	4610      	mov	r0, r2
 800d142:	f7fd fbef 	bl	800a924 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800d146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d148:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d14c:	2102      	movs	r1, #2
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fd fbe8 	bl	800a924 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800d154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d156:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d15a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fd fbc5 	bl	800a8ee <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	1dda      	adds	r2, r3, #7
 800d168:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d16c:	2301      	movs	r3, #1
 800d16e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d170:	f7fd fb44 	bl	800a7fc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	1c5a      	adds	r2, r3, #1
 800d178:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d17c:	2301      	movs	r3, #1
 800d17e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d180:	f7fd fb3c 	bl	800a7fc <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800d184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d186:	2100      	movs	r1, #0
 800d188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d18a:	f7fd fc18 	bl	800a9be <mem_set>
		sect = b_fat;		/* FAT start sector */
 800d18e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d190:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d192:	2300      	movs	r3, #0
 800d194:	64bb      	str	r3, [r7, #72]	; 0x48
 800d196:	e04b      	b.n	800d230 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800d198:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	d113      	bne.n	800d1c8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800d1a0:	f06f 0107 	mvn.w	r1, #7
 800d1a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1a6:	f7fd fbbd 	bl	800a924 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800d1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fd fbb6 	bl	800a924 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800d1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ba:	3308      	adds	r3, #8
 800d1bc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fd fbaf 	bl	800a924 <st_dword>
 800d1c6:	e00b      	b.n	800d1e0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800d1c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d101      	bne.n	800d1d4 <f_mkfs+0x678>
 800d1d0:	4b21      	ldr	r3, [pc, #132]	; (800d258 <f_mkfs+0x6fc>)
 800d1d2:	e001      	b.n	800d1d8 <f_mkfs+0x67c>
 800d1d4:	f06f 0307 	mvn.w	r3, #7
 800d1d8:	4619      	mov	r1, r3
 800d1da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1dc:	f7fd fba2 	bl	800a924 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800d1e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1e2:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800d1e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	bf28      	it	cs
 800d1ec:	4613      	movcs	r3, r2
 800d1ee:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d1f0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d1f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d1f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1fa:	f7fd faff 	bl	800a7fc <disk_write>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d001      	beq.n	800d208 <f_mkfs+0x6ac>
 800d204:	2301      	movs	r3, #1
 800d206:	e0cf      	b.n	800d3a8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800d208:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d20a:	461a      	mov	r2, r3
 800d20c:	2100      	movs	r1, #0
 800d20e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d210:	f7fd fbd5 	bl	800a9be <mem_set>
				sect += n; nsect -= n;
 800d214:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d218:	4413      	add	r3, r2
 800d21a:	667b      	str	r3, [r7, #100]	; 0x64
 800d21c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d21e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800d224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1dc      	bne.n	800d1e4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d22a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d22c:	3301      	adds	r3, #1
 800d22e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d234:	429a      	cmp	r2, r3
 800d236:	d3af      	bcc.n	800d198 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800d238:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d23c:	2b03      	cmp	r3, #3
 800d23e:	d10d      	bne.n	800d25c <f_mkfs+0x700>
 800d240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d242:	e00c      	b.n	800d25e <f_mkfs+0x702>
 800d244:	08015cc8 	.word	0x08015cc8
 800d248:	08015cd4 	.word	0x08015cd4
 800d24c:	08015ce8 	.word	0x08015ce8
 800d250:	41615252 	.word	0x41615252
 800d254:	61417272 	.word	0x61417272
 800d258:	00fffff8 	.word	0x00fffff8
 800d25c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d25e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800d260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d264:	4293      	cmp	r3, r2
 800d266:	bf28      	it	cs
 800d268:	4613      	movcs	r3, r2
 800d26a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d26c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d272:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d276:	f7fd fac1 	bl	800a7fc <disk_write>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d001      	beq.n	800d284 <f_mkfs+0x728>
 800d280:	2301      	movs	r3, #1
 800d282:	e091      	b.n	800d3a8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800d284:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d288:	4413      	add	r3, r2
 800d28a:	667b      	str	r3, [r7, #100]	; 0x64
 800d28c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d28e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800d294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1e2      	bne.n	800d260 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800d29a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d29e:	2b03      	cmp	r3, #3
 800d2a0:	d103      	bne.n	800d2aa <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800d2a2:	230c      	movs	r3, #12
 800d2a4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d2a8:	e010      	b.n	800d2cc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2b0:	d303      	bcc.n	800d2ba <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800d2b2:	2306      	movs	r3, #6
 800d2b4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800d2b8:	e008      	b.n	800d2cc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800d2ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d2be:	2b02      	cmp	r3, #2
 800d2c0:	d101      	bne.n	800d2c6 <f_mkfs+0x76a>
 800d2c2:	2304      	movs	r3, #4
 800d2c4:	e000      	b.n	800d2c8 <f_mkfs+0x76c>
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800d2cc:	7afb      	ldrb	r3, [r7, #11]
 800d2ce:	f003 0308 	and.w	r3, r3, #8
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d15b      	bne.n	800d38e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800d2d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d2d8:	461a      	mov	r2, r3
 800d2da:	2100      	movs	r1, #0
 800d2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2de:	f7fd fb6e 	bl	800a9be <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fd fafe 	bl	800a8ee <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d2f8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	3301      	adds	r3, #1
 800d304:	2201      	movs	r2, #1
 800d306:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	3302      	adds	r3, #2
 800d30c:	2201      	movs	r2, #1
 800d30e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	3303      	adds	r3, #3
 800d314:	2200      	movs	r2, #0
 800d316:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	3304      	adds	r3, #4
 800d31c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800d320:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800d322:	693a      	ldr	r2, [r7, #16]
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	441a      	add	r2, r3
 800d328:	4b21      	ldr	r3, [pc, #132]	; (800d3b0 <f_mkfs+0x854>)
 800d32a:	fba3 1302 	umull	r1, r3, r3, r2
 800d32e:	1ad2      	subs	r2, r2, r3
 800d330:	0852      	lsrs	r2, r2, #1
 800d332:	4413      	add	r3, r2
 800d334:	0b5b      	lsrs	r3, r3, #13
 800d336:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	3305      	adds	r3, #5
 800d33c:	22fe      	movs	r2, #254	; 0xfe
 800d33e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800d340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d342:	089b      	lsrs	r3, r3, #2
 800d344:	b2da      	uxtb	r2, r3
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	3306      	adds	r3, #6
 800d34a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800d34e:	b2d2      	uxtb	r2, r2
 800d350:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	3307      	adds	r3, #7
 800d356:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d358:	b2d2      	uxtb	r2, r2
 800d35a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	3308      	adds	r3, #8
 800d360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d362:	4618      	mov	r0, r3
 800d364:	f7fd fade 	bl	800a924 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	330c      	adds	r3, #12
 800d36c:	693a      	ldr	r2, [r7, #16]
 800d36e:	4611      	mov	r1, r2
 800d370:	4618      	mov	r0, r3
 800d372:	f7fd fad7 	bl	800a924 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800d376:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800d37a:	2301      	movs	r3, #1
 800d37c:	2200      	movs	r2, #0
 800d37e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d380:	f7fd fa3c 	bl	800a7fc <disk_write>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d001      	beq.n	800d38e <f_mkfs+0x832>
 800d38a:	2301      	movs	r3, #1
 800d38c:	e00c      	b.n	800d3a8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800d38e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d392:	2200      	movs	r2, #0
 800d394:	2100      	movs	r1, #0
 800d396:	4618      	mov	r0, r3
 800d398:	f7fd fa50 	bl	800a83c <disk_ioctl>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <f_mkfs+0x84a>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e000      	b.n	800d3a8 <f_mkfs+0x84c>

	return FR_OK;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3774      	adds	r7, #116	; 0x74
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd90      	pop	{r4, r7, pc}
 800d3b0:	0515565b 	.word	0x0515565b

0800d3b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b087      	sub	sp, #28
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d3ca:	4b1f      	ldr	r3, [pc, #124]	; (800d448 <FATFS_LinkDriverEx+0x94>)
 800d3cc:	7a5b      	ldrb	r3, [r3, #9]
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d131      	bne.n	800d438 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d3d4:	4b1c      	ldr	r3, [pc, #112]	; (800d448 <FATFS_LinkDriverEx+0x94>)
 800d3d6:	7a5b      	ldrb	r3, [r3, #9]
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	461a      	mov	r2, r3
 800d3dc:	4b1a      	ldr	r3, [pc, #104]	; (800d448 <FATFS_LinkDriverEx+0x94>)
 800d3de:	2100      	movs	r1, #0
 800d3e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d3e2:	4b19      	ldr	r3, [pc, #100]	; (800d448 <FATFS_LinkDriverEx+0x94>)
 800d3e4:	7a5b      	ldrb	r3, [r3, #9]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	4a17      	ldr	r2, [pc, #92]	; (800d448 <FATFS_LinkDriverEx+0x94>)
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d3f2:	4b15      	ldr	r3, [pc, #84]	; (800d448 <FATFS_LinkDriverEx+0x94>)
 800d3f4:	7a5b      	ldrb	r3, [r3, #9]
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	4b13      	ldr	r3, [pc, #76]	; (800d448 <FATFS_LinkDriverEx+0x94>)
 800d3fc:	4413      	add	r3, r2
 800d3fe:	79fa      	ldrb	r2, [r7, #7]
 800d400:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d402:	4b11      	ldr	r3, [pc, #68]	; (800d448 <FATFS_LinkDriverEx+0x94>)
 800d404:	7a5b      	ldrb	r3, [r3, #9]
 800d406:	b2db      	uxtb	r3, r3
 800d408:	1c5a      	adds	r2, r3, #1
 800d40a:	b2d1      	uxtb	r1, r2
 800d40c:	4a0e      	ldr	r2, [pc, #56]	; (800d448 <FATFS_LinkDriverEx+0x94>)
 800d40e:	7251      	strb	r1, [r2, #9]
 800d410:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d412:	7dbb      	ldrb	r3, [r7, #22]
 800d414:	3330      	adds	r3, #48	; 0x30
 800d416:	b2da      	uxtb	r2, r3
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	3301      	adds	r3, #1
 800d420:	223a      	movs	r2, #58	; 0x3a
 800d422:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	3302      	adds	r3, #2
 800d428:	222f      	movs	r2, #47	; 0x2f
 800d42a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	3303      	adds	r3, #3
 800d430:	2200      	movs	r2, #0
 800d432:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d434:	2300      	movs	r3, #0
 800d436:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d438:	7dfb      	ldrb	r3, [r7, #23]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	371c      	adds	r7, #28
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	20000e1c 	.word	0x20000e1c

0800d44c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d456:	2200      	movs	r2, #0
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f7ff ffaa 	bl	800d3b4 <FATFS_LinkDriverEx>
 800d460:	4603      	mov	r3, r0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3708      	adds	r7, #8
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b084      	sub	sp, #16
 800d46e:	af00      	add	r7, sp, #0
 800d470:	4603      	mov	r3, r0
 800d472:	6039      	str	r1, [r7, #0]
 800d474:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 800d476:	2000      	movs	r0, #0
 800d478:	f000 f9ae 	bl	800d7d8 <osMutexNew>
 800d47c:	4602      	mov	r2, r0
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	bf14      	ite	ne
 800d48a:	2301      	movne	r3, #1
 800d48c:	2300      	moveq	r3, #0
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	60fb      	str	r3, [r7, #12]

    return ret;
 800d492:	68fb      	ldr	r3, [r7, #12]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 faa5 	bl	800d9f4 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800d4aa:	2301      	movs	r3, #1
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 800d4c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 fa0d 	bl	800d8e4 <osMutexAcquire>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b082      	sub	sp, #8
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 fa47 	bl	800d97a <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800d4ec:	bf00      	nop
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <__NVIC_SetPriority>:
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	6039      	str	r1, [r7, #0]
 800d4fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d504:	2b00      	cmp	r3, #0
 800d506:	db0a      	blt.n	800d51e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	490c      	ldr	r1, [pc, #48]	; (800d540 <__NVIC_SetPriority+0x4c>)
 800d50e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d512:	0112      	lsls	r2, r2, #4
 800d514:	b2d2      	uxtb	r2, r2
 800d516:	440b      	add	r3, r1
 800d518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d51c:	e00a      	b.n	800d534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	b2da      	uxtb	r2, r3
 800d522:	4908      	ldr	r1, [pc, #32]	; (800d544 <__NVIC_SetPriority+0x50>)
 800d524:	79fb      	ldrb	r3, [r7, #7]
 800d526:	f003 030f 	and.w	r3, r3, #15
 800d52a:	3b04      	subs	r3, #4
 800d52c:	0112      	lsls	r2, r2, #4
 800d52e:	b2d2      	uxtb	r2, r2
 800d530:	440b      	add	r3, r1
 800d532:	761a      	strb	r2, [r3, #24]
}
 800d534:	bf00      	nop
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	e000e100 	.word	0xe000e100
 800d544:	e000ed00 	.word	0xe000ed00

0800d548 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d548:	b580      	push	{r7, lr}
 800d54a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d54c:	4b05      	ldr	r3, [pc, #20]	; (800d564 <SysTick_Handler+0x1c>)
 800d54e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d550:	f002 fcde 	bl	800ff10 <xTaskGetSchedulerState>
 800d554:	4603      	mov	r3, r0
 800d556:	2b01      	cmp	r3, #1
 800d558:	d001      	beq.n	800d55e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d55a:	f003 fbc5 	bl	8010ce8 <xPortSysTickHandler>
  }
}
 800d55e:	bf00      	nop
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	e000e010 	.word	0xe000e010

0800d568 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d568:	b580      	push	{r7, lr}
 800d56a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d56c:	2100      	movs	r1, #0
 800d56e:	f06f 0004 	mvn.w	r0, #4
 800d572:	f7ff ffbf 	bl	800d4f4 <__NVIC_SetPriority>
#endif
}
 800d576:	bf00      	nop
 800d578:	bd80      	pop	{r7, pc}
	...

0800d57c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d582:	f3ef 8305 	mrs	r3, IPSR
 800d586:	603b      	str	r3, [r7, #0]
  return(result);
 800d588:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d003      	beq.n	800d596 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d58e:	f06f 0305 	mvn.w	r3, #5
 800d592:	607b      	str	r3, [r7, #4]
 800d594:	e00c      	b.n	800d5b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d596:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <osKernelInitialize+0x44>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d105      	bne.n	800d5aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d59e:	4b08      	ldr	r3, [pc, #32]	; (800d5c0 <osKernelInitialize+0x44>)
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	607b      	str	r3, [r7, #4]
 800d5a8:	e002      	b.n	800d5b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d5aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d5b0:	687b      	ldr	r3, [r7, #4]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	370c      	adds	r7, #12
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	20000e28 	.word	0x20000e28

0800d5c4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800d5ca:	f002 fca1 	bl	800ff10 <xTaskGetSchedulerState>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d004      	beq.n	800d5de <osKernelGetState+0x1a>
 800d5d4:	2b02      	cmp	r3, #2
 800d5d6:	d105      	bne.n	800d5e4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800d5d8:	2302      	movs	r3, #2
 800d5da:	607b      	str	r3, [r7, #4]
      break;
 800d5dc:	e00c      	b.n	800d5f8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	607b      	str	r3, [r7, #4]
      break;
 800d5e2:	e009      	b.n	800d5f8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800d5e4:	4b07      	ldr	r3, [pc, #28]	; (800d604 <osKernelGetState+0x40>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d102      	bne.n	800d5f2 <osKernelGetState+0x2e>
        state = osKernelReady;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800d5f0:	e001      	b.n	800d5f6 <osKernelGetState+0x32>
        state = osKernelInactive;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	607b      	str	r3, [r7, #4]
      break;
 800d5f6:	bf00      	nop
  }

  return (state);
 800d5f8:	687b      	ldr	r3, [r7, #4]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	20000e28 	.word	0x20000e28

0800d608 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d60e:	f3ef 8305 	mrs	r3, IPSR
 800d612:	603b      	str	r3, [r7, #0]
  return(result);
 800d614:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d616:	2b00      	cmp	r3, #0
 800d618:	d003      	beq.n	800d622 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d61a:	f06f 0305 	mvn.w	r3, #5
 800d61e:	607b      	str	r3, [r7, #4]
 800d620:	e010      	b.n	800d644 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d622:	4b0b      	ldr	r3, [pc, #44]	; (800d650 <osKernelStart+0x48>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b01      	cmp	r3, #1
 800d628:	d109      	bne.n	800d63e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d62a:	f7ff ff9d 	bl	800d568 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d62e:	4b08      	ldr	r3, [pc, #32]	; (800d650 <osKernelStart+0x48>)
 800d630:	2202      	movs	r2, #2
 800d632:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d634:	f001 ffee 	bl	800f614 <vTaskStartScheduler>
      stat = osOK;
 800d638:	2300      	movs	r3, #0
 800d63a:	607b      	str	r3, [r7, #4]
 800d63c:	e002      	b.n	800d644 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d642:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d644:	687b      	ldr	r3, [r7, #4]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	20000e28 	.word	0x20000e28

0800d654 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d65a:	f3ef 8305 	mrs	r3, IPSR
 800d65e:	603b      	str	r3, [r7, #0]
  return(result);
 800d660:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800d666:	f002 f901 	bl	800f86c <xTaskGetTickCountFromISR>
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	e002      	b.n	800d674 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800d66e:	f002 f8ed 	bl	800f84c <xTaskGetTickCount>
 800d672:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800d674:	687b      	ldr	r3, [r7, #4]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d67e:	b580      	push	{r7, lr}
 800d680:	b08e      	sub	sp, #56	; 0x38
 800d682:	af04      	add	r7, sp, #16
 800d684:	60f8      	str	r0, [r7, #12]
 800d686:	60b9      	str	r1, [r7, #8]
 800d688:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d68a:	2300      	movs	r3, #0
 800d68c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d68e:	f3ef 8305 	mrs	r3, IPSR
 800d692:	617b      	str	r3, [r7, #20]
  return(result);
 800d694:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d696:	2b00      	cmp	r3, #0
 800d698:	d17e      	bne.n	800d798 <osThreadNew+0x11a>
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d07b      	beq.n	800d798 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d6a0:	2380      	movs	r3, #128	; 0x80
 800d6a2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d6a4:	2318      	movs	r3, #24
 800d6a6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d6ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d045      	beq.n	800d744 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d002      	beq.n	800d6c6 <osThreadNew+0x48>
        name = attr->name;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	699b      	ldr	r3, [r3, #24]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d002      	beq.n	800d6d4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d008      	beq.n	800d6ec <osThreadNew+0x6e>
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	2b38      	cmp	r3, #56	; 0x38
 800d6de:	d805      	bhi.n	800d6ec <osThreadNew+0x6e>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	f003 0301 	and.w	r3, r3, #1
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d001      	beq.n	800d6f0 <osThreadNew+0x72>
        return (NULL);
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e054      	b.n	800d79a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	695b      	ldr	r3, [r3, #20]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d003      	beq.n	800d700 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	695b      	ldr	r3, [r3, #20]
 800d6fc:	089b      	lsrs	r3, r3, #2
 800d6fe:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	689b      	ldr	r3, [r3, #8]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00e      	beq.n	800d726 <osThreadNew+0xa8>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	2bbb      	cmp	r3, #187	; 0xbb
 800d70e:	d90a      	bls.n	800d726 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d714:	2b00      	cmp	r3, #0
 800d716:	d006      	beq.n	800d726 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <osThreadNew+0xa8>
        mem = 1;
 800d720:	2301      	movs	r3, #1
 800d722:	61bb      	str	r3, [r7, #24]
 800d724:	e010      	b.n	800d748 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10c      	bne.n	800d748 <osThreadNew+0xca>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	68db      	ldr	r3, [r3, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d108      	bne.n	800d748 <osThreadNew+0xca>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d104      	bne.n	800d748 <osThreadNew+0xca>
          mem = 0;
 800d73e:	2300      	movs	r3, #0
 800d740:	61bb      	str	r3, [r7, #24]
 800d742:	e001      	b.n	800d748 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d744:	2300      	movs	r3, #0
 800d746:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d110      	bne.n	800d770 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d756:	9202      	str	r2, [sp, #8]
 800d758:	9301      	str	r3, [sp, #4]
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	6a3a      	ldr	r2, [r7, #32]
 800d762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f001 fd69 	bl	800f23c <xTaskCreateStatic>
 800d76a:	4603      	mov	r3, r0
 800d76c:	613b      	str	r3, [r7, #16]
 800d76e:	e013      	b.n	800d798 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d110      	bne.n	800d798 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	b29a      	uxth	r2, r3
 800d77a:	f107 0310 	add.w	r3, r7, #16
 800d77e:	9301      	str	r3, [sp, #4]
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f001 fdb4 	bl	800f2f6 <xTaskCreate>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b01      	cmp	r3, #1
 800d792:	d001      	beq.n	800d798 <osThreadNew+0x11a>
            hTask = NULL;
 800d794:	2300      	movs	r3, #0
 800d796:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d798:	693b      	ldr	r3, [r7, #16]
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3728      	adds	r7, #40	; 0x28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b084      	sub	sp, #16
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7aa:	f3ef 8305 	mrs	r3, IPSR
 800d7ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d003      	beq.n	800d7be <osDelay+0x1c>
    stat = osErrorISR;
 800d7b6:	f06f 0305 	mvn.w	r3, #5
 800d7ba:	60fb      	str	r3, [r7, #12]
 800d7bc:	e007      	b.n	800d7ce <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <osDelay+0x2c>
      vTaskDelay(ticks);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f001 feef 	bl	800f5ac <vTaskDelay>
    }
  }

  return (stat);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3710      	adds	r7, #16
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b088      	sub	sp, #32
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7e4:	f3ef 8305 	mrs	r3, IPSR
 800d7e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7ea:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d174      	bne.n	800d8da <osMutexNew+0x102>
    if (attr != NULL) {
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d003      	beq.n	800d7fe <osMutexNew+0x26>
      type = attr->attr_bits;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	61bb      	str	r3, [r7, #24]
 800d7fc:	e001      	b.n	800d802 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d7fe:	2300      	movs	r3, #0
 800d800:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	f003 0301 	and.w	r3, r3, #1
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d002      	beq.n	800d812 <osMutexNew+0x3a>
      rmtx = 1U;
 800d80c:	2301      	movs	r3, #1
 800d80e:	617b      	str	r3, [r7, #20]
 800d810:	e001      	b.n	800d816 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d812:	2300      	movs	r3, #0
 800d814:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	f003 0308 	and.w	r3, r3, #8
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d15c      	bne.n	800d8da <osMutexNew+0x102>
      mem = -1;
 800d820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d824:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d015      	beq.n	800d858 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d006      	beq.n	800d842 <osMutexNew+0x6a>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	2b4f      	cmp	r3, #79	; 0x4f
 800d83a:	d902      	bls.n	800d842 <osMutexNew+0x6a>
          mem = 1;
 800d83c:	2301      	movs	r3, #1
 800d83e:	613b      	str	r3, [r7, #16]
 800d840:	e00c      	b.n	800d85c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d108      	bne.n	800d85c <osMutexNew+0x84>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d104      	bne.n	800d85c <osMutexNew+0x84>
            mem = 0;
 800d852:	2300      	movs	r3, #0
 800d854:	613b      	str	r3, [r7, #16]
 800d856:	e001      	b.n	800d85c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d858:	2300      	movs	r3, #0
 800d85a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d112      	bne.n	800d888 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d007      	beq.n	800d878 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	4619      	mov	r1, r3
 800d86e:	2004      	movs	r0, #4
 800d870:	f000 fd8f 	bl	800e392 <xQueueCreateMutexStatic>
 800d874:	61f8      	str	r0, [r7, #28]
 800d876:	e016      	b.n	800d8a6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	4619      	mov	r1, r3
 800d87e:	2001      	movs	r0, #1
 800d880:	f000 fd87 	bl	800e392 <xQueueCreateMutexStatic>
 800d884:	61f8      	str	r0, [r7, #28]
 800d886:	e00e      	b.n	800d8a6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10b      	bne.n	800d8a6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d004      	beq.n	800d89e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d894:	2004      	movs	r0, #4
 800d896:	f000 fd64 	bl	800e362 <xQueueCreateMutex>
 800d89a:	61f8      	str	r0, [r7, #28]
 800d89c:	e003      	b.n	800d8a6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d89e:	2001      	movs	r0, #1
 800d8a0:	f000 fd5f 	bl	800e362 <xQueueCreateMutex>
 800d8a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00c      	beq.n	800d8c6 <osMutexNew+0xee>
        if (attr != NULL) {
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d003      	beq.n	800d8ba <osMutexNew+0xe2>
          name = attr->name;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	60fb      	str	r3, [r7, #12]
 800d8b8:	e001      	b.n	800d8be <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d8be:	68f9      	ldr	r1, [r7, #12]
 800d8c0:	69f8      	ldr	r0, [r7, #28]
 800d8c2:	f001 fc33 	bl	800f12c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d006      	beq.n	800d8da <osMutexNew+0x102>
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d003      	beq.n	800d8da <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	f043 0301 	orr.w	r3, r3, #1
 800d8d8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d8da:	69fb      	ldr	r3, [r7, #28]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3720      	adds	r7, #32
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b086      	sub	sp, #24
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f023 0301 	bic.w	r3, r3, #1
 800d8f4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f003 0301 	and.w	r3, r3, #1
 800d8fc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d8fe:	2300      	movs	r3, #0
 800d900:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d902:	f3ef 8305 	mrs	r3, IPSR
 800d906:	60bb      	str	r3, [r7, #8]
  return(result);
 800d908:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d90e:	f06f 0305 	mvn.w	r3, #5
 800d912:	617b      	str	r3, [r7, #20]
 800d914:	e02c      	b.n	800d970 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d103      	bne.n	800d924 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d91c:	f06f 0303 	mvn.w	r3, #3
 800d920:	617b      	str	r3, [r7, #20]
 800d922:	e025      	b.n	800d970 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d011      	beq.n	800d94e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d92a:	6839      	ldr	r1, [r7, #0]
 800d92c:	6938      	ldr	r0, [r7, #16]
 800d92e:	f000 fd7f 	bl	800e430 <xQueueTakeMutexRecursive>
 800d932:	4603      	mov	r3, r0
 800d934:	2b01      	cmp	r3, #1
 800d936:	d01b      	beq.n	800d970 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d003      	beq.n	800d946 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d93e:	f06f 0301 	mvn.w	r3, #1
 800d942:	617b      	str	r3, [r7, #20]
 800d944:	e014      	b.n	800d970 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d946:	f06f 0302 	mvn.w	r3, #2
 800d94a:	617b      	str	r3, [r7, #20]
 800d94c:	e010      	b.n	800d970 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	6938      	ldr	r0, [r7, #16]
 800d952:	f001 f913 	bl	800eb7c <xQueueSemaphoreTake>
 800d956:	4603      	mov	r3, r0
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d009      	beq.n	800d970 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d003      	beq.n	800d96a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d962:	f06f 0301 	mvn.w	r3, #1
 800d966:	617b      	str	r3, [r7, #20]
 800d968:	e002      	b.n	800d970 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d96a:	f06f 0302 	mvn.w	r3, #2
 800d96e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d970:	697b      	ldr	r3, [r7, #20]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b086      	sub	sp, #24
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f023 0301 	bic.w	r3, r3, #1
 800d988:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f003 0301 	and.w	r3, r3, #1
 800d990:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d992:	2300      	movs	r3, #0
 800d994:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d996:	f3ef 8305 	mrs	r3, IPSR
 800d99a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d99c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d003      	beq.n	800d9aa <osMutexRelease+0x30>
    stat = osErrorISR;
 800d9a2:	f06f 0305 	mvn.w	r3, #5
 800d9a6:	617b      	str	r3, [r7, #20]
 800d9a8:	e01f      	b.n	800d9ea <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d103      	bne.n	800d9b8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d9b0:	f06f 0303 	mvn.w	r3, #3
 800d9b4:	617b      	str	r3, [r7, #20]
 800d9b6:	e018      	b.n	800d9ea <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d009      	beq.n	800d9d2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d9be:	6938      	ldr	r0, [r7, #16]
 800d9c0:	f000 fd02 	bl	800e3c8 <xQueueGiveMutexRecursive>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d00f      	beq.n	800d9ea <osMutexRelease+0x70>
        stat = osErrorResource;
 800d9ca:	f06f 0302 	mvn.w	r3, #2
 800d9ce:	617b      	str	r3, [r7, #20]
 800d9d0:	e00b      	b.n	800d9ea <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	6938      	ldr	r0, [r7, #16]
 800d9da:	f000 fdc9 	bl	800e570 <xQueueGenericSend>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d002      	beq.n	800d9ea <osMutexRelease+0x70>
        stat = osErrorResource;
 800d9e4:	f06f 0302 	mvn.w	r3, #2
 800d9e8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d9ea:	697b      	ldr	r3, [r7, #20]
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3718      	adds	r7, #24
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b086      	sub	sp, #24
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f023 0301 	bic.w	r3, r3, #1
 800da02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da04:	f3ef 8305 	mrs	r3, IPSR
 800da08:	60fb      	str	r3, [r7, #12]
  return(result);
 800da0a:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d003      	beq.n	800da18 <osMutexDelete+0x24>
    stat = osErrorISR;
 800da10:	f06f 0305 	mvn.w	r3, #5
 800da14:	617b      	str	r3, [r7, #20]
 800da16:	e00e      	b.n	800da36 <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d103      	bne.n	800da26 <osMutexDelete+0x32>
    stat = osErrorParameter;
 800da1e:	f06f 0303 	mvn.w	r3, #3
 800da22:	617b      	str	r3, [r7, #20]
 800da24:	e007      	b.n	800da36 <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800da26:	6938      	ldr	r0, [r7, #16]
 800da28:	f001 fbaa 	bl	800f180 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800da2c:	2300      	movs	r3, #0
 800da2e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 800da30:	6938      	ldr	r0, [r7, #16]
 800da32:	f001 fa2f 	bl	800ee94 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800da36:	697b      	ldr	r3, [r7, #20]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3718      	adds	r7, #24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <osSemaphoreNew>:
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800da40:	b580      	push	{r7, lr}
 800da42:	b08a      	sub	sp, #40	; 0x28
 800da44:	af02      	add	r7, sp, #8
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800da4c:	2300      	movs	r3, #0
 800da4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da50:	f3ef 8305 	mrs	r3, IPSR
 800da54:	613b      	str	r3, [r7, #16]
  return(result);
 800da56:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d175      	bne.n	800db48 <osSemaphoreNew+0x108>
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d072      	beq.n	800db48 <osSemaphoreNew+0x108>
 800da62:	68ba      	ldr	r2, [r7, #8]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	429a      	cmp	r2, r3
 800da68:	d86e      	bhi.n	800db48 <osSemaphoreNew+0x108>
    mem = -1;
 800da6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d015      	beq.n	800daa2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d006      	beq.n	800da8c <osSemaphoreNew+0x4c>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	2b4f      	cmp	r3, #79	; 0x4f
 800da84:	d902      	bls.n	800da8c <osSemaphoreNew+0x4c>
        mem = 1;
 800da86:	2301      	movs	r3, #1
 800da88:	61bb      	str	r3, [r7, #24]
 800da8a:	e00c      	b.n	800daa6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d108      	bne.n	800daa6 <osSemaphoreNew+0x66>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d104      	bne.n	800daa6 <osSemaphoreNew+0x66>
          mem = 0;
 800da9c:	2300      	movs	r3, #0
 800da9e:	61bb      	str	r3, [r7, #24]
 800daa0:	e001      	b.n	800daa6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800daa2:	2300      	movs	r3, #0
 800daa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800daac:	d04c      	beq.n	800db48 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d128      	bne.n	800db06 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d10a      	bne.n	800dad0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	2203      	movs	r2, #3
 800dac0:	9200      	str	r2, [sp, #0]
 800dac2:	2200      	movs	r2, #0
 800dac4:	2100      	movs	r1, #0
 800dac6:	2001      	movs	r0, #1
 800dac8:	f000 fb5c 	bl	800e184 <xQueueGenericCreateStatic>
 800dacc:	61f8      	str	r0, [r7, #28]
 800dace:	e005      	b.n	800dadc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800dad0:	2203      	movs	r2, #3
 800dad2:	2100      	movs	r1, #0
 800dad4:	2001      	movs	r0, #1
 800dad6:	f000 fbcd 	bl	800e274 <xQueueGenericCreate>
 800dada:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d022      	beq.n	800db28 <osSemaphoreNew+0xe8>
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d01f      	beq.n	800db28 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dae8:	2300      	movs	r3, #0
 800daea:	2200      	movs	r2, #0
 800daec:	2100      	movs	r1, #0
 800daee:	69f8      	ldr	r0, [r7, #28]
 800daf0:	f000 fd3e 	bl	800e570 <xQueueGenericSend>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d016      	beq.n	800db28 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800dafa:	69f8      	ldr	r0, [r7, #28]
 800dafc:	f001 f9ca 	bl	800ee94 <vQueueDelete>
            hSemaphore = NULL;
 800db00:	2300      	movs	r3, #0
 800db02:	61fb      	str	r3, [r7, #28]
 800db04:	e010      	b.n	800db28 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d108      	bne.n	800db1e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	461a      	mov	r2, r3
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f000 fcc1 	bl	800e49c <xQueueCreateCountingSemaphoreStatic>
 800db1a:	61f8      	str	r0, [r7, #28]
 800db1c:	e004      	b.n	800db28 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800db1e:	68b9      	ldr	r1, [r7, #8]
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f000 fcf2 	bl	800e50a <xQueueCreateCountingSemaphore>
 800db26:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d00c      	beq.n	800db48 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d003      	beq.n	800db3c <osSemaphoreNew+0xfc>
          name = attr->name;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	617b      	str	r3, [r7, #20]
 800db3a:	e001      	b.n	800db40 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800db3c:	2300      	movs	r3, #0
 800db3e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800db40:	6979      	ldr	r1, [r7, #20]
 800db42:	69f8      	ldr	r0, [r7, #28]
 800db44:	f001 faf2 	bl	800f12c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800db48:	69fb      	ldr	r3, [r7, #28]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3720      	adds	r7, #32
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
	...

0800db54 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800db54:	b580      	push	{r7, lr}
 800db56:	b086      	sub	sp, #24
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800db62:	2300      	movs	r3, #0
 800db64:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d103      	bne.n	800db74 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800db6c:	f06f 0303 	mvn.w	r3, #3
 800db70:	617b      	str	r3, [r7, #20]
 800db72:	e039      	b.n	800dbe8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db74:	f3ef 8305 	mrs	r3, IPSR
 800db78:	60fb      	str	r3, [r7, #12]
  return(result);
 800db7a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d022      	beq.n	800dbc6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d003      	beq.n	800db8e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800db86:	f06f 0303 	mvn.w	r3, #3
 800db8a:	617b      	str	r3, [r7, #20]
 800db8c:	e02c      	b.n	800dbe8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800db8e:	2300      	movs	r3, #0
 800db90:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800db92:	f107 0308 	add.w	r3, r7, #8
 800db96:	461a      	mov	r2, r3
 800db98:	2100      	movs	r1, #0
 800db9a:	6938      	ldr	r0, [r7, #16]
 800db9c:	f001 f8fa 	bl	800ed94 <xQueueReceiveFromISR>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d003      	beq.n	800dbae <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800dba6:	f06f 0302 	mvn.w	r3, #2
 800dbaa:	617b      	str	r3, [r7, #20]
 800dbac:	e01c      	b.n	800dbe8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d019      	beq.n	800dbe8 <osSemaphoreAcquire+0x94>
 800dbb4:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <osSemaphoreAcquire+0xa0>)
 800dbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	f3bf 8f6f 	isb	sy
 800dbc4:	e010      	b.n	800dbe8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800dbc6:	6839      	ldr	r1, [r7, #0]
 800dbc8:	6938      	ldr	r0, [r7, #16]
 800dbca:	f000 ffd7 	bl	800eb7c <xQueueSemaphoreTake>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d009      	beq.n	800dbe8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d003      	beq.n	800dbe2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800dbda:	f06f 0301 	mvn.w	r3, #1
 800dbde:	617b      	str	r3, [r7, #20]
 800dbe0:	e002      	b.n	800dbe8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800dbe2:	f06f 0302 	mvn.w	r3, #2
 800dbe6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800dbe8:	697b      	ldr	r3, [r7, #20]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	e000ed04 	.word	0xe000ed04

0800dbf8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b086      	sub	sp, #24
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dc04:	2300      	movs	r3, #0
 800dc06:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d103      	bne.n	800dc16 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800dc0e:	f06f 0303 	mvn.w	r3, #3
 800dc12:	617b      	str	r3, [r7, #20]
 800dc14:	e02c      	b.n	800dc70 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc16:	f3ef 8305 	mrs	r3, IPSR
 800dc1a:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d01a      	beq.n	800dc58 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800dc22:	2300      	movs	r3, #0
 800dc24:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dc26:	f107 0308 	add.w	r3, r7, #8
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6938      	ldr	r0, [r7, #16]
 800dc2e:	f000 fe38 	bl	800e8a2 <xQueueGiveFromISR>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d003      	beq.n	800dc40 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800dc38:	f06f 0302 	mvn.w	r3, #2
 800dc3c:	617b      	str	r3, [r7, #20]
 800dc3e:	e017      	b.n	800dc70 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d014      	beq.n	800dc70 <osSemaphoreRelease+0x78>
 800dc46:	4b0d      	ldr	r3, [pc, #52]	; (800dc7c <osSemaphoreRelease+0x84>)
 800dc48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	f3bf 8f4f 	dsb	sy
 800dc52:	f3bf 8f6f 	isb	sy
 800dc56:	e00b      	b.n	800dc70 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dc58:	2300      	movs	r3, #0
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	6938      	ldr	r0, [r7, #16]
 800dc60:	f000 fc86 	bl	800e570 <xQueueGenericSend>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d002      	beq.n	800dc70 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800dc6a:	f06f 0302 	mvn.w	r3, #2
 800dc6e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800dc70:	697b      	ldr	r3, [r7, #20]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3718      	adds	r7, #24
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	e000ed04 	.word	0xe000ed04

0800dc80 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b08a      	sub	sp, #40	; 0x28
 800dc84:	af02      	add	r7, sp, #8
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc90:	f3ef 8305 	mrs	r3, IPSR
 800dc94:	613b      	str	r3, [r7, #16]
  return(result);
 800dc96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d15f      	bne.n	800dd5c <osMessageQueueNew+0xdc>
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d05c      	beq.n	800dd5c <osMessageQueueNew+0xdc>
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d059      	beq.n	800dd5c <osMessageQueueNew+0xdc>
    mem = -1;
 800dca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d029      	beq.n	800dd08 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d012      	beq.n	800dce2 <osMessageQueueNew+0x62>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	2b4f      	cmp	r3, #79	; 0x4f
 800dcc2:	d90e      	bls.n	800dce2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d00a      	beq.n	800dce2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	695a      	ldr	r2, [r3, #20]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	68b9      	ldr	r1, [r7, #8]
 800dcd4:	fb01 f303 	mul.w	r3, r1, r3
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d302      	bcc.n	800dce2 <osMessageQueueNew+0x62>
        mem = 1;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	61bb      	str	r3, [r7, #24]
 800dce0:	e014      	b.n	800dd0c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d110      	bne.n	800dd0c <osMessageQueueNew+0x8c>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10c      	bne.n	800dd0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d108      	bne.n	800dd0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	695b      	ldr	r3, [r3, #20]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d104      	bne.n	800dd0c <osMessageQueueNew+0x8c>
          mem = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	61bb      	str	r3, [r7, #24]
 800dd06:	e001      	b.n	800dd0c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d10b      	bne.n	800dd2a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	691a      	ldr	r2, [r3, #16]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	9100      	str	r1, [sp, #0]
 800dd1e:	68b9      	ldr	r1, [r7, #8]
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f000 fa2f 	bl	800e184 <xQueueGenericCreateStatic>
 800dd26:	61f8      	str	r0, [r7, #28]
 800dd28:	e008      	b.n	800dd3c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d105      	bne.n	800dd3c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dd30:	2200      	movs	r2, #0
 800dd32:	68b9      	ldr	r1, [r7, #8]
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f000 fa9d 	bl	800e274 <xQueueGenericCreate>
 800dd3a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00c      	beq.n	800dd5c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d003      	beq.n	800dd50 <osMessageQueueNew+0xd0>
        name = attr->name;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	617b      	str	r3, [r7, #20]
 800dd4e:	e001      	b.n	800dd54 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dd50:	2300      	movs	r3, #0
 800dd52:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dd54:	6979      	ldr	r1, [r7, #20]
 800dd56:	69f8      	ldr	r0, [r7, #28]
 800dd58:	f001 f9e8 	bl	800f12c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dd5c:	69fb      	ldr	r3, [r7, #28]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3720      	adds	r7, #32
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
	...

0800dd68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b088      	sub	sp, #32
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	603b      	str	r3, [r7, #0]
 800dd74:	4613      	mov	r3, r2
 800dd76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd80:	f3ef 8305 	mrs	r3, IPSR
 800dd84:	617b      	str	r3, [r7, #20]
  return(result);
 800dd86:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d028      	beq.n	800ddde <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d005      	beq.n	800dd9e <osMessageQueuePut+0x36>
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d002      	beq.n	800dd9e <osMessageQueuePut+0x36>
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d003      	beq.n	800dda6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dd9e:	f06f 0303 	mvn.w	r3, #3
 800dda2:	61fb      	str	r3, [r7, #28]
 800dda4:	e038      	b.n	800de18 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dda6:	2300      	movs	r3, #0
 800dda8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ddaa:	f107 0210 	add.w	r2, r7, #16
 800ddae:	2300      	movs	r3, #0
 800ddb0:	68b9      	ldr	r1, [r7, #8]
 800ddb2:	69b8      	ldr	r0, [r7, #24]
 800ddb4:	f000 fcda 	bl	800e76c <xQueueGenericSendFromISR>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d003      	beq.n	800ddc6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ddbe:	f06f 0302 	mvn.w	r3, #2
 800ddc2:	61fb      	str	r3, [r7, #28]
 800ddc4:	e028      	b.n	800de18 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d025      	beq.n	800de18 <osMessageQueuePut+0xb0>
 800ddcc:	4b15      	ldr	r3, [pc, #84]	; (800de24 <osMessageQueuePut+0xbc>)
 800ddce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	f3bf 8f4f 	dsb	sy
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	e01c      	b.n	800de18 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d002      	beq.n	800ddea <osMessageQueuePut+0x82>
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d103      	bne.n	800ddf2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ddea:	f06f 0303 	mvn.w	r3, #3
 800ddee:	61fb      	str	r3, [r7, #28]
 800ddf0:	e012      	b.n	800de18 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	68b9      	ldr	r1, [r7, #8]
 800ddf8:	69b8      	ldr	r0, [r7, #24]
 800ddfa:	f000 fbb9 	bl	800e570 <xQueueGenericSend>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b01      	cmp	r3, #1
 800de02:	d009      	beq.n	800de18 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d003      	beq.n	800de12 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800de0a:	f06f 0301 	mvn.w	r3, #1
 800de0e:	61fb      	str	r3, [r7, #28]
 800de10:	e002      	b.n	800de18 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800de12:	f06f 0302 	mvn.w	r3, #2
 800de16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800de18:	69fb      	ldr	r3, [r7, #28]
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3720      	adds	r7, #32
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	e000ed04 	.word	0xe000ed04

0800de28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800de28:	b580      	push	{r7, lr}
 800de2a:	b088      	sub	sp, #32
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
 800de34:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800de3a:	2300      	movs	r3, #0
 800de3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de3e:	f3ef 8305 	mrs	r3, IPSR
 800de42:	617b      	str	r3, [r7, #20]
  return(result);
 800de44:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800de46:	2b00      	cmp	r3, #0
 800de48:	d028      	beq.n	800de9c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d005      	beq.n	800de5c <osMessageQueueGet+0x34>
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d002      	beq.n	800de5c <osMessageQueueGet+0x34>
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d003      	beq.n	800de64 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800de5c:	f06f 0303 	mvn.w	r3, #3
 800de60:	61fb      	str	r3, [r7, #28]
 800de62:	e037      	b.n	800ded4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800de64:	2300      	movs	r3, #0
 800de66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800de68:	f107 0310 	add.w	r3, r7, #16
 800de6c:	461a      	mov	r2, r3
 800de6e:	68b9      	ldr	r1, [r7, #8]
 800de70:	69b8      	ldr	r0, [r7, #24]
 800de72:	f000 ff8f 	bl	800ed94 <xQueueReceiveFromISR>
 800de76:	4603      	mov	r3, r0
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d003      	beq.n	800de84 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800de7c:	f06f 0302 	mvn.w	r3, #2
 800de80:	61fb      	str	r3, [r7, #28]
 800de82:	e027      	b.n	800ded4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d024      	beq.n	800ded4 <osMessageQueueGet+0xac>
 800de8a:	4b15      	ldr	r3, [pc, #84]	; (800dee0 <osMessageQueueGet+0xb8>)
 800de8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de90:	601a      	str	r2, [r3, #0]
 800de92:	f3bf 8f4f 	dsb	sy
 800de96:	f3bf 8f6f 	isb	sy
 800de9a:	e01b      	b.n	800ded4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d002      	beq.n	800dea8 <osMessageQueueGet+0x80>
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d103      	bne.n	800deb0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800dea8:	f06f 0303 	mvn.w	r3, #3
 800deac:	61fb      	str	r3, [r7, #28]
 800deae:	e011      	b.n	800ded4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800deb0:	683a      	ldr	r2, [r7, #0]
 800deb2:	68b9      	ldr	r1, [r7, #8]
 800deb4:	69b8      	ldr	r0, [r7, #24]
 800deb6:	f000 fd81 	bl	800e9bc <xQueueReceive>
 800deba:	4603      	mov	r3, r0
 800debc:	2b01      	cmp	r3, #1
 800debe:	d009      	beq.n	800ded4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d003      	beq.n	800dece <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800dec6:	f06f 0301 	mvn.w	r3, #1
 800deca:	61fb      	str	r3, [r7, #28]
 800decc:	e002      	b.n	800ded4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800dece:	f06f 0302 	mvn.w	r3, #2
 800ded2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ded4:	69fb      	ldr	r3, [r7, #28]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3720      	adds	r7, #32
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	e000ed04 	.word	0xe000ed04

0800dee4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	4a07      	ldr	r2, [pc, #28]	; (800df10 <vApplicationGetIdleTaskMemory+0x2c>)
 800def4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	4a06      	ldr	r2, [pc, #24]	; (800df14 <vApplicationGetIdleTaskMemory+0x30>)
 800defa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2280      	movs	r2, #128	; 0x80
 800df00:	601a      	str	r2, [r3, #0]
}
 800df02:	bf00      	nop
 800df04:	3714      	adds	r7, #20
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	20000e2c 	.word	0x20000e2c
 800df14:	20000ee8 	.word	0x20000ee8

0800df18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	4a07      	ldr	r2, [pc, #28]	; (800df44 <vApplicationGetTimerTaskMemory+0x2c>)
 800df28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	4a06      	ldr	r2, [pc, #24]	; (800df48 <vApplicationGetTimerTaskMemory+0x30>)
 800df2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df36:	601a      	str	r2, [r3, #0]
}
 800df38:	bf00      	nop
 800df3a:	3714      	adds	r7, #20
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	200010e8 	.word	0x200010e8
 800df48:	200011a4 	.word	0x200011a4

0800df4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f103 0208 	add.w	r2, r3, #8
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f103 0208 	add.w	r2, r3, #8
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f103 0208 	add.w	r2, r3, #8
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df80:	bf00      	nop
 800df82:	370c      	adds	r7, #12
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2200      	movs	r2, #0
 800df98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df9a:	bf00      	nop
 800df9c:	370c      	adds	r7, #12
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr

0800dfa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfa6:	b480      	push	{r7}
 800dfa8:	b085      	sub	sp, #20
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	689a      	ldr	r2, [r3, #8]
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	683a      	ldr	r2, [r7, #0]
 800dfca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	683a      	ldr	r2, [r7, #0]
 800dfd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	1c5a      	adds	r2, r3, #1
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	601a      	str	r2, [r3, #0]
}
 800dfe2:	bf00      	nop
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr

0800dfee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfee:	b480      	push	{r7}
 800dff0:	b085      	sub	sp, #20
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e004:	d103      	bne.n	800e00e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	691b      	ldr	r3, [r3, #16]
 800e00a:	60fb      	str	r3, [r7, #12]
 800e00c:	e00c      	b.n	800e028 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	3308      	adds	r3, #8
 800e012:	60fb      	str	r3, [r7, #12]
 800e014:	e002      	b.n	800e01c <vListInsert+0x2e>
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	60fb      	str	r3, [r7, #12]
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	429a      	cmp	r2, r3
 800e026:	d2f6      	bcs.n	800e016 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	685a      	ldr	r2, [r3, #4]
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	68fa      	ldr	r2, [r7, #12]
 800e03c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	683a      	ldr	r2, [r7, #0]
 800e042:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	1c5a      	adds	r2, r3, #1
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	601a      	str	r2, [r3, #0]
}
 800e054:	bf00      	nop
 800e056:	3714      	adds	r7, #20
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	6892      	ldr	r2, [r2, #8]
 800e076:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	689b      	ldr	r3, [r3, #8]
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	6852      	ldr	r2, [r2, #4]
 800e080:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d103      	bne.n	800e094 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	689a      	ldr	r2, [r3, #8]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	1e5a      	subs	r2, r3, #1
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10a      	bne.n	800e0de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0cc:	f383 8811 	msr	BASEPRI, r3
 800e0d0:	f3bf 8f6f 	isb	sy
 800e0d4:	f3bf 8f4f 	dsb	sy
 800e0d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e0da:	bf00      	nop
 800e0dc:	e7fe      	b.n	800e0dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e0de:	f002 fd71 	bl	8010bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ea:	68f9      	ldr	r1, [r7, #12]
 800e0ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e0ee:	fb01 f303 	mul.w	r3, r1, r3
 800e0f2:	441a      	add	r2, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e10e:	3b01      	subs	r3, #1
 800e110:	68f9      	ldr	r1, [r7, #12]
 800e112:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e114:	fb01 f303 	mul.w	r3, r1, r3
 800e118:	441a      	add	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	22ff      	movs	r2, #255	; 0xff
 800e122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	22ff      	movs	r2, #255	; 0xff
 800e12a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d114      	bne.n	800e15e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	691b      	ldr	r3, [r3, #16]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d01a      	beq.n	800e172 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	3310      	adds	r3, #16
 800e140:	4618      	mov	r0, r3
 800e142:	f001 fd13 	bl	800fb6c <xTaskRemoveFromEventList>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d012      	beq.n	800e172 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e14c:	4b0c      	ldr	r3, [pc, #48]	; (800e180 <xQueueGenericReset+0xcc>)
 800e14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e152:	601a      	str	r2, [r3, #0]
 800e154:	f3bf 8f4f 	dsb	sy
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	e009      	b.n	800e172 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	3310      	adds	r3, #16
 800e162:	4618      	mov	r0, r3
 800e164:	f7ff fef2 	bl	800df4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	3324      	adds	r3, #36	; 0x24
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7ff feed 	bl	800df4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e172:	f002 fd57 	bl	8010c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e176:	2301      	movs	r3, #1
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	e000ed04 	.word	0xe000ed04

0800e184 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08e      	sub	sp, #56	; 0x38
 800e188:	af02      	add	r7, sp, #8
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	607a      	str	r2, [r7, #4]
 800e190:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d10a      	bne.n	800e1ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19c:	f383 8811 	msr	BASEPRI, r3
 800e1a0:	f3bf 8f6f 	isb	sy
 800e1a4:	f3bf 8f4f 	dsb	sy
 800e1a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e1aa:	bf00      	nop
 800e1ac:	e7fe      	b.n	800e1ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d10a      	bne.n	800e1ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e1c6:	bf00      	nop
 800e1c8:	e7fe      	b.n	800e1c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d002      	beq.n	800e1d6 <xQueueGenericCreateStatic+0x52>
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d001      	beq.n	800e1da <xQueueGenericCreateStatic+0x56>
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	e000      	b.n	800e1dc <xQueueGenericCreateStatic+0x58>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d10a      	bne.n	800e1f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e4:	f383 8811 	msr	BASEPRI, r3
 800e1e8:	f3bf 8f6f 	isb	sy
 800e1ec:	f3bf 8f4f 	dsb	sy
 800e1f0:	623b      	str	r3, [r7, #32]
}
 800e1f2:	bf00      	nop
 800e1f4:	e7fe      	b.n	800e1f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d102      	bne.n	800e202 <xQueueGenericCreateStatic+0x7e>
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d101      	bne.n	800e206 <xQueueGenericCreateStatic+0x82>
 800e202:	2301      	movs	r3, #1
 800e204:	e000      	b.n	800e208 <xQueueGenericCreateStatic+0x84>
 800e206:	2300      	movs	r3, #0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d10a      	bne.n	800e222 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	61fb      	str	r3, [r7, #28]
}
 800e21e:	bf00      	nop
 800e220:	e7fe      	b.n	800e220 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e222:	2350      	movs	r3, #80	; 0x50
 800e224:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	2b50      	cmp	r3, #80	; 0x50
 800e22a:	d00a      	beq.n	800e242 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e230:	f383 8811 	msr	BASEPRI, r3
 800e234:	f3bf 8f6f 	isb	sy
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	61bb      	str	r3, [r7, #24]
}
 800e23e:	bf00      	nop
 800e240:	e7fe      	b.n	800e240 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e242:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00d      	beq.n	800e26a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e250:	2201      	movs	r2, #1
 800e252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e256:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	4613      	mov	r3, r2
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	68b9      	ldr	r1, [r7, #8]
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f000 f83f 	bl	800e2e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3730      	adds	r7, #48	; 0x30
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e274:	b580      	push	{r7, lr}
 800e276:	b08a      	sub	sp, #40	; 0x28
 800e278:	af02      	add	r7, sp, #8
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	4613      	mov	r3, r2
 800e280:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d10a      	bne.n	800e29e <xQueueGenericCreate+0x2a>
	__asm volatile
 800e288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28c:	f383 8811 	msr	BASEPRI, r3
 800e290:	f3bf 8f6f 	isb	sy
 800e294:	f3bf 8f4f 	dsb	sy
 800e298:	613b      	str	r3, [r7, #16]
}
 800e29a:	bf00      	nop
 800e29c:	e7fe      	b.n	800e29c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	fb02 f303 	mul.w	r3, r2, r3
 800e2a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	3350      	adds	r3, #80	; 0x50
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f002 fdab 	bl	8010e08 <pvPortMalloc>
 800e2b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e2b4:	69bb      	ldr	r3, [r7, #24]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d011      	beq.n	800e2de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	3350      	adds	r3, #80	; 0x50
 800e2c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e2cc:	79fa      	ldrb	r2, [r7, #7]
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	697a      	ldr	r2, [r7, #20]
 800e2d6:	68b9      	ldr	r1, [r7, #8]
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f000 f805 	bl	800e2e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e2de:	69bb      	ldr	r3, [r7, #24]
	}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3720      	adds	r7, #32
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
 800e2f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d103      	bne.n	800e304 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	69ba      	ldr	r2, [r7, #24]
 800e300:	601a      	str	r2, [r3, #0]
 800e302:	e002      	b.n	800e30a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e304:	69bb      	ldr	r3, [r7, #24]
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	68fa      	ldr	r2, [r7, #12]
 800e30e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e310:	69bb      	ldr	r3, [r7, #24]
 800e312:	68ba      	ldr	r2, [r7, #8]
 800e314:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e316:	2101      	movs	r1, #1
 800e318:	69b8      	ldr	r0, [r7, #24]
 800e31a:	f7ff fecb 	bl	800e0b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	78fa      	ldrb	r2, [r7, #3]
 800e322:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e326:	bf00      	nop
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b082      	sub	sp, #8
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00e      	beq.n	800e35a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2200      	movs	r2, #0
 800e340:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e34e:	2300      	movs	r3, #0
 800e350:	2200      	movs	r2, #0
 800e352:	2100      	movs	r1, #0
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 f90b 	bl	800e570 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e35a:	bf00      	nop
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e362:	b580      	push	{r7, lr}
 800e364:	b086      	sub	sp, #24
 800e366:	af00      	add	r7, sp, #0
 800e368:	4603      	mov	r3, r0
 800e36a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e36c:	2301      	movs	r3, #1
 800e36e:	617b      	str	r3, [r7, #20]
 800e370:	2300      	movs	r3, #0
 800e372:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e374:	79fb      	ldrb	r3, [r7, #7]
 800e376:	461a      	mov	r2, r3
 800e378:	6939      	ldr	r1, [r7, #16]
 800e37a:	6978      	ldr	r0, [r7, #20]
 800e37c:	f7ff ff7a 	bl	800e274 <xQueueGenericCreate>
 800e380:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f7ff ffd3 	bl	800e32e <prvInitialiseMutex>

		return xNewQueue;
 800e388:	68fb      	ldr	r3, [r7, #12]
	}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3718      	adds	r7, #24
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e392:	b580      	push	{r7, lr}
 800e394:	b088      	sub	sp, #32
 800e396:	af02      	add	r7, sp, #8
 800e398:	4603      	mov	r3, r0
 800e39a:	6039      	str	r1, [r7, #0]
 800e39c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	617b      	str	r3, [r7, #20]
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e3a6:	79fb      	ldrb	r3, [r7, #7]
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	6939      	ldr	r1, [r7, #16]
 800e3b0:	6978      	ldr	r0, [r7, #20]
 800e3b2:	f7ff fee7 	bl	800e184 <xQueueGenericCreateStatic>
 800e3b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e3b8:	68f8      	ldr	r0, [r7, #12]
 800e3ba:	f7ff ffb8 	bl	800e32e <prvInitialiseMutex>

		return xNewQueue;
 800e3be:	68fb      	ldr	r3, [r7, #12]
	}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3718      	adds	r7, #24
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e3c8:	b590      	push	{r4, r7, lr}
 800e3ca:	b087      	sub	sp, #28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d10a      	bne.n	800e3f0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800e3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3de:	f383 8811 	msr	BASEPRI, r3
 800e3e2:	f3bf 8f6f 	isb	sy
 800e3e6:	f3bf 8f4f 	dsb	sy
 800e3ea:	60fb      	str	r3, [r7, #12]
}
 800e3ec:	bf00      	nop
 800e3ee:	e7fe      	b.n	800e3ee <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	689c      	ldr	r4, [r3, #8]
 800e3f4:	f001 fd7c 	bl	800fef0 <xTaskGetCurrentTaskHandle>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	429c      	cmp	r4, r3
 800e3fc:	d111      	bne.n	800e422 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	1e5a      	subs	r2, r3, #1
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	68db      	ldr	r3, [r3, #12]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d105      	bne.n	800e41c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e410:	2300      	movs	r3, #0
 800e412:	2200      	movs	r2, #0
 800e414:	2100      	movs	r1, #0
 800e416:	6938      	ldr	r0, [r7, #16]
 800e418:	f000 f8aa 	bl	800e570 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e41c:	2301      	movs	r3, #1
 800e41e:	617b      	str	r3, [r7, #20]
 800e420:	e001      	b.n	800e426 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e422:	2300      	movs	r3, #0
 800e424:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e426:	697b      	ldr	r3, [r7, #20]
	}
 800e428:	4618      	mov	r0, r3
 800e42a:	371c      	adds	r7, #28
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd90      	pop	{r4, r7, pc}

0800e430 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e430:	b590      	push	{r4, r7, lr}
 800e432:	b087      	sub	sp, #28
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d10a      	bne.n	800e45a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	60fb      	str	r3, [r7, #12]
}
 800e456:	bf00      	nop
 800e458:	e7fe      	b.n	800e458 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	689c      	ldr	r4, [r3, #8]
 800e45e:	f001 fd47 	bl	800fef0 <xTaskGetCurrentTaskHandle>
 800e462:	4603      	mov	r3, r0
 800e464:	429c      	cmp	r4, r3
 800e466:	d107      	bne.n	800e478 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	1c5a      	adds	r2, r3, #1
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e472:	2301      	movs	r3, #1
 800e474:	617b      	str	r3, [r7, #20]
 800e476:	e00c      	b.n	800e492 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e478:	6839      	ldr	r1, [r7, #0]
 800e47a:	6938      	ldr	r0, [r7, #16]
 800e47c:	f000 fb7e 	bl	800eb7c <xQueueSemaphoreTake>
 800e480:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d004      	beq.n	800e492 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e492:	697b      	ldr	r3, [r7, #20]
	}
 800e494:	4618      	mov	r0, r3
 800e496:	371c      	adds	r7, #28
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd90      	pop	{r4, r7, pc}

0800e49c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b08a      	sub	sp, #40	; 0x28
 800e4a0:	af02      	add	r7, sp, #8
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d10a      	bne.n	800e4c4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	61bb      	str	r3, [r7, #24]
}
 800e4c0:	bf00      	nop
 800e4c2:	e7fe      	b.n	800e4c2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d90a      	bls.n	800e4e2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d0:	f383 8811 	msr	BASEPRI, r3
 800e4d4:	f3bf 8f6f 	isb	sy
 800e4d8:	f3bf 8f4f 	dsb	sy
 800e4dc:	617b      	str	r3, [r7, #20]
}
 800e4de:	bf00      	nop
 800e4e0:	e7fe      	b.n	800e4e0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e4e2:	2302      	movs	r3, #2
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f7ff fe49 	bl	800e184 <xQueueGenericCreateStatic>
 800e4f2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d002      	beq.n	800e500 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	68ba      	ldr	r2, [r7, #8]
 800e4fe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e500:	69fb      	ldr	r3, [r7, #28]
	}
 800e502:	4618      	mov	r0, r3
 800e504:	3720      	adds	r7, #32
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b086      	sub	sp, #24
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d10a      	bne.n	800e530 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51e:	f383 8811 	msr	BASEPRI, r3
 800e522:	f3bf 8f6f 	isb	sy
 800e526:	f3bf 8f4f 	dsb	sy
 800e52a:	613b      	str	r3, [r7, #16]
}
 800e52c:	bf00      	nop
 800e52e:	e7fe      	b.n	800e52e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e530:	683a      	ldr	r2, [r7, #0]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	429a      	cmp	r2, r3
 800e536:	d90a      	bls.n	800e54e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	60fb      	str	r3, [r7, #12]
}
 800e54a:	bf00      	nop
 800e54c:	e7fe      	b.n	800e54c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e54e:	2202      	movs	r2, #2
 800e550:	2100      	movs	r1, #0
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7ff fe8e 	bl	800e274 <xQueueGenericCreate>
 800e558:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	683a      	ldr	r2, [r7, #0]
 800e564:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e566:	697b      	ldr	r3, [r7, #20]
	}
 800e568:	4618      	mov	r0, r3
 800e56a:	3718      	adds	r7, #24
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b08e      	sub	sp, #56	; 0x38
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
 800e57c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e57e:	2300      	movs	r3, #0
 800e580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d10a      	bne.n	800e5a2 <xQueueGenericSend+0x32>
	__asm volatile
 800e58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e590:	f383 8811 	msr	BASEPRI, r3
 800e594:	f3bf 8f6f 	isb	sy
 800e598:	f3bf 8f4f 	dsb	sy
 800e59c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e59e:	bf00      	nop
 800e5a0:	e7fe      	b.n	800e5a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d103      	bne.n	800e5b0 <xQueueGenericSend+0x40>
 800e5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d101      	bne.n	800e5b4 <xQueueGenericSend+0x44>
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	e000      	b.n	800e5b6 <xQueueGenericSend+0x46>
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d10a      	bne.n	800e5d0 <xQueueGenericSend+0x60>
	__asm volatile
 800e5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5be:	f383 8811 	msr	BASEPRI, r3
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	f3bf 8f4f 	dsb	sy
 800e5ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e5cc:	bf00      	nop
 800e5ce:	e7fe      	b.n	800e5ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	2b02      	cmp	r3, #2
 800e5d4:	d103      	bne.n	800e5de <xQueueGenericSend+0x6e>
 800e5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d101      	bne.n	800e5e2 <xQueueGenericSend+0x72>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e000      	b.n	800e5e4 <xQueueGenericSend+0x74>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10a      	bne.n	800e5fe <xQueueGenericSend+0x8e>
	__asm volatile
 800e5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ec:	f383 8811 	msr	BASEPRI, r3
 800e5f0:	f3bf 8f6f 	isb	sy
 800e5f4:	f3bf 8f4f 	dsb	sy
 800e5f8:	623b      	str	r3, [r7, #32]
}
 800e5fa:	bf00      	nop
 800e5fc:	e7fe      	b.n	800e5fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5fe:	f001 fc87 	bl	800ff10 <xTaskGetSchedulerState>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d102      	bne.n	800e60e <xQueueGenericSend+0x9e>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d101      	bne.n	800e612 <xQueueGenericSend+0xa2>
 800e60e:	2301      	movs	r3, #1
 800e610:	e000      	b.n	800e614 <xQueueGenericSend+0xa4>
 800e612:	2300      	movs	r3, #0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10a      	bne.n	800e62e <xQueueGenericSend+0xbe>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	61fb      	str	r3, [r7, #28]
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e62e:	f002 fac9 	bl	8010bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d302      	bcc.n	800e644 <xQueueGenericSend+0xd4>
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b02      	cmp	r3, #2
 800e642:	d129      	bne.n	800e698 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e644:	683a      	ldr	r2, [r7, #0]
 800e646:	68b9      	ldr	r1, [r7, #8]
 800e648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e64a:	f000 fc5e 	bl	800ef0a <prvCopyDataToQueue>
 800e64e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e654:	2b00      	cmp	r3, #0
 800e656:	d010      	beq.n	800e67a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65a:	3324      	adds	r3, #36	; 0x24
 800e65c:	4618      	mov	r0, r3
 800e65e:	f001 fa85 	bl	800fb6c <xTaskRemoveFromEventList>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d013      	beq.n	800e690 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e668:	4b3f      	ldr	r3, [pc, #252]	; (800e768 <xQueueGenericSend+0x1f8>)
 800e66a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e66e:	601a      	str	r2, [r3, #0]
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	e00a      	b.n	800e690 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d007      	beq.n	800e690 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e680:	4b39      	ldr	r3, [pc, #228]	; (800e768 <xQueueGenericSend+0x1f8>)
 800e682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e686:	601a      	str	r2, [r3, #0]
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e690:	f002 fac8 	bl	8010c24 <vPortExitCritical>
				return pdPASS;
 800e694:	2301      	movs	r3, #1
 800e696:	e063      	b.n	800e760 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d103      	bne.n	800e6a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e69e:	f002 fac1 	bl	8010c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	e05c      	b.n	800e760 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d106      	bne.n	800e6ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6ac:	f107 0314 	add.w	r3, r7, #20
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f001 fabf 	bl	800fc34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6ba:	f002 fab3 	bl	8010c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6be:	f001 f819 	bl	800f6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6c2:	f002 fa7f 	bl	8010bc4 <vPortEnterCritical>
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6cc:	b25b      	sxtb	r3, r3
 800e6ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6d2:	d103      	bne.n	800e6dc <xQueueGenericSend+0x16c>
 800e6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6e2:	b25b      	sxtb	r3, r3
 800e6e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6e8:	d103      	bne.n	800e6f2 <xQueueGenericSend+0x182>
 800e6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6f2:	f002 fa97 	bl	8010c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6f6:	1d3a      	adds	r2, r7, #4
 800e6f8:	f107 0314 	add.w	r3, r7, #20
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	4618      	mov	r0, r3
 800e700:	f001 faae 	bl	800fc60 <xTaskCheckForTimeOut>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	d124      	bne.n	800e754 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e70a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e70c:	f000 fcf5 	bl	800f0fa <prvIsQueueFull>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d018      	beq.n	800e748 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e718:	3310      	adds	r3, #16
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	4611      	mov	r1, r2
 800e71e:	4618      	mov	r0, r3
 800e720:	f001 f9d4 	bl	800facc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e726:	f000 fc80 	bl	800f02a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e72a:	f000 fff1 	bl	800f710 <xTaskResumeAll>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	f47f af7c 	bne.w	800e62e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e736:	4b0c      	ldr	r3, [pc, #48]	; (800e768 <xQueueGenericSend+0x1f8>)
 800e738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e73c:	601a      	str	r2, [r3, #0]
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	f3bf 8f6f 	isb	sy
 800e746:	e772      	b.n	800e62e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e74a:	f000 fc6e 	bl	800f02a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e74e:	f000 ffdf 	bl	800f710 <xTaskResumeAll>
 800e752:	e76c      	b.n	800e62e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e756:	f000 fc68 	bl	800f02a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e75a:	f000 ffd9 	bl	800f710 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e75e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e760:	4618      	mov	r0, r3
 800e762:	3738      	adds	r7, #56	; 0x38
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	e000ed04 	.word	0xe000ed04

0800e76c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b090      	sub	sp, #64	; 0x40
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
 800e778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10a      	bne.n	800e79a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e796:	bf00      	nop
 800e798:	e7fe      	b.n	800e798 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d103      	bne.n	800e7a8 <xQueueGenericSendFromISR+0x3c>
 800e7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d101      	bne.n	800e7ac <xQueueGenericSendFromISR+0x40>
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e000      	b.n	800e7ae <xQueueGenericSendFromISR+0x42>
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d10a      	bne.n	800e7c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e7c4:	bf00      	nop
 800e7c6:	e7fe      	b.n	800e7c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	2b02      	cmp	r3, #2
 800e7cc:	d103      	bne.n	800e7d6 <xQueueGenericSendFromISR+0x6a>
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d101      	bne.n	800e7da <xQueueGenericSendFromISR+0x6e>
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e000      	b.n	800e7dc <xQueueGenericSendFromISR+0x70>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10a      	bne.n	800e7f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	623b      	str	r3, [r7, #32]
}
 800e7f2:	bf00      	nop
 800e7f4:	e7fe      	b.n	800e7f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7f6:	f002 fac7 	bl	8010d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e7fa:	f3ef 8211 	mrs	r2, BASEPRI
 800e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e802:	f383 8811 	msr	BASEPRI, r3
 800e806:	f3bf 8f6f 	isb	sy
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	61fa      	str	r2, [r7, #28]
 800e810:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e812:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e814:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e81e:	429a      	cmp	r2, r3
 800e820:	d302      	bcc.n	800e828 <xQueueGenericSendFromISR+0xbc>
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	2b02      	cmp	r3, #2
 800e826:	d12f      	bne.n	800e888 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e836:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	68b9      	ldr	r1, [r7, #8]
 800e83c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e83e:	f000 fb64 	bl	800ef0a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e842:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e84a:	d112      	bne.n	800e872 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e850:	2b00      	cmp	r3, #0
 800e852:	d016      	beq.n	800e882 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e856:	3324      	adds	r3, #36	; 0x24
 800e858:	4618      	mov	r0, r3
 800e85a:	f001 f987 	bl	800fb6c <xTaskRemoveFromEventList>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d00e      	beq.n	800e882 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00b      	beq.n	800e882 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2201      	movs	r2, #1
 800e86e:	601a      	str	r2, [r3, #0]
 800e870:	e007      	b.n	800e882 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e872:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e876:	3301      	adds	r3, #1
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	b25a      	sxtb	r2, r3
 800e87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e882:	2301      	movs	r3, #1
 800e884:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e886:	e001      	b.n	800e88c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e888:	2300      	movs	r3, #0
 800e88a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e88e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e896:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3740      	adds	r7, #64	; 0x40
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b08e      	sub	sp, #56	; 0x38
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]
 800e8aa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10a      	bne.n	800e8cc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ba:	f383 8811 	msr	BASEPRI, r3
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	623b      	str	r3, [r7, #32]
}
 800e8c8:	bf00      	nop
 800e8ca:	e7fe      	b.n	800e8ca <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00a      	beq.n	800e8ea <xQueueGiveFromISR+0x48>
	__asm volatile
 800e8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d8:	f383 8811 	msr	BASEPRI, r3
 800e8dc:	f3bf 8f6f 	isb	sy
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	61fb      	str	r3, [r7, #28]
}
 800e8e6:	bf00      	nop
 800e8e8:	e7fe      	b.n	800e8e8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d103      	bne.n	800e8fa <xQueueGiveFromISR+0x58>
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d101      	bne.n	800e8fe <xQueueGiveFromISR+0x5c>
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e000      	b.n	800e900 <xQueueGiveFromISR+0x5e>
 800e8fe:	2300      	movs	r3, #0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10a      	bne.n	800e91a <xQueueGiveFromISR+0x78>
	__asm volatile
 800e904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e908:	f383 8811 	msr	BASEPRI, r3
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f3bf 8f4f 	dsb	sy
 800e914:	61bb      	str	r3, [r7, #24]
}
 800e916:	bf00      	nop
 800e918:	e7fe      	b.n	800e918 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e91a:	f002 fa35 	bl	8010d88 <vPortValidateInterruptPriority>
	__asm volatile
 800e91e:	f3ef 8211 	mrs	r2, BASEPRI
 800e922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e926:	f383 8811 	msr	BASEPRI, r3
 800e92a:	f3bf 8f6f 	isb	sy
 800e92e:	f3bf 8f4f 	dsb	sy
 800e932:	617a      	str	r2, [r7, #20]
 800e934:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e936:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e938:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e946:	429a      	cmp	r2, r3
 800e948:	d22b      	bcs.n	800e9a2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e956:	1c5a      	adds	r2, r3, #1
 800e958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e95c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e964:	d112      	bne.n	800e98c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d016      	beq.n	800e99c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e970:	3324      	adds	r3, #36	; 0x24
 800e972:	4618      	mov	r0, r3
 800e974:	f001 f8fa 	bl	800fb6c <xTaskRemoveFromEventList>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00e      	beq.n	800e99c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00b      	beq.n	800e99c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	2201      	movs	r2, #1
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	e007      	b.n	800e99c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e98c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e990:	3301      	adds	r3, #1
 800e992:	b2db      	uxtb	r3, r3
 800e994:	b25a      	sxtb	r2, r3
 800e996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e99c:	2301      	movs	r3, #1
 800e99e:	637b      	str	r3, [r7, #52]	; 0x34
 800e9a0:	e001      	b.n	800e9a6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f383 8811 	msr	BASEPRI, r3
}
 800e9b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3738      	adds	r7, #56	; 0x38
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08c      	sub	sp, #48	; 0x30
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d10a      	bne.n	800e9ec <xQueueReceive+0x30>
	__asm volatile
 800e9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9da:	f383 8811 	msr	BASEPRI, r3
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	623b      	str	r3, [r7, #32]
}
 800e9e8:	bf00      	nop
 800e9ea:	e7fe      	b.n	800e9ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d103      	bne.n	800e9fa <xQueueReceive+0x3e>
 800e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d101      	bne.n	800e9fe <xQueueReceive+0x42>
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e000      	b.n	800ea00 <xQueueReceive+0x44>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10a      	bne.n	800ea1a <xQueueReceive+0x5e>
	__asm volatile
 800ea04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea08:	f383 8811 	msr	BASEPRI, r3
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	61fb      	str	r3, [r7, #28]
}
 800ea16:	bf00      	nop
 800ea18:	e7fe      	b.n	800ea18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea1a:	f001 fa79 	bl	800ff10 <xTaskGetSchedulerState>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d102      	bne.n	800ea2a <xQueueReceive+0x6e>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d101      	bne.n	800ea2e <xQueueReceive+0x72>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e000      	b.n	800ea30 <xQueueReceive+0x74>
 800ea2e:	2300      	movs	r3, #0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d10a      	bne.n	800ea4a <xQueueReceive+0x8e>
	__asm volatile
 800ea34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea38:	f383 8811 	msr	BASEPRI, r3
 800ea3c:	f3bf 8f6f 	isb	sy
 800ea40:	f3bf 8f4f 	dsb	sy
 800ea44:	61bb      	str	r3, [r7, #24]
}
 800ea46:	bf00      	nop
 800ea48:	e7fe      	b.n	800ea48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea4a:	f002 f8bb 	bl	8010bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d01f      	beq.n	800ea9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea5a:	68b9      	ldr	r1, [r7, #8]
 800ea5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea5e:	f000 fabe 	bl	800efde <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	1e5a      	subs	r2, r3, #1
 800ea66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00f      	beq.n	800ea92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea74:	3310      	adds	r3, #16
 800ea76:	4618      	mov	r0, r3
 800ea78:	f001 f878 	bl	800fb6c <xTaskRemoveFromEventList>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d007      	beq.n	800ea92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ea82:	4b3d      	ldr	r3, [pc, #244]	; (800eb78 <xQueueReceive+0x1bc>)
 800ea84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea88:	601a      	str	r2, [r3, #0]
 800ea8a:	f3bf 8f4f 	dsb	sy
 800ea8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea92:	f002 f8c7 	bl	8010c24 <vPortExitCritical>
				return pdPASS;
 800ea96:	2301      	movs	r3, #1
 800ea98:	e069      	b.n	800eb6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d103      	bne.n	800eaa8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eaa0:	f002 f8c0 	bl	8010c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	e062      	b.n	800eb6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d106      	bne.n	800eabc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eaae:	f107 0310 	add.w	r3, r7, #16
 800eab2:	4618      	mov	r0, r3
 800eab4:	f001 f8be 	bl	800fc34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eab8:	2301      	movs	r3, #1
 800eaba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eabc:	f002 f8b2 	bl	8010c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eac0:	f000 fe18 	bl	800f6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eac4:	f002 f87e 	bl	8010bc4 <vPortEnterCritical>
 800eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eace:	b25b      	sxtb	r3, r3
 800ead0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ead4:	d103      	bne.n	800eade <xQueueReceive+0x122>
 800ead6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead8:	2200      	movs	r2, #0
 800eada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eae4:	b25b      	sxtb	r3, r3
 800eae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaea:	d103      	bne.n	800eaf4 <xQueueReceive+0x138>
 800eaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eaf4:	f002 f896 	bl	8010c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eaf8:	1d3a      	adds	r2, r7, #4
 800eafa:	f107 0310 	add.w	r3, r7, #16
 800eafe:	4611      	mov	r1, r2
 800eb00:	4618      	mov	r0, r3
 800eb02:	f001 f8ad 	bl	800fc60 <xTaskCheckForTimeOut>
 800eb06:	4603      	mov	r3, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d123      	bne.n	800eb54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb0e:	f000 fade 	bl	800f0ce <prvIsQueueEmpty>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d017      	beq.n	800eb48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1a:	3324      	adds	r3, #36	; 0x24
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	4611      	mov	r1, r2
 800eb20:	4618      	mov	r0, r3
 800eb22:	f000 ffd3 	bl	800facc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eb26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb28:	f000 fa7f 	bl	800f02a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eb2c:	f000 fdf0 	bl	800f710 <xTaskResumeAll>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d189      	bne.n	800ea4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800eb36:	4b10      	ldr	r3, [pc, #64]	; (800eb78 <xQueueReceive+0x1bc>)
 800eb38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb3c:	601a      	str	r2, [r3, #0]
 800eb3e:	f3bf 8f4f 	dsb	sy
 800eb42:	f3bf 8f6f 	isb	sy
 800eb46:	e780      	b.n	800ea4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eb48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb4a:	f000 fa6e 	bl	800f02a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb4e:	f000 fddf 	bl	800f710 <xTaskResumeAll>
 800eb52:	e77a      	b.n	800ea4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eb54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb56:	f000 fa68 	bl	800f02a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb5a:	f000 fdd9 	bl	800f710 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb60:	f000 fab5 	bl	800f0ce <prvIsQueueEmpty>
 800eb64:	4603      	mov	r3, r0
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f43f af6f 	beq.w	800ea4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eb6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3730      	adds	r7, #48	; 0x30
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	e000ed04 	.word	0xe000ed04

0800eb7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b08e      	sub	sp, #56	; 0x38
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800eb86:	2300      	movs	r3, #0
 800eb88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10a      	bne.n	800ebae <xQueueSemaphoreTake+0x32>
	__asm volatile
 800eb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9c:	f383 8811 	msr	BASEPRI, r3
 800eba0:	f3bf 8f6f 	isb	sy
 800eba4:	f3bf 8f4f 	dsb	sy
 800eba8:	623b      	str	r3, [r7, #32]
}
 800ebaa:	bf00      	nop
 800ebac:	e7fe      	b.n	800ebac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ebae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00a      	beq.n	800ebcc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ebb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebba:	f383 8811 	msr	BASEPRI, r3
 800ebbe:	f3bf 8f6f 	isb	sy
 800ebc2:	f3bf 8f4f 	dsb	sy
 800ebc6:	61fb      	str	r3, [r7, #28]
}
 800ebc8:	bf00      	nop
 800ebca:	e7fe      	b.n	800ebca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebcc:	f001 f9a0 	bl	800ff10 <xTaskGetSchedulerState>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d102      	bne.n	800ebdc <xQueueSemaphoreTake+0x60>
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d101      	bne.n	800ebe0 <xQueueSemaphoreTake+0x64>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	e000      	b.n	800ebe2 <xQueueSemaphoreTake+0x66>
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10a      	bne.n	800ebfc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ebe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	61bb      	str	r3, [r7, #24]
}
 800ebf8:	bf00      	nop
 800ebfa:	e7fe      	b.n	800ebfa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebfc:	f001 ffe2 	bl	8010bc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ec00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec04:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ec06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d024      	beq.n	800ec56 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0e:	1e5a      	subs	r2, r3, #1
 800ec10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec12:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d104      	bne.n	800ec26 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ec1c:	f001 faee 	bl	80101fc <pvTaskIncrementMutexHeldCount>
 800ec20:	4602      	mov	r2, r0
 800ec22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec24:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00f      	beq.n	800ec4e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec30:	3310      	adds	r3, #16
 800ec32:	4618      	mov	r0, r3
 800ec34:	f000 ff9a 	bl	800fb6c <xTaskRemoveFromEventList>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d007      	beq.n	800ec4e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ec3e:	4b54      	ldr	r3, [pc, #336]	; (800ed90 <xQueueSemaphoreTake+0x214>)
 800ec40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ec4e:	f001 ffe9 	bl	8010c24 <vPortExitCritical>
				return pdPASS;
 800ec52:	2301      	movs	r3, #1
 800ec54:	e097      	b.n	800ed86 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d111      	bne.n	800ec80 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00a      	beq.n	800ec78 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ec62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec66:	f383 8811 	msr	BASEPRI, r3
 800ec6a:	f3bf 8f6f 	isb	sy
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	617b      	str	r3, [r7, #20]
}
 800ec74:	bf00      	nop
 800ec76:	e7fe      	b.n	800ec76 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ec78:	f001 ffd4 	bl	8010c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	e082      	b.n	800ed86 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d106      	bne.n	800ec94 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec86:	f107 030c 	add.w	r3, r7, #12
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f000 ffd2 	bl	800fc34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec90:	2301      	movs	r3, #1
 800ec92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec94:	f001 ffc6 	bl	8010c24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec98:	f000 fd2c 	bl	800f6f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec9c:	f001 ff92 	bl	8010bc4 <vPortEnterCritical>
 800eca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eca6:	b25b      	sxtb	r3, r3
 800eca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecac:	d103      	bne.n	800ecb6 <xQueueSemaphoreTake+0x13a>
 800ecae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecbc:	b25b      	sxtb	r3, r3
 800ecbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecc2:	d103      	bne.n	800eccc <xQueueSemaphoreTake+0x150>
 800ecc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eccc:	f001 ffaa 	bl	8010c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ecd0:	463a      	mov	r2, r7
 800ecd2:	f107 030c 	add.w	r3, r7, #12
 800ecd6:	4611      	mov	r1, r2
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f000 ffc1 	bl	800fc60 <xTaskCheckForTimeOut>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d132      	bne.n	800ed4a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ece4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ece6:	f000 f9f2 	bl	800f0ce <prvIsQueueEmpty>
 800ecea:	4603      	mov	r3, r0
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d026      	beq.n	800ed3e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d109      	bne.n	800ed0c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ecf8:	f001 ff64 	bl	8010bc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ecfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfe:	689b      	ldr	r3, [r3, #8]
 800ed00:	4618      	mov	r0, r3
 800ed02:	f001 f923 	bl	800ff4c <xTaskPriorityInherit>
 800ed06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ed08:	f001 ff8c 	bl	8010c24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ed0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0e:	3324      	adds	r3, #36	; 0x24
 800ed10:	683a      	ldr	r2, [r7, #0]
 800ed12:	4611      	mov	r1, r2
 800ed14:	4618      	mov	r0, r3
 800ed16:	f000 fed9 	bl	800facc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ed1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed1c:	f000 f985 	bl	800f02a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ed20:	f000 fcf6 	bl	800f710 <xTaskResumeAll>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	f47f af68 	bne.w	800ebfc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ed2c:	4b18      	ldr	r3, [pc, #96]	; (800ed90 <xQueueSemaphoreTake+0x214>)
 800ed2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed32:	601a      	str	r2, [r3, #0]
 800ed34:	f3bf 8f4f 	dsb	sy
 800ed38:	f3bf 8f6f 	isb	sy
 800ed3c:	e75e      	b.n	800ebfc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ed3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed40:	f000 f973 	bl	800f02a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed44:	f000 fce4 	bl	800f710 <xTaskResumeAll>
 800ed48:	e758      	b.n	800ebfc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ed4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed4c:	f000 f96d 	bl	800f02a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed50:	f000 fcde 	bl	800f710 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed56:	f000 f9ba 	bl	800f0ce <prvIsQueueEmpty>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f43f af4d 	beq.w	800ebfc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d00d      	beq.n	800ed84 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ed68:	f001 ff2c 	bl	8010bc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ed6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed6e:	f000 f8b4 	bl	800eeda <prvGetDisinheritPriorityAfterTimeout>
 800ed72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ed74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f001 f9bc 	bl	80100f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ed80:	f001 ff50 	bl	8010c24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ed84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3738      	adds	r7, #56	; 0x38
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	e000ed04 	.word	0xe000ed04

0800ed94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b08e      	sub	sp, #56	; 0x38
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d10a      	bne.n	800edc0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800edaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edae:	f383 8811 	msr	BASEPRI, r3
 800edb2:	f3bf 8f6f 	isb	sy
 800edb6:	f3bf 8f4f 	dsb	sy
 800edba:	623b      	str	r3, [r7, #32]
}
 800edbc:	bf00      	nop
 800edbe:	e7fe      	b.n	800edbe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d103      	bne.n	800edce <xQueueReceiveFromISR+0x3a>
 800edc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d101      	bne.n	800edd2 <xQueueReceiveFromISR+0x3e>
 800edce:	2301      	movs	r3, #1
 800edd0:	e000      	b.n	800edd4 <xQueueReceiveFromISR+0x40>
 800edd2:	2300      	movs	r3, #0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10a      	bne.n	800edee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800edd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eddc:	f383 8811 	msr	BASEPRI, r3
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	f3bf 8f4f 	dsb	sy
 800ede8:	61fb      	str	r3, [r7, #28]
}
 800edea:	bf00      	nop
 800edec:	e7fe      	b.n	800edec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edee:	f001 ffcb 	bl	8010d88 <vPortValidateInterruptPriority>
	__asm volatile
 800edf2:	f3ef 8211 	mrs	r2, BASEPRI
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	f383 8811 	msr	BASEPRI, r3
 800edfe:	f3bf 8f6f 	isb	sy
 800ee02:	f3bf 8f4f 	dsb	sy
 800ee06:	61ba      	str	r2, [r7, #24]
 800ee08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ee0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee12:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d02f      	beq.n	800ee7a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee24:	68b9      	ldr	r1, [r7, #8]
 800ee26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee28:	f000 f8d9 	bl	800efde <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2e:	1e5a      	subs	r2, r3, #1
 800ee30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee32:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ee34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee3c:	d112      	bne.n	800ee64 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee40:	691b      	ldr	r3, [r3, #16]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d016      	beq.n	800ee74 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee48:	3310      	adds	r3, #16
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f000 fe8e 	bl	800fb6c <xTaskRemoveFromEventList>
 800ee50:	4603      	mov	r3, r0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d00e      	beq.n	800ee74 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d00b      	beq.n	800ee74 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2201      	movs	r2, #1
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	e007      	b.n	800ee74 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ee64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee68:	3301      	adds	r3, #1
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	b25a      	sxtb	r2, r3
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ee74:	2301      	movs	r3, #1
 800ee76:	637b      	str	r3, [r7, #52]	; 0x34
 800ee78:	e001      	b.n	800ee7e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee80:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	f383 8811 	msr	BASEPRI, r3
}
 800ee88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3738      	adds	r7, #56	; 0x38
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d10a      	bne.n	800eebc <vQueueDelete+0x28>
	__asm volatile
 800eea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeaa:	f383 8811 	msr	BASEPRI, r3
 800eeae:	f3bf 8f6f 	isb	sy
 800eeb2:	f3bf 8f4f 	dsb	sy
 800eeb6:	60bb      	str	r3, [r7, #8]
}
 800eeb8:	bf00      	nop
 800eeba:	e7fe      	b.n	800eeba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f000 f95f 	bl	800f180 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d102      	bne.n	800eed2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f002 f867 	bl	8010fa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800eed2:	bf00      	nop
 800eed4:	3710      	adds	r7, #16
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800eeda:	b480      	push	{r7}
 800eedc:	b085      	sub	sp, #20
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d006      	beq.n	800eef8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800eef4:	60fb      	str	r3, [r7, #12]
 800eef6:	e001      	b.n	800eefc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800eef8:	2300      	movs	r3, #0
 800eefa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800eefc:	68fb      	ldr	r3, [r7, #12]
	}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3714      	adds	r7, #20
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr

0800ef0a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b086      	sub	sp, #24
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	60f8      	str	r0, [r7, #12]
 800ef12:	60b9      	str	r1, [r7, #8]
 800ef14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ef16:	2300      	movs	r3, #0
 800ef18:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef1e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10d      	bne.n	800ef44 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d14d      	bne.n	800efcc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	4618      	mov	r0, r3
 800ef36:	f001 f871 	bl	801001c <xTaskPriorityDisinherit>
 800ef3a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	609a      	str	r2, [r3, #8]
 800ef42:	e043      	b.n	800efcc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d119      	bne.n	800ef7e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6858      	ldr	r0, [r3, #4]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef52:	461a      	mov	r2, r3
 800ef54:	68b9      	ldr	r1, [r7, #8]
 800ef56:	f002 fa64 	bl	8011422 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	685a      	ldr	r2, [r3, #4]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef62:	441a      	add	r2, r3
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	685a      	ldr	r2, [r3, #4]
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d32b      	bcc.n	800efcc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	605a      	str	r2, [r3, #4]
 800ef7c:	e026      	b.n	800efcc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	68d8      	ldr	r0, [r3, #12]
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef86:	461a      	mov	r2, r3
 800ef88:	68b9      	ldr	r1, [r7, #8]
 800ef8a:	f002 fa4a 	bl	8011422 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	68da      	ldr	r2, [r3, #12]
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef96:	425b      	negs	r3, r3
 800ef98:	441a      	add	r2, r3
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	68da      	ldr	r2, [r3, #12]
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d207      	bcs.n	800efba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	689a      	ldr	r2, [r3, #8]
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efb2:	425b      	negs	r3, r3
 800efb4:	441a      	add	r2, r3
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b02      	cmp	r3, #2
 800efbe:	d105      	bne.n	800efcc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d002      	beq.n	800efcc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	3b01      	subs	r3, #1
 800efca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	1c5a      	adds	r2, r3, #1
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800efd4:	697b      	ldr	r3, [r7, #20]
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3718      	adds	r7, #24
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}

0800efde <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800efde:	b580      	push	{r7, lr}
 800efe0:	b082      	sub	sp, #8
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
 800efe6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efec:	2b00      	cmp	r3, #0
 800efee:	d018      	beq.n	800f022 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	68da      	ldr	r2, [r3, #12]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eff8:	441a      	add	r2, r3
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	68da      	ldr	r2, [r3, #12]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	689b      	ldr	r3, [r3, #8]
 800f006:	429a      	cmp	r2, r3
 800f008:	d303      	bcc.n	800f012 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	68d9      	ldr	r1, [r3, #12]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f01a:	461a      	mov	r2, r3
 800f01c:	6838      	ldr	r0, [r7, #0]
 800f01e:	f002 fa00 	bl	8011422 <memcpy>
	}
}
 800f022:	bf00      	nop
 800f024:	3708      	adds	r7, #8
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b084      	sub	sp, #16
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f032:	f001 fdc7 	bl	8010bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f03c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f03e:	e011      	b.n	800f064 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f044:	2b00      	cmp	r3, #0
 800f046:	d012      	beq.n	800f06e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	3324      	adds	r3, #36	; 0x24
 800f04c:	4618      	mov	r0, r3
 800f04e:	f000 fd8d 	bl	800fb6c <xTaskRemoveFromEventList>
 800f052:	4603      	mov	r3, r0
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f058:	f000 fe64 	bl	800fd24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f05c:	7bfb      	ldrb	r3, [r7, #15]
 800f05e:	3b01      	subs	r3, #1
 800f060:	b2db      	uxtb	r3, r3
 800f062:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	dce9      	bgt.n	800f040 <prvUnlockQueue+0x16>
 800f06c:	e000      	b.n	800f070 <prvUnlockQueue+0x46>
					break;
 800f06e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	22ff      	movs	r2, #255	; 0xff
 800f074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f078:	f001 fdd4 	bl	8010c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f07c:	f001 fda2 	bl	8010bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f086:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f088:	e011      	b.n	800f0ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d012      	beq.n	800f0b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	3310      	adds	r3, #16
 800f096:	4618      	mov	r0, r3
 800f098:	f000 fd68 	bl	800fb6c <xTaskRemoveFromEventList>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f0a2:	f000 fe3f 	bl	800fd24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f0a6:	7bbb      	ldrb	r3, [r7, #14]
 800f0a8:	3b01      	subs	r3, #1
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f0ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	dce9      	bgt.n	800f08a <prvUnlockQueue+0x60>
 800f0b6:	e000      	b.n	800f0ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f0b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	22ff      	movs	r2, #255	; 0xff
 800f0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f0c2:	f001 fdaf 	bl	8010c24 <vPortExitCritical>
}
 800f0c6:	bf00      	nop
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b084      	sub	sp, #16
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f0d6:	f001 fd75 	bl	8010bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d102      	bne.n	800f0e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	60fb      	str	r3, [r7, #12]
 800f0e6:	e001      	b.n	800f0ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f0ec:	f001 fd9a 	bl	8010c24 <vPortExitCritical>

	return xReturn;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b084      	sub	sp, #16
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f102:	f001 fd5f 	bl	8010bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f10e:	429a      	cmp	r2, r3
 800f110:	d102      	bne.n	800f118 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f112:	2301      	movs	r3, #1
 800f114:	60fb      	str	r3, [r7, #12]
 800f116:	e001      	b.n	800f11c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f118:	2300      	movs	r3, #0
 800f11a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f11c:	f001 fd82 	bl	8010c24 <vPortExitCritical>

	return xReturn;
 800f120:	68fb      	ldr	r3, [r7, #12]
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
	...

0800f12c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f12c:	b480      	push	{r7}
 800f12e:	b085      	sub	sp, #20
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f136:	2300      	movs	r3, #0
 800f138:	60fb      	str	r3, [r7, #12]
 800f13a:	e014      	b.n	800f166 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f13c:	4a0f      	ldr	r2, [pc, #60]	; (800f17c <vQueueAddToRegistry+0x50>)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d10b      	bne.n	800f160 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f148:	490c      	ldr	r1, [pc, #48]	; (800f17c <vQueueAddToRegistry+0x50>)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	683a      	ldr	r2, [r7, #0]
 800f14e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f152:	4a0a      	ldr	r2, [pc, #40]	; (800f17c <vQueueAddToRegistry+0x50>)
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	00db      	lsls	r3, r3, #3
 800f158:	4413      	add	r3, r2
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f15e:	e006      	b.n	800f16e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	3301      	adds	r3, #1
 800f164:	60fb      	str	r3, [r7, #12]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2b07      	cmp	r3, #7
 800f16a:	d9e7      	bls.n	800f13c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f16c:	bf00      	nop
 800f16e:	bf00      	nop
 800f170:	3714      	adds	r7, #20
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr
 800f17a:	bf00      	nop
 800f17c:	200015a4 	.word	0x200015a4

0800f180 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f180:	b480      	push	{r7}
 800f182:	b085      	sub	sp, #20
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f188:	2300      	movs	r3, #0
 800f18a:	60fb      	str	r3, [r7, #12]
 800f18c:	e016      	b.n	800f1bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f18e:	4a10      	ldr	r2, [pc, #64]	; (800f1d0 <vQueueUnregisterQueue+0x50>)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	00db      	lsls	r3, r3, #3
 800f194:	4413      	add	r3, r2
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d10b      	bne.n	800f1b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f19e:	4a0c      	ldr	r2, [pc, #48]	; (800f1d0 <vQueueUnregisterQueue+0x50>)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f1a8:	4a09      	ldr	r2, [pc, #36]	; (800f1d0 <vQueueUnregisterQueue+0x50>)
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	4413      	add	r3, r2
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	605a      	str	r2, [r3, #4]
				break;
 800f1b4:	e006      	b.n	800f1c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	60fb      	str	r3, [r7, #12]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2b07      	cmp	r3, #7
 800f1c0:	d9e5      	bls.n	800f18e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f1c2:	bf00      	nop
 800f1c4:	bf00      	nop
 800f1c6:	3714      	adds	r7, #20
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr
 800f1d0:	200015a4 	.word	0x200015a4

0800f1d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b086      	sub	sp, #24
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	60f8      	str	r0, [r7, #12]
 800f1dc:	60b9      	str	r1, [r7, #8]
 800f1de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f1e4:	f001 fcee 	bl	8010bc4 <vPortEnterCritical>
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1ee:	b25b      	sxtb	r3, r3
 800f1f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1f4:	d103      	bne.n	800f1fe <vQueueWaitForMessageRestricted+0x2a>
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f204:	b25b      	sxtb	r3, r3
 800f206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f20a:	d103      	bne.n	800f214 <vQueueWaitForMessageRestricted+0x40>
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	2200      	movs	r2, #0
 800f210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f214:	f001 fd06 	bl	8010c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d106      	bne.n	800f22e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	3324      	adds	r3, #36	; 0x24
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	68b9      	ldr	r1, [r7, #8]
 800f228:	4618      	mov	r0, r3
 800f22a:	f000 fc73 	bl	800fb14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f22e:	6978      	ldr	r0, [r7, #20]
 800f230:	f7ff fefb 	bl	800f02a <prvUnlockQueue>
	}
 800f234:	bf00      	nop
 800f236:	3718      	adds	r7, #24
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}

0800f23c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b08e      	sub	sp, #56	; 0x38
 800f240:	af04      	add	r7, sp, #16
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
 800f248:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d10a      	bne.n	800f266 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f254:	f383 8811 	msr	BASEPRI, r3
 800f258:	f3bf 8f6f 	isb	sy
 800f25c:	f3bf 8f4f 	dsb	sy
 800f260:	623b      	str	r3, [r7, #32]
}
 800f262:	bf00      	nop
 800f264:	e7fe      	b.n	800f264 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d10a      	bne.n	800f282 <xTaskCreateStatic+0x46>
	__asm volatile
 800f26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f270:	f383 8811 	msr	BASEPRI, r3
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	61fb      	str	r3, [r7, #28]
}
 800f27e:	bf00      	nop
 800f280:	e7fe      	b.n	800f280 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f282:	23bc      	movs	r3, #188	; 0xbc
 800f284:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	2bbc      	cmp	r3, #188	; 0xbc
 800f28a:	d00a      	beq.n	800f2a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800f28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f290:	f383 8811 	msr	BASEPRI, r3
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	f3bf 8f4f 	dsb	sy
 800f29c:	61bb      	str	r3, [r7, #24]
}
 800f29e:	bf00      	nop
 800f2a0:	e7fe      	b.n	800f2a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f2a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d01e      	beq.n	800f2e8 <xTaskCreateStatic+0xac>
 800f2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d01b      	beq.n	800f2e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2bc:	2202      	movs	r2, #2
 800f2be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	9303      	str	r3, [sp, #12]
 800f2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c8:	9302      	str	r3, [sp, #8]
 800f2ca:	f107 0314 	add.w	r3, r7, #20
 800f2ce:	9301      	str	r3, [sp, #4]
 800f2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d2:	9300      	str	r3, [sp, #0]
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	68b9      	ldr	r1, [r7, #8]
 800f2da:	68f8      	ldr	r0, [r7, #12]
 800f2dc:	f000 f850 	bl	800f380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2e2:	f000 f8f3 	bl	800f4cc <prvAddNewTaskToReadyList>
 800f2e6:	e001      	b.n	800f2ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f2ec:	697b      	ldr	r3, [r7, #20]
	}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3728      	adds	r7, #40	; 0x28
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b08c      	sub	sp, #48	; 0x30
 800f2fa:	af04      	add	r7, sp, #16
 800f2fc:	60f8      	str	r0, [r7, #12]
 800f2fe:	60b9      	str	r1, [r7, #8]
 800f300:	603b      	str	r3, [r7, #0]
 800f302:	4613      	mov	r3, r2
 800f304:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f306:	88fb      	ldrh	r3, [r7, #6]
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	4618      	mov	r0, r3
 800f30c:	f001 fd7c 	bl	8010e08 <pvPortMalloc>
 800f310:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d00e      	beq.n	800f336 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f318:	20bc      	movs	r0, #188	; 0xbc
 800f31a:	f001 fd75 	bl	8010e08 <pvPortMalloc>
 800f31e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d003      	beq.n	800f32e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f326:	69fb      	ldr	r3, [r7, #28]
 800f328:	697a      	ldr	r2, [r7, #20]
 800f32a:	631a      	str	r2, [r3, #48]	; 0x30
 800f32c:	e005      	b.n	800f33a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f32e:	6978      	ldr	r0, [r7, #20]
 800f330:	f001 fe36 	bl	8010fa0 <vPortFree>
 800f334:	e001      	b.n	800f33a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f336:	2300      	movs	r3, #0
 800f338:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d017      	beq.n	800f370 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	2200      	movs	r2, #0
 800f344:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f348:	88fa      	ldrh	r2, [r7, #6]
 800f34a:	2300      	movs	r3, #0
 800f34c:	9303      	str	r3, [sp, #12]
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	9302      	str	r3, [sp, #8]
 800f352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f354:	9301      	str	r3, [sp, #4]
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	9300      	str	r3, [sp, #0]
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	68b9      	ldr	r1, [r7, #8]
 800f35e:	68f8      	ldr	r0, [r7, #12]
 800f360:	f000 f80e 	bl	800f380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f364:	69f8      	ldr	r0, [r7, #28]
 800f366:	f000 f8b1 	bl	800f4cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f36a:	2301      	movs	r3, #1
 800f36c:	61bb      	str	r3, [r7, #24]
 800f36e:	e002      	b.n	800f376 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f374:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f376:	69bb      	ldr	r3, [r7, #24]
	}
 800f378:	4618      	mov	r0, r3
 800f37a:	3720      	adds	r7, #32
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b088      	sub	sp, #32
 800f384:	af00      	add	r7, sp, #0
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	60b9      	str	r1, [r7, #8]
 800f38a:	607a      	str	r2, [r7, #4]
 800f38c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f390:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	461a      	mov	r2, r3
 800f398:	21a5      	movs	r1, #165	; 0xa5
 800f39a:	f002 f850 	bl	801143e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	4413      	add	r3, r2
 800f3ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f3b0:	69bb      	ldr	r3, [r7, #24]
 800f3b2:	f023 0307 	bic.w	r3, r3, #7
 800f3b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	f003 0307 	and.w	r3, r3, #7
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00a      	beq.n	800f3d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c6:	f383 8811 	msr	BASEPRI, r3
 800f3ca:	f3bf 8f6f 	isb	sy
 800f3ce:	f3bf 8f4f 	dsb	sy
 800f3d2:	617b      	str	r3, [r7, #20]
}
 800f3d4:	bf00      	nop
 800f3d6:	e7fe      	b.n	800f3d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d01f      	beq.n	800f41e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f3de:	2300      	movs	r3, #0
 800f3e0:	61fb      	str	r3, [r7, #28]
 800f3e2:	e012      	b.n	800f40a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f3e4:	68ba      	ldr	r2, [r7, #8]
 800f3e6:	69fb      	ldr	r3, [r7, #28]
 800f3e8:	4413      	add	r3, r2
 800f3ea:	7819      	ldrb	r1, [r3, #0]
 800f3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3ee:	69fb      	ldr	r3, [r7, #28]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	3334      	adds	r3, #52	; 0x34
 800f3f4:	460a      	mov	r2, r1
 800f3f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d006      	beq.n	800f412 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	3301      	adds	r3, #1
 800f408:	61fb      	str	r3, [r7, #28]
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	2b0f      	cmp	r3, #15
 800f40e:	d9e9      	bls.n	800f3e4 <prvInitialiseNewTask+0x64>
 800f410:	e000      	b.n	800f414 <prvInitialiseNewTask+0x94>
			{
				break;
 800f412:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f416:	2200      	movs	r2, #0
 800f418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f41c:	e003      	b.n	800f426 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f420:	2200      	movs	r2, #0
 800f422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f428:	2b37      	cmp	r3, #55	; 0x37
 800f42a:	d901      	bls.n	800f430 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f42c:	2337      	movs	r3, #55	; 0x37
 800f42e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f434:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f43a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43e:	2200      	movs	r2, #0
 800f440:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f444:	3304      	adds	r3, #4
 800f446:	4618      	mov	r0, r3
 800f448:	f7fe fda0 	bl	800df8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44e:	3318      	adds	r3, #24
 800f450:	4618      	mov	r0, r3
 800f452:	f7fe fd9b 	bl	800df8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f45a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f464:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f46a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46e:	2200      	movs	r2, #0
 800f470:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f476:	2200      	movs	r2, #0
 800f478:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47e:	3354      	adds	r3, #84	; 0x54
 800f480:	2260      	movs	r2, #96	; 0x60
 800f482:	2100      	movs	r1, #0
 800f484:	4618      	mov	r0, r3
 800f486:	f001 ffda 	bl	801143e <memset>
 800f48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48c:	4a0c      	ldr	r2, [pc, #48]	; (800f4c0 <prvInitialiseNewTask+0x140>)
 800f48e:	659a      	str	r2, [r3, #88]	; 0x58
 800f490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f492:	4a0c      	ldr	r2, [pc, #48]	; (800f4c4 <prvInitialiseNewTask+0x144>)
 800f494:	65da      	str	r2, [r3, #92]	; 0x5c
 800f496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f498:	4a0b      	ldr	r2, [pc, #44]	; (800f4c8 <prvInitialiseNewTask+0x148>)
 800f49a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f49c:	683a      	ldr	r2, [r7, #0]
 800f49e:	68f9      	ldr	r1, [r7, #12]
 800f4a0:	69b8      	ldr	r0, [r7, #24]
 800f4a2:	f001 fa61 	bl	8010968 <pxPortInitialiseStack>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d002      	beq.n	800f4b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4b8:	bf00      	nop
 800f4ba:	3720      	adds	r7, #32
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	08015e88 	.word	0x08015e88
 800f4c4:	08015ea8 	.word	0x08015ea8
 800f4c8:	08015e68 	.word	0x08015e68

0800f4cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f4d4:	f001 fb76 	bl	8010bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f4d8:	4b2d      	ldr	r3, [pc, #180]	; (800f590 <prvAddNewTaskToReadyList+0xc4>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	3301      	adds	r3, #1
 800f4de:	4a2c      	ldr	r2, [pc, #176]	; (800f590 <prvAddNewTaskToReadyList+0xc4>)
 800f4e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f4e2:	4b2c      	ldr	r3, [pc, #176]	; (800f594 <prvAddNewTaskToReadyList+0xc8>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d109      	bne.n	800f4fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f4ea:	4a2a      	ldr	r2, [pc, #168]	; (800f594 <prvAddNewTaskToReadyList+0xc8>)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f4f0:	4b27      	ldr	r3, [pc, #156]	; (800f590 <prvAddNewTaskToReadyList+0xc4>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d110      	bne.n	800f51a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f4f8:	f000 fc38 	bl	800fd6c <prvInitialiseTaskLists>
 800f4fc:	e00d      	b.n	800f51a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f4fe:	4b26      	ldr	r3, [pc, #152]	; (800f598 <prvAddNewTaskToReadyList+0xcc>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d109      	bne.n	800f51a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f506:	4b23      	ldr	r3, [pc, #140]	; (800f594 <prvAddNewTaskToReadyList+0xc8>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f510:	429a      	cmp	r2, r3
 800f512:	d802      	bhi.n	800f51a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f514:	4a1f      	ldr	r2, [pc, #124]	; (800f594 <prvAddNewTaskToReadyList+0xc8>)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f51a:	4b20      	ldr	r3, [pc, #128]	; (800f59c <prvAddNewTaskToReadyList+0xd0>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	3301      	adds	r3, #1
 800f520:	4a1e      	ldr	r2, [pc, #120]	; (800f59c <prvAddNewTaskToReadyList+0xd0>)
 800f522:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f524:	4b1d      	ldr	r3, [pc, #116]	; (800f59c <prvAddNewTaskToReadyList+0xd0>)
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f530:	4b1b      	ldr	r3, [pc, #108]	; (800f5a0 <prvAddNewTaskToReadyList+0xd4>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	429a      	cmp	r2, r3
 800f536:	d903      	bls.n	800f540 <prvAddNewTaskToReadyList+0x74>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f53c:	4a18      	ldr	r2, [pc, #96]	; (800f5a0 <prvAddNewTaskToReadyList+0xd4>)
 800f53e:	6013      	str	r3, [r2, #0]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f544:	4613      	mov	r3, r2
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	4413      	add	r3, r2
 800f54a:	009b      	lsls	r3, r3, #2
 800f54c:	4a15      	ldr	r2, [pc, #84]	; (800f5a4 <prvAddNewTaskToReadyList+0xd8>)
 800f54e:	441a      	add	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	3304      	adds	r3, #4
 800f554:	4619      	mov	r1, r3
 800f556:	4610      	mov	r0, r2
 800f558:	f7fe fd25 	bl	800dfa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f55c:	f001 fb62 	bl	8010c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f560:	4b0d      	ldr	r3, [pc, #52]	; (800f598 <prvAddNewTaskToReadyList+0xcc>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00e      	beq.n	800f586 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f568:	4b0a      	ldr	r3, [pc, #40]	; (800f594 <prvAddNewTaskToReadyList+0xc8>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f572:	429a      	cmp	r2, r3
 800f574:	d207      	bcs.n	800f586 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f576:	4b0c      	ldr	r3, [pc, #48]	; (800f5a8 <prvAddNewTaskToReadyList+0xdc>)
 800f578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f57c:	601a      	str	r2, [r3, #0]
 800f57e:	f3bf 8f4f 	dsb	sy
 800f582:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f586:	bf00      	nop
 800f588:	3708      	adds	r7, #8
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	20001ab8 	.word	0x20001ab8
 800f594:	200015e4 	.word	0x200015e4
 800f598:	20001ac4 	.word	0x20001ac4
 800f59c:	20001ad4 	.word	0x20001ad4
 800f5a0:	20001ac0 	.word	0x20001ac0
 800f5a4:	200015e8 	.word	0x200015e8
 800f5a8:	e000ed04 	.word	0xe000ed04

0800f5ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d017      	beq.n	800f5ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f5be:	4b13      	ldr	r3, [pc, #76]	; (800f60c <vTaskDelay+0x60>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d00a      	beq.n	800f5dc <vTaskDelay+0x30>
	__asm volatile
 800f5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ca:	f383 8811 	msr	BASEPRI, r3
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f3bf 8f4f 	dsb	sy
 800f5d6:	60bb      	str	r3, [r7, #8]
}
 800f5d8:	bf00      	nop
 800f5da:	e7fe      	b.n	800f5da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f5dc:	f000 f88a 	bl	800f6f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f5e0:	2100      	movs	r1, #0
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f000 fe1e 	bl	8010224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f5e8:	f000 f892 	bl	800f710 <xTaskResumeAll>
 800f5ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d107      	bne.n	800f604 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f5f4:	4b06      	ldr	r3, [pc, #24]	; (800f610 <vTaskDelay+0x64>)
 800f5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5fa:	601a      	str	r2, [r3, #0]
 800f5fc:	f3bf 8f4f 	dsb	sy
 800f600:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f604:	bf00      	nop
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	20001ae0 	.word	0x20001ae0
 800f610:	e000ed04 	.word	0xe000ed04

0800f614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b08a      	sub	sp, #40	; 0x28
 800f618:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f61a:	2300      	movs	r3, #0
 800f61c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f61e:	2300      	movs	r3, #0
 800f620:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f622:	463a      	mov	r2, r7
 800f624:	1d39      	adds	r1, r7, #4
 800f626:	f107 0308 	add.w	r3, r7, #8
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fe fc5a 	bl	800dee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f630:	6839      	ldr	r1, [r7, #0]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	9202      	str	r2, [sp, #8]
 800f638:	9301      	str	r3, [sp, #4]
 800f63a:	2300      	movs	r3, #0
 800f63c:	9300      	str	r3, [sp, #0]
 800f63e:	2300      	movs	r3, #0
 800f640:	460a      	mov	r2, r1
 800f642:	4924      	ldr	r1, [pc, #144]	; (800f6d4 <vTaskStartScheduler+0xc0>)
 800f644:	4824      	ldr	r0, [pc, #144]	; (800f6d8 <vTaskStartScheduler+0xc4>)
 800f646:	f7ff fdf9 	bl	800f23c <xTaskCreateStatic>
 800f64a:	4603      	mov	r3, r0
 800f64c:	4a23      	ldr	r2, [pc, #140]	; (800f6dc <vTaskStartScheduler+0xc8>)
 800f64e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f650:	4b22      	ldr	r3, [pc, #136]	; (800f6dc <vTaskStartScheduler+0xc8>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d002      	beq.n	800f65e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f658:	2301      	movs	r3, #1
 800f65a:	617b      	str	r3, [r7, #20]
 800f65c:	e001      	b.n	800f662 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f65e:	2300      	movs	r3, #0
 800f660:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	2b01      	cmp	r3, #1
 800f666:	d102      	bne.n	800f66e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f668:	f000 fe30 	bl	80102cc <xTimerCreateTimerTask>
 800f66c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	2b01      	cmp	r3, #1
 800f672:	d11b      	bne.n	800f6ac <vTaskStartScheduler+0x98>
	__asm volatile
 800f674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f678:	f383 8811 	msr	BASEPRI, r3
 800f67c:	f3bf 8f6f 	isb	sy
 800f680:	f3bf 8f4f 	dsb	sy
 800f684:	613b      	str	r3, [r7, #16]
}
 800f686:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f688:	4b15      	ldr	r3, [pc, #84]	; (800f6e0 <vTaskStartScheduler+0xcc>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	3354      	adds	r3, #84	; 0x54
 800f68e:	4a15      	ldr	r2, [pc, #84]	; (800f6e4 <vTaskStartScheduler+0xd0>)
 800f690:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f692:	4b15      	ldr	r3, [pc, #84]	; (800f6e8 <vTaskStartScheduler+0xd4>)
 800f694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f698:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f69a:	4b14      	ldr	r3, [pc, #80]	; (800f6ec <vTaskStartScheduler+0xd8>)
 800f69c:	2201      	movs	r2, #1
 800f69e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f6a0:	4b13      	ldr	r3, [pc, #76]	; (800f6f0 <vTaskStartScheduler+0xdc>)
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f6a6:	f001 f9eb 	bl	8010a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f6aa:	e00e      	b.n	800f6ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6b2:	d10a      	bne.n	800f6ca <vTaskStartScheduler+0xb6>
	__asm volatile
 800f6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b8:	f383 8811 	msr	BASEPRI, r3
 800f6bc:	f3bf 8f6f 	isb	sy
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	60fb      	str	r3, [r7, #12]
}
 800f6c6:	bf00      	nop
 800f6c8:	e7fe      	b.n	800f6c8 <vTaskStartScheduler+0xb4>
}
 800f6ca:	bf00      	nop
 800f6cc:	3718      	adds	r7, #24
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	08015cfc 	.word	0x08015cfc
 800f6d8:	0800fd3d 	.word	0x0800fd3d
 800f6dc:	20001adc 	.word	0x20001adc
 800f6e0:	200015e4 	.word	0x200015e4
 800f6e4:	20000024 	.word	0x20000024
 800f6e8:	20001ad8 	.word	0x20001ad8
 800f6ec:	20001ac4 	.word	0x20001ac4
 800f6f0:	20001abc 	.word	0x20001abc

0800f6f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f6f8:	4b04      	ldr	r3, [pc, #16]	; (800f70c <vTaskSuspendAll+0x18>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	4a03      	ldr	r2, [pc, #12]	; (800f70c <vTaskSuspendAll+0x18>)
 800f700:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f702:	bf00      	nop
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr
 800f70c:	20001ae0 	.word	0x20001ae0

0800f710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f716:	2300      	movs	r3, #0
 800f718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f71a:	2300      	movs	r3, #0
 800f71c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f71e:	4b42      	ldr	r3, [pc, #264]	; (800f828 <xTaskResumeAll+0x118>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d10a      	bne.n	800f73c <xTaskResumeAll+0x2c>
	__asm volatile
 800f726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72a:	f383 8811 	msr	BASEPRI, r3
 800f72e:	f3bf 8f6f 	isb	sy
 800f732:	f3bf 8f4f 	dsb	sy
 800f736:	603b      	str	r3, [r7, #0]
}
 800f738:	bf00      	nop
 800f73a:	e7fe      	b.n	800f73a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f73c:	f001 fa42 	bl	8010bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f740:	4b39      	ldr	r3, [pc, #228]	; (800f828 <xTaskResumeAll+0x118>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	3b01      	subs	r3, #1
 800f746:	4a38      	ldr	r2, [pc, #224]	; (800f828 <xTaskResumeAll+0x118>)
 800f748:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f74a:	4b37      	ldr	r3, [pc, #220]	; (800f828 <xTaskResumeAll+0x118>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d162      	bne.n	800f818 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f752:	4b36      	ldr	r3, [pc, #216]	; (800f82c <xTaskResumeAll+0x11c>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d05e      	beq.n	800f818 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f75a:	e02f      	b.n	800f7bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f75c:	4b34      	ldr	r3, [pc, #208]	; (800f830 <xTaskResumeAll+0x120>)
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	3318      	adds	r3, #24
 800f768:	4618      	mov	r0, r3
 800f76a:	f7fe fc79 	bl	800e060 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	3304      	adds	r3, #4
 800f772:	4618      	mov	r0, r3
 800f774:	f7fe fc74 	bl	800e060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f77c:	4b2d      	ldr	r3, [pc, #180]	; (800f834 <xTaskResumeAll+0x124>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	429a      	cmp	r2, r3
 800f782:	d903      	bls.n	800f78c <xTaskResumeAll+0x7c>
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f788:	4a2a      	ldr	r2, [pc, #168]	; (800f834 <xTaskResumeAll+0x124>)
 800f78a:	6013      	str	r3, [r2, #0]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f790:	4613      	mov	r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	4a27      	ldr	r2, [pc, #156]	; (800f838 <xTaskResumeAll+0x128>)
 800f79a:	441a      	add	r2, r3
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	3304      	adds	r3, #4
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	4610      	mov	r0, r2
 800f7a4:	f7fe fbff 	bl	800dfa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7ac:	4b23      	ldr	r3, [pc, #140]	; (800f83c <xTaskResumeAll+0x12c>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d302      	bcc.n	800f7bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f7b6:	4b22      	ldr	r3, [pc, #136]	; (800f840 <xTaskResumeAll+0x130>)
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7bc:	4b1c      	ldr	r3, [pc, #112]	; (800f830 <xTaskResumeAll+0x120>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d1cb      	bne.n	800f75c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d001      	beq.n	800f7ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f7ca:	f000 fb71 	bl	800feb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f7ce:	4b1d      	ldr	r3, [pc, #116]	; (800f844 <xTaskResumeAll+0x134>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d010      	beq.n	800f7fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f7da:	f000 f859 	bl	800f890 <xTaskIncrementTick>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d002      	beq.n	800f7ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f7e4:	4b16      	ldr	r3, [pc, #88]	; (800f840 <xTaskResumeAll+0x130>)
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	3b01      	subs	r3, #1
 800f7ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1f1      	bne.n	800f7da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f7f6:	4b13      	ldr	r3, [pc, #76]	; (800f844 <xTaskResumeAll+0x134>)
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f7fc:	4b10      	ldr	r3, [pc, #64]	; (800f840 <xTaskResumeAll+0x130>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d009      	beq.n	800f818 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f804:	2301      	movs	r3, #1
 800f806:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f808:	4b0f      	ldr	r3, [pc, #60]	; (800f848 <xTaskResumeAll+0x138>)
 800f80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f80e:	601a      	str	r2, [r3, #0]
 800f810:	f3bf 8f4f 	dsb	sy
 800f814:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f818:	f001 fa04 	bl	8010c24 <vPortExitCritical>

	return xAlreadyYielded;
 800f81c:	68bb      	ldr	r3, [r7, #8]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	20001ae0 	.word	0x20001ae0
 800f82c:	20001ab8 	.word	0x20001ab8
 800f830:	20001a78 	.word	0x20001a78
 800f834:	20001ac0 	.word	0x20001ac0
 800f838:	200015e8 	.word	0x200015e8
 800f83c:	200015e4 	.word	0x200015e4
 800f840:	20001acc 	.word	0x20001acc
 800f844:	20001ac8 	.word	0x20001ac8
 800f848:	e000ed04 	.word	0xe000ed04

0800f84c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f852:	4b05      	ldr	r3, [pc, #20]	; (800f868 <xTaskGetTickCount+0x1c>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f858:	687b      	ldr	r3, [r7, #4]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	370c      	adds	r7, #12
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	20001abc 	.word	0x20001abc

0800f86c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f872:	f001 fa89 	bl	8010d88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f876:	2300      	movs	r3, #0
 800f878:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f87a:	4b04      	ldr	r3, [pc, #16]	; (800f88c <xTaskGetTickCountFromISR+0x20>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f880:	683b      	ldr	r3, [r7, #0]
}
 800f882:	4618      	mov	r0, r3
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	20001abc 	.word	0x20001abc

0800f890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b086      	sub	sp, #24
 800f894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f896:	2300      	movs	r3, #0
 800f898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f89a:	4b4f      	ldr	r3, [pc, #316]	; (800f9d8 <xTaskIncrementTick+0x148>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f040 808f 	bne.w	800f9c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f8a4:	4b4d      	ldr	r3, [pc, #308]	; (800f9dc <xTaskIncrementTick+0x14c>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f8ac:	4a4b      	ldr	r2, [pc, #300]	; (800f9dc <xTaskIncrementTick+0x14c>)
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d120      	bne.n	800f8fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f8b8:	4b49      	ldr	r3, [pc, #292]	; (800f9e0 <xTaskIncrementTick+0x150>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d00a      	beq.n	800f8d8 <xTaskIncrementTick+0x48>
	__asm volatile
 800f8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c6:	f383 8811 	msr	BASEPRI, r3
 800f8ca:	f3bf 8f6f 	isb	sy
 800f8ce:	f3bf 8f4f 	dsb	sy
 800f8d2:	603b      	str	r3, [r7, #0]
}
 800f8d4:	bf00      	nop
 800f8d6:	e7fe      	b.n	800f8d6 <xTaskIncrementTick+0x46>
 800f8d8:	4b41      	ldr	r3, [pc, #260]	; (800f9e0 <xTaskIncrementTick+0x150>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	60fb      	str	r3, [r7, #12]
 800f8de:	4b41      	ldr	r3, [pc, #260]	; (800f9e4 <xTaskIncrementTick+0x154>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4a3f      	ldr	r2, [pc, #252]	; (800f9e0 <xTaskIncrementTick+0x150>)
 800f8e4:	6013      	str	r3, [r2, #0]
 800f8e6:	4a3f      	ldr	r2, [pc, #252]	; (800f9e4 <xTaskIncrementTick+0x154>)
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	6013      	str	r3, [r2, #0]
 800f8ec:	4b3e      	ldr	r3, [pc, #248]	; (800f9e8 <xTaskIncrementTick+0x158>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	4a3d      	ldr	r2, [pc, #244]	; (800f9e8 <xTaskIncrementTick+0x158>)
 800f8f4:	6013      	str	r3, [r2, #0]
 800f8f6:	f000 fadb 	bl	800feb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f8fa:	4b3c      	ldr	r3, [pc, #240]	; (800f9ec <xTaskIncrementTick+0x15c>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	693a      	ldr	r2, [r7, #16]
 800f900:	429a      	cmp	r2, r3
 800f902:	d349      	bcc.n	800f998 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f904:	4b36      	ldr	r3, [pc, #216]	; (800f9e0 <xTaskIncrementTick+0x150>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d104      	bne.n	800f918 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f90e:	4b37      	ldr	r3, [pc, #220]	; (800f9ec <xTaskIncrementTick+0x15c>)
 800f910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f914:	601a      	str	r2, [r3, #0]
					break;
 800f916:	e03f      	b.n	800f998 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f918:	4b31      	ldr	r3, [pc, #196]	; (800f9e0 <xTaskIncrementTick+0x150>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f928:	693a      	ldr	r2, [r7, #16]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d203      	bcs.n	800f938 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f930:	4a2e      	ldr	r2, [pc, #184]	; (800f9ec <xTaskIncrementTick+0x15c>)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f936:	e02f      	b.n	800f998 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	3304      	adds	r3, #4
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7fe fb8f 	bl	800e060 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f946:	2b00      	cmp	r3, #0
 800f948:	d004      	beq.n	800f954 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	3318      	adds	r3, #24
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fe fb86 	bl	800e060 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f958:	4b25      	ldr	r3, [pc, #148]	; (800f9f0 <xTaskIncrementTick+0x160>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d903      	bls.n	800f968 <xTaskIncrementTick+0xd8>
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f964:	4a22      	ldr	r2, [pc, #136]	; (800f9f0 <xTaskIncrementTick+0x160>)
 800f966:	6013      	str	r3, [r2, #0]
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f96c:	4613      	mov	r3, r2
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	4413      	add	r3, r2
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	4a1f      	ldr	r2, [pc, #124]	; (800f9f4 <xTaskIncrementTick+0x164>)
 800f976:	441a      	add	r2, r3
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	3304      	adds	r3, #4
 800f97c:	4619      	mov	r1, r3
 800f97e:	4610      	mov	r0, r2
 800f980:	f7fe fb11 	bl	800dfa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f988:	4b1b      	ldr	r3, [pc, #108]	; (800f9f8 <xTaskIncrementTick+0x168>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98e:	429a      	cmp	r2, r3
 800f990:	d3b8      	bcc.n	800f904 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f992:	2301      	movs	r3, #1
 800f994:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f996:	e7b5      	b.n	800f904 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f998:	4b17      	ldr	r3, [pc, #92]	; (800f9f8 <xTaskIncrementTick+0x168>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f99e:	4915      	ldr	r1, [pc, #84]	; (800f9f4 <xTaskIncrementTick+0x164>)
 800f9a0:	4613      	mov	r3, r2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4413      	add	r3, r2
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	440b      	add	r3, r1
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d901      	bls.n	800f9b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f9b4:	4b11      	ldr	r3, [pc, #68]	; (800f9fc <xTaskIncrementTick+0x16c>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d007      	beq.n	800f9cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f9bc:	2301      	movs	r3, #1
 800f9be:	617b      	str	r3, [r7, #20]
 800f9c0:	e004      	b.n	800f9cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f9c2:	4b0f      	ldr	r3, [pc, #60]	; (800fa00 <xTaskIncrementTick+0x170>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	4a0d      	ldr	r2, [pc, #52]	; (800fa00 <xTaskIncrementTick+0x170>)
 800f9ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f9cc:	697b      	ldr	r3, [r7, #20]
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3718      	adds	r7, #24
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	20001ae0 	.word	0x20001ae0
 800f9dc:	20001abc 	.word	0x20001abc
 800f9e0:	20001a70 	.word	0x20001a70
 800f9e4:	20001a74 	.word	0x20001a74
 800f9e8:	20001ad0 	.word	0x20001ad0
 800f9ec:	20001ad8 	.word	0x20001ad8
 800f9f0:	20001ac0 	.word	0x20001ac0
 800f9f4:	200015e8 	.word	0x200015e8
 800f9f8:	200015e4 	.word	0x200015e4
 800f9fc:	20001acc 	.word	0x20001acc
 800fa00:	20001ac8 	.word	0x20001ac8

0800fa04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa04:	b480      	push	{r7}
 800fa06:	b085      	sub	sp, #20
 800fa08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa0a:	4b2a      	ldr	r3, [pc, #168]	; (800fab4 <vTaskSwitchContext+0xb0>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d003      	beq.n	800fa1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa12:	4b29      	ldr	r3, [pc, #164]	; (800fab8 <vTaskSwitchContext+0xb4>)
 800fa14:	2201      	movs	r2, #1
 800fa16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa18:	e046      	b.n	800faa8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fa1a:	4b27      	ldr	r3, [pc, #156]	; (800fab8 <vTaskSwitchContext+0xb4>)
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa20:	4b26      	ldr	r3, [pc, #152]	; (800fabc <vTaskSwitchContext+0xb8>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	60fb      	str	r3, [r7, #12]
 800fa26:	e010      	b.n	800fa4a <vTaskSwitchContext+0x46>
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d10a      	bne.n	800fa44 <vTaskSwitchContext+0x40>
	__asm volatile
 800fa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa32:	f383 8811 	msr	BASEPRI, r3
 800fa36:	f3bf 8f6f 	isb	sy
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	607b      	str	r3, [r7, #4]
}
 800fa40:	bf00      	nop
 800fa42:	e7fe      	b.n	800fa42 <vTaskSwitchContext+0x3e>
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	3b01      	subs	r3, #1
 800fa48:	60fb      	str	r3, [r7, #12]
 800fa4a:	491d      	ldr	r1, [pc, #116]	; (800fac0 <vTaskSwitchContext+0xbc>)
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	4613      	mov	r3, r2
 800fa50:	009b      	lsls	r3, r3, #2
 800fa52:	4413      	add	r3, r2
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	440b      	add	r3, r1
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d0e4      	beq.n	800fa28 <vTaskSwitchContext+0x24>
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	4613      	mov	r3, r2
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	4413      	add	r3, r2
 800fa66:	009b      	lsls	r3, r3, #2
 800fa68:	4a15      	ldr	r2, [pc, #84]	; (800fac0 <vTaskSwitchContext+0xbc>)
 800fa6a:	4413      	add	r3, r2
 800fa6c:	60bb      	str	r3, [r7, #8]
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	685a      	ldr	r2, [r3, #4]
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	605a      	str	r2, [r3, #4]
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	685a      	ldr	r2, [r3, #4]
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	3308      	adds	r3, #8
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d104      	bne.n	800fa8e <vTaskSwitchContext+0x8a>
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	685a      	ldr	r2, [r3, #4]
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	605a      	str	r2, [r3, #4]
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	4a0b      	ldr	r2, [pc, #44]	; (800fac4 <vTaskSwitchContext+0xc0>)
 800fa96:	6013      	str	r3, [r2, #0]
 800fa98:	4a08      	ldr	r2, [pc, #32]	; (800fabc <vTaskSwitchContext+0xb8>)
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa9e:	4b09      	ldr	r3, [pc, #36]	; (800fac4 <vTaskSwitchContext+0xc0>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	3354      	adds	r3, #84	; 0x54
 800faa4:	4a08      	ldr	r2, [pc, #32]	; (800fac8 <vTaskSwitchContext+0xc4>)
 800faa6:	6013      	str	r3, [r2, #0]
}
 800faa8:	bf00      	nop
 800faaa:	3714      	adds	r7, #20
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr
 800fab4:	20001ae0 	.word	0x20001ae0
 800fab8:	20001acc 	.word	0x20001acc
 800fabc:	20001ac0 	.word	0x20001ac0
 800fac0:	200015e8 	.word	0x200015e8
 800fac4:	200015e4 	.word	0x200015e4
 800fac8:	20000024 	.word	0x20000024

0800facc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d10a      	bne.n	800faf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae0:	f383 8811 	msr	BASEPRI, r3
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	f3bf 8f4f 	dsb	sy
 800faec:	60fb      	str	r3, [r7, #12]
}
 800faee:	bf00      	nop
 800faf0:	e7fe      	b.n	800faf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800faf2:	4b07      	ldr	r3, [pc, #28]	; (800fb10 <vTaskPlaceOnEventList+0x44>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	3318      	adds	r3, #24
 800faf8:	4619      	mov	r1, r3
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7fe fa77 	bl	800dfee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb00:	2101      	movs	r1, #1
 800fb02:	6838      	ldr	r0, [r7, #0]
 800fb04:	f000 fb8e 	bl	8010224 <prvAddCurrentTaskToDelayedList>
}
 800fb08:	bf00      	nop
 800fb0a:	3710      	adds	r7, #16
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	200015e4 	.word	0x200015e4

0800fb14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b086      	sub	sp, #24
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	60b9      	str	r1, [r7, #8]
 800fb1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d10a      	bne.n	800fb3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2a:	f383 8811 	msr	BASEPRI, r3
 800fb2e:	f3bf 8f6f 	isb	sy
 800fb32:	f3bf 8f4f 	dsb	sy
 800fb36:	617b      	str	r3, [r7, #20]
}
 800fb38:	bf00      	nop
 800fb3a:	e7fe      	b.n	800fb3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb3c:	4b0a      	ldr	r3, [pc, #40]	; (800fb68 <vTaskPlaceOnEventListRestricted+0x54>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	3318      	adds	r3, #24
 800fb42:	4619      	mov	r1, r3
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f7fe fa2e 	bl	800dfa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d002      	beq.n	800fb56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fb50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fb56:	6879      	ldr	r1, [r7, #4]
 800fb58:	68b8      	ldr	r0, [r7, #8]
 800fb5a:	f000 fb63 	bl	8010224 <prvAddCurrentTaskToDelayedList>
	}
 800fb5e:	bf00      	nop
 800fb60:	3718      	adds	r7, #24
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	200015e4 	.word	0x200015e4

0800fb6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b086      	sub	sp, #24
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	68db      	ldr	r3, [r3, #12]
 800fb7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d10a      	bne.n	800fb98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb86:	f383 8811 	msr	BASEPRI, r3
 800fb8a:	f3bf 8f6f 	isb	sy
 800fb8e:	f3bf 8f4f 	dsb	sy
 800fb92:	60fb      	str	r3, [r7, #12]
}
 800fb94:	bf00      	nop
 800fb96:	e7fe      	b.n	800fb96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	3318      	adds	r3, #24
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe fa5f 	bl	800e060 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fba2:	4b1e      	ldr	r3, [pc, #120]	; (800fc1c <xTaskRemoveFromEventList+0xb0>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d11d      	bne.n	800fbe6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	3304      	adds	r3, #4
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fe fa56 	bl	800e060 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb8:	4b19      	ldr	r3, [pc, #100]	; (800fc20 <xTaskRemoveFromEventList+0xb4>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d903      	bls.n	800fbc8 <xTaskRemoveFromEventList+0x5c>
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbc4:	4a16      	ldr	r2, [pc, #88]	; (800fc20 <xTaskRemoveFromEventList+0xb4>)
 800fbc6:	6013      	str	r3, [r2, #0]
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbcc:	4613      	mov	r3, r2
 800fbce:	009b      	lsls	r3, r3, #2
 800fbd0:	4413      	add	r3, r2
 800fbd2:	009b      	lsls	r3, r3, #2
 800fbd4:	4a13      	ldr	r2, [pc, #76]	; (800fc24 <xTaskRemoveFromEventList+0xb8>)
 800fbd6:	441a      	add	r2, r3
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	3304      	adds	r3, #4
 800fbdc:	4619      	mov	r1, r3
 800fbde:	4610      	mov	r0, r2
 800fbe0:	f7fe f9e1 	bl	800dfa6 <vListInsertEnd>
 800fbe4:	e005      	b.n	800fbf2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	3318      	adds	r3, #24
 800fbea:	4619      	mov	r1, r3
 800fbec:	480e      	ldr	r0, [pc, #56]	; (800fc28 <xTaskRemoveFromEventList+0xbc>)
 800fbee:	f7fe f9da 	bl	800dfa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf6:	4b0d      	ldr	r3, [pc, #52]	; (800fc2c <xTaskRemoveFromEventList+0xc0>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d905      	bls.n	800fc0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc00:	2301      	movs	r3, #1
 800fc02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc04:	4b0a      	ldr	r3, [pc, #40]	; (800fc30 <xTaskRemoveFromEventList+0xc4>)
 800fc06:	2201      	movs	r2, #1
 800fc08:	601a      	str	r2, [r3, #0]
 800fc0a:	e001      	b.n	800fc10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc10:	697b      	ldr	r3, [r7, #20]
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3718      	adds	r7, #24
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	20001ae0 	.word	0x20001ae0
 800fc20:	20001ac0 	.word	0x20001ac0
 800fc24:	200015e8 	.word	0x200015e8
 800fc28:	20001a78 	.word	0x20001a78
 800fc2c:	200015e4 	.word	0x200015e4
 800fc30:	20001acc 	.word	0x20001acc

0800fc34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc3c:	4b06      	ldr	r3, [pc, #24]	; (800fc58 <vTaskInternalSetTimeOutState+0x24>)
 800fc3e:	681a      	ldr	r2, [r3, #0]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc44:	4b05      	ldr	r3, [pc, #20]	; (800fc5c <vTaskInternalSetTimeOutState+0x28>)
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	605a      	str	r2, [r3, #4]
}
 800fc4c:	bf00      	nop
 800fc4e:	370c      	adds	r7, #12
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr
 800fc58:	20001ad0 	.word	0x20001ad0
 800fc5c:	20001abc 	.word	0x20001abc

0800fc60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b088      	sub	sp, #32
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d10a      	bne.n	800fc86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc74:	f383 8811 	msr	BASEPRI, r3
 800fc78:	f3bf 8f6f 	isb	sy
 800fc7c:	f3bf 8f4f 	dsb	sy
 800fc80:	613b      	str	r3, [r7, #16]
}
 800fc82:	bf00      	nop
 800fc84:	e7fe      	b.n	800fc84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d10a      	bne.n	800fca2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc90:	f383 8811 	msr	BASEPRI, r3
 800fc94:	f3bf 8f6f 	isb	sy
 800fc98:	f3bf 8f4f 	dsb	sy
 800fc9c:	60fb      	str	r3, [r7, #12]
}
 800fc9e:	bf00      	nop
 800fca0:	e7fe      	b.n	800fca0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fca2:	f000 ff8f 	bl	8010bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fca6:	4b1d      	ldr	r3, [pc, #116]	; (800fd1c <xTaskCheckForTimeOut+0xbc>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	685b      	ldr	r3, [r3, #4]
 800fcb0:	69ba      	ldr	r2, [r7, #24]
 800fcb2:	1ad3      	subs	r3, r2, r3
 800fcb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcbe:	d102      	bne.n	800fcc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	61fb      	str	r3, [r7, #28]
 800fcc4:	e023      	b.n	800fd0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681a      	ldr	r2, [r3, #0]
 800fcca:	4b15      	ldr	r3, [pc, #84]	; (800fd20 <xTaskCheckForTimeOut+0xc0>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d007      	beq.n	800fce2 <xTaskCheckForTimeOut+0x82>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	69ba      	ldr	r2, [r7, #24]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d302      	bcc.n	800fce2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	61fb      	str	r3, [r7, #28]
 800fce0:	e015      	b.n	800fd0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d20b      	bcs.n	800fd04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	1ad2      	subs	r2, r2, r3
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f7ff ff9b 	bl	800fc34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	61fb      	str	r3, [r7, #28]
 800fd02:	e004      	b.n	800fd0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	2200      	movs	r2, #0
 800fd08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd0e:	f000 ff89 	bl	8010c24 <vPortExitCritical>

	return xReturn;
 800fd12:	69fb      	ldr	r3, [r7, #28]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3720      	adds	r7, #32
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	20001abc 	.word	0x20001abc
 800fd20:	20001ad0 	.word	0x20001ad0

0800fd24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd24:	b480      	push	{r7}
 800fd26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd28:	4b03      	ldr	r3, [pc, #12]	; (800fd38 <vTaskMissedYield+0x14>)
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	601a      	str	r2, [r3, #0]
}
 800fd2e:	bf00      	nop
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	20001acc 	.word	0x20001acc

0800fd3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd44:	f000 f852 	bl	800fdec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fd48:	4b06      	ldr	r3, [pc, #24]	; (800fd64 <prvIdleTask+0x28>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	2b01      	cmp	r3, #1
 800fd4e:	d9f9      	bls.n	800fd44 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fd50:	4b05      	ldr	r3, [pc, #20]	; (800fd68 <prvIdleTask+0x2c>)
 800fd52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd56:	601a      	str	r2, [r3, #0]
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fd60:	e7f0      	b.n	800fd44 <prvIdleTask+0x8>
 800fd62:	bf00      	nop
 800fd64:	200015e8 	.word	0x200015e8
 800fd68:	e000ed04 	.word	0xe000ed04

0800fd6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd72:	2300      	movs	r3, #0
 800fd74:	607b      	str	r3, [r7, #4]
 800fd76:	e00c      	b.n	800fd92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	4413      	add	r3, r2
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	4a12      	ldr	r2, [pc, #72]	; (800fdcc <prvInitialiseTaskLists+0x60>)
 800fd84:	4413      	add	r3, r2
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fe f8e0 	bl	800df4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	607b      	str	r3, [r7, #4]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2b37      	cmp	r3, #55	; 0x37
 800fd96:	d9ef      	bls.n	800fd78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fd98:	480d      	ldr	r0, [pc, #52]	; (800fdd0 <prvInitialiseTaskLists+0x64>)
 800fd9a:	f7fe f8d7 	bl	800df4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fd9e:	480d      	ldr	r0, [pc, #52]	; (800fdd4 <prvInitialiseTaskLists+0x68>)
 800fda0:	f7fe f8d4 	bl	800df4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fda4:	480c      	ldr	r0, [pc, #48]	; (800fdd8 <prvInitialiseTaskLists+0x6c>)
 800fda6:	f7fe f8d1 	bl	800df4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fdaa:	480c      	ldr	r0, [pc, #48]	; (800fddc <prvInitialiseTaskLists+0x70>)
 800fdac:	f7fe f8ce 	bl	800df4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fdb0:	480b      	ldr	r0, [pc, #44]	; (800fde0 <prvInitialiseTaskLists+0x74>)
 800fdb2:	f7fe f8cb 	bl	800df4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fdb6:	4b0b      	ldr	r3, [pc, #44]	; (800fde4 <prvInitialiseTaskLists+0x78>)
 800fdb8:	4a05      	ldr	r2, [pc, #20]	; (800fdd0 <prvInitialiseTaskLists+0x64>)
 800fdba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fdbc:	4b0a      	ldr	r3, [pc, #40]	; (800fde8 <prvInitialiseTaskLists+0x7c>)
 800fdbe:	4a05      	ldr	r2, [pc, #20]	; (800fdd4 <prvInitialiseTaskLists+0x68>)
 800fdc0:	601a      	str	r2, [r3, #0]
}
 800fdc2:	bf00      	nop
 800fdc4:	3708      	adds	r7, #8
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	200015e8 	.word	0x200015e8
 800fdd0:	20001a48 	.word	0x20001a48
 800fdd4:	20001a5c 	.word	0x20001a5c
 800fdd8:	20001a78 	.word	0x20001a78
 800fddc:	20001a8c 	.word	0x20001a8c
 800fde0:	20001aa4 	.word	0x20001aa4
 800fde4:	20001a70 	.word	0x20001a70
 800fde8:	20001a74 	.word	0x20001a74

0800fdec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fdf2:	e019      	b.n	800fe28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fdf4:	f000 fee6 	bl	8010bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdf8:	4b10      	ldr	r3, [pc, #64]	; (800fe3c <prvCheckTasksWaitingTermination+0x50>)
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	3304      	adds	r3, #4
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7fe f92b 	bl	800e060 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe0a:	4b0d      	ldr	r3, [pc, #52]	; (800fe40 <prvCheckTasksWaitingTermination+0x54>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	3b01      	subs	r3, #1
 800fe10:	4a0b      	ldr	r2, [pc, #44]	; (800fe40 <prvCheckTasksWaitingTermination+0x54>)
 800fe12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe14:	4b0b      	ldr	r3, [pc, #44]	; (800fe44 <prvCheckTasksWaitingTermination+0x58>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	3b01      	subs	r3, #1
 800fe1a:	4a0a      	ldr	r2, [pc, #40]	; (800fe44 <prvCheckTasksWaitingTermination+0x58>)
 800fe1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe1e:	f000 ff01 	bl	8010c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 f810 	bl	800fe48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe28:	4b06      	ldr	r3, [pc, #24]	; (800fe44 <prvCheckTasksWaitingTermination+0x58>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d1e1      	bne.n	800fdf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe30:	bf00      	nop
 800fe32:	bf00      	nop
 800fe34:	3708      	adds	r7, #8
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	20001a8c 	.word	0x20001a8c
 800fe40:	20001ab8 	.word	0x20001ab8
 800fe44:	20001aa0 	.word	0x20001aa0

0800fe48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b084      	sub	sp, #16
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	3354      	adds	r3, #84	; 0x54
 800fe54:	4618      	mov	r0, r3
 800fe56:	f002 fa17 	bl	8012288 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d108      	bne.n	800fe76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f001 f899 	bl	8010fa0 <vPortFree>
				vPortFree( pxTCB );
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f001 f896 	bl	8010fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe74:	e018      	b.n	800fea8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d103      	bne.n	800fe88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f001 f88d 	bl	8010fa0 <vPortFree>
	}
 800fe86:	e00f      	b.n	800fea8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fe8e:	2b02      	cmp	r3, #2
 800fe90:	d00a      	beq.n	800fea8 <prvDeleteTCB+0x60>
	__asm volatile
 800fe92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe96:	f383 8811 	msr	BASEPRI, r3
 800fe9a:	f3bf 8f6f 	isb	sy
 800fe9e:	f3bf 8f4f 	dsb	sy
 800fea2:	60fb      	str	r3, [r7, #12]
}
 800fea4:	bf00      	nop
 800fea6:	e7fe      	b.n	800fea6 <prvDeleteTCB+0x5e>
	}
 800fea8:	bf00      	nop
 800feaa:	3710      	adds	r7, #16
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800feb6:	4b0c      	ldr	r3, [pc, #48]	; (800fee8 <prvResetNextTaskUnblockTime+0x38>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d104      	bne.n	800feca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fec0:	4b0a      	ldr	r3, [pc, #40]	; (800feec <prvResetNextTaskUnblockTime+0x3c>)
 800fec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fec8:	e008      	b.n	800fedc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feca:	4b07      	ldr	r3, [pc, #28]	; (800fee8 <prvResetNextTaskUnblockTime+0x38>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	68db      	ldr	r3, [r3, #12]
 800fed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	4a04      	ldr	r2, [pc, #16]	; (800feec <prvResetNextTaskUnblockTime+0x3c>)
 800feda:	6013      	str	r3, [r2, #0]
}
 800fedc:	bf00      	nop
 800fede:	370c      	adds	r7, #12
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr
 800fee8:	20001a70 	.word	0x20001a70
 800feec:	20001ad8 	.word	0x20001ad8

0800fef0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fef6:	4b05      	ldr	r3, [pc, #20]	; (800ff0c <xTaskGetCurrentTaskHandle+0x1c>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fefc:	687b      	ldr	r3, [r7, #4]
	}
 800fefe:	4618      	mov	r0, r3
 800ff00:	370c      	adds	r7, #12
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr
 800ff0a:	bf00      	nop
 800ff0c:	200015e4 	.word	0x200015e4

0800ff10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ff16:	4b0b      	ldr	r3, [pc, #44]	; (800ff44 <xTaskGetSchedulerState+0x34>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d102      	bne.n	800ff24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	607b      	str	r3, [r7, #4]
 800ff22:	e008      	b.n	800ff36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff24:	4b08      	ldr	r3, [pc, #32]	; (800ff48 <xTaskGetSchedulerState+0x38>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d102      	bne.n	800ff32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff2c:	2302      	movs	r3, #2
 800ff2e:	607b      	str	r3, [r7, #4]
 800ff30:	e001      	b.n	800ff36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff32:	2300      	movs	r3, #0
 800ff34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff36:	687b      	ldr	r3, [r7, #4]
	}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr
 800ff44:	20001ac4 	.word	0x20001ac4
 800ff48:	20001ae0 	.word	0x20001ae0

0800ff4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d051      	beq.n	8010006 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff66:	4b2a      	ldr	r3, [pc, #168]	; (8010010 <xTaskPriorityInherit+0xc4>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d241      	bcs.n	800fff4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	699b      	ldr	r3, [r3, #24]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	db06      	blt.n	800ff86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff78:	4b25      	ldr	r3, [pc, #148]	; (8010010 <xTaskPriorityInherit+0xc4>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	6959      	ldr	r1, [r3, #20]
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff8e:	4613      	mov	r3, r2
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	4413      	add	r3, r2
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	4a1f      	ldr	r2, [pc, #124]	; (8010014 <xTaskPriorityInherit+0xc8>)
 800ff98:	4413      	add	r3, r2
 800ff9a:	4299      	cmp	r1, r3
 800ff9c:	d122      	bne.n	800ffe4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe f85c 	bl	800e060 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffa8:	4b19      	ldr	r3, [pc, #100]	; (8010010 <xTaskPriorityInherit+0xc4>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb6:	4b18      	ldr	r3, [pc, #96]	; (8010018 <xTaskPriorityInherit+0xcc>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d903      	bls.n	800ffc6 <xTaskPriorityInherit+0x7a>
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc2:	4a15      	ldr	r2, [pc, #84]	; (8010018 <xTaskPriorityInherit+0xcc>)
 800ffc4:	6013      	str	r3, [r2, #0]
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffca:	4613      	mov	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	4413      	add	r3, r2
 800ffd0:	009b      	lsls	r3, r3, #2
 800ffd2:	4a10      	ldr	r2, [pc, #64]	; (8010014 <xTaskPriorityInherit+0xc8>)
 800ffd4:	441a      	add	r2, r3
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	3304      	adds	r3, #4
 800ffda:	4619      	mov	r1, r3
 800ffdc:	4610      	mov	r0, r2
 800ffde:	f7fd ffe2 	bl	800dfa6 <vListInsertEnd>
 800ffe2:	e004      	b.n	800ffee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffe4:	4b0a      	ldr	r3, [pc, #40]	; (8010010 <xTaskPriorityInherit+0xc4>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ffee:	2301      	movs	r3, #1
 800fff0:	60fb      	str	r3, [r7, #12]
 800fff2:	e008      	b.n	8010006 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fff8:	4b05      	ldr	r3, [pc, #20]	; (8010010 <xTaskPriorityInherit+0xc4>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fffe:	429a      	cmp	r2, r3
 8010000:	d201      	bcs.n	8010006 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010002:	2301      	movs	r3, #1
 8010004:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010006:	68fb      	ldr	r3, [r7, #12]
	}
 8010008:	4618      	mov	r0, r3
 801000a:	3710      	adds	r7, #16
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	200015e4 	.word	0x200015e4
 8010014:	200015e8 	.word	0x200015e8
 8010018:	20001ac0 	.word	0x20001ac0

0801001c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801001c:	b580      	push	{r7, lr}
 801001e:	b086      	sub	sp, #24
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010028:	2300      	movs	r3, #0
 801002a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d056      	beq.n	80100e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010032:	4b2e      	ldr	r3, [pc, #184]	; (80100ec <xTaskPriorityDisinherit+0xd0>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	693a      	ldr	r2, [r7, #16]
 8010038:	429a      	cmp	r2, r3
 801003a:	d00a      	beq.n	8010052 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801003c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010040:	f383 8811 	msr	BASEPRI, r3
 8010044:	f3bf 8f6f 	isb	sy
 8010048:	f3bf 8f4f 	dsb	sy
 801004c:	60fb      	str	r3, [r7, #12]
}
 801004e:	bf00      	nop
 8010050:	e7fe      	b.n	8010050 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010056:	2b00      	cmp	r3, #0
 8010058:	d10a      	bne.n	8010070 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801005a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005e:	f383 8811 	msr	BASEPRI, r3
 8010062:	f3bf 8f6f 	isb	sy
 8010066:	f3bf 8f4f 	dsb	sy
 801006a:	60bb      	str	r3, [r7, #8]
}
 801006c:	bf00      	nop
 801006e:	e7fe      	b.n	801006e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010074:	1e5a      	subs	r2, r3, #1
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010082:	429a      	cmp	r2, r3
 8010084:	d02c      	beq.n	80100e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801008a:	2b00      	cmp	r3, #0
 801008c:	d128      	bne.n	80100e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	3304      	adds	r3, #4
 8010092:	4618      	mov	r0, r3
 8010094:	f7fd ffe4 	bl	800e060 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b0:	4b0f      	ldr	r3, [pc, #60]	; (80100f0 <xTaskPriorityDisinherit+0xd4>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d903      	bls.n	80100c0 <xTaskPriorityDisinherit+0xa4>
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100bc:	4a0c      	ldr	r2, [pc, #48]	; (80100f0 <xTaskPriorityDisinherit+0xd4>)
 80100be:	6013      	str	r3, [r2, #0]
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100c4:	4613      	mov	r3, r2
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	4413      	add	r3, r2
 80100ca:	009b      	lsls	r3, r3, #2
 80100cc:	4a09      	ldr	r2, [pc, #36]	; (80100f4 <xTaskPriorityDisinherit+0xd8>)
 80100ce:	441a      	add	r2, r3
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	3304      	adds	r3, #4
 80100d4:	4619      	mov	r1, r3
 80100d6:	4610      	mov	r0, r2
 80100d8:	f7fd ff65 	bl	800dfa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80100dc:	2301      	movs	r3, #1
 80100de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80100e0:	697b      	ldr	r3, [r7, #20]
	}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3718      	adds	r7, #24
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	200015e4 	.word	0x200015e4
 80100f0:	20001ac0 	.word	0x20001ac0
 80100f4:	200015e8 	.word	0x200015e8

080100f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b088      	sub	sp, #32
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010106:	2301      	movs	r3, #1
 8010108:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d06a      	beq.n	80101e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010110:	69bb      	ldr	r3, [r7, #24]
 8010112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010114:	2b00      	cmp	r3, #0
 8010116:	d10a      	bne.n	801012e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011c:	f383 8811 	msr	BASEPRI, r3
 8010120:	f3bf 8f6f 	isb	sy
 8010124:	f3bf 8f4f 	dsb	sy
 8010128:	60fb      	str	r3, [r7, #12]
}
 801012a:	bf00      	nop
 801012c:	e7fe      	b.n	801012c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801012e:	69bb      	ldr	r3, [r7, #24]
 8010130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010132:	683a      	ldr	r2, [r7, #0]
 8010134:	429a      	cmp	r2, r3
 8010136:	d902      	bls.n	801013e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	61fb      	str	r3, [r7, #28]
 801013c:	e002      	b.n	8010144 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801013e:	69bb      	ldr	r3, [r7, #24]
 8010140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010142:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010148:	69fa      	ldr	r2, [r7, #28]
 801014a:	429a      	cmp	r2, r3
 801014c:	d04b      	beq.n	80101e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801014e:	69bb      	ldr	r3, [r7, #24]
 8010150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010152:	697a      	ldr	r2, [r7, #20]
 8010154:	429a      	cmp	r2, r3
 8010156:	d146      	bne.n	80101e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010158:	4b25      	ldr	r3, [pc, #148]	; (80101f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	69ba      	ldr	r2, [r7, #24]
 801015e:	429a      	cmp	r2, r3
 8010160:	d10a      	bne.n	8010178 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010166:	f383 8811 	msr	BASEPRI, r3
 801016a:	f3bf 8f6f 	isb	sy
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	60bb      	str	r3, [r7, #8]
}
 8010174:	bf00      	nop
 8010176:	e7fe      	b.n	8010176 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801017c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	69fa      	ldr	r2, [r7, #28]
 8010182:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010184:	69bb      	ldr	r3, [r7, #24]
 8010186:	699b      	ldr	r3, [r3, #24]
 8010188:	2b00      	cmp	r3, #0
 801018a:	db04      	blt.n	8010196 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010196:	69bb      	ldr	r3, [r7, #24]
 8010198:	6959      	ldr	r1, [r3, #20]
 801019a:	693a      	ldr	r2, [r7, #16]
 801019c:	4613      	mov	r3, r2
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	4413      	add	r3, r2
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	4a13      	ldr	r2, [pc, #76]	; (80101f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80101a6:	4413      	add	r3, r2
 80101a8:	4299      	cmp	r1, r3
 80101aa:	d11c      	bne.n	80101e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	3304      	adds	r3, #4
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7fd ff55 	bl	800e060 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ba:	4b0f      	ldr	r3, [pc, #60]	; (80101f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d903      	bls.n	80101ca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c6:	4a0c      	ldr	r2, [pc, #48]	; (80101f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80101c8:	6013      	str	r3, [r2, #0]
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ce:	4613      	mov	r3, r2
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	4413      	add	r3, r2
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	4a07      	ldr	r2, [pc, #28]	; (80101f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80101d8:	441a      	add	r2, r3
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	3304      	adds	r3, #4
 80101de:	4619      	mov	r1, r3
 80101e0:	4610      	mov	r0, r2
 80101e2:	f7fd fee0 	bl	800dfa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80101e6:	bf00      	nop
 80101e8:	3720      	adds	r7, #32
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	200015e4 	.word	0x200015e4
 80101f4:	200015e8 	.word	0x200015e8
 80101f8:	20001ac0 	.word	0x20001ac0

080101fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80101fc:	b480      	push	{r7}
 80101fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010200:	4b07      	ldr	r3, [pc, #28]	; (8010220 <pvTaskIncrementMutexHeldCount+0x24>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d004      	beq.n	8010212 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010208:	4b05      	ldr	r3, [pc, #20]	; (8010220 <pvTaskIncrementMutexHeldCount+0x24>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801020e:	3201      	adds	r2, #1
 8010210:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010212:	4b03      	ldr	r3, [pc, #12]	; (8010220 <pvTaskIncrementMutexHeldCount+0x24>)
 8010214:	681b      	ldr	r3, [r3, #0]
	}
 8010216:	4618      	mov	r0, r3
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr
 8010220:	200015e4 	.word	0x200015e4

08010224 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801022e:	4b21      	ldr	r3, [pc, #132]	; (80102b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010234:	4b20      	ldr	r3, [pc, #128]	; (80102b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	3304      	adds	r3, #4
 801023a:	4618      	mov	r0, r3
 801023c:	f7fd ff10 	bl	800e060 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010246:	d10a      	bne.n	801025e <prvAddCurrentTaskToDelayedList+0x3a>
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d007      	beq.n	801025e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801024e:	4b1a      	ldr	r3, [pc, #104]	; (80102b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	3304      	adds	r3, #4
 8010254:	4619      	mov	r1, r3
 8010256:	4819      	ldr	r0, [pc, #100]	; (80102bc <prvAddCurrentTaskToDelayedList+0x98>)
 8010258:	f7fd fea5 	bl	800dfa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801025c:	e026      	b.n	80102ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801025e:	68fa      	ldr	r2, [r7, #12]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	4413      	add	r3, r2
 8010264:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010266:	4b14      	ldr	r3, [pc, #80]	; (80102b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	68ba      	ldr	r2, [r7, #8]
 801026c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801026e:	68ba      	ldr	r2, [r7, #8]
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	429a      	cmp	r2, r3
 8010274:	d209      	bcs.n	801028a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010276:	4b12      	ldr	r3, [pc, #72]	; (80102c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	4b0f      	ldr	r3, [pc, #60]	; (80102b8 <prvAddCurrentTaskToDelayedList+0x94>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	3304      	adds	r3, #4
 8010280:	4619      	mov	r1, r3
 8010282:	4610      	mov	r0, r2
 8010284:	f7fd feb3 	bl	800dfee <vListInsert>
}
 8010288:	e010      	b.n	80102ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801028a:	4b0e      	ldr	r3, [pc, #56]	; (80102c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	4b0a      	ldr	r3, [pc, #40]	; (80102b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3304      	adds	r3, #4
 8010294:	4619      	mov	r1, r3
 8010296:	4610      	mov	r0, r2
 8010298:	f7fd fea9 	bl	800dfee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801029c:	4b0a      	ldr	r3, [pc, #40]	; (80102c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d202      	bcs.n	80102ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80102a6:	4a08      	ldr	r2, [pc, #32]	; (80102c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	6013      	str	r3, [r2, #0]
}
 80102ac:	bf00      	nop
 80102ae:	3710      	adds	r7, #16
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	20001abc 	.word	0x20001abc
 80102b8:	200015e4 	.word	0x200015e4
 80102bc:	20001aa4 	.word	0x20001aa4
 80102c0:	20001a74 	.word	0x20001a74
 80102c4:	20001a70 	.word	0x20001a70
 80102c8:	20001ad8 	.word	0x20001ad8

080102cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b08a      	sub	sp, #40	; 0x28
 80102d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80102d2:	2300      	movs	r3, #0
 80102d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80102d6:	f000 fb07 	bl	80108e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80102da:	4b1c      	ldr	r3, [pc, #112]	; (801034c <xTimerCreateTimerTask+0x80>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d021      	beq.n	8010326 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80102e2:	2300      	movs	r3, #0
 80102e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80102e6:	2300      	movs	r3, #0
 80102e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80102ea:	1d3a      	adds	r2, r7, #4
 80102ec:	f107 0108 	add.w	r1, r7, #8
 80102f0:	f107 030c 	add.w	r3, r7, #12
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7fd fe0f 	bl	800df18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80102fa:	6879      	ldr	r1, [r7, #4]
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	68fa      	ldr	r2, [r7, #12]
 8010300:	9202      	str	r2, [sp, #8]
 8010302:	9301      	str	r3, [sp, #4]
 8010304:	2302      	movs	r3, #2
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	2300      	movs	r3, #0
 801030a:	460a      	mov	r2, r1
 801030c:	4910      	ldr	r1, [pc, #64]	; (8010350 <xTimerCreateTimerTask+0x84>)
 801030e:	4811      	ldr	r0, [pc, #68]	; (8010354 <xTimerCreateTimerTask+0x88>)
 8010310:	f7fe ff94 	bl	800f23c <xTaskCreateStatic>
 8010314:	4603      	mov	r3, r0
 8010316:	4a10      	ldr	r2, [pc, #64]	; (8010358 <xTimerCreateTimerTask+0x8c>)
 8010318:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801031a:	4b0f      	ldr	r3, [pc, #60]	; (8010358 <xTimerCreateTimerTask+0x8c>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d001      	beq.n	8010326 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010322:	2301      	movs	r3, #1
 8010324:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d10a      	bne.n	8010342 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801032c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010330:	f383 8811 	msr	BASEPRI, r3
 8010334:	f3bf 8f6f 	isb	sy
 8010338:	f3bf 8f4f 	dsb	sy
 801033c:	613b      	str	r3, [r7, #16]
}
 801033e:	bf00      	nop
 8010340:	e7fe      	b.n	8010340 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010342:	697b      	ldr	r3, [r7, #20]
}
 8010344:	4618      	mov	r0, r3
 8010346:	3718      	adds	r7, #24
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	20001b14 	.word	0x20001b14
 8010350:	08015d04 	.word	0x08015d04
 8010354:	08010491 	.word	0x08010491
 8010358:	20001b18 	.word	0x20001b18

0801035c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b08a      	sub	sp, #40	; 0x28
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	607a      	str	r2, [r7, #4]
 8010368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801036a:	2300      	movs	r3, #0
 801036c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d10a      	bne.n	801038a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010378:	f383 8811 	msr	BASEPRI, r3
 801037c:	f3bf 8f6f 	isb	sy
 8010380:	f3bf 8f4f 	dsb	sy
 8010384:	623b      	str	r3, [r7, #32]
}
 8010386:	bf00      	nop
 8010388:	e7fe      	b.n	8010388 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801038a:	4b1a      	ldr	r3, [pc, #104]	; (80103f4 <xTimerGenericCommand+0x98>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d02a      	beq.n	80103e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	2b05      	cmp	r3, #5
 80103a2:	dc18      	bgt.n	80103d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80103a4:	f7ff fdb4 	bl	800ff10 <xTaskGetSchedulerState>
 80103a8:	4603      	mov	r3, r0
 80103aa:	2b02      	cmp	r3, #2
 80103ac:	d109      	bne.n	80103c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80103ae:	4b11      	ldr	r3, [pc, #68]	; (80103f4 <xTimerGenericCommand+0x98>)
 80103b0:	6818      	ldr	r0, [r3, #0]
 80103b2:	f107 0110 	add.w	r1, r7, #16
 80103b6:	2300      	movs	r3, #0
 80103b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103ba:	f7fe f8d9 	bl	800e570 <xQueueGenericSend>
 80103be:	6278      	str	r0, [r7, #36]	; 0x24
 80103c0:	e012      	b.n	80103e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80103c2:	4b0c      	ldr	r3, [pc, #48]	; (80103f4 <xTimerGenericCommand+0x98>)
 80103c4:	6818      	ldr	r0, [r3, #0]
 80103c6:	f107 0110 	add.w	r1, r7, #16
 80103ca:	2300      	movs	r3, #0
 80103cc:	2200      	movs	r2, #0
 80103ce:	f7fe f8cf 	bl	800e570 <xQueueGenericSend>
 80103d2:	6278      	str	r0, [r7, #36]	; 0x24
 80103d4:	e008      	b.n	80103e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80103d6:	4b07      	ldr	r3, [pc, #28]	; (80103f4 <xTimerGenericCommand+0x98>)
 80103d8:	6818      	ldr	r0, [r3, #0]
 80103da:	f107 0110 	add.w	r1, r7, #16
 80103de:	2300      	movs	r3, #0
 80103e0:	683a      	ldr	r2, [r7, #0]
 80103e2:	f7fe f9c3 	bl	800e76c <xQueueGenericSendFromISR>
 80103e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80103e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3728      	adds	r7, #40	; 0x28
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	20001b14 	.word	0x20001b14

080103f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b088      	sub	sp, #32
 80103fc:	af02      	add	r7, sp, #8
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010402:	4b22      	ldr	r3, [pc, #136]	; (801048c <prvProcessExpiredTimer+0x94>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	3304      	adds	r3, #4
 8010410:	4618      	mov	r0, r3
 8010412:	f7fd fe25 	bl	800e060 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801041c:	f003 0304 	and.w	r3, r3, #4
 8010420:	2b00      	cmp	r3, #0
 8010422:	d022      	beq.n	801046a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	699a      	ldr	r2, [r3, #24]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	18d1      	adds	r1, r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	6978      	ldr	r0, [r7, #20]
 8010432:	f000 f8d1 	bl	80105d8 <prvInsertTimerInActiveList>
 8010436:	4603      	mov	r3, r0
 8010438:	2b00      	cmp	r3, #0
 801043a:	d01f      	beq.n	801047c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801043c:	2300      	movs	r3, #0
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	2300      	movs	r3, #0
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	2100      	movs	r1, #0
 8010446:	6978      	ldr	r0, [r7, #20]
 8010448:	f7ff ff88 	bl	801035c <xTimerGenericCommand>
 801044c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d113      	bne.n	801047c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010458:	f383 8811 	msr	BASEPRI, r3
 801045c:	f3bf 8f6f 	isb	sy
 8010460:	f3bf 8f4f 	dsb	sy
 8010464:	60fb      	str	r3, [r7, #12]
}
 8010466:	bf00      	nop
 8010468:	e7fe      	b.n	8010468 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010470:	f023 0301 	bic.w	r3, r3, #1
 8010474:	b2da      	uxtb	r2, r3
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	6a1b      	ldr	r3, [r3, #32]
 8010480:	6978      	ldr	r0, [r7, #20]
 8010482:	4798      	blx	r3
}
 8010484:	bf00      	nop
 8010486:	3718      	adds	r7, #24
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	20001b0c 	.word	0x20001b0c

08010490 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010498:	f107 0308 	add.w	r3, r7, #8
 801049c:	4618      	mov	r0, r3
 801049e:	f000 f857 	bl	8010550 <prvGetNextExpireTime>
 80104a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	4619      	mov	r1, r3
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f000 f803 	bl	80104b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80104ae:	f000 f8d5 	bl	801065c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80104b2:	e7f1      	b.n	8010498 <prvTimerTask+0x8>

080104b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80104be:	f7ff f919 	bl	800f6f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104c2:	f107 0308 	add.w	r3, r7, #8
 80104c6:	4618      	mov	r0, r3
 80104c8:	f000 f866 	bl	8010598 <prvSampleTimeNow>
 80104cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d130      	bne.n	8010536 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d10a      	bne.n	80104f0 <prvProcessTimerOrBlockTask+0x3c>
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d806      	bhi.n	80104f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80104e2:	f7ff f915 	bl	800f710 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80104e6:	68f9      	ldr	r1, [r7, #12]
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f7ff ff85 	bl	80103f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80104ee:	e024      	b.n	801053a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d008      	beq.n	8010508 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80104f6:	4b13      	ldr	r3, [pc, #76]	; (8010544 <prvProcessTimerOrBlockTask+0x90>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d101      	bne.n	8010504 <prvProcessTimerOrBlockTask+0x50>
 8010500:	2301      	movs	r3, #1
 8010502:	e000      	b.n	8010506 <prvProcessTimerOrBlockTask+0x52>
 8010504:	2300      	movs	r3, #0
 8010506:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010508:	4b0f      	ldr	r3, [pc, #60]	; (8010548 <prvProcessTimerOrBlockTask+0x94>)
 801050a:	6818      	ldr	r0, [r3, #0]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	1ad3      	subs	r3, r2, r3
 8010512:	683a      	ldr	r2, [r7, #0]
 8010514:	4619      	mov	r1, r3
 8010516:	f7fe fe5d 	bl	800f1d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801051a:	f7ff f8f9 	bl	800f710 <xTaskResumeAll>
 801051e:	4603      	mov	r3, r0
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10a      	bne.n	801053a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010524:	4b09      	ldr	r3, [pc, #36]	; (801054c <prvProcessTimerOrBlockTask+0x98>)
 8010526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801052a:	601a      	str	r2, [r3, #0]
 801052c:	f3bf 8f4f 	dsb	sy
 8010530:	f3bf 8f6f 	isb	sy
}
 8010534:	e001      	b.n	801053a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010536:	f7ff f8eb 	bl	800f710 <xTaskResumeAll>
}
 801053a:	bf00      	nop
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	20001b10 	.word	0x20001b10
 8010548:	20001b14 	.word	0x20001b14
 801054c:	e000ed04 	.word	0xe000ed04

08010550 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010550:	b480      	push	{r7}
 8010552:	b085      	sub	sp, #20
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010558:	4b0e      	ldr	r3, [pc, #56]	; (8010594 <prvGetNextExpireTime+0x44>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d101      	bne.n	8010566 <prvGetNextExpireTime+0x16>
 8010562:	2201      	movs	r2, #1
 8010564:	e000      	b.n	8010568 <prvGetNextExpireTime+0x18>
 8010566:	2200      	movs	r2, #0
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d105      	bne.n	8010580 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010574:	4b07      	ldr	r3, [pc, #28]	; (8010594 <prvGetNextExpireTime+0x44>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	68db      	ldr	r3, [r3, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	60fb      	str	r3, [r7, #12]
 801057e:	e001      	b.n	8010584 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010580:	2300      	movs	r3, #0
 8010582:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010584:	68fb      	ldr	r3, [r7, #12]
}
 8010586:	4618      	mov	r0, r3
 8010588:	3714      	adds	r7, #20
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop
 8010594:	20001b0c 	.word	0x20001b0c

08010598 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80105a0:	f7ff f954 	bl	800f84c <xTaskGetTickCount>
 80105a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80105a6:	4b0b      	ldr	r3, [pc, #44]	; (80105d4 <prvSampleTimeNow+0x3c>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	68fa      	ldr	r2, [r7, #12]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d205      	bcs.n	80105bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80105b0:	f000 f936 	bl	8010820 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2201      	movs	r2, #1
 80105b8:	601a      	str	r2, [r3, #0]
 80105ba:	e002      	b.n	80105c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2200      	movs	r2, #0
 80105c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80105c2:	4a04      	ldr	r2, [pc, #16]	; (80105d4 <prvSampleTimeNow+0x3c>)
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80105c8:	68fb      	ldr	r3, [r7, #12]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	20001b1c 	.word	0x20001b1c

080105d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b086      	sub	sp, #24
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	607a      	str	r2, [r7, #4]
 80105e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80105e6:	2300      	movs	r3, #0
 80105e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	68fa      	ldr	r2, [r7, #12]
 80105f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80105f6:	68ba      	ldr	r2, [r7, #8]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d812      	bhi.n	8010624 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	1ad2      	subs	r2, r2, r3
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	699b      	ldr	r3, [r3, #24]
 8010608:	429a      	cmp	r2, r3
 801060a:	d302      	bcc.n	8010612 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801060c:	2301      	movs	r3, #1
 801060e:	617b      	str	r3, [r7, #20]
 8010610:	e01b      	b.n	801064a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010612:	4b10      	ldr	r3, [pc, #64]	; (8010654 <prvInsertTimerInActiveList+0x7c>)
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	3304      	adds	r3, #4
 801061a:	4619      	mov	r1, r3
 801061c:	4610      	mov	r0, r2
 801061e:	f7fd fce6 	bl	800dfee <vListInsert>
 8010622:	e012      	b.n	801064a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	429a      	cmp	r2, r3
 801062a:	d206      	bcs.n	801063a <prvInsertTimerInActiveList+0x62>
 801062c:	68ba      	ldr	r2, [r7, #8]
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	429a      	cmp	r2, r3
 8010632:	d302      	bcc.n	801063a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010634:	2301      	movs	r3, #1
 8010636:	617b      	str	r3, [r7, #20]
 8010638:	e007      	b.n	801064a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801063a:	4b07      	ldr	r3, [pc, #28]	; (8010658 <prvInsertTimerInActiveList+0x80>)
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	3304      	adds	r3, #4
 8010642:	4619      	mov	r1, r3
 8010644:	4610      	mov	r0, r2
 8010646:	f7fd fcd2 	bl	800dfee <vListInsert>
		}
	}

	return xProcessTimerNow;
 801064a:	697b      	ldr	r3, [r7, #20]
}
 801064c:	4618      	mov	r0, r3
 801064e:	3718      	adds	r7, #24
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	20001b10 	.word	0x20001b10
 8010658:	20001b0c 	.word	0x20001b0c

0801065c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b08e      	sub	sp, #56	; 0x38
 8010660:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010662:	e0ca      	b.n	80107fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	da18      	bge.n	801069c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801066a:	1d3b      	adds	r3, r7, #4
 801066c:	3304      	adds	r3, #4
 801066e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010672:	2b00      	cmp	r3, #0
 8010674:	d10a      	bne.n	801068c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067a:	f383 8811 	msr	BASEPRI, r3
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	f3bf 8f4f 	dsb	sy
 8010686:	61fb      	str	r3, [r7, #28]
}
 8010688:	bf00      	nop
 801068a:	e7fe      	b.n	801068a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801068c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010692:	6850      	ldr	r0, [r2, #4]
 8010694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010696:	6892      	ldr	r2, [r2, #8]
 8010698:	4611      	mov	r1, r2
 801069a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	f2c0 80aa 	blt.w	80107f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	695b      	ldr	r3, [r3, #20]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d004      	beq.n	80106ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b2:	3304      	adds	r3, #4
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fd fcd3 	bl	800e060 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106ba:	463b      	mov	r3, r7
 80106bc:	4618      	mov	r0, r3
 80106be:	f7ff ff6b 	bl	8010598 <prvSampleTimeNow>
 80106c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2b09      	cmp	r3, #9
 80106c8:	f200 8097 	bhi.w	80107fa <prvProcessReceivedCommands+0x19e>
 80106cc:	a201      	add	r2, pc, #4	; (adr r2, 80106d4 <prvProcessReceivedCommands+0x78>)
 80106ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d2:	bf00      	nop
 80106d4:	080106fd 	.word	0x080106fd
 80106d8:	080106fd 	.word	0x080106fd
 80106dc:	080106fd 	.word	0x080106fd
 80106e0:	08010771 	.word	0x08010771
 80106e4:	08010785 	.word	0x08010785
 80106e8:	080107cf 	.word	0x080107cf
 80106ec:	080106fd 	.word	0x080106fd
 80106f0:	080106fd 	.word	0x080106fd
 80106f4:	08010771 	.word	0x08010771
 80106f8:	08010785 	.word	0x08010785
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80106fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010702:	f043 0301 	orr.w	r3, r3, #1
 8010706:	b2da      	uxtb	r2, r3
 8010708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801070a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801070e:	68ba      	ldr	r2, [r7, #8]
 8010710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010712:	699b      	ldr	r3, [r3, #24]
 8010714:	18d1      	adds	r1, r2, r3
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801071a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801071c:	f7ff ff5c 	bl	80105d8 <prvInsertTimerInActiveList>
 8010720:	4603      	mov	r3, r0
 8010722:	2b00      	cmp	r3, #0
 8010724:	d069      	beq.n	80107fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010728:	6a1b      	ldr	r3, [r3, #32]
 801072a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801072c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801072e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010734:	f003 0304 	and.w	r3, r3, #4
 8010738:	2b00      	cmp	r3, #0
 801073a:	d05e      	beq.n	80107fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010740:	699b      	ldr	r3, [r3, #24]
 8010742:	441a      	add	r2, r3
 8010744:	2300      	movs	r3, #0
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	2300      	movs	r3, #0
 801074a:	2100      	movs	r1, #0
 801074c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801074e:	f7ff fe05 	bl	801035c <xTimerGenericCommand>
 8010752:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010754:	6a3b      	ldr	r3, [r7, #32]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d14f      	bne.n	80107fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801075a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075e:	f383 8811 	msr	BASEPRI, r3
 8010762:	f3bf 8f6f 	isb	sy
 8010766:	f3bf 8f4f 	dsb	sy
 801076a:	61bb      	str	r3, [r7, #24]
}
 801076c:	bf00      	nop
 801076e:	e7fe      	b.n	801076e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010776:	f023 0301 	bic.w	r3, r3, #1
 801077a:	b2da      	uxtb	r2, r3
 801077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010782:	e03a      	b.n	80107fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801078a:	f043 0301 	orr.w	r3, r3, #1
 801078e:	b2da      	uxtb	r2, r3
 8010790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010796:	68ba      	ldr	r2, [r7, #8]
 8010798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801079c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079e:	699b      	ldr	r3, [r3, #24]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d10a      	bne.n	80107ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80107a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a8:	f383 8811 	msr	BASEPRI, r3
 80107ac:	f3bf 8f6f 	isb	sy
 80107b0:	f3bf 8f4f 	dsb	sy
 80107b4:	617b      	str	r3, [r7, #20]
}
 80107b6:	bf00      	nop
 80107b8:	e7fe      	b.n	80107b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80107ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107bc:	699a      	ldr	r2, [r3, #24]
 80107be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c0:	18d1      	adds	r1, r2, r3
 80107c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107c8:	f7ff ff06 	bl	80105d8 <prvInsertTimerInActiveList>
					break;
 80107cc:	e015      	b.n	80107fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80107ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107d4:	f003 0302 	and.w	r3, r3, #2
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d103      	bne.n	80107e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80107dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107de:	f000 fbdf 	bl	8010fa0 <vPortFree>
 80107e2:	e00a      	b.n	80107fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80107e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107ea:	f023 0301 	bic.w	r3, r3, #1
 80107ee:	b2da      	uxtb	r2, r3
 80107f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80107f6:	e000      	b.n	80107fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80107f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80107fa:	4b08      	ldr	r3, [pc, #32]	; (801081c <prvProcessReceivedCommands+0x1c0>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	1d39      	adds	r1, r7, #4
 8010800:	2200      	movs	r2, #0
 8010802:	4618      	mov	r0, r3
 8010804:	f7fe f8da 	bl	800e9bc <xQueueReceive>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	f47f af2a 	bne.w	8010664 <prvProcessReceivedCommands+0x8>
	}
}
 8010810:	bf00      	nop
 8010812:	bf00      	nop
 8010814:	3730      	adds	r7, #48	; 0x30
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	20001b14 	.word	0x20001b14

08010820 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b088      	sub	sp, #32
 8010824:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010826:	e048      	b.n	80108ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010828:	4b2d      	ldr	r3, [pc, #180]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	68db      	ldr	r3, [r3, #12]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010832:	4b2b      	ldr	r3, [pc, #172]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	3304      	adds	r3, #4
 8010840:	4618      	mov	r0, r3
 8010842:	f7fd fc0d 	bl	800e060 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	6a1b      	ldr	r3, [r3, #32]
 801084a:	68f8      	ldr	r0, [r7, #12]
 801084c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010854:	f003 0304 	and.w	r3, r3, #4
 8010858:	2b00      	cmp	r3, #0
 801085a:	d02e      	beq.n	80108ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	699b      	ldr	r3, [r3, #24]
 8010860:	693a      	ldr	r2, [r7, #16]
 8010862:	4413      	add	r3, r2
 8010864:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010866:	68ba      	ldr	r2, [r7, #8]
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	429a      	cmp	r2, r3
 801086c:	d90e      	bls.n	801088c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	68ba      	ldr	r2, [r7, #8]
 8010872:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801087a:	4b19      	ldr	r3, [pc, #100]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	3304      	adds	r3, #4
 8010882:	4619      	mov	r1, r3
 8010884:	4610      	mov	r0, r2
 8010886:	f7fd fbb2 	bl	800dfee <vListInsert>
 801088a:	e016      	b.n	80108ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801088c:	2300      	movs	r3, #0
 801088e:	9300      	str	r3, [sp, #0]
 8010890:	2300      	movs	r3, #0
 8010892:	693a      	ldr	r2, [r7, #16]
 8010894:	2100      	movs	r1, #0
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f7ff fd60 	bl	801035c <xTimerGenericCommand>
 801089c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d10a      	bne.n	80108ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80108a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a8:	f383 8811 	msr	BASEPRI, r3
 80108ac:	f3bf 8f6f 	isb	sy
 80108b0:	f3bf 8f4f 	dsb	sy
 80108b4:	603b      	str	r3, [r7, #0]
}
 80108b6:	bf00      	nop
 80108b8:	e7fe      	b.n	80108b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80108ba:	4b09      	ldr	r3, [pc, #36]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1b1      	bne.n	8010828 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80108c4:	4b06      	ldr	r3, [pc, #24]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80108ca:	4b06      	ldr	r3, [pc, #24]	; (80108e4 <prvSwitchTimerLists+0xc4>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4a04      	ldr	r2, [pc, #16]	; (80108e0 <prvSwitchTimerLists+0xc0>)
 80108d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80108d2:	4a04      	ldr	r2, [pc, #16]	; (80108e4 <prvSwitchTimerLists+0xc4>)
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	6013      	str	r3, [r2, #0]
}
 80108d8:	bf00      	nop
 80108da:	3718      	adds	r7, #24
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	20001b0c 	.word	0x20001b0c
 80108e4:	20001b10 	.word	0x20001b10

080108e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80108ee:	f000 f969 	bl	8010bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80108f2:	4b15      	ldr	r3, [pc, #84]	; (8010948 <prvCheckForValidListAndQueue+0x60>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d120      	bne.n	801093c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80108fa:	4814      	ldr	r0, [pc, #80]	; (801094c <prvCheckForValidListAndQueue+0x64>)
 80108fc:	f7fd fb26 	bl	800df4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010900:	4813      	ldr	r0, [pc, #76]	; (8010950 <prvCheckForValidListAndQueue+0x68>)
 8010902:	f7fd fb23 	bl	800df4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010906:	4b13      	ldr	r3, [pc, #76]	; (8010954 <prvCheckForValidListAndQueue+0x6c>)
 8010908:	4a10      	ldr	r2, [pc, #64]	; (801094c <prvCheckForValidListAndQueue+0x64>)
 801090a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801090c:	4b12      	ldr	r3, [pc, #72]	; (8010958 <prvCheckForValidListAndQueue+0x70>)
 801090e:	4a10      	ldr	r2, [pc, #64]	; (8010950 <prvCheckForValidListAndQueue+0x68>)
 8010910:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010912:	2300      	movs	r3, #0
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	4b11      	ldr	r3, [pc, #68]	; (801095c <prvCheckForValidListAndQueue+0x74>)
 8010918:	4a11      	ldr	r2, [pc, #68]	; (8010960 <prvCheckForValidListAndQueue+0x78>)
 801091a:	2110      	movs	r1, #16
 801091c:	200a      	movs	r0, #10
 801091e:	f7fd fc31 	bl	800e184 <xQueueGenericCreateStatic>
 8010922:	4603      	mov	r3, r0
 8010924:	4a08      	ldr	r2, [pc, #32]	; (8010948 <prvCheckForValidListAndQueue+0x60>)
 8010926:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010928:	4b07      	ldr	r3, [pc, #28]	; (8010948 <prvCheckForValidListAndQueue+0x60>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d005      	beq.n	801093c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010930:	4b05      	ldr	r3, [pc, #20]	; (8010948 <prvCheckForValidListAndQueue+0x60>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	490b      	ldr	r1, [pc, #44]	; (8010964 <prvCheckForValidListAndQueue+0x7c>)
 8010936:	4618      	mov	r0, r3
 8010938:	f7fe fbf8 	bl	800f12c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801093c:	f000 f972 	bl	8010c24 <vPortExitCritical>
}
 8010940:	bf00      	nop
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	20001b14 	.word	0x20001b14
 801094c:	20001ae4 	.word	0x20001ae4
 8010950:	20001af8 	.word	0x20001af8
 8010954:	20001b0c 	.word	0x20001b0c
 8010958:	20001b10 	.word	0x20001b10
 801095c:	20001bc0 	.word	0x20001bc0
 8010960:	20001b20 	.word	0x20001b20
 8010964:	08015d0c 	.word	0x08015d0c

08010968 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	60b9      	str	r1, [r7, #8]
 8010972:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	3b04      	subs	r3, #4
 8010978:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	3b04      	subs	r3, #4
 8010986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	f023 0201 	bic.w	r2, r3, #1
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	3b04      	subs	r3, #4
 8010996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010998:	4a0c      	ldr	r2, [pc, #48]	; (80109cc <pxPortInitialiseStack+0x64>)
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	3b14      	subs	r3, #20
 80109a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80109a4:	687a      	ldr	r2, [r7, #4]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	3b04      	subs	r3, #4
 80109ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f06f 0202 	mvn.w	r2, #2
 80109b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	3b20      	subs	r3, #32
 80109bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80109be:	68fb      	ldr	r3, [r7, #12]
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3714      	adds	r7, #20
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr
 80109cc:	080109d1 	.word	0x080109d1

080109d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80109d0:	b480      	push	{r7}
 80109d2:	b085      	sub	sp, #20
 80109d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80109d6:	2300      	movs	r3, #0
 80109d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80109da:	4b12      	ldr	r3, [pc, #72]	; (8010a24 <prvTaskExitError+0x54>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109e2:	d00a      	beq.n	80109fa <prvTaskExitError+0x2a>
	__asm volatile
 80109e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e8:	f383 8811 	msr	BASEPRI, r3
 80109ec:	f3bf 8f6f 	isb	sy
 80109f0:	f3bf 8f4f 	dsb	sy
 80109f4:	60fb      	str	r3, [r7, #12]
}
 80109f6:	bf00      	nop
 80109f8:	e7fe      	b.n	80109f8 <prvTaskExitError+0x28>
	__asm volatile
 80109fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fe:	f383 8811 	msr	BASEPRI, r3
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	60bb      	str	r3, [r7, #8]
}
 8010a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010a0e:	bf00      	nop
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d0fc      	beq.n	8010a10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010a16:	bf00      	nop
 8010a18:	bf00      	nop
 8010a1a:	3714      	adds	r7, #20
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr
 8010a24:	20000020 	.word	0x20000020
	...

08010a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010a30:	4b07      	ldr	r3, [pc, #28]	; (8010a50 <pxCurrentTCBConst2>)
 8010a32:	6819      	ldr	r1, [r3, #0]
 8010a34:	6808      	ldr	r0, [r1, #0]
 8010a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a3a:	f380 8809 	msr	PSP, r0
 8010a3e:	f3bf 8f6f 	isb	sy
 8010a42:	f04f 0000 	mov.w	r0, #0
 8010a46:	f380 8811 	msr	BASEPRI, r0
 8010a4a:	4770      	bx	lr
 8010a4c:	f3af 8000 	nop.w

08010a50 <pxCurrentTCBConst2>:
 8010a50:	200015e4 	.word	0x200015e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010a54:	bf00      	nop
 8010a56:	bf00      	nop

08010a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010a58:	4808      	ldr	r0, [pc, #32]	; (8010a7c <prvPortStartFirstTask+0x24>)
 8010a5a:	6800      	ldr	r0, [r0, #0]
 8010a5c:	6800      	ldr	r0, [r0, #0]
 8010a5e:	f380 8808 	msr	MSP, r0
 8010a62:	f04f 0000 	mov.w	r0, #0
 8010a66:	f380 8814 	msr	CONTROL, r0
 8010a6a:	b662      	cpsie	i
 8010a6c:	b661      	cpsie	f
 8010a6e:	f3bf 8f4f 	dsb	sy
 8010a72:	f3bf 8f6f 	isb	sy
 8010a76:	df00      	svc	0
 8010a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010a7a:	bf00      	nop
 8010a7c:	e000ed08 	.word	0xe000ed08

08010a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b086      	sub	sp, #24
 8010a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010a86:	4b46      	ldr	r3, [pc, #280]	; (8010ba0 <xPortStartScheduler+0x120>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a46      	ldr	r2, [pc, #280]	; (8010ba4 <xPortStartScheduler+0x124>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d10a      	bne.n	8010aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8010a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a94:	f383 8811 	msr	BASEPRI, r3
 8010a98:	f3bf 8f6f 	isb	sy
 8010a9c:	f3bf 8f4f 	dsb	sy
 8010aa0:	613b      	str	r3, [r7, #16]
}
 8010aa2:	bf00      	nop
 8010aa4:	e7fe      	b.n	8010aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010aa6:	4b3e      	ldr	r3, [pc, #248]	; (8010ba0 <xPortStartScheduler+0x120>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4a3f      	ldr	r2, [pc, #252]	; (8010ba8 <xPortStartScheduler+0x128>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d10a      	bne.n	8010ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8010ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab4:	f383 8811 	msr	BASEPRI, r3
 8010ab8:	f3bf 8f6f 	isb	sy
 8010abc:	f3bf 8f4f 	dsb	sy
 8010ac0:	60fb      	str	r3, [r7, #12]
}
 8010ac2:	bf00      	nop
 8010ac4:	e7fe      	b.n	8010ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010ac6:	4b39      	ldr	r3, [pc, #228]	; (8010bac <xPortStartScheduler+0x12c>)
 8010ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	22ff      	movs	r2, #255	; 0xff
 8010ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ae0:	78fb      	ldrb	r3, [r7, #3]
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ae8:	b2da      	uxtb	r2, r3
 8010aea:	4b31      	ldr	r3, [pc, #196]	; (8010bb0 <xPortStartScheduler+0x130>)
 8010aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010aee:	4b31      	ldr	r3, [pc, #196]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010af0:	2207      	movs	r2, #7
 8010af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010af4:	e009      	b.n	8010b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010af6:	4b2f      	ldr	r3, [pc, #188]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	3b01      	subs	r3, #1
 8010afc:	4a2d      	ldr	r2, [pc, #180]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010b00:	78fb      	ldrb	r3, [r7, #3]
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	005b      	lsls	r3, r3, #1
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010b0a:	78fb      	ldrb	r3, [r7, #3]
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b12:	2b80      	cmp	r3, #128	; 0x80
 8010b14:	d0ef      	beq.n	8010af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010b16:	4b27      	ldr	r3, [pc, #156]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f1c3 0307 	rsb	r3, r3, #7
 8010b1e:	2b04      	cmp	r3, #4
 8010b20:	d00a      	beq.n	8010b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8010b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b26:	f383 8811 	msr	BASEPRI, r3
 8010b2a:	f3bf 8f6f 	isb	sy
 8010b2e:	f3bf 8f4f 	dsb	sy
 8010b32:	60bb      	str	r3, [r7, #8]
}
 8010b34:	bf00      	nop
 8010b36:	e7fe      	b.n	8010b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010b38:	4b1e      	ldr	r3, [pc, #120]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	021b      	lsls	r3, r3, #8
 8010b3e:	4a1d      	ldr	r2, [pc, #116]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010b42:	4b1c      	ldr	r3, [pc, #112]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010b4a:	4a1a      	ldr	r2, [pc, #104]	; (8010bb4 <xPortStartScheduler+0x134>)
 8010b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	b2da      	uxtb	r2, r3
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b56:	4b18      	ldr	r3, [pc, #96]	; (8010bb8 <xPortStartScheduler+0x138>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	4a17      	ldr	r2, [pc, #92]	; (8010bb8 <xPortStartScheduler+0x138>)
 8010b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b62:	4b15      	ldr	r3, [pc, #84]	; (8010bb8 <xPortStartScheduler+0x138>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	4a14      	ldr	r2, [pc, #80]	; (8010bb8 <xPortStartScheduler+0x138>)
 8010b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b6e:	f000 f8dd 	bl	8010d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b72:	4b12      	ldr	r3, [pc, #72]	; (8010bbc <xPortStartScheduler+0x13c>)
 8010b74:	2200      	movs	r2, #0
 8010b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010b78:	f000 f8fc 	bl	8010d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010b7c:	4b10      	ldr	r3, [pc, #64]	; (8010bc0 <xPortStartScheduler+0x140>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4a0f      	ldr	r2, [pc, #60]	; (8010bc0 <xPortStartScheduler+0x140>)
 8010b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010b88:	f7ff ff66 	bl	8010a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010b8c:	f7fe ff3a 	bl	800fa04 <vTaskSwitchContext>
	prvTaskExitError();
 8010b90:	f7ff ff1e 	bl	80109d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010b94:	2300      	movs	r3, #0
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3718      	adds	r7, #24
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	e000ed00 	.word	0xe000ed00
 8010ba4:	410fc271 	.word	0x410fc271
 8010ba8:	410fc270 	.word	0x410fc270
 8010bac:	e000e400 	.word	0xe000e400
 8010bb0:	20001c10 	.word	0x20001c10
 8010bb4:	20001c14 	.word	0x20001c14
 8010bb8:	e000ed20 	.word	0xe000ed20
 8010bbc:	20000020 	.word	0x20000020
 8010bc0:	e000ef34 	.word	0xe000ef34

08010bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b083      	sub	sp, #12
 8010bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8010bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bce:	f383 8811 	msr	BASEPRI, r3
 8010bd2:	f3bf 8f6f 	isb	sy
 8010bd6:	f3bf 8f4f 	dsb	sy
 8010bda:	607b      	str	r3, [r7, #4]
}
 8010bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010bde:	4b0f      	ldr	r3, [pc, #60]	; (8010c1c <vPortEnterCritical+0x58>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3301      	adds	r3, #1
 8010be4:	4a0d      	ldr	r2, [pc, #52]	; (8010c1c <vPortEnterCritical+0x58>)
 8010be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010be8:	4b0c      	ldr	r3, [pc, #48]	; (8010c1c <vPortEnterCritical+0x58>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d10f      	bne.n	8010c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010bf0:	4b0b      	ldr	r3, [pc, #44]	; (8010c20 <vPortEnterCritical+0x5c>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d00a      	beq.n	8010c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8010bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfe:	f383 8811 	msr	BASEPRI, r3
 8010c02:	f3bf 8f6f 	isb	sy
 8010c06:	f3bf 8f4f 	dsb	sy
 8010c0a:	603b      	str	r3, [r7, #0]
}
 8010c0c:	bf00      	nop
 8010c0e:	e7fe      	b.n	8010c0e <vPortEnterCritical+0x4a>
	}
}
 8010c10:	bf00      	nop
 8010c12:	370c      	adds	r7, #12
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr
 8010c1c:	20000020 	.word	0x20000020
 8010c20:	e000ed04 	.word	0xe000ed04

08010c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010c2a:	4b12      	ldr	r3, [pc, #72]	; (8010c74 <vPortExitCritical+0x50>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d10a      	bne.n	8010c48 <vPortExitCritical+0x24>
	__asm volatile
 8010c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c36:	f383 8811 	msr	BASEPRI, r3
 8010c3a:	f3bf 8f6f 	isb	sy
 8010c3e:	f3bf 8f4f 	dsb	sy
 8010c42:	607b      	str	r3, [r7, #4]
}
 8010c44:	bf00      	nop
 8010c46:	e7fe      	b.n	8010c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010c48:	4b0a      	ldr	r3, [pc, #40]	; (8010c74 <vPortExitCritical+0x50>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	3b01      	subs	r3, #1
 8010c4e:	4a09      	ldr	r2, [pc, #36]	; (8010c74 <vPortExitCritical+0x50>)
 8010c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010c52:	4b08      	ldr	r3, [pc, #32]	; (8010c74 <vPortExitCritical+0x50>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d105      	bne.n	8010c66 <vPortExitCritical+0x42>
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	f383 8811 	msr	BASEPRI, r3
}
 8010c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010c66:	bf00      	nop
 8010c68:	370c      	adds	r7, #12
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	20000020 	.word	0x20000020
	...

08010c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010c80:	f3ef 8009 	mrs	r0, PSP
 8010c84:	f3bf 8f6f 	isb	sy
 8010c88:	4b15      	ldr	r3, [pc, #84]	; (8010ce0 <pxCurrentTCBConst>)
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	f01e 0f10 	tst.w	lr, #16
 8010c90:	bf08      	it	eq
 8010c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c9a:	6010      	str	r0, [r2, #0]
 8010c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010ca4:	f380 8811 	msr	BASEPRI, r0
 8010ca8:	f3bf 8f4f 	dsb	sy
 8010cac:	f3bf 8f6f 	isb	sy
 8010cb0:	f7fe fea8 	bl	800fa04 <vTaskSwitchContext>
 8010cb4:	f04f 0000 	mov.w	r0, #0
 8010cb8:	f380 8811 	msr	BASEPRI, r0
 8010cbc:	bc09      	pop	{r0, r3}
 8010cbe:	6819      	ldr	r1, [r3, #0]
 8010cc0:	6808      	ldr	r0, [r1, #0]
 8010cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc6:	f01e 0f10 	tst.w	lr, #16
 8010cca:	bf08      	it	eq
 8010ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010cd0:	f380 8809 	msr	PSP, r0
 8010cd4:	f3bf 8f6f 	isb	sy
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop
 8010cdc:	f3af 8000 	nop.w

08010ce0 <pxCurrentTCBConst>:
 8010ce0:	200015e4 	.word	0x200015e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ce4:	bf00      	nop
 8010ce6:	bf00      	nop

08010ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
	__asm volatile
 8010cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf2:	f383 8811 	msr	BASEPRI, r3
 8010cf6:	f3bf 8f6f 	isb	sy
 8010cfa:	f3bf 8f4f 	dsb	sy
 8010cfe:	607b      	str	r3, [r7, #4]
}
 8010d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010d02:	f7fe fdc5 	bl	800f890 <xTaskIncrementTick>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d003      	beq.n	8010d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010d0c:	4b06      	ldr	r3, [pc, #24]	; (8010d28 <xPortSysTickHandler+0x40>)
 8010d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d12:	601a      	str	r2, [r3, #0]
 8010d14:	2300      	movs	r3, #0
 8010d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	f383 8811 	msr	BASEPRI, r3
}
 8010d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010d20:	bf00      	nop
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	e000ed04 	.word	0xe000ed04

08010d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d30:	4b0b      	ldr	r3, [pc, #44]	; (8010d60 <vPortSetupTimerInterrupt+0x34>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d36:	4b0b      	ldr	r3, [pc, #44]	; (8010d64 <vPortSetupTimerInterrupt+0x38>)
 8010d38:	2200      	movs	r2, #0
 8010d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d3c:	4b0a      	ldr	r3, [pc, #40]	; (8010d68 <vPortSetupTimerInterrupt+0x3c>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a0a      	ldr	r2, [pc, #40]	; (8010d6c <vPortSetupTimerInterrupt+0x40>)
 8010d42:	fba2 2303 	umull	r2, r3, r2, r3
 8010d46:	099b      	lsrs	r3, r3, #6
 8010d48:	4a09      	ldr	r2, [pc, #36]	; (8010d70 <vPortSetupTimerInterrupt+0x44>)
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010d4e:	4b04      	ldr	r3, [pc, #16]	; (8010d60 <vPortSetupTimerInterrupt+0x34>)
 8010d50:	2207      	movs	r2, #7
 8010d52:	601a      	str	r2, [r3, #0]
}
 8010d54:	bf00      	nop
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop
 8010d60:	e000e010 	.word	0xe000e010
 8010d64:	e000e018 	.word	0xe000e018
 8010d68:	20000014 	.word	0x20000014
 8010d6c:	10624dd3 	.word	0x10624dd3
 8010d70:	e000e014 	.word	0xe000e014

08010d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010d84 <vPortEnableVFP+0x10>
 8010d78:	6801      	ldr	r1, [r0, #0]
 8010d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010d7e:	6001      	str	r1, [r0, #0]
 8010d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010d82:	bf00      	nop
 8010d84:	e000ed88 	.word	0xe000ed88

08010d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010d88:	b480      	push	{r7}
 8010d8a:	b085      	sub	sp, #20
 8010d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010d8e:	f3ef 8305 	mrs	r3, IPSR
 8010d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2b0f      	cmp	r3, #15
 8010d98:	d914      	bls.n	8010dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010d9a:	4a17      	ldr	r2, [pc, #92]	; (8010df8 <vPortValidateInterruptPriority+0x70>)
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	4413      	add	r3, r2
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010da4:	4b15      	ldr	r3, [pc, #84]	; (8010dfc <vPortValidateInterruptPriority+0x74>)
 8010da6:	781b      	ldrb	r3, [r3, #0]
 8010da8:	7afa      	ldrb	r2, [r7, #11]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d20a      	bcs.n	8010dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db2:	f383 8811 	msr	BASEPRI, r3
 8010db6:	f3bf 8f6f 	isb	sy
 8010dba:	f3bf 8f4f 	dsb	sy
 8010dbe:	607b      	str	r3, [r7, #4]
}
 8010dc0:	bf00      	nop
 8010dc2:	e7fe      	b.n	8010dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010dc4:	4b0e      	ldr	r3, [pc, #56]	; (8010e00 <vPortValidateInterruptPriority+0x78>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010dcc:	4b0d      	ldr	r3, [pc, #52]	; (8010e04 <vPortValidateInterruptPriority+0x7c>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d90a      	bls.n	8010dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd8:	f383 8811 	msr	BASEPRI, r3
 8010ddc:	f3bf 8f6f 	isb	sy
 8010de0:	f3bf 8f4f 	dsb	sy
 8010de4:	603b      	str	r3, [r7, #0]
}
 8010de6:	bf00      	nop
 8010de8:	e7fe      	b.n	8010de8 <vPortValidateInterruptPriority+0x60>
	}
 8010dea:	bf00      	nop
 8010dec:	3714      	adds	r7, #20
 8010dee:	46bd      	mov	sp, r7
 8010df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop
 8010df8:	e000e3f0 	.word	0xe000e3f0
 8010dfc:	20001c10 	.word	0x20001c10
 8010e00:	e000ed0c 	.word	0xe000ed0c
 8010e04:	20001c14 	.word	0x20001c14

08010e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b08a      	sub	sp, #40	; 0x28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010e10:	2300      	movs	r3, #0
 8010e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010e14:	f7fe fc6e 	bl	800f6f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010e18:	4b5b      	ldr	r3, [pc, #364]	; (8010f88 <pvPortMalloc+0x180>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d101      	bne.n	8010e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010e20:	f000 f920 	bl	8011064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010e24:	4b59      	ldr	r3, [pc, #356]	; (8010f8c <pvPortMalloc+0x184>)
 8010e26:	681a      	ldr	r2, [r3, #0]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	4013      	ands	r3, r2
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	f040 8093 	bne.w	8010f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d01d      	beq.n	8010e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010e38:	2208      	movs	r2, #8
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f003 0307 	and.w	r3, r3, #7
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d014      	beq.n	8010e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f023 0307 	bic.w	r3, r3, #7
 8010e50:	3308      	adds	r3, #8
 8010e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f003 0307 	and.w	r3, r3, #7
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d00a      	beq.n	8010e74 <pvPortMalloc+0x6c>
	__asm volatile
 8010e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	617b      	str	r3, [r7, #20]
}
 8010e70:	bf00      	nop
 8010e72:	e7fe      	b.n	8010e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d06e      	beq.n	8010f58 <pvPortMalloc+0x150>
 8010e7a:	4b45      	ldr	r3, [pc, #276]	; (8010f90 <pvPortMalloc+0x188>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d869      	bhi.n	8010f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010e84:	4b43      	ldr	r3, [pc, #268]	; (8010f94 <pvPortMalloc+0x18c>)
 8010e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010e88:	4b42      	ldr	r3, [pc, #264]	; (8010f94 <pvPortMalloc+0x18c>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e8e:	e004      	b.n	8010e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d903      	bls.n	8010eac <pvPortMalloc+0xa4>
 8010ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d1f1      	bne.n	8010e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010eac:	4b36      	ldr	r3, [pc, #216]	; (8010f88 <pvPortMalloc+0x180>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d050      	beq.n	8010f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010eb6:	6a3b      	ldr	r3, [r7, #32]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2208      	movs	r2, #8
 8010ebc:	4413      	add	r3, r2
 8010ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	6a3b      	ldr	r3, [r7, #32]
 8010ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eca:	685a      	ldr	r2, [r3, #4]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	1ad2      	subs	r2, r2, r3
 8010ed0:	2308      	movs	r3, #8
 8010ed2:	005b      	lsls	r3, r3, #1
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d91f      	bls.n	8010f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4413      	add	r3, r2
 8010ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ee0:	69bb      	ldr	r3, [r7, #24]
 8010ee2:	f003 0307 	and.w	r3, r3, #7
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00a      	beq.n	8010f00 <pvPortMalloc+0xf8>
	__asm volatile
 8010eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eee:	f383 8811 	msr	BASEPRI, r3
 8010ef2:	f3bf 8f6f 	isb	sy
 8010ef6:	f3bf 8f4f 	dsb	sy
 8010efa:	613b      	str	r3, [r7, #16]
}
 8010efc:	bf00      	nop
 8010efe:	e7fe      	b.n	8010efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f02:	685a      	ldr	r2, [r3, #4]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	1ad2      	subs	r2, r2, r3
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0e:	687a      	ldr	r2, [r7, #4]
 8010f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010f12:	69b8      	ldr	r0, [r7, #24]
 8010f14:	f000 f908 	bl	8011128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010f18:	4b1d      	ldr	r3, [pc, #116]	; (8010f90 <pvPortMalloc+0x188>)
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	1ad3      	subs	r3, r2, r3
 8010f22:	4a1b      	ldr	r2, [pc, #108]	; (8010f90 <pvPortMalloc+0x188>)
 8010f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010f26:	4b1a      	ldr	r3, [pc, #104]	; (8010f90 <pvPortMalloc+0x188>)
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	4b1b      	ldr	r3, [pc, #108]	; (8010f98 <pvPortMalloc+0x190>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d203      	bcs.n	8010f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f32:	4b17      	ldr	r3, [pc, #92]	; (8010f90 <pvPortMalloc+0x188>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4a18      	ldr	r2, [pc, #96]	; (8010f98 <pvPortMalloc+0x190>)
 8010f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3c:	685a      	ldr	r2, [r3, #4]
 8010f3e:	4b13      	ldr	r3, [pc, #76]	; (8010f8c <pvPortMalloc+0x184>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	431a      	orrs	r2, r3
 8010f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010f4e:	4b13      	ldr	r3, [pc, #76]	; (8010f9c <pvPortMalloc+0x194>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	3301      	adds	r3, #1
 8010f54:	4a11      	ldr	r2, [pc, #68]	; (8010f9c <pvPortMalloc+0x194>)
 8010f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f58:	f7fe fbda 	bl	800f710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	f003 0307 	and.w	r3, r3, #7
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d00a      	beq.n	8010f7c <pvPortMalloc+0x174>
	__asm volatile
 8010f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f6a:	f383 8811 	msr	BASEPRI, r3
 8010f6e:	f3bf 8f6f 	isb	sy
 8010f72:	f3bf 8f4f 	dsb	sy
 8010f76:	60fb      	str	r3, [r7, #12]
}
 8010f78:	bf00      	nop
 8010f7a:	e7fe      	b.n	8010f7a <pvPortMalloc+0x172>
	return pvReturn;
 8010f7c:	69fb      	ldr	r3, [r7, #28]
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3728      	adds	r7, #40	; 0x28
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	20005c20 	.word	0x20005c20
 8010f8c:	20005c34 	.word	0x20005c34
 8010f90:	20005c24 	.word	0x20005c24
 8010f94:	20005c18 	.word	0x20005c18
 8010f98:	20005c28 	.word	0x20005c28
 8010f9c:	20005c2c 	.word	0x20005c2c

08010fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b086      	sub	sp, #24
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d04d      	beq.n	801104e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010fb2:	2308      	movs	r3, #8
 8010fb4:	425b      	negs	r3, r3
 8010fb6:	697a      	ldr	r2, [r7, #20]
 8010fb8:	4413      	add	r3, r2
 8010fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	685a      	ldr	r2, [r3, #4]
 8010fc4:	4b24      	ldr	r3, [pc, #144]	; (8011058 <vPortFree+0xb8>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	4013      	ands	r3, r2
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d10a      	bne.n	8010fe4 <vPortFree+0x44>
	__asm volatile
 8010fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd2:	f383 8811 	msr	BASEPRI, r3
 8010fd6:	f3bf 8f6f 	isb	sy
 8010fda:	f3bf 8f4f 	dsb	sy
 8010fde:	60fb      	str	r3, [r7, #12]
}
 8010fe0:	bf00      	nop
 8010fe2:	e7fe      	b.n	8010fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d00a      	beq.n	8011002 <vPortFree+0x62>
	__asm volatile
 8010fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff0:	f383 8811 	msr	BASEPRI, r3
 8010ff4:	f3bf 8f6f 	isb	sy
 8010ff8:	f3bf 8f4f 	dsb	sy
 8010ffc:	60bb      	str	r3, [r7, #8]
}
 8010ffe:	bf00      	nop
 8011000:	e7fe      	b.n	8011000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	685a      	ldr	r2, [r3, #4]
 8011006:	4b14      	ldr	r3, [pc, #80]	; (8011058 <vPortFree+0xb8>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4013      	ands	r3, r2
 801100c:	2b00      	cmp	r3, #0
 801100e:	d01e      	beq.n	801104e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d11a      	bne.n	801104e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	685a      	ldr	r2, [r3, #4]
 801101c:	4b0e      	ldr	r3, [pc, #56]	; (8011058 <vPortFree+0xb8>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	43db      	mvns	r3, r3
 8011022:	401a      	ands	r2, r3
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011028:	f7fe fb64 	bl	800f6f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	685a      	ldr	r2, [r3, #4]
 8011030:	4b0a      	ldr	r3, [pc, #40]	; (801105c <vPortFree+0xbc>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4413      	add	r3, r2
 8011036:	4a09      	ldr	r2, [pc, #36]	; (801105c <vPortFree+0xbc>)
 8011038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801103a:	6938      	ldr	r0, [r7, #16]
 801103c:	f000 f874 	bl	8011128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011040:	4b07      	ldr	r3, [pc, #28]	; (8011060 <vPortFree+0xc0>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	3301      	adds	r3, #1
 8011046:	4a06      	ldr	r2, [pc, #24]	; (8011060 <vPortFree+0xc0>)
 8011048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801104a:	f7fe fb61 	bl	800f710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801104e:	bf00      	nop
 8011050:	3718      	adds	r7, #24
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
 8011056:	bf00      	nop
 8011058:	20005c34 	.word	0x20005c34
 801105c:	20005c24 	.word	0x20005c24
 8011060:	20005c30 	.word	0x20005c30

08011064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011064:	b480      	push	{r7}
 8011066:	b085      	sub	sp, #20
 8011068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801106a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801106e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011070:	4b27      	ldr	r3, [pc, #156]	; (8011110 <prvHeapInit+0xac>)
 8011072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f003 0307 	and.w	r3, r3, #7
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00c      	beq.n	8011098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	3307      	adds	r3, #7
 8011082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f023 0307 	bic.w	r3, r3, #7
 801108a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801108c:	68ba      	ldr	r2, [r7, #8]
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	1ad3      	subs	r3, r2, r3
 8011092:	4a1f      	ldr	r2, [pc, #124]	; (8011110 <prvHeapInit+0xac>)
 8011094:	4413      	add	r3, r2
 8011096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801109c:	4a1d      	ldr	r2, [pc, #116]	; (8011114 <prvHeapInit+0xb0>)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80110a2:	4b1c      	ldr	r3, [pc, #112]	; (8011114 <prvHeapInit+0xb0>)
 80110a4:	2200      	movs	r2, #0
 80110a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	68ba      	ldr	r2, [r7, #8]
 80110ac:	4413      	add	r3, r2
 80110ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80110b0:	2208      	movs	r2, #8
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	1a9b      	subs	r3, r3, r2
 80110b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f023 0307 	bic.w	r3, r3, #7
 80110be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	4a15      	ldr	r2, [pc, #84]	; (8011118 <prvHeapInit+0xb4>)
 80110c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80110c6:	4b14      	ldr	r3, [pc, #80]	; (8011118 <prvHeapInit+0xb4>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2200      	movs	r2, #0
 80110cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80110ce:	4b12      	ldr	r3, [pc, #72]	; (8011118 <prvHeapInit+0xb4>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2200      	movs	r2, #0
 80110d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	68fa      	ldr	r2, [r7, #12]
 80110de:	1ad2      	subs	r2, r2, r3
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80110e4:	4b0c      	ldr	r3, [pc, #48]	; (8011118 <prvHeapInit+0xb4>)
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	4a0a      	ldr	r2, [pc, #40]	; (801111c <prvHeapInit+0xb8>)
 80110f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	4a09      	ldr	r2, [pc, #36]	; (8011120 <prvHeapInit+0xbc>)
 80110fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80110fc:	4b09      	ldr	r3, [pc, #36]	; (8011124 <prvHeapInit+0xc0>)
 80110fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011102:	601a      	str	r2, [r3, #0]
}
 8011104:	bf00      	nop
 8011106:	3714      	adds	r7, #20
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr
 8011110:	20001c18 	.word	0x20001c18
 8011114:	20005c18 	.word	0x20005c18
 8011118:	20005c20 	.word	0x20005c20
 801111c:	20005c28 	.word	0x20005c28
 8011120:	20005c24 	.word	0x20005c24
 8011124:	20005c34 	.word	0x20005c34

08011128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011130:	4b28      	ldr	r3, [pc, #160]	; (80111d4 <prvInsertBlockIntoFreeList+0xac>)
 8011132:	60fb      	str	r3, [r7, #12]
 8011134:	e002      	b.n	801113c <prvInsertBlockIntoFreeList+0x14>
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	60fb      	str	r3, [r7, #12]
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	429a      	cmp	r2, r3
 8011144:	d8f7      	bhi.n	8011136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	68ba      	ldr	r2, [r7, #8]
 8011150:	4413      	add	r3, r2
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	429a      	cmp	r2, r3
 8011156:	d108      	bne.n	801116a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	685a      	ldr	r2, [r3, #4]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	441a      	add	r2, r3
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	68ba      	ldr	r2, [r7, #8]
 8011174:	441a      	add	r2, r3
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	429a      	cmp	r2, r3
 801117c:	d118      	bne.n	80111b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681a      	ldr	r2, [r3, #0]
 8011182:	4b15      	ldr	r3, [pc, #84]	; (80111d8 <prvInsertBlockIntoFreeList+0xb0>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	429a      	cmp	r2, r3
 8011188:	d00d      	beq.n	80111a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	685a      	ldr	r2, [r3, #4]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	685b      	ldr	r3, [r3, #4]
 8011194:	441a      	add	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	601a      	str	r2, [r3, #0]
 80111a4:	e008      	b.n	80111b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80111a6:	4b0c      	ldr	r3, [pc, #48]	; (80111d8 <prvInsertBlockIntoFreeList+0xb0>)
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	601a      	str	r2, [r3, #0]
 80111ae:	e003      	b.n	80111b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	681a      	ldr	r2, [r3, #0]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80111b8:	68fa      	ldr	r2, [r7, #12]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	429a      	cmp	r2, r3
 80111be:	d002      	beq.n	80111c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111c6:	bf00      	nop
 80111c8:	3714      	adds	r7, #20
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr
 80111d2:	bf00      	nop
 80111d4:	20005c18 	.word	0x20005c18
 80111d8:	20005c20 	.word	0x20005c20

080111dc <__errno>:
 80111dc:	4b01      	ldr	r3, [pc, #4]	; (80111e4 <__errno+0x8>)
 80111de:	6818      	ldr	r0, [r3, #0]
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	20000024 	.word	0x20000024

080111e8 <std>:
 80111e8:	2300      	movs	r3, #0
 80111ea:	b510      	push	{r4, lr}
 80111ec:	4604      	mov	r4, r0
 80111ee:	e9c0 3300 	strd	r3, r3, [r0]
 80111f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80111f6:	6083      	str	r3, [r0, #8]
 80111f8:	8181      	strh	r1, [r0, #12]
 80111fa:	6643      	str	r3, [r0, #100]	; 0x64
 80111fc:	81c2      	strh	r2, [r0, #14]
 80111fe:	6183      	str	r3, [r0, #24]
 8011200:	4619      	mov	r1, r3
 8011202:	2208      	movs	r2, #8
 8011204:	305c      	adds	r0, #92	; 0x5c
 8011206:	f000 f91a 	bl	801143e <memset>
 801120a:	4b05      	ldr	r3, [pc, #20]	; (8011220 <std+0x38>)
 801120c:	6263      	str	r3, [r4, #36]	; 0x24
 801120e:	4b05      	ldr	r3, [pc, #20]	; (8011224 <std+0x3c>)
 8011210:	62a3      	str	r3, [r4, #40]	; 0x28
 8011212:	4b05      	ldr	r3, [pc, #20]	; (8011228 <std+0x40>)
 8011214:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011216:	4b05      	ldr	r3, [pc, #20]	; (801122c <std+0x44>)
 8011218:	6224      	str	r4, [r4, #32]
 801121a:	6323      	str	r3, [r4, #48]	; 0x30
 801121c:	bd10      	pop	{r4, pc}
 801121e:	bf00      	nop
 8011220:	08012415 	.word	0x08012415
 8011224:	08012437 	.word	0x08012437
 8011228:	0801246f 	.word	0x0801246f
 801122c:	08012493 	.word	0x08012493

08011230 <_cleanup_r>:
 8011230:	4901      	ldr	r1, [pc, #4]	; (8011238 <_cleanup_r+0x8>)
 8011232:	f000 b8af 	b.w	8011394 <_fwalk_reent>
 8011236:	bf00      	nop
 8011238:	08014041 	.word	0x08014041

0801123c <__sfmoreglue>:
 801123c:	b570      	push	{r4, r5, r6, lr}
 801123e:	2268      	movs	r2, #104	; 0x68
 8011240:	1e4d      	subs	r5, r1, #1
 8011242:	4355      	muls	r5, r2
 8011244:	460e      	mov	r6, r1
 8011246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801124a:	f000 f921 	bl	8011490 <_malloc_r>
 801124e:	4604      	mov	r4, r0
 8011250:	b140      	cbz	r0, 8011264 <__sfmoreglue+0x28>
 8011252:	2100      	movs	r1, #0
 8011254:	e9c0 1600 	strd	r1, r6, [r0]
 8011258:	300c      	adds	r0, #12
 801125a:	60a0      	str	r0, [r4, #8]
 801125c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011260:	f000 f8ed 	bl	801143e <memset>
 8011264:	4620      	mov	r0, r4
 8011266:	bd70      	pop	{r4, r5, r6, pc}

08011268 <__sfp_lock_acquire>:
 8011268:	4801      	ldr	r0, [pc, #4]	; (8011270 <__sfp_lock_acquire+0x8>)
 801126a:	f000 b8d8 	b.w	801141e <__retarget_lock_acquire_recursive>
 801126e:	bf00      	nop
 8011270:	20005c39 	.word	0x20005c39

08011274 <__sfp_lock_release>:
 8011274:	4801      	ldr	r0, [pc, #4]	; (801127c <__sfp_lock_release+0x8>)
 8011276:	f000 b8d3 	b.w	8011420 <__retarget_lock_release_recursive>
 801127a:	bf00      	nop
 801127c:	20005c39 	.word	0x20005c39

08011280 <__sinit_lock_acquire>:
 8011280:	4801      	ldr	r0, [pc, #4]	; (8011288 <__sinit_lock_acquire+0x8>)
 8011282:	f000 b8cc 	b.w	801141e <__retarget_lock_acquire_recursive>
 8011286:	bf00      	nop
 8011288:	20005c3a 	.word	0x20005c3a

0801128c <__sinit_lock_release>:
 801128c:	4801      	ldr	r0, [pc, #4]	; (8011294 <__sinit_lock_release+0x8>)
 801128e:	f000 b8c7 	b.w	8011420 <__retarget_lock_release_recursive>
 8011292:	bf00      	nop
 8011294:	20005c3a 	.word	0x20005c3a

08011298 <__sinit>:
 8011298:	b510      	push	{r4, lr}
 801129a:	4604      	mov	r4, r0
 801129c:	f7ff fff0 	bl	8011280 <__sinit_lock_acquire>
 80112a0:	69a3      	ldr	r3, [r4, #24]
 80112a2:	b11b      	cbz	r3, 80112ac <__sinit+0x14>
 80112a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112a8:	f7ff bff0 	b.w	801128c <__sinit_lock_release>
 80112ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80112b0:	6523      	str	r3, [r4, #80]	; 0x50
 80112b2:	4b13      	ldr	r3, [pc, #76]	; (8011300 <__sinit+0x68>)
 80112b4:	4a13      	ldr	r2, [pc, #76]	; (8011304 <__sinit+0x6c>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80112ba:	42a3      	cmp	r3, r4
 80112bc:	bf04      	itt	eq
 80112be:	2301      	moveq	r3, #1
 80112c0:	61a3      	streq	r3, [r4, #24]
 80112c2:	4620      	mov	r0, r4
 80112c4:	f000 f820 	bl	8011308 <__sfp>
 80112c8:	6060      	str	r0, [r4, #4]
 80112ca:	4620      	mov	r0, r4
 80112cc:	f000 f81c 	bl	8011308 <__sfp>
 80112d0:	60a0      	str	r0, [r4, #8]
 80112d2:	4620      	mov	r0, r4
 80112d4:	f000 f818 	bl	8011308 <__sfp>
 80112d8:	2200      	movs	r2, #0
 80112da:	60e0      	str	r0, [r4, #12]
 80112dc:	2104      	movs	r1, #4
 80112de:	6860      	ldr	r0, [r4, #4]
 80112e0:	f7ff ff82 	bl	80111e8 <std>
 80112e4:	68a0      	ldr	r0, [r4, #8]
 80112e6:	2201      	movs	r2, #1
 80112e8:	2109      	movs	r1, #9
 80112ea:	f7ff ff7d 	bl	80111e8 <std>
 80112ee:	68e0      	ldr	r0, [r4, #12]
 80112f0:	2202      	movs	r2, #2
 80112f2:	2112      	movs	r1, #18
 80112f4:	f7ff ff78 	bl	80111e8 <std>
 80112f8:	2301      	movs	r3, #1
 80112fa:	61a3      	str	r3, [r4, #24]
 80112fc:	e7d2      	b.n	80112a4 <__sinit+0xc>
 80112fe:	bf00      	nop
 8011300:	08015ec8 	.word	0x08015ec8
 8011304:	08011231 	.word	0x08011231

08011308 <__sfp>:
 8011308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801130a:	4607      	mov	r7, r0
 801130c:	f7ff ffac 	bl	8011268 <__sfp_lock_acquire>
 8011310:	4b1e      	ldr	r3, [pc, #120]	; (801138c <__sfp+0x84>)
 8011312:	681e      	ldr	r6, [r3, #0]
 8011314:	69b3      	ldr	r3, [r6, #24]
 8011316:	b913      	cbnz	r3, 801131e <__sfp+0x16>
 8011318:	4630      	mov	r0, r6
 801131a:	f7ff ffbd 	bl	8011298 <__sinit>
 801131e:	3648      	adds	r6, #72	; 0x48
 8011320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011324:	3b01      	subs	r3, #1
 8011326:	d503      	bpl.n	8011330 <__sfp+0x28>
 8011328:	6833      	ldr	r3, [r6, #0]
 801132a:	b30b      	cbz	r3, 8011370 <__sfp+0x68>
 801132c:	6836      	ldr	r6, [r6, #0]
 801132e:	e7f7      	b.n	8011320 <__sfp+0x18>
 8011330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011334:	b9d5      	cbnz	r5, 801136c <__sfp+0x64>
 8011336:	4b16      	ldr	r3, [pc, #88]	; (8011390 <__sfp+0x88>)
 8011338:	60e3      	str	r3, [r4, #12]
 801133a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801133e:	6665      	str	r5, [r4, #100]	; 0x64
 8011340:	f000 f86c 	bl	801141c <__retarget_lock_init_recursive>
 8011344:	f7ff ff96 	bl	8011274 <__sfp_lock_release>
 8011348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801134c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011350:	6025      	str	r5, [r4, #0]
 8011352:	61a5      	str	r5, [r4, #24]
 8011354:	2208      	movs	r2, #8
 8011356:	4629      	mov	r1, r5
 8011358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801135c:	f000 f86f 	bl	801143e <memset>
 8011360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011368:	4620      	mov	r0, r4
 801136a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801136c:	3468      	adds	r4, #104	; 0x68
 801136e:	e7d9      	b.n	8011324 <__sfp+0x1c>
 8011370:	2104      	movs	r1, #4
 8011372:	4638      	mov	r0, r7
 8011374:	f7ff ff62 	bl	801123c <__sfmoreglue>
 8011378:	4604      	mov	r4, r0
 801137a:	6030      	str	r0, [r6, #0]
 801137c:	2800      	cmp	r0, #0
 801137e:	d1d5      	bne.n	801132c <__sfp+0x24>
 8011380:	f7ff ff78 	bl	8011274 <__sfp_lock_release>
 8011384:	230c      	movs	r3, #12
 8011386:	603b      	str	r3, [r7, #0]
 8011388:	e7ee      	b.n	8011368 <__sfp+0x60>
 801138a:	bf00      	nop
 801138c:	08015ec8 	.word	0x08015ec8
 8011390:	ffff0001 	.word	0xffff0001

08011394 <_fwalk_reent>:
 8011394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011398:	4606      	mov	r6, r0
 801139a:	4688      	mov	r8, r1
 801139c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80113a0:	2700      	movs	r7, #0
 80113a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80113a6:	f1b9 0901 	subs.w	r9, r9, #1
 80113aa:	d505      	bpl.n	80113b8 <_fwalk_reent+0x24>
 80113ac:	6824      	ldr	r4, [r4, #0]
 80113ae:	2c00      	cmp	r4, #0
 80113b0:	d1f7      	bne.n	80113a2 <_fwalk_reent+0xe>
 80113b2:	4638      	mov	r0, r7
 80113b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113b8:	89ab      	ldrh	r3, [r5, #12]
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d907      	bls.n	80113ce <_fwalk_reent+0x3a>
 80113be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80113c2:	3301      	adds	r3, #1
 80113c4:	d003      	beq.n	80113ce <_fwalk_reent+0x3a>
 80113c6:	4629      	mov	r1, r5
 80113c8:	4630      	mov	r0, r6
 80113ca:	47c0      	blx	r8
 80113cc:	4307      	orrs	r7, r0
 80113ce:	3568      	adds	r5, #104	; 0x68
 80113d0:	e7e9      	b.n	80113a6 <_fwalk_reent+0x12>
	...

080113d4 <__libc_init_array>:
 80113d4:	b570      	push	{r4, r5, r6, lr}
 80113d6:	4d0d      	ldr	r5, [pc, #52]	; (801140c <__libc_init_array+0x38>)
 80113d8:	4c0d      	ldr	r4, [pc, #52]	; (8011410 <__libc_init_array+0x3c>)
 80113da:	1b64      	subs	r4, r4, r5
 80113dc:	10a4      	asrs	r4, r4, #2
 80113de:	2600      	movs	r6, #0
 80113e0:	42a6      	cmp	r6, r4
 80113e2:	d109      	bne.n	80113f8 <__libc_init_array+0x24>
 80113e4:	4d0b      	ldr	r5, [pc, #44]	; (8011414 <__libc_init_array+0x40>)
 80113e6:	4c0c      	ldr	r4, [pc, #48]	; (8011418 <__libc_init_array+0x44>)
 80113e8:	f004 fc3c 	bl	8015c64 <_init>
 80113ec:	1b64      	subs	r4, r4, r5
 80113ee:	10a4      	asrs	r4, r4, #2
 80113f0:	2600      	movs	r6, #0
 80113f2:	42a6      	cmp	r6, r4
 80113f4:	d105      	bne.n	8011402 <__libc_init_array+0x2e>
 80113f6:	bd70      	pop	{r4, r5, r6, pc}
 80113f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80113fc:	4798      	blx	r3
 80113fe:	3601      	adds	r6, #1
 8011400:	e7ee      	b.n	80113e0 <__libc_init_array+0xc>
 8011402:	f855 3b04 	ldr.w	r3, [r5], #4
 8011406:	4798      	blx	r3
 8011408:	3601      	adds	r6, #1
 801140a:	e7f2      	b.n	80113f2 <__libc_init_array+0x1e>
 801140c:	0801630c 	.word	0x0801630c
 8011410:	0801630c 	.word	0x0801630c
 8011414:	0801630c 	.word	0x0801630c
 8011418:	08016310 	.word	0x08016310

0801141c <__retarget_lock_init_recursive>:
 801141c:	4770      	bx	lr

0801141e <__retarget_lock_acquire_recursive>:
 801141e:	4770      	bx	lr

08011420 <__retarget_lock_release_recursive>:
 8011420:	4770      	bx	lr

08011422 <memcpy>:
 8011422:	440a      	add	r2, r1
 8011424:	4291      	cmp	r1, r2
 8011426:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801142a:	d100      	bne.n	801142e <memcpy+0xc>
 801142c:	4770      	bx	lr
 801142e:	b510      	push	{r4, lr}
 8011430:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011438:	4291      	cmp	r1, r2
 801143a:	d1f9      	bne.n	8011430 <memcpy+0xe>
 801143c:	bd10      	pop	{r4, pc}

0801143e <memset>:
 801143e:	4402      	add	r2, r0
 8011440:	4603      	mov	r3, r0
 8011442:	4293      	cmp	r3, r2
 8011444:	d100      	bne.n	8011448 <memset+0xa>
 8011446:	4770      	bx	lr
 8011448:	f803 1b01 	strb.w	r1, [r3], #1
 801144c:	e7f9      	b.n	8011442 <memset+0x4>
	...

08011450 <sbrk_aligned>:
 8011450:	b570      	push	{r4, r5, r6, lr}
 8011452:	4e0e      	ldr	r6, [pc, #56]	; (801148c <sbrk_aligned+0x3c>)
 8011454:	460c      	mov	r4, r1
 8011456:	6831      	ldr	r1, [r6, #0]
 8011458:	4605      	mov	r5, r0
 801145a:	b911      	cbnz	r1, 8011462 <sbrk_aligned+0x12>
 801145c:	f000 ff70 	bl	8012340 <_sbrk_r>
 8011460:	6030      	str	r0, [r6, #0]
 8011462:	4621      	mov	r1, r4
 8011464:	4628      	mov	r0, r5
 8011466:	f000 ff6b 	bl	8012340 <_sbrk_r>
 801146a:	1c43      	adds	r3, r0, #1
 801146c:	d00a      	beq.n	8011484 <sbrk_aligned+0x34>
 801146e:	1cc4      	adds	r4, r0, #3
 8011470:	f024 0403 	bic.w	r4, r4, #3
 8011474:	42a0      	cmp	r0, r4
 8011476:	d007      	beq.n	8011488 <sbrk_aligned+0x38>
 8011478:	1a21      	subs	r1, r4, r0
 801147a:	4628      	mov	r0, r5
 801147c:	f000 ff60 	bl	8012340 <_sbrk_r>
 8011480:	3001      	adds	r0, #1
 8011482:	d101      	bne.n	8011488 <sbrk_aligned+0x38>
 8011484:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011488:	4620      	mov	r0, r4
 801148a:	bd70      	pop	{r4, r5, r6, pc}
 801148c:	20005c40 	.word	0x20005c40

08011490 <_malloc_r>:
 8011490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011494:	1ccd      	adds	r5, r1, #3
 8011496:	f025 0503 	bic.w	r5, r5, #3
 801149a:	3508      	adds	r5, #8
 801149c:	2d0c      	cmp	r5, #12
 801149e:	bf38      	it	cc
 80114a0:	250c      	movcc	r5, #12
 80114a2:	2d00      	cmp	r5, #0
 80114a4:	4607      	mov	r7, r0
 80114a6:	db01      	blt.n	80114ac <_malloc_r+0x1c>
 80114a8:	42a9      	cmp	r1, r5
 80114aa:	d905      	bls.n	80114b8 <_malloc_r+0x28>
 80114ac:	230c      	movs	r3, #12
 80114ae:	603b      	str	r3, [r7, #0]
 80114b0:	2600      	movs	r6, #0
 80114b2:	4630      	mov	r0, r6
 80114b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b8:	4e2e      	ldr	r6, [pc, #184]	; (8011574 <_malloc_r+0xe4>)
 80114ba:	f003 f99d 	bl	80147f8 <__malloc_lock>
 80114be:	6833      	ldr	r3, [r6, #0]
 80114c0:	461c      	mov	r4, r3
 80114c2:	bb34      	cbnz	r4, 8011512 <_malloc_r+0x82>
 80114c4:	4629      	mov	r1, r5
 80114c6:	4638      	mov	r0, r7
 80114c8:	f7ff ffc2 	bl	8011450 <sbrk_aligned>
 80114cc:	1c43      	adds	r3, r0, #1
 80114ce:	4604      	mov	r4, r0
 80114d0:	d14d      	bne.n	801156e <_malloc_r+0xde>
 80114d2:	6834      	ldr	r4, [r6, #0]
 80114d4:	4626      	mov	r6, r4
 80114d6:	2e00      	cmp	r6, #0
 80114d8:	d140      	bne.n	801155c <_malloc_r+0xcc>
 80114da:	6823      	ldr	r3, [r4, #0]
 80114dc:	4631      	mov	r1, r6
 80114de:	4638      	mov	r0, r7
 80114e0:	eb04 0803 	add.w	r8, r4, r3
 80114e4:	f000 ff2c 	bl	8012340 <_sbrk_r>
 80114e8:	4580      	cmp	r8, r0
 80114ea:	d13a      	bne.n	8011562 <_malloc_r+0xd2>
 80114ec:	6821      	ldr	r1, [r4, #0]
 80114ee:	3503      	adds	r5, #3
 80114f0:	1a6d      	subs	r5, r5, r1
 80114f2:	f025 0503 	bic.w	r5, r5, #3
 80114f6:	3508      	adds	r5, #8
 80114f8:	2d0c      	cmp	r5, #12
 80114fa:	bf38      	it	cc
 80114fc:	250c      	movcc	r5, #12
 80114fe:	4629      	mov	r1, r5
 8011500:	4638      	mov	r0, r7
 8011502:	f7ff ffa5 	bl	8011450 <sbrk_aligned>
 8011506:	3001      	adds	r0, #1
 8011508:	d02b      	beq.n	8011562 <_malloc_r+0xd2>
 801150a:	6823      	ldr	r3, [r4, #0]
 801150c:	442b      	add	r3, r5
 801150e:	6023      	str	r3, [r4, #0]
 8011510:	e00e      	b.n	8011530 <_malloc_r+0xa0>
 8011512:	6822      	ldr	r2, [r4, #0]
 8011514:	1b52      	subs	r2, r2, r5
 8011516:	d41e      	bmi.n	8011556 <_malloc_r+0xc6>
 8011518:	2a0b      	cmp	r2, #11
 801151a:	d916      	bls.n	801154a <_malloc_r+0xba>
 801151c:	1961      	adds	r1, r4, r5
 801151e:	42a3      	cmp	r3, r4
 8011520:	6025      	str	r5, [r4, #0]
 8011522:	bf18      	it	ne
 8011524:	6059      	strne	r1, [r3, #4]
 8011526:	6863      	ldr	r3, [r4, #4]
 8011528:	bf08      	it	eq
 801152a:	6031      	streq	r1, [r6, #0]
 801152c:	5162      	str	r2, [r4, r5]
 801152e:	604b      	str	r3, [r1, #4]
 8011530:	4638      	mov	r0, r7
 8011532:	f104 060b 	add.w	r6, r4, #11
 8011536:	f003 f965 	bl	8014804 <__malloc_unlock>
 801153a:	f026 0607 	bic.w	r6, r6, #7
 801153e:	1d23      	adds	r3, r4, #4
 8011540:	1af2      	subs	r2, r6, r3
 8011542:	d0b6      	beq.n	80114b2 <_malloc_r+0x22>
 8011544:	1b9b      	subs	r3, r3, r6
 8011546:	50a3      	str	r3, [r4, r2]
 8011548:	e7b3      	b.n	80114b2 <_malloc_r+0x22>
 801154a:	6862      	ldr	r2, [r4, #4]
 801154c:	42a3      	cmp	r3, r4
 801154e:	bf0c      	ite	eq
 8011550:	6032      	streq	r2, [r6, #0]
 8011552:	605a      	strne	r2, [r3, #4]
 8011554:	e7ec      	b.n	8011530 <_malloc_r+0xa0>
 8011556:	4623      	mov	r3, r4
 8011558:	6864      	ldr	r4, [r4, #4]
 801155a:	e7b2      	b.n	80114c2 <_malloc_r+0x32>
 801155c:	4634      	mov	r4, r6
 801155e:	6876      	ldr	r6, [r6, #4]
 8011560:	e7b9      	b.n	80114d6 <_malloc_r+0x46>
 8011562:	230c      	movs	r3, #12
 8011564:	603b      	str	r3, [r7, #0]
 8011566:	4638      	mov	r0, r7
 8011568:	f003 f94c 	bl	8014804 <__malloc_unlock>
 801156c:	e7a1      	b.n	80114b2 <_malloc_r+0x22>
 801156e:	6025      	str	r5, [r4, #0]
 8011570:	e7de      	b.n	8011530 <_malloc_r+0xa0>
 8011572:	bf00      	nop
 8011574:	20005c3c 	.word	0x20005c3c

08011578 <__cvt>:
 8011578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801157c:	ec55 4b10 	vmov	r4, r5, d0
 8011580:	2d00      	cmp	r5, #0
 8011582:	460e      	mov	r6, r1
 8011584:	4619      	mov	r1, r3
 8011586:	462b      	mov	r3, r5
 8011588:	bfbb      	ittet	lt
 801158a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801158e:	461d      	movlt	r5, r3
 8011590:	2300      	movge	r3, #0
 8011592:	232d      	movlt	r3, #45	; 0x2d
 8011594:	700b      	strb	r3, [r1, #0]
 8011596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011598:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801159c:	4691      	mov	r9, r2
 801159e:	f023 0820 	bic.w	r8, r3, #32
 80115a2:	bfbc      	itt	lt
 80115a4:	4622      	movlt	r2, r4
 80115a6:	4614      	movlt	r4, r2
 80115a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80115ac:	d005      	beq.n	80115ba <__cvt+0x42>
 80115ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80115b2:	d100      	bne.n	80115b6 <__cvt+0x3e>
 80115b4:	3601      	adds	r6, #1
 80115b6:	2102      	movs	r1, #2
 80115b8:	e000      	b.n	80115bc <__cvt+0x44>
 80115ba:	2103      	movs	r1, #3
 80115bc:	ab03      	add	r3, sp, #12
 80115be:	9301      	str	r3, [sp, #4]
 80115c0:	ab02      	add	r3, sp, #8
 80115c2:	9300      	str	r3, [sp, #0]
 80115c4:	ec45 4b10 	vmov	d0, r4, r5
 80115c8:	4653      	mov	r3, sl
 80115ca:	4632      	mov	r2, r6
 80115cc:	f001 fec4 	bl	8013358 <_dtoa_r>
 80115d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80115d4:	4607      	mov	r7, r0
 80115d6:	d102      	bne.n	80115de <__cvt+0x66>
 80115d8:	f019 0f01 	tst.w	r9, #1
 80115dc:	d022      	beq.n	8011624 <__cvt+0xac>
 80115de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80115e2:	eb07 0906 	add.w	r9, r7, r6
 80115e6:	d110      	bne.n	801160a <__cvt+0x92>
 80115e8:	783b      	ldrb	r3, [r7, #0]
 80115ea:	2b30      	cmp	r3, #48	; 0x30
 80115ec:	d10a      	bne.n	8011604 <__cvt+0x8c>
 80115ee:	2200      	movs	r2, #0
 80115f0:	2300      	movs	r3, #0
 80115f2:	4620      	mov	r0, r4
 80115f4:	4629      	mov	r1, r5
 80115f6:	f7ef fa7f 	bl	8000af8 <__aeabi_dcmpeq>
 80115fa:	b918      	cbnz	r0, 8011604 <__cvt+0x8c>
 80115fc:	f1c6 0601 	rsb	r6, r6, #1
 8011600:	f8ca 6000 	str.w	r6, [sl]
 8011604:	f8da 3000 	ldr.w	r3, [sl]
 8011608:	4499      	add	r9, r3
 801160a:	2200      	movs	r2, #0
 801160c:	2300      	movs	r3, #0
 801160e:	4620      	mov	r0, r4
 8011610:	4629      	mov	r1, r5
 8011612:	f7ef fa71 	bl	8000af8 <__aeabi_dcmpeq>
 8011616:	b108      	cbz	r0, 801161c <__cvt+0xa4>
 8011618:	f8cd 900c 	str.w	r9, [sp, #12]
 801161c:	2230      	movs	r2, #48	; 0x30
 801161e:	9b03      	ldr	r3, [sp, #12]
 8011620:	454b      	cmp	r3, r9
 8011622:	d307      	bcc.n	8011634 <__cvt+0xbc>
 8011624:	9b03      	ldr	r3, [sp, #12]
 8011626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011628:	1bdb      	subs	r3, r3, r7
 801162a:	4638      	mov	r0, r7
 801162c:	6013      	str	r3, [r2, #0]
 801162e:	b004      	add	sp, #16
 8011630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011634:	1c59      	adds	r1, r3, #1
 8011636:	9103      	str	r1, [sp, #12]
 8011638:	701a      	strb	r2, [r3, #0]
 801163a:	e7f0      	b.n	801161e <__cvt+0xa6>

0801163c <__exponent>:
 801163c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801163e:	4603      	mov	r3, r0
 8011640:	2900      	cmp	r1, #0
 8011642:	bfb8      	it	lt
 8011644:	4249      	neglt	r1, r1
 8011646:	f803 2b02 	strb.w	r2, [r3], #2
 801164a:	bfb4      	ite	lt
 801164c:	222d      	movlt	r2, #45	; 0x2d
 801164e:	222b      	movge	r2, #43	; 0x2b
 8011650:	2909      	cmp	r1, #9
 8011652:	7042      	strb	r2, [r0, #1]
 8011654:	dd2a      	ble.n	80116ac <__exponent+0x70>
 8011656:	f10d 0407 	add.w	r4, sp, #7
 801165a:	46a4      	mov	ip, r4
 801165c:	270a      	movs	r7, #10
 801165e:	46a6      	mov	lr, r4
 8011660:	460a      	mov	r2, r1
 8011662:	fb91 f6f7 	sdiv	r6, r1, r7
 8011666:	fb07 1516 	mls	r5, r7, r6, r1
 801166a:	3530      	adds	r5, #48	; 0x30
 801166c:	2a63      	cmp	r2, #99	; 0x63
 801166e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011672:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011676:	4631      	mov	r1, r6
 8011678:	dcf1      	bgt.n	801165e <__exponent+0x22>
 801167a:	3130      	adds	r1, #48	; 0x30
 801167c:	f1ae 0502 	sub.w	r5, lr, #2
 8011680:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011684:	1c44      	adds	r4, r0, #1
 8011686:	4629      	mov	r1, r5
 8011688:	4561      	cmp	r1, ip
 801168a:	d30a      	bcc.n	80116a2 <__exponent+0x66>
 801168c:	f10d 0209 	add.w	r2, sp, #9
 8011690:	eba2 020e 	sub.w	r2, r2, lr
 8011694:	4565      	cmp	r5, ip
 8011696:	bf88      	it	hi
 8011698:	2200      	movhi	r2, #0
 801169a:	4413      	add	r3, r2
 801169c:	1a18      	subs	r0, r3, r0
 801169e:	b003      	add	sp, #12
 80116a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80116a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80116aa:	e7ed      	b.n	8011688 <__exponent+0x4c>
 80116ac:	2330      	movs	r3, #48	; 0x30
 80116ae:	3130      	adds	r1, #48	; 0x30
 80116b0:	7083      	strb	r3, [r0, #2]
 80116b2:	70c1      	strb	r1, [r0, #3]
 80116b4:	1d03      	adds	r3, r0, #4
 80116b6:	e7f1      	b.n	801169c <__exponent+0x60>

080116b8 <_printf_float>:
 80116b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116bc:	ed2d 8b02 	vpush	{d8}
 80116c0:	b08d      	sub	sp, #52	; 0x34
 80116c2:	460c      	mov	r4, r1
 80116c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80116c8:	4616      	mov	r6, r2
 80116ca:	461f      	mov	r7, r3
 80116cc:	4605      	mov	r5, r0
 80116ce:	f003 f863 	bl	8014798 <_localeconv_r>
 80116d2:	f8d0 a000 	ldr.w	sl, [r0]
 80116d6:	4650      	mov	r0, sl
 80116d8:	f7ee fd92 	bl	8000200 <strlen>
 80116dc:	2300      	movs	r3, #0
 80116de:	930a      	str	r3, [sp, #40]	; 0x28
 80116e0:	6823      	ldr	r3, [r4, #0]
 80116e2:	9305      	str	r3, [sp, #20]
 80116e4:	f8d8 3000 	ldr.w	r3, [r8]
 80116e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80116ec:	3307      	adds	r3, #7
 80116ee:	f023 0307 	bic.w	r3, r3, #7
 80116f2:	f103 0208 	add.w	r2, r3, #8
 80116f6:	f8c8 2000 	str.w	r2, [r8]
 80116fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011702:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011706:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801170a:	9307      	str	r3, [sp, #28]
 801170c:	f8cd 8018 	str.w	r8, [sp, #24]
 8011710:	ee08 0a10 	vmov	s16, r0
 8011714:	4b9f      	ldr	r3, [pc, #636]	; (8011994 <_printf_float+0x2dc>)
 8011716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801171a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801171e:	f7ef fa1d 	bl	8000b5c <__aeabi_dcmpun>
 8011722:	bb88      	cbnz	r0, 8011788 <_printf_float+0xd0>
 8011724:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011728:	4b9a      	ldr	r3, [pc, #616]	; (8011994 <_printf_float+0x2dc>)
 801172a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801172e:	f7ef f9f7 	bl	8000b20 <__aeabi_dcmple>
 8011732:	bb48      	cbnz	r0, 8011788 <_printf_float+0xd0>
 8011734:	2200      	movs	r2, #0
 8011736:	2300      	movs	r3, #0
 8011738:	4640      	mov	r0, r8
 801173a:	4649      	mov	r1, r9
 801173c:	f7ef f9e6 	bl	8000b0c <__aeabi_dcmplt>
 8011740:	b110      	cbz	r0, 8011748 <_printf_float+0x90>
 8011742:	232d      	movs	r3, #45	; 0x2d
 8011744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011748:	4b93      	ldr	r3, [pc, #588]	; (8011998 <_printf_float+0x2e0>)
 801174a:	4894      	ldr	r0, [pc, #592]	; (801199c <_printf_float+0x2e4>)
 801174c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011750:	bf94      	ite	ls
 8011752:	4698      	movls	r8, r3
 8011754:	4680      	movhi	r8, r0
 8011756:	2303      	movs	r3, #3
 8011758:	6123      	str	r3, [r4, #16]
 801175a:	9b05      	ldr	r3, [sp, #20]
 801175c:	f023 0204 	bic.w	r2, r3, #4
 8011760:	6022      	str	r2, [r4, #0]
 8011762:	f04f 0900 	mov.w	r9, #0
 8011766:	9700      	str	r7, [sp, #0]
 8011768:	4633      	mov	r3, r6
 801176a:	aa0b      	add	r2, sp, #44	; 0x2c
 801176c:	4621      	mov	r1, r4
 801176e:	4628      	mov	r0, r5
 8011770:	f000 f9d8 	bl	8011b24 <_printf_common>
 8011774:	3001      	adds	r0, #1
 8011776:	f040 8090 	bne.w	801189a <_printf_float+0x1e2>
 801177a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801177e:	b00d      	add	sp, #52	; 0x34
 8011780:	ecbd 8b02 	vpop	{d8}
 8011784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011788:	4642      	mov	r2, r8
 801178a:	464b      	mov	r3, r9
 801178c:	4640      	mov	r0, r8
 801178e:	4649      	mov	r1, r9
 8011790:	f7ef f9e4 	bl	8000b5c <__aeabi_dcmpun>
 8011794:	b140      	cbz	r0, 80117a8 <_printf_float+0xf0>
 8011796:	464b      	mov	r3, r9
 8011798:	2b00      	cmp	r3, #0
 801179a:	bfbc      	itt	lt
 801179c:	232d      	movlt	r3, #45	; 0x2d
 801179e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80117a2:	487f      	ldr	r0, [pc, #508]	; (80119a0 <_printf_float+0x2e8>)
 80117a4:	4b7f      	ldr	r3, [pc, #508]	; (80119a4 <_printf_float+0x2ec>)
 80117a6:	e7d1      	b.n	801174c <_printf_float+0x94>
 80117a8:	6863      	ldr	r3, [r4, #4]
 80117aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80117ae:	9206      	str	r2, [sp, #24]
 80117b0:	1c5a      	adds	r2, r3, #1
 80117b2:	d13f      	bne.n	8011834 <_printf_float+0x17c>
 80117b4:	2306      	movs	r3, #6
 80117b6:	6063      	str	r3, [r4, #4]
 80117b8:	9b05      	ldr	r3, [sp, #20]
 80117ba:	6861      	ldr	r1, [r4, #4]
 80117bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80117c0:	2300      	movs	r3, #0
 80117c2:	9303      	str	r3, [sp, #12]
 80117c4:	ab0a      	add	r3, sp, #40	; 0x28
 80117c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80117ca:	ab09      	add	r3, sp, #36	; 0x24
 80117cc:	ec49 8b10 	vmov	d0, r8, r9
 80117d0:	9300      	str	r3, [sp, #0]
 80117d2:	6022      	str	r2, [r4, #0]
 80117d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80117d8:	4628      	mov	r0, r5
 80117da:	f7ff fecd 	bl	8011578 <__cvt>
 80117de:	9b06      	ldr	r3, [sp, #24]
 80117e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80117e2:	2b47      	cmp	r3, #71	; 0x47
 80117e4:	4680      	mov	r8, r0
 80117e6:	d108      	bne.n	80117fa <_printf_float+0x142>
 80117e8:	1cc8      	adds	r0, r1, #3
 80117ea:	db02      	blt.n	80117f2 <_printf_float+0x13a>
 80117ec:	6863      	ldr	r3, [r4, #4]
 80117ee:	4299      	cmp	r1, r3
 80117f0:	dd41      	ble.n	8011876 <_printf_float+0x1be>
 80117f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80117f6:	fa5f fb8b 	uxtb.w	fp, fp
 80117fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80117fe:	d820      	bhi.n	8011842 <_printf_float+0x18a>
 8011800:	3901      	subs	r1, #1
 8011802:	465a      	mov	r2, fp
 8011804:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011808:	9109      	str	r1, [sp, #36]	; 0x24
 801180a:	f7ff ff17 	bl	801163c <__exponent>
 801180e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011810:	1813      	adds	r3, r2, r0
 8011812:	2a01      	cmp	r2, #1
 8011814:	4681      	mov	r9, r0
 8011816:	6123      	str	r3, [r4, #16]
 8011818:	dc02      	bgt.n	8011820 <_printf_float+0x168>
 801181a:	6822      	ldr	r2, [r4, #0]
 801181c:	07d2      	lsls	r2, r2, #31
 801181e:	d501      	bpl.n	8011824 <_printf_float+0x16c>
 8011820:	3301      	adds	r3, #1
 8011822:	6123      	str	r3, [r4, #16]
 8011824:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011828:	2b00      	cmp	r3, #0
 801182a:	d09c      	beq.n	8011766 <_printf_float+0xae>
 801182c:	232d      	movs	r3, #45	; 0x2d
 801182e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011832:	e798      	b.n	8011766 <_printf_float+0xae>
 8011834:	9a06      	ldr	r2, [sp, #24]
 8011836:	2a47      	cmp	r2, #71	; 0x47
 8011838:	d1be      	bne.n	80117b8 <_printf_float+0x100>
 801183a:	2b00      	cmp	r3, #0
 801183c:	d1bc      	bne.n	80117b8 <_printf_float+0x100>
 801183e:	2301      	movs	r3, #1
 8011840:	e7b9      	b.n	80117b6 <_printf_float+0xfe>
 8011842:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011846:	d118      	bne.n	801187a <_printf_float+0x1c2>
 8011848:	2900      	cmp	r1, #0
 801184a:	6863      	ldr	r3, [r4, #4]
 801184c:	dd0b      	ble.n	8011866 <_printf_float+0x1ae>
 801184e:	6121      	str	r1, [r4, #16]
 8011850:	b913      	cbnz	r3, 8011858 <_printf_float+0x1a0>
 8011852:	6822      	ldr	r2, [r4, #0]
 8011854:	07d0      	lsls	r0, r2, #31
 8011856:	d502      	bpl.n	801185e <_printf_float+0x1a6>
 8011858:	3301      	adds	r3, #1
 801185a:	440b      	add	r3, r1
 801185c:	6123      	str	r3, [r4, #16]
 801185e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011860:	f04f 0900 	mov.w	r9, #0
 8011864:	e7de      	b.n	8011824 <_printf_float+0x16c>
 8011866:	b913      	cbnz	r3, 801186e <_printf_float+0x1b6>
 8011868:	6822      	ldr	r2, [r4, #0]
 801186a:	07d2      	lsls	r2, r2, #31
 801186c:	d501      	bpl.n	8011872 <_printf_float+0x1ba>
 801186e:	3302      	adds	r3, #2
 8011870:	e7f4      	b.n	801185c <_printf_float+0x1a4>
 8011872:	2301      	movs	r3, #1
 8011874:	e7f2      	b.n	801185c <_printf_float+0x1a4>
 8011876:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801187a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801187c:	4299      	cmp	r1, r3
 801187e:	db05      	blt.n	801188c <_printf_float+0x1d4>
 8011880:	6823      	ldr	r3, [r4, #0]
 8011882:	6121      	str	r1, [r4, #16]
 8011884:	07d8      	lsls	r0, r3, #31
 8011886:	d5ea      	bpl.n	801185e <_printf_float+0x1a6>
 8011888:	1c4b      	adds	r3, r1, #1
 801188a:	e7e7      	b.n	801185c <_printf_float+0x1a4>
 801188c:	2900      	cmp	r1, #0
 801188e:	bfd4      	ite	le
 8011890:	f1c1 0202 	rsble	r2, r1, #2
 8011894:	2201      	movgt	r2, #1
 8011896:	4413      	add	r3, r2
 8011898:	e7e0      	b.n	801185c <_printf_float+0x1a4>
 801189a:	6823      	ldr	r3, [r4, #0]
 801189c:	055a      	lsls	r2, r3, #21
 801189e:	d407      	bmi.n	80118b0 <_printf_float+0x1f8>
 80118a0:	6923      	ldr	r3, [r4, #16]
 80118a2:	4642      	mov	r2, r8
 80118a4:	4631      	mov	r1, r6
 80118a6:	4628      	mov	r0, r5
 80118a8:	47b8      	blx	r7
 80118aa:	3001      	adds	r0, #1
 80118ac:	d12c      	bne.n	8011908 <_printf_float+0x250>
 80118ae:	e764      	b.n	801177a <_printf_float+0xc2>
 80118b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80118b4:	f240 80e0 	bls.w	8011a78 <_printf_float+0x3c0>
 80118b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80118bc:	2200      	movs	r2, #0
 80118be:	2300      	movs	r3, #0
 80118c0:	f7ef f91a 	bl	8000af8 <__aeabi_dcmpeq>
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d034      	beq.n	8011932 <_printf_float+0x27a>
 80118c8:	4a37      	ldr	r2, [pc, #220]	; (80119a8 <_printf_float+0x2f0>)
 80118ca:	2301      	movs	r3, #1
 80118cc:	4631      	mov	r1, r6
 80118ce:	4628      	mov	r0, r5
 80118d0:	47b8      	blx	r7
 80118d2:	3001      	adds	r0, #1
 80118d4:	f43f af51 	beq.w	801177a <_printf_float+0xc2>
 80118d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118dc:	429a      	cmp	r2, r3
 80118de:	db02      	blt.n	80118e6 <_printf_float+0x22e>
 80118e0:	6823      	ldr	r3, [r4, #0]
 80118e2:	07d8      	lsls	r0, r3, #31
 80118e4:	d510      	bpl.n	8011908 <_printf_float+0x250>
 80118e6:	ee18 3a10 	vmov	r3, s16
 80118ea:	4652      	mov	r2, sl
 80118ec:	4631      	mov	r1, r6
 80118ee:	4628      	mov	r0, r5
 80118f0:	47b8      	blx	r7
 80118f2:	3001      	adds	r0, #1
 80118f4:	f43f af41 	beq.w	801177a <_printf_float+0xc2>
 80118f8:	f04f 0800 	mov.w	r8, #0
 80118fc:	f104 091a 	add.w	r9, r4, #26
 8011900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011902:	3b01      	subs	r3, #1
 8011904:	4543      	cmp	r3, r8
 8011906:	dc09      	bgt.n	801191c <_printf_float+0x264>
 8011908:	6823      	ldr	r3, [r4, #0]
 801190a:	079b      	lsls	r3, r3, #30
 801190c:	f100 8105 	bmi.w	8011b1a <_printf_float+0x462>
 8011910:	68e0      	ldr	r0, [r4, #12]
 8011912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011914:	4298      	cmp	r0, r3
 8011916:	bfb8      	it	lt
 8011918:	4618      	movlt	r0, r3
 801191a:	e730      	b.n	801177e <_printf_float+0xc6>
 801191c:	2301      	movs	r3, #1
 801191e:	464a      	mov	r2, r9
 8011920:	4631      	mov	r1, r6
 8011922:	4628      	mov	r0, r5
 8011924:	47b8      	blx	r7
 8011926:	3001      	adds	r0, #1
 8011928:	f43f af27 	beq.w	801177a <_printf_float+0xc2>
 801192c:	f108 0801 	add.w	r8, r8, #1
 8011930:	e7e6      	b.n	8011900 <_printf_float+0x248>
 8011932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011934:	2b00      	cmp	r3, #0
 8011936:	dc39      	bgt.n	80119ac <_printf_float+0x2f4>
 8011938:	4a1b      	ldr	r2, [pc, #108]	; (80119a8 <_printf_float+0x2f0>)
 801193a:	2301      	movs	r3, #1
 801193c:	4631      	mov	r1, r6
 801193e:	4628      	mov	r0, r5
 8011940:	47b8      	blx	r7
 8011942:	3001      	adds	r0, #1
 8011944:	f43f af19 	beq.w	801177a <_printf_float+0xc2>
 8011948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801194c:	4313      	orrs	r3, r2
 801194e:	d102      	bne.n	8011956 <_printf_float+0x29e>
 8011950:	6823      	ldr	r3, [r4, #0]
 8011952:	07d9      	lsls	r1, r3, #31
 8011954:	d5d8      	bpl.n	8011908 <_printf_float+0x250>
 8011956:	ee18 3a10 	vmov	r3, s16
 801195a:	4652      	mov	r2, sl
 801195c:	4631      	mov	r1, r6
 801195e:	4628      	mov	r0, r5
 8011960:	47b8      	blx	r7
 8011962:	3001      	adds	r0, #1
 8011964:	f43f af09 	beq.w	801177a <_printf_float+0xc2>
 8011968:	f04f 0900 	mov.w	r9, #0
 801196c:	f104 0a1a 	add.w	sl, r4, #26
 8011970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011972:	425b      	negs	r3, r3
 8011974:	454b      	cmp	r3, r9
 8011976:	dc01      	bgt.n	801197c <_printf_float+0x2c4>
 8011978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801197a:	e792      	b.n	80118a2 <_printf_float+0x1ea>
 801197c:	2301      	movs	r3, #1
 801197e:	4652      	mov	r2, sl
 8011980:	4631      	mov	r1, r6
 8011982:	4628      	mov	r0, r5
 8011984:	47b8      	blx	r7
 8011986:	3001      	adds	r0, #1
 8011988:	f43f aef7 	beq.w	801177a <_printf_float+0xc2>
 801198c:	f109 0901 	add.w	r9, r9, #1
 8011990:	e7ee      	b.n	8011970 <_printf_float+0x2b8>
 8011992:	bf00      	nop
 8011994:	7fefffff 	.word	0x7fefffff
 8011998:	08015ecc 	.word	0x08015ecc
 801199c:	08015ed0 	.word	0x08015ed0
 80119a0:	08015ed8 	.word	0x08015ed8
 80119a4:	08015ed4 	.word	0x08015ed4
 80119a8:	08015edc 	.word	0x08015edc
 80119ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80119b0:	429a      	cmp	r2, r3
 80119b2:	bfa8      	it	ge
 80119b4:	461a      	movge	r2, r3
 80119b6:	2a00      	cmp	r2, #0
 80119b8:	4691      	mov	r9, r2
 80119ba:	dc37      	bgt.n	8011a2c <_printf_float+0x374>
 80119bc:	f04f 0b00 	mov.w	fp, #0
 80119c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80119c4:	f104 021a 	add.w	r2, r4, #26
 80119c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80119ca:	9305      	str	r3, [sp, #20]
 80119cc:	eba3 0309 	sub.w	r3, r3, r9
 80119d0:	455b      	cmp	r3, fp
 80119d2:	dc33      	bgt.n	8011a3c <_printf_float+0x384>
 80119d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119d8:	429a      	cmp	r2, r3
 80119da:	db3b      	blt.n	8011a54 <_printf_float+0x39c>
 80119dc:	6823      	ldr	r3, [r4, #0]
 80119de:	07da      	lsls	r2, r3, #31
 80119e0:	d438      	bmi.n	8011a54 <_printf_float+0x39c>
 80119e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119e4:	9a05      	ldr	r2, [sp, #20]
 80119e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119e8:	1a9a      	subs	r2, r3, r2
 80119ea:	eba3 0901 	sub.w	r9, r3, r1
 80119ee:	4591      	cmp	r9, r2
 80119f0:	bfa8      	it	ge
 80119f2:	4691      	movge	r9, r2
 80119f4:	f1b9 0f00 	cmp.w	r9, #0
 80119f8:	dc35      	bgt.n	8011a66 <_printf_float+0x3ae>
 80119fa:	f04f 0800 	mov.w	r8, #0
 80119fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a02:	f104 0a1a 	add.w	sl, r4, #26
 8011a06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a0a:	1a9b      	subs	r3, r3, r2
 8011a0c:	eba3 0309 	sub.w	r3, r3, r9
 8011a10:	4543      	cmp	r3, r8
 8011a12:	f77f af79 	ble.w	8011908 <_printf_float+0x250>
 8011a16:	2301      	movs	r3, #1
 8011a18:	4652      	mov	r2, sl
 8011a1a:	4631      	mov	r1, r6
 8011a1c:	4628      	mov	r0, r5
 8011a1e:	47b8      	blx	r7
 8011a20:	3001      	adds	r0, #1
 8011a22:	f43f aeaa 	beq.w	801177a <_printf_float+0xc2>
 8011a26:	f108 0801 	add.w	r8, r8, #1
 8011a2a:	e7ec      	b.n	8011a06 <_printf_float+0x34e>
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	4631      	mov	r1, r6
 8011a30:	4642      	mov	r2, r8
 8011a32:	4628      	mov	r0, r5
 8011a34:	47b8      	blx	r7
 8011a36:	3001      	adds	r0, #1
 8011a38:	d1c0      	bne.n	80119bc <_printf_float+0x304>
 8011a3a:	e69e      	b.n	801177a <_printf_float+0xc2>
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	4631      	mov	r1, r6
 8011a40:	4628      	mov	r0, r5
 8011a42:	9205      	str	r2, [sp, #20]
 8011a44:	47b8      	blx	r7
 8011a46:	3001      	adds	r0, #1
 8011a48:	f43f ae97 	beq.w	801177a <_printf_float+0xc2>
 8011a4c:	9a05      	ldr	r2, [sp, #20]
 8011a4e:	f10b 0b01 	add.w	fp, fp, #1
 8011a52:	e7b9      	b.n	80119c8 <_printf_float+0x310>
 8011a54:	ee18 3a10 	vmov	r3, s16
 8011a58:	4652      	mov	r2, sl
 8011a5a:	4631      	mov	r1, r6
 8011a5c:	4628      	mov	r0, r5
 8011a5e:	47b8      	blx	r7
 8011a60:	3001      	adds	r0, #1
 8011a62:	d1be      	bne.n	80119e2 <_printf_float+0x32a>
 8011a64:	e689      	b.n	801177a <_printf_float+0xc2>
 8011a66:	9a05      	ldr	r2, [sp, #20]
 8011a68:	464b      	mov	r3, r9
 8011a6a:	4442      	add	r2, r8
 8011a6c:	4631      	mov	r1, r6
 8011a6e:	4628      	mov	r0, r5
 8011a70:	47b8      	blx	r7
 8011a72:	3001      	adds	r0, #1
 8011a74:	d1c1      	bne.n	80119fa <_printf_float+0x342>
 8011a76:	e680      	b.n	801177a <_printf_float+0xc2>
 8011a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a7a:	2a01      	cmp	r2, #1
 8011a7c:	dc01      	bgt.n	8011a82 <_printf_float+0x3ca>
 8011a7e:	07db      	lsls	r3, r3, #31
 8011a80:	d538      	bpl.n	8011af4 <_printf_float+0x43c>
 8011a82:	2301      	movs	r3, #1
 8011a84:	4642      	mov	r2, r8
 8011a86:	4631      	mov	r1, r6
 8011a88:	4628      	mov	r0, r5
 8011a8a:	47b8      	blx	r7
 8011a8c:	3001      	adds	r0, #1
 8011a8e:	f43f ae74 	beq.w	801177a <_printf_float+0xc2>
 8011a92:	ee18 3a10 	vmov	r3, s16
 8011a96:	4652      	mov	r2, sl
 8011a98:	4631      	mov	r1, r6
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	47b8      	blx	r7
 8011a9e:	3001      	adds	r0, #1
 8011aa0:	f43f ae6b 	beq.w	801177a <_printf_float+0xc2>
 8011aa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	2300      	movs	r3, #0
 8011aac:	f7ef f824 	bl	8000af8 <__aeabi_dcmpeq>
 8011ab0:	b9d8      	cbnz	r0, 8011aea <_printf_float+0x432>
 8011ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ab4:	f108 0201 	add.w	r2, r8, #1
 8011ab8:	3b01      	subs	r3, #1
 8011aba:	4631      	mov	r1, r6
 8011abc:	4628      	mov	r0, r5
 8011abe:	47b8      	blx	r7
 8011ac0:	3001      	adds	r0, #1
 8011ac2:	d10e      	bne.n	8011ae2 <_printf_float+0x42a>
 8011ac4:	e659      	b.n	801177a <_printf_float+0xc2>
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	4652      	mov	r2, sl
 8011aca:	4631      	mov	r1, r6
 8011acc:	4628      	mov	r0, r5
 8011ace:	47b8      	blx	r7
 8011ad0:	3001      	adds	r0, #1
 8011ad2:	f43f ae52 	beq.w	801177a <_printf_float+0xc2>
 8011ad6:	f108 0801 	add.w	r8, r8, #1
 8011ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011adc:	3b01      	subs	r3, #1
 8011ade:	4543      	cmp	r3, r8
 8011ae0:	dcf1      	bgt.n	8011ac6 <_printf_float+0x40e>
 8011ae2:	464b      	mov	r3, r9
 8011ae4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011ae8:	e6dc      	b.n	80118a4 <_printf_float+0x1ec>
 8011aea:	f04f 0800 	mov.w	r8, #0
 8011aee:	f104 0a1a 	add.w	sl, r4, #26
 8011af2:	e7f2      	b.n	8011ada <_printf_float+0x422>
 8011af4:	2301      	movs	r3, #1
 8011af6:	4642      	mov	r2, r8
 8011af8:	e7df      	b.n	8011aba <_printf_float+0x402>
 8011afa:	2301      	movs	r3, #1
 8011afc:	464a      	mov	r2, r9
 8011afe:	4631      	mov	r1, r6
 8011b00:	4628      	mov	r0, r5
 8011b02:	47b8      	blx	r7
 8011b04:	3001      	adds	r0, #1
 8011b06:	f43f ae38 	beq.w	801177a <_printf_float+0xc2>
 8011b0a:	f108 0801 	add.w	r8, r8, #1
 8011b0e:	68e3      	ldr	r3, [r4, #12]
 8011b10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011b12:	1a5b      	subs	r3, r3, r1
 8011b14:	4543      	cmp	r3, r8
 8011b16:	dcf0      	bgt.n	8011afa <_printf_float+0x442>
 8011b18:	e6fa      	b.n	8011910 <_printf_float+0x258>
 8011b1a:	f04f 0800 	mov.w	r8, #0
 8011b1e:	f104 0919 	add.w	r9, r4, #25
 8011b22:	e7f4      	b.n	8011b0e <_printf_float+0x456>

08011b24 <_printf_common>:
 8011b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b28:	4616      	mov	r6, r2
 8011b2a:	4699      	mov	r9, r3
 8011b2c:	688a      	ldr	r2, [r1, #8]
 8011b2e:	690b      	ldr	r3, [r1, #16]
 8011b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b34:	4293      	cmp	r3, r2
 8011b36:	bfb8      	it	lt
 8011b38:	4613      	movlt	r3, r2
 8011b3a:	6033      	str	r3, [r6, #0]
 8011b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011b40:	4607      	mov	r7, r0
 8011b42:	460c      	mov	r4, r1
 8011b44:	b10a      	cbz	r2, 8011b4a <_printf_common+0x26>
 8011b46:	3301      	adds	r3, #1
 8011b48:	6033      	str	r3, [r6, #0]
 8011b4a:	6823      	ldr	r3, [r4, #0]
 8011b4c:	0699      	lsls	r1, r3, #26
 8011b4e:	bf42      	ittt	mi
 8011b50:	6833      	ldrmi	r3, [r6, #0]
 8011b52:	3302      	addmi	r3, #2
 8011b54:	6033      	strmi	r3, [r6, #0]
 8011b56:	6825      	ldr	r5, [r4, #0]
 8011b58:	f015 0506 	ands.w	r5, r5, #6
 8011b5c:	d106      	bne.n	8011b6c <_printf_common+0x48>
 8011b5e:	f104 0a19 	add.w	sl, r4, #25
 8011b62:	68e3      	ldr	r3, [r4, #12]
 8011b64:	6832      	ldr	r2, [r6, #0]
 8011b66:	1a9b      	subs	r3, r3, r2
 8011b68:	42ab      	cmp	r3, r5
 8011b6a:	dc26      	bgt.n	8011bba <_printf_common+0x96>
 8011b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011b70:	1e13      	subs	r3, r2, #0
 8011b72:	6822      	ldr	r2, [r4, #0]
 8011b74:	bf18      	it	ne
 8011b76:	2301      	movne	r3, #1
 8011b78:	0692      	lsls	r2, r2, #26
 8011b7a:	d42b      	bmi.n	8011bd4 <_printf_common+0xb0>
 8011b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b80:	4649      	mov	r1, r9
 8011b82:	4638      	mov	r0, r7
 8011b84:	47c0      	blx	r8
 8011b86:	3001      	adds	r0, #1
 8011b88:	d01e      	beq.n	8011bc8 <_printf_common+0xa4>
 8011b8a:	6823      	ldr	r3, [r4, #0]
 8011b8c:	68e5      	ldr	r5, [r4, #12]
 8011b8e:	6832      	ldr	r2, [r6, #0]
 8011b90:	f003 0306 	and.w	r3, r3, #6
 8011b94:	2b04      	cmp	r3, #4
 8011b96:	bf08      	it	eq
 8011b98:	1aad      	subeq	r5, r5, r2
 8011b9a:	68a3      	ldr	r3, [r4, #8]
 8011b9c:	6922      	ldr	r2, [r4, #16]
 8011b9e:	bf0c      	ite	eq
 8011ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ba4:	2500      	movne	r5, #0
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	bfc4      	itt	gt
 8011baa:	1a9b      	subgt	r3, r3, r2
 8011bac:	18ed      	addgt	r5, r5, r3
 8011bae:	2600      	movs	r6, #0
 8011bb0:	341a      	adds	r4, #26
 8011bb2:	42b5      	cmp	r5, r6
 8011bb4:	d11a      	bne.n	8011bec <_printf_common+0xc8>
 8011bb6:	2000      	movs	r0, #0
 8011bb8:	e008      	b.n	8011bcc <_printf_common+0xa8>
 8011bba:	2301      	movs	r3, #1
 8011bbc:	4652      	mov	r2, sl
 8011bbe:	4649      	mov	r1, r9
 8011bc0:	4638      	mov	r0, r7
 8011bc2:	47c0      	blx	r8
 8011bc4:	3001      	adds	r0, #1
 8011bc6:	d103      	bne.n	8011bd0 <_printf_common+0xac>
 8011bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bd0:	3501      	adds	r5, #1
 8011bd2:	e7c6      	b.n	8011b62 <_printf_common+0x3e>
 8011bd4:	18e1      	adds	r1, r4, r3
 8011bd6:	1c5a      	adds	r2, r3, #1
 8011bd8:	2030      	movs	r0, #48	; 0x30
 8011bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011bde:	4422      	add	r2, r4
 8011be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011be8:	3302      	adds	r3, #2
 8011bea:	e7c7      	b.n	8011b7c <_printf_common+0x58>
 8011bec:	2301      	movs	r3, #1
 8011bee:	4622      	mov	r2, r4
 8011bf0:	4649      	mov	r1, r9
 8011bf2:	4638      	mov	r0, r7
 8011bf4:	47c0      	blx	r8
 8011bf6:	3001      	adds	r0, #1
 8011bf8:	d0e6      	beq.n	8011bc8 <_printf_common+0xa4>
 8011bfa:	3601      	adds	r6, #1
 8011bfc:	e7d9      	b.n	8011bb2 <_printf_common+0x8e>
	...

08011c00 <_printf_i>:
 8011c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c04:	7e0f      	ldrb	r7, [r1, #24]
 8011c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011c08:	2f78      	cmp	r7, #120	; 0x78
 8011c0a:	4691      	mov	r9, r2
 8011c0c:	4680      	mov	r8, r0
 8011c0e:	460c      	mov	r4, r1
 8011c10:	469a      	mov	sl, r3
 8011c12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011c16:	d807      	bhi.n	8011c28 <_printf_i+0x28>
 8011c18:	2f62      	cmp	r7, #98	; 0x62
 8011c1a:	d80a      	bhi.n	8011c32 <_printf_i+0x32>
 8011c1c:	2f00      	cmp	r7, #0
 8011c1e:	f000 80d8 	beq.w	8011dd2 <_printf_i+0x1d2>
 8011c22:	2f58      	cmp	r7, #88	; 0x58
 8011c24:	f000 80a3 	beq.w	8011d6e <_printf_i+0x16e>
 8011c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011c30:	e03a      	b.n	8011ca8 <_printf_i+0xa8>
 8011c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011c36:	2b15      	cmp	r3, #21
 8011c38:	d8f6      	bhi.n	8011c28 <_printf_i+0x28>
 8011c3a:	a101      	add	r1, pc, #4	; (adr r1, 8011c40 <_printf_i+0x40>)
 8011c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c40:	08011c99 	.word	0x08011c99
 8011c44:	08011cad 	.word	0x08011cad
 8011c48:	08011c29 	.word	0x08011c29
 8011c4c:	08011c29 	.word	0x08011c29
 8011c50:	08011c29 	.word	0x08011c29
 8011c54:	08011c29 	.word	0x08011c29
 8011c58:	08011cad 	.word	0x08011cad
 8011c5c:	08011c29 	.word	0x08011c29
 8011c60:	08011c29 	.word	0x08011c29
 8011c64:	08011c29 	.word	0x08011c29
 8011c68:	08011c29 	.word	0x08011c29
 8011c6c:	08011db9 	.word	0x08011db9
 8011c70:	08011cdd 	.word	0x08011cdd
 8011c74:	08011d9b 	.word	0x08011d9b
 8011c78:	08011c29 	.word	0x08011c29
 8011c7c:	08011c29 	.word	0x08011c29
 8011c80:	08011ddb 	.word	0x08011ddb
 8011c84:	08011c29 	.word	0x08011c29
 8011c88:	08011cdd 	.word	0x08011cdd
 8011c8c:	08011c29 	.word	0x08011c29
 8011c90:	08011c29 	.word	0x08011c29
 8011c94:	08011da3 	.word	0x08011da3
 8011c98:	682b      	ldr	r3, [r5, #0]
 8011c9a:	1d1a      	adds	r2, r3, #4
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	602a      	str	r2, [r5, #0]
 8011ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ca8:	2301      	movs	r3, #1
 8011caa:	e0a3      	b.n	8011df4 <_printf_i+0x1f4>
 8011cac:	6820      	ldr	r0, [r4, #0]
 8011cae:	6829      	ldr	r1, [r5, #0]
 8011cb0:	0606      	lsls	r6, r0, #24
 8011cb2:	f101 0304 	add.w	r3, r1, #4
 8011cb6:	d50a      	bpl.n	8011cce <_printf_i+0xce>
 8011cb8:	680e      	ldr	r6, [r1, #0]
 8011cba:	602b      	str	r3, [r5, #0]
 8011cbc:	2e00      	cmp	r6, #0
 8011cbe:	da03      	bge.n	8011cc8 <_printf_i+0xc8>
 8011cc0:	232d      	movs	r3, #45	; 0x2d
 8011cc2:	4276      	negs	r6, r6
 8011cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cc8:	485e      	ldr	r0, [pc, #376]	; (8011e44 <_printf_i+0x244>)
 8011cca:	230a      	movs	r3, #10
 8011ccc:	e019      	b.n	8011d02 <_printf_i+0x102>
 8011cce:	680e      	ldr	r6, [r1, #0]
 8011cd0:	602b      	str	r3, [r5, #0]
 8011cd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011cd6:	bf18      	it	ne
 8011cd8:	b236      	sxthne	r6, r6
 8011cda:	e7ef      	b.n	8011cbc <_printf_i+0xbc>
 8011cdc:	682b      	ldr	r3, [r5, #0]
 8011cde:	6820      	ldr	r0, [r4, #0]
 8011ce0:	1d19      	adds	r1, r3, #4
 8011ce2:	6029      	str	r1, [r5, #0]
 8011ce4:	0601      	lsls	r1, r0, #24
 8011ce6:	d501      	bpl.n	8011cec <_printf_i+0xec>
 8011ce8:	681e      	ldr	r6, [r3, #0]
 8011cea:	e002      	b.n	8011cf2 <_printf_i+0xf2>
 8011cec:	0646      	lsls	r6, r0, #25
 8011cee:	d5fb      	bpl.n	8011ce8 <_printf_i+0xe8>
 8011cf0:	881e      	ldrh	r6, [r3, #0]
 8011cf2:	4854      	ldr	r0, [pc, #336]	; (8011e44 <_printf_i+0x244>)
 8011cf4:	2f6f      	cmp	r7, #111	; 0x6f
 8011cf6:	bf0c      	ite	eq
 8011cf8:	2308      	moveq	r3, #8
 8011cfa:	230a      	movne	r3, #10
 8011cfc:	2100      	movs	r1, #0
 8011cfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d02:	6865      	ldr	r5, [r4, #4]
 8011d04:	60a5      	str	r5, [r4, #8]
 8011d06:	2d00      	cmp	r5, #0
 8011d08:	bfa2      	ittt	ge
 8011d0a:	6821      	ldrge	r1, [r4, #0]
 8011d0c:	f021 0104 	bicge.w	r1, r1, #4
 8011d10:	6021      	strge	r1, [r4, #0]
 8011d12:	b90e      	cbnz	r6, 8011d18 <_printf_i+0x118>
 8011d14:	2d00      	cmp	r5, #0
 8011d16:	d04d      	beq.n	8011db4 <_printf_i+0x1b4>
 8011d18:	4615      	mov	r5, r2
 8011d1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011d1e:	fb03 6711 	mls	r7, r3, r1, r6
 8011d22:	5dc7      	ldrb	r7, [r0, r7]
 8011d24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011d28:	4637      	mov	r7, r6
 8011d2a:	42bb      	cmp	r3, r7
 8011d2c:	460e      	mov	r6, r1
 8011d2e:	d9f4      	bls.n	8011d1a <_printf_i+0x11a>
 8011d30:	2b08      	cmp	r3, #8
 8011d32:	d10b      	bne.n	8011d4c <_printf_i+0x14c>
 8011d34:	6823      	ldr	r3, [r4, #0]
 8011d36:	07de      	lsls	r6, r3, #31
 8011d38:	d508      	bpl.n	8011d4c <_printf_i+0x14c>
 8011d3a:	6923      	ldr	r3, [r4, #16]
 8011d3c:	6861      	ldr	r1, [r4, #4]
 8011d3e:	4299      	cmp	r1, r3
 8011d40:	bfde      	ittt	le
 8011d42:	2330      	movle	r3, #48	; 0x30
 8011d44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011d48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011d4c:	1b52      	subs	r2, r2, r5
 8011d4e:	6122      	str	r2, [r4, #16]
 8011d50:	f8cd a000 	str.w	sl, [sp]
 8011d54:	464b      	mov	r3, r9
 8011d56:	aa03      	add	r2, sp, #12
 8011d58:	4621      	mov	r1, r4
 8011d5a:	4640      	mov	r0, r8
 8011d5c:	f7ff fee2 	bl	8011b24 <_printf_common>
 8011d60:	3001      	adds	r0, #1
 8011d62:	d14c      	bne.n	8011dfe <_printf_i+0x1fe>
 8011d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d68:	b004      	add	sp, #16
 8011d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d6e:	4835      	ldr	r0, [pc, #212]	; (8011e44 <_printf_i+0x244>)
 8011d70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011d74:	6829      	ldr	r1, [r5, #0]
 8011d76:	6823      	ldr	r3, [r4, #0]
 8011d78:	f851 6b04 	ldr.w	r6, [r1], #4
 8011d7c:	6029      	str	r1, [r5, #0]
 8011d7e:	061d      	lsls	r5, r3, #24
 8011d80:	d514      	bpl.n	8011dac <_printf_i+0x1ac>
 8011d82:	07df      	lsls	r7, r3, #31
 8011d84:	bf44      	itt	mi
 8011d86:	f043 0320 	orrmi.w	r3, r3, #32
 8011d8a:	6023      	strmi	r3, [r4, #0]
 8011d8c:	b91e      	cbnz	r6, 8011d96 <_printf_i+0x196>
 8011d8e:	6823      	ldr	r3, [r4, #0]
 8011d90:	f023 0320 	bic.w	r3, r3, #32
 8011d94:	6023      	str	r3, [r4, #0]
 8011d96:	2310      	movs	r3, #16
 8011d98:	e7b0      	b.n	8011cfc <_printf_i+0xfc>
 8011d9a:	6823      	ldr	r3, [r4, #0]
 8011d9c:	f043 0320 	orr.w	r3, r3, #32
 8011da0:	6023      	str	r3, [r4, #0]
 8011da2:	2378      	movs	r3, #120	; 0x78
 8011da4:	4828      	ldr	r0, [pc, #160]	; (8011e48 <_printf_i+0x248>)
 8011da6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011daa:	e7e3      	b.n	8011d74 <_printf_i+0x174>
 8011dac:	0659      	lsls	r1, r3, #25
 8011dae:	bf48      	it	mi
 8011db0:	b2b6      	uxthmi	r6, r6
 8011db2:	e7e6      	b.n	8011d82 <_printf_i+0x182>
 8011db4:	4615      	mov	r5, r2
 8011db6:	e7bb      	b.n	8011d30 <_printf_i+0x130>
 8011db8:	682b      	ldr	r3, [r5, #0]
 8011dba:	6826      	ldr	r6, [r4, #0]
 8011dbc:	6961      	ldr	r1, [r4, #20]
 8011dbe:	1d18      	adds	r0, r3, #4
 8011dc0:	6028      	str	r0, [r5, #0]
 8011dc2:	0635      	lsls	r5, r6, #24
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	d501      	bpl.n	8011dcc <_printf_i+0x1cc>
 8011dc8:	6019      	str	r1, [r3, #0]
 8011dca:	e002      	b.n	8011dd2 <_printf_i+0x1d2>
 8011dcc:	0670      	lsls	r0, r6, #25
 8011dce:	d5fb      	bpl.n	8011dc8 <_printf_i+0x1c8>
 8011dd0:	8019      	strh	r1, [r3, #0]
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	6123      	str	r3, [r4, #16]
 8011dd6:	4615      	mov	r5, r2
 8011dd8:	e7ba      	b.n	8011d50 <_printf_i+0x150>
 8011dda:	682b      	ldr	r3, [r5, #0]
 8011ddc:	1d1a      	adds	r2, r3, #4
 8011dde:	602a      	str	r2, [r5, #0]
 8011de0:	681d      	ldr	r5, [r3, #0]
 8011de2:	6862      	ldr	r2, [r4, #4]
 8011de4:	2100      	movs	r1, #0
 8011de6:	4628      	mov	r0, r5
 8011de8:	f7ee fa12 	bl	8000210 <memchr>
 8011dec:	b108      	cbz	r0, 8011df2 <_printf_i+0x1f2>
 8011dee:	1b40      	subs	r0, r0, r5
 8011df0:	6060      	str	r0, [r4, #4]
 8011df2:	6863      	ldr	r3, [r4, #4]
 8011df4:	6123      	str	r3, [r4, #16]
 8011df6:	2300      	movs	r3, #0
 8011df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011dfc:	e7a8      	b.n	8011d50 <_printf_i+0x150>
 8011dfe:	6923      	ldr	r3, [r4, #16]
 8011e00:	462a      	mov	r2, r5
 8011e02:	4649      	mov	r1, r9
 8011e04:	4640      	mov	r0, r8
 8011e06:	47d0      	blx	sl
 8011e08:	3001      	adds	r0, #1
 8011e0a:	d0ab      	beq.n	8011d64 <_printf_i+0x164>
 8011e0c:	6823      	ldr	r3, [r4, #0]
 8011e0e:	079b      	lsls	r3, r3, #30
 8011e10:	d413      	bmi.n	8011e3a <_printf_i+0x23a>
 8011e12:	68e0      	ldr	r0, [r4, #12]
 8011e14:	9b03      	ldr	r3, [sp, #12]
 8011e16:	4298      	cmp	r0, r3
 8011e18:	bfb8      	it	lt
 8011e1a:	4618      	movlt	r0, r3
 8011e1c:	e7a4      	b.n	8011d68 <_printf_i+0x168>
 8011e1e:	2301      	movs	r3, #1
 8011e20:	4632      	mov	r2, r6
 8011e22:	4649      	mov	r1, r9
 8011e24:	4640      	mov	r0, r8
 8011e26:	47d0      	blx	sl
 8011e28:	3001      	adds	r0, #1
 8011e2a:	d09b      	beq.n	8011d64 <_printf_i+0x164>
 8011e2c:	3501      	adds	r5, #1
 8011e2e:	68e3      	ldr	r3, [r4, #12]
 8011e30:	9903      	ldr	r1, [sp, #12]
 8011e32:	1a5b      	subs	r3, r3, r1
 8011e34:	42ab      	cmp	r3, r5
 8011e36:	dcf2      	bgt.n	8011e1e <_printf_i+0x21e>
 8011e38:	e7eb      	b.n	8011e12 <_printf_i+0x212>
 8011e3a:	2500      	movs	r5, #0
 8011e3c:	f104 0619 	add.w	r6, r4, #25
 8011e40:	e7f5      	b.n	8011e2e <_printf_i+0x22e>
 8011e42:	bf00      	nop
 8011e44:	08015ede 	.word	0x08015ede
 8011e48:	08015eef 	.word	0x08015eef

08011e4c <_scanf_float>:
 8011e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e50:	b087      	sub	sp, #28
 8011e52:	4617      	mov	r7, r2
 8011e54:	9303      	str	r3, [sp, #12]
 8011e56:	688b      	ldr	r3, [r1, #8]
 8011e58:	1e5a      	subs	r2, r3, #1
 8011e5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011e5e:	bf83      	ittte	hi
 8011e60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011e64:	195b      	addhi	r3, r3, r5
 8011e66:	9302      	strhi	r3, [sp, #8]
 8011e68:	2300      	movls	r3, #0
 8011e6a:	bf86      	itte	hi
 8011e6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011e70:	608b      	strhi	r3, [r1, #8]
 8011e72:	9302      	strls	r3, [sp, #8]
 8011e74:	680b      	ldr	r3, [r1, #0]
 8011e76:	468b      	mov	fp, r1
 8011e78:	2500      	movs	r5, #0
 8011e7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011e7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8011e82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011e86:	4680      	mov	r8, r0
 8011e88:	460c      	mov	r4, r1
 8011e8a:	465e      	mov	r6, fp
 8011e8c:	46aa      	mov	sl, r5
 8011e8e:	46a9      	mov	r9, r5
 8011e90:	9501      	str	r5, [sp, #4]
 8011e92:	68a2      	ldr	r2, [r4, #8]
 8011e94:	b152      	cbz	r2, 8011eac <_scanf_float+0x60>
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	2b4e      	cmp	r3, #78	; 0x4e
 8011e9c:	d864      	bhi.n	8011f68 <_scanf_float+0x11c>
 8011e9e:	2b40      	cmp	r3, #64	; 0x40
 8011ea0:	d83c      	bhi.n	8011f1c <_scanf_float+0xd0>
 8011ea2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011ea6:	b2c8      	uxtb	r0, r1
 8011ea8:	280e      	cmp	r0, #14
 8011eaa:	d93a      	bls.n	8011f22 <_scanf_float+0xd6>
 8011eac:	f1b9 0f00 	cmp.w	r9, #0
 8011eb0:	d003      	beq.n	8011eba <_scanf_float+0x6e>
 8011eb2:	6823      	ldr	r3, [r4, #0]
 8011eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011eb8:	6023      	str	r3, [r4, #0]
 8011eba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011ebe:	f1ba 0f01 	cmp.w	sl, #1
 8011ec2:	f200 8113 	bhi.w	80120ec <_scanf_float+0x2a0>
 8011ec6:	455e      	cmp	r6, fp
 8011ec8:	f200 8105 	bhi.w	80120d6 <_scanf_float+0x28a>
 8011ecc:	2501      	movs	r5, #1
 8011ece:	4628      	mov	r0, r5
 8011ed0:	b007      	add	sp, #28
 8011ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ed6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011eda:	2a0d      	cmp	r2, #13
 8011edc:	d8e6      	bhi.n	8011eac <_scanf_float+0x60>
 8011ede:	a101      	add	r1, pc, #4	; (adr r1, 8011ee4 <_scanf_float+0x98>)
 8011ee0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011ee4:	08012023 	.word	0x08012023
 8011ee8:	08011ead 	.word	0x08011ead
 8011eec:	08011ead 	.word	0x08011ead
 8011ef0:	08011ead 	.word	0x08011ead
 8011ef4:	08012083 	.word	0x08012083
 8011ef8:	0801205b 	.word	0x0801205b
 8011efc:	08011ead 	.word	0x08011ead
 8011f00:	08011ead 	.word	0x08011ead
 8011f04:	08012031 	.word	0x08012031
 8011f08:	08011ead 	.word	0x08011ead
 8011f0c:	08011ead 	.word	0x08011ead
 8011f10:	08011ead 	.word	0x08011ead
 8011f14:	08011ead 	.word	0x08011ead
 8011f18:	08011fe9 	.word	0x08011fe9
 8011f1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011f20:	e7db      	b.n	8011eda <_scanf_float+0x8e>
 8011f22:	290e      	cmp	r1, #14
 8011f24:	d8c2      	bhi.n	8011eac <_scanf_float+0x60>
 8011f26:	a001      	add	r0, pc, #4	; (adr r0, 8011f2c <_scanf_float+0xe0>)
 8011f28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011f2c:	08011fdb 	.word	0x08011fdb
 8011f30:	08011ead 	.word	0x08011ead
 8011f34:	08011fdb 	.word	0x08011fdb
 8011f38:	0801206f 	.word	0x0801206f
 8011f3c:	08011ead 	.word	0x08011ead
 8011f40:	08011f89 	.word	0x08011f89
 8011f44:	08011fc5 	.word	0x08011fc5
 8011f48:	08011fc5 	.word	0x08011fc5
 8011f4c:	08011fc5 	.word	0x08011fc5
 8011f50:	08011fc5 	.word	0x08011fc5
 8011f54:	08011fc5 	.word	0x08011fc5
 8011f58:	08011fc5 	.word	0x08011fc5
 8011f5c:	08011fc5 	.word	0x08011fc5
 8011f60:	08011fc5 	.word	0x08011fc5
 8011f64:	08011fc5 	.word	0x08011fc5
 8011f68:	2b6e      	cmp	r3, #110	; 0x6e
 8011f6a:	d809      	bhi.n	8011f80 <_scanf_float+0x134>
 8011f6c:	2b60      	cmp	r3, #96	; 0x60
 8011f6e:	d8b2      	bhi.n	8011ed6 <_scanf_float+0x8a>
 8011f70:	2b54      	cmp	r3, #84	; 0x54
 8011f72:	d077      	beq.n	8012064 <_scanf_float+0x218>
 8011f74:	2b59      	cmp	r3, #89	; 0x59
 8011f76:	d199      	bne.n	8011eac <_scanf_float+0x60>
 8011f78:	2d07      	cmp	r5, #7
 8011f7a:	d197      	bne.n	8011eac <_scanf_float+0x60>
 8011f7c:	2508      	movs	r5, #8
 8011f7e:	e029      	b.n	8011fd4 <_scanf_float+0x188>
 8011f80:	2b74      	cmp	r3, #116	; 0x74
 8011f82:	d06f      	beq.n	8012064 <_scanf_float+0x218>
 8011f84:	2b79      	cmp	r3, #121	; 0x79
 8011f86:	e7f6      	b.n	8011f76 <_scanf_float+0x12a>
 8011f88:	6821      	ldr	r1, [r4, #0]
 8011f8a:	05c8      	lsls	r0, r1, #23
 8011f8c:	d51a      	bpl.n	8011fc4 <_scanf_float+0x178>
 8011f8e:	9b02      	ldr	r3, [sp, #8]
 8011f90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011f94:	6021      	str	r1, [r4, #0]
 8011f96:	f109 0901 	add.w	r9, r9, #1
 8011f9a:	b11b      	cbz	r3, 8011fa4 <_scanf_float+0x158>
 8011f9c:	3b01      	subs	r3, #1
 8011f9e:	3201      	adds	r2, #1
 8011fa0:	9302      	str	r3, [sp, #8]
 8011fa2:	60a2      	str	r2, [r4, #8]
 8011fa4:	68a3      	ldr	r3, [r4, #8]
 8011fa6:	3b01      	subs	r3, #1
 8011fa8:	60a3      	str	r3, [r4, #8]
 8011faa:	6923      	ldr	r3, [r4, #16]
 8011fac:	3301      	adds	r3, #1
 8011fae:	6123      	str	r3, [r4, #16]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	3b01      	subs	r3, #1
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	607b      	str	r3, [r7, #4]
 8011fb8:	f340 8084 	ble.w	80120c4 <_scanf_float+0x278>
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	603b      	str	r3, [r7, #0]
 8011fc2:	e766      	b.n	8011e92 <_scanf_float+0x46>
 8011fc4:	eb1a 0f05 	cmn.w	sl, r5
 8011fc8:	f47f af70 	bne.w	8011eac <_scanf_float+0x60>
 8011fcc:	6822      	ldr	r2, [r4, #0]
 8011fce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011fd2:	6022      	str	r2, [r4, #0]
 8011fd4:	f806 3b01 	strb.w	r3, [r6], #1
 8011fd8:	e7e4      	b.n	8011fa4 <_scanf_float+0x158>
 8011fda:	6822      	ldr	r2, [r4, #0]
 8011fdc:	0610      	lsls	r0, r2, #24
 8011fde:	f57f af65 	bpl.w	8011eac <_scanf_float+0x60>
 8011fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011fe6:	e7f4      	b.n	8011fd2 <_scanf_float+0x186>
 8011fe8:	f1ba 0f00 	cmp.w	sl, #0
 8011fec:	d10e      	bne.n	801200c <_scanf_float+0x1c0>
 8011fee:	f1b9 0f00 	cmp.w	r9, #0
 8011ff2:	d10e      	bne.n	8012012 <_scanf_float+0x1c6>
 8011ff4:	6822      	ldr	r2, [r4, #0]
 8011ff6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011ffa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011ffe:	d108      	bne.n	8012012 <_scanf_float+0x1c6>
 8012000:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012004:	6022      	str	r2, [r4, #0]
 8012006:	f04f 0a01 	mov.w	sl, #1
 801200a:	e7e3      	b.n	8011fd4 <_scanf_float+0x188>
 801200c:	f1ba 0f02 	cmp.w	sl, #2
 8012010:	d055      	beq.n	80120be <_scanf_float+0x272>
 8012012:	2d01      	cmp	r5, #1
 8012014:	d002      	beq.n	801201c <_scanf_float+0x1d0>
 8012016:	2d04      	cmp	r5, #4
 8012018:	f47f af48 	bne.w	8011eac <_scanf_float+0x60>
 801201c:	3501      	adds	r5, #1
 801201e:	b2ed      	uxtb	r5, r5
 8012020:	e7d8      	b.n	8011fd4 <_scanf_float+0x188>
 8012022:	f1ba 0f01 	cmp.w	sl, #1
 8012026:	f47f af41 	bne.w	8011eac <_scanf_float+0x60>
 801202a:	f04f 0a02 	mov.w	sl, #2
 801202e:	e7d1      	b.n	8011fd4 <_scanf_float+0x188>
 8012030:	b97d      	cbnz	r5, 8012052 <_scanf_float+0x206>
 8012032:	f1b9 0f00 	cmp.w	r9, #0
 8012036:	f47f af3c 	bne.w	8011eb2 <_scanf_float+0x66>
 801203a:	6822      	ldr	r2, [r4, #0]
 801203c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012040:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012044:	f47f af39 	bne.w	8011eba <_scanf_float+0x6e>
 8012048:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801204c:	6022      	str	r2, [r4, #0]
 801204e:	2501      	movs	r5, #1
 8012050:	e7c0      	b.n	8011fd4 <_scanf_float+0x188>
 8012052:	2d03      	cmp	r5, #3
 8012054:	d0e2      	beq.n	801201c <_scanf_float+0x1d0>
 8012056:	2d05      	cmp	r5, #5
 8012058:	e7de      	b.n	8012018 <_scanf_float+0x1cc>
 801205a:	2d02      	cmp	r5, #2
 801205c:	f47f af26 	bne.w	8011eac <_scanf_float+0x60>
 8012060:	2503      	movs	r5, #3
 8012062:	e7b7      	b.n	8011fd4 <_scanf_float+0x188>
 8012064:	2d06      	cmp	r5, #6
 8012066:	f47f af21 	bne.w	8011eac <_scanf_float+0x60>
 801206a:	2507      	movs	r5, #7
 801206c:	e7b2      	b.n	8011fd4 <_scanf_float+0x188>
 801206e:	6822      	ldr	r2, [r4, #0]
 8012070:	0591      	lsls	r1, r2, #22
 8012072:	f57f af1b 	bpl.w	8011eac <_scanf_float+0x60>
 8012076:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801207a:	6022      	str	r2, [r4, #0]
 801207c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012080:	e7a8      	b.n	8011fd4 <_scanf_float+0x188>
 8012082:	6822      	ldr	r2, [r4, #0]
 8012084:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012088:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801208c:	d006      	beq.n	801209c <_scanf_float+0x250>
 801208e:	0550      	lsls	r0, r2, #21
 8012090:	f57f af0c 	bpl.w	8011eac <_scanf_float+0x60>
 8012094:	f1b9 0f00 	cmp.w	r9, #0
 8012098:	f43f af0f 	beq.w	8011eba <_scanf_float+0x6e>
 801209c:	0591      	lsls	r1, r2, #22
 801209e:	bf58      	it	pl
 80120a0:	9901      	ldrpl	r1, [sp, #4]
 80120a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80120a6:	bf58      	it	pl
 80120a8:	eba9 0101 	subpl.w	r1, r9, r1
 80120ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80120b0:	bf58      	it	pl
 80120b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80120b6:	6022      	str	r2, [r4, #0]
 80120b8:	f04f 0900 	mov.w	r9, #0
 80120bc:	e78a      	b.n	8011fd4 <_scanf_float+0x188>
 80120be:	f04f 0a03 	mov.w	sl, #3
 80120c2:	e787      	b.n	8011fd4 <_scanf_float+0x188>
 80120c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80120c8:	4639      	mov	r1, r7
 80120ca:	4640      	mov	r0, r8
 80120cc:	4798      	blx	r3
 80120ce:	2800      	cmp	r0, #0
 80120d0:	f43f aedf 	beq.w	8011e92 <_scanf_float+0x46>
 80120d4:	e6ea      	b.n	8011eac <_scanf_float+0x60>
 80120d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80120da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80120de:	463a      	mov	r2, r7
 80120e0:	4640      	mov	r0, r8
 80120e2:	4798      	blx	r3
 80120e4:	6923      	ldr	r3, [r4, #16]
 80120e6:	3b01      	subs	r3, #1
 80120e8:	6123      	str	r3, [r4, #16]
 80120ea:	e6ec      	b.n	8011ec6 <_scanf_float+0x7a>
 80120ec:	1e6b      	subs	r3, r5, #1
 80120ee:	2b06      	cmp	r3, #6
 80120f0:	d825      	bhi.n	801213e <_scanf_float+0x2f2>
 80120f2:	2d02      	cmp	r5, #2
 80120f4:	d836      	bhi.n	8012164 <_scanf_float+0x318>
 80120f6:	455e      	cmp	r6, fp
 80120f8:	f67f aee8 	bls.w	8011ecc <_scanf_float+0x80>
 80120fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012100:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012104:	463a      	mov	r2, r7
 8012106:	4640      	mov	r0, r8
 8012108:	4798      	blx	r3
 801210a:	6923      	ldr	r3, [r4, #16]
 801210c:	3b01      	subs	r3, #1
 801210e:	6123      	str	r3, [r4, #16]
 8012110:	e7f1      	b.n	80120f6 <_scanf_float+0x2aa>
 8012112:	9802      	ldr	r0, [sp, #8]
 8012114:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012118:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801211c:	9002      	str	r0, [sp, #8]
 801211e:	463a      	mov	r2, r7
 8012120:	4640      	mov	r0, r8
 8012122:	4798      	blx	r3
 8012124:	6923      	ldr	r3, [r4, #16]
 8012126:	3b01      	subs	r3, #1
 8012128:	6123      	str	r3, [r4, #16]
 801212a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801212e:	fa5f fa8a 	uxtb.w	sl, sl
 8012132:	f1ba 0f02 	cmp.w	sl, #2
 8012136:	d1ec      	bne.n	8012112 <_scanf_float+0x2c6>
 8012138:	3d03      	subs	r5, #3
 801213a:	b2ed      	uxtb	r5, r5
 801213c:	1b76      	subs	r6, r6, r5
 801213e:	6823      	ldr	r3, [r4, #0]
 8012140:	05da      	lsls	r2, r3, #23
 8012142:	d52f      	bpl.n	80121a4 <_scanf_float+0x358>
 8012144:	055b      	lsls	r3, r3, #21
 8012146:	d510      	bpl.n	801216a <_scanf_float+0x31e>
 8012148:	455e      	cmp	r6, fp
 801214a:	f67f aebf 	bls.w	8011ecc <_scanf_float+0x80>
 801214e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012152:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012156:	463a      	mov	r2, r7
 8012158:	4640      	mov	r0, r8
 801215a:	4798      	blx	r3
 801215c:	6923      	ldr	r3, [r4, #16]
 801215e:	3b01      	subs	r3, #1
 8012160:	6123      	str	r3, [r4, #16]
 8012162:	e7f1      	b.n	8012148 <_scanf_float+0x2fc>
 8012164:	46aa      	mov	sl, r5
 8012166:	9602      	str	r6, [sp, #8]
 8012168:	e7df      	b.n	801212a <_scanf_float+0x2de>
 801216a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801216e:	6923      	ldr	r3, [r4, #16]
 8012170:	2965      	cmp	r1, #101	; 0x65
 8012172:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012176:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801217a:	6123      	str	r3, [r4, #16]
 801217c:	d00c      	beq.n	8012198 <_scanf_float+0x34c>
 801217e:	2945      	cmp	r1, #69	; 0x45
 8012180:	d00a      	beq.n	8012198 <_scanf_float+0x34c>
 8012182:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012186:	463a      	mov	r2, r7
 8012188:	4640      	mov	r0, r8
 801218a:	4798      	blx	r3
 801218c:	6923      	ldr	r3, [r4, #16]
 801218e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012192:	3b01      	subs	r3, #1
 8012194:	1eb5      	subs	r5, r6, #2
 8012196:	6123      	str	r3, [r4, #16]
 8012198:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801219c:	463a      	mov	r2, r7
 801219e:	4640      	mov	r0, r8
 80121a0:	4798      	blx	r3
 80121a2:	462e      	mov	r6, r5
 80121a4:	6825      	ldr	r5, [r4, #0]
 80121a6:	f015 0510 	ands.w	r5, r5, #16
 80121aa:	d159      	bne.n	8012260 <_scanf_float+0x414>
 80121ac:	7035      	strb	r5, [r6, #0]
 80121ae:	6823      	ldr	r3, [r4, #0]
 80121b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80121b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80121b8:	d11b      	bne.n	80121f2 <_scanf_float+0x3a6>
 80121ba:	9b01      	ldr	r3, [sp, #4]
 80121bc:	454b      	cmp	r3, r9
 80121be:	eba3 0209 	sub.w	r2, r3, r9
 80121c2:	d123      	bne.n	801220c <_scanf_float+0x3c0>
 80121c4:	2200      	movs	r2, #0
 80121c6:	4659      	mov	r1, fp
 80121c8:	4640      	mov	r0, r8
 80121ca:	f000 ff8b 	bl	80130e4 <_strtod_r>
 80121ce:	6822      	ldr	r2, [r4, #0]
 80121d0:	9b03      	ldr	r3, [sp, #12]
 80121d2:	f012 0f02 	tst.w	r2, #2
 80121d6:	ec57 6b10 	vmov	r6, r7, d0
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	d021      	beq.n	8012222 <_scanf_float+0x3d6>
 80121de:	9903      	ldr	r1, [sp, #12]
 80121e0:	1d1a      	adds	r2, r3, #4
 80121e2:	600a      	str	r2, [r1, #0]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	e9c3 6700 	strd	r6, r7, [r3]
 80121ea:	68e3      	ldr	r3, [r4, #12]
 80121ec:	3301      	adds	r3, #1
 80121ee:	60e3      	str	r3, [r4, #12]
 80121f0:	e66d      	b.n	8011ece <_scanf_float+0x82>
 80121f2:	9b04      	ldr	r3, [sp, #16]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d0e5      	beq.n	80121c4 <_scanf_float+0x378>
 80121f8:	9905      	ldr	r1, [sp, #20]
 80121fa:	230a      	movs	r3, #10
 80121fc:	462a      	mov	r2, r5
 80121fe:	3101      	adds	r1, #1
 8012200:	4640      	mov	r0, r8
 8012202:	f000 fff7 	bl	80131f4 <_strtol_r>
 8012206:	9b04      	ldr	r3, [sp, #16]
 8012208:	9e05      	ldr	r6, [sp, #20]
 801220a:	1ac2      	subs	r2, r0, r3
 801220c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012210:	429e      	cmp	r6, r3
 8012212:	bf28      	it	cs
 8012214:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012218:	4912      	ldr	r1, [pc, #72]	; (8012264 <_scanf_float+0x418>)
 801221a:	4630      	mov	r0, r6
 801221c:	f000 f8da 	bl	80123d4 <siprintf>
 8012220:	e7d0      	b.n	80121c4 <_scanf_float+0x378>
 8012222:	9903      	ldr	r1, [sp, #12]
 8012224:	f012 0f04 	tst.w	r2, #4
 8012228:	f103 0204 	add.w	r2, r3, #4
 801222c:	600a      	str	r2, [r1, #0]
 801222e:	d1d9      	bne.n	80121e4 <_scanf_float+0x398>
 8012230:	f8d3 8000 	ldr.w	r8, [r3]
 8012234:	ee10 2a10 	vmov	r2, s0
 8012238:	ee10 0a10 	vmov	r0, s0
 801223c:	463b      	mov	r3, r7
 801223e:	4639      	mov	r1, r7
 8012240:	f7ee fc8c 	bl	8000b5c <__aeabi_dcmpun>
 8012244:	b128      	cbz	r0, 8012252 <_scanf_float+0x406>
 8012246:	4808      	ldr	r0, [pc, #32]	; (8012268 <_scanf_float+0x41c>)
 8012248:	f000 f88a 	bl	8012360 <nanf>
 801224c:	ed88 0a00 	vstr	s0, [r8]
 8012250:	e7cb      	b.n	80121ea <_scanf_float+0x39e>
 8012252:	4630      	mov	r0, r6
 8012254:	4639      	mov	r1, r7
 8012256:	f7ee fcdf 	bl	8000c18 <__aeabi_d2f>
 801225a:	f8c8 0000 	str.w	r0, [r8]
 801225e:	e7c4      	b.n	80121ea <_scanf_float+0x39e>
 8012260:	2500      	movs	r5, #0
 8012262:	e634      	b.n	8011ece <_scanf_float+0x82>
 8012264:	08015f00 	.word	0x08015f00
 8012268:	08016308 	.word	0x08016308

0801226c <cleanup_glue>:
 801226c:	b538      	push	{r3, r4, r5, lr}
 801226e:	460c      	mov	r4, r1
 8012270:	6809      	ldr	r1, [r1, #0]
 8012272:	4605      	mov	r5, r0
 8012274:	b109      	cbz	r1, 801227a <cleanup_glue+0xe>
 8012276:	f7ff fff9 	bl	801226c <cleanup_glue>
 801227a:	4621      	mov	r1, r4
 801227c:	4628      	mov	r0, r5
 801227e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012282:	f002 bf9d 	b.w	80151c0 <_free_r>
	...

08012288 <_reclaim_reent>:
 8012288:	4b2c      	ldr	r3, [pc, #176]	; (801233c <_reclaim_reent+0xb4>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	4283      	cmp	r3, r0
 801228e:	b570      	push	{r4, r5, r6, lr}
 8012290:	4604      	mov	r4, r0
 8012292:	d051      	beq.n	8012338 <_reclaim_reent+0xb0>
 8012294:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012296:	b143      	cbz	r3, 80122aa <_reclaim_reent+0x22>
 8012298:	68db      	ldr	r3, [r3, #12]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d14a      	bne.n	8012334 <_reclaim_reent+0xac>
 801229e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122a0:	6819      	ldr	r1, [r3, #0]
 80122a2:	b111      	cbz	r1, 80122aa <_reclaim_reent+0x22>
 80122a4:	4620      	mov	r0, r4
 80122a6:	f002 ff8b 	bl	80151c0 <_free_r>
 80122aa:	6961      	ldr	r1, [r4, #20]
 80122ac:	b111      	cbz	r1, 80122b4 <_reclaim_reent+0x2c>
 80122ae:	4620      	mov	r0, r4
 80122b0:	f002 ff86 	bl	80151c0 <_free_r>
 80122b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80122b6:	b111      	cbz	r1, 80122be <_reclaim_reent+0x36>
 80122b8:	4620      	mov	r0, r4
 80122ba:	f002 ff81 	bl	80151c0 <_free_r>
 80122be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80122c0:	b111      	cbz	r1, 80122c8 <_reclaim_reent+0x40>
 80122c2:	4620      	mov	r0, r4
 80122c4:	f002 ff7c 	bl	80151c0 <_free_r>
 80122c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80122ca:	b111      	cbz	r1, 80122d2 <_reclaim_reent+0x4a>
 80122cc:	4620      	mov	r0, r4
 80122ce:	f002 ff77 	bl	80151c0 <_free_r>
 80122d2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80122d4:	b111      	cbz	r1, 80122dc <_reclaim_reent+0x54>
 80122d6:	4620      	mov	r0, r4
 80122d8:	f002 ff72 	bl	80151c0 <_free_r>
 80122dc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80122de:	b111      	cbz	r1, 80122e6 <_reclaim_reent+0x5e>
 80122e0:	4620      	mov	r0, r4
 80122e2:	f002 ff6d 	bl	80151c0 <_free_r>
 80122e6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80122e8:	b111      	cbz	r1, 80122f0 <_reclaim_reent+0x68>
 80122ea:	4620      	mov	r0, r4
 80122ec:	f002 ff68 	bl	80151c0 <_free_r>
 80122f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122f2:	b111      	cbz	r1, 80122fa <_reclaim_reent+0x72>
 80122f4:	4620      	mov	r0, r4
 80122f6:	f002 ff63 	bl	80151c0 <_free_r>
 80122fa:	69a3      	ldr	r3, [r4, #24]
 80122fc:	b1e3      	cbz	r3, 8012338 <_reclaim_reent+0xb0>
 80122fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012300:	4620      	mov	r0, r4
 8012302:	4798      	blx	r3
 8012304:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012306:	b1b9      	cbz	r1, 8012338 <_reclaim_reent+0xb0>
 8012308:	4620      	mov	r0, r4
 801230a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801230e:	f7ff bfad 	b.w	801226c <cleanup_glue>
 8012312:	5949      	ldr	r1, [r1, r5]
 8012314:	b941      	cbnz	r1, 8012328 <_reclaim_reent+0xa0>
 8012316:	3504      	adds	r5, #4
 8012318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801231a:	2d80      	cmp	r5, #128	; 0x80
 801231c:	68d9      	ldr	r1, [r3, #12]
 801231e:	d1f8      	bne.n	8012312 <_reclaim_reent+0x8a>
 8012320:	4620      	mov	r0, r4
 8012322:	f002 ff4d 	bl	80151c0 <_free_r>
 8012326:	e7ba      	b.n	801229e <_reclaim_reent+0x16>
 8012328:	680e      	ldr	r6, [r1, #0]
 801232a:	4620      	mov	r0, r4
 801232c:	f002 ff48 	bl	80151c0 <_free_r>
 8012330:	4631      	mov	r1, r6
 8012332:	e7ef      	b.n	8012314 <_reclaim_reent+0x8c>
 8012334:	2500      	movs	r5, #0
 8012336:	e7ef      	b.n	8012318 <_reclaim_reent+0x90>
 8012338:	bd70      	pop	{r4, r5, r6, pc}
 801233a:	bf00      	nop
 801233c:	20000024 	.word	0x20000024

08012340 <_sbrk_r>:
 8012340:	b538      	push	{r3, r4, r5, lr}
 8012342:	4d06      	ldr	r5, [pc, #24]	; (801235c <_sbrk_r+0x1c>)
 8012344:	2300      	movs	r3, #0
 8012346:	4604      	mov	r4, r0
 8012348:	4608      	mov	r0, r1
 801234a:	602b      	str	r3, [r5, #0]
 801234c:	f7ef ff70 	bl	8002230 <_sbrk>
 8012350:	1c43      	adds	r3, r0, #1
 8012352:	d102      	bne.n	801235a <_sbrk_r+0x1a>
 8012354:	682b      	ldr	r3, [r5, #0]
 8012356:	b103      	cbz	r3, 801235a <_sbrk_r+0x1a>
 8012358:	6023      	str	r3, [r4, #0]
 801235a:	bd38      	pop	{r3, r4, r5, pc}
 801235c:	20005c44 	.word	0x20005c44

08012360 <nanf>:
 8012360:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012368 <nanf+0x8>
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	7fc00000 	.word	0x7fc00000

0801236c <sniprintf>:
 801236c:	b40c      	push	{r2, r3}
 801236e:	b530      	push	{r4, r5, lr}
 8012370:	4b17      	ldr	r3, [pc, #92]	; (80123d0 <sniprintf+0x64>)
 8012372:	1e0c      	subs	r4, r1, #0
 8012374:	681d      	ldr	r5, [r3, #0]
 8012376:	b09d      	sub	sp, #116	; 0x74
 8012378:	da08      	bge.n	801238c <sniprintf+0x20>
 801237a:	238b      	movs	r3, #139	; 0x8b
 801237c:	602b      	str	r3, [r5, #0]
 801237e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012382:	b01d      	add	sp, #116	; 0x74
 8012384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012388:	b002      	add	sp, #8
 801238a:	4770      	bx	lr
 801238c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012390:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012394:	bf14      	ite	ne
 8012396:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801239a:	4623      	moveq	r3, r4
 801239c:	9304      	str	r3, [sp, #16]
 801239e:	9307      	str	r3, [sp, #28]
 80123a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80123a4:	9002      	str	r0, [sp, #8]
 80123a6:	9006      	str	r0, [sp, #24]
 80123a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80123ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80123ae:	ab21      	add	r3, sp, #132	; 0x84
 80123b0:	a902      	add	r1, sp, #8
 80123b2:	4628      	mov	r0, r5
 80123b4:	9301      	str	r3, [sp, #4]
 80123b6:	f002 ffab 	bl	8015310 <_svfiprintf_r>
 80123ba:	1c43      	adds	r3, r0, #1
 80123bc:	bfbc      	itt	lt
 80123be:	238b      	movlt	r3, #139	; 0x8b
 80123c0:	602b      	strlt	r3, [r5, #0]
 80123c2:	2c00      	cmp	r4, #0
 80123c4:	d0dd      	beq.n	8012382 <sniprintf+0x16>
 80123c6:	9b02      	ldr	r3, [sp, #8]
 80123c8:	2200      	movs	r2, #0
 80123ca:	701a      	strb	r2, [r3, #0]
 80123cc:	e7d9      	b.n	8012382 <sniprintf+0x16>
 80123ce:	bf00      	nop
 80123d0:	20000024 	.word	0x20000024

080123d4 <siprintf>:
 80123d4:	b40e      	push	{r1, r2, r3}
 80123d6:	b500      	push	{lr}
 80123d8:	b09c      	sub	sp, #112	; 0x70
 80123da:	ab1d      	add	r3, sp, #116	; 0x74
 80123dc:	9002      	str	r0, [sp, #8]
 80123de:	9006      	str	r0, [sp, #24]
 80123e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80123e4:	4809      	ldr	r0, [pc, #36]	; (801240c <siprintf+0x38>)
 80123e6:	9107      	str	r1, [sp, #28]
 80123e8:	9104      	str	r1, [sp, #16]
 80123ea:	4909      	ldr	r1, [pc, #36]	; (8012410 <siprintf+0x3c>)
 80123ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80123f0:	9105      	str	r1, [sp, #20]
 80123f2:	6800      	ldr	r0, [r0, #0]
 80123f4:	9301      	str	r3, [sp, #4]
 80123f6:	a902      	add	r1, sp, #8
 80123f8:	f002 ff8a 	bl	8015310 <_svfiprintf_r>
 80123fc:	9b02      	ldr	r3, [sp, #8]
 80123fe:	2200      	movs	r2, #0
 8012400:	701a      	strb	r2, [r3, #0]
 8012402:	b01c      	add	sp, #112	; 0x70
 8012404:	f85d eb04 	ldr.w	lr, [sp], #4
 8012408:	b003      	add	sp, #12
 801240a:	4770      	bx	lr
 801240c:	20000024 	.word	0x20000024
 8012410:	ffff0208 	.word	0xffff0208

08012414 <__sread>:
 8012414:	b510      	push	{r4, lr}
 8012416:	460c      	mov	r4, r1
 8012418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801241c:	f003 f878 	bl	8015510 <_read_r>
 8012420:	2800      	cmp	r0, #0
 8012422:	bfab      	itete	ge
 8012424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012426:	89a3      	ldrhlt	r3, [r4, #12]
 8012428:	181b      	addge	r3, r3, r0
 801242a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801242e:	bfac      	ite	ge
 8012430:	6563      	strge	r3, [r4, #84]	; 0x54
 8012432:	81a3      	strhlt	r3, [r4, #12]
 8012434:	bd10      	pop	{r4, pc}

08012436 <__swrite>:
 8012436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801243a:	461f      	mov	r7, r3
 801243c:	898b      	ldrh	r3, [r1, #12]
 801243e:	05db      	lsls	r3, r3, #23
 8012440:	4605      	mov	r5, r0
 8012442:	460c      	mov	r4, r1
 8012444:	4616      	mov	r6, r2
 8012446:	d505      	bpl.n	8012454 <__swrite+0x1e>
 8012448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801244c:	2302      	movs	r3, #2
 801244e:	2200      	movs	r2, #0
 8012450:	f002 f9a6 	bl	80147a0 <_lseek_r>
 8012454:	89a3      	ldrh	r3, [r4, #12]
 8012456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801245a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801245e:	81a3      	strh	r3, [r4, #12]
 8012460:	4632      	mov	r2, r6
 8012462:	463b      	mov	r3, r7
 8012464:	4628      	mov	r0, r5
 8012466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801246a:	f000 bec5 	b.w	80131f8 <_write_r>

0801246e <__sseek>:
 801246e:	b510      	push	{r4, lr}
 8012470:	460c      	mov	r4, r1
 8012472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012476:	f002 f993 	bl	80147a0 <_lseek_r>
 801247a:	1c43      	adds	r3, r0, #1
 801247c:	89a3      	ldrh	r3, [r4, #12]
 801247e:	bf15      	itete	ne
 8012480:	6560      	strne	r0, [r4, #84]	; 0x54
 8012482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801248a:	81a3      	strheq	r3, [r4, #12]
 801248c:	bf18      	it	ne
 801248e:	81a3      	strhne	r3, [r4, #12]
 8012490:	bd10      	pop	{r4, pc}

08012492 <__sclose>:
 8012492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012496:	f000 bec1 	b.w	801321c <_close_r>

0801249a <sulp>:
 801249a:	b570      	push	{r4, r5, r6, lr}
 801249c:	4604      	mov	r4, r0
 801249e:	460d      	mov	r5, r1
 80124a0:	ec45 4b10 	vmov	d0, r4, r5
 80124a4:	4616      	mov	r6, r2
 80124a6:	f002 fd25 	bl	8014ef4 <__ulp>
 80124aa:	ec51 0b10 	vmov	r0, r1, d0
 80124ae:	b17e      	cbz	r6, 80124d0 <sulp+0x36>
 80124b0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80124b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	dd09      	ble.n	80124d0 <sulp+0x36>
 80124bc:	051b      	lsls	r3, r3, #20
 80124be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80124c2:	2400      	movs	r4, #0
 80124c4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80124c8:	4622      	mov	r2, r4
 80124ca:	462b      	mov	r3, r5
 80124cc:	f7ee f8ac 	bl	8000628 <__aeabi_dmul>
 80124d0:	bd70      	pop	{r4, r5, r6, pc}
 80124d2:	0000      	movs	r0, r0
 80124d4:	0000      	movs	r0, r0
	...

080124d8 <_strtod_l>:
 80124d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124dc:	ed2d 8b02 	vpush	{d8}
 80124e0:	b09d      	sub	sp, #116	; 0x74
 80124e2:	461f      	mov	r7, r3
 80124e4:	2300      	movs	r3, #0
 80124e6:	9318      	str	r3, [sp, #96]	; 0x60
 80124e8:	4ba2      	ldr	r3, [pc, #648]	; (8012774 <_strtod_l+0x29c>)
 80124ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	9305      	str	r3, [sp, #20]
 80124f0:	4604      	mov	r4, r0
 80124f2:	4618      	mov	r0, r3
 80124f4:	4688      	mov	r8, r1
 80124f6:	f7ed fe83 	bl	8000200 <strlen>
 80124fa:	f04f 0a00 	mov.w	sl, #0
 80124fe:	4605      	mov	r5, r0
 8012500:	f04f 0b00 	mov.w	fp, #0
 8012504:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801250a:	781a      	ldrb	r2, [r3, #0]
 801250c:	2a2b      	cmp	r2, #43	; 0x2b
 801250e:	d04e      	beq.n	80125ae <_strtod_l+0xd6>
 8012510:	d83b      	bhi.n	801258a <_strtod_l+0xb2>
 8012512:	2a0d      	cmp	r2, #13
 8012514:	d834      	bhi.n	8012580 <_strtod_l+0xa8>
 8012516:	2a08      	cmp	r2, #8
 8012518:	d834      	bhi.n	8012584 <_strtod_l+0xac>
 801251a:	2a00      	cmp	r2, #0
 801251c:	d03e      	beq.n	801259c <_strtod_l+0xc4>
 801251e:	2300      	movs	r3, #0
 8012520:	930a      	str	r3, [sp, #40]	; 0x28
 8012522:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012524:	7833      	ldrb	r3, [r6, #0]
 8012526:	2b30      	cmp	r3, #48	; 0x30
 8012528:	f040 80b0 	bne.w	801268c <_strtod_l+0x1b4>
 801252c:	7873      	ldrb	r3, [r6, #1]
 801252e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012532:	2b58      	cmp	r3, #88	; 0x58
 8012534:	d168      	bne.n	8012608 <_strtod_l+0x130>
 8012536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012538:	9301      	str	r3, [sp, #4]
 801253a:	ab18      	add	r3, sp, #96	; 0x60
 801253c:	9702      	str	r7, [sp, #8]
 801253e:	9300      	str	r3, [sp, #0]
 8012540:	4a8d      	ldr	r2, [pc, #564]	; (8012778 <_strtod_l+0x2a0>)
 8012542:	ab19      	add	r3, sp, #100	; 0x64
 8012544:	a917      	add	r1, sp, #92	; 0x5c
 8012546:	4620      	mov	r0, r4
 8012548:	f001 fe1e 	bl	8014188 <__gethex>
 801254c:	f010 0707 	ands.w	r7, r0, #7
 8012550:	4605      	mov	r5, r0
 8012552:	d005      	beq.n	8012560 <_strtod_l+0x88>
 8012554:	2f06      	cmp	r7, #6
 8012556:	d12c      	bne.n	80125b2 <_strtod_l+0xda>
 8012558:	3601      	adds	r6, #1
 801255a:	2300      	movs	r3, #0
 801255c:	9617      	str	r6, [sp, #92]	; 0x5c
 801255e:	930a      	str	r3, [sp, #40]	; 0x28
 8012560:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012562:	2b00      	cmp	r3, #0
 8012564:	f040 8590 	bne.w	8013088 <_strtod_l+0xbb0>
 8012568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801256a:	b1eb      	cbz	r3, 80125a8 <_strtod_l+0xd0>
 801256c:	4652      	mov	r2, sl
 801256e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012572:	ec43 2b10 	vmov	d0, r2, r3
 8012576:	b01d      	add	sp, #116	; 0x74
 8012578:	ecbd 8b02 	vpop	{d8}
 801257c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012580:	2a20      	cmp	r2, #32
 8012582:	d1cc      	bne.n	801251e <_strtod_l+0x46>
 8012584:	3301      	adds	r3, #1
 8012586:	9317      	str	r3, [sp, #92]	; 0x5c
 8012588:	e7be      	b.n	8012508 <_strtod_l+0x30>
 801258a:	2a2d      	cmp	r2, #45	; 0x2d
 801258c:	d1c7      	bne.n	801251e <_strtod_l+0x46>
 801258e:	2201      	movs	r2, #1
 8012590:	920a      	str	r2, [sp, #40]	; 0x28
 8012592:	1c5a      	adds	r2, r3, #1
 8012594:	9217      	str	r2, [sp, #92]	; 0x5c
 8012596:	785b      	ldrb	r3, [r3, #1]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d1c2      	bne.n	8012522 <_strtod_l+0x4a>
 801259c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801259e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	f040 856e 	bne.w	8013084 <_strtod_l+0xbac>
 80125a8:	4652      	mov	r2, sl
 80125aa:	465b      	mov	r3, fp
 80125ac:	e7e1      	b.n	8012572 <_strtod_l+0x9a>
 80125ae:	2200      	movs	r2, #0
 80125b0:	e7ee      	b.n	8012590 <_strtod_l+0xb8>
 80125b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80125b4:	b13a      	cbz	r2, 80125c6 <_strtod_l+0xee>
 80125b6:	2135      	movs	r1, #53	; 0x35
 80125b8:	a81a      	add	r0, sp, #104	; 0x68
 80125ba:	f002 fda6 	bl	801510a <__copybits>
 80125be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80125c0:	4620      	mov	r0, r4
 80125c2:	f002 f965 	bl	8014890 <_Bfree>
 80125c6:	3f01      	subs	r7, #1
 80125c8:	2f04      	cmp	r7, #4
 80125ca:	d806      	bhi.n	80125da <_strtod_l+0x102>
 80125cc:	e8df f007 	tbb	[pc, r7]
 80125d0:	1714030a 	.word	0x1714030a
 80125d4:	0a          	.byte	0x0a
 80125d5:	00          	.byte	0x00
 80125d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80125da:	0728      	lsls	r0, r5, #28
 80125dc:	d5c0      	bpl.n	8012560 <_strtod_l+0x88>
 80125de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80125e2:	e7bd      	b.n	8012560 <_strtod_l+0x88>
 80125e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80125e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80125ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80125ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80125f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80125f6:	e7f0      	b.n	80125da <_strtod_l+0x102>
 80125f8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801277c <_strtod_l+0x2a4>
 80125fc:	e7ed      	b.n	80125da <_strtod_l+0x102>
 80125fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012602:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012606:	e7e8      	b.n	80125da <_strtod_l+0x102>
 8012608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801260a:	1c5a      	adds	r2, r3, #1
 801260c:	9217      	str	r2, [sp, #92]	; 0x5c
 801260e:	785b      	ldrb	r3, [r3, #1]
 8012610:	2b30      	cmp	r3, #48	; 0x30
 8012612:	d0f9      	beq.n	8012608 <_strtod_l+0x130>
 8012614:	2b00      	cmp	r3, #0
 8012616:	d0a3      	beq.n	8012560 <_strtod_l+0x88>
 8012618:	2301      	movs	r3, #1
 801261a:	f04f 0900 	mov.w	r9, #0
 801261e:	9304      	str	r3, [sp, #16]
 8012620:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012622:	9308      	str	r3, [sp, #32]
 8012624:	f8cd 901c 	str.w	r9, [sp, #28]
 8012628:	464f      	mov	r7, r9
 801262a:	220a      	movs	r2, #10
 801262c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801262e:	7806      	ldrb	r6, [r0, #0]
 8012630:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012634:	b2d9      	uxtb	r1, r3
 8012636:	2909      	cmp	r1, #9
 8012638:	d92a      	bls.n	8012690 <_strtod_l+0x1b8>
 801263a:	9905      	ldr	r1, [sp, #20]
 801263c:	462a      	mov	r2, r5
 801263e:	f002 ff83 	bl	8015548 <strncmp>
 8012642:	b398      	cbz	r0, 80126ac <_strtod_l+0x1d4>
 8012644:	2000      	movs	r0, #0
 8012646:	4632      	mov	r2, r6
 8012648:	463d      	mov	r5, r7
 801264a:	9005      	str	r0, [sp, #20]
 801264c:	4603      	mov	r3, r0
 801264e:	2a65      	cmp	r2, #101	; 0x65
 8012650:	d001      	beq.n	8012656 <_strtod_l+0x17e>
 8012652:	2a45      	cmp	r2, #69	; 0x45
 8012654:	d118      	bne.n	8012688 <_strtod_l+0x1b0>
 8012656:	b91d      	cbnz	r5, 8012660 <_strtod_l+0x188>
 8012658:	9a04      	ldr	r2, [sp, #16]
 801265a:	4302      	orrs	r2, r0
 801265c:	d09e      	beq.n	801259c <_strtod_l+0xc4>
 801265e:	2500      	movs	r5, #0
 8012660:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8012664:	f108 0201 	add.w	r2, r8, #1
 8012668:	9217      	str	r2, [sp, #92]	; 0x5c
 801266a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801266e:	2a2b      	cmp	r2, #43	; 0x2b
 8012670:	d075      	beq.n	801275e <_strtod_l+0x286>
 8012672:	2a2d      	cmp	r2, #45	; 0x2d
 8012674:	d07b      	beq.n	801276e <_strtod_l+0x296>
 8012676:	f04f 0c00 	mov.w	ip, #0
 801267a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801267e:	2909      	cmp	r1, #9
 8012680:	f240 8082 	bls.w	8012788 <_strtod_l+0x2b0>
 8012684:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8012688:	2600      	movs	r6, #0
 801268a:	e09d      	b.n	80127c8 <_strtod_l+0x2f0>
 801268c:	2300      	movs	r3, #0
 801268e:	e7c4      	b.n	801261a <_strtod_l+0x142>
 8012690:	2f08      	cmp	r7, #8
 8012692:	bfd8      	it	le
 8012694:	9907      	ldrle	r1, [sp, #28]
 8012696:	f100 0001 	add.w	r0, r0, #1
 801269a:	bfda      	itte	le
 801269c:	fb02 3301 	mlale	r3, r2, r1, r3
 80126a0:	9307      	strle	r3, [sp, #28]
 80126a2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80126a6:	3701      	adds	r7, #1
 80126a8:	9017      	str	r0, [sp, #92]	; 0x5c
 80126aa:	e7bf      	b.n	801262c <_strtod_l+0x154>
 80126ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80126ae:	195a      	adds	r2, r3, r5
 80126b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80126b2:	5d5a      	ldrb	r2, [r3, r5]
 80126b4:	2f00      	cmp	r7, #0
 80126b6:	d037      	beq.n	8012728 <_strtod_l+0x250>
 80126b8:	9005      	str	r0, [sp, #20]
 80126ba:	463d      	mov	r5, r7
 80126bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80126c0:	2b09      	cmp	r3, #9
 80126c2:	d912      	bls.n	80126ea <_strtod_l+0x212>
 80126c4:	2301      	movs	r3, #1
 80126c6:	e7c2      	b.n	801264e <_strtod_l+0x176>
 80126c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80126ca:	1c5a      	adds	r2, r3, #1
 80126cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80126ce:	785a      	ldrb	r2, [r3, #1]
 80126d0:	3001      	adds	r0, #1
 80126d2:	2a30      	cmp	r2, #48	; 0x30
 80126d4:	d0f8      	beq.n	80126c8 <_strtod_l+0x1f0>
 80126d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80126da:	2b08      	cmp	r3, #8
 80126dc:	f200 84d9 	bhi.w	8013092 <_strtod_l+0xbba>
 80126e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80126e2:	9005      	str	r0, [sp, #20]
 80126e4:	2000      	movs	r0, #0
 80126e6:	9308      	str	r3, [sp, #32]
 80126e8:	4605      	mov	r5, r0
 80126ea:	3a30      	subs	r2, #48	; 0x30
 80126ec:	f100 0301 	add.w	r3, r0, #1
 80126f0:	d014      	beq.n	801271c <_strtod_l+0x244>
 80126f2:	9905      	ldr	r1, [sp, #20]
 80126f4:	4419      	add	r1, r3
 80126f6:	9105      	str	r1, [sp, #20]
 80126f8:	462b      	mov	r3, r5
 80126fa:	eb00 0e05 	add.w	lr, r0, r5
 80126fe:	210a      	movs	r1, #10
 8012700:	4573      	cmp	r3, lr
 8012702:	d113      	bne.n	801272c <_strtod_l+0x254>
 8012704:	182b      	adds	r3, r5, r0
 8012706:	2b08      	cmp	r3, #8
 8012708:	f105 0501 	add.w	r5, r5, #1
 801270c:	4405      	add	r5, r0
 801270e:	dc1c      	bgt.n	801274a <_strtod_l+0x272>
 8012710:	9907      	ldr	r1, [sp, #28]
 8012712:	230a      	movs	r3, #10
 8012714:	fb03 2301 	mla	r3, r3, r1, r2
 8012718:	9307      	str	r3, [sp, #28]
 801271a:	2300      	movs	r3, #0
 801271c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801271e:	1c51      	adds	r1, r2, #1
 8012720:	9117      	str	r1, [sp, #92]	; 0x5c
 8012722:	7852      	ldrb	r2, [r2, #1]
 8012724:	4618      	mov	r0, r3
 8012726:	e7c9      	b.n	80126bc <_strtod_l+0x1e4>
 8012728:	4638      	mov	r0, r7
 801272a:	e7d2      	b.n	80126d2 <_strtod_l+0x1fa>
 801272c:	2b08      	cmp	r3, #8
 801272e:	dc04      	bgt.n	801273a <_strtod_l+0x262>
 8012730:	9e07      	ldr	r6, [sp, #28]
 8012732:	434e      	muls	r6, r1
 8012734:	9607      	str	r6, [sp, #28]
 8012736:	3301      	adds	r3, #1
 8012738:	e7e2      	b.n	8012700 <_strtod_l+0x228>
 801273a:	f103 0c01 	add.w	ip, r3, #1
 801273e:	f1bc 0f10 	cmp.w	ip, #16
 8012742:	bfd8      	it	le
 8012744:	fb01 f909 	mulle.w	r9, r1, r9
 8012748:	e7f5      	b.n	8012736 <_strtod_l+0x25e>
 801274a:	2d10      	cmp	r5, #16
 801274c:	bfdc      	itt	le
 801274e:	230a      	movle	r3, #10
 8012750:	fb03 2909 	mlale	r9, r3, r9, r2
 8012754:	e7e1      	b.n	801271a <_strtod_l+0x242>
 8012756:	2300      	movs	r3, #0
 8012758:	9305      	str	r3, [sp, #20]
 801275a:	2301      	movs	r3, #1
 801275c:	e77c      	b.n	8012658 <_strtod_l+0x180>
 801275e:	f04f 0c00 	mov.w	ip, #0
 8012762:	f108 0202 	add.w	r2, r8, #2
 8012766:	9217      	str	r2, [sp, #92]	; 0x5c
 8012768:	f898 2002 	ldrb.w	r2, [r8, #2]
 801276c:	e785      	b.n	801267a <_strtod_l+0x1a2>
 801276e:	f04f 0c01 	mov.w	ip, #1
 8012772:	e7f6      	b.n	8012762 <_strtod_l+0x28a>
 8012774:	08016150 	.word	0x08016150
 8012778:	08015f08 	.word	0x08015f08
 801277c:	7ff00000 	.word	0x7ff00000
 8012780:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012782:	1c51      	adds	r1, r2, #1
 8012784:	9117      	str	r1, [sp, #92]	; 0x5c
 8012786:	7852      	ldrb	r2, [r2, #1]
 8012788:	2a30      	cmp	r2, #48	; 0x30
 801278a:	d0f9      	beq.n	8012780 <_strtod_l+0x2a8>
 801278c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012790:	2908      	cmp	r1, #8
 8012792:	f63f af79 	bhi.w	8012688 <_strtod_l+0x1b0>
 8012796:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801279a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801279c:	9206      	str	r2, [sp, #24]
 801279e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80127a0:	1c51      	adds	r1, r2, #1
 80127a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80127a4:	7852      	ldrb	r2, [r2, #1]
 80127a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80127aa:	2e09      	cmp	r6, #9
 80127ac:	d937      	bls.n	801281e <_strtod_l+0x346>
 80127ae:	9e06      	ldr	r6, [sp, #24]
 80127b0:	1b89      	subs	r1, r1, r6
 80127b2:	2908      	cmp	r1, #8
 80127b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80127b8:	dc02      	bgt.n	80127c0 <_strtod_l+0x2e8>
 80127ba:	4576      	cmp	r6, lr
 80127bc:	bfa8      	it	ge
 80127be:	4676      	movge	r6, lr
 80127c0:	f1bc 0f00 	cmp.w	ip, #0
 80127c4:	d000      	beq.n	80127c8 <_strtod_l+0x2f0>
 80127c6:	4276      	negs	r6, r6
 80127c8:	2d00      	cmp	r5, #0
 80127ca:	d14d      	bne.n	8012868 <_strtod_l+0x390>
 80127cc:	9904      	ldr	r1, [sp, #16]
 80127ce:	4301      	orrs	r1, r0
 80127d0:	f47f aec6 	bne.w	8012560 <_strtod_l+0x88>
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	f47f aee1 	bne.w	801259c <_strtod_l+0xc4>
 80127da:	2a69      	cmp	r2, #105	; 0x69
 80127dc:	d027      	beq.n	801282e <_strtod_l+0x356>
 80127de:	dc24      	bgt.n	801282a <_strtod_l+0x352>
 80127e0:	2a49      	cmp	r2, #73	; 0x49
 80127e2:	d024      	beq.n	801282e <_strtod_l+0x356>
 80127e4:	2a4e      	cmp	r2, #78	; 0x4e
 80127e6:	f47f aed9 	bne.w	801259c <_strtod_l+0xc4>
 80127ea:	499f      	ldr	r1, [pc, #636]	; (8012a68 <_strtod_l+0x590>)
 80127ec:	a817      	add	r0, sp, #92	; 0x5c
 80127ee:	f001 ff23 	bl	8014638 <__match>
 80127f2:	2800      	cmp	r0, #0
 80127f4:	f43f aed2 	beq.w	801259c <_strtod_l+0xc4>
 80127f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	2b28      	cmp	r3, #40	; 0x28
 80127fe:	d12d      	bne.n	801285c <_strtod_l+0x384>
 8012800:	499a      	ldr	r1, [pc, #616]	; (8012a6c <_strtod_l+0x594>)
 8012802:	aa1a      	add	r2, sp, #104	; 0x68
 8012804:	a817      	add	r0, sp, #92	; 0x5c
 8012806:	f001 ff2b 	bl	8014660 <__hexnan>
 801280a:	2805      	cmp	r0, #5
 801280c:	d126      	bne.n	801285c <_strtod_l+0x384>
 801280e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012810:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012814:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012818:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801281c:	e6a0      	b.n	8012560 <_strtod_l+0x88>
 801281e:	210a      	movs	r1, #10
 8012820:	fb01 2e0e 	mla	lr, r1, lr, r2
 8012824:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012828:	e7b9      	b.n	801279e <_strtod_l+0x2c6>
 801282a:	2a6e      	cmp	r2, #110	; 0x6e
 801282c:	e7db      	b.n	80127e6 <_strtod_l+0x30e>
 801282e:	4990      	ldr	r1, [pc, #576]	; (8012a70 <_strtod_l+0x598>)
 8012830:	a817      	add	r0, sp, #92	; 0x5c
 8012832:	f001 ff01 	bl	8014638 <__match>
 8012836:	2800      	cmp	r0, #0
 8012838:	f43f aeb0 	beq.w	801259c <_strtod_l+0xc4>
 801283c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801283e:	498d      	ldr	r1, [pc, #564]	; (8012a74 <_strtod_l+0x59c>)
 8012840:	3b01      	subs	r3, #1
 8012842:	a817      	add	r0, sp, #92	; 0x5c
 8012844:	9317      	str	r3, [sp, #92]	; 0x5c
 8012846:	f001 fef7 	bl	8014638 <__match>
 801284a:	b910      	cbnz	r0, 8012852 <_strtod_l+0x37a>
 801284c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801284e:	3301      	adds	r3, #1
 8012850:	9317      	str	r3, [sp, #92]	; 0x5c
 8012852:	f8df b230 	ldr.w	fp, [pc, #560]	; 8012a84 <_strtod_l+0x5ac>
 8012856:	f04f 0a00 	mov.w	sl, #0
 801285a:	e681      	b.n	8012560 <_strtod_l+0x88>
 801285c:	4886      	ldr	r0, [pc, #536]	; (8012a78 <_strtod_l+0x5a0>)
 801285e:	f002 fe6b 	bl	8015538 <nan>
 8012862:	ec5b ab10 	vmov	sl, fp, d0
 8012866:	e67b      	b.n	8012560 <_strtod_l+0x88>
 8012868:	9b05      	ldr	r3, [sp, #20]
 801286a:	9807      	ldr	r0, [sp, #28]
 801286c:	1af3      	subs	r3, r6, r3
 801286e:	2f00      	cmp	r7, #0
 8012870:	bf08      	it	eq
 8012872:	462f      	moveq	r7, r5
 8012874:	2d10      	cmp	r5, #16
 8012876:	9306      	str	r3, [sp, #24]
 8012878:	46a8      	mov	r8, r5
 801287a:	bfa8      	it	ge
 801287c:	f04f 0810 	movge.w	r8, #16
 8012880:	f7ed fe58 	bl	8000534 <__aeabi_ui2d>
 8012884:	2d09      	cmp	r5, #9
 8012886:	4682      	mov	sl, r0
 8012888:	468b      	mov	fp, r1
 801288a:	dd13      	ble.n	80128b4 <_strtod_l+0x3dc>
 801288c:	4b7b      	ldr	r3, [pc, #492]	; (8012a7c <_strtod_l+0x5a4>)
 801288e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012892:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012896:	f7ed fec7 	bl	8000628 <__aeabi_dmul>
 801289a:	4682      	mov	sl, r0
 801289c:	4648      	mov	r0, r9
 801289e:	468b      	mov	fp, r1
 80128a0:	f7ed fe48 	bl	8000534 <__aeabi_ui2d>
 80128a4:	4602      	mov	r2, r0
 80128a6:	460b      	mov	r3, r1
 80128a8:	4650      	mov	r0, sl
 80128aa:	4659      	mov	r1, fp
 80128ac:	f7ed fd06 	bl	80002bc <__adddf3>
 80128b0:	4682      	mov	sl, r0
 80128b2:	468b      	mov	fp, r1
 80128b4:	2d0f      	cmp	r5, #15
 80128b6:	dc38      	bgt.n	801292a <_strtod_l+0x452>
 80128b8:	9b06      	ldr	r3, [sp, #24]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	f43f ae50 	beq.w	8012560 <_strtod_l+0x88>
 80128c0:	dd24      	ble.n	801290c <_strtod_l+0x434>
 80128c2:	2b16      	cmp	r3, #22
 80128c4:	dc0b      	bgt.n	80128de <_strtod_l+0x406>
 80128c6:	496d      	ldr	r1, [pc, #436]	; (8012a7c <_strtod_l+0x5a4>)
 80128c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80128cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128d0:	4652      	mov	r2, sl
 80128d2:	465b      	mov	r3, fp
 80128d4:	f7ed fea8 	bl	8000628 <__aeabi_dmul>
 80128d8:	4682      	mov	sl, r0
 80128da:	468b      	mov	fp, r1
 80128dc:	e640      	b.n	8012560 <_strtod_l+0x88>
 80128de:	9a06      	ldr	r2, [sp, #24]
 80128e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80128e4:	4293      	cmp	r3, r2
 80128e6:	db20      	blt.n	801292a <_strtod_l+0x452>
 80128e8:	4c64      	ldr	r4, [pc, #400]	; (8012a7c <_strtod_l+0x5a4>)
 80128ea:	f1c5 050f 	rsb	r5, r5, #15
 80128ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80128f2:	4652      	mov	r2, sl
 80128f4:	465b      	mov	r3, fp
 80128f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128fa:	f7ed fe95 	bl	8000628 <__aeabi_dmul>
 80128fe:	9b06      	ldr	r3, [sp, #24]
 8012900:	1b5d      	subs	r5, r3, r5
 8012902:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012906:	e9d4 2300 	ldrd	r2, r3, [r4]
 801290a:	e7e3      	b.n	80128d4 <_strtod_l+0x3fc>
 801290c:	9b06      	ldr	r3, [sp, #24]
 801290e:	3316      	adds	r3, #22
 8012910:	db0b      	blt.n	801292a <_strtod_l+0x452>
 8012912:	9b05      	ldr	r3, [sp, #20]
 8012914:	1b9e      	subs	r6, r3, r6
 8012916:	4b59      	ldr	r3, [pc, #356]	; (8012a7c <_strtod_l+0x5a4>)
 8012918:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801291c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012920:	4650      	mov	r0, sl
 8012922:	4659      	mov	r1, fp
 8012924:	f7ed ffaa 	bl	800087c <__aeabi_ddiv>
 8012928:	e7d6      	b.n	80128d8 <_strtod_l+0x400>
 801292a:	9b06      	ldr	r3, [sp, #24]
 801292c:	eba5 0808 	sub.w	r8, r5, r8
 8012930:	4498      	add	r8, r3
 8012932:	f1b8 0f00 	cmp.w	r8, #0
 8012936:	dd74      	ble.n	8012a22 <_strtod_l+0x54a>
 8012938:	f018 030f 	ands.w	r3, r8, #15
 801293c:	d00a      	beq.n	8012954 <_strtod_l+0x47c>
 801293e:	494f      	ldr	r1, [pc, #316]	; (8012a7c <_strtod_l+0x5a4>)
 8012940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012944:	4652      	mov	r2, sl
 8012946:	465b      	mov	r3, fp
 8012948:	e9d1 0100 	ldrd	r0, r1, [r1]
 801294c:	f7ed fe6c 	bl	8000628 <__aeabi_dmul>
 8012950:	4682      	mov	sl, r0
 8012952:	468b      	mov	fp, r1
 8012954:	f038 080f 	bics.w	r8, r8, #15
 8012958:	d04f      	beq.n	80129fa <_strtod_l+0x522>
 801295a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801295e:	dd22      	ble.n	80129a6 <_strtod_l+0x4ce>
 8012960:	2500      	movs	r5, #0
 8012962:	462e      	mov	r6, r5
 8012964:	9507      	str	r5, [sp, #28]
 8012966:	9505      	str	r5, [sp, #20]
 8012968:	2322      	movs	r3, #34	; 0x22
 801296a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8012a84 <_strtod_l+0x5ac>
 801296e:	6023      	str	r3, [r4, #0]
 8012970:	f04f 0a00 	mov.w	sl, #0
 8012974:	9b07      	ldr	r3, [sp, #28]
 8012976:	2b00      	cmp	r3, #0
 8012978:	f43f adf2 	beq.w	8012560 <_strtod_l+0x88>
 801297c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801297e:	4620      	mov	r0, r4
 8012980:	f001 ff86 	bl	8014890 <_Bfree>
 8012984:	9905      	ldr	r1, [sp, #20]
 8012986:	4620      	mov	r0, r4
 8012988:	f001 ff82 	bl	8014890 <_Bfree>
 801298c:	4631      	mov	r1, r6
 801298e:	4620      	mov	r0, r4
 8012990:	f001 ff7e 	bl	8014890 <_Bfree>
 8012994:	9907      	ldr	r1, [sp, #28]
 8012996:	4620      	mov	r0, r4
 8012998:	f001 ff7a 	bl	8014890 <_Bfree>
 801299c:	4629      	mov	r1, r5
 801299e:	4620      	mov	r0, r4
 80129a0:	f001 ff76 	bl	8014890 <_Bfree>
 80129a4:	e5dc      	b.n	8012560 <_strtod_l+0x88>
 80129a6:	4b36      	ldr	r3, [pc, #216]	; (8012a80 <_strtod_l+0x5a8>)
 80129a8:	9304      	str	r3, [sp, #16]
 80129aa:	2300      	movs	r3, #0
 80129ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 80129b0:	4650      	mov	r0, sl
 80129b2:	4659      	mov	r1, fp
 80129b4:	4699      	mov	r9, r3
 80129b6:	f1b8 0f01 	cmp.w	r8, #1
 80129ba:	dc21      	bgt.n	8012a00 <_strtod_l+0x528>
 80129bc:	b10b      	cbz	r3, 80129c2 <_strtod_l+0x4ea>
 80129be:	4682      	mov	sl, r0
 80129c0:	468b      	mov	fp, r1
 80129c2:	4b2f      	ldr	r3, [pc, #188]	; (8012a80 <_strtod_l+0x5a8>)
 80129c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80129c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80129cc:	4652      	mov	r2, sl
 80129ce:	465b      	mov	r3, fp
 80129d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80129d4:	f7ed fe28 	bl	8000628 <__aeabi_dmul>
 80129d8:	4b2a      	ldr	r3, [pc, #168]	; (8012a84 <_strtod_l+0x5ac>)
 80129da:	460a      	mov	r2, r1
 80129dc:	400b      	ands	r3, r1
 80129de:	492a      	ldr	r1, [pc, #168]	; (8012a88 <_strtod_l+0x5b0>)
 80129e0:	428b      	cmp	r3, r1
 80129e2:	4682      	mov	sl, r0
 80129e4:	d8bc      	bhi.n	8012960 <_strtod_l+0x488>
 80129e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80129ea:	428b      	cmp	r3, r1
 80129ec:	bf86      	itte	hi
 80129ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8012a8c <_strtod_l+0x5b4>
 80129f2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80129f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80129fa:	2300      	movs	r3, #0
 80129fc:	9304      	str	r3, [sp, #16]
 80129fe:	e084      	b.n	8012b0a <_strtod_l+0x632>
 8012a00:	f018 0f01 	tst.w	r8, #1
 8012a04:	d005      	beq.n	8012a12 <_strtod_l+0x53a>
 8012a06:	9b04      	ldr	r3, [sp, #16]
 8012a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0c:	f7ed fe0c 	bl	8000628 <__aeabi_dmul>
 8012a10:	2301      	movs	r3, #1
 8012a12:	9a04      	ldr	r2, [sp, #16]
 8012a14:	3208      	adds	r2, #8
 8012a16:	f109 0901 	add.w	r9, r9, #1
 8012a1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012a1e:	9204      	str	r2, [sp, #16]
 8012a20:	e7c9      	b.n	80129b6 <_strtod_l+0x4de>
 8012a22:	d0ea      	beq.n	80129fa <_strtod_l+0x522>
 8012a24:	f1c8 0800 	rsb	r8, r8, #0
 8012a28:	f018 020f 	ands.w	r2, r8, #15
 8012a2c:	d00a      	beq.n	8012a44 <_strtod_l+0x56c>
 8012a2e:	4b13      	ldr	r3, [pc, #76]	; (8012a7c <_strtod_l+0x5a4>)
 8012a30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012a34:	4650      	mov	r0, sl
 8012a36:	4659      	mov	r1, fp
 8012a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3c:	f7ed ff1e 	bl	800087c <__aeabi_ddiv>
 8012a40:	4682      	mov	sl, r0
 8012a42:	468b      	mov	fp, r1
 8012a44:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012a48:	d0d7      	beq.n	80129fa <_strtod_l+0x522>
 8012a4a:	f1b8 0f1f 	cmp.w	r8, #31
 8012a4e:	dd1f      	ble.n	8012a90 <_strtod_l+0x5b8>
 8012a50:	2500      	movs	r5, #0
 8012a52:	462e      	mov	r6, r5
 8012a54:	9507      	str	r5, [sp, #28]
 8012a56:	9505      	str	r5, [sp, #20]
 8012a58:	2322      	movs	r3, #34	; 0x22
 8012a5a:	f04f 0a00 	mov.w	sl, #0
 8012a5e:	f04f 0b00 	mov.w	fp, #0
 8012a62:	6023      	str	r3, [r4, #0]
 8012a64:	e786      	b.n	8012974 <_strtod_l+0x49c>
 8012a66:	bf00      	nop
 8012a68:	08015ed9 	.word	0x08015ed9
 8012a6c:	08015f1c 	.word	0x08015f1c
 8012a70:	08015ed1 	.word	0x08015ed1
 8012a74:	0801605c 	.word	0x0801605c
 8012a78:	08016308 	.word	0x08016308
 8012a7c:	080161e8 	.word	0x080161e8
 8012a80:	080161c0 	.word	0x080161c0
 8012a84:	7ff00000 	.word	0x7ff00000
 8012a88:	7ca00000 	.word	0x7ca00000
 8012a8c:	7fefffff 	.word	0x7fefffff
 8012a90:	f018 0310 	ands.w	r3, r8, #16
 8012a94:	bf18      	it	ne
 8012a96:	236a      	movne	r3, #106	; 0x6a
 8012a98:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8012e48 <_strtod_l+0x970>
 8012a9c:	9304      	str	r3, [sp, #16]
 8012a9e:	4650      	mov	r0, sl
 8012aa0:	4659      	mov	r1, fp
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	f018 0f01 	tst.w	r8, #1
 8012aa8:	d004      	beq.n	8012ab4 <_strtod_l+0x5dc>
 8012aaa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012aae:	f7ed fdbb 	bl	8000628 <__aeabi_dmul>
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012ab8:	f109 0908 	add.w	r9, r9, #8
 8012abc:	d1f2      	bne.n	8012aa4 <_strtod_l+0x5cc>
 8012abe:	b10b      	cbz	r3, 8012ac4 <_strtod_l+0x5ec>
 8012ac0:	4682      	mov	sl, r0
 8012ac2:	468b      	mov	fp, r1
 8012ac4:	9b04      	ldr	r3, [sp, #16]
 8012ac6:	b1c3      	cbz	r3, 8012afa <_strtod_l+0x622>
 8012ac8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012acc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	4659      	mov	r1, fp
 8012ad4:	dd11      	ble.n	8012afa <_strtod_l+0x622>
 8012ad6:	2b1f      	cmp	r3, #31
 8012ad8:	f340 8124 	ble.w	8012d24 <_strtod_l+0x84c>
 8012adc:	2b34      	cmp	r3, #52	; 0x34
 8012ade:	bfde      	ittt	le
 8012ae0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012ae4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8012ae8:	fa03 f202 	lslle.w	r2, r3, r2
 8012aec:	f04f 0a00 	mov.w	sl, #0
 8012af0:	bfcc      	ite	gt
 8012af2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012af6:	ea02 0b01 	andle.w	fp, r2, r1
 8012afa:	2200      	movs	r2, #0
 8012afc:	2300      	movs	r3, #0
 8012afe:	4650      	mov	r0, sl
 8012b00:	4659      	mov	r1, fp
 8012b02:	f7ed fff9 	bl	8000af8 <__aeabi_dcmpeq>
 8012b06:	2800      	cmp	r0, #0
 8012b08:	d1a2      	bne.n	8012a50 <_strtod_l+0x578>
 8012b0a:	9b07      	ldr	r3, [sp, #28]
 8012b0c:	9300      	str	r3, [sp, #0]
 8012b0e:	9908      	ldr	r1, [sp, #32]
 8012b10:	462b      	mov	r3, r5
 8012b12:	463a      	mov	r2, r7
 8012b14:	4620      	mov	r0, r4
 8012b16:	f001 ff23 	bl	8014960 <__s2b>
 8012b1a:	9007      	str	r0, [sp, #28]
 8012b1c:	2800      	cmp	r0, #0
 8012b1e:	f43f af1f 	beq.w	8012960 <_strtod_l+0x488>
 8012b22:	9b05      	ldr	r3, [sp, #20]
 8012b24:	1b9e      	subs	r6, r3, r6
 8012b26:	9b06      	ldr	r3, [sp, #24]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	bfb4      	ite	lt
 8012b2c:	4633      	movlt	r3, r6
 8012b2e:	2300      	movge	r3, #0
 8012b30:	930c      	str	r3, [sp, #48]	; 0x30
 8012b32:	9b06      	ldr	r3, [sp, #24]
 8012b34:	2500      	movs	r5, #0
 8012b36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012b3a:	9312      	str	r3, [sp, #72]	; 0x48
 8012b3c:	462e      	mov	r6, r5
 8012b3e:	9b07      	ldr	r3, [sp, #28]
 8012b40:	4620      	mov	r0, r4
 8012b42:	6859      	ldr	r1, [r3, #4]
 8012b44:	f001 fe64 	bl	8014810 <_Balloc>
 8012b48:	9005      	str	r0, [sp, #20]
 8012b4a:	2800      	cmp	r0, #0
 8012b4c:	f43f af0c 	beq.w	8012968 <_strtod_l+0x490>
 8012b50:	9b07      	ldr	r3, [sp, #28]
 8012b52:	691a      	ldr	r2, [r3, #16]
 8012b54:	3202      	adds	r2, #2
 8012b56:	f103 010c 	add.w	r1, r3, #12
 8012b5a:	0092      	lsls	r2, r2, #2
 8012b5c:	300c      	adds	r0, #12
 8012b5e:	f7fe fc60 	bl	8011422 <memcpy>
 8012b62:	ec4b ab10 	vmov	d0, sl, fp
 8012b66:	aa1a      	add	r2, sp, #104	; 0x68
 8012b68:	a919      	add	r1, sp, #100	; 0x64
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	f002 fa3e 	bl	8014fec <__d2b>
 8012b70:	ec4b ab18 	vmov	d8, sl, fp
 8012b74:	9018      	str	r0, [sp, #96]	; 0x60
 8012b76:	2800      	cmp	r0, #0
 8012b78:	f43f aef6 	beq.w	8012968 <_strtod_l+0x490>
 8012b7c:	2101      	movs	r1, #1
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f001 ff88 	bl	8014a94 <__i2b>
 8012b84:	4606      	mov	r6, r0
 8012b86:	2800      	cmp	r0, #0
 8012b88:	f43f aeee 	beq.w	8012968 <_strtod_l+0x490>
 8012b8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b8e:	9904      	ldr	r1, [sp, #16]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	bfab      	itete	ge
 8012b94:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8012b96:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8012b98:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012b9a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8012b9e:	bfac      	ite	ge
 8012ba0:	eb03 0902 	addge.w	r9, r3, r2
 8012ba4:	1ad7      	sublt	r7, r2, r3
 8012ba6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012ba8:	eba3 0801 	sub.w	r8, r3, r1
 8012bac:	4490      	add	r8, r2
 8012bae:	4ba1      	ldr	r3, [pc, #644]	; (8012e34 <_strtod_l+0x95c>)
 8012bb0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012bb4:	4598      	cmp	r8, r3
 8012bb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012bba:	f280 80c7 	bge.w	8012d4c <_strtod_l+0x874>
 8012bbe:	eba3 0308 	sub.w	r3, r3, r8
 8012bc2:	2b1f      	cmp	r3, #31
 8012bc4:	eba2 0203 	sub.w	r2, r2, r3
 8012bc8:	f04f 0101 	mov.w	r1, #1
 8012bcc:	f300 80b1 	bgt.w	8012d32 <_strtod_l+0x85a>
 8012bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8012bd4:	930d      	str	r3, [sp, #52]	; 0x34
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	9308      	str	r3, [sp, #32]
 8012bda:	eb09 0802 	add.w	r8, r9, r2
 8012bde:	9b04      	ldr	r3, [sp, #16]
 8012be0:	45c1      	cmp	r9, r8
 8012be2:	4417      	add	r7, r2
 8012be4:	441f      	add	r7, r3
 8012be6:	464b      	mov	r3, r9
 8012be8:	bfa8      	it	ge
 8012bea:	4643      	movge	r3, r8
 8012bec:	42bb      	cmp	r3, r7
 8012bee:	bfa8      	it	ge
 8012bf0:	463b      	movge	r3, r7
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	bfc2      	ittt	gt
 8012bf6:	eba8 0803 	subgt.w	r8, r8, r3
 8012bfa:	1aff      	subgt	r7, r7, r3
 8012bfc:	eba9 0903 	subgt.w	r9, r9, r3
 8012c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	dd17      	ble.n	8012c36 <_strtod_l+0x75e>
 8012c06:	4631      	mov	r1, r6
 8012c08:	461a      	mov	r2, r3
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f002 f802 	bl	8014c14 <__pow5mult>
 8012c10:	4606      	mov	r6, r0
 8012c12:	2800      	cmp	r0, #0
 8012c14:	f43f aea8 	beq.w	8012968 <_strtod_l+0x490>
 8012c18:	4601      	mov	r1, r0
 8012c1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	f001 ff4f 	bl	8014ac0 <__multiply>
 8012c22:	900b      	str	r0, [sp, #44]	; 0x2c
 8012c24:	2800      	cmp	r0, #0
 8012c26:	f43f ae9f 	beq.w	8012968 <_strtod_l+0x490>
 8012c2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	f001 fe2f 	bl	8014890 <_Bfree>
 8012c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c34:	9318      	str	r3, [sp, #96]	; 0x60
 8012c36:	f1b8 0f00 	cmp.w	r8, #0
 8012c3a:	f300 808c 	bgt.w	8012d56 <_strtod_l+0x87e>
 8012c3e:	9b06      	ldr	r3, [sp, #24]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	dd08      	ble.n	8012c56 <_strtod_l+0x77e>
 8012c44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012c46:	9905      	ldr	r1, [sp, #20]
 8012c48:	4620      	mov	r0, r4
 8012c4a:	f001 ffe3 	bl	8014c14 <__pow5mult>
 8012c4e:	9005      	str	r0, [sp, #20]
 8012c50:	2800      	cmp	r0, #0
 8012c52:	f43f ae89 	beq.w	8012968 <_strtod_l+0x490>
 8012c56:	2f00      	cmp	r7, #0
 8012c58:	dd08      	ble.n	8012c6c <_strtod_l+0x794>
 8012c5a:	9905      	ldr	r1, [sp, #20]
 8012c5c:	463a      	mov	r2, r7
 8012c5e:	4620      	mov	r0, r4
 8012c60:	f002 f832 	bl	8014cc8 <__lshift>
 8012c64:	9005      	str	r0, [sp, #20]
 8012c66:	2800      	cmp	r0, #0
 8012c68:	f43f ae7e 	beq.w	8012968 <_strtod_l+0x490>
 8012c6c:	f1b9 0f00 	cmp.w	r9, #0
 8012c70:	dd08      	ble.n	8012c84 <_strtod_l+0x7ac>
 8012c72:	4631      	mov	r1, r6
 8012c74:	464a      	mov	r2, r9
 8012c76:	4620      	mov	r0, r4
 8012c78:	f002 f826 	bl	8014cc8 <__lshift>
 8012c7c:	4606      	mov	r6, r0
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	f43f ae72 	beq.w	8012968 <_strtod_l+0x490>
 8012c84:	9a05      	ldr	r2, [sp, #20]
 8012c86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f002 f8a9 	bl	8014de0 <__mdiff>
 8012c8e:	4605      	mov	r5, r0
 8012c90:	2800      	cmp	r0, #0
 8012c92:	f43f ae69 	beq.w	8012968 <_strtod_l+0x490>
 8012c96:	68c3      	ldr	r3, [r0, #12]
 8012c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	60c3      	str	r3, [r0, #12]
 8012c9e:	4631      	mov	r1, r6
 8012ca0:	f002 f882 	bl	8014da8 <__mcmp>
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	da60      	bge.n	8012d6a <_strtod_l+0x892>
 8012ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012caa:	ea53 030a 	orrs.w	r3, r3, sl
 8012cae:	f040 8082 	bne.w	8012db6 <_strtod_l+0x8de>
 8012cb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d17d      	bne.n	8012db6 <_strtod_l+0x8de>
 8012cba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012cbe:	0d1b      	lsrs	r3, r3, #20
 8012cc0:	051b      	lsls	r3, r3, #20
 8012cc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012cc6:	d976      	bls.n	8012db6 <_strtod_l+0x8de>
 8012cc8:	696b      	ldr	r3, [r5, #20]
 8012cca:	b913      	cbnz	r3, 8012cd2 <_strtod_l+0x7fa>
 8012ccc:	692b      	ldr	r3, [r5, #16]
 8012cce:	2b01      	cmp	r3, #1
 8012cd0:	dd71      	ble.n	8012db6 <_strtod_l+0x8de>
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	2201      	movs	r2, #1
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f001 fff6 	bl	8014cc8 <__lshift>
 8012cdc:	4631      	mov	r1, r6
 8012cde:	4605      	mov	r5, r0
 8012ce0:	f002 f862 	bl	8014da8 <__mcmp>
 8012ce4:	2800      	cmp	r0, #0
 8012ce6:	dd66      	ble.n	8012db6 <_strtod_l+0x8de>
 8012ce8:	9904      	ldr	r1, [sp, #16]
 8012cea:	4a53      	ldr	r2, [pc, #332]	; (8012e38 <_strtod_l+0x960>)
 8012cec:	465b      	mov	r3, fp
 8012cee:	2900      	cmp	r1, #0
 8012cf0:	f000 8081 	beq.w	8012df6 <_strtod_l+0x91e>
 8012cf4:	ea02 010b 	and.w	r1, r2, fp
 8012cf8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012cfc:	dc7b      	bgt.n	8012df6 <_strtod_l+0x91e>
 8012cfe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012d02:	f77f aea9 	ble.w	8012a58 <_strtod_l+0x580>
 8012d06:	4b4d      	ldr	r3, [pc, #308]	; (8012e3c <_strtod_l+0x964>)
 8012d08:	4650      	mov	r0, sl
 8012d0a:	4659      	mov	r1, fp
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	f7ed fc8b 	bl	8000628 <__aeabi_dmul>
 8012d12:	460b      	mov	r3, r1
 8012d14:	4303      	orrs	r3, r0
 8012d16:	bf08      	it	eq
 8012d18:	2322      	moveq	r3, #34	; 0x22
 8012d1a:	4682      	mov	sl, r0
 8012d1c:	468b      	mov	fp, r1
 8012d1e:	bf08      	it	eq
 8012d20:	6023      	streq	r3, [r4, #0]
 8012d22:	e62b      	b.n	801297c <_strtod_l+0x4a4>
 8012d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d28:	fa02 f303 	lsl.w	r3, r2, r3
 8012d2c:	ea03 0a0a 	and.w	sl, r3, sl
 8012d30:	e6e3      	b.n	8012afa <_strtod_l+0x622>
 8012d32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012d36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012d3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012d3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8012d42:	fa01 f308 	lsl.w	r3, r1, r8
 8012d46:	9308      	str	r3, [sp, #32]
 8012d48:	910d      	str	r1, [sp, #52]	; 0x34
 8012d4a:	e746      	b.n	8012bda <_strtod_l+0x702>
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	9308      	str	r3, [sp, #32]
 8012d50:	2301      	movs	r3, #1
 8012d52:	930d      	str	r3, [sp, #52]	; 0x34
 8012d54:	e741      	b.n	8012bda <_strtod_l+0x702>
 8012d56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d58:	4642      	mov	r2, r8
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	f001 ffb4 	bl	8014cc8 <__lshift>
 8012d60:	9018      	str	r0, [sp, #96]	; 0x60
 8012d62:	2800      	cmp	r0, #0
 8012d64:	f47f af6b 	bne.w	8012c3e <_strtod_l+0x766>
 8012d68:	e5fe      	b.n	8012968 <_strtod_l+0x490>
 8012d6a:	465f      	mov	r7, fp
 8012d6c:	d16e      	bne.n	8012e4c <_strtod_l+0x974>
 8012d6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012d74:	b342      	cbz	r2, 8012dc8 <_strtod_l+0x8f0>
 8012d76:	4a32      	ldr	r2, [pc, #200]	; (8012e40 <_strtod_l+0x968>)
 8012d78:	4293      	cmp	r3, r2
 8012d7a:	d128      	bne.n	8012dce <_strtod_l+0x8f6>
 8012d7c:	9b04      	ldr	r3, [sp, #16]
 8012d7e:	4651      	mov	r1, sl
 8012d80:	b1eb      	cbz	r3, 8012dbe <_strtod_l+0x8e6>
 8012d82:	4b2d      	ldr	r3, [pc, #180]	; (8012e38 <_strtod_l+0x960>)
 8012d84:	403b      	ands	r3, r7
 8012d86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d8e:	d819      	bhi.n	8012dc4 <_strtod_l+0x8ec>
 8012d90:	0d1b      	lsrs	r3, r3, #20
 8012d92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012d96:	fa02 f303 	lsl.w	r3, r2, r3
 8012d9a:	4299      	cmp	r1, r3
 8012d9c:	d117      	bne.n	8012dce <_strtod_l+0x8f6>
 8012d9e:	4b29      	ldr	r3, [pc, #164]	; (8012e44 <_strtod_l+0x96c>)
 8012da0:	429f      	cmp	r7, r3
 8012da2:	d102      	bne.n	8012daa <_strtod_l+0x8d2>
 8012da4:	3101      	adds	r1, #1
 8012da6:	f43f addf 	beq.w	8012968 <_strtod_l+0x490>
 8012daa:	4b23      	ldr	r3, [pc, #140]	; (8012e38 <_strtod_l+0x960>)
 8012dac:	403b      	ands	r3, r7
 8012dae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012db2:	f04f 0a00 	mov.w	sl, #0
 8012db6:	9b04      	ldr	r3, [sp, #16]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d1a4      	bne.n	8012d06 <_strtod_l+0x82e>
 8012dbc:	e5de      	b.n	801297c <_strtod_l+0x4a4>
 8012dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dc2:	e7ea      	b.n	8012d9a <_strtod_l+0x8c2>
 8012dc4:	4613      	mov	r3, r2
 8012dc6:	e7e8      	b.n	8012d9a <_strtod_l+0x8c2>
 8012dc8:	ea53 030a 	orrs.w	r3, r3, sl
 8012dcc:	d08c      	beq.n	8012ce8 <_strtod_l+0x810>
 8012dce:	9b08      	ldr	r3, [sp, #32]
 8012dd0:	b1db      	cbz	r3, 8012e0a <_strtod_l+0x932>
 8012dd2:	423b      	tst	r3, r7
 8012dd4:	d0ef      	beq.n	8012db6 <_strtod_l+0x8de>
 8012dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012dd8:	9a04      	ldr	r2, [sp, #16]
 8012dda:	4650      	mov	r0, sl
 8012ddc:	4659      	mov	r1, fp
 8012dde:	b1c3      	cbz	r3, 8012e12 <_strtod_l+0x93a>
 8012de0:	f7ff fb5b 	bl	801249a <sulp>
 8012de4:	4602      	mov	r2, r0
 8012de6:	460b      	mov	r3, r1
 8012de8:	ec51 0b18 	vmov	r0, r1, d8
 8012dec:	f7ed fa66 	bl	80002bc <__adddf3>
 8012df0:	4682      	mov	sl, r0
 8012df2:	468b      	mov	fp, r1
 8012df4:	e7df      	b.n	8012db6 <_strtod_l+0x8de>
 8012df6:	4013      	ands	r3, r2
 8012df8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012dfc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012e00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012e04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012e08:	e7d5      	b.n	8012db6 <_strtod_l+0x8de>
 8012e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e0c:	ea13 0f0a 	tst.w	r3, sl
 8012e10:	e7e0      	b.n	8012dd4 <_strtod_l+0x8fc>
 8012e12:	f7ff fb42 	bl	801249a <sulp>
 8012e16:	4602      	mov	r2, r0
 8012e18:	460b      	mov	r3, r1
 8012e1a:	ec51 0b18 	vmov	r0, r1, d8
 8012e1e:	f7ed fa4b 	bl	80002b8 <__aeabi_dsub>
 8012e22:	2200      	movs	r2, #0
 8012e24:	2300      	movs	r3, #0
 8012e26:	4682      	mov	sl, r0
 8012e28:	468b      	mov	fp, r1
 8012e2a:	f7ed fe65 	bl	8000af8 <__aeabi_dcmpeq>
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	d0c1      	beq.n	8012db6 <_strtod_l+0x8de>
 8012e32:	e611      	b.n	8012a58 <_strtod_l+0x580>
 8012e34:	fffffc02 	.word	0xfffffc02
 8012e38:	7ff00000 	.word	0x7ff00000
 8012e3c:	39500000 	.word	0x39500000
 8012e40:	000fffff 	.word	0x000fffff
 8012e44:	7fefffff 	.word	0x7fefffff
 8012e48:	08015f30 	.word	0x08015f30
 8012e4c:	4631      	mov	r1, r6
 8012e4e:	4628      	mov	r0, r5
 8012e50:	f002 f928 	bl	80150a4 <__ratio>
 8012e54:	ec59 8b10 	vmov	r8, r9, d0
 8012e58:	ee10 0a10 	vmov	r0, s0
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e62:	4649      	mov	r1, r9
 8012e64:	f7ed fe5c 	bl	8000b20 <__aeabi_dcmple>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	d07a      	beq.n	8012f62 <_strtod_l+0xa8a>
 8012e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d04a      	beq.n	8012f08 <_strtod_l+0xa30>
 8012e72:	4b95      	ldr	r3, [pc, #596]	; (80130c8 <_strtod_l+0xbf0>)
 8012e74:	2200      	movs	r2, #0
 8012e76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80130c8 <_strtod_l+0xbf0>
 8012e7e:	f04f 0800 	mov.w	r8, #0
 8012e82:	4b92      	ldr	r3, [pc, #584]	; (80130cc <_strtod_l+0xbf4>)
 8012e84:	403b      	ands	r3, r7
 8012e86:	930d      	str	r3, [sp, #52]	; 0x34
 8012e88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e8a:	4b91      	ldr	r3, [pc, #580]	; (80130d0 <_strtod_l+0xbf8>)
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	f040 80b0 	bne.w	8012ff2 <_strtod_l+0xb1a>
 8012e92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012e96:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012e9a:	ec4b ab10 	vmov	d0, sl, fp
 8012e9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012ea2:	f002 f827 	bl	8014ef4 <__ulp>
 8012ea6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012eaa:	ec53 2b10 	vmov	r2, r3, d0
 8012eae:	f7ed fbbb 	bl	8000628 <__aeabi_dmul>
 8012eb2:	4652      	mov	r2, sl
 8012eb4:	465b      	mov	r3, fp
 8012eb6:	f7ed fa01 	bl	80002bc <__adddf3>
 8012eba:	460b      	mov	r3, r1
 8012ebc:	4983      	ldr	r1, [pc, #524]	; (80130cc <_strtod_l+0xbf4>)
 8012ebe:	4a85      	ldr	r2, [pc, #532]	; (80130d4 <_strtod_l+0xbfc>)
 8012ec0:	4019      	ands	r1, r3
 8012ec2:	4291      	cmp	r1, r2
 8012ec4:	4682      	mov	sl, r0
 8012ec6:	d960      	bls.n	8012f8a <_strtod_l+0xab2>
 8012ec8:	ee18 3a90 	vmov	r3, s17
 8012ecc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012ed0:	4293      	cmp	r3, r2
 8012ed2:	d104      	bne.n	8012ede <_strtod_l+0xa06>
 8012ed4:	ee18 3a10 	vmov	r3, s16
 8012ed8:	3301      	adds	r3, #1
 8012eda:	f43f ad45 	beq.w	8012968 <_strtod_l+0x490>
 8012ede:	f8df b200 	ldr.w	fp, [pc, #512]	; 80130e0 <_strtod_l+0xc08>
 8012ee2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012ee6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012ee8:	4620      	mov	r0, r4
 8012eea:	f001 fcd1 	bl	8014890 <_Bfree>
 8012eee:	9905      	ldr	r1, [sp, #20]
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	f001 fccd 	bl	8014890 <_Bfree>
 8012ef6:	4631      	mov	r1, r6
 8012ef8:	4620      	mov	r0, r4
 8012efa:	f001 fcc9 	bl	8014890 <_Bfree>
 8012efe:	4629      	mov	r1, r5
 8012f00:	4620      	mov	r0, r4
 8012f02:	f001 fcc5 	bl	8014890 <_Bfree>
 8012f06:	e61a      	b.n	8012b3e <_strtod_l+0x666>
 8012f08:	f1ba 0f00 	cmp.w	sl, #0
 8012f0c:	d11b      	bne.n	8012f46 <_strtod_l+0xa6e>
 8012f0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012f12:	b9f3      	cbnz	r3, 8012f52 <_strtod_l+0xa7a>
 8012f14:	4b6c      	ldr	r3, [pc, #432]	; (80130c8 <_strtod_l+0xbf0>)
 8012f16:	2200      	movs	r2, #0
 8012f18:	4640      	mov	r0, r8
 8012f1a:	4649      	mov	r1, r9
 8012f1c:	f7ed fdf6 	bl	8000b0c <__aeabi_dcmplt>
 8012f20:	b9d0      	cbnz	r0, 8012f58 <_strtod_l+0xa80>
 8012f22:	4640      	mov	r0, r8
 8012f24:	4649      	mov	r1, r9
 8012f26:	4b6c      	ldr	r3, [pc, #432]	; (80130d8 <_strtod_l+0xc00>)
 8012f28:	2200      	movs	r2, #0
 8012f2a:	f7ed fb7d 	bl	8000628 <__aeabi_dmul>
 8012f2e:	4680      	mov	r8, r0
 8012f30:	4689      	mov	r9, r1
 8012f32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012f36:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8012f3a:	9315      	str	r3, [sp, #84]	; 0x54
 8012f3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012f40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012f44:	e79d      	b.n	8012e82 <_strtod_l+0x9aa>
 8012f46:	f1ba 0f01 	cmp.w	sl, #1
 8012f4a:	d102      	bne.n	8012f52 <_strtod_l+0xa7a>
 8012f4c:	2f00      	cmp	r7, #0
 8012f4e:	f43f ad83 	beq.w	8012a58 <_strtod_l+0x580>
 8012f52:	4b62      	ldr	r3, [pc, #392]	; (80130dc <_strtod_l+0xc04>)
 8012f54:	2200      	movs	r2, #0
 8012f56:	e78e      	b.n	8012e76 <_strtod_l+0x99e>
 8012f58:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80130d8 <_strtod_l+0xc00>
 8012f5c:	f04f 0800 	mov.w	r8, #0
 8012f60:	e7e7      	b.n	8012f32 <_strtod_l+0xa5a>
 8012f62:	4b5d      	ldr	r3, [pc, #372]	; (80130d8 <_strtod_l+0xc00>)
 8012f64:	4640      	mov	r0, r8
 8012f66:	4649      	mov	r1, r9
 8012f68:	2200      	movs	r2, #0
 8012f6a:	f7ed fb5d 	bl	8000628 <__aeabi_dmul>
 8012f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f70:	4680      	mov	r8, r0
 8012f72:	4689      	mov	r9, r1
 8012f74:	b933      	cbnz	r3, 8012f84 <_strtod_l+0xaac>
 8012f76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f7a:	900e      	str	r0, [sp, #56]	; 0x38
 8012f7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012f82:	e7dd      	b.n	8012f40 <_strtod_l+0xa68>
 8012f84:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8012f88:	e7f9      	b.n	8012f7e <_strtod_l+0xaa6>
 8012f8a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012f8e:	9b04      	ldr	r3, [sp, #16]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d1a8      	bne.n	8012ee6 <_strtod_l+0xa0e>
 8012f94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012f98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012f9a:	0d1b      	lsrs	r3, r3, #20
 8012f9c:	051b      	lsls	r3, r3, #20
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d1a1      	bne.n	8012ee6 <_strtod_l+0xa0e>
 8012fa2:	4640      	mov	r0, r8
 8012fa4:	4649      	mov	r1, r9
 8012fa6:	f7ed fe87 	bl	8000cb8 <__aeabi_d2lz>
 8012faa:	f7ed fb0f 	bl	80005cc <__aeabi_l2d>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	4640      	mov	r0, r8
 8012fb4:	4649      	mov	r1, r9
 8012fb6:	f7ed f97f 	bl	80002b8 <__aeabi_dsub>
 8012fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012fbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012fc0:	ea43 030a 	orr.w	r3, r3, sl
 8012fc4:	4313      	orrs	r3, r2
 8012fc6:	4680      	mov	r8, r0
 8012fc8:	4689      	mov	r9, r1
 8012fca:	d055      	beq.n	8013078 <_strtod_l+0xba0>
 8012fcc:	a336      	add	r3, pc, #216	; (adr r3, 80130a8 <_strtod_l+0xbd0>)
 8012fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd2:	f7ed fd9b 	bl	8000b0c <__aeabi_dcmplt>
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	f47f acd0 	bne.w	801297c <_strtod_l+0x4a4>
 8012fdc:	a334      	add	r3, pc, #208	; (adr r3, 80130b0 <_strtod_l+0xbd8>)
 8012fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe2:	4640      	mov	r0, r8
 8012fe4:	4649      	mov	r1, r9
 8012fe6:	f7ed fdaf 	bl	8000b48 <__aeabi_dcmpgt>
 8012fea:	2800      	cmp	r0, #0
 8012fec:	f43f af7b 	beq.w	8012ee6 <_strtod_l+0xa0e>
 8012ff0:	e4c4      	b.n	801297c <_strtod_l+0x4a4>
 8012ff2:	9b04      	ldr	r3, [sp, #16]
 8012ff4:	b333      	cbz	r3, 8013044 <_strtod_l+0xb6c>
 8012ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ff8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012ffc:	d822      	bhi.n	8013044 <_strtod_l+0xb6c>
 8012ffe:	a32e      	add	r3, pc, #184	; (adr r3, 80130b8 <_strtod_l+0xbe0>)
 8013000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013004:	4640      	mov	r0, r8
 8013006:	4649      	mov	r1, r9
 8013008:	f7ed fd8a 	bl	8000b20 <__aeabi_dcmple>
 801300c:	b1a0      	cbz	r0, 8013038 <_strtod_l+0xb60>
 801300e:	4649      	mov	r1, r9
 8013010:	4640      	mov	r0, r8
 8013012:	f7ed fde1 	bl	8000bd8 <__aeabi_d2uiz>
 8013016:	2801      	cmp	r0, #1
 8013018:	bf38      	it	cc
 801301a:	2001      	movcc	r0, #1
 801301c:	f7ed fa8a 	bl	8000534 <__aeabi_ui2d>
 8013020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013022:	4680      	mov	r8, r0
 8013024:	4689      	mov	r9, r1
 8013026:	bb23      	cbnz	r3, 8013072 <_strtod_l+0xb9a>
 8013028:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801302c:	9010      	str	r0, [sp, #64]	; 0x40
 801302e:	9311      	str	r3, [sp, #68]	; 0x44
 8013030:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013034:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801303a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801303c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013040:	1a9b      	subs	r3, r3, r2
 8013042:	9309      	str	r3, [sp, #36]	; 0x24
 8013044:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013048:	eeb0 0a48 	vmov.f32	s0, s16
 801304c:	eef0 0a68 	vmov.f32	s1, s17
 8013050:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013054:	f001 ff4e 	bl	8014ef4 <__ulp>
 8013058:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801305c:	ec53 2b10 	vmov	r2, r3, d0
 8013060:	f7ed fae2 	bl	8000628 <__aeabi_dmul>
 8013064:	ec53 2b18 	vmov	r2, r3, d8
 8013068:	f7ed f928 	bl	80002bc <__adddf3>
 801306c:	4682      	mov	sl, r0
 801306e:	468b      	mov	fp, r1
 8013070:	e78d      	b.n	8012f8e <_strtod_l+0xab6>
 8013072:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8013076:	e7db      	b.n	8013030 <_strtod_l+0xb58>
 8013078:	a311      	add	r3, pc, #68	; (adr r3, 80130c0 <_strtod_l+0xbe8>)
 801307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307e:	f7ed fd45 	bl	8000b0c <__aeabi_dcmplt>
 8013082:	e7b2      	b.n	8012fea <_strtod_l+0xb12>
 8013084:	2300      	movs	r3, #0
 8013086:	930a      	str	r3, [sp, #40]	; 0x28
 8013088:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801308a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801308c:	6013      	str	r3, [r2, #0]
 801308e:	f7ff ba6b 	b.w	8012568 <_strtod_l+0x90>
 8013092:	2a65      	cmp	r2, #101	; 0x65
 8013094:	f43f ab5f 	beq.w	8012756 <_strtod_l+0x27e>
 8013098:	2a45      	cmp	r2, #69	; 0x45
 801309a:	f43f ab5c 	beq.w	8012756 <_strtod_l+0x27e>
 801309e:	2301      	movs	r3, #1
 80130a0:	f7ff bb94 	b.w	80127cc <_strtod_l+0x2f4>
 80130a4:	f3af 8000 	nop.w
 80130a8:	94a03595 	.word	0x94a03595
 80130ac:	3fdfffff 	.word	0x3fdfffff
 80130b0:	35afe535 	.word	0x35afe535
 80130b4:	3fe00000 	.word	0x3fe00000
 80130b8:	ffc00000 	.word	0xffc00000
 80130bc:	41dfffff 	.word	0x41dfffff
 80130c0:	94a03595 	.word	0x94a03595
 80130c4:	3fcfffff 	.word	0x3fcfffff
 80130c8:	3ff00000 	.word	0x3ff00000
 80130cc:	7ff00000 	.word	0x7ff00000
 80130d0:	7fe00000 	.word	0x7fe00000
 80130d4:	7c9fffff 	.word	0x7c9fffff
 80130d8:	3fe00000 	.word	0x3fe00000
 80130dc:	bff00000 	.word	0xbff00000
 80130e0:	7fefffff 	.word	0x7fefffff

080130e4 <_strtod_r>:
 80130e4:	4b01      	ldr	r3, [pc, #4]	; (80130ec <_strtod_r+0x8>)
 80130e6:	f7ff b9f7 	b.w	80124d8 <_strtod_l>
 80130ea:	bf00      	nop
 80130ec:	2000008c 	.word	0x2000008c

080130f0 <_strtol_l.constprop.0>:
 80130f0:	2b01      	cmp	r3, #1
 80130f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130f6:	d001      	beq.n	80130fc <_strtol_l.constprop.0+0xc>
 80130f8:	2b24      	cmp	r3, #36	; 0x24
 80130fa:	d906      	bls.n	801310a <_strtol_l.constprop.0+0x1a>
 80130fc:	f7fe f86e 	bl	80111dc <__errno>
 8013100:	2316      	movs	r3, #22
 8013102:	6003      	str	r3, [r0, #0]
 8013104:	2000      	movs	r0, #0
 8013106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801310a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80131f0 <_strtol_l.constprop.0+0x100>
 801310e:	460d      	mov	r5, r1
 8013110:	462e      	mov	r6, r5
 8013112:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013116:	f814 700c 	ldrb.w	r7, [r4, ip]
 801311a:	f017 0708 	ands.w	r7, r7, #8
 801311e:	d1f7      	bne.n	8013110 <_strtol_l.constprop.0+0x20>
 8013120:	2c2d      	cmp	r4, #45	; 0x2d
 8013122:	d132      	bne.n	801318a <_strtol_l.constprop.0+0x9a>
 8013124:	782c      	ldrb	r4, [r5, #0]
 8013126:	2701      	movs	r7, #1
 8013128:	1cb5      	adds	r5, r6, #2
 801312a:	2b00      	cmp	r3, #0
 801312c:	d05b      	beq.n	80131e6 <_strtol_l.constprop.0+0xf6>
 801312e:	2b10      	cmp	r3, #16
 8013130:	d109      	bne.n	8013146 <_strtol_l.constprop.0+0x56>
 8013132:	2c30      	cmp	r4, #48	; 0x30
 8013134:	d107      	bne.n	8013146 <_strtol_l.constprop.0+0x56>
 8013136:	782c      	ldrb	r4, [r5, #0]
 8013138:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801313c:	2c58      	cmp	r4, #88	; 0x58
 801313e:	d14d      	bne.n	80131dc <_strtol_l.constprop.0+0xec>
 8013140:	786c      	ldrb	r4, [r5, #1]
 8013142:	2310      	movs	r3, #16
 8013144:	3502      	adds	r5, #2
 8013146:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801314a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801314e:	f04f 0c00 	mov.w	ip, #0
 8013152:	fbb8 f9f3 	udiv	r9, r8, r3
 8013156:	4666      	mov	r6, ip
 8013158:	fb03 8a19 	mls	sl, r3, r9, r8
 801315c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8013160:	f1be 0f09 	cmp.w	lr, #9
 8013164:	d816      	bhi.n	8013194 <_strtol_l.constprop.0+0xa4>
 8013166:	4674      	mov	r4, lr
 8013168:	42a3      	cmp	r3, r4
 801316a:	dd24      	ble.n	80131b6 <_strtol_l.constprop.0+0xc6>
 801316c:	f1bc 0f00 	cmp.w	ip, #0
 8013170:	db1e      	blt.n	80131b0 <_strtol_l.constprop.0+0xc0>
 8013172:	45b1      	cmp	r9, r6
 8013174:	d31c      	bcc.n	80131b0 <_strtol_l.constprop.0+0xc0>
 8013176:	d101      	bne.n	801317c <_strtol_l.constprop.0+0x8c>
 8013178:	45a2      	cmp	sl, r4
 801317a:	db19      	blt.n	80131b0 <_strtol_l.constprop.0+0xc0>
 801317c:	fb06 4603 	mla	r6, r6, r3, r4
 8013180:	f04f 0c01 	mov.w	ip, #1
 8013184:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013188:	e7e8      	b.n	801315c <_strtol_l.constprop.0+0x6c>
 801318a:	2c2b      	cmp	r4, #43	; 0x2b
 801318c:	bf04      	itt	eq
 801318e:	782c      	ldrbeq	r4, [r5, #0]
 8013190:	1cb5      	addeq	r5, r6, #2
 8013192:	e7ca      	b.n	801312a <_strtol_l.constprop.0+0x3a>
 8013194:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8013198:	f1be 0f19 	cmp.w	lr, #25
 801319c:	d801      	bhi.n	80131a2 <_strtol_l.constprop.0+0xb2>
 801319e:	3c37      	subs	r4, #55	; 0x37
 80131a0:	e7e2      	b.n	8013168 <_strtol_l.constprop.0+0x78>
 80131a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80131a6:	f1be 0f19 	cmp.w	lr, #25
 80131aa:	d804      	bhi.n	80131b6 <_strtol_l.constprop.0+0xc6>
 80131ac:	3c57      	subs	r4, #87	; 0x57
 80131ae:	e7db      	b.n	8013168 <_strtol_l.constprop.0+0x78>
 80131b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80131b4:	e7e6      	b.n	8013184 <_strtol_l.constprop.0+0x94>
 80131b6:	f1bc 0f00 	cmp.w	ip, #0
 80131ba:	da05      	bge.n	80131c8 <_strtol_l.constprop.0+0xd8>
 80131bc:	2322      	movs	r3, #34	; 0x22
 80131be:	6003      	str	r3, [r0, #0]
 80131c0:	4646      	mov	r6, r8
 80131c2:	b942      	cbnz	r2, 80131d6 <_strtol_l.constprop.0+0xe6>
 80131c4:	4630      	mov	r0, r6
 80131c6:	e79e      	b.n	8013106 <_strtol_l.constprop.0+0x16>
 80131c8:	b107      	cbz	r7, 80131cc <_strtol_l.constprop.0+0xdc>
 80131ca:	4276      	negs	r6, r6
 80131cc:	2a00      	cmp	r2, #0
 80131ce:	d0f9      	beq.n	80131c4 <_strtol_l.constprop.0+0xd4>
 80131d0:	f1bc 0f00 	cmp.w	ip, #0
 80131d4:	d000      	beq.n	80131d8 <_strtol_l.constprop.0+0xe8>
 80131d6:	1e69      	subs	r1, r5, #1
 80131d8:	6011      	str	r1, [r2, #0]
 80131da:	e7f3      	b.n	80131c4 <_strtol_l.constprop.0+0xd4>
 80131dc:	2430      	movs	r4, #48	; 0x30
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d1b1      	bne.n	8013146 <_strtol_l.constprop.0+0x56>
 80131e2:	2308      	movs	r3, #8
 80131e4:	e7af      	b.n	8013146 <_strtol_l.constprop.0+0x56>
 80131e6:	2c30      	cmp	r4, #48	; 0x30
 80131e8:	d0a5      	beq.n	8013136 <_strtol_l.constprop.0+0x46>
 80131ea:	230a      	movs	r3, #10
 80131ec:	e7ab      	b.n	8013146 <_strtol_l.constprop.0+0x56>
 80131ee:	bf00      	nop
 80131f0:	08015f59 	.word	0x08015f59

080131f4 <_strtol_r>:
 80131f4:	f7ff bf7c 	b.w	80130f0 <_strtol_l.constprop.0>

080131f8 <_write_r>:
 80131f8:	b538      	push	{r3, r4, r5, lr}
 80131fa:	4d07      	ldr	r5, [pc, #28]	; (8013218 <_write_r+0x20>)
 80131fc:	4604      	mov	r4, r0
 80131fe:	4608      	mov	r0, r1
 8013200:	4611      	mov	r1, r2
 8013202:	2200      	movs	r2, #0
 8013204:	602a      	str	r2, [r5, #0]
 8013206:	461a      	mov	r2, r3
 8013208:	f7ee ffc1 	bl	800218e <_write>
 801320c:	1c43      	adds	r3, r0, #1
 801320e:	d102      	bne.n	8013216 <_write_r+0x1e>
 8013210:	682b      	ldr	r3, [r5, #0]
 8013212:	b103      	cbz	r3, 8013216 <_write_r+0x1e>
 8013214:	6023      	str	r3, [r4, #0]
 8013216:	bd38      	pop	{r3, r4, r5, pc}
 8013218:	20005c44 	.word	0x20005c44

0801321c <_close_r>:
 801321c:	b538      	push	{r3, r4, r5, lr}
 801321e:	4d06      	ldr	r5, [pc, #24]	; (8013238 <_close_r+0x1c>)
 8013220:	2300      	movs	r3, #0
 8013222:	4604      	mov	r4, r0
 8013224:	4608      	mov	r0, r1
 8013226:	602b      	str	r3, [r5, #0]
 8013228:	f7ee ffcd 	bl	80021c6 <_close>
 801322c:	1c43      	adds	r3, r0, #1
 801322e:	d102      	bne.n	8013236 <_close_r+0x1a>
 8013230:	682b      	ldr	r3, [r5, #0]
 8013232:	b103      	cbz	r3, 8013236 <_close_r+0x1a>
 8013234:	6023      	str	r3, [r4, #0]
 8013236:	bd38      	pop	{r3, r4, r5, pc}
 8013238:	20005c44 	.word	0x20005c44

0801323c <quorem>:
 801323c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013240:	6903      	ldr	r3, [r0, #16]
 8013242:	690c      	ldr	r4, [r1, #16]
 8013244:	42a3      	cmp	r3, r4
 8013246:	4607      	mov	r7, r0
 8013248:	f2c0 8081 	blt.w	801334e <quorem+0x112>
 801324c:	3c01      	subs	r4, #1
 801324e:	f101 0814 	add.w	r8, r1, #20
 8013252:	f100 0514 	add.w	r5, r0, #20
 8013256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801325a:	9301      	str	r3, [sp, #4]
 801325c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013264:	3301      	adds	r3, #1
 8013266:	429a      	cmp	r2, r3
 8013268:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801326c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013270:	fbb2 f6f3 	udiv	r6, r2, r3
 8013274:	d331      	bcc.n	80132da <quorem+0x9e>
 8013276:	f04f 0e00 	mov.w	lr, #0
 801327a:	4640      	mov	r0, r8
 801327c:	46ac      	mov	ip, r5
 801327e:	46f2      	mov	sl, lr
 8013280:	f850 2b04 	ldr.w	r2, [r0], #4
 8013284:	b293      	uxth	r3, r2
 8013286:	fb06 e303 	mla	r3, r6, r3, lr
 801328a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801328e:	b29b      	uxth	r3, r3
 8013290:	ebaa 0303 	sub.w	r3, sl, r3
 8013294:	f8dc a000 	ldr.w	sl, [ip]
 8013298:	0c12      	lsrs	r2, r2, #16
 801329a:	fa13 f38a 	uxtah	r3, r3, sl
 801329e:	fb06 e202 	mla	r2, r6, r2, lr
 80132a2:	9300      	str	r3, [sp, #0]
 80132a4:	9b00      	ldr	r3, [sp, #0]
 80132a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80132aa:	b292      	uxth	r2, r2
 80132ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80132b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80132b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80132b8:	4581      	cmp	r9, r0
 80132ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80132be:	f84c 3b04 	str.w	r3, [ip], #4
 80132c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80132c6:	d2db      	bcs.n	8013280 <quorem+0x44>
 80132c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80132cc:	b92b      	cbnz	r3, 80132da <quorem+0x9e>
 80132ce:	9b01      	ldr	r3, [sp, #4]
 80132d0:	3b04      	subs	r3, #4
 80132d2:	429d      	cmp	r5, r3
 80132d4:	461a      	mov	r2, r3
 80132d6:	d32e      	bcc.n	8013336 <quorem+0xfa>
 80132d8:	613c      	str	r4, [r7, #16]
 80132da:	4638      	mov	r0, r7
 80132dc:	f001 fd64 	bl	8014da8 <__mcmp>
 80132e0:	2800      	cmp	r0, #0
 80132e2:	db24      	blt.n	801332e <quorem+0xf2>
 80132e4:	3601      	adds	r6, #1
 80132e6:	4628      	mov	r0, r5
 80132e8:	f04f 0c00 	mov.w	ip, #0
 80132ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80132f0:	f8d0 e000 	ldr.w	lr, [r0]
 80132f4:	b293      	uxth	r3, r2
 80132f6:	ebac 0303 	sub.w	r3, ip, r3
 80132fa:	0c12      	lsrs	r2, r2, #16
 80132fc:	fa13 f38e 	uxtah	r3, r3, lr
 8013300:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013304:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013308:	b29b      	uxth	r3, r3
 801330a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801330e:	45c1      	cmp	r9, r8
 8013310:	f840 3b04 	str.w	r3, [r0], #4
 8013314:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013318:	d2e8      	bcs.n	80132ec <quorem+0xb0>
 801331a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801331e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013322:	b922      	cbnz	r2, 801332e <quorem+0xf2>
 8013324:	3b04      	subs	r3, #4
 8013326:	429d      	cmp	r5, r3
 8013328:	461a      	mov	r2, r3
 801332a:	d30a      	bcc.n	8013342 <quorem+0x106>
 801332c:	613c      	str	r4, [r7, #16]
 801332e:	4630      	mov	r0, r6
 8013330:	b003      	add	sp, #12
 8013332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013336:	6812      	ldr	r2, [r2, #0]
 8013338:	3b04      	subs	r3, #4
 801333a:	2a00      	cmp	r2, #0
 801333c:	d1cc      	bne.n	80132d8 <quorem+0x9c>
 801333e:	3c01      	subs	r4, #1
 8013340:	e7c7      	b.n	80132d2 <quorem+0x96>
 8013342:	6812      	ldr	r2, [r2, #0]
 8013344:	3b04      	subs	r3, #4
 8013346:	2a00      	cmp	r2, #0
 8013348:	d1f0      	bne.n	801332c <quorem+0xf0>
 801334a:	3c01      	subs	r4, #1
 801334c:	e7eb      	b.n	8013326 <quorem+0xea>
 801334e:	2000      	movs	r0, #0
 8013350:	e7ee      	b.n	8013330 <quorem+0xf4>
 8013352:	0000      	movs	r0, r0
 8013354:	0000      	movs	r0, r0
	...

08013358 <_dtoa_r>:
 8013358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801335c:	ed2d 8b04 	vpush	{d8-d9}
 8013360:	ec57 6b10 	vmov	r6, r7, d0
 8013364:	b093      	sub	sp, #76	; 0x4c
 8013366:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013368:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801336c:	9106      	str	r1, [sp, #24]
 801336e:	ee10 aa10 	vmov	sl, s0
 8013372:	4604      	mov	r4, r0
 8013374:	9209      	str	r2, [sp, #36]	; 0x24
 8013376:	930c      	str	r3, [sp, #48]	; 0x30
 8013378:	46bb      	mov	fp, r7
 801337a:	b975      	cbnz	r5, 801339a <_dtoa_r+0x42>
 801337c:	2010      	movs	r0, #16
 801337e:	f001 fa21 	bl	80147c4 <malloc>
 8013382:	4602      	mov	r2, r0
 8013384:	6260      	str	r0, [r4, #36]	; 0x24
 8013386:	b920      	cbnz	r0, 8013392 <_dtoa_r+0x3a>
 8013388:	4ba7      	ldr	r3, [pc, #668]	; (8013628 <_dtoa_r+0x2d0>)
 801338a:	21ea      	movs	r1, #234	; 0xea
 801338c:	48a7      	ldr	r0, [pc, #668]	; (801362c <_dtoa_r+0x2d4>)
 801338e:	f002 f8fd 	bl	801558c <__assert_func>
 8013392:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013396:	6005      	str	r5, [r0, #0]
 8013398:	60c5      	str	r5, [r0, #12]
 801339a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801339c:	6819      	ldr	r1, [r3, #0]
 801339e:	b151      	cbz	r1, 80133b6 <_dtoa_r+0x5e>
 80133a0:	685a      	ldr	r2, [r3, #4]
 80133a2:	604a      	str	r2, [r1, #4]
 80133a4:	2301      	movs	r3, #1
 80133a6:	4093      	lsls	r3, r2
 80133a8:	608b      	str	r3, [r1, #8]
 80133aa:	4620      	mov	r0, r4
 80133ac:	f001 fa70 	bl	8014890 <_Bfree>
 80133b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133b2:	2200      	movs	r2, #0
 80133b4:	601a      	str	r2, [r3, #0]
 80133b6:	1e3b      	subs	r3, r7, #0
 80133b8:	bfaa      	itet	ge
 80133ba:	2300      	movge	r3, #0
 80133bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80133c0:	f8c8 3000 	strge.w	r3, [r8]
 80133c4:	4b9a      	ldr	r3, [pc, #616]	; (8013630 <_dtoa_r+0x2d8>)
 80133c6:	bfbc      	itt	lt
 80133c8:	2201      	movlt	r2, #1
 80133ca:	f8c8 2000 	strlt.w	r2, [r8]
 80133ce:	ea33 030b 	bics.w	r3, r3, fp
 80133d2:	d11b      	bne.n	801340c <_dtoa_r+0xb4>
 80133d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80133da:	6013      	str	r3, [r2, #0]
 80133dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80133e0:	4333      	orrs	r3, r6
 80133e2:	f000 8592 	beq.w	8013f0a <_dtoa_r+0xbb2>
 80133e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80133e8:	b963      	cbnz	r3, 8013404 <_dtoa_r+0xac>
 80133ea:	4b92      	ldr	r3, [pc, #584]	; (8013634 <_dtoa_r+0x2dc>)
 80133ec:	e022      	b.n	8013434 <_dtoa_r+0xdc>
 80133ee:	4b92      	ldr	r3, [pc, #584]	; (8013638 <_dtoa_r+0x2e0>)
 80133f0:	9301      	str	r3, [sp, #4]
 80133f2:	3308      	adds	r3, #8
 80133f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80133f6:	6013      	str	r3, [r2, #0]
 80133f8:	9801      	ldr	r0, [sp, #4]
 80133fa:	b013      	add	sp, #76	; 0x4c
 80133fc:	ecbd 8b04 	vpop	{d8-d9}
 8013400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013404:	4b8b      	ldr	r3, [pc, #556]	; (8013634 <_dtoa_r+0x2dc>)
 8013406:	9301      	str	r3, [sp, #4]
 8013408:	3303      	adds	r3, #3
 801340a:	e7f3      	b.n	80133f4 <_dtoa_r+0x9c>
 801340c:	2200      	movs	r2, #0
 801340e:	2300      	movs	r3, #0
 8013410:	4650      	mov	r0, sl
 8013412:	4659      	mov	r1, fp
 8013414:	f7ed fb70 	bl	8000af8 <__aeabi_dcmpeq>
 8013418:	ec4b ab19 	vmov	d9, sl, fp
 801341c:	4680      	mov	r8, r0
 801341e:	b158      	cbz	r0, 8013438 <_dtoa_r+0xe0>
 8013420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013422:	2301      	movs	r3, #1
 8013424:	6013      	str	r3, [r2, #0]
 8013426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013428:	2b00      	cmp	r3, #0
 801342a:	f000 856b 	beq.w	8013f04 <_dtoa_r+0xbac>
 801342e:	4883      	ldr	r0, [pc, #524]	; (801363c <_dtoa_r+0x2e4>)
 8013430:	6018      	str	r0, [r3, #0]
 8013432:	1e43      	subs	r3, r0, #1
 8013434:	9301      	str	r3, [sp, #4]
 8013436:	e7df      	b.n	80133f8 <_dtoa_r+0xa0>
 8013438:	ec4b ab10 	vmov	d0, sl, fp
 801343c:	aa10      	add	r2, sp, #64	; 0x40
 801343e:	a911      	add	r1, sp, #68	; 0x44
 8013440:	4620      	mov	r0, r4
 8013442:	f001 fdd3 	bl	8014fec <__d2b>
 8013446:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801344a:	ee08 0a10 	vmov	s16, r0
 801344e:	2d00      	cmp	r5, #0
 8013450:	f000 8084 	beq.w	801355c <_dtoa_r+0x204>
 8013454:	ee19 3a90 	vmov	r3, s19
 8013458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801345c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013460:	4656      	mov	r6, sl
 8013462:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013466:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801346a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801346e:	4b74      	ldr	r3, [pc, #464]	; (8013640 <_dtoa_r+0x2e8>)
 8013470:	2200      	movs	r2, #0
 8013472:	4630      	mov	r0, r6
 8013474:	4639      	mov	r1, r7
 8013476:	f7ec ff1f 	bl	80002b8 <__aeabi_dsub>
 801347a:	a365      	add	r3, pc, #404	; (adr r3, 8013610 <_dtoa_r+0x2b8>)
 801347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013480:	f7ed f8d2 	bl	8000628 <__aeabi_dmul>
 8013484:	a364      	add	r3, pc, #400	; (adr r3, 8013618 <_dtoa_r+0x2c0>)
 8013486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348a:	f7ec ff17 	bl	80002bc <__adddf3>
 801348e:	4606      	mov	r6, r0
 8013490:	4628      	mov	r0, r5
 8013492:	460f      	mov	r7, r1
 8013494:	f7ed f85e 	bl	8000554 <__aeabi_i2d>
 8013498:	a361      	add	r3, pc, #388	; (adr r3, 8013620 <_dtoa_r+0x2c8>)
 801349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801349e:	f7ed f8c3 	bl	8000628 <__aeabi_dmul>
 80134a2:	4602      	mov	r2, r0
 80134a4:	460b      	mov	r3, r1
 80134a6:	4630      	mov	r0, r6
 80134a8:	4639      	mov	r1, r7
 80134aa:	f7ec ff07 	bl	80002bc <__adddf3>
 80134ae:	4606      	mov	r6, r0
 80134b0:	460f      	mov	r7, r1
 80134b2:	f7ed fb69 	bl	8000b88 <__aeabi_d2iz>
 80134b6:	2200      	movs	r2, #0
 80134b8:	9000      	str	r0, [sp, #0]
 80134ba:	2300      	movs	r3, #0
 80134bc:	4630      	mov	r0, r6
 80134be:	4639      	mov	r1, r7
 80134c0:	f7ed fb24 	bl	8000b0c <__aeabi_dcmplt>
 80134c4:	b150      	cbz	r0, 80134dc <_dtoa_r+0x184>
 80134c6:	9800      	ldr	r0, [sp, #0]
 80134c8:	f7ed f844 	bl	8000554 <__aeabi_i2d>
 80134cc:	4632      	mov	r2, r6
 80134ce:	463b      	mov	r3, r7
 80134d0:	f7ed fb12 	bl	8000af8 <__aeabi_dcmpeq>
 80134d4:	b910      	cbnz	r0, 80134dc <_dtoa_r+0x184>
 80134d6:	9b00      	ldr	r3, [sp, #0]
 80134d8:	3b01      	subs	r3, #1
 80134da:	9300      	str	r3, [sp, #0]
 80134dc:	9b00      	ldr	r3, [sp, #0]
 80134de:	2b16      	cmp	r3, #22
 80134e0:	d85a      	bhi.n	8013598 <_dtoa_r+0x240>
 80134e2:	9a00      	ldr	r2, [sp, #0]
 80134e4:	4b57      	ldr	r3, [pc, #348]	; (8013644 <_dtoa_r+0x2ec>)
 80134e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80134ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ee:	ec51 0b19 	vmov	r0, r1, d9
 80134f2:	f7ed fb0b 	bl	8000b0c <__aeabi_dcmplt>
 80134f6:	2800      	cmp	r0, #0
 80134f8:	d050      	beq.n	801359c <_dtoa_r+0x244>
 80134fa:	9b00      	ldr	r3, [sp, #0]
 80134fc:	3b01      	subs	r3, #1
 80134fe:	9300      	str	r3, [sp, #0]
 8013500:	2300      	movs	r3, #0
 8013502:	930b      	str	r3, [sp, #44]	; 0x2c
 8013504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013506:	1b5d      	subs	r5, r3, r5
 8013508:	1e6b      	subs	r3, r5, #1
 801350a:	9305      	str	r3, [sp, #20]
 801350c:	bf45      	ittet	mi
 801350e:	f1c5 0301 	rsbmi	r3, r5, #1
 8013512:	9304      	strmi	r3, [sp, #16]
 8013514:	2300      	movpl	r3, #0
 8013516:	2300      	movmi	r3, #0
 8013518:	bf4c      	ite	mi
 801351a:	9305      	strmi	r3, [sp, #20]
 801351c:	9304      	strpl	r3, [sp, #16]
 801351e:	9b00      	ldr	r3, [sp, #0]
 8013520:	2b00      	cmp	r3, #0
 8013522:	db3d      	blt.n	80135a0 <_dtoa_r+0x248>
 8013524:	9b05      	ldr	r3, [sp, #20]
 8013526:	9a00      	ldr	r2, [sp, #0]
 8013528:	920a      	str	r2, [sp, #40]	; 0x28
 801352a:	4413      	add	r3, r2
 801352c:	9305      	str	r3, [sp, #20]
 801352e:	2300      	movs	r3, #0
 8013530:	9307      	str	r3, [sp, #28]
 8013532:	9b06      	ldr	r3, [sp, #24]
 8013534:	2b09      	cmp	r3, #9
 8013536:	f200 8089 	bhi.w	801364c <_dtoa_r+0x2f4>
 801353a:	2b05      	cmp	r3, #5
 801353c:	bfc4      	itt	gt
 801353e:	3b04      	subgt	r3, #4
 8013540:	9306      	strgt	r3, [sp, #24]
 8013542:	9b06      	ldr	r3, [sp, #24]
 8013544:	f1a3 0302 	sub.w	r3, r3, #2
 8013548:	bfcc      	ite	gt
 801354a:	2500      	movgt	r5, #0
 801354c:	2501      	movle	r5, #1
 801354e:	2b03      	cmp	r3, #3
 8013550:	f200 8087 	bhi.w	8013662 <_dtoa_r+0x30a>
 8013554:	e8df f003 	tbb	[pc, r3]
 8013558:	59383a2d 	.word	0x59383a2d
 801355c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013560:	441d      	add	r5, r3
 8013562:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013566:	2b20      	cmp	r3, #32
 8013568:	bfc1      	itttt	gt
 801356a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801356e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013572:	fa0b f303 	lslgt.w	r3, fp, r3
 8013576:	fa26 f000 	lsrgt.w	r0, r6, r0
 801357a:	bfda      	itte	le
 801357c:	f1c3 0320 	rsble	r3, r3, #32
 8013580:	fa06 f003 	lslle.w	r0, r6, r3
 8013584:	4318      	orrgt	r0, r3
 8013586:	f7ec ffd5 	bl	8000534 <__aeabi_ui2d>
 801358a:	2301      	movs	r3, #1
 801358c:	4606      	mov	r6, r0
 801358e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013592:	3d01      	subs	r5, #1
 8013594:	930e      	str	r3, [sp, #56]	; 0x38
 8013596:	e76a      	b.n	801346e <_dtoa_r+0x116>
 8013598:	2301      	movs	r3, #1
 801359a:	e7b2      	b.n	8013502 <_dtoa_r+0x1aa>
 801359c:	900b      	str	r0, [sp, #44]	; 0x2c
 801359e:	e7b1      	b.n	8013504 <_dtoa_r+0x1ac>
 80135a0:	9b04      	ldr	r3, [sp, #16]
 80135a2:	9a00      	ldr	r2, [sp, #0]
 80135a4:	1a9b      	subs	r3, r3, r2
 80135a6:	9304      	str	r3, [sp, #16]
 80135a8:	4253      	negs	r3, r2
 80135aa:	9307      	str	r3, [sp, #28]
 80135ac:	2300      	movs	r3, #0
 80135ae:	930a      	str	r3, [sp, #40]	; 0x28
 80135b0:	e7bf      	b.n	8013532 <_dtoa_r+0x1da>
 80135b2:	2300      	movs	r3, #0
 80135b4:	9308      	str	r3, [sp, #32]
 80135b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	dc55      	bgt.n	8013668 <_dtoa_r+0x310>
 80135bc:	2301      	movs	r3, #1
 80135be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80135c2:	461a      	mov	r2, r3
 80135c4:	9209      	str	r2, [sp, #36]	; 0x24
 80135c6:	e00c      	b.n	80135e2 <_dtoa_r+0x28a>
 80135c8:	2301      	movs	r3, #1
 80135ca:	e7f3      	b.n	80135b4 <_dtoa_r+0x25c>
 80135cc:	2300      	movs	r3, #0
 80135ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135d0:	9308      	str	r3, [sp, #32]
 80135d2:	9b00      	ldr	r3, [sp, #0]
 80135d4:	4413      	add	r3, r2
 80135d6:	9302      	str	r3, [sp, #8]
 80135d8:	3301      	adds	r3, #1
 80135da:	2b01      	cmp	r3, #1
 80135dc:	9303      	str	r3, [sp, #12]
 80135de:	bfb8      	it	lt
 80135e0:	2301      	movlt	r3, #1
 80135e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80135e4:	2200      	movs	r2, #0
 80135e6:	6042      	str	r2, [r0, #4]
 80135e8:	2204      	movs	r2, #4
 80135ea:	f102 0614 	add.w	r6, r2, #20
 80135ee:	429e      	cmp	r6, r3
 80135f0:	6841      	ldr	r1, [r0, #4]
 80135f2:	d93d      	bls.n	8013670 <_dtoa_r+0x318>
 80135f4:	4620      	mov	r0, r4
 80135f6:	f001 f90b 	bl	8014810 <_Balloc>
 80135fa:	9001      	str	r0, [sp, #4]
 80135fc:	2800      	cmp	r0, #0
 80135fe:	d13b      	bne.n	8013678 <_dtoa_r+0x320>
 8013600:	4b11      	ldr	r3, [pc, #68]	; (8013648 <_dtoa_r+0x2f0>)
 8013602:	4602      	mov	r2, r0
 8013604:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013608:	e6c0      	b.n	801338c <_dtoa_r+0x34>
 801360a:	2301      	movs	r3, #1
 801360c:	e7df      	b.n	80135ce <_dtoa_r+0x276>
 801360e:	bf00      	nop
 8013610:	636f4361 	.word	0x636f4361
 8013614:	3fd287a7 	.word	0x3fd287a7
 8013618:	8b60c8b3 	.word	0x8b60c8b3
 801361c:	3fc68a28 	.word	0x3fc68a28
 8013620:	509f79fb 	.word	0x509f79fb
 8013624:	3fd34413 	.word	0x3fd34413
 8013628:	08016066 	.word	0x08016066
 801362c:	0801607d 	.word	0x0801607d
 8013630:	7ff00000 	.word	0x7ff00000
 8013634:	08016062 	.word	0x08016062
 8013638:	08016059 	.word	0x08016059
 801363c:	08015edd 	.word	0x08015edd
 8013640:	3ff80000 	.word	0x3ff80000
 8013644:	080161e8 	.word	0x080161e8
 8013648:	080160d8 	.word	0x080160d8
 801364c:	2501      	movs	r5, #1
 801364e:	2300      	movs	r3, #0
 8013650:	9306      	str	r3, [sp, #24]
 8013652:	9508      	str	r5, [sp, #32]
 8013654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013658:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801365c:	2200      	movs	r2, #0
 801365e:	2312      	movs	r3, #18
 8013660:	e7b0      	b.n	80135c4 <_dtoa_r+0x26c>
 8013662:	2301      	movs	r3, #1
 8013664:	9308      	str	r3, [sp, #32]
 8013666:	e7f5      	b.n	8013654 <_dtoa_r+0x2fc>
 8013668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801366a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801366e:	e7b8      	b.n	80135e2 <_dtoa_r+0x28a>
 8013670:	3101      	adds	r1, #1
 8013672:	6041      	str	r1, [r0, #4]
 8013674:	0052      	lsls	r2, r2, #1
 8013676:	e7b8      	b.n	80135ea <_dtoa_r+0x292>
 8013678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801367a:	9a01      	ldr	r2, [sp, #4]
 801367c:	601a      	str	r2, [r3, #0]
 801367e:	9b03      	ldr	r3, [sp, #12]
 8013680:	2b0e      	cmp	r3, #14
 8013682:	f200 809d 	bhi.w	80137c0 <_dtoa_r+0x468>
 8013686:	2d00      	cmp	r5, #0
 8013688:	f000 809a 	beq.w	80137c0 <_dtoa_r+0x468>
 801368c:	9b00      	ldr	r3, [sp, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	dd32      	ble.n	80136f8 <_dtoa_r+0x3a0>
 8013692:	4ab7      	ldr	r2, [pc, #732]	; (8013970 <_dtoa_r+0x618>)
 8013694:	f003 030f 	and.w	r3, r3, #15
 8013698:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801369c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80136a0:	9b00      	ldr	r3, [sp, #0]
 80136a2:	05d8      	lsls	r0, r3, #23
 80136a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80136a8:	d516      	bpl.n	80136d8 <_dtoa_r+0x380>
 80136aa:	4bb2      	ldr	r3, [pc, #712]	; (8013974 <_dtoa_r+0x61c>)
 80136ac:	ec51 0b19 	vmov	r0, r1, d9
 80136b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80136b4:	f7ed f8e2 	bl	800087c <__aeabi_ddiv>
 80136b8:	f007 070f 	and.w	r7, r7, #15
 80136bc:	4682      	mov	sl, r0
 80136be:	468b      	mov	fp, r1
 80136c0:	2503      	movs	r5, #3
 80136c2:	4eac      	ldr	r6, [pc, #688]	; (8013974 <_dtoa_r+0x61c>)
 80136c4:	b957      	cbnz	r7, 80136dc <_dtoa_r+0x384>
 80136c6:	4642      	mov	r2, r8
 80136c8:	464b      	mov	r3, r9
 80136ca:	4650      	mov	r0, sl
 80136cc:	4659      	mov	r1, fp
 80136ce:	f7ed f8d5 	bl	800087c <__aeabi_ddiv>
 80136d2:	4682      	mov	sl, r0
 80136d4:	468b      	mov	fp, r1
 80136d6:	e028      	b.n	801372a <_dtoa_r+0x3d2>
 80136d8:	2502      	movs	r5, #2
 80136da:	e7f2      	b.n	80136c2 <_dtoa_r+0x36a>
 80136dc:	07f9      	lsls	r1, r7, #31
 80136de:	d508      	bpl.n	80136f2 <_dtoa_r+0x39a>
 80136e0:	4640      	mov	r0, r8
 80136e2:	4649      	mov	r1, r9
 80136e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80136e8:	f7ec ff9e 	bl	8000628 <__aeabi_dmul>
 80136ec:	3501      	adds	r5, #1
 80136ee:	4680      	mov	r8, r0
 80136f0:	4689      	mov	r9, r1
 80136f2:	107f      	asrs	r7, r7, #1
 80136f4:	3608      	adds	r6, #8
 80136f6:	e7e5      	b.n	80136c4 <_dtoa_r+0x36c>
 80136f8:	f000 809b 	beq.w	8013832 <_dtoa_r+0x4da>
 80136fc:	9b00      	ldr	r3, [sp, #0]
 80136fe:	4f9d      	ldr	r7, [pc, #628]	; (8013974 <_dtoa_r+0x61c>)
 8013700:	425e      	negs	r6, r3
 8013702:	4b9b      	ldr	r3, [pc, #620]	; (8013970 <_dtoa_r+0x618>)
 8013704:	f006 020f 	and.w	r2, r6, #15
 8013708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013710:	ec51 0b19 	vmov	r0, r1, d9
 8013714:	f7ec ff88 	bl	8000628 <__aeabi_dmul>
 8013718:	1136      	asrs	r6, r6, #4
 801371a:	4682      	mov	sl, r0
 801371c:	468b      	mov	fp, r1
 801371e:	2300      	movs	r3, #0
 8013720:	2502      	movs	r5, #2
 8013722:	2e00      	cmp	r6, #0
 8013724:	d17a      	bne.n	801381c <_dtoa_r+0x4c4>
 8013726:	2b00      	cmp	r3, #0
 8013728:	d1d3      	bne.n	80136d2 <_dtoa_r+0x37a>
 801372a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801372c:	2b00      	cmp	r3, #0
 801372e:	f000 8082 	beq.w	8013836 <_dtoa_r+0x4de>
 8013732:	4b91      	ldr	r3, [pc, #580]	; (8013978 <_dtoa_r+0x620>)
 8013734:	2200      	movs	r2, #0
 8013736:	4650      	mov	r0, sl
 8013738:	4659      	mov	r1, fp
 801373a:	f7ed f9e7 	bl	8000b0c <__aeabi_dcmplt>
 801373e:	2800      	cmp	r0, #0
 8013740:	d079      	beq.n	8013836 <_dtoa_r+0x4de>
 8013742:	9b03      	ldr	r3, [sp, #12]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d076      	beq.n	8013836 <_dtoa_r+0x4de>
 8013748:	9b02      	ldr	r3, [sp, #8]
 801374a:	2b00      	cmp	r3, #0
 801374c:	dd36      	ble.n	80137bc <_dtoa_r+0x464>
 801374e:	9b00      	ldr	r3, [sp, #0]
 8013750:	4650      	mov	r0, sl
 8013752:	4659      	mov	r1, fp
 8013754:	1e5f      	subs	r7, r3, #1
 8013756:	2200      	movs	r2, #0
 8013758:	4b88      	ldr	r3, [pc, #544]	; (801397c <_dtoa_r+0x624>)
 801375a:	f7ec ff65 	bl	8000628 <__aeabi_dmul>
 801375e:	9e02      	ldr	r6, [sp, #8]
 8013760:	4682      	mov	sl, r0
 8013762:	468b      	mov	fp, r1
 8013764:	3501      	adds	r5, #1
 8013766:	4628      	mov	r0, r5
 8013768:	f7ec fef4 	bl	8000554 <__aeabi_i2d>
 801376c:	4652      	mov	r2, sl
 801376e:	465b      	mov	r3, fp
 8013770:	f7ec ff5a 	bl	8000628 <__aeabi_dmul>
 8013774:	4b82      	ldr	r3, [pc, #520]	; (8013980 <_dtoa_r+0x628>)
 8013776:	2200      	movs	r2, #0
 8013778:	f7ec fda0 	bl	80002bc <__adddf3>
 801377c:	46d0      	mov	r8, sl
 801377e:	46d9      	mov	r9, fp
 8013780:	4682      	mov	sl, r0
 8013782:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8013786:	2e00      	cmp	r6, #0
 8013788:	d158      	bne.n	801383c <_dtoa_r+0x4e4>
 801378a:	4b7e      	ldr	r3, [pc, #504]	; (8013984 <_dtoa_r+0x62c>)
 801378c:	2200      	movs	r2, #0
 801378e:	4640      	mov	r0, r8
 8013790:	4649      	mov	r1, r9
 8013792:	f7ec fd91 	bl	80002b8 <__aeabi_dsub>
 8013796:	4652      	mov	r2, sl
 8013798:	465b      	mov	r3, fp
 801379a:	4680      	mov	r8, r0
 801379c:	4689      	mov	r9, r1
 801379e:	f7ed f9d3 	bl	8000b48 <__aeabi_dcmpgt>
 80137a2:	2800      	cmp	r0, #0
 80137a4:	f040 8295 	bne.w	8013cd2 <_dtoa_r+0x97a>
 80137a8:	4652      	mov	r2, sl
 80137aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80137ae:	4640      	mov	r0, r8
 80137b0:	4649      	mov	r1, r9
 80137b2:	f7ed f9ab 	bl	8000b0c <__aeabi_dcmplt>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	f040 8289 	bne.w	8013cce <_dtoa_r+0x976>
 80137bc:	ec5b ab19 	vmov	sl, fp, d9
 80137c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	f2c0 8148 	blt.w	8013a58 <_dtoa_r+0x700>
 80137c8:	9a00      	ldr	r2, [sp, #0]
 80137ca:	2a0e      	cmp	r2, #14
 80137cc:	f300 8144 	bgt.w	8013a58 <_dtoa_r+0x700>
 80137d0:	4b67      	ldr	r3, [pc, #412]	; (8013970 <_dtoa_r+0x618>)
 80137d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80137d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80137da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137dc:	2b00      	cmp	r3, #0
 80137de:	f280 80d5 	bge.w	801398c <_dtoa_r+0x634>
 80137e2:	9b03      	ldr	r3, [sp, #12]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	f300 80d1 	bgt.w	801398c <_dtoa_r+0x634>
 80137ea:	f040 826f 	bne.w	8013ccc <_dtoa_r+0x974>
 80137ee:	4b65      	ldr	r3, [pc, #404]	; (8013984 <_dtoa_r+0x62c>)
 80137f0:	2200      	movs	r2, #0
 80137f2:	4640      	mov	r0, r8
 80137f4:	4649      	mov	r1, r9
 80137f6:	f7ec ff17 	bl	8000628 <__aeabi_dmul>
 80137fa:	4652      	mov	r2, sl
 80137fc:	465b      	mov	r3, fp
 80137fe:	f7ed f999 	bl	8000b34 <__aeabi_dcmpge>
 8013802:	9e03      	ldr	r6, [sp, #12]
 8013804:	4637      	mov	r7, r6
 8013806:	2800      	cmp	r0, #0
 8013808:	f040 8245 	bne.w	8013c96 <_dtoa_r+0x93e>
 801380c:	9d01      	ldr	r5, [sp, #4]
 801380e:	2331      	movs	r3, #49	; 0x31
 8013810:	f805 3b01 	strb.w	r3, [r5], #1
 8013814:	9b00      	ldr	r3, [sp, #0]
 8013816:	3301      	adds	r3, #1
 8013818:	9300      	str	r3, [sp, #0]
 801381a:	e240      	b.n	8013c9e <_dtoa_r+0x946>
 801381c:	07f2      	lsls	r2, r6, #31
 801381e:	d505      	bpl.n	801382c <_dtoa_r+0x4d4>
 8013820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013824:	f7ec ff00 	bl	8000628 <__aeabi_dmul>
 8013828:	3501      	adds	r5, #1
 801382a:	2301      	movs	r3, #1
 801382c:	1076      	asrs	r6, r6, #1
 801382e:	3708      	adds	r7, #8
 8013830:	e777      	b.n	8013722 <_dtoa_r+0x3ca>
 8013832:	2502      	movs	r5, #2
 8013834:	e779      	b.n	801372a <_dtoa_r+0x3d2>
 8013836:	9f00      	ldr	r7, [sp, #0]
 8013838:	9e03      	ldr	r6, [sp, #12]
 801383a:	e794      	b.n	8013766 <_dtoa_r+0x40e>
 801383c:	9901      	ldr	r1, [sp, #4]
 801383e:	4b4c      	ldr	r3, [pc, #304]	; (8013970 <_dtoa_r+0x618>)
 8013840:	4431      	add	r1, r6
 8013842:	910d      	str	r1, [sp, #52]	; 0x34
 8013844:	9908      	ldr	r1, [sp, #32]
 8013846:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801384a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801384e:	2900      	cmp	r1, #0
 8013850:	d043      	beq.n	80138da <_dtoa_r+0x582>
 8013852:	494d      	ldr	r1, [pc, #308]	; (8013988 <_dtoa_r+0x630>)
 8013854:	2000      	movs	r0, #0
 8013856:	f7ed f811 	bl	800087c <__aeabi_ddiv>
 801385a:	4652      	mov	r2, sl
 801385c:	465b      	mov	r3, fp
 801385e:	f7ec fd2b 	bl	80002b8 <__aeabi_dsub>
 8013862:	9d01      	ldr	r5, [sp, #4]
 8013864:	4682      	mov	sl, r0
 8013866:	468b      	mov	fp, r1
 8013868:	4649      	mov	r1, r9
 801386a:	4640      	mov	r0, r8
 801386c:	f7ed f98c 	bl	8000b88 <__aeabi_d2iz>
 8013870:	4606      	mov	r6, r0
 8013872:	f7ec fe6f 	bl	8000554 <__aeabi_i2d>
 8013876:	4602      	mov	r2, r0
 8013878:	460b      	mov	r3, r1
 801387a:	4640      	mov	r0, r8
 801387c:	4649      	mov	r1, r9
 801387e:	f7ec fd1b 	bl	80002b8 <__aeabi_dsub>
 8013882:	3630      	adds	r6, #48	; 0x30
 8013884:	f805 6b01 	strb.w	r6, [r5], #1
 8013888:	4652      	mov	r2, sl
 801388a:	465b      	mov	r3, fp
 801388c:	4680      	mov	r8, r0
 801388e:	4689      	mov	r9, r1
 8013890:	f7ed f93c 	bl	8000b0c <__aeabi_dcmplt>
 8013894:	2800      	cmp	r0, #0
 8013896:	d163      	bne.n	8013960 <_dtoa_r+0x608>
 8013898:	4642      	mov	r2, r8
 801389a:	464b      	mov	r3, r9
 801389c:	4936      	ldr	r1, [pc, #216]	; (8013978 <_dtoa_r+0x620>)
 801389e:	2000      	movs	r0, #0
 80138a0:	f7ec fd0a 	bl	80002b8 <__aeabi_dsub>
 80138a4:	4652      	mov	r2, sl
 80138a6:	465b      	mov	r3, fp
 80138a8:	f7ed f930 	bl	8000b0c <__aeabi_dcmplt>
 80138ac:	2800      	cmp	r0, #0
 80138ae:	f040 80b5 	bne.w	8013a1c <_dtoa_r+0x6c4>
 80138b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138b4:	429d      	cmp	r5, r3
 80138b6:	d081      	beq.n	80137bc <_dtoa_r+0x464>
 80138b8:	4b30      	ldr	r3, [pc, #192]	; (801397c <_dtoa_r+0x624>)
 80138ba:	2200      	movs	r2, #0
 80138bc:	4650      	mov	r0, sl
 80138be:	4659      	mov	r1, fp
 80138c0:	f7ec feb2 	bl	8000628 <__aeabi_dmul>
 80138c4:	4b2d      	ldr	r3, [pc, #180]	; (801397c <_dtoa_r+0x624>)
 80138c6:	4682      	mov	sl, r0
 80138c8:	468b      	mov	fp, r1
 80138ca:	4640      	mov	r0, r8
 80138cc:	4649      	mov	r1, r9
 80138ce:	2200      	movs	r2, #0
 80138d0:	f7ec feaa 	bl	8000628 <__aeabi_dmul>
 80138d4:	4680      	mov	r8, r0
 80138d6:	4689      	mov	r9, r1
 80138d8:	e7c6      	b.n	8013868 <_dtoa_r+0x510>
 80138da:	4650      	mov	r0, sl
 80138dc:	4659      	mov	r1, fp
 80138de:	f7ec fea3 	bl	8000628 <__aeabi_dmul>
 80138e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138e4:	9d01      	ldr	r5, [sp, #4]
 80138e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80138e8:	4682      	mov	sl, r0
 80138ea:	468b      	mov	fp, r1
 80138ec:	4649      	mov	r1, r9
 80138ee:	4640      	mov	r0, r8
 80138f0:	f7ed f94a 	bl	8000b88 <__aeabi_d2iz>
 80138f4:	4606      	mov	r6, r0
 80138f6:	f7ec fe2d 	bl	8000554 <__aeabi_i2d>
 80138fa:	3630      	adds	r6, #48	; 0x30
 80138fc:	4602      	mov	r2, r0
 80138fe:	460b      	mov	r3, r1
 8013900:	4640      	mov	r0, r8
 8013902:	4649      	mov	r1, r9
 8013904:	f7ec fcd8 	bl	80002b8 <__aeabi_dsub>
 8013908:	f805 6b01 	strb.w	r6, [r5], #1
 801390c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801390e:	429d      	cmp	r5, r3
 8013910:	4680      	mov	r8, r0
 8013912:	4689      	mov	r9, r1
 8013914:	f04f 0200 	mov.w	r2, #0
 8013918:	d124      	bne.n	8013964 <_dtoa_r+0x60c>
 801391a:	4b1b      	ldr	r3, [pc, #108]	; (8013988 <_dtoa_r+0x630>)
 801391c:	4650      	mov	r0, sl
 801391e:	4659      	mov	r1, fp
 8013920:	f7ec fccc 	bl	80002bc <__adddf3>
 8013924:	4602      	mov	r2, r0
 8013926:	460b      	mov	r3, r1
 8013928:	4640      	mov	r0, r8
 801392a:	4649      	mov	r1, r9
 801392c:	f7ed f90c 	bl	8000b48 <__aeabi_dcmpgt>
 8013930:	2800      	cmp	r0, #0
 8013932:	d173      	bne.n	8013a1c <_dtoa_r+0x6c4>
 8013934:	4652      	mov	r2, sl
 8013936:	465b      	mov	r3, fp
 8013938:	4913      	ldr	r1, [pc, #76]	; (8013988 <_dtoa_r+0x630>)
 801393a:	2000      	movs	r0, #0
 801393c:	f7ec fcbc 	bl	80002b8 <__aeabi_dsub>
 8013940:	4602      	mov	r2, r0
 8013942:	460b      	mov	r3, r1
 8013944:	4640      	mov	r0, r8
 8013946:	4649      	mov	r1, r9
 8013948:	f7ed f8e0 	bl	8000b0c <__aeabi_dcmplt>
 801394c:	2800      	cmp	r0, #0
 801394e:	f43f af35 	beq.w	80137bc <_dtoa_r+0x464>
 8013952:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013954:	1e6b      	subs	r3, r5, #1
 8013956:	930f      	str	r3, [sp, #60]	; 0x3c
 8013958:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801395c:	2b30      	cmp	r3, #48	; 0x30
 801395e:	d0f8      	beq.n	8013952 <_dtoa_r+0x5fa>
 8013960:	9700      	str	r7, [sp, #0]
 8013962:	e049      	b.n	80139f8 <_dtoa_r+0x6a0>
 8013964:	4b05      	ldr	r3, [pc, #20]	; (801397c <_dtoa_r+0x624>)
 8013966:	f7ec fe5f 	bl	8000628 <__aeabi_dmul>
 801396a:	4680      	mov	r8, r0
 801396c:	4689      	mov	r9, r1
 801396e:	e7bd      	b.n	80138ec <_dtoa_r+0x594>
 8013970:	080161e8 	.word	0x080161e8
 8013974:	080161c0 	.word	0x080161c0
 8013978:	3ff00000 	.word	0x3ff00000
 801397c:	40240000 	.word	0x40240000
 8013980:	401c0000 	.word	0x401c0000
 8013984:	40140000 	.word	0x40140000
 8013988:	3fe00000 	.word	0x3fe00000
 801398c:	9d01      	ldr	r5, [sp, #4]
 801398e:	4656      	mov	r6, sl
 8013990:	465f      	mov	r7, fp
 8013992:	4642      	mov	r2, r8
 8013994:	464b      	mov	r3, r9
 8013996:	4630      	mov	r0, r6
 8013998:	4639      	mov	r1, r7
 801399a:	f7ec ff6f 	bl	800087c <__aeabi_ddiv>
 801399e:	f7ed f8f3 	bl	8000b88 <__aeabi_d2iz>
 80139a2:	4682      	mov	sl, r0
 80139a4:	f7ec fdd6 	bl	8000554 <__aeabi_i2d>
 80139a8:	4642      	mov	r2, r8
 80139aa:	464b      	mov	r3, r9
 80139ac:	f7ec fe3c 	bl	8000628 <__aeabi_dmul>
 80139b0:	4602      	mov	r2, r0
 80139b2:	460b      	mov	r3, r1
 80139b4:	4630      	mov	r0, r6
 80139b6:	4639      	mov	r1, r7
 80139b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80139bc:	f7ec fc7c 	bl	80002b8 <__aeabi_dsub>
 80139c0:	f805 6b01 	strb.w	r6, [r5], #1
 80139c4:	9e01      	ldr	r6, [sp, #4]
 80139c6:	9f03      	ldr	r7, [sp, #12]
 80139c8:	1bae      	subs	r6, r5, r6
 80139ca:	42b7      	cmp	r7, r6
 80139cc:	4602      	mov	r2, r0
 80139ce:	460b      	mov	r3, r1
 80139d0:	d135      	bne.n	8013a3e <_dtoa_r+0x6e6>
 80139d2:	f7ec fc73 	bl	80002bc <__adddf3>
 80139d6:	4642      	mov	r2, r8
 80139d8:	464b      	mov	r3, r9
 80139da:	4606      	mov	r6, r0
 80139dc:	460f      	mov	r7, r1
 80139de:	f7ed f8b3 	bl	8000b48 <__aeabi_dcmpgt>
 80139e2:	b9d0      	cbnz	r0, 8013a1a <_dtoa_r+0x6c2>
 80139e4:	4642      	mov	r2, r8
 80139e6:	464b      	mov	r3, r9
 80139e8:	4630      	mov	r0, r6
 80139ea:	4639      	mov	r1, r7
 80139ec:	f7ed f884 	bl	8000af8 <__aeabi_dcmpeq>
 80139f0:	b110      	cbz	r0, 80139f8 <_dtoa_r+0x6a0>
 80139f2:	f01a 0f01 	tst.w	sl, #1
 80139f6:	d110      	bne.n	8013a1a <_dtoa_r+0x6c2>
 80139f8:	4620      	mov	r0, r4
 80139fa:	ee18 1a10 	vmov	r1, s16
 80139fe:	f000 ff47 	bl	8014890 <_Bfree>
 8013a02:	2300      	movs	r3, #0
 8013a04:	9800      	ldr	r0, [sp, #0]
 8013a06:	702b      	strb	r3, [r5, #0]
 8013a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a0a:	3001      	adds	r0, #1
 8013a0c:	6018      	str	r0, [r3, #0]
 8013a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	f43f acf1 	beq.w	80133f8 <_dtoa_r+0xa0>
 8013a16:	601d      	str	r5, [r3, #0]
 8013a18:	e4ee      	b.n	80133f8 <_dtoa_r+0xa0>
 8013a1a:	9f00      	ldr	r7, [sp, #0]
 8013a1c:	462b      	mov	r3, r5
 8013a1e:	461d      	mov	r5, r3
 8013a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a24:	2a39      	cmp	r2, #57	; 0x39
 8013a26:	d106      	bne.n	8013a36 <_dtoa_r+0x6de>
 8013a28:	9a01      	ldr	r2, [sp, #4]
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	d1f7      	bne.n	8013a1e <_dtoa_r+0x6c6>
 8013a2e:	9901      	ldr	r1, [sp, #4]
 8013a30:	2230      	movs	r2, #48	; 0x30
 8013a32:	3701      	adds	r7, #1
 8013a34:	700a      	strb	r2, [r1, #0]
 8013a36:	781a      	ldrb	r2, [r3, #0]
 8013a38:	3201      	adds	r2, #1
 8013a3a:	701a      	strb	r2, [r3, #0]
 8013a3c:	e790      	b.n	8013960 <_dtoa_r+0x608>
 8013a3e:	4ba6      	ldr	r3, [pc, #664]	; (8013cd8 <_dtoa_r+0x980>)
 8013a40:	2200      	movs	r2, #0
 8013a42:	f7ec fdf1 	bl	8000628 <__aeabi_dmul>
 8013a46:	2200      	movs	r2, #0
 8013a48:	2300      	movs	r3, #0
 8013a4a:	4606      	mov	r6, r0
 8013a4c:	460f      	mov	r7, r1
 8013a4e:	f7ed f853 	bl	8000af8 <__aeabi_dcmpeq>
 8013a52:	2800      	cmp	r0, #0
 8013a54:	d09d      	beq.n	8013992 <_dtoa_r+0x63a>
 8013a56:	e7cf      	b.n	80139f8 <_dtoa_r+0x6a0>
 8013a58:	9a08      	ldr	r2, [sp, #32]
 8013a5a:	2a00      	cmp	r2, #0
 8013a5c:	f000 80d7 	beq.w	8013c0e <_dtoa_r+0x8b6>
 8013a60:	9a06      	ldr	r2, [sp, #24]
 8013a62:	2a01      	cmp	r2, #1
 8013a64:	f300 80ba 	bgt.w	8013bdc <_dtoa_r+0x884>
 8013a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a6a:	2a00      	cmp	r2, #0
 8013a6c:	f000 80b2 	beq.w	8013bd4 <_dtoa_r+0x87c>
 8013a70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013a74:	9e07      	ldr	r6, [sp, #28]
 8013a76:	9d04      	ldr	r5, [sp, #16]
 8013a78:	9a04      	ldr	r2, [sp, #16]
 8013a7a:	441a      	add	r2, r3
 8013a7c:	9204      	str	r2, [sp, #16]
 8013a7e:	9a05      	ldr	r2, [sp, #20]
 8013a80:	2101      	movs	r1, #1
 8013a82:	441a      	add	r2, r3
 8013a84:	4620      	mov	r0, r4
 8013a86:	9205      	str	r2, [sp, #20]
 8013a88:	f001 f804 	bl	8014a94 <__i2b>
 8013a8c:	4607      	mov	r7, r0
 8013a8e:	2d00      	cmp	r5, #0
 8013a90:	dd0c      	ble.n	8013aac <_dtoa_r+0x754>
 8013a92:	9b05      	ldr	r3, [sp, #20]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	dd09      	ble.n	8013aac <_dtoa_r+0x754>
 8013a98:	42ab      	cmp	r3, r5
 8013a9a:	9a04      	ldr	r2, [sp, #16]
 8013a9c:	bfa8      	it	ge
 8013a9e:	462b      	movge	r3, r5
 8013aa0:	1ad2      	subs	r2, r2, r3
 8013aa2:	9204      	str	r2, [sp, #16]
 8013aa4:	9a05      	ldr	r2, [sp, #20]
 8013aa6:	1aed      	subs	r5, r5, r3
 8013aa8:	1ad3      	subs	r3, r2, r3
 8013aaa:	9305      	str	r3, [sp, #20]
 8013aac:	9b07      	ldr	r3, [sp, #28]
 8013aae:	b31b      	cbz	r3, 8013af8 <_dtoa_r+0x7a0>
 8013ab0:	9b08      	ldr	r3, [sp, #32]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	f000 80af 	beq.w	8013c16 <_dtoa_r+0x8be>
 8013ab8:	2e00      	cmp	r6, #0
 8013aba:	dd13      	ble.n	8013ae4 <_dtoa_r+0x78c>
 8013abc:	4639      	mov	r1, r7
 8013abe:	4632      	mov	r2, r6
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	f001 f8a7 	bl	8014c14 <__pow5mult>
 8013ac6:	ee18 2a10 	vmov	r2, s16
 8013aca:	4601      	mov	r1, r0
 8013acc:	4607      	mov	r7, r0
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f000 fff6 	bl	8014ac0 <__multiply>
 8013ad4:	ee18 1a10 	vmov	r1, s16
 8013ad8:	4680      	mov	r8, r0
 8013ada:	4620      	mov	r0, r4
 8013adc:	f000 fed8 	bl	8014890 <_Bfree>
 8013ae0:	ee08 8a10 	vmov	s16, r8
 8013ae4:	9b07      	ldr	r3, [sp, #28]
 8013ae6:	1b9a      	subs	r2, r3, r6
 8013ae8:	d006      	beq.n	8013af8 <_dtoa_r+0x7a0>
 8013aea:	ee18 1a10 	vmov	r1, s16
 8013aee:	4620      	mov	r0, r4
 8013af0:	f001 f890 	bl	8014c14 <__pow5mult>
 8013af4:	ee08 0a10 	vmov	s16, r0
 8013af8:	2101      	movs	r1, #1
 8013afa:	4620      	mov	r0, r4
 8013afc:	f000 ffca 	bl	8014a94 <__i2b>
 8013b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	4606      	mov	r6, r0
 8013b06:	f340 8088 	ble.w	8013c1a <_dtoa_r+0x8c2>
 8013b0a:	461a      	mov	r2, r3
 8013b0c:	4601      	mov	r1, r0
 8013b0e:	4620      	mov	r0, r4
 8013b10:	f001 f880 	bl	8014c14 <__pow5mult>
 8013b14:	9b06      	ldr	r3, [sp, #24]
 8013b16:	2b01      	cmp	r3, #1
 8013b18:	4606      	mov	r6, r0
 8013b1a:	f340 8081 	ble.w	8013c20 <_dtoa_r+0x8c8>
 8013b1e:	f04f 0800 	mov.w	r8, #0
 8013b22:	6933      	ldr	r3, [r6, #16]
 8013b24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013b28:	6918      	ldr	r0, [r3, #16]
 8013b2a:	f000 ff63 	bl	80149f4 <__hi0bits>
 8013b2e:	f1c0 0020 	rsb	r0, r0, #32
 8013b32:	9b05      	ldr	r3, [sp, #20]
 8013b34:	4418      	add	r0, r3
 8013b36:	f010 001f 	ands.w	r0, r0, #31
 8013b3a:	f000 8092 	beq.w	8013c62 <_dtoa_r+0x90a>
 8013b3e:	f1c0 0320 	rsb	r3, r0, #32
 8013b42:	2b04      	cmp	r3, #4
 8013b44:	f340 808a 	ble.w	8013c5c <_dtoa_r+0x904>
 8013b48:	f1c0 001c 	rsb	r0, r0, #28
 8013b4c:	9b04      	ldr	r3, [sp, #16]
 8013b4e:	4403      	add	r3, r0
 8013b50:	9304      	str	r3, [sp, #16]
 8013b52:	9b05      	ldr	r3, [sp, #20]
 8013b54:	4403      	add	r3, r0
 8013b56:	4405      	add	r5, r0
 8013b58:	9305      	str	r3, [sp, #20]
 8013b5a:	9b04      	ldr	r3, [sp, #16]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	dd07      	ble.n	8013b70 <_dtoa_r+0x818>
 8013b60:	ee18 1a10 	vmov	r1, s16
 8013b64:	461a      	mov	r2, r3
 8013b66:	4620      	mov	r0, r4
 8013b68:	f001 f8ae 	bl	8014cc8 <__lshift>
 8013b6c:	ee08 0a10 	vmov	s16, r0
 8013b70:	9b05      	ldr	r3, [sp, #20]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	dd05      	ble.n	8013b82 <_dtoa_r+0x82a>
 8013b76:	4631      	mov	r1, r6
 8013b78:	461a      	mov	r2, r3
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	f001 f8a4 	bl	8014cc8 <__lshift>
 8013b80:	4606      	mov	r6, r0
 8013b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d06e      	beq.n	8013c66 <_dtoa_r+0x90e>
 8013b88:	ee18 0a10 	vmov	r0, s16
 8013b8c:	4631      	mov	r1, r6
 8013b8e:	f001 f90b 	bl	8014da8 <__mcmp>
 8013b92:	2800      	cmp	r0, #0
 8013b94:	da67      	bge.n	8013c66 <_dtoa_r+0x90e>
 8013b96:	9b00      	ldr	r3, [sp, #0]
 8013b98:	3b01      	subs	r3, #1
 8013b9a:	ee18 1a10 	vmov	r1, s16
 8013b9e:	9300      	str	r3, [sp, #0]
 8013ba0:	220a      	movs	r2, #10
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	f000 fe95 	bl	80148d4 <__multadd>
 8013baa:	9b08      	ldr	r3, [sp, #32]
 8013bac:	ee08 0a10 	vmov	s16, r0
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	f000 81b1 	beq.w	8013f18 <_dtoa_r+0xbc0>
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	4639      	mov	r1, r7
 8013bba:	220a      	movs	r2, #10
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	f000 fe89 	bl	80148d4 <__multadd>
 8013bc2:	9b02      	ldr	r3, [sp, #8]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	4607      	mov	r7, r0
 8013bc8:	f300 808e 	bgt.w	8013ce8 <_dtoa_r+0x990>
 8013bcc:	9b06      	ldr	r3, [sp, #24]
 8013bce:	2b02      	cmp	r3, #2
 8013bd0:	dc51      	bgt.n	8013c76 <_dtoa_r+0x91e>
 8013bd2:	e089      	b.n	8013ce8 <_dtoa_r+0x990>
 8013bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013bd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013bda:	e74b      	b.n	8013a74 <_dtoa_r+0x71c>
 8013bdc:	9b03      	ldr	r3, [sp, #12]
 8013bde:	1e5e      	subs	r6, r3, #1
 8013be0:	9b07      	ldr	r3, [sp, #28]
 8013be2:	42b3      	cmp	r3, r6
 8013be4:	bfbf      	itttt	lt
 8013be6:	9b07      	ldrlt	r3, [sp, #28]
 8013be8:	9607      	strlt	r6, [sp, #28]
 8013bea:	1af2      	sublt	r2, r6, r3
 8013bec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013bee:	bfb6      	itet	lt
 8013bf0:	189b      	addlt	r3, r3, r2
 8013bf2:	1b9e      	subge	r6, r3, r6
 8013bf4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013bf6:	9b03      	ldr	r3, [sp, #12]
 8013bf8:	bfb8      	it	lt
 8013bfa:	2600      	movlt	r6, #0
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	bfb7      	itett	lt
 8013c00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013c04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013c08:	1a9d      	sublt	r5, r3, r2
 8013c0a:	2300      	movlt	r3, #0
 8013c0c:	e734      	b.n	8013a78 <_dtoa_r+0x720>
 8013c0e:	9e07      	ldr	r6, [sp, #28]
 8013c10:	9d04      	ldr	r5, [sp, #16]
 8013c12:	9f08      	ldr	r7, [sp, #32]
 8013c14:	e73b      	b.n	8013a8e <_dtoa_r+0x736>
 8013c16:	9a07      	ldr	r2, [sp, #28]
 8013c18:	e767      	b.n	8013aea <_dtoa_r+0x792>
 8013c1a:	9b06      	ldr	r3, [sp, #24]
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	dc18      	bgt.n	8013c52 <_dtoa_r+0x8fa>
 8013c20:	f1ba 0f00 	cmp.w	sl, #0
 8013c24:	d115      	bne.n	8013c52 <_dtoa_r+0x8fa>
 8013c26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013c2a:	b993      	cbnz	r3, 8013c52 <_dtoa_r+0x8fa>
 8013c2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013c30:	0d1b      	lsrs	r3, r3, #20
 8013c32:	051b      	lsls	r3, r3, #20
 8013c34:	b183      	cbz	r3, 8013c58 <_dtoa_r+0x900>
 8013c36:	9b04      	ldr	r3, [sp, #16]
 8013c38:	3301      	adds	r3, #1
 8013c3a:	9304      	str	r3, [sp, #16]
 8013c3c:	9b05      	ldr	r3, [sp, #20]
 8013c3e:	3301      	adds	r3, #1
 8013c40:	9305      	str	r3, [sp, #20]
 8013c42:	f04f 0801 	mov.w	r8, #1
 8013c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	f47f af6a 	bne.w	8013b22 <_dtoa_r+0x7ca>
 8013c4e:	2001      	movs	r0, #1
 8013c50:	e76f      	b.n	8013b32 <_dtoa_r+0x7da>
 8013c52:	f04f 0800 	mov.w	r8, #0
 8013c56:	e7f6      	b.n	8013c46 <_dtoa_r+0x8ee>
 8013c58:	4698      	mov	r8, r3
 8013c5a:	e7f4      	b.n	8013c46 <_dtoa_r+0x8ee>
 8013c5c:	f43f af7d 	beq.w	8013b5a <_dtoa_r+0x802>
 8013c60:	4618      	mov	r0, r3
 8013c62:	301c      	adds	r0, #28
 8013c64:	e772      	b.n	8013b4c <_dtoa_r+0x7f4>
 8013c66:	9b03      	ldr	r3, [sp, #12]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	dc37      	bgt.n	8013cdc <_dtoa_r+0x984>
 8013c6c:	9b06      	ldr	r3, [sp, #24]
 8013c6e:	2b02      	cmp	r3, #2
 8013c70:	dd34      	ble.n	8013cdc <_dtoa_r+0x984>
 8013c72:	9b03      	ldr	r3, [sp, #12]
 8013c74:	9302      	str	r3, [sp, #8]
 8013c76:	9b02      	ldr	r3, [sp, #8]
 8013c78:	b96b      	cbnz	r3, 8013c96 <_dtoa_r+0x93e>
 8013c7a:	4631      	mov	r1, r6
 8013c7c:	2205      	movs	r2, #5
 8013c7e:	4620      	mov	r0, r4
 8013c80:	f000 fe28 	bl	80148d4 <__multadd>
 8013c84:	4601      	mov	r1, r0
 8013c86:	4606      	mov	r6, r0
 8013c88:	ee18 0a10 	vmov	r0, s16
 8013c8c:	f001 f88c 	bl	8014da8 <__mcmp>
 8013c90:	2800      	cmp	r0, #0
 8013c92:	f73f adbb 	bgt.w	801380c <_dtoa_r+0x4b4>
 8013c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c98:	9d01      	ldr	r5, [sp, #4]
 8013c9a:	43db      	mvns	r3, r3
 8013c9c:	9300      	str	r3, [sp, #0]
 8013c9e:	f04f 0800 	mov.w	r8, #0
 8013ca2:	4631      	mov	r1, r6
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	f000 fdf3 	bl	8014890 <_Bfree>
 8013caa:	2f00      	cmp	r7, #0
 8013cac:	f43f aea4 	beq.w	80139f8 <_dtoa_r+0x6a0>
 8013cb0:	f1b8 0f00 	cmp.w	r8, #0
 8013cb4:	d005      	beq.n	8013cc2 <_dtoa_r+0x96a>
 8013cb6:	45b8      	cmp	r8, r7
 8013cb8:	d003      	beq.n	8013cc2 <_dtoa_r+0x96a>
 8013cba:	4641      	mov	r1, r8
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	f000 fde7 	bl	8014890 <_Bfree>
 8013cc2:	4639      	mov	r1, r7
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f000 fde3 	bl	8014890 <_Bfree>
 8013cca:	e695      	b.n	80139f8 <_dtoa_r+0x6a0>
 8013ccc:	2600      	movs	r6, #0
 8013cce:	4637      	mov	r7, r6
 8013cd0:	e7e1      	b.n	8013c96 <_dtoa_r+0x93e>
 8013cd2:	9700      	str	r7, [sp, #0]
 8013cd4:	4637      	mov	r7, r6
 8013cd6:	e599      	b.n	801380c <_dtoa_r+0x4b4>
 8013cd8:	40240000 	.word	0x40240000
 8013cdc:	9b08      	ldr	r3, [sp, #32]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	f000 80ca 	beq.w	8013e78 <_dtoa_r+0xb20>
 8013ce4:	9b03      	ldr	r3, [sp, #12]
 8013ce6:	9302      	str	r3, [sp, #8]
 8013ce8:	2d00      	cmp	r5, #0
 8013cea:	dd05      	ble.n	8013cf8 <_dtoa_r+0x9a0>
 8013cec:	4639      	mov	r1, r7
 8013cee:	462a      	mov	r2, r5
 8013cf0:	4620      	mov	r0, r4
 8013cf2:	f000 ffe9 	bl	8014cc8 <__lshift>
 8013cf6:	4607      	mov	r7, r0
 8013cf8:	f1b8 0f00 	cmp.w	r8, #0
 8013cfc:	d05b      	beq.n	8013db6 <_dtoa_r+0xa5e>
 8013cfe:	6879      	ldr	r1, [r7, #4]
 8013d00:	4620      	mov	r0, r4
 8013d02:	f000 fd85 	bl	8014810 <_Balloc>
 8013d06:	4605      	mov	r5, r0
 8013d08:	b928      	cbnz	r0, 8013d16 <_dtoa_r+0x9be>
 8013d0a:	4b87      	ldr	r3, [pc, #540]	; (8013f28 <_dtoa_r+0xbd0>)
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013d12:	f7ff bb3b 	b.w	801338c <_dtoa_r+0x34>
 8013d16:	693a      	ldr	r2, [r7, #16]
 8013d18:	3202      	adds	r2, #2
 8013d1a:	0092      	lsls	r2, r2, #2
 8013d1c:	f107 010c 	add.w	r1, r7, #12
 8013d20:	300c      	adds	r0, #12
 8013d22:	f7fd fb7e 	bl	8011422 <memcpy>
 8013d26:	2201      	movs	r2, #1
 8013d28:	4629      	mov	r1, r5
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	f000 ffcc 	bl	8014cc8 <__lshift>
 8013d30:	9b01      	ldr	r3, [sp, #4]
 8013d32:	f103 0901 	add.w	r9, r3, #1
 8013d36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013d3a:	4413      	add	r3, r2
 8013d3c:	9305      	str	r3, [sp, #20]
 8013d3e:	f00a 0301 	and.w	r3, sl, #1
 8013d42:	46b8      	mov	r8, r7
 8013d44:	9304      	str	r3, [sp, #16]
 8013d46:	4607      	mov	r7, r0
 8013d48:	4631      	mov	r1, r6
 8013d4a:	ee18 0a10 	vmov	r0, s16
 8013d4e:	f7ff fa75 	bl	801323c <quorem>
 8013d52:	4641      	mov	r1, r8
 8013d54:	9002      	str	r0, [sp, #8]
 8013d56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013d5a:	ee18 0a10 	vmov	r0, s16
 8013d5e:	f001 f823 	bl	8014da8 <__mcmp>
 8013d62:	463a      	mov	r2, r7
 8013d64:	9003      	str	r0, [sp, #12]
 8013d66:	4631      	mov	r1, r6
 8013d68:	4620      	mov	r0, r4
 8013d6a:	f001 f839 	bl	8014de0 <__mdiff>
 8013d6e:	68c2      	ldr	r2, [r0, #12]
 8013d70:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8013d74:	4605      	mov	r5, r0
 8013d76:	bb02      	cbnz	r2, 8013dba <_dtoa_r+0xa62>
 8013d78:	4601      	mov	r1, r0
 8013d7a:	ee18 0a10 	vmov	r0, s16
 8013d7e:	f001 f813 	bl	8014da8 <__mcmp>
 8013d82:	4602      	mov	r2, r0
 8013d84:	4629      	mov	r1, r5
 8013d86:	4620      	mov	r0, r4
 8013d88:	9207      	str	r2, [sp, #28]
 8013d8a:	f000 fd81 	bl	8014890 <_Bfree>
 8013d8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013d92:	ea43 0102 	orr.w	r1, r3, r2
 8013d96:	9b04      	ldr	r3, [sp, #16]
 8013d98:	430b      	orrs	r3, r1
 8013d9a:	464d      	mov	r5, r9
 8013d9c:	d10f      	bne.n	8013dbe <_dtoa_r+0xa66>
 8013d9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013da2:	d02a      	beq.n	8013dfa <_dtoa_r+0xaa2>
 8013da4:	9b03      	ldr	r3, [sp, #12]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	dd02      	ble.n	8013db0 <_dtoa_r+0xa58>
 8013daa:	9b02      	ldr	r3, [sp, #8]
 8013dac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013db0:	f88b a000 	strb.w	sl, [fp]
 8013db4:	e775      	b.n	8013ca2 <_dtoa_r+0x94a>
 8013db6:	4638      	mov	r0, r7
 8013db8:	e7ba      	b.n	8013d30 <_dtoa_r+0x9d8>
 8013dba:	2201      	movs	r2, #1
 8013dbc:	e7e2      	b.n	8013d84 <_dtoa_r+0xa2c>
 8013dbe:	9b03      	ldr	r3, [sp, #12]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	db04      	blt.n	8013dce <_dtoa_r+0xa76>
 8013dc4:	9906      	ldr	r1, [sp, #24]
 8013dc6:	430b      	orrs	r3, r1
 8013dc8:	9904      	ldr	r1, [sp, #16]
 8013dca:	430b      	orrs	r3, r1
 8013dcc:	d122      	bne.n	8013e14 <_dtoa_r+0xabc>
 8013dce:	2a00      	cmp	r2, #0
 8013dd0:	ddee      	ble.n	8013db0 <_dtoa_r+0xa58>
 8013dd2:	ee18 1a10 	vmov	r1, s16
 8013dd6:	2201      	movs	r2, #1
 8013dd8:	4620      	mov	r0, r4
 8013dda:	f000 ff75 	bl	8014cc8 <__lshift>
 8013dde:	4631      	mov	r1, r6
 8013de0:	ee08 0a10 	vmov	s16, r0
 8013de4:	f000 ffe0 	bl	8014da8 <__mcmp>
 8013de8:	2800      	cmp	r0, #0
 8013dea:	dc03      	bgt.n	8013df4 <_dtoa_r+0xa9c>
 8013dec:	d1e0      	bne.n	8013db0 <_dtoa_r+0xa58>
 8013dee:	f01a 0f01 	tst.w	sl, #1
 8013df2:	d0dd      	beq.n	8013db0 <_dtoa_r+0xa58>
 8013df4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013df8:	d1d7      	bne.n	8013daa <_dtoa_r+0xa52>
 8013dfa:	2339      	movs	r3, #57	; 0x39
 8013dfc:	f88b 3000 	strb.w	r3, [fp]
 8013e00:	462b      	mov	r3, r5
 8013e02:	461d      	mov	r5, r3
 8013e04:	3b01      	subs	r3, #1
 8013e06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013e0a:	2a39      	cmp	r2, #57	; 0x39
 8013e0c:	d071      	beq.n	8013ef2 <_dtoa_r+0xb9a>
 8013e0e:	3201      	adds	r2, #1
 8013e10:	701a      	strb	r2, [r3, #0]
 8013e12:	e746      	b.n	8013ca2 <_dtoa_r+0x94a>
 8013e14:	2a00      	cmp	r2, #0
 8013e16:	dd07      	ble.n	8013e28 <_dtoa_r+0xad0>
 8013e18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013e1c:	d0ed      	beq.n	8013dfa <_dtoa_r+0xaa2>
 8013e1e:	f10a 0301 	add.w	r3, sl, #1
 8013e22:	f88b 3000 	strb.w	r3, [fp]
 8013e26:	e73c      	b.n	8013ca2 <_dtoa_r+0x94a>
 8013e28:	9b05      	ldr	r3, [sp, #20]
 8013e2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8013e2e:	4599      	cmp	r9, r3
 8013e30:	d047      	beq.n	8013ec2 <_dtoa_r+0xb6a>
 8013e32:	ee18 1a10 	vmov	r1, s16
 8013e36:	2300      	movs	r3, #0
 8013e38:	220a      	movs	r2, #10
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	f000 fd4a 	bl	80148d4 <__multadd>
 8013e40:	45b8      	cmp	r8, r7
 8013e42:	ee08 0a10 	vmov	s16, r0
 8013e46:	f04f 0300 	mov.w	r3, #0
 8013e4a:	f04f 020a 	mov.w	r2, #10
 8013e4e:	4641      	mov	r1, r8
 8013e50:	4620      	mov	r0, r4
 8013e52:	d106      	bne.n	8013e62 <_dtoa_r+0xb0a>
 8013e54:	f000 fd3e 	bl	80148d4 <__multadd>
 8013e58:	4680      	mov	r8, r0
 8013e5a:	4607      	mov	r7, r0
 8013e5c:	f109 0901 	add.w	r9, r9, #1
 8013e60:	e772      	b.n	8013d48 <_dtoa_r+0x9f0>
 8013e62:	f000 fd37 	bl	80148d4 <__multadd>
 8013e66:	4639      	mov	r1, r7
 8013e68:	4680      	mov	r8, r0
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	220a      	movs	r2, #10
 8013e6e:	4620      	mov	r0, r4
 8013e70:	f000 fd30 	bl	80148d4 <__multadd>
 8013e74:	4607      	mov	r7, r0
 8013e76:	e7f1      	b.n	8013e5c <_dtoa_r+0xb04>
 8013e78:	9b03      	ldr	r3, [sp, #12]
 8013e7a:	9302      	str	r3, [sp, #8]
 8013e7c:	9d01      	ldr	r5, [sp, #4]
 8013e7e:	ee18 0a10 	vmov	r0, s16
 8013e82:	4631      	mov	r1, r6
 8013e84:	f7ff f9da 	bl	801323c <quorem>
 8013e88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013e8c:	9b01      	ldr	r3, [sp, #4]
 8013e8e:	f805 ab01 	strb.w	sl, [r5], #1
 8013e92:	1aea      	subs	r2, r5, r3
 8013e94:	9b02      	ldr	r3, [sp, #8]
 8013e96:	4293      	cmp	r3, r2
 8013e98:	dd09      	ble.n	8013eae <_dtoa_r+0xb56>
 8013e9a:	ee18 1a10 	vmov	r1, s16
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	220a      	movs	r2, #10
 8013ea2:	4620      	mov	r0, r4
 8013ea4:	f000 fd16 	bl	80148d4 <__multadd>
 8013ea8:	ee08 0a10 	vmov	s16, r0
 8013eac:	e7e7      	b.n	8013e7e <_dtoa_r+0xb26>
 8013eae:	9b02      	ldr	r3, [sp, #8]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	bfc8      	it	gt
 8013eb4:	461d      	movgt	r5, r3
 8013eb6:	9b01      	ldr	r3, [sp, #4]
 8013eb8:	bfd8      	it	le
 8013eba:	2501      	movle	r5, #1
 8013ebc:	441d      	add	r5, r3
 8013ebe:	f04f 0800 	mov.w	r8, #0
 8013ec2:	ee18 1a10 	vmov	r1, s16
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	4620      	mov	r0, r4
 8013eca:	f000 fefd 	bl	8014cc8 <__lshift>
 8013ece:	4631      	mov	r1, r6
 8013ed0:	ee08 0a10 	vmov	s16, r0
 8013ed4:	f000 ff68 	bl	8014da8 <__mcmp>
 8013ed8:	2800      	cmp	r0, #0
 8013eda:	dc91      	bgt.n	8013e00 <_dtoa_r+0xaa8>
 8013edc:	d102      	bne.n	8013ee4 <_dtoa_r+0xb8c>
 8013ede:	f01a 0f01 	tst.w	sl, #1
 8013ee2:	d18d      	bne.n	8013e00 <_dtoa_r+0xaa8>
 8013ee4:	462b      	mov	r3, r5
 8013ee6:	461d      	mov	r5, r3
 8013ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013eec:	2a30      	cmp	r2, #48	; 0x30
 8013eee:	d0fa      	beq.n	8013ee6 <_dtoa_r+0xb8e>
 8013ef0:	e6d7      	b.n	8013ca2 <_dtoa_r+0x94a>
 8013ef2:	9a01      	ldr	r2, [sp, #4]
 8013ef4:	429a      	cmp	r2, r3
 8013ef6:	d184      	bne.n	8013e02 <_dtoa_r+0xaaa>
 8013ef8:	9b00      	ldr	r3, [sp, #0]
 8013efa:	3301      	adds	r3, #1
 8013efc:	9300      	str	r3, [sp, #0]
 8013efe:	2331      	movs	r3, #49	; 0x31
 8013f00:	7013      	strb	r3, [r2, #0]
 8013f02:	e6ce      	b.n	8013ca2 <_dtoa_r+0x94a>
 8013f04:	4b09      	ldr	r3, [pc, #36]	; (8013f2c <_dtoa_r+0xbd4>)
 8013f06:	f7ff ba95 	b.w	8013434 <_dtoa_r+0xdc>
 8013f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	f47f aa6e 	bne.w	80133ee <_dtoa_r+0x96>
 8013f12:	4b07      	ldr	r3, [pc, #28]	; (8013f30 <_dtoa_r+0xbd8>)
 8013f14:	f7ff ba8e 	b.w	8013434 <_dtoa_r+0xdc>
 8013f18:	9b02      	ldr	r3, [sp, #8]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	dcae      	bgt.n	8013e7c <_dtoa_r+0xb24>
 8013f1e:	9b06      	ldr	r3, [sp, #24]
 8013f20:	2b02      	cmp	r3, #2
 8013f22:	f73f aea8 	bgt.w	8013c76 <_dtoa_r+0x91e>
 8013f26:	e7a9      	b.n	8013e7c <_dtoa_r+0xb24>
 8013f28:	080160d8 	.word	0x080160d8
 8013f2c:	08015edc 	.word	0x08015edc
 8013f30:	08016059 	.word	0x08016059

08013f34 <__sflush_r>:
 8013f34:	898a      	ldrh	r2, [r1, #12]
 8013f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f3a:	4605      	mov	r5, r0
 8013f3c:	0710      	lsls	r0, r2, #28
 8013f3e:	460c      	mov	r4, r1
 8013f40:	d458      	bmi.n	8013ff4 <__sflush_r+0xc0>
 8013f42:	684b      	ldr	r3, [r1, #4]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	dc05      	bgt.n	8013f54 <__sflush_r+0x20>
 8013f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	dc02      	bgt.n	8013f54 <__sflush_r+0x20>
 8013f4e:	2000      	movs	r0, #0
 8013f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f56:	2e00      	cmp	r6, #0
 8013f58:	d0f9      	beq.n	8013f4e <__sflush_r+0x1a>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f60:	682f      	ldr	r7, [r5, #0]
 8013f62:	602b      	str	r3, [r5, #0]
 8013f64:	d032      	beq.n	8013fcc <__sflush_r+0x98>
 8013f66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f68:	89a3      	ldrh	r3, [r4, #12]
 8013f6a:	075a      	lsls	r2, r3, #29
 8013f6c:	d505      	bpl.n	8013f7a <__sflush_r+0x46>
 8013f6e:	6863      	ldr	r3, [r4, #4]
 8013f70:	1ac0      	subs	r0, r0, r3
 8013f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f74:	b10b      	cbz	r3, 8013f7a <__sflush_r+0x46>
 8013f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f78:	1ac0      	subs	r0, r0, r3
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f80:	6a21      	ldr	r1, [r4, #32]
 8013f82:	4628      	mov	r0, r5
 8013f84:	47b0      	blx	r6
 8013f86:	1c43      	adds	r3, r0, #1
 8013f88:	89a3      	ldrh	r3, [r4, #12]
 8013f8a:	d106      	bne.n	8013f9a <__sflush_r+0x66>
 8013f8c:	6829      	ldr	r1, [r5, #0]
 8013f8e:	291d      	cmp	r1, #29
 8013f90:	d82c      	bhi.n	8013fec <__sflush_r+0xb8>
 8013f92:	4a2a      	ldr	r2, [pc, #168]	; (801403c <__sflush_r+0x108>)
 8013f94:	40ca      	lsrs	r2, r1
 8013f96:	07d6      	lsls	r6, r2, #31
 8013f98:	d528      	bpl.n	8013fec <__sflush_r+0xb8>
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	6062      	str	r2, [r4, #4]
 8013f9e:	04d9      	lsls	r1, r3, #19
 8013fa0:	6922      	ldr	r2, [r4, #16]
 8013fa2:	6022      	str	r2, [r4, #0]
 8013fa4:	d504      	bpl.n	8013fb0 <__sflush_r+0x7c>
 8013fa6:	1c42      	adds	r2, r0, #1
 8013fa8:	d101      	bne.n	8013fae <__sflush_r+0x7a>
 8013faa:	682b      	ldr	r3, [r5, #0]
 8013fac:	b903      	cbnz	r3, 8013fb0 <__sflush_r+0x7c>
 8013fae:	6560      	str	r0, [r4, #84]	; 0x54
 8013fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fb2:	602f      	str	r7, [r5, #0]
 8013fb4:	2900      	cmp	r1, #0
 8013fb6:	d0ca      	beq.n	8013f4e <__sflush_r+0x1a>
 8013fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013fbc:	4299      	cmp	r1, r3
 8013fbe:	d002      	beq.n	8013fc6 <__sflush_r+0x92>
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	f001 f8fd 	bl	80151c0 <_free_r>
 8013fc6:	2000      	movs	r0, #0
 8013fc8:	6360      	str	r0, [r4, #52]	; 0x34
 8013fca:	e7c1      	b.n	8013f50 <__sflush_r+0x1c>
 8013fcc:	6a21      	ldr	r1, [r4, #32]
 8013fce:	2301      	movs	r3, #1
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	47b0      	blx	r6
 8013fd4:	1c41      	adds	r1, r0, #1
 8013fd6:	d1c7      	bne.n	8013f68 <__sflush_r+0x34>
 8013fd8:	682b      	ldr	r3, [r5, #0]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d0c4      	beq.n	8013f68 <__sflush_r+0x34>
 8013fde:	2b1d      	cmp	r3, #29
 8013fe0:	d001      	beq.n	8013fe6 <__sflush_r+0xb2>
 8013fe2:	2b16      	cmp	r3, #22
 8013fe4:	d101      	bne.n	8013fea <__sflush_r+0xb6>
 8013fe6:	602f      	str	r7, [r5, #0]
 8013fe8:	e7b1      	b.n	8013f4e <__sflush_r+0x1a>
 8013fea:	89a3      	ldrh	r3, [r4, #12]
 8013fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ff0:	81a3      	strh	r3, [r4, #12]
 8013ff2:	e7ad      	b.n	8013f50 <__sflush_r+0x1c>
 8013ff4:	690f      	ldr	r7, [r1, #16]
 8013ff6:	2f00      	cmp	r7, #0
 8013ff8:	d0a9      	beq.n	8013f4e <__sflush_r+0x1a>
 8013ffa:	0793      	lsls	r3, r2, #30
 8013ffc:	680e      	ldr	r6, [r1, #0]
 8013ffe:	bf08      	it	eq
 8014000:	694b      	ldreq	r3, [r1, #20]
 8014002:	600f      	str	r7, [r1, #0]
 8014004:	bf18      	it	ne
 8014006:	2300      	movne	r3, #0
 8014008:	eba6 0807 	sub.w	r8, r6, r7
 801400c:	608b      	str	r3, [r1, #8]
 801400e:	f1b8 0f00 	cmp.w	r8, #0
 8014012:	dd9c      	ble.n	8013f4e <__sflush_r+0x1a>
 8014014:	6a21      	ldr	r1, [r4, #32]
 8014016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014018:	4643      	mov	r3, r8
 801401a:	463a      	mov	r2, r7
 801401c:	4628      	mov	r0, r5
 801401e:	47b0      	blx	r6
 8014020:	2800      	cmp	r0, #0
 8014022:	dc06      	bgt.n	8014032 <__sflush_r+0xfe>
 8014024:	89a3      	ldrh	r3, [r4, #12]
 8014026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801402a:	81a3      	strh	r3, [r4, #12]
 801402c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014030:	e78e      	b.n	8013f50 <__sflush_r+0x1c>
 8014032:	4407      	add	r7, r0
 8014034:	eba8 0800 	sub.w	r8, r8, r0
 8014038:	e7e9      	b.n	801400e <__sflush_r+0xda>
 801403a:	bf00      	nop
 801403c:	20400001 	.word	0x20400001

08014040 <_fflush_r>:
 8014040:	b538      	push	{r3, r4, r5, lr}
 8014042:	690b      	ldr	r3, [r1, #16]
 8014044:	4605      	mov	r5, r0
 8014046:	460c      	mov	r4, r1
 8014048:	b913      	cbnz	r3, 8014050 <_fflush_r+0x10>
 801404a:	2500      	movs	r5, #0
 801404c:	4628      	mov	r0, r5
 801404e:	bd38      	pop	{r3, r4, r5, pc}
 8014050:	b118      	cbz	r0, 801405a <_fflush_r+0x1a>
 8014052:	6983      	ldr	r3, [r0, #24]
 8014054:	b90b      	cbnz	r3, 801405a <_fflush_r+0x1a>
 8014056:	f7fd f91f 	bl	8011298 <__sinit>
 801405a:	4b14      	ldr	r3, [pc, #80]	; (80140ac <_fflush_r+0x6c>)
 801405c:	429c      	cmp	r4, r3
 801405e:	d11b      	bne.n	8014098 <_fflush_r+0x58>
 8014060:	686c      	ldr	r4, [r5, #4]
 8014062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d0ef      	beq.n	801404a <_fflush_r+0xa>
 801406a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801406c:	07d0      	lsls	r0, r2, #31
 801406e:	d404      	bmi.n	801407a <_fflush_r+0x3a>
 8014070:	0599      	lsls	r1, r3, #22
 8014072:	d402      	bmi.n	801407a <_fflush_r+0x3a>
 8014074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014076:	f7fd f9d2 	bl	801141e <__retarget_lock_acquire_recursive>
 801407a:	4628      	mov	r0, r5
 801407c:	4621      	mov	r1, r4
 801407e:	f7ff ff59 	bl	8013f34 <__sflush_r>
 8014082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014084:	07da      	lsls	r2, r3, #31
 8014086:	4605      	mov	r5, r0
 8014088:	d4e0      	bmi.n	801404c <_fflush_r+0xc>
 801408a:	89a3      	ldrh	r3, [r4, #12]
 801408c:	059b      	lsls	r3, r3, #22
 801408e:	d4dd      	bmi.n	801404c <_fflush_r+0xc>
 8014090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014092:	f7fd f9c5 	bl	8011420 <__retarget_lock_release_recursive>
 8014096:	e7d9      	b.n	801404c <_fflush_r+0xc>
 8014098:	4b05      	ldr	r3, [pc, #20]	; (80140b0 <_fflush_r+0x70>)
 801409a:	429c      	cmp	r4, r3
 801409c:	d101      	bne.n	80140a2 <_fflush_r+0x62>
 801409e:	68ac      	ldr	r4, [r5, #8]
 80140a0:	e7df      	b.n	8014062 <_fflush_r+0x22>
 80140a2:	4b04      	ldr	r3, [pc, #16]	; (80140b4 <_fflush_r+0x74>)
 80140a4:	429c      	cmp	r4, r3
 80140a6:	bf08      	it	eq
 80140a8:	68ec      	ldreq	r4, [r5, #12]
 80140aa:	e7da      	b.n	8014062 <_fflush_r+0x22>
 80140ac:	08015e88 	.word	0x08015e88
 80140b0:	08015ea8 	.word	0x08015ea8
 80140b4:	08015e68 	.word	0x08015e68

080140b8 <rshift>:
 80140b8:	6903      	ldr	r3, [r0, #16]
 80140ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80140be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80140c6:	f100 0414 	add.w	r4, r0, #20
 80140ca:	dd45      	ble.n	8014158 <rshift+0xa0>
 80140cc:	f011 011f 	ands.w	r1, r1, #31
 80140d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80140d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80140d8:	d10c      	bne.n	80140f4 <rshift+0x3c>
 80140da:	f100 0710 	add.w	r7, r0, #16
 80140de:	4629      	mov	r1, r5
 80140e0:	42b1      	cmp	r1, r6
 80140e2:	d334      	bcc.n	801414e <rshift+0x96>
 80140e4:	1a9b      	subs	r3, r3, r2
 80140e6:	009b      	lsls	r3, r3, #2
 80140e8:	1eea      	subs	r2, r5, #3
 80140ea:	4296      	cmp	r6, r2
 80140ec:	bf38      	it	cc
 80140ee:	2300      	movcc	r3, #0
 80140f0:	4423      	add	r3, r4
 80140f2:	e015      	b.n	8014120 <rshift+0x68>
 80140f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80140f8:	f1c1 0820 	rsb	r8, r1, #32
 80140fc:	40cf      	lsrs	r7, r1
 80140fe:	f105 0e04 	add.w	lr, r5, #4
 8014102:	46a1      	mov	r9, r4
 8014104:	4576      	cmp	r6, lr
 8014106:	46f4      	mov	ip, lr
 8014108:	d815      	bhi.n	8014136 <rshift+0x7e>
 801410a:	1a9a      	subs	r2, r3, r2
 801410c:	0092      	lsls	r2, r2, #2
 801410e:	3a04      	subs	r2, #4
 8014110:	3501      	adds	r5, #1
 8014112:	42ae      	cmp	r6, r5
 8014114:	bf38      	it	cc
 8014116:	2200      	movcc	r2, #0
 8014118:	18a3      	adds	r3, r4, r2
 801411a:	50a7      	str	r7, [r4, r2]
 801411c:	b107      	cbz	r7, 8014120 <rshift+0x68>
 801411e:	3304      	adds	r3, #4
 8014120:	1b1a      	subs	r2, r3, r4
 8014122:	42a3      	cmp	r3, r4
 8014124:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014128:	bf08      	it	eq
 801412a:	2300      	moveq	r3, #0
 801412c:	6102      	str	r2, [r0, #16]
 801412e:	bf08      	it	eq
 8014130:	6143      	streq	r3, [r0, #20]
 8014132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014136:	f8dc c000 	ldr.w	ip, [ip]
 801413a:	fa0c fc08 	lsl.w	ip, ip, r8
 801413e:	ea4c 0707 	orr.w	r7, ip, r7
 8014142:	f849 7b04 	str.w	r7, [r9], #4
 8014146:	f85e 7b04 	ldr.w	r7, [lr], #4
 801414a:	40cf      	lsrs	r7, r1
 801414c:	e7da      	b.n	8014104 <rshift+0x4c>
 801414e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014152:	f847 cf04 	str.w	ip, [r7, #4]!
 8014156:	e7c3      	b.n	80140e0 <rshift+0x28>
 8014158:	4623      	mov	r3, r4
 801415a:	e7e1      	b.n	8014120 <rshift+0x68>

0801415c <__hexdig_fun>:
 801415c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014160:	2b09      	cmp	r3, #9
 8014162:	d802      	bhi.n	801416a <__hexdig_fun+0xe>
 8014164:	3820      	subs	r0, #32
 8014166:	b2c0      	uxtb	r0, r0
 8014168:	4770      	bx	lr
 801416a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801416e:	2b05      	cmp	r3, #5
 8014170:	d801      	bhi.n	8014176 <__hexdig_fun+0x1a>
 8014172:	3847      	subs	r0, #71	; 0x47
 8014174:	e7f7      	b.n	8014166 <__hexdig_fun+0xa>
 8014176:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801417a:	2b05      	cmp	r3, #5
 801417c:	d801      	bhi.n	8014182 <__hexdig_fun+0x26>
 801417e:	3827      	subs	r0, #39	; 0x27
 8014180:	e7f1      	b.n	8014166 <__hexdig_fun+0xa>
 8014182:	2000      	movs	r0, #0
 8014184:	4770      	bx	lr
	...

08014188 <__gethex>:
 8014188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801418c:	ed2d 8b02 	vpush	{d8}
 8014190:	b089      	sub	sp, #36	; 0x24
 8014192:	ee08 0a10 	vmov	s16, r0
 8014196:	9304      	str	r3, [sp, #16]
 8014198:	4bb4      	ldr	r3, [pc, #720]	; (801446c <__gethex+0x2e4>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	9301      	str	r3, [sp, #4]
 801419e:	4618      	mov	r0, r3
 80141a0:	468b      	mov	fp, r1
 80141a2:	4690      	mov	r8, r2
 80141a4:	f7ec f82c 	bl	8000200 <strlen>
 80141a8:	9b01      	ldr	r3, [sp, #4]
 80141aa:	f8db 2000 	ldr.w	r2, [fp]
 80141ae:	4403      	add	r3, r0
 80141b0:	4682      	mov	sl, r0
 80141b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80141b6:	9305      	str	r3, [sp, #20]
 80141b8:	1c93      	adds	r3, r2, #2
 80141ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80141be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80141c2:	32fe      	adds	r2, #254	; 0xfe
 80141c4:	18d1      	adds	r1, r2, r3
 80141c6:	461f      	mov	r7, r3
 80141c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80141cc:	9100      	str	r1, [sp, #0]
 80141ce:	2830      	cmp	r0, #48	; 0x30
 80141d0:	d0f8      	beq.n	80141c4 <__gethex+0x3c>
 80141d2:	f7ff ffc3 	bl	801415c <__hexdig_fun>
 80141d6:	4604      	mov	r4, r0
 80141d8:	2800      	cmp	r0, #0
 80141da:	d13a      	bne.n	8014252 <__gethex+0xca>
 80141dc:	9901      	ldr	r1, [sp, #4]
 80141de:	4652      	mov	r2, sl
 80141e0:	4638      	mov	r0, r7
 80141e2:	f001 f9b1 	bl	8015548 <strncmp>
 80141e6:	4605      	mov	r5, r0
 80141e8:	2800      	cmp	r0, #0
 80141ea:	d168      	bne.n	80142be <__gethex+0x136>
 80141ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 80141f0:	eb07 060a 	add.w	r6, r7, sl
 80141f4:	f7ff ffb2 	bl	801415c <__hexdig_fun>
 80141f8:	2800      	cmp	r0, #0
 80141fa:	d062      	beq.n	80142c2 <__gethex+0x13a>
 80141fc:	4633      	mov	r3, r6
 80141fe:	7818      	ldrb	r0, [r3, #0]
 8014200:	2830      	cmp	r0, #48	; 0x30
 8014202:	461f      	mov	r7, r3
 8014204:	f103 0301 	add.w	r3, r3, #1
 8014208:	d0f9      	beq.n	80141fe <__gethex+0x76>
 801420a:	f7ff ffa7 	bl	801415c <__hexdig_fun>
 801420e:	2301      	movs	r3, #1
 8014210:	fab0 f480 	clz	r4, r0
 8014214:	0964      	lsrs	r4, r4, #5
 8014216:	4635      	mov	r5, r6
 8014218:	9300      	str	r3, [sp, #0]
 801421a:	463a      	mov	r2, r7
 801421c:	4616      	mov	r6, r2
 801421e:	3201      	adds	r2, #1
 8014220:	7830      	ldrb	r0, [r6, #0]
 8014222:	f7ff ff9b 	bl	801415c <__hexdig_fun>
 8014226:	2800      	cmp	r0, #0
 8014228:	d1f8      	bne.n	801421c <__gethex+0x94>
 801422a:	9901      	ldr	r1, [sp, #4]
 801422c:	4652      	mov	r2, sl
 801422e:	4630      	mov	r0, r6
 8014230:	f001 f98a 	bl	8015548 <strncmp>
 8014234:	b980      	cbnz	r0, 8014258 <__gethex+0xd0>
 8014236:	b94d      	cbnz	r5, 801424c <__gethex+0xc4>
 8014238:	eb06 050a 	add.w	r5, r6, sl
 801423c:	462a      	mov	r2, r5
 801423e:	4616      	mov	r6, r2
 8014240:	3201      	adds	r2, #1
 8014242:	7830      	ldrb	r0, [r6, #0]
 8014244:	f7ff ff8a 	bl	801415c <__hexdig_fun>
 8014248:	2800      	cmp	r0, #0
 801424a:	d1f8      	bne.n	801423e <__gethex+0xb6>
 801424c:	1bad      	subs	r5, r5, r6
 801424e:	00ad      	lsls	r5, r5, #2
 8014250:	e004      	b.n	801425c <__gethex+0xd4>
 8014252:	2400      	movs	r4, #0
 8014254:	4625      	mov	r5, r4
 8014256:	e7e0      	b.n	801421a <__gethex+0x92>
 8014258:	2d00      	cmp	r5, #0
 801425a:	d1f7      	bne.n	801424c <__gethex+0xc4>
 801425c:	7833      	ldrb	r3, [r6, #0]
 801425e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014262:	2b50      	cmp	r3, #80	; 0x50
 8014264:	d13b      	bne.n	80142de <__gethex+0x156>
 8014266:	7873      	ldrb	r3, [r6, #1]
 8014268:	2b2b      	cmp	r3, #43	; 0x2b
 801426a:	d02c      	beq.n	80142c6 <__gethex+0x13e>
 801426c:	2b2d      	cmp	r3, #45	; 0x2d
 801426e:	d02e      	beq.n	80142ce <__gethex+0x146>
 8014270:	1c71      	adds	r1, r6, #1
 8014272:	f04f 0900 	mov.w	r9, #0
 8014276:	7808      	ldrb	r0, [r1, #0]
 8014278:	f7ff ff70 	bl	801415c <__hexdig_fun>
 801427c:	1e43      	subs	r3, r0, #1
 801427e:	b2db      	uxtb	r3, r3
 8014280:	2b18      	cmp	r3, #24
 8014282:	d82c      	bhi.n	80142de <__gethex+0x156>
 8014284:	f1a0 0210 	sub.w	r2, r0, #16
 8014288:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801428c:	f7ff ff66 	bl	801415c <__hexdig_fun>
 8014290:	1e43      	subs	r3, r0, #1
 8014292:	b2db      	uxtb	r3, r3
 8014294:	2b18      	cmp	r3, #24
 8014296:	d91d      	bls.n	80142d4 <__gethex+0x14c>
 8014298:	f1b9 0f00 	cmp.w	r9, #0
 801429c:	d000      	beq.n	80142a0 <__gethex+0x118>
 801429e:	4252      	negs	r2, r2
 80142a0:	4415      	add	r5, r2
 80142a2:	f8cb 1000 	str.w	r1, [fp]
 80142a6:	b1e4      	cbz	r4, 80142e2 <__gethex+0x15a>
 80142a8:	9b00      	ldr	r3, [sp, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	bf14      	ite	ne
 80142ae:	2700      	movne	r7, #0
 80142b0:	2706      	moveq	r7, #6
 80142b2:	4638      	mov	r0, r7
 80142b4:	b009      	add	sp, #36	; 0x24
 80142b6:	ecbd 8b02 	vpop	{d8}
 80142ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142be:	463e      	mov	r6, r7
 80142c0:	4625      	mov	r5, r4
 80142c2:	2401      	movs	r4, #1
 80142c4:	e7ca      	b.n	801425c <__gethex+0xd4>
 80142c6:	f04f 0900 	mov.w	r9, #0
 80142ca:	1cb1      	adds	r1, r6, #2
 80142cc:	e7d3      	b.n	8014276 <__gethex+0xee>
 80142ce:	f04f 0901 	mov.w	r9, #1
 80142d2:	e7fa      	b.n	80142ca <__gethex+0x142>
 80142d4:	230a      	movs	r3, #10
 80142d6:	fb03 0202 	mla	r2, r3, r2, r0
 80142da:	3a10      	subs	r2, #16
 80142dc:	e7d4      	b.n	8014288 <__gethex+0x100>
 80142de:	4631      	mov	r1, r6
 80142e0:	e7df      	b.n	80142a2 <__gethex+0x11a>
 80142e2:	1bf3      	subs	r3, r6, r7
 80142e4:	3b01      	subs	r3, #1
 80142e6:	4621      	mov	r1, r4
 80142e8:	2b07      	cmp	r3, #7
 80142ea:	dc0b      	bgt.n	8014304 <__gethex+0x17c>
 80142ec:	ee18 0a10 	vmov	r0, s16
 80142f0:	f000 fa8e 	bl	8014810 <_Balloc>
 80142f4:	4604      	mov	r4, r0
 80142f6:	b940      	cbnz	r0, 801430a <__gethex+0x182>
 80142f8:	4b5d      	ldr	r3, [pc, #372]	; (8014470 <__gethex+0x2e8>)
 80142fa:	4602      	mov	r2, r0
 80142fc:	21de      	movs	r1, #222	; 0xde
 80142fe:	485d      	ldr	r0, [pc, #372]	; (8014474 <__gethex+0x2ec>)
 8014300:	f001 f944 	bl	801558c <__assert_func>
 8014304:	3101      	adds	r1, #1
 8014306:	105b      	asrs	r3, r3, #1
 8014308:	e7ee      	b.n	80142e8 <__gethex+0x160>
 801430a:	f100 0914 	add.w	r9, r0, #20
 801430e:	f04f 0b00 	mov.w	fp, #0
 8014312:	f1ca 0301 	rsb	r3, sl, #1
 8014316:	f8cd 9008 	str.w	r9, [sp, #8]
 801431a:	f8cd b000 	str.w	fp, [sp]
 801431e:	9306      	str	r3, [sp, #24]
 8014320:	42b7      	cmp	r7, r6
 8014322:	d340      	bcc.n	80143a6 <__gethex+0x21e>
 8014324:	9802      	ldr	r0, [sp, #8]
 8014326:	9b00      	ldr	r3, [sp, #0]
 8014328:	f840 3b04 	str.w	r3, [r0], #4
 801432c:	eba0 0009 	sub.w	r0, r0, r9
 8014330:	1080      	asrs	r0, r0, #2
 8014332:	0146      	lsls	r6, r0, #5
 8014334:	6120      	str	r0, [r4, #16]
 8014336:	4618      	mov	r0, r3
 8014338:	f000 fb5c 	bl	80149f4 <__hi0bits>
 801433c:	1a30      	subs	r0, r6, r0
 801433e:	f8d8 6000 	ldr.w	r6, [r8]
 8014342:	42b0      	cmp	r0, r6
 8014344:	dd63      	ble.n	801440e <__gethex+0x286>
 8014346:	1b87      	subs	r7, r0, r6
 8014348:	4639      	mov	r1, r7
 801434a:	4620      	mov	r0, r4
 801434c:	f000 ff00 	bl	8015150 <__any_on>
 8014350:	4682      	mov	sl, r0
 8014352:	b1a8      	cbz	r0, 8014380 <__gethex+0x1f8>
 8014354:	1e7b      	subs	r3, r7, #1
 8014356:	1159      	asrs	r1, r3, #5
 8014358:	f003 021f 	and.w	r2, r3, #31
 801435c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014360:	f04f 0a01 	mov.w	sl, #1
 8014364:	fa0a f202 	lsl.w	r2, sl, r2
 8014368:	420a      	tst	r2, r1
 801436a:	d009      	beq.n	8014380 <__gethex+0x1f8>
 801436c:	4553      	cmp	r3, sl
 801436e:	dd05      	ble.n	801437c <__gethex+0x1f4>
 8014370:	1eb9      	subs	r1, r7, #2
 8014372:	4620      	mov	r0, r4
 8014374:	f000 feec 	bl	8015150 <__any_on>
 8014378:	2800      	cmp	r0, #0
 801437a:	d145      	bne.n	8014408 <__gethex+0x280>
 801437c:	f04f 0a02 	mov.w	sl, #2
 8014380:	4639      	mov	r1, r7
 8014382:	4620      	mov	r0, r4
 8014384:	f7ff fe98 	bl	80140b8 <rshift>
 8014388:	443d      	add	r5, r7
 801438a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801438e:	42ab      	cmp	r3, r5
 8014390:	da4c      	bge.n	801442c <__gethex+0x2a4>
 8014392:	ee18 0a10 	vmov	r0, s16
 8014396:	4621      	mov	r1, r4
 8014398:	f000 fa7a 	bl	8014890 <_Bfree>
 801439c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801439e:	2300      	movs	r3, #0
 80143a0:	6013      	str	r3, [r2, #0]
 80143a2:	27a3      	movs	r7, #163	; 0xa3
 80143a4:	e785      	b.n	80142b2 <__gethex+0x12a>
 80143a6:	1e73      	subs	r3, r6, #1
 80143a8:	9a05      	ldr	r2, [sp, #20]
 80143aa:	9303      	str	r3, [sp, #12]
 80143ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80143b0:	4293      	cmp	r3, r2
 80143b2:	d019      	beq.n	80143e8 <__gethex+0x260>
 80143b4:	f1bb 0f20 	cmp.w	fp, #32
 80143b8:	d107      	bne.n	80143ca <__gethex+0x242>
 80143ba:	9b02      	ldr	r3, [sp, #8]
 80143bc:	9a00      	ldr	r2, [sp, #0]
 80143be:	f843 2b04 	str.w	r2, [r3], #4
 80143c2:	9302      	str	r3, [sp, #8]
 80143c4:	2300      	movs	r3, #0
 80143c6:	9300      	str	r3, [sp, #0]
 80143c8:	469b      	mov	fp, r3
 80143ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80143ce:	f7ff fec5 	bl	801415c <__hexdig_fun>
 80143d2:	9b00      	ldr	r3, [sp, #0]
 80143d4:	f000 000f 	and.w	r0, r0, #15
 80143d8:	fa00 f00b 	lsl.w	r0, r0, fp
 80143dc:	4303      	orrs	r3, r0
 80143de:	9300      	str	r3, [sp, #0]
 80143e0:	f10b 0b04 	add.w	fp, fp, #4
 80143e4:	9b03      	ldr	r3, [sp, #12]
 80143e6:	e00d      	b.n	8014404 <__gethex+0x27c>
 80143e8:	9b03      	ldr	r3, [sp, #12]
 80143ea:	9a06      	ldr	r2, [sp, #24]
 80143ec:	4413      	add	r3, r2
 80143ee:	42bb      	cmp	r3, r7
 80143f0:	d3e0      	bcc.n	80143b4 <__gethex+0x22c>
 80143f2:	4618      	mov	r0, r3
 80143f4:	9901      	ldr	r1, [sp, #4]
 80143f6:	9307      	str	r3, [sp, #28]
 80143f8:	4652      	mov	r2, sl
 80143fa:	f001 f8a5 	bl	8015548 <strncmp>
 80143fe:	9b07      	ldr	r3, [sp, #28]
 8014400:	2800      	cmp	r0, #0
 8014402:	d1d7      	bne.n	80143b4 <__gethex+0x22c>
 8014404:	461e      	mov	r6, r3
 8014406:	e78b      	b.n	8014320 <__gethex+0x198>
 8014408:	f04f 0a03 	mov.w	sl, #3
 801440c:	e7b8      	b.n	8014380 <__gethex+0x1f8>
 801440e:	da0a      	bge.n	8014426 <__gethex+0x29e>
 8014410:	1a37      	subs	r7, r6, r0
 8014412:	4621      	mov	r1, r4
 8014414:	ee18 0a10 	vmov	r0, s16
 8014418:	463a      	mov	r2, r7
 801441a:	f000 fc55 	bl	8014cc8 <__lshift>
 801441e:	1bed      	subs	r5, r5, r7
 8014420:	4604      	mov	r4, r0
 8014422:	f100 0914 	add.w	r9, r0, #20
 8014426:	f04f 0a00 	mov.w	sl, #0
 801442a:	e7ae      	b.n	801438a <__gethex+0x202>
 801442c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014430:	42a8      	cmp	r0, r5
 8014432:	dd72      	ble.n	801451a <__gethex+0x392>
 8014434:	1b45      	subs	r5, r0, r5
 8014436:	42ae      	cmp	r6, r5
 8014438:	dc36      	bgt.n	80144a8 <__gethex+0x320>
 801443a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801443e:	2b02      	cmp	r3, #2
 8014440:	d02a      	beq.n	8014498 <__gethex+0x310>
 8014442:	2b03      	cmp	r3, #3
 8014444:	d02c      	beq.n	80144a0 <__gethex+0x318>
 8014446:	2b01      	cmp	r3, #1
 8014448:	d11c      	bne.n	8014484 <__gethex+0x2fc>
 801444a:	42ae      	cmp	r6, r5
 801444c:	d11a      	bne.n	8014484 <__gethex+0x2fc>
 801444e:	2e01      	cmp	r6, #1
 8014450:	d112      	bne.n	8014478 <__gethex+0x2f0>
 8014452:	9a04      	ldr	r2, [sp, #16]
 8014454:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014458:	6013      	str	r3, [r2, #0]
 801445a:	2301      	movs	r3, #1
 801445c:	6123      	str	r3, [r4, #16]
 801445e:	f8c9 3000 	str.w	r3, [r9]
 8014462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014464:	2762      	movs	r7, #98	; 0x62
 8014466:	601c      	str	r4, [r3, #0]
 8014468:	e723      	b.n	80142b2 <__gethex+0x12a>
 801446a:	bf00      	nop
 801446c:	08016150 	.word	0x08016150
 8014470:	080160d8 	.word	0x080160d8
 8014474:	080160e9 	.word	0x080160e9
 8014478:	1e71      	subs	r1, r6, #1
 801447a:	4620      	mov	r0, r4
 801447c:	f000 fe68 	bl	8015150 <__any_on>
 8014480:	2800      	cmp	r0, #0
 8014482:	d1e6      	bne.n	8014452 <__gethex+0x2ca>
 8014484:	ee18 0a10 	vmov	r0, s16
 8014488:	4621      	mov	r1, r4
 801448a:	f000 fa01 	bl	8014890 <_Bfree>
 801448e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014490:	2300      	movs	r3, #0
 8014492:	6013      	str	r3, [r2, #0]
 8014494:	2750      	movs	r7, #80	; 0x50
 8014496:	e70c      	b.n	80142b2 <__gethex+0x12a>
 8014498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801449a:	2b00      	cmp	r3, #0
 801449c:	d1f2      	bne.n	8014484 <__gethex+0x2fc>
 801449e:	e7d8      	b.n	8014452 <__gethex+0x2ca>
 80144a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d1d5      	bne.n	8014452 <__gethex+0x2ca>
 80144a6:	e7ed      	b.n	8014484 <__gethex+0x2fc>
 80144a8:	1e6f      	subs	r7, r5, #1
 80144aa:	f1ba 0f00 	cmp.w	sl, #0
 80144ae:	d131      	bne.n	8014514 <__gethex+0x38c>
 80144b0:	b127      	cbz	r7, 80144bc <__gethex+0x334>
 80144b2:	4639      	mov	r1, r7
 80144b4:	4620      	mov	r0, r4
 80144b6:	f000 fe4b 	bl	8015150 <__any_on>
 80144ba:	4682      	mov	sl, r0
 80144bc:	117b      	asrs	r3, r7, #5
 80144be:	2101      	movs	r1, #1
 80144c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80144c4:	f007 071f 	and.w	r7, r7, #31
 80144c8:	fa01 f707 	lsl.w	r7, r1, r7
 80144cc:	421f      	tst	r7, r3
 80144ce:	4629      	mov	r1, r5
 80144d0:	4620      	mov	r0, r4
 80144d2:	bf18      	it	ne
 80144d4:	f04a 0a02 	orrne.w	sl, sl, #2
 80144d8:	1b76      	subs	r6, r6, r5
 80144da:	f7ff fded 	bl	80140b8 <rshift>
 80144de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80144e2:	2702      	movs	r7, #2
 80144e4:	f1ba 0f00 	cmp.w	sl, #0
 80144e8:	d048      	beq.n	801457c <__gethex+0x3f4>
 80144ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80144ee:	2b02      	cmp	r3, #2
 80144f0:	d015      	beq.n	801451e <__gethex+0x396>
 80144f2:	2b03      	cmp	r3, #3
 80144f4:	d017      	beq.n	8014526 <__gethex+0x39e>
 80144f6:	2b01      	cmp	r3, #1
 80144f8:	d109      	bne.n	801450e <__gethex+0x386>
 80144fa:	f01a 0f02 	tst.w	sl, #2
 80144fe:	d006      	beq.n	801450e <__gethex+0x386>
 8014500:	f8d9 0000 	ldr.w	r0, [r9]
 8014504:	ea4a 0a00 	orr.w	sl, sl, r0
 8014508:	f01a 0f01 	tst.w	sl, #1
 801450c:	d10e      	bne.n	801452c <__gethex+0x3a4>
 801450e:	f047 0710 	orr.w	r7, r7, #16
 8014512:	e033      	b.n	801457c <__gethex+0x3f4>
 8014514:	f04f 0a01 	mov.w	sl, #1
 8014518:	e7d0      	b.n	80144bc <__gethex+0x334>
 801451a:	2701      	movs	r7, #1
 801451c:	e7e2      	b.n	80144e4 <__gethex+0x35c>
 801451e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014520:	f1c3 0301 	rsb	r3, r3, #1
 8014524:	9315      	str	r3, [sp, #84]	; 0x54
 8014526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014528:	2b00      	cmp	r3, #0
 801452a:	d0f0      	beq.n	801450e <__gethex+0x386>
 801452c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014530:	f104 0314 	add.w	r3, r4, #20
 8014534:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014538:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801453c:	f04f 0c00 	mov.w	ip, #0
 8014540:	4618      	mov	r0, r3
 8014542:	f853 2b04 	ldr.w	r2, [r3], #4
 8014546:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801454a:	d01c      	beq.n	8014586 <__gethex+0x3fe>
 801454c:	3201      	adds	r2, #1
 801454e:	6002      	str	r2, [r0, #0]
 8014550:	2f02      	cmp	r7, #2
 8014552:	f104 0314 	add.w	r3, r4, #20
 8014556:	d13f      	bne.n	80145d8 <__gethex+0x450>
 8014558:	f8d8 2000 	ldr.w	r2, [r8]
 801455c:	3a01      	subs	r2, #1
 801455e:	42b2      	cmp	r2, r6
 8014560:	d10a      	bne.n	8014578 <__gethex+0x3f0>
 8014562:	1171      	asrs	r1, r6, #5
 8014564:	2201      	movs	r2, #1
 8014566:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801456a:	f006 061f 	and.w	r6, r6, #31
 801456e:	fa02 f606 	lsl.w	r6, r2, r6
 8014572:	421e      	tst	r6, r3
 8014574:	bf18      	it	ne
 8014576:	4617      	movne	r7, r2
 8014578:	f047 0720 	orr.w	r7, r7, #32
 801457c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801457e:	601c      	str	r4, [r3, #0]
 8014580:	9b04      	ldr	r3, [sp, #16]
 8014582:	601d      	str	r5, [r3, #0]
 8014584:	e695      	b.n	80142b2 <__gethex+0x12a>
 8014586:	4299      	cmp	r1, r3
 8014588:	f843 cc04 	str.w	ip, [r3, #-4]
 801458c:	d8d8      	bhi.n	8014540 <__gethex+0x3b8>
 801458e:	68a3      	ldr	r3, [r4, #8]
 8014590:	459b      	cmp	fp, r3
 8014592:	db19      	blt.n	80145c8 <__gethex+0x440>
 8014594:	6861      	ldr	r1, [r4, #4]
 8014596:	ee18 0a10 	vmov	r0, s16
 801459a:	3101      	adds	r1, #1
 801459c:	f000 f938 	bl	8014810 <_Balloc>
 80145a0:	4681      	mov	r9, r0
 80145a2:	b918      	cbnz	r0, 80145ac <__gethex+0x424>
 80145a4:	4b1a      	ldr	r3, [pc, #104]	; (8014610 <__gethex+0x488>)
 80145a6:	4602      	mov	r2, r0
 80145a8:	2184      	movs	r1, #132	; 0x84
 80145aa:	e6a8      	b.n	80142fe <__gethex+0x176>
 80145ac:	6922      	ldr	r2, [r4, #16]
 80145ae:	3202      	adds	r2, #2
 80145b0:	f104 010c 	add.w	r1, r4, #12
 80145b4:	0092      	lsls	r2, r2, #2
 80145b6:	300c      	adds	r0, #12
 80145b8:	f7fc ff33 	bl	8011422 <memcpy>
 80145bc:	4621      	mov	r1, r4
 80145be:	ee18 0a10 	vmov	r0, s16
 80145c2:	f000 f965 	bl	8014890 <_Bfree>
 80145c6:	464c      	mov	r4, r9
 80145c8:	6923      	ldr	r3, [r4, #16]
 80145ca:	1c5a      	adds	r2, r3, #1
 80145cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80145d0:	6122      	str	r2, [r4, #16]
 80145d2:	2201      	movs	r2, #1
 80145d4:	615a      	str	r2, [r3, #20]
 80145d6:	e7bb      	b.n	8014550 <__gethex+0x3c8>
 80145d8:	6922      	ldr	r2, [r4, #16]
 80145da:	455a      	cmp	r2, fp
 80145dc:	dd0b      	ble.n	80145f6 <__gethex+0x46e>
 80145de:	2101      	movs	r1, #1
 80145e0:	4620      	mov	r0, r4
 80145e2:	f7ff fd69 	bl	80140b8 <rshift>
 80145e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80145ea:	3501      	adds	r5, #1
 80145ec:	42ab      	cmp	r3, r5
 80145ee:	f6ff aed0 	blt.w	8014392 <__gethex+0x20a>
 80145f2:	2701      	movs	r7, #1
 80145f4:	e7c0      	b.n	8014578 <__gethex+0x3f0>
 80145f6:	f016 061f 	ands.w	r6, r6, #31
 80145fa:	d0fa      	beq.n	80145f2 <__gethex+0x46a>
 80145fc:	4453      	add	r3, sl
 80145fe:	f1c6 0620 	rsb	r6, r6, #32
 8014602:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014606:	f000 f9f5 	bl	80149f4 <__hi0bits>
 801460a:	42b0      	cmp	r0, r6
 801460c:	dbe7      	blt.n	80145de <__gethex+0x456>
 801460e:	e7f0      	b.n	80145f2 <__gethex+0x46a>
 8014610:	080160d8 	.word	0x080160d8

08014614 <L_shift>:
 8014614:	f1c2 0208 	rsb	r2, r2, #8
 8014618:	0092      	lsls	r2, r2, #2
 801461a:	b570      	push	{r4, r5, r6, lr}
 801461c:	f1c2 0620 	rsb	r6, r2, #32
 8014620:	6843      	ldr	r3, [r0, #4]
 8014622:	6804      	ldr	r4, [r0, #0]
 8014624:	fa03 f506 	lsl.w	r5, r3, r6
 8014628:	432c      	orrs	r4, r5
 801462a:	40d3      	lsrs	r3, r2
 801462c:	6004      	str	r4, [r0, #0]
 801462e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014632:	4288      	cmp	r0, r1
 8014634:	d3f4      	bcc.n	8014620 <L_shift+0xc>
 8014636:	bd70      	pop	{r4, r5, r6, pc}

08014638 <__match>:
 8014638:	b530      	push	{r4, r5, lr}
 801463a:	6803      	ldr	r3, [r0, #0]
 801463c:	3301      	adds	r3, #1
 801463e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014642:	b914      	cbnz	r4, 801464a <__match+0x12>
 8014644:	6003      	str	r3, [r0, #0]
 8014646:	2001      	movs	r0, #1
 8014648:	bd30      	pop	{r4, r5, pc}
 801464a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801464e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014652:	2d19      	cmp	r5, #25
 8014654:	bf98      	it	ls
 8014656:	3220      	addls	r2, #32
 8014658:	42a2      	cmp	r2, r4
 801465a:	d0f0      	beq.n	801463e <__match+0x6>
 801465c:	2000      	movs	r0, #0
 801465e:	e7f3      	b.n	8014648 <__match+0x10>

08014660 <__hexnan>:
 8014660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014664:	680b      	ldr	r3, [r1, #0]
 8014666:	115e      	asrs	r6, r3, #5
 8014668:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801466c:	f013 031f 	ands.w	r3, r3, #31
 8014670:	b087      	sub	sp, #28
 8014672:	bf18      	it	ne
 8014674:	3604      	addne	r6, #4
 8014676:	2500      	movs	r5, #0
 8014678:	1f37      	subs	r7, r6, #4
 801467a:	4690      	mov	r8, r2
 801467c:	6802      	ldr	r2, [r0, #0]
 801467e:	9301      	str	r3, [sp, #4]
 8014680:	4682      	mov	sl, r0
 8014682:	f846 5c04 	str.w	r5, [r6, #-4]
 8014686:	46b9      	mov	r9, r7
 8014688:	463c      	mov	r4, r7
 801468a:	9502      	str	r5, [sp, #8]
 801468c:	46ab      	mov	fp, r5
 801468e:	7851      	ldrb	r1, [r2, #1]
 8014690:	1c53      	adds	r3, r2, #1
 8014692:	9303      	str	r3, [sp, #12]
 8014694:	b341      	cbz	r1, 80146e8 <__hexnan+0x88>
 8014696:	4608      	mov	r0, r1
 8014698:	9205      	str	r2, [sp, #20]
 801469a:	9104      	str	r1, [sp, #16]
 801469c:	f7ff fd5e 	bl	801415c <__hexdig_fun>
 80146a0:	2800      	cmp	r0, #0
 80146a2:	d14f      	bne.n	8014744 <__hexnan+0xe4>
 80146a4:	9904      	ldr	r1, [sp, #16]
 80146a6:	9a05      	ldr	r2, [sp, #20]
 80146a8:	2920      	cmp	r1, #32
 80146aa:	d818      	bhi.n	80146de <__hexnan+0x7e>
 80146ac:	9b02      	ldr	r3, [sp, #8]
 80146ae:	459b      	cmp	fp, r3
 80146b0:	dd13      	ble.n	80146da <__hexnan+0x7a>
 80146b2:	454c      	cmp	r4, r9
 80146b4:	d206      	bcs.n	80146c4 <__hexnan+0x64>
 80146b6:	2d07      	cmp	r5, #7
 80146b8:	dc04      	bgt.n	80146c4 <__hexnan+0x64>
 80146ba:	462a      	mov	r2, r5
 80146bc:	4649      	mov	r1, r9
 80146be:	4620      	mov	r0, r4
 80146c0:	f7ff ffa8 	bl	8014614 <L_shift>
 80146c4:	4544      	cmp	r4, r8
 80146c6:	d950      	bls.n	801476a <__hexnan+0x10a>
 80146c8:	2300      	movs	r3, #0
 80146ca:	f1a4 0904 	sub.w	r9, r4, #4
 80146ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80146d2:	f8cd b008 	str.w	fp, [sp, #8]
 80146d6:	464c      	mov	r4, r9
 80146d8:	461d      	mov	r5, r3
 80146da:	9a03      	ldr	r2, [sp, #12]
 80146dc:	e7d7      	b.n	801468e <__hexnan+0x2e>
 80146de:	2929      	cmp	r1, #41	; 0x29
 80146e0:	d156      	bne.n	8014790 <__hexnan+0x130>
 80146e2:	3202      	adds	r2, #2
 80146e4:	f8ca 2000 	str.w	r2, [sl]
 80146e8:	f1bb 0f00 	cmp.w	fp, #0
 80146ec:	d050      	beq.n	8014790 <__hexnan+0x130>
 80146ee:	454c      	cmp	r4, r9
 80146f0:	d206      	bcs.n	8014700 <__hexnan+0xa0>
 80146f2:	2d07      	cmp	r5, #7
 80146f4:	dc04      	bgt.n	8014700 <__hexnan+0xa0>
 80146f6:	462a      	mov	r2, r5
 80146f8:	4649      	mov	r1, r9
 80146fa:	4620      	mov	r0, r4
 80146fc:	f7ff ff8a 	bl	8014614 <L_shift>
 8014700:	4544      	cmp	r4, r8
 8014702:	d934      	bls.n	801476e <__hexnan+0x10e>
 8014704:	f1a8 0204 	sub.w	r2, r8, #4
 8014708:	4623      	mov	r3, r4
 801470a:	f853 1b04 	ldr.w	r1, [r3], #4
 801470e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014712:	429f      	cmp	r7, r3
 8014714:	d2f9      	bcs.n	801470a <__hexnan+0xaa>
 8014716:	1b3b      	subs	r3, r7, r4
 8014718:	f023 0303 	bic.w	r3, r3, #3
 801471c:	3304      	adds	r3, #4
 801471e:	3401      	adds	r4, #1
 8014720:	3e03      	subs	r6, #3
 8014722:	42b4      	cmp	r4, r6
 8014724:	bf88      	it	hi
 8014726:	2304      	movhi	r3, #4
 8014728:	4443      	add	r3, r8
 801472a:	2200      	movs	r2, #0
 801472c:	f843 2b04 	str.w	r2, [r3], #4
 8014730:	429f      	cmp	r7, r3
 8014732:	d2fb      	bcs.n	801472c <__hexnan+0xcc>
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	b91b      	cbnz	r3, 8014740 <__hexnan+0xe0>
 8014738:	4547      	cmp	r7, r8
 801473a:	d127      	bne.n	801478c <__hexnan+0x12c>
 801473c:	2301      	movs	r3, #1
 801473e:	603b      	str	r3, [r7, #0]
 8014740:	2005      	movs	r0, #5
 8014742:	e026      	b.n	8014792 <__hexnan+0x132>
 8014744:	3501      	adds	r5, #1
 8014746:	2d08      	cmp	r5, #8
 8014748:	f10b 0b01 	add.w	fp, fp, #1
 801474c:	dd06      	ble.n	801475c <__hexnan+0xfc>
 801474e:	4544      	cmp	r4, r8
 8014750:	d9c3      	bls.n	80146da <__hexnan+0x7a>
 8014752:	2300      	movs	r3, #0
 8014754:	f844 3c04 	str.w	r3, [r4, #-4]
 8014758:	2501      	movs	r5, #1
 801475a:	3c04      	subs	r4, #4
 801475c:	6822      	ldr	r2, [r4, #0]
 801475e:	f000 000f 	and.w	r0, r0, #15
 8014762:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014766:	6022      	str	r2, [r4, #0]
 8014768:	e7b7      	b.n	80146da <__hexnan+0x7a>
 801476a:	2508      	movs	r5, #8
 801476c:	e7b5      	b.n	80146da <__hexnan+0x7a>
 801476e:	9b01      	ldr	r3, [sp, #4]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d0df      	beq.n	8014734 <__hexnan+0xd4>
 8014774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014778:	f1c3 0320 	rsb	r3, r3, #32
 801477c:	fa22 f303 	lsr.w	r3, r2, r3
 8014780:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014784:	401a      	ands	r2, r3
 8014786:	f846 2c04 	str.w	r2, [r6, #-4]
 801478a:	e7d3      	b.n	8014734 <__hexnan+0xd4>
 801478c:	3f04      	subs	r7, #4
 801478e:	e7d1      	b.n	8014734 <__hexnan+0xd4>
 8014790:	2004      	movs	r0, #4
 8014792:	b007      	add	sp, #28
 8014794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014798 <_localeconv_r>:
 8014798:	4800      	ldr	r0, [pc, #0]	; (801479c <_localeconv_r+0x4>)
 801479a:	4770      	bx	lr
 801479c:	2000017c 	.word	0x2000017c

080147a0 <_lseek_r>:
 80147a0:	b538      	push	{r3, r4, r5, lr}
 80147a2:	4d07      	ldr	r5, [pc, #28]	; (80147c0 <_lseek_r+0x20>)
 80147a4:	4604      	mov	r4, r0
 80147a6:	4608      	mov	r0, r1
 80147a8:	4611      	mov	r1, r2
 80147aa:	2200      	movs	r2, #0
 80147ac:	602a      	str	r2, [r5, #0]
 80147ae:	461a      	mov	r2, r3
 80147b0:	f7ed fd30 	bl	8002214 <_lseek>
 80147b4:	1c43      	adds	r3, r0, #1
 80147b6:	d102      	bne.n	80147be <_lseek_r+0x1e>
 80147b8:	682b      	ldr	r3, [r5, #0]
 80147ba:	b103      	cbz	r3, 80147be <_lseek_r+0x1e>
 80147bc:	6023      	str	r3, [r4, #0]
 80147be:	bd38      	pop	{r3, r4, r5, pc}
 80147c0:	20005c44 	.word	0x20005c44

080147c4 <malloc>:
 80147c4:	4b02      	ldr	r3, [pc, #8]	; (80147d0 <malloc+0xc>)
 80147c6:	4601      	mov	r1, r0
 80147c8:	6818      	ldr	r0, [r3, #0]
 80147ca:	f7fc be61 	b.w	8011490 <_malloc_r>
 80147ce:	bf00      	nop
 80147d0:	20000024 	.word	0x20000024

080147d4 <__ascii_mbtowc>:
 80147d4:	b082      	sub	sp, #8
 80147d6:	b901      	cbnz	r1, 80147da <__ascii_mbtowc+0x6>
 80147d8:	a901      	add	r1, sp, #4
 80147da:	b142      	cbz	r2, 80147ee <__ascii_mbtowc+0x1a>
 80147dc:	b14b      	cbz	r3, 80147f2 <__ascii_mbtowc+0x1e>
 80147de:	7813      	ldrb	r3, [r2, #0]
 80147e0:	600b      	str	r3, [r1, #0]
 80147e2:	7812      	ldrb	r2, [r2, #0]
 80147e4:	1e10      	subs	r0, r2, #0
 80147e6:	bf18      	it	ne
 80147e8:	2001      	movne	r0, #1
 80147ea:	b002      	add	sp, #8
 80147ec:	4770      	bx	lr
 80147ee:	4610      	mov	r0, r2
 80147f0:	e7fb      	b.n	80147ea <__ascii_mbtowc+0x16>
 80147f2:	f06f 0001 	mvn.w	r0, #1
 80147f6:	e7f8      	b.n	80147ea <__ascii_mbtowc+0x16>

080147f8 <__malloc_lock>:
 80147f8:	4801      	ldr	r0, [pc, #4]	; (8014800 <__malloc_lock+0x8>)
 80147fa:	f7fc be10 	b.w	801141e <__retarget_lock_acquire_recursive>
 80147fe:	bf00      	nop
 8014800:	20005c38 	.word	0x20005c38

08014804 <__malloc_unlock>:
 8014804:	4801      	ldr	r0, [pc, #4]	; (801480c <__malloc_unlock+0x8>)
 8014806:	f7fc be0b 	b.w	8011420 <__retarget_lock_release_recursive>
 801480a:	bf00      	nop
 801480c:	20005c38 	.word	0x20005c38

08014810 <_Balloc>:
 8014810:	b570      	push	{r4, r5, r6, lr}
 8014812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014814:	4604      	mov	r4, r0
 8014816:	460d      	mov	r5, r1
 8014818:	b976      	cbnz	r6, 8014838 <_Balloc+0x28>
 801481a:	2010      	movs	r0, #16
 801481c:	f7ff ffd2 	bl	80147c4 <malloc>
 8014820:	4602      	mov	r2, r0
 8014822:	6260      	str	r0, [r4, #36]	; 0x24
 8014824:	b920      	cbnz	r0, 8014830 <_Balloc+0x20>
 8014826:	4b18      	ldr	r3, [pc, #96]	; (8014888 <_Balloc+0x78>)
 8014828:	4818      	ldr	r0, [pc, #96]	; (801488c <_Balloc+0x7c>)
 801482a:	2166      	movs	r1, #102	; 0x66
 801482c:	f000 feae 	bl	801558c <__assert_func>
 8014830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014834:	6006      	str	r6, [r0, #0]
 8014836:	60c6      	str	r6, [r0, #12]
 8014838:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801483a:	68f3      	ldr	r3, [r6, #12]
 801483c:	b183      	cbz	r3, 8014860 <_Balloc+0x50>
 801483e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014840:	68db      	ldr	r3, [r3, #12]
 8014842:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014846:	b9b8      	cbnz	r0, 8014878 <_Balloc+0x68>
 8014848:	2101      	movs	r1, #1
 801484a:	fa01 f605 	lsl.w	r6, r1, r5
 801484e:	1d72      	adds	r2, r6, #5
 8014850:	0092      	lsls	r2, r2, #2
 8014852:	4620      	mov	r0, r4
 8014854:	f000 fc9d 	bl	8015192 <_calloc_r>
 8014858:	b160      	cbz	r0, 8014874 <_Balloc+0x64>
 801485a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801485e:	e00e      	b.n	801487e <_Balloc+0x6e>
 8014860:	2221      	movs	r2, #33	; 0x21
 8014862:	2104      	movs	r1, #4
 8014864:	4620      	mov	r0, r4
 8014866:	f000 fc94 	bl	8015192 <_calloc_r>
 801486a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801486c:	60f0      	str	r0, [r6, #12]
 801486e:	68db      	ldr	r3, [r3, #12]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d1e4      	bne.n	801483e <_Balloc+0x2e>
 8014874:	2000      	movs	r0, #0
 8014876:	bd70      	pop	{r4, r5, r6, pc}
 8014878:	6802      	ldr	r2, [r0, #0]
 801487a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801487e:	2300      	movs	r3, #0
 8014880:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014884:	e7f7      	b.n	8014876 <_Balloc+0x66>
 8014886:	bf00      	nop
 8014888:	08016066 	.word	0x08016066
 801488c:	08016164 	.word	0x08016164

08014890 <_Bfree>:
 8014890:	b570      	push	{r4, r5, r6, lr}
 8014892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014894:	4605      	mov	r5, r0
 8014896:	460c      	mov	r4, r1
 8014898:	b976      	cbnz	r6, 80148b8 <_Bfree+0x28>
 801489a:	2010      	movs	r0, #16
 801489c:	f7ff ff92 	bl	80147c4 <malloc>
 80148a0:	4602      	mov	r2, r0
 80148a2:	6268      	str	r0, [r5, #36]	; 0x24
 80148a4:	b920      	cbnz	r0, 80148b0 <_Bfree+0x20>
 80148a6:	4b09      	ldr	r3, [pc, #36]	; (80148cc <_Bfree+0x3c>)
 80148a8:	4809      	ldr	r0, [pc, #36]	; (80148d0 <_Bfree+0x40>)
 80148aa:	218a      	movs	r1, #138	; 0x8a
 80148ac:	f000 fe6e 	bl	801558c <__assert_func>
 80148b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80148b4:	6006      	str	r6, [r0, #0]
 80148b6:	60c6      	str	r6, [r0, #12]
 80148b8:	b13c      	cbz	r4, 80148ca <_Bfree+0x3a>
 80148ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80148bc:	6862      	ldr	r2, [r4, #4]
 80148be:	68db      	ldr	r3, [r3, #12]
 80148c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80148c4:	6021      	str	r1, [r4, #0]
 80148c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80148ca:	bd70      	pop	{r4, r5, r6, pc}
 80148cc:	08016066 	.word	0x08016066
 80148d0:	08016164 	.word	0x08016164

080148d4 <__multadd>:
 80148d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148d8:	690d      	ldr	r5, [r1, #16]
 80148da:	4607      	mov	r7, r0
 80148dc:	460c      	mov	r4, r1
 80148de:	461e      	mov	r6, r3
 80148e0:	f101 0c14 	add.w	ip, r1, #20
 80148e4:	2000      	movs	r0, #0
 80148e6:	f8dc 3000 	ldr.w	r3, [ip]
 80148ea:	b299      	uxth	r1, r3
 80148ec:	fb02 6101 	mla	r1, r2, r1, r6
 80148f0:	0c1e      	lsrs	r6, r3, #16
 80148f2:	0c0b      	lsrs	r3, r1, #16
 80148f4:	fb02 3306 	mla	r3, r2, r6, r3
 80148f8:	b289      	uxth	r1, r1
 80148fa:	3001      	adds	r0, #1
 80148fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014900:	4285      	cmp	r5, r0
 8014902:	f84c 1b04 	str.w	r1, [ip], #4
 8014906:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801490a:	dcec      	bgt.n	80148e6 <__multadd+0x12>
 801490c:	b30e      	cbz	r6, 8014952 <__multadd+0x7e>
 801490e:	68a3      	ldr	r3, [r4, #8]
 8014910:	42ab      	cmp	r3, r5
 8014912:	dc19      	bgt.n	8014948 <__multadd+0x74>
 8014914:	6861      	ldr	r1, [r4, #4]
 8014916:	4638      	mov	r0, r7
 8014918:	3101      	adds	r1, #1
 801491a:	f7ff ff79 	bl	8014810 <_Balloc>
 801491e:	4680      	mov	r8, r0
 8014920:	b928      	cbnz	r0, 801492e <__multadd+0x5a>
 8014922:	4602      	mov	r2, r0
 8014924:	4b0c      	ldr	r3, [pc, #48]	; (8014958 <__multadd+0x84>)
 8014926:	480d      	ldr	r0, [pc, #52]	; (801495c <__multadd+0x88>)
 8014928:	21b5      	movs	r1, #181	; 0xb5
 801492a:	f000 fe2f 	bl	801558c <__assert_func>
 801492e:	6922      	ldr	r2, [r4, #16]
 8014930:	3202      	adds	r2, #2
 8014932:	f104 010c 	add.w	r1, r4, #12
 8014936:	0092      	lsls	r2, r2, #2
 8014938:	300c      	adds	r0, #12
 801493a:	f7fc fd72 	bl	8011422 <memcpy>
 801493e:	4621      	mov	r1, r4
 8014940:	4638      	mov	r0, r7
 8014942:	f7ff ffa5 	bl	8014890 <_Bfree>
 8014946:	4644      	mov	r4, r8
 8014948:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801494c:	3501      	adds	r5, #1
 801494e:	615e      	str	r6, [r3, #20]
 8014950:	6125      	str	r5, [r4, #16]
 8014952:	4620      	mov	r0, r4
 8014954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014958:	080160d8 	.word	0x080160d8
 801495c:	08016164 	.word	0x08016164

08014960 <__s2b>:
 8014960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014964:	460c      	mov	r4, r1
 8014966:	4615      	mov	r5, r2
 8014968:	461f      	mov	r7, r3
 801496a:	2209      	movs	r2, #9
 801496c:	3308      	adds	r3, #8
 801496e:	4606      	mov	r6, r0
 8014970:	fb93 f3f2 	sdiv	r3, r3, r2
 8014974:	2100      	movs	r1, #0
 8014976:	2201      	movs	r2, #1
 8014978:	429a      	cmp	r2, r3
 801497a:	db09      	blt.n	8014990 <__s2b+0x30>
 801497c:	4630      	mov	r0, r6
 801497e:	f7ff ff47 	bl	8014810 <_Balloc>
 8014982:	b940      	cbnz	r0, 8014996 <__s2b+0x36>
 8014984:	4602      	mov	r2, r0
 8014986:	4b19      	ldr	r3, [pc, #100]	; (80149ec <__s2b+0x8c>)
 8014988:	4819      	ldr	r0, [pc, #100]	; (80149f0 <__s2b+0x90>)
 801498a:	21ce      	movs	r1, #206	; 0xce
 801498c:	f000 fdfe 	bl	801558c <__assert_func>
 8014990:	0052      	lsls	r2, r2, #1
 8014992:	3101      	adds	r1, #1
 8014994:	e7f0      	b.n	8014978 <__s2b+0x18>
 8014996:	9b08      	ldr	r3, [sp, #32]
 8014998:	6143      	str	r3, [r0, #20]
 801499a:	2d09      	cmp	r5, #9
 801499c:	f04f 0301 	mov.w	r3, #1
 80149a0:	6103      	str	r3, [r0, #16]
 80149a2:	dd16      	ble.n	80149d2 <__s2b+0x72>
 80149a4:	f104 0909 	add.w	r9, r4, #9
 80149a8:	46c8      	mov	r8, r9
 80149aa:	442c      	add	r4, r5
 80149ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80149b0:	4601      	mov	r1, r0
 80149b2:	3b30      	subs	r3, #48	; 0x30
 80149b4:	220a      	movs	r2, #10
 80149b6:	4630      	mov	r0, r6
 80149b8:	f7ff ff8c 	bl	80148d4 <__multadd>
 80149bc:	45a0      	cmp	r8, r4
 80149be:	d1f5      	bne.n	80149ac <__s2b+0x4c>
 80149c0:	f1a5 0408 	sub.w	r4, r5, #8
 80149c4:	444c      	add	r4, r9
 80149c6:	1b2d      	subs	r5, r5, r4
 80149c8:	1963      	adds	r3, r4, r5
 80149ca:	42bb      	cmp	r3, r7
 80149cc:	db04      	blt.n	80149d8 <__s2b+0x78>
 80149ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149d2:	340a      	adds	r4, #10
 80149d4:	2509      	movs	r5, #9
 80149d6:	e7f6      	b.n	80149c6 <__s2b+0x66>
 80149d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80149dc:	4601      	mov	r1, r0
 80149de:	3b30      	subs	r3, #48	; 0x30
 80149e0:	220a      	movs	r2, #10
 80149e2:	4630      	mov	r0, r6
 80149e4:	f7ff ff76 	bl	80148d4 <__multadd>
 80149e8:	e7ee      	b.n	80149c8 <__s2b+0x68>
 80149ea:	bf00      	nop
 80149ec:	080160d8 	.word	0x080160d8
 80149f0:	08016164 	.word	0x08016164

080149f4 <__hi0bits>:
 80149f4:	0c03      	lsrs	r3, r0, #16
 80149f6:	041b      	lsls	r3, r3, #16
 80149f8:	b9d3      	cbnz	r3, 8014a30 <__hi0bits+0x3c>
 80149fa:	0400      	lsls	r0, r0, #16
 80149fc:	2310      	movs	r3, #16
 80149fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014a02:	bf04      	itt	eq
 8014a04:	0200      	lsleq	r0, r0, #8
 8014a06:	3308      	addeq	r3, #8
 8014a08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014a0c:	bf04      	itt	eq
 8014a0e:	0100      	lsleq	r0, r0, #4
 8014a10:	3304      	addeq	r3, #4
 8014a12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014a16:	bf04      	itt	eq
 8014a18:	0080      	lsleq	r0, r0, #2
 8014a1a:	3302      	addeq	r3, #2
 8014a1c:	2800      	cmp	r0, #0
 8014a1e:	db05      	blt.n	8014a2c <__hi0bits+0x38>
 8014a20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014a24:	f103 0301 	add.w	r3, r3, #1
 8014a28:	bf08      	it	eq
 8014a2a:	2320      	moveq	r3, #32
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	4770      	bx	lr
 8014a30:	2300      	movs	r3, #0
 8014a32:	e7e4      	b.n	80149fe <__hi0bits+0xa>

08014a34 <__lo0bits>:
 8014a34:	6803      	ldr	r3, [r0, #0]
 8014a36:	f013 0207 	ands.w	r2, r3, #7
 8014a3a:	4601      	mov	r1, r0
 8014a3c:	d00b      	beq.n	8014a56 <__lo0bits+0x22>
 8014a3e:	07da      	lsls	r2, r3, #31
 8014a40:	d423      	bmi.n	8014a8a <__lo0bits+0x56>
 8014a42:	0798      	lsls	r0, r3, #30
 8014a44:	bf49      	itett	mi
 8014a46:	085b      	lsrmi	r3, r3, #1
 8014a48:	089b      	lsrpl	r3, r3, #2
 8014a4a:	2001      	movmi	r0, #1
 8014a4c:	600b      	strmi	r3, [r1, #0]
 8014a4e:	bf5c      	itt	pl
 8014a50:	600b      	strpl	r3, [r1, #0]
 8014a52:	2002      	movpl	r0, #2
 8014a54:	4770      	bx	lr
 8014a56:	b298      	uxth	r0, r3
 8014a58:	b9a8      	cbnz	r0, 8014a86 <__lo0bits+0x52>
 8014a5a:	0c1b      	lsrs	r3, r3, #16
 8014a5c:	2010      	movs	r0, #16
 8014a5e:	b2da      	uxtb	r2, r3
 8014a60:	b90a      	cbnz	r2, 8014a66 <__lo0bits+0x32>
 8014a62:	3008      	adds	r0, #8
 8014a64:	0a1b      	lsrs	r3, r3, #8
 8014a66:	071a      	lsls	r2, r3, #28
 8014a68:	bf04      	itt	eq
 8014a6a:	091b      	lsreq	r3, r3, #4
 8014a6c:	3004      	addeq	r0, #4
 8014a6e:	079a      	lsls	r2, r3, #30
 8014a70:	bf04      	itt	eq
 8014a72:	089b      	lsreq	r3, r3, #2
 8014a74:	3002      	addeq	r0, #2
 8014a76:	07da      	lsls	r2, r3, #31
 8014a78:	d403      	bmi.n	8014a82 <__lo0bits+0x4e>
 8014a7a:	085b      	lsrs	r3, r3, #1
 8014a7c:	f100 0001 	add.w	r0, r0, #1
 8014a80:	d005      	beq.n	8014a8e <__lo0bits+0x5a>
 8014a82:	600b      	str	r3, [r1, #0]
 8014a84:	4770      	bx	lr
 8014a86:	4610      	mov	r0, r2
 8014a88:	e7e9      	b.n	8014a5e <__lo0bits+0x2a>
 8014a8a:	2000      	movs	r0, #0
 8014a8c:	4770      	bx	lr
 8014a8e:	2020      	movs	r0, #32
 8014a90:	4770      	bx	lr
	...

08014a94 <__i2b>:
 8014a94:	b510      	push	{r4, lr}
 8014a96:	460c      	mov	r4, r1
 8014a98:	2101      	movs	r1, #1
 8014a9a:	f7ff feb9 	bl	8014810 <_Balloc>
 8014a9e:	4602      	mov	r2, r0
 8014aa0:	b928      	cbnz	r0, 8014aae <__i2b+0x1a>
 8014aa2:	4b05      	ldr	r3, [pc, #20]	; (8014ab8 <__i2b+0x24>)
 8014aa4:	4805      	ldr	r0, [pc, #20]	; (8014abc <__i2b+0x28>)
 8014aa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014aaa:	f000 fd6f 	bl	801558c <__assert_func>
 8014aae:	2301      	movs	r3, #1
 8014ab0:	6144      	str	r4, [r0, #20]
 8014ab2:	6103      	str	r3, [r0, #16]
 8014ab4:	bd10      	pop	{r4, pc}
 8014ab6:	bf00      	nop
 8014ab8:	080160d8 	.word	0x080160d8
 8014abc:	08016164 	.word	0x08016164

08014ac0 <__multiply>:
 8014ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac4:	4691      	mov	r9, r2
 8014ac6:	690a      	ldr	r2, [r1, #16]
 8014ac8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014acc:	429a      	cmp	r2, r3
 8014ace:	bfb8      	it	lt
 8014ad0:	460b      	movlt	r3, r1
 8014ad2:	460c      	mov	r4, r1
 8014ad4:	bfbc      	itt	lt
 8014ad6:	464c      	movlt	r4, r9
 8014ad8:	4699      	movlt	r9, r3
 8014ada:	6927      	ldr	r7, [r4, #16]
 8014adc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014ae0:	68a3      	ldr	r3, [r4, #8]
 8014ae2:	6861      	ldr	r1, [r4, #4]
 8014ae4:	eb07 060a 	add.w	r6, r7, sl
 8014ae8:	42b3      	cmp	r3, r6
 8014aea:	b085      	sub	sp, #20
 8014aec:	bfb8      	it	lt
 8014aee:	3101      	addlt	r1, #1
 8014af0:	f7ff fe8e 	bl	8014810 <_Balloc>
 8014af4:	b930      	cbnz	r0, 8014b04 <__multiply+0x44>
 8014af6:	4602      	mov	r2, r0
 8014af8:	4b44      	ldr	r3, [pc, #272]	; (8014c0c <__multiply+0x14c>)
 8014afa:	4845      	ldr	r0, [pc, #276]	; (8014c10 <__multiply+0x150>)
 8014afc:	f240 115d 	movw	r1, #349	; 0x15d
 8014b00:	f000 fd44 	bl	801558c <__assert_func>
 8014b04:	f100 0514 	add.w	r5, r0, #20
 8014b08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014b0c:	462b      	mov	r3, r5
 8014b0e:	2200      	movs	r2, #0
 8014b10:	4543      	cmp	r3, r8
 8014b12:	d321      	bcc.n	8014b58 <__multiply+0x98>
 8014b14:	f104 0314 	add.w	r3, r4, #20
 8014b18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014b1c:	f109 0314 	add.w	r3, r9, #20
 8014b20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014b24:	9202      	str	r2, [sp, #8]
 8014b26:	1b3a      	subs	r2, r7, r4
 8014b28:	3a15      	subs	r2, #21
 8014b2a:	f022 0203 	bic.w	r2, r2, #3
 8014b2e:	3204      	adds	r2, #4
 8014b30:	f104 0115 	add.w	r1, r4, #21
 8014b34:	428f      	cmp	r7, r1
 8014b36:	bf38      	it	cc
 8014b38:	2204      	movcc	r2, #4
 8014b3a:	9201      	str	r2, [sp, #4]
 8014b3c:	9a02      	ldr	r2, [sp, #8]
 8014b3e:	9303      	str	r3, [sp, #12]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d80c      	bhi.n	8014b5e <__multiply+0x9e>
 8014b44:	2e00      	cmp	r6, #0
 8014b46:	dd03      	ble.n	8014b50 <__multiply+0x90>
 8014b48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d05a      	beq.n	8014c06 <__multiply+0x146>
 8014b50:	6106      	str	r6, [r0, #16]
 8014b52:	b005      	add	sp, #20
 8014b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b58:	f843 2b04 	str.w	r2, [r3], #4
 8014b5c:	e7d8      	b.n	8014b10 <__multiply+0x50>
 8014b5e:	f8b3 a000 	ldrh.w	sl, [r3]
 8014b62:	f1ba 0f00 	cmp.w	sl, #0
 8014b66:	d024      	beq.n	8014bb2 <__multiply+0xf2>
 8014b68:	f104 0e14 	add.w	lr, r4, #20
 8014b6c:	46a9      	mov	r9, r5
 8014b6e:	f04f 0c00 	mov.w	ip, #0
 8014b72:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014b76:	f8d9 1000 	ldr.w	r1, [r9]
 8014b7a:	fa1f fb82 	uxth.w	fp, r2
 8014b7e:	b289      	uxth	r1, r1
 8014b80:	fb0a 110b 	mla	r1, sl, fp, r1
 8014b84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014b88:	f8d9 2000 	ldr.w	r2, [r9]
 8014b8c:	4461      	add	r1, ip
 8014b8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014b92:	fb0a c20b 	mla	r2, sl, fp, ip
 8014b96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014b9a:	b289      	uxth	r1, r1
 8014b9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014ba0:	4577      	cmp	r7, lr
 8014ba2:	f849 1b04 	str.w	r1, [r9], #4
 8014ba6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014baa:	d8e2      	bhi.n	8014b72 <__multiply+0xb2>
 8014bac:	9a01      	ldr	r2, [sp, #4]
 8014bae:	f845 c002 	str.w	ip, [r5, r2]
 8014bb2:	9a03      	ldr	r2, [sp, #12]
 8014bb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014bb8:	3304      	adds	r3, #4
 8014bba:	f1b9 0f00 	cmp.w	r9, #0
 8014bbe:	d020      	beq.n	8014c02 <__multiply+0x142>
 8014bc0:	6829      	ldr	r1, [r5, #0]
 8014bc2:	f104 0c14 	add.w	ip, r4, #20
 8014bc6:	46ae      	mov	lr, r5
 8014bc8:	f04f 0a00 	mov.w	sl, #0
 8014bcc:	f8bc b000 	ldrh.w	fp, [ip]
 8014bd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014bd4:	fb09 220b 	mla	r2, r9, fp, r2
 8014bd8:	4492      	add	sl, r2
 8014bda:	b289      	uxth	r1, r1
 8014bdc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014be0:	f84e 1b04 	str.w	r1, [lr], #4
 8014be4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014be8:	f8be 1000 	ldrh.w	r1, [lr]
 8014bec:	0c12      	lsrs	r2, r2, #16
 8014bee:	fb09 1102 	mla	r1, r9, r2, r1
 8014bf2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014bf6:	4567      	cmp	r7, ip
 8014bf8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014bfc:	d8e6      	bhi.n	8014bcc <__multiply+0x10c>
 8014bfe:	9a01      	ldr	r2, [sp, #4]
 8014c00:	50a9      	str	r1, [r5, r2]
 8014c02:	3504      	adds	r5, #4
 8014c04:	e79a      	b.n	8014b3c <__multiply+0x7c>
 8014c06:	3e01      	subs	r6, #1
 8014c08:	e79c      	b.n	8014b44 <__multiply+0x84>
 8014c0a:	bf00      	nop
 8014c0c:	080160d8 	.word	0x080160d8
 8014c10:	08016164 	.word	0x08016164

08014c14 <__pow5mult>:
 8014c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c18:	4615      	mov	r5, r2
 8014c1a:	f012 0203 	ands.w	r2, r2, #3
 8014c1e:	4606      	mov	r6, r0
 8014c20:	460f      	mov	r7, r1
 8014c22:	d007      	beq.n	8014c34 <__pow5mult+0x20>
 8014c24:	4c25      	ldr	r4, [pc, #148]	; (8014cbc <__pow5mult+0xa8>)
 8014c26:	3a01      	subs	r2, #1
 8014c28:	2300      	movs	r3, #0
 8014c2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c2e:	f7ff fe51 	bl	80148d4 <__multadd>
 8014c32:	4607      	mov	r7, r0
 8014c34:	10ad      	asrs	r5, r5, #2
 8014c36:	d03d      	beq.n	8014cb4 <__pow5mult+0xa0>
 8014c38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014c3a:	b97c      	cbnz	r4, 8014c5c <__pow5mult+0x48>
 8014c3c:	2010      	movs	r0, #16
 8014c3e:	f7ff fdc1 	bl	80147c4 <malloc>
 8014c42:	4602      	mov	r2, r0
 8014c44:	6270      	str	r0, [r6, #36]	; 0x24
 8014c46:	b928      	cbnz	r0, 8014c54 <__pow5mult+0x40>
 8014c48:	4b1d      	ldr	r3, [pc, #116]	; (8014cc0 <__pow5mult+0xac>)
 8014c4a:	481e      	ldr	r0, [pc, #120]	; (8014cc4 <__pow5mult+0xb0>)
 8014c4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014c50:	f000 fc9c 	bl	801558c <__assert_func>
 8014c54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c58:	6004      	str	r4, [r0, #0]
 8014c5a:	60c4      	str	r4, [r0, #12]
 8014c5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014c60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014c64:	b94c      	cbnz	r4, 8014c7a <__pow5mult+0x66>
 8014c66:	f240 2171 	movw	r1, #625	; 0x271
 8014c6a:	4630      	mov	r0, r6
 8014c6c:	f7ff ff12 	bl	8014a94 <__i2b>
 8014c70:	2300      	movs	r3, #0
 8014c72:	f8c8 0008 	str.w	r0, [r8, #8]
 8014c76:	4604      	mov	r4, r0
 8014c78:	6003      	str	r3, [r0, #0]
 8014c7a:	f04f 0900 	mov.w	r9, #0
 8014c7e:	07eb      	lsls	r3, r5, #31
 8014c80:	d50a      	bpl.n	8014c98 <__pow5mult+0x84>
 8014c82:	4639      	mov	r1, r7
 8014c84:	4622      	mov	r2, r4
 8014c86:	4630      	mov	r0, r6
 8014c88:	f7ff ff1a 	bl	8014ac0 <__multiply>
 8014c8c:	4639      	mov	r1, r7
 8014c8e:	4680      	mov	r8, r0
 8014c90:	4630      	mov	r0, r6
 8014c92:	f7ff fdfd 	bl	8014890 <_Bfree>
 8014c96:	4647      	mov	r7, r8
 8014c98:	106d      	asrs	r5, r5, #1
 8014c9a:	d00b      	beq.n	8014cb4 <__pow5mult+0xa0>
 8014c9c:	6820      	ldr	r0, [r4, #0]
 8014c9e:	b938      	cbnz	r0, 8014cb0 <__pow5mult+0x9c>
 8014ca0:	4622      	mov	r2, r4
 8014ca2:	4621      	mov	r1, r4
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	f7ff ff0b 	bl	8014ac0 <__multiply>
 8014caa:	6020      	str	r0, [r4, #0]
 8014cac:	f8c0 9000 	str.w	r9, [r0]
 8014cb0:	4604      	mov	r4, r0
 8014cb2:	e7e4      	b.n	8014c7e <__pow5mult+0x6a>
 8014cb4:	4638      	mov	r0, r7
 8014cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cba:	bf00      	nop
 8014cbc:	080162b0 	.word	0x080162b0
 8014cc0:	08016066 	.word	0x08016066
 8014cc4:	08016164 	.word	0x08016164

08014cc8 <__lshift>:
 8014cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ccc:	460c      	mov	r4, r1
 8014cce:	6849      	ldr	r1, [r1, #4]
 8014cd0:	6923      	ldr	r3, [r4, #16]
 8014cd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014cd6:	68a3      	ldr	r3, [r4, #8]
 8014cd8:	4607      	mov	r7, r0
 8014cda:	4691      	mov	r9, r2
 8014cdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014ce0:	f108 0601 	add.w	r6, r8, #1
 8014ce4:	42b3      	cmp	r3, r6
 8014ce6:	db0b      	blt.n	8014d00 <__lshift+0x38>
 8014ce8:	4638      	mov	r0, r7
 8014cea:	f7ff fd91 	bl	8014810 <_Balloc>
 8014cee:	4605      	mov	r5, r0
 8014cf0:	b948      	cbnz	r0, 8014d06 <__lshift+0x3e>
 8014cf2:	4602      	mov	r2, r0
 8014cf4:	4b2a      	ldr	r3, [pc, #168]	; (8014da0 <__lshift+0xd8>)
 8014cf6:	482b      	ldr	r0, [pc, #172]	; (8014da4 <__lshift+0xdc>)
 8014cf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014cfc:	f000 fc46 	bl	801558c <__assert_func>
 8014d00:	3101      	adds	r1, #1
 8014d02:	005b      	lsls	r3, r3, #1
 8014d04:	e7ee      	b.n	8014ce4 <__lshift+0x1c>
 8014d06:	2300      	movs	r3, #0
 8014d08:	f100 0114 	add.w	r1, r0, #20
 8014d0c:	f100 0210 	add.w	r2, r0, #16
 8014d10:	4618      	mov	r0, r3
 8014d12:	4553      	cmp	r3, sl
 8014d14:	db37      	blt.n	8014d86 <__lshift+0xbe>
 8014d16:	6920      	ldr	r0, [r4, #16]
 8014d18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d1c:	f104 0314 	add.w	r3, r4, #20
 8014d20:	f019 091f 	ands.w	r9, r9, #31
 8014d24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014d2c:	d02f      	beq.n	8014d8e <__lshift+0xc6>
 8014d2e:	f1c9 0e20 	rsb	lr, r9, #32
 8014d32:	468a      	mov	sl, r1
 8014d34:	f04f 0c00 	mov.w	ip, #0
 8014d38:	681a      	ldr	r2, [r3, #0]
 8014d3a:	fa02 f209 	lsl.w	r2, r2, r9
 8014d3e:	ea42 020c 	orr.w	r2, r2, ip
 8014d42:	f84a 2b04 	str.w	r2, [sl], #4
 8014d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d4a:	4298      	cmp	r0, r3
 8014d4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014d50:	d8f2      	bhi.n	8014d38 <__lshift+0x70>
 8014d52:	1b03      	subs	r3, r0, r4
 8014d54:	3b15      	subs	r3, #21
 8014d56:	f023 0303 	bic.w	r3, r3, #3
 8014d5a:	3304      	adds	r3, #4
 8014d5c:	f104 0215 	add.w	r2, r4, #21
 8014d60:	4290      	cmp	r0, r2
 8014d62:	bf38      	it	cc
 8014d64:	2304      	movcc	r3, #4
 8014d66:	f841 c003 	str.w	ip, [r1, r3]
 8014d6a:	f1bc 0f00 	cmp.w	ip, #0
 8014d6e:	d001      	beq.n	8014d74 <__lshift+0xac>
 8014d70:	f108 0602 	add.w	r6, r8, #2
 8014d74:	3e01      	subs	r6, #1
 8014d76:	4638      	mov	r0, r7
 8014d78:	612e      	str	r6, [r5, #16]
 8014d7a:	4621      	mov	r1, r4
 8014d7c:	f7ff fd88 	bl	8014890 <_Bfree>
 8014d80:	4628      	mov	r0, r5
 8014d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d86:	f842 0f04 	str.w	r0, [r2, #4]!
 8014d8a:	3301      	adds	r3, #1
 8014d8c:	e7c1      	b.n	8014d12 <__lshift+0x4a>
 8014d8e:	3904      	subs	r1, #4
 8014d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d94:	f841 2f04 	str.w	r2, [r1, #4]!
 8014d98:	4298      	cmp	r0, r3
 8014d9a:	d8f9      	bhi.n	8014d90 <__lshift+0xc8>
 8014d9c:	e7ea      	b.n	8014d74 <__lshift+0xac>
 8014d9e:	bf00      	nop
 8014da0:	080160d8 	.word	0x080160d8
 8014da4:	08016164 	.word	0x08016164

08014da8 <__mcmp>:
 8014da8:	b530      	push	{r4, r5, lr}
 8014daa:	6902      	ldr	r2, [r0, #16]
 8014dac:	690c      	ldr	r4, [r1, #16]
 8014dae:	1b12      	subs	r2, r2, r4
 8014db0:	d10e      	bne.n	8014dd0 <__mcmp+0x28>
 8014db2:	f100 0314 	add.w	r3, r0, #20
 8014db6:	3114      	adds	r1, #20
 8014db8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014dbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014dc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014dc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014dc8:	42a5      	cmp	r5, r4
 8014dca:	d003      	beq.n	8014dd4 <__mcmp+0x2c>
 8014dcc:	d305      	bcc.n	8014dda <__mcmp+0x32>
 8014dce:	2201      	movs	r2, #1
 8014dd0:	4610      	mov	r0, r2
 8014dd2:	bd30      	pop	{r4, r5, pc}
 8014dd4:	4283      	cmp	r3, r0
 8014dd6:	d3f3      	bcc.n	8014dc0 <__mcmp+0x18>
 8014dd8:	e7fa      	b.n	8014dd0 <__mcmp+0x28>
 8014dda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014dde:	e7f7      	b.n	8014dd0 <__mcmp+0x28>

08014de0 <__mdiff>:
 8014de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014de4:	460c      	mov	r4, r1
 8014de6:	4606      	mov	r6, r0
 8014de8:	4611      	mov	r1, r2
 8014dea:	4620      	mov	r0, r4
 8014dec:	4690      	mov	r8, r2
 8014dee:	f7ff ffdb 	bl	8014da8 <__mcmp>
 8014df2:	1e05      	subs	r5, r0, #0
 8014df4:	d110      	bne.n	8014e18 <__mdiff+0x38>
 8014df6:	4629      	mov	r1, r5
 8014df8:	4630      	mov	r0, r6
 8014dfa:	f7ff fd09 	bl	8014810 <_Balloc>
 8014dfe:	b930      	cbnz	r0, 8014e0e <__mdiff+0x2e>
 8014e00:	4b3a      	ldr	r3, [pc, #232]	; (8014eec <__mdiff+0x10c>)
 8014e02:	4602      	mov	r2, r0
 8014e04:	f240 2132 	movw	r1, #562	; 0x232
 8014e08:	4839      	ldr	r0, [pc, #228]	; (8014ef0 <__mdiff+0x110>)
 8014e0a:	f000 fbbf 	bl	801558c <__assert_func>
 8014e0e:	2301      	movs	r3, #1
 8014e10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e18:	bfa4      	itt	ge
 8014e1a:	4643      	movge	r3, r8
 8014e1c:	46a0      	movge	r8, r4
 8014e1e:	4630      	mov	r0, r6
 8014e20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014e24:	bfa6      	itte	ge
 8014e26:	461c      	movge	r4, r3
 8014e28:	2500      	movge	r5, #0
 8014e2a:	2501      	movlt	r5, #1
 8014e2c:	f7ff fcf0 	bl	8014810 <_Balloc>
 8014e30:	b920      	cbnz	r0, 8014e3c <__mdiff+0x5c>
 8014e32:	4b2e      	ldr	r3, [pc, #184]	; (8014eec <__mdiff+0x10c>)
 8014e34:	4602      	mov	r2, r0
 8014e36:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014e3a:	e7e5      	b.n	8014e08 <__mdiff+0x28>
 8014e3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014e40:	6926      	ldr	r6, [r4, #16]
 8014e42:	60c5      	str	r5, [r0, #12]
 8014e44:	f104 0914 	add.w	r9, r4, #20
 8014e48:	f108 0514 	add.w	r5, r8, #20
 8014e4c:	f100 0e14 	add.w	lr, r0, #20
 8014e50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014e54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014e58:	f108 0210 	add.w	r2, r8, #16
 8014e5c:	46f2      	mov	sl, lr
 8014e5e:	2100      	movs	r1, #0
 8014e60:	f859 3b04 	ldr.w	r3, [r9], #4
 8014e64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014e68:	fa1f f883 	uxth.w	r8, r3
 8014e6c:	fa11 f18b 	uxtah	r1, r1, fp
 8014e70:	0c1b      	lsrs	r3, r3, #16
 8014e72:	eba1 0808 	sub.w	r8, r1, r8
 8014e76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014e7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014e7e:	fa1f f888 	uxth.w	r8, r8
 8014e82:	1419      	asrs	r1, r3, #16
 8014e84:	454e      	cmp	r6, r9
 8014e86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014e8a:	f84a 3b04 	str.w	r3, [sl], #4
 8014e8e:	d8e7      	bhi.n	8014e60 <__mdiff+0x80>
 8014e90:	1b33      	subs	r3, r6, r4
 8014e92:	3b15      	subs	r3, #21
 8014e94:	f023 0303 	bic.w	r3, r3, #3
 8014e98:	3304      	adds	r3, #4
 8014e9a:	3415      	adds	r4, #21
 8014e9c:	42a6      	cmp	r6, r4
 8014e9e:	bf38      	it	cc
 8014ea0:	2304      	movcc	r3, #4
 8014ea2:	441d      	add	r5, r3
 8014ea4:	4473      	add	r3, lr
 8014ea6:	469e      	mov	lr, r3
 8014ea8:	462e      	mov	r6, r5
 8014eaa:	4566      	cmp	r6, ip
 8014eac:	d30e      	bcc.n	8014ecc <__mdiff+0xec>
 8014eae:	f10c 0203 	add.w	r2, ip, #3
 8014eb2:	1b52      	subs	r2, r2, r5
 8014eb4:	f022 0203 	bic.w	r2, r2, #3
 8014eb8:	3d03      	subs	r5, #3
 8014eba:	45ac      	cmp	ip, r5
 8014ebc:	bf38      	it	cc
 8014ebe:	2200      	movcc	r2, #0
 8014ec0:	441a      	add	r2, r3
 8014ec2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014ec6:	b17b      	cbz	r3, 8014ee8 <__mdiff+0x108>
 8014ec8:	6107      	str	r7, [r0, #16]
 8014eca:	e7a3      	b.n	8014e14 <__mdiff+0x34>
 8014ecc:	f856 8b04 	ldr.w	r8, [r6], #4
 8014ed0:	fa11 f288 	uxtah	r2, r1, r8
 8014ed4:	1414      	asrs	r4, r2, #16
 8014ed6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014eda:	b292      	uxth	r2, r2
 8014edc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014ee0:	f84e 2b04 	str.w	r2, [lr], #4
 8014ee4:	1421      	asrs	r1, r4, #16
 8014ee6:	e7e0      	b.n	8014eaa <__mdiff+0xca>
 8014ee8:	3f01      	subs	r7, #1
 8014eea:	e7ea      	b.n	8014ec2 <__mdiff+0xe2>
 8014eec:	080160d8 	.word	0x080160d8
 8014ef0:	08016164 	.word	0x08016164

08014ef4 <__ulp>:
 8014ef4:	b082      	sub	sp, #8
 8014ef6:	ed8d 0b00 	vstr	d0, [sp]
 8014efa:	9b01      	ldr	r3, [sp, #4]
 8014efc:	4912      	ldr	r1, [pc, #72]	; (8014f48 <__ulp+0x54>)
 8014efe:	4019      	ands	r1, r3
 8014f00:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8014f04:	2900      	cmp	r1, #0
 8014f06:	dd05      	ble.n	8014f14 <__ulp+0x20>
 8014f08:	2200      	movs	r2, #0
 8014f0a:	460b      	mov	r3, r1
 8014f0c:	ec43 2b10 	vmov	d0, r2, r3
 8014f10:	b002      	add	sp, #8
 8014f12:	4770      	bx	lr
 8014f14:	4249      	negs	r1, r1
 8014f16:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8014f1a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8014f1e:	f04f 0200 	mov.w	r2, #0
 8014f22:	f04f 0300 	mov.w	r3, #0
 8014f26:	da04      	bge.n	8014f32 <__ulp+0x3e>
 8014f28:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014f2c:	fa41 f300 	asr.w	r3, r1, r0
 8014f30:	e7ec      	b.n	8014f0c <__ulp+0x18>
 8014f32:	f1a0 0114 	sub.w	r1, r0, #20
 8014f36:	291e      	cmp	r1, #30
 8014f38:	bfda      	itte	le
 8014f3a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8014f3e:	fa20 f101 	lsrle.w	r1, r0, r1
 8014f42:	2101      	movgt	r1, #1
 8014f44:	460a      	mov	r2, r1
 8014f46:	e7e1      	b.n	8014f0c <__ulp+0x18>
 8014f48:	7ff00000 	.word	0x7ff00000

08014f4c <__b2d>:
 8014f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f4e:	6905      	ldr	r5, [r0, #16]
 8014f50:	f100 0714 	add.w	r7, r0, #20
 8014f54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014f58:	1f2e      	subs	r6, r5, #4
 8014f5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014f5e:	4620      	mov	r0, r4
 8014f60:	f7ff fd48 	bl	80149f4 <__hi0bits>
 8014f64:	f1c0 0320 	rsb	r3, r0, #32
 8014f68:	280a      	cmp	r0, #10
 8014f6a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014fe8 <__b2d+0x9c>
 8014f6e:	600b      	str	r3, [r1, #0]
 8014f70:	dc14      	bgt.n	8014f9c <__b2d+0x50>
 8014f72:	f1c0 0e0b 	rsb	lr, r0, #11
 8014f76:	fa24 f10e 	lsr.w	r1, r4, lr
 8014f7a:	42b7      	cmp	r7, r6
 8014f7c:	ea41 030c 	orr.w	r3, r1, ip
 8014f80:	bf34      	ite	cc
 8014f82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014f86:	2100      	movcs	r1, #0
 8014f88:	3015      	adds	r0, #21
 8014f8a:	fa04 f000 	lsl.w	r0, r4, r0
 8014f8e:	fa21 f10e 	lsr.w	r1, r1, lr
 8014f92:	ea40 0201 	orr.w	r2, r0, r1
 8014f96:	ec43 2b10 	vmov	d0, r2, r3
 8014f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f9c:	42b7      	cmp	r7, r6
 8014f9e:	bf3a      	itte	cc
 8014fa0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014fa4:	f1a5 0608 	subcc.w	r6, r5, #8
 8014fa8:	2100      	movcs	r1, #0
 8014faa:	380b      	subs	r0, #11
 8014fac:	d017      	beq.n	8014fde <__b2d+0x92>
 8014fae:	f1c0 0c20 	rsb	ip, r0, #32
 8014fb2:	fa04 f500 	lsl.w	r5, r4, r0
 8014fb6:	42be      	cmp	r6, r7
 8014fb8:	fa21 f40c 	lsr.w	r4, r1, ip
 8014fbc:	ea45 0504 	orr.w	r5, r5, r4
 8014fc0:	bf8c      	ite	hi
 8014fc2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014fc6:	2400      	movls	r4, #0
 8014fc8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8014fcc:	fa01 f000 	lsl.w	r0, r1, r0
 8014fd0:	fa24 f40c 	lsr.w	r4, r4, ip
 8014fd4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014fd8:	ea40 0204 	orr.w	r2, r0, r4
 8014fdc:	e7db      	b.n	8014f96 <__b2d+0x4a>
 8014fde:	ea44 030c 	orr.w	r3, r4, ip
 8014fe2:	460a      	mov	r2, r1
 8014fe4:	e7d7      	b.n	8014f96 <__b2d+0x4a>
 8014fe6:	bf00      	nop
 8014fe8:	3ff00000 	.word	0x3ff00000

08014fec <__d2b>:
 8014fec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014ff0:	4689      	mov	r9, r1
 8014ff2:	2101      	movs	r1, #1
 8014ff4:	ec57 6b10 	vmov	r6, r7, d0
 8014ff8:	4690      	mov	r8, r2
 8014ffa:	f7ff fc09 	bl	8014810 <_Balloc>
 8014ffe:	4604      	mov	r4, r0
 8015000:	b930      	cbnz	r0, 8015010 <__d2b+0x24>
 8015002:	4602      	mov	r2, r0
 8015004:	4b25      	ldr	r3, [pc, #148]	; (801509c <__d2b+0xb0>)
 8015006:	4826      	ldr	r0, [pc, #152]	; (80150a0 <__d2b+0xb4>)
 8015008:	f240 310a 	movw	r1, #778	; 0x30a
 801500c:	f000 fabe 	bl	801558c <__assert_func>
 8015010:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015014:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015018:	bb35      	cbnz	r5, 8015068 <__d2b+0x7c>
 801501a:	2e00      	cmp	r6, #0
 801501c:	9301      	str	r3, [sp, #4]
 801501e:	d028      	beq.n	8015072 <__d2b+0x86>
 8015020:	4668      	mov	r0, sp
 8015022:	9600      	str	r6, [sp, #0]
 8015024:	f7ff fd06 	bl	8014a34 <__lo0bits>
 8015028:	9900      	ldr	r1, [sp, #0]
 801502a:	b300      	cbz	r0, 801506e <__d2b+0x82>
 801502c:	9a01      	ldr	r2, [sp, #4]
 801502e:	f1c0 0320 	rsb	r3, r0, #32
 8015032:	fa02 f303 	lsl.w	r3, r2, r3
 8015036:	430b      	orrs	r3, r1
 8015038:	40c2      	lsrs	r2, r0
 801503a:	6163      	str	r3, [r4, #20]
 801503c:	9201      	str	r2, [sp, #4]
 801503e:	9b01      	ldr	r3, [sp, #4]
 8015040:	61a3      	str	r3, [r4, #24]
 8015042:	2b00      	cmp	r3, #0
 8015044:	bf14      	ite	ne
 8015046:	2202      	movne	r2, #2
 8015048:	2201      	moveq	r2, #1
 801504a:	6122      	str	r2, [r4, #16]
 801504c:	b1d5      	cbz	r5, 8015084 <__d2b+0x98>
 801504e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015052:	4405      	add	r5, r0
 8015054:	f8c9 5000 	str.w	r5, [r9]
 8015058:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801505c:	f8c8 0000 	str.w	r0, [r8]
 8015060:	4620      	mov	r0, r4
 8015062:	b003      	add	sp, #12
 8015064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801506c:	e7d5      	b.n	801501a <__d2b+0x2e>
 801506e:	6161      	str	r1, [r4, #20]
 8015070:	e7e5      	b.n	801503e <__d2b+0x52>
 8015072:	a801      	add	r0, sp, #4
 8015074:	f7ff fcde 	bl	8014a34 <__lo0bits>
 8015078:	9b01      	ldr	r3, [sp, #4]
 801507a:	6163      	str	r3, [r4, #20]
 801507c:	2201      	movs	r2, #1
 801507e:	6122      	str	r2, [r4, #16]
 8015080:	3020      	adds	r0, #32
 8015082:	e7e3      	b.n	801504c <__d2b+0x60>
 8015084:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801508c:	f8c9 0000 	str.w	r0, [r9]
 8015090:	6918      	ldr	r0, [r3, #16]
 8015092:	f7ff fcaf 	bl	80149f4 <__hi0bits>
 8015096:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801509a:	e7df      	b.n	801505c <__d2b+0x70>
 801509c:	080160d8 	.word	0x080160d8
 80150a0:	08016164 	.word	0x08016164

080150a4 <__ratio>:
 80150a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150a8:	4688      	mov	r8, r1
 80150aa:	4669      	mov	r1, sp
 80150ac:	4681      	mov	r9, r0
 80150ae:	f7ff ff4d 	bl	8014f4c <__b2d>
 80150b2:	a901      	add	r1, sp, #4
 80150b4:	4640      	mov	r0, r8
 80150b6:	ec55 4b10 	vmov	r4, r5, d0
 80150ba:	f7ff ff47 	bl	8014f4c <__b2d>
 80150be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80150c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80150c6:	eba3 0c02 	sub.w	ip, r3, r2
 80150ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 80150ce:	1a9b      	subs	r3, r3, r2
 80150d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80150d4:	ec51 0b10 	vmov	r0, r1, d0
 80150d8:	2b00      	cmp	r3, #0
 80150da:	bfd6      	itet	le
 80150dc:	460a      	movle	r2, r1
 80150de:	462a      	movgt	r2, r5
 80150e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80150e4:	468b      	mov	fp, r1
 80150e6:	462f      	mov	r7, r5
 80150e8:	bfd4      	ite	le
 80150ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80150ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80150f2:	4620      	mov	r0, r4
 80150f4:	ee10 2a10 	vmov	r2, s0
 80150f8:	465b      	mov	r3, fp
 80150fa:	4639      	mov	r1, r7
 80150fc:	f7eb fbbe 	bl	800087c <__aeabi_ddiv>
 8015100:	ec41 0b10 	vmov	d0, r0, r1
 8015104:	b003      	add	sp, #12
 8015106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801510a <__copybits>:
 801510a:	3901      	subs	r1, #1
 801510c:	b570      	push	{r4, r5, r6, lr}
 801510e:	1149      	asrs	r1, r1, #5
 8015110:	6914      	ldr	r4, [r2, #16]
 8015112:	3101      	adds	r1, #1
 8015114:	f102 0314 	add.w	r3, r2, #20
 8015118:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801511c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015120:	1f05      	subs	r5, r0, #4
 8015122:	42a3      	cmp	r3, r4
 8015124:	d30c      	bcc.n	8015140 <__copybits+0x36>
 8015126:	1aa3      	subs	r3, r4, r2
 8015128:	3b11      	subs	r3, #17
 801512a:	f023 0303 	bic.w	r3, r3, #3
 801512e:	3211      	adds	r2, #17
 8015130:	42a2      	cmp	r2, r4
 8015132:	bf88      	it	hi
 8015134:	2300      	movhi	r3, #0
 8015136:	4418      	add	r0, r3
 8015138:	2300      	movs	r3, #0
 801513a:	4288      	cmp	r0, r1
 801513c:	d305      	bcc.n	801514a <__copybits+0x40>
 801513e:	bd70      	pop	{r4, r5, r6, pc}
 8015140:	f853 6b04 	ldr.w	r6, [r3], #4
 8015144:	f845 6f04 	str.w	r6, [r5, #4]!
 8015148:	e7eb      	b.n	8015122 <__copybits+0x18>
 801514a:	f840 3b04 	str.w	r3, [r0], #4
 801514e:	e7f4      	b.n	801513a <__copybits+0x30>

08015150 <__any_on>:
 8015150:	f100 0214 	add.w	r2, r0, #20
 8015154:	6900      	ldr	r0, [r0, #16]
 8015156:	114b      	asrs	r3, r1, #5
 8015158:	4298      	cmp	r0, r3
 801515a:	b510      	push	{r4, lr}
 801515c:	db11      	blt.n	8015182 <__any_on+0x32>
 801515e:	dd0a      	ble.n	8015176 <__any_on+0x26>
 8015160:	f011 011f 	ands.w	r1, r1, #31
 8015164:	d007      	beq.n	8015176 <__any_on+0x26>
 8015166:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801516a:	fa24 f001 	lsr.w	r0, r4, r1
 801516e:	fa00 f101 	lsl.w	r1, r0, r1
 8015172:	428c      	cmp	r4, r1
 8015174:	d10b      	bne.n	801518e <__any_on+0x3e>
 8015176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801517a:	4293      	cmp	r3, r2
 801517c:	d803      	bhi.n	8015186 <__any_on+0x36>
 801517e:	2000      	movs	r0, #0
 8015180:	bd10      	pop	{r4, pc}
 8015182:	4603      	mov	r3, r0
 8015184:	e7f7      	b.n	8015176 <__any_on+0x26>
 8015186:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801518a:	2900      	cmp	r1, #0
 801518c:	d0f5      	beq.n	801517a <__any_on+0x2a>
 801518e:	2001      	movs	r0, #1
 8015190:	e7f6      	b.n	8015180 <__any_on+0x30>

08015192 <_calloc_r>:
 8015192:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015194:	fba1 2402 	umull	r2, r4, r1, r2
 8015198:	b94c      	cbnz	r4, 80151ae <_calloc_r+0x1c>
 801519a:	4611      	mov	r1, r2
 801519c:	9201      	str	r2, [sp, #4]
 801519e:	f7fc f977 	bl	8011490 <_malloc_r>
 80151a2:	9a01      	ldr	r2, [sp, #4]
 80151a4:	4605      	mov	r5, r0
 80151a6:	b930      	cbnz	r0, 80151b6 <_calloc_r+0x24>
 80151a8:	4628      	mov	r0, r5
 80151aa:	b003      	add	sp, #12
 80151ac:	bd30      	pop	{r4, r5, pc}
 80151ae:	220c      	movs	r2, #12
 80151b0:	6002      	str	r2, [r0, #0]
 80151b2:	2500      	movs	r5, #0
 80151b4:	e7f8      	b.n	80151a8 <_calloc_r+0x16>
 80151b6:	4621      	mov	r1, r4
 80151b8:	f7fc f941 	bl	801143e <memset>
 80151bc:	e7f4      	b.n	80151a8 <_calloc_r+0x16>
	...

080151c0 <_free_r>:
 80151c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80151c2:	2900      	cmp	r1, #0
 80151c4:	d044      	beq.n	8015250 <_free_r+0x90>
 80151c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151ca:	9001      	str	r0, [sp, #4]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	f1a1 0404 	sub.w	r4, r1, #4
 80151d2:	bfb8      	it	lt
 80151d4:	18e4      	addlt	r4, r4, r3
 80151d6:	f7ff fb0f 	bl	80147f8 <__malloc_lock>
 80151da:	4a1e      	ldr	r2, [pc, #120]	; (8015254 <_free_r+0x94>)
 80151dc:	9801      	ldr	r0, [sp, #4]
 80151de:	6813      	ldr	r3, [r2, #0]
 80151e0:	b933      	cbnz	r3, 80151f0 <_free_r+0x30>
 80151e2:	6063      	str	r3, [r4, #4]
 80151e4:	6014      	str	r4, [r2, #0]
 80151e6:	b003      	add	sp, #12
 80151e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80151ec:	f7ff bb0a 	b.w	8014804 <__malloc_unlock>
 80151f0:	42a3      	cmp	r3, r4
 80151f2:	d908      	bls.n	8015206 <_free_r+0x46>
 80151f4:	6825      	ldr	r5, [r4, #0]
 80151f6:	1961      	adds	r1, r4, r5
 80151f8:	428b      	cmp	r3, r1
 80151fa:	bf01      	itttt	eq
 80151fc:	6819      	ldreq	r1, [r3, #0]
 80151fe:	685b      	ldreq	r3, [r3, #4]
 8015200:	1949      	addeq	r1, r1, r5
 8015202:	6021      	streq	r1, [r4, #0]
 8015204:	e7ed      	b.n	80151e2 <_free_r+0x22>
 8015206:	461a      	mov	r2, r3
 8015208:	685b      	ldr	r3, [r3, #4]
 801520a:	b10b      	cbz	r3, 8015210 <_free_r+0x50>
 801520c:	42a3      	cmp	r3, r4
 801520e:	d9fa      	bls.n	8015206 <_free_r+0x46>
 8015210:	6811      	ldr	r1, [r2, #0]
 8015212:	1855      	adds	r5, r2, r1
 8015214:	42a5      	cmp	r5, r4
 8015216:	d10b      	bne.n	8015230 <_free_r+0x70>
 8015218:	6824      	ldr	r4, [r4, #0]
 801521a:	4421      	add	r1, r4
 801521c:	1854      	adds	r4, r2, r1
 801521e:	42a3      	cmp	r3, r4
 8015220:	6011      	str	r1, [r2, #0]
 8015222:	d1e0      	bne.n	80151e6 <_free_r+0x26>
 8015224:	681c      	ldr	r4, [r3, #0]
 8015226:	685b      	ldr	r3, [r3, #4]
 8015228:	6053      	str	r3, [r2, #4]
 801522a:	4421      	add	r1, r4
 801522c:	6011      	str	r1, [r2, #0]
 801522e:	e7da      	b.n	80151e6 <_free_r+0x26>
 8015230:	d902      	bls.n	8015238 <_free_r+0x78>
 8015232:	230c      	movs	r3, #12
 8015234:	6003      	str	r3, [r0, #0]
 8015236:	e7d6      	b.n	80151e6 <_free_r+0x26>
 8015238:	6825      	ldr	r5, [r4, #0]
 801523a:	1961      	adds	r1, r4, r5
 801523c:	428b      	cmp	r3, r1
 801523e:	bf04      	itt	eq
 8015240:	6819      	ldreq	r1, [r3, #0]
 8015242:	685b      	ldreq	r3, [r3, #4]
 8015244:	6063      	str	r3, [r4, #4]
 8015246:	bf04      	itt	eq
 8015248:	1949      	addeq	r1, r1, r5
 801524a:	6021      	streq	r1, [r4, #0]
 801524c:	6054      	str	r4, [r2, #4]
 801524e:	e7ca      	b.n	80151e6 <_free_r+0x26>
 8015250:	b003      	add	sp, #12
 8015252:	bd30      	pop	{r4, r5, pc}
 8015254:	20005c3c 	.word	0x20005c3c

08015258 <__ssputs_r>:
 8015258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801525c:	688e      	ldr	r6, [r1, #8]
 801525e:	429e      	cmp	r6, r3
 8015260:	4682      	mov	sl, r0
 8015262:	460c      	mov	r4, r1
 8015264:	4690      	mov	r8, r2
 8015266:	461f      	mov	r7, r3
 8015268:	d838      	bhi.n	80152dc <__ssputs_r+0x84>
 801526a:	898a      	ldrh	r2, [r1, #12]
 801526c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015270:	d032      	beq.n	80152d8 <__ssputs_r+0x80>
 8015272:	6825      	ldr	r5, [r4, #0]
 8015274:	6909      	ldr	r1, [r1, #16]
 8015276:	eba5 0901 	sub.w	r9, r5, r1
 801527a:	6965      	ldr	r5, [r4, #20]
 801527c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015284:	3301      	adds	r3, #1
 8015286:	444b      	add	r3, r9
 8015288:	106d      	asrs	r5, r5, #1
 801528a:	429d      	cmp	r5, r3
 801528c:	bf38      	it	cc
 801528e:	461d      	movcc	r5, r3
 8015290:	0553      	lsls	r3, r2, #21
 8015292:	d531      	bpl.n	80152f8 <__ssputs_r+0xa0>
 8015294:	4629      	mov	r1, r5
 8015296:	f7fc f8fb 	bl	8011490 <_malloc_r>
 801529a:	4606      	mov	r6, r0
 801529c:	b950      	cbnz	r0, 80152b4 <__ssputs_r+0x5c>
 801529e:	230c      	movs	r3, #12
 80152a0:	f8ca 3000 	str.w	r3, [sl]
 80152a4:	89a3      	ldrh	r3, [r4, #12]
 80152a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152aa:	81a3      	strh	r3, [r4, #12]
 80152ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80152b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152b4:	6921      	ldr	r1, [r4, #16]
 80152b6:	464a      	mov	r2, r9
 80152b8:	f7fc f8b3 	bl	8011422 <memcpy>
 80152bc:	89a3      	ldrh	r3, [r4, #12]
 80152be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80152c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152c6:	81a3      	strh	r3, [r4, #12]
 80152c8:	6126      	str	r6, [r4, #16]
 80152ca:	6165      	str	r5, [r4, #20]
 80152cc:	444e      	add	r6, r9
 80152ce:	eba5 0509 	sub.w	r5, r5, r9
 80152d2:	6026      	str	r6, [r4, #0]
 80152d4:	60a5      	str	r5, [r4, #8]
 80152d6:	463e      	mov	r6, r7
 80152d8:	42be      	cmp	r6, r7
 80152da:	d900      	bls.n	80152de <__ssputs_r+0x86>
 80152dc:	463e      	mov	r6, r7
 80152de:	6820      	ldr	r0, [r4, #0]
 80152e0:	4632      	mov	r2, r6
 80152e2:	4641      	mov	r1, r8
 80152e4:	f000 f982 	bl	80155ec <memmove>
 80152e8:	68a3      	ldr	r3, [r4, #8]
 80152ea:	1b9b      	subs	r3, r3, r6
 80152ec:	60a3      	str	r3, [r4, #8]
 80152ee:	6823      	ldr	r3, [r4, #0]
 80152f0:	4433      	add	r3, r6
 80152f2:	6023      	str	r3, [r4, #0]
 80152f4:	2000      	movs	r0, #0
 80152f6:	e7db      	b.n	80152b0 <__ssputs_r+0x58>
 80152f8:	462a      	mov	r2, r5
 80152fa:	f000 f991 	bl	8015620 <_realloc_r>
 80152fe:	4606      	mov	r6, r0
 8015300:	2800      	cmp	r0, #0
 8015302:	d1e1      	bne.n	80152c8 <__ssputs_r+0x70>
 8015304:	6921      	ldr	r1, [r4, #16]
 8015306:	4650      	mov	r0, sl
 8015308:	f7ff ff5a 	bl	80151c0 <_free_r>
 801530c:	e7c7      	b.n	801529e <__ssputs_r+0x46>
	...

08015310 <_svfiprintf_r>:
 8015310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015314:	4698      	mov	r8, r3
 8015316:	898b      	ldrh	r3, [r1, #12]
 8015318:	061b      	lsls	r3, r3, #24
 801531a:	b09d      	sub	sp, #116	; 0x74
 801531c:	4607      	mov	r7, r0
 801531e:	460d      	mov	r5, r1
 8015320:	4614      	mov	r4, r2
 8015322:	d50e      	bpl.n	8015342 <_svfiprintf_r+0x32>
 8015324:	690b      	ldr	r3, [r1, #16]
 8015326:	b963      	cbnz	r3, 8015342 <_svfiprintf_r+0x32>
 8015328:	2140      	movs	r1, #64	; 0x40
 801532a:	f7fc f8b1 	bl	8011490 <_malloc_r>
 801532e:	6028      	str	r0, [r5, #0]
 8015330:	6128      	str	r0, [r5, #16]
 8015332:	b920      	cbnz	r0, 801533e <_svfiprintf_r+0x2e>
 8015334:	230c      	movs	r3, #12
 8015336:	603b      	str	r3, [r7, #0]
 8015338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801533c:	e0d1      	b.n	80154e2 <_svfiprintf_r+0x1d2>
 801533e:	2340      	movs	r3, #64	; 0x40
 8015340:	616b      	str	r3, [r5, #20]
 8015342:	2300      	movs	r3, #0
 8015344:	9309      	str	r3, [sp, #36]	; 0x24
 8015346:	2320      	movs	r3, #32
 8015348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801534c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015350:	2330      	movs	r3, #48	; 0x30
 8015352:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80154fc <_svfiprintf_r+0x1ec>
 8015356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801535a:	f04f 0901 	mov.w	r9, #1
 801535e:	4623      	mov	r3, r4
 8015360:	469a      	mov	sl, r3
 8015362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015366:	b10a      	cbz	r2, 801536c <_svfiprintf_r+0x5c>
 8015368:	2a25      	cmp	r2, #37	; 0x25
 801536a:	d1f9      	bne.n	8015360 <_svfiprintf_r+0x50>
 801536c:	ebba 0b04 	subs.w	fp, sl, r4
 8015370:	d00b      	beq.n	801538a <_svfiprintf_r+0x7a>
 8015372:	465b      	mov	r3, fp
 8015374:	4622      	mov	r2, r4
 8015376:	4629      	mov	r1, r5
 8015378:	4638      	mov	r0, r7
 801537a:	f7ff ff6d 	bl	8015258 <__ssputs_r>
 801537e:	3001      	adds	r0, #1
 8015380:	f000 80aa 	beq.w	80154d8 <_svfiprintf_r+0x1c8>
 8015384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015386:	445a      	add	r2, fp
 8015388:	9209      	str	r2, [sp, #36]	; 0x24
 801538a:	f89a 3000 	ldrb.w	r3, [sl]
 801538e:	2b00      	cmp	r3, #0
 8015390:	f000 80a2 	beq.w	80154d8 <_svfiprintf_r+0x1c8>
 8015394:	2300      	movs	r3, #0
 8015396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801539a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801539e:	f10a 0a01 	add.w	sl, sl, #1
 80153a2:	9304      	str	r3, [sp, #16]
 80153a4:	9307      	str	r3, [sp, #28]
 80153a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80153aa:	931a      	str	r3, [sp, #104]	; 0x68
 80153ac:	4654      	mov	r4, sl
 80153ae:	2205      	movs	r2, #5
 80153b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153b4:	4851      	ldr	r0, [pc, #324]	; (80154fc <_svfiprintf_r+0x1ec>)
 80153b6:	f7ea ff2b 	bl	8000210 <memchr>
 80153ba:	9a04      	ldr	r2, [sp, #16]
 80153bc:	b9d8      	cbnz	r0, 80153f6 <_svfiprintf_r+0xe6>
 80153be:	06d0      	lsls	r0, r2, #27
 80153c0:	bf44      	itt	mi
 80153c2:	2320      	movmi	r3, #32
 80153c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153c8:	0711      	lsls	r1, r2, #28
 80153ca:	bf44      	itt	mi
 80153cc:	232b      	movmi	r3, #43	; 0x2b
 80153ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153d2:	f89a 3000 	ldrb.w	r3, [sl]
 80153d6:	2b2a      	cmp	r3, #42	; 0x2a
 80153d8:	d015      	beq.n	8015406 <_svfiprintf_r+0xf6>
 80153da:	9a07      	ldr	r2, [sp, #28]
 80153dc:	4654      	mov	r4, sl
 80153de:	2000      	movs	r0, #0
 80153e0:	f04f 0c0a 	mov.w	ip, #10
 80153e4:	4621      	mov	r1, r4
 80153e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80153ea:	3b30      	subs	r3, #48	; 0x30
 80153ec:	2b09      	cmp	r3, #9
 80153ee:	d94e      	bls.n	801548e <_svfiprintf_r+0x17e>
 80153f0:	b1b0      	cbz	r0, 8015420 <_svfiprintf_r+0x110>
 80153f2:	9207      	str	r2, [sp, #28]
 80153f4:	e014      	b.n	8015420 <_svfiprintf_r+0x110>
 80153f6:	eba0 0308 	sub.w	r3, r0, r8
 80153fa:	fa09 f303 	lsl.w	r3, r9, r3
 80153fe:	4313      	orrs	r3, r2
 8015400:	9304      	str	r3, [sp, #16]
 8015402:	46a2      	mov	sl, r4
 8015404:	e7d2      	b.n	80153ac <_svfiprintf_r+0x9c>
 8015406:	9b03      	ldr	r3, [sp, #12]
 8015408:	1d19      	adds	r1, r3, #4
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	9103      	str	r1, [sp, #12]
 801540e:	2b00      	cmp	r3, #0
 8015410:	bfbb      	ittet	lt
 8015412:	425b      	neglt	r3, r3
 8015414:	f042 0202 	orrlt.w	r2, r2, #2
 8015418:	9307      	strge	r3, [sp, #28]
 801541a:	9307      	strlt	r3, [sp, #28]
 801541c:	bfb8      	it	lt
 801541e:	9204      	strlt	r2, [sp, #16]
 8015420:	7823      	ldrb	r3, [r4, #0]
 8015422:	2b2e      	cmp	r3, #46	; 0x2e
 8015424:	d10c      	bne.n	8015440 <_svfiprintf_r+0x130>
 8015426:	7863      	ldrb	r3, [r4, #1]
 8015428:	2b2a      	cmp	r3, #42	; 0x2a
 801542a:	d135      	bne.n	8015498 <_svfiprintf_r+0x188>
 801542c:	9b03      	ldr	r3, [sp, #12]
 801542e:	1d1a      	adds	r2, r3, #4
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	9203      	str	r2, [sp, #12]
 8015434:	2b00      	cmp	r3, #0
 8015436:	bfb8      	it	lt
 8015438:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801543c:	3402      	adds	r4, #2
 801543e:	9305      	str	r3, [sp, #20]
 8015440:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801550c <_svfiprintf_r+0x1fc>
 8015444:	7821      	ldrb	r1, [r4, #0]
 8015446:	2203      	movs	r2, #3
 8015448:	4650      	mov	r0, sl
 801544a:	f7ea fee1 	bl	8000210 <memchr>
 801544e:	b140      	cbz	r0, 8015462 <_svfiprintf_r+0x152>
 8015450:	2340      	movs	r3, #64	; 0x40
 8015452:	eba0 000a 	sub.w	r0, r0, sl
 8015456:	fa03 f000 	lsl.w	r0, r3, r0
 801545a:	9b04      	ldr	r3, [sp, #16]
 801545c:	4303      	orrs	r3, r0
 801545e:	3401      	adds	r4, #1
 8015460:	9304      	str	r3, [sp, #16]
 8015462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015466:	4826      	ldr	r0, [pc, #152]	; (8015500 <_svfiprintf_r+0x1f0>)
 8015468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801546c:	2206      	movs	r2, #6
 801546e:	f7ea fecf 	bl	8000210 <memchr>
 8015472:	2800      	cmp	r0, #0
 8015474:	d038      	beq.n	80154e8 <_svfiprintf_r+0x1d8>
 8015476:	4b23      	ldr	r3, [pc, #140]	; (8015504 <_svfiprintf_r+0x1f4>)
 8015478:	bb1b      	cbnz	r3, 80154c2 <_svfiprintf_r+0x1b2>
 801547a:	9b03      	ldr	r3, [sp, #12]
 801547c:	3307      	adds	r3, #7
 801547e:	f023 0307 	bic.w	r3, r3, #7
 8015482:	3308      	adds	r3, #8
 8015484:	9303      	str	r3, [sp, #12]
 8015486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015488:	4433      	add	r3, r6
 801548a:	9309      	str	r3, [sp, #36]	; 0x24
 801548c:	e767      	b.n	801535e <_svfiprintf_r+0x4e>
 801548e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015492:	460c      	mov	r4, r1
 8015494:	2001      	movs	r0, #1
 8015496:	e7a5      	b.n	80153e4 <_svfiprintf_r+0xd4>
 8015498:	2300      	movs	r3, #0
 801549a:	3401      	adds	r4, #1
 801549c:	9305      	str	r3, [sp, #20]
 801549e:	4619      	mov	r1, r3
 80154a0:	f04f 0c0a 	mov.w	ip, #10
 80154a4:	4620      	mov	r0, r4
 80154a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80154aa:	3a30      	subs	r2, #48	; 0x30
 80154ac:	2a09      	cmp	r2, #9
 80154ae:	d903      	bls.n	80154b8 <_svfiprintf_r+0x1a8>
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d0c5      	beq.n	8015440 <_svfiprintf_r+0x130>
 80154b4:	9105      	str	r1, [sp, #20]
 80154b6:	e7c3      	b.n	8015440 <_svfiprintf_r+0x130>
 80154b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80154bc:	4604      	mov	r4, r0
 80154be:	2301      	movs	r3, #1
 80154c0:	e7f0      	b.n	80154a4 <_svfiprintf_r+0x194>
 80154c2:	ab03      	add	r3, sp, #12
 80154c4:	9300      	str	r3, [sp, #0]
 80154c6:	462a      	mov	r2, r5
 80154c8:	4b0f      	ldr	r3, [pc, #60]	; (8015508 <_svfiprintf_r+0x1f8>)
 80154ca:	a904      	add	r1, sp, #16
 80154cc:	4638      	mov	r0, r7
 80154ce:	f7fc f8f3 	bl	80116b8 <_printf_float>
 80154d2:	1c42      	adds	r2, r0, #1
 80154d4:	4606      	mov	r6, r0
 80154d6:	d1d6      	bne.n	8015486 <_svfiprintf_r+0x176>
 80154d8:	89ab      	ldrh	r3, [r5, #12]
 80154da:	065b      	lsls	r3, r3, #25
 80154dc:	f53f af2c 	bmi.w	8015338 <_svfiprintf_r+0x28>
 80154e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154e2:	b01d      	add	sp, #116	; 0x74
 80154e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154e8:	ab03      	add	r3, sp, #12
 80154ea:	9300      	str	r3, [sp, #0]
 80154ec:	462a      	mov	r2, r5
 80154ee:	4b06      	ldr	r3, [pc, #24]	; (8015508 <_svfiprintf_r+0x1f8>)
 80154f0:	a904      	add	r1, sp, #16
 80154f2:	4638      	mov	r0, r7
 80154f4:	f7fc fb84 	bl	8011c00 <_printf_i>
 80154f8:	e7eb      	b.n	80154d2 <_svfiprintf_r+0x1c2>
 80154fa:	bf00      	nop
 80154fc:	080162bc 	.word	0x080162bc
 8015500:	080162c6 	.word	0x080162c6
 8015504:	080116b9 	.word	0x080116b9
 8015508:	08015259 	.word	0x08015259
 801550c:	080162c2 	.word	0x080162c2

08015510 <_read_r>:
 8015510:	b538      	push	{r3, r4, r5, lr}
 8015512:	4d07      	ldr	r5, [pc, #28]	; (8015530 <_read_r+0x20>)
 8015514:	4604      	mov	r4, r0
 8015516:	4608      	mov	r0, r1
 8015518:	4611      	mov	r1, r2
 801551a:	2200      	movs	r2, #0
 801551c:	602a      	str	r2, [r5, #0]
 801551e:	461a      	mov	r2, r3
 8015520:	f7ec fe18 	bl	8002154 <_read>
 8015524:	1c43      	adds	r3, r0, #1
 8015526:	d102      	bne.n	801552e <_read_r+0x1e>
 8015528:	682b      	ldr	r3, [r5, #0]
 801552a:	b103      	cbz	r3, 801552e <_read_r+0x1e>
 801552c:	6023      	str	r3, [r4, #0]
 801552e:	bd38      	pop	{r3, r4, r5, pc}
 8015530:	20005c44 	.word	0x20005c44
 8015534:	00000000 	.word	0x00000000

08015538 <nan>:
 8015538:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015540 <nan+0x8>
 801553c:	4770      	bx	lr
 801553e:	bf00      	nop
 8015540:	00000000 	.word	0x00000000
 8015544:	7ff80000 	.word	0x7ff80000

08015548 <strncmp>:
 8015548:	b510      	push	{r4, lr}
 801554a:	b17a      	cbz	r2, 801556c <strncmp+0x24>
 801554c:	4603      	mov	r3, r0
 801554e:	3901      	subs	r1, #1
 8015550:	1884      	adds	r4, r0, r2
 8015552:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015556:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801555a:	4290      	cmp	r0, r2
 801555c:	d101      	bne.n	8015562 <strncmp+0x1a>
 801555e:	42a3      	cmp	r3, r4
 8015560:	d101      	bne.n	8015566 <strncmp+0x1e>
 8015562:	1a80      	subs	r0, r0, r2
 8015564:	bd10      	pop	{r4, pc}
 8015566:	2800      	cmp	r0, #0
 8015568:	d1f3      	bne.n	8015552 <strncmp+0xa>
 801556a:	e7fa      	b.n	8015562 <strncmp+0x1a>
 801556c:	4610      	mov	r0, r2
 801556e:	e7f9      	b.n	8015564 <strncmp+0x1c>

08015570 <__ascii_wctomb>:
 8015570:	b149      	cbz	r1, 8015586 <__ascii_wctomb+0x16>
 8015572:	2aff      	cmp	r2, #255	; 0xff
 8015574:	bf85      	ittet	hi
 8015576:	238a      	movhi	r3, #138	; 0x8a
 8015578:	6003      	strhi	r3, [r0, #0]
 801557a:	700a      	strbls	r2, [r1, #0]
 801557c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015580:	bf98      	it	ls
 8015582:	2001      	movls	r0, #1
 8015584:	4770      	bx	lr
 8015586:	4608      	mov	r0, r1
 8015588:	4770      	bx	lr
	...

0801558c <__assert_func>:
 801558c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801558e:	4614      	mov	r4, r2
 8015590:	461a      	mov	r2, r3
 8015592:	4b09      	ldr	r3, [pc, #36]	; (80155b8 <__assert_func+0x2c>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	4605      	mov	r5, r0
 8015598:	68d8      	ldr	r0, [r3, #12]
 801559a:	b14c      	cbz	r4, 80155b0 <__assert_func+0x24>
 801559c:	4b07      	ldr	r3, [pc, #28]	; (80155bc <__assert_func+0x30>)
 801559e:	9100      	str	r1, [sp, #0]
 80155a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80155a4:	4906      	ldr	r1, [pc, #24]	; (80155c0 <__assert_func+0x34>)
 80155a6:	462b      	mov	r3, r5
 80155a8:	f000 f80e 	bl	80155c8 <fiprintf>
 80155ac:	f000 fa80 	bl	8015ab0 <abort>
 80155b0:	4b04      	ldr	r3, [pc, #16]	; (80155c4 <__assert_func+0x38>)
 80155b2:	461c      	mov	r4, r3
 80155b4:	e7f3      	b.n	801559e <__assert_func+0x12>
 80155b6:	bf00      	nop
 80155b8:	20000024 	.word	0x20000024
 80155bc:	080162cd 	.word	0x080162cd
 80155c0:	080162da 	.word	0x080162da
 80155c4:	08016308 	.word	0x08016308

080155c8 <fiprintf>:
 80155c8:	b40e      	push	{r1, r2, r3}
 80155ca:	b503      	push	{r0, r1, lr}
 80155cc:	4601      	mov	r1, r0
 80155ce:	ab03      	add	r3, sp, #12
 80155d0:	4805      	ldr	r0, [pc, #20]	; (80155e8 <fiprintf+0x20>)
 80155d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80155d6:	6800      	ldr	r0, [r0, #0]
 80155d8:	9301      	str	r3, [sp, #4]
 80155da:	f000 f879 	bl	80156d0 <_vfiprintf_r>
 80155de:	b002      	add	sp, #8
 80155e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80155e4:	b003      	add	sp, #12
 80155e6:	4770      	bx	lr
 80155e8:	20000024 	.word	0x20000024

080155ec <memmove>:
 80155ec:	4288      	cmp	r0, r1
 80155ee:	b510      	push	{r4, lr}
 80155f0:	eb01 0402 	add.w	r4, r1, r2
 80155f4:	d902      	bls.n	80155fc <memmove+0x10>
 80155f6:	4284      	cmp	r4, r0
 80155f8:	4623      	mov	r3, r4
 80155fa:	d807      	bhi.n	801560c <memmove+0x20>
 80155fc:	1e43      	subs	r3, r0, #1
 80155fe:	42a1      	cmp	r1, r4
 8015600:	d008      	beq.n	8015614 <memmove+0x28>
 8015602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015606:	f803 2f01 	strb.w	r2, [r3, #1]!
 801560a:	e7f8      	b.n	80155fe <memmove+0x12>
 801560c:	4402      	add	r2, r0
 801560e:	4601      	mov	r1, r0
 8015610:	428a      	cmp	r2, r1
 8015612:	d100      	bne.n	8015616 <memmove+0x2a>
 8015614:	bd10      	pop	{r4, pc}
 8015616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801561a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801561e:	e7f7      	b.n	8015610 <memmove+0x24>

08015620 <_realloc_r>:
 8015620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015624:	4680      	mov	r8, r0
 8015626:	4614      	mov	r4, r2
 8015628:	460e      	mov	r6, r1
 801562a:	b921      	cbnz	r1, 8015636 <_realloc_r+0x16>
 801562c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015630:	4611      	mov	r1, r2
 8015632:	f7fb bf2d 	b.w	8011490 <_malloc_r>
 8015636:	b92a      	cbnz	r2, 8015644 <_realloc_r+0x24>
 8015638:	f7ff fdc2 	bl	80151c0 <_free_r>
 801563c:	4625      	mov	r5, r4
 801563e:	4628      	mov	r0, r5
 8015640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015644:	f000 faa0 	bl	8015b88 <_malloc_usable_size_r>
 8015648:	4284      	cmp	r4, r0
 801564a:	4607      	mov	r7, r0
 801564c:	d802      	bhi.n	8015654 <_realloc_r+0x34>
 801564e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015652:	d812      	bhi.n	801567a <_realloc_r+0x5a>
 8015654:	4621      	mov	r1, r4
 8015656:	4640      	mov	r0, r8
 8015658:	f7fb ff1a 	bl	8011490 <_malloc_r>
 801565c:	4605      	mov	r5, r0
 801565e:	2800      	cmp	r0, #0
 8015660:	d0ed      	beq.n	801563e <_realloc_r+0x1e>
 8015662:	42bc      	cmp	r4, r7
 8015664:	4622      	mov	r2, r4
 8015666:	4631      	mov	r1, r6
 8015668:	bf28      	it	cs
 801566a:	463a      	movcs	r2, r7
 801566c:	f7fb fed9 	bl	8011422 <memcpy>
 8015670:	4631      	mov	r1, r6
 8015672:	4640      	mov	r0, r8
 8015674:	f7ff fda4 	bl	80151c0 <_free_r>
 8015678:	e7e1      	b.n	801563e <_realloc_r+0x1e>
 801567a:	4635      	mov	r5, r6
 801567c:	e7df      	b.n	801563e <_realloc_r+0x1e>

0801567e <__sfputc_r>:
 801567e:	6893      	ldr	r3, [r2, #8]
 8015680:	3b01      	subs	r3, #1
 8015682:	2b00      	cmp	r3, #0
 8015684:	b410      	push	{r4}
 8015686:	6093      	str	r3, [r2, #8]
 8015688:	da08      	bge.n	801569c <__sfputc_r+0x1e>
 801568a:	6994      	ldr	r4, [r2, #24]
 801568c:	42a3      	cmp	r3, r4
 801568e:	db01      	blt.n	8015694 <__sfputc_r+0x16>
 8015690:	290a      	cmp	r1, #10
 8015692:	d103      	bne.n	801569c <__sfputc_r+0x1e>
 8015694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015698:	f000 b94a 	b.w	8015930 <__swbuf_r>
 801569c:	6813      	ldr	r3, [r2, #0]
 801569e:	1c58      	adds	r0, r3, #1
 80156a0:	6010      	str	r0, [r2, #0]
 80156a2:	7019      	strb	r1, [r3, #0]
 80156a4:	4608      	mov	r0, r1
 80156a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156aa:	4770      	bx	lr

080156ac <__sfputs_r>:
 80156ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ae:	4606      	mov	r6, r0
 80156b0:	460f      	mov	r7, r1
 80156b2:	4614      	mov	r4, r2
 80156b4:	18d5      	adds	r5, r2, r3
 80156b6:	42ac      	cmp	r4, r5
 80156b8:	d101      	bne.n	80156be <__sfputs_r+0x12>
 80156ba:	2000      	movs	r0, #0
 80156bc:	e007      	b.n	80156ce <__sfputs_r+0x22>
 80156be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156c2:	463a      	mov	r2, r7
 80156c4:	4630      	mov	r0, r6
 80156c6:	f7ff ffda 	bl	801567e <__sfputc_r>
 80156ca:	1c43      	adds	r3, r0, #1
 80156cc:	d1f3      	bne.n	80156b6 <__sfputs_r+0xa>
 80156ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080156d0 <_vfiprintf_r>:
 80156d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d4:	460d      	mov	r5, r1
 80156d6:	b09d      	sub	sp, #116	; 0x74
 80156d8:	4614      	mov	r4, r2
 80156da:	4698      	mov	r8, r3
 80156dc:	4606      	mov	r6, r0
 80156de:	b118      	cbz	r0, 80156e8 <_vfiprintf_r+0x18>
 80156e0:	6983      	ldr	r3, [r0, #24]
 80156e2:	b90b      	cbnz	r3, 80156e8 <_vfiprintf_r+0x18>
 80156e4:	f7fb fdd8 	bl	8011298 <__sinit>
 80156e8:	4b89      	ldr	r3, [pc, #548]	; (8015910 <_vfiprintf_r+0x240>)
 80156ea:	429d      	cmp	r5, r3
 80156ec:	d11b      	bne.n	8015726 <_vfiprintf_r+0x56>
 80156ee:	6875      	ldr	r5, [r6, #4]
 80156f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156f2:	07d9      	lsls	r1, r3, #31
 80156f4:	d405      	bmi.n	8015702 <_vfiprintf_r+0x32>
 80156f6:	89ab      	ldrh	r3, [r5, #12]
 80156f8:	059a      	lsls	r2, r3, #22
 80156fa:	d402      	bmi.n	8015702 <_vfiprintf_r+0x32>
 80156fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156fe:	f7fb fe8e 	bl	801141e <__retarget_lock_acquire_recursive>
 8015702:	89ab      	ldrh	r3, [r5, #12]
 8015704:	071b      	lsls	r3, r3, #28
 8015706:	d501      	bpl.n	801570c <_vfiprintf_r+0x3c>
 8015708:	692b      	ldr	r3, [r5, #16]
 801570a:	b9eb      	cbnz	r3, 8015748 <_vfiprintf_r+0x78>
 801570c:	4629      	mov	r1, r5
 801570e:	4630      	mov	r0, r6
 8015710:	f000 f960 	bl	80159d4 <__swsetup_r>
 8015714:	b1c0      	cbz	r0, 8015748 <_vfiprintf_r+0x78>
 8015716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015718:	07dc      	lsls	r4, r3, #31
 801571a:	d50e      	bpl.n	801573a <_vfiprintf_r+0x6a>
 801571c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015720:	b01d      	add	sp, #116	; 0x74
 8015722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015726:	4b7b      	ldr	r3, [pc, #492]	; (8015914 <_vfiprintf_r+0x244>)
 8015728:	429d      	cmp	r5, r3
 801572a:	d101      	bne.n	8015730 <_vfiprintf_r+0x60>
 801572c:	68b5      	ldr	r5, [r6, #8]
 801572e:	e7df      	b.n	80156f0 <_vfiprintf_r+0x20>
 8015730:	4b79      	ldr	r3, [pc, #484]	; (8015918 <_vfiprintf_r+0x248>)
 8015732:	429d      	cmp	r5, r3
 8015734:	bf08      	it	eq
 8015736:	68f5      	ldreq	r5, [r6, #12]
 8015738:	e7da      	b.n	80156f0 <_vfiprintf_r+0x20>
 801573a:	89ab      	ldrh	r3, [r5, #12]
 801573c:	0598      	lsls	r0, r3, #22
 801573e:	d4ed      	bmi.n	801571c <_vfiprintf_r+0x4c>
 8015740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015742:	f7fb fe6d 	bl	8011420 <__retarget_lock_release_recursive>
 8015746:	e7e9      	b.n	801571c <_vfiprintf_r+0x4c>
 8015748:	2300      	movs	r3, #0
 801574a:	9309      	str	r3, [sp, #36]	; 0x24
 801574c:	2320      	movs	r3, #32
 801574e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015752:	f8cd 800c 	str.w	r8, [sp, #12]
 8015756:	2330      	movs	r3, #48	; 0x30
 8015758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801591c <_vfiprintf_r+0x24c>
 801575c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015760:	f04f 0901 	mov.w	r9, #1
 8015764:	4623      	mov	r3, r4
 8015766:	469a      	mov	sl, r3
 8015768:	f813 2b01 	ldrb.w	r2, [r3], #1
 801576c:	b10a      	cbz	r2, 8015772 <_vfiprintf_r+0xa2>
 801576e:	2a25      	cmp	r2, #37	; 0x25
 8015770:	d1f9      	bne.n	8015766 <_vfiprintf_r+0x96>
 8015772:	ebba 0b04 	subs.w	fp, sl, r4
 8015776:	d00b      	beq.n	8015790 <_vfiprintf_r+0xc0>
 8015778:	465b      	mov	r3, fp
 801577a:	4622      	mov	r2, r4
 801577c:	4629      	mov	r1, r5
 801577e:	4630      	mov	r0, r6
 8015780:	f7ff ff94 	bl	80156ac <__sfputs_r>
 8015784:	3001      	adds	r0, #1
 8015786:	f000 80aa 	beq.w	80158de <_vfiprintf_r+0x20e>
 801578a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801578c:	445a      	add	r2, fp
 801578e:	9209      	str	r2, [sp, #36]	; 0x24
 8015790:	f89a 3000 	ldrb.w	r3, [sl]
 8015794:	2b00      	cmp	r3, #0
 8015796:	f000 80a2 	beq.w	80158de <_vfiprintf_r+0x20e>
 801579a:	2300      	movs	r3, #0
 801579c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80157a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157a4:	f10a 0a01 	add.w	sl, sl, #1
 80157a8:	9304      	str	r3, [sp, #16]
 80157aa:	9307      	str	r3, [sp, #28]
 80157ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80157b0:	931a      	str	r3, [sp, #104]	; 0x68
 80157b2:	4654      	mov	r4, sl
 80157b4:	2205      	movs	r2, #5
 80157b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157ba:	4858      	ldr	r0, [pc, #352]	; (801591c <_vfiprintf_r+0x24c>)
 80157bc:	f7ea fd28 	bl	8000210 <memchr>
 80157c0:	9a04      	ldr	r2, [sp, #16]
 80157c2:	b9d8      	cbnz	r0, 80157fc <_vfiprintf_r+0x12c>
 80157c4:	06d1      	lsls	r1, r2, #27
 80157c6:	bf44      	itt	mi
 80157c8:	2320      	movmi	r3, #32
 80157ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157ce:	0713      	lsls	r3, r2, #28
 80157d0:	bf44      	itt	mi
 80157d2:	232b      	movmi	r3, #43	; 0x2b
 80157d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157d8:	f89a 3000 	ldrb.w	r3, [sl]
 80157dc:	2b2a      	cmp	r3, #42	; 0x2a
 80157de:	d015      	beq.n	801580c <_vfiprintf_r+0x13c>
 80157e0:	9a07      	ldr	r2, [sp, #28]
 80157e2:	4654      	mov	r4, sl
 80157e4:	2000      	movs	r0, #0
 80157e6:	f04f 0c0a 	mov.w	ip, #10
 80157ea:	4621      	mov	r1, r4
 80157ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157f0:	3b30      	subs	r3, #48	; 0x30
 80157f2:	2b09      	cmp	r3, #9
 80157f4:	d94e      	bls.n	8015894 <_vfiprintf_r+0x1c4>
 80157f6:	b1b0      	cbz	r0, 8015826 <_vfiprintf_r+0x156>
 80157f8:	9207      	str	r2, [sp, #28]
 80157fa:	e014      	b.n	8015826 <_vfiprintf_r+0x156>
 80157fc:	eba0 0308 	sub.w	r3, r0, r8
 8015800:	fa09 f303 	lsl.w	r3, r9, r3
 8015804:	4313      	orrs	r3, r2
 8015806:	9304      	str	r3, [sp, #16]
 8015808:	46a2      	mov	sl, r4
 801580a:	e7d2      	b.n	80157b2 <_vfiprintf_r+0xe2>
 801580c:	9b03      	ldr	r3, [sp, #12]
 801580e:	1d19      	adds	r1, r3, #4
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	9103      	str	r1, [sp, #12]
 8015814:	2b00      	cmp	r3, #0
 8015816:	bfbb      	ittet	lt
 8015818:	425b      	neglt	r3, r3
 801581a:	f042 0202 	orrlt.w	r2, r2, #2
 801581e:	9307      	strge	r3, [sp, #28]
 8015820:	9307      	strlt	r3, [sp, #28]
 8015822:	bfb8      	it	lt
 8015824:	9204      	strlt	r2, [sp, #16]
 8015826:	7823      	ldrb	r3, [r4, #0]
 8015828:	2b2e      	cmp	r3, #46	; 0x2e
 801582a:	d10c      	bne.n	8015846 <_vfiprintf_r+0x176>
 801582c:	7863      	ldrb	r3, [r4, #1]
 801582e:	2b2a      	cmp	r3, #42	; 0x2a
 8015830:	d135      	bne.n	801589e <_vfiprintf_r+0x1ce>
 8015832:	9b03      	ldr	r3, [sp, #12]
 8015834:	1d1a      	adds	r2, r3, #4
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	9203      	str	r2, [sp, #12]
 801583a:	2b00      	cmp	r3, #0
 801583c:	bfb8      	it	lt
 801583e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015842:	3402      	adds	r4, #2
 8015844:	9305      	str	r3, [sp, #20]
 8015846:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801592c <_vfiprintf_r+0x25c>
 801584a:	7821      	ldrb	r1, [r4, #0]
 801584c:	2203      	movs	r2, #3
 801584e:	4650      	mov	r0, sl
 8015850:	f7ea fcde 	bl	8000210 <memchr>
 8015854:	b140      	cbz	r0, 8015868 <_vfiprintf_r+0x198>
 8015856:	2340      	movs	r3, #64	; 0x40
 8015858:	eba0 000a 	sub.w	r0, r0, sl
 801585c:	fa03 f000 	lsl.w	r0, r3, r0
 8015860:	9b04      	ldr	r3, [sp, #16]
 8015862:	4303      	orrs	r3, r0
 8015864:	3401      	adds	r4, #1
 8015866:	9304      	str	r3, [sp, #16]
 8015868:	f814 1b01 	ldrb.w	r1, [r4], #1
 801586c:	482c      	ldr	r0, [pc, #176]	; (8015920 <_vfiprintf_r+0x250>)
 801586e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015872:	2206      	movs	r2, #6
 8015874:	f7ea fccc 	bl	8000210 <memchr>
 8015878:	2800      	cmp	r0, #0
 801587a:	d03f      	beq.n	80158fc <_vfiprintf_r+0x22c>
 801587c:	4b29      	ldr	r3, [pc, #164]	; (8015924 <_vfiprintf_r+0x254>)
 801587e:	bb1b      	cbnz	r3, 80158c8 <_vfiprintf_r+0x1f8>
 8015880:	9b03      	ldr	r3, [sp, #12]
 8015882:	3307      	adds	r3, #7
 8015884:	f023 0307 	bic.w	r3, r3, #7
 8015888:	3308      	adds	r3, #8
 801588a:	9303      	str	r3, [sp, #12]
 801588c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801588e:	443b      	add	r3, r7
 8015890:	9309      	str	r3, [sp, #36]	; 0x24
 8015892:	e767      	b.n	8015764 <_vfiprintf_r+0x94>
 8015894:	fb0c 3202 	mla	r2, ip, r2, r3
 8015898:	460c      	mov	r4, r1
 801589a:	2001      	movs	r0, #1
 801589c:	e7a5      	b.n	80157ea <_vfiprintf_r+0x11a>
 801589e:	2300      	movs	r3, #0
 80158a0:	3401      	adds	r4, #1
 80158a2:	9305      	str	r3, [sp, #20]
 80158a4:	4619      	mov	r1, r3
 80158a6:	f04f 0c0a 	mov.w	ip, #10
 80158aa:	4620      	mov	r0, r4
 80158ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158b0:	3a30      	subs	r2, #48	; 0x30
 80158b2:	2a09      	cmp	r2, #9
 80158b4:	d903      	bls.n	80158be <_vfiprintf_r+0x1ee>
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d0c5      	beq.n	8015846 <_vfiprintf_r+0x176>
 80158ba:	9105      	str	r1, [sp, #20]
 80158bc:	e7c3      	b.n	8015846 <_vfiprintf_r+0x176>
 80158be:	fb0c 2101 	mla	r1, ip, r1, r2
 80158c2:	4604      	mov	r4, r0
 80158c4:	2301      	movs	r3, #1
 80158c6:	e7f0      	b.n	80158aa <_vfiprintf_r+0x1da>
 80158c8:	ab03      	add	r3, sp, #12
 80158ca:	9300      	str	r3, [sp, #0]
 80158cc:	462a      	mov	r2, r5
 80158ce:	4b16      	ldr	r3, [pc, #88]	; (8015928 <_vfiprintf_r+0x258>)
 80158d0:	a904      	add	r1, sp, #16
 80158d2:	4630      	mov	r0, r6
 80158d4:	f7fb fef0 	bl	80116b8 <_printf_float>
 80158d8:	4607      	mov	r7, r0
 80158da:	1c78      	adds	r0, r7, #1
 80158dc:	d1d6      	bne.n	801588c <_vfiprintf_r+0x1bc>
 80158de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158e0:	07d9      	lsls	r1, r3, #31
 80158e2:	d405      	bmi.n	80158f0 <_vfiprintf_r+0x220>
 80158e4:	89ab      	ldrh	r3, [r5, #12]
 80158e6:	059a      	lsls	r2, r3, #22
 80158e8:	d402      	bmi.n	80158f0 <_vfiprintf_r+0x220>
 80158ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80158ec:	f7fb fd98 	bl	8011420 <__retarget_lock_release_recursive>
 80158f0:	89ab      	ldrh	r3, [r5, #12]
 80158f2:	065b      	lsls	r3, r3, #25
 80158f4:	f53f af12 	bmi.w	801571c <_vfiprintf_r+0x4c>
 80158f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158fa:	e711      	b.n	8015720 <_vfiprintf_r+0x50>
 80158fc:	ab03      	add	r3, sp, #12
 80158fe:	9300      	str	r3, [sp, #0]
 8015900:	462a      	mov	r2, r5
 8015902:	4b09      	ldr	r3, [pc, #36]	; (8015928 <_vfiprintf_r+0x258>)
 8015904:	a904      	add	r1, sp, #16
 8015906:	4630      	mov	r0, r6
 8015908:	f7fc f97a 	bl	8011c00 <_printf_i>
 801590c:	e7e4      	b.n	80158d8 <_vfiprintf_r+0x208>
 801590e:	bf00      	nop
 8015910:	08015e88 	.word	0x08015e88
 8015914:	08015ea8 	.word	0x08015ea8
 8015918:	08015e68 	.word	0x08015e68
 801591c:	080162bc 	.word	0x080162bc
 8015920:	080162c6 	.word	0x080162c6
 8015924:	080116b9 	.word	0x080116b9
 8015928:	080156ad 	.word	0x080156ad
 801592c:	080162c2 	.word	0x080162c2

08015930 <__swbuf_r>:
 8015930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015932:	460e      	mov	r6, r1
 8015934:	4614      	mov	r4, r2
 8015936:	4605      	mov	r5, r0
 8015938:	b118      	cbz	r0, 8015942 <__swbuf_r+0x12>
 801593a:	6983      	ldr	r3, [r0, #24]
 801593c:	b90b      	cbnz	r3, 8015942 <__swbuf_r+0x12>
 801593e:	f7fb fcab 	bl	8011298 <__sinit>
 8015942:	4b21      	ldr	r3, [pc, #132]	; (80159c8 <__swbuf_r+0x98>)
 8015944:	429c      	cmp	r4, r3
 8015946:	d12b      	bne.n	80159a0 <__swbuf_r+0x70>
 8015948:	686c      	ldr	r4, [r5, #4]
 801594a:	69a3      	ldr	r3, [r4, #24]
 801594c:	60a3      	str	r3, [r4, #8]
 801594e:	89a3      	ldrh	r3, [r4, #12]
 8015950:	071a      	lsls	r2, r3, #28
 8015952:	d52f      	bpl.n	80159b4 <__swbuf_r+0x84>
 8015954:	6923      	ldr	r3, [r4, #16]
 8015956:	b36b      	cbz	r3, 80159b4 <__swbuf_r+0x84>
 8015958:	6923      	ldr	r3, [r4, #16]
 801595a:	6820      	ldr	r0, [r4, #0]
 801595c:	1ac0      	subs	r0, r0, r3
 801595e:	6963      	ldr	r3, [r4, #20]
 8015960:	b2f6      	uxtb	r6, r6
 8015962:	4283      	cmp	r3, r0
 8015964:	4637      	mov	r7, r6
 8015966:	dc04      	bgt.n	8015972 <__swbuf_r+0x42>
 8015968:	4621      	mov	r1, r4
 801596a:	4628      	mov	r0, r5
 801596c:	f7fe fb68 	bl	8014040 <_fflush_r>
 8015970:	bb30      	cbnz	r0, 80159c0 <__swbuf_r+0x90>
 8015972:	68a3      	ldr	r3, [r4, #8]
 8015974:	3b01      	subs	r3, #1
 8015976:	60a3      	str	r3, [r4, #8]
 8015978:	6823      	ldr	r3, [r4, #0]
 801597a:	1c5a      	adds	r2, r3, #1
 801597c:	6022      	str	r2, [r4, #0]
 801597e:	701e      	strb	r6, [r3, #0]
 8015980:	6963      	ldr	r3, [r4, #20]
 8015982:	3001      	adds	r0, #1
 8015984:	4283      	cmp	r3, r0
 8015986:	d004      	beq.n	8015992 <__swbuf_r+0x62>
 8015988:	89a3      	ldrh	r3, [r4, #12]
 801598a:	07db      	lsls	r3, r3, #31
 801598c:	d506      	bpl.n	801599c <__swbuf_r+0x6c>
 801598e:	2e0a      	cmp	r6, #10
 8015990:	d104      	bne.n	801599c <__swbuf_r+0x6c>
 8015992:	4621      	mov	r1, r4
 8015994:	4628      	mov	r0, r5
 8015996:	f7fe fb53 	bl	8014040 <_fflush_r>
 801599a:	b988      	cbnz	r0, 80159c0 <__swbuf_r+0x90>
 801599c:	4638      	mov	r0, r7
 801599e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159a0:	4b0a      	ldr	r3, [pc, #40]	; (80159cc <__swbuf_r+0x9c>)
 80159a2:	429c      	cmp	r4, r3
 80159a4:	d101      	bne.n	80159aa <__swbuf_r+0x7a>
 80159a6:	68ac      	ldr	r4, [r5, #8]
 80159a8:	e7cf      	b.n	801594a <__swbuf_r+0x1a>
 80159aa:	4b09      	ldr	r3, [pc, #36]	; (80159d0 <__swbuf_r+0xa0>)
 80159ac:	429c      	cmp	r4, r3
 80159ae:	bf08      	it	eq
 80159b0:	68ec      	ldreq	r4, [r5, #12]
 80159b2:	e7ca      	b.n	801594a <__swbuf_r+0x1a>
 80159b4:	4621      	mov	r1, r4
 80159b6:	4628      	mov	r0, r5
 80159b8:	f000 f80c 	bl	80159d4 <__swsetup_r>
 80159bc:	2800      	cmp	r0, #0
 80159be:	d0cb      	beq.n	8015958 <__swbuf_r+0x28>
 80159c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80159c4:	e7ea      	b.n	801599c <__swbuf_r+0x6c>
 80159c6:	bf00      	nop
 80159c8:	08015e88 	.word	0x08015e88
 80159cc:	08015ea8 	.word	0x08015ea8
 80159d0:	08015e68 	.word	0x08015e68

080159d4 <__swsetup_r>:
 80159d4:	4b32      	ldr	r3, [pc, #200]	; (8015aa0 <__swsetup_r+0xcc>)
 80159d6:	b570      	push	{r4, r5, r6, lr}
 80159d8:	681d      	ldr	r5, [r3, #0]
 80159da:	4606      	mov	r6, r0
 80159dc:	460c      	mov	r4, r1
 80159de:	b125      	cbz	r5, 80159ea <__swsetup_r+0x16>
 80159e0:	69ab      	ldr	r3, [r5, #24]
 80159e2:	b913      	cbnz	r3, 80159ea <__swsetup_r+0x16>
 80159e4:	4628      	mov	r0, r5
 80159e6:	f7fb fc57 	bl	8011298 <__sinit>
 80159ea:	4b2e      	ldr	r3, [pc, #184]	; (8015aa4 <__swsetup_r+0xd0>)
 80159ec:	429c      	cmp	r4, r3
 80159ee:	d10f      	bne.n	8015a10 <__swsetup_r+0x3c>
 80159f0:	686c      	ldr	r4, [r5, #4]
 80159f2:	89a3      	ldrh	r3, [r4, #12]
 80159f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80159f8:	0719      	lsls	r1, r3, #28
 80159fa:	d42c      	bmi.n	8015a56 <__swsetup_r+0x82>
 80159fc:	06dd      	lsls	r5, r3, #27
 80159fe:	d411      	bmi.n	8015a24 <__swsetup_r+0x50>
 8015a00:	2309      	movs	r3, #9
 8015a02:	6033      	str	r3, [r6, #0]
 8015a04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015a08:	81a3      	strh	r3, [r4, #12]
 8015a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a0e:	e03e      	b.n	8015a8e <__swsetup_r+0xba>
 8015a10:	4b25      	ldr	r3, [pc, #148]	; (8015aa8 <__swsetup_r+0xd4>)
 8015a12:	429c      	cmp	r4, r3
 8015a14:	d101      	bne.n	8015a1a <__swsetup_r+0x46>
 8015a16:	68ac      	ldr	r4, [r5, #8]
 8015a18:	e7eb      	b.n	80159f2 <__swsetup_r+0x1e>
 8015a1a:	4b24      	ldr	r3, [pc, #144]	; (8015aac <__swsetup_r+0xd8>)
 8015a1c:	429c      	cmp	r4, r3
 8015a1e:	bf08      	it	eq
 8015a20:	68ec      	ldreq	r4, [r5, #12]
 8015a22:	e7e6      	b.n	80159f2 <__swsetup_r+0x1e>
 8015a24:	0758      	lsls	r0, r3, #29
 8015a26:	d512      	bpl.n	8015a4e <__swsetup_r+0x7a>
 8015a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a2a:	b141      	cbz	r1, 8015a3e <__swsetup_r+0x6a>
 8015a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a30:	4299      	cmp	r1, r3
 8015a32:	d002      	beq.n	8015a3a <__swsetup_r+0x66>
 8015a34:	4630      	mov	r0, r6
 8015a36:	f7ff fbc3 	bl	80151c0 <_free_r>
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8015a3e:	89a3      	ldrh	r3, [r4, #12]
 8015a40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015a44:	81a3      	strh	r3, [r4, #12]
 8015a46:	2300      	movs	r3, #0
 8015a48:	6063      	str	r3, [r4, #4]
 8015a4a:	6923      	ldr	r3, [r4, #16]
 8015a4c:	6023      	str	r3, [r4, #0]
 8015a4e:	89a3      	ldrh	r3, [r4, #12]
 8015a50:	f043 0308 	orr.w	r3, r3, #8
 8015a54:	81a3      	strh	r3, [r4, #12]
 8015a56:	6923      	ldr	r3, [r4, #16]
 8015a58:	b94b      	cbnz	r3, 8015a6e <__swsetup_r+0x9a>
 8015a5a:	89a3      	ldrh	r3, [r4, #12]
 8015a5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a64:	d003      	beq.n	8015a6e <__swsetup_r+0x9a>
 8015a66:	4621      	mov	r1, r4
 8015a68:	4630      	mov	r0, r6
 8015a6a:	f000 f84d 	bl	8015b08 <__smakebuf_r>
 8015a6e:	89a0      	ldrh	r0, [r4, #12]
 8015a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a74:	f010 0301 	ands.w	r3, r0, #1
 8015a78:	d00a      	beq.n	8015a90 <__swsetup_r+0xbc>
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	60a3      	str	r3, [r4, #8]
 8015a7e:	6963      	ldr	r3, [r4, #20]
 8015a80:	425b      	negs	r3, r3
 8015a82:	61a3      	str	r3, [r4, #24]
 8015a84:	6923      	ldr	r3, [r4, #16]
 8015a86:	b943      	cbnz	r3, 8015a9a <__swsetup_r+0xc6>
 8015a88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015a8c:	d1ba      	bne.n	8015a04 <__swsetup_r+0x30>
 8015a8e:	bd70      	pop	{r4, r5, r6, pc}
 8015a90:	0781      	lsls	r1, r0, #30
 8015a92:	bf58      	it	pl
 8015a94:	6963      	ldrpl	r3, [r4, #20]
 8015a96:	60a3      	str	r3, [r4, #8]
 8015a98:	e7f4      	b.n	8015a84 <__swsetup_r+0xb0>
 8015a9a:	2000      	movs	r0, #0
 8015a9c:	e7f7      	b.n	8015a8e <__swsetup_r+0xba>
 8015a9e:	bf00      	nop
 8015aa0:	20000024 	.word	0x20000024
 8015aa4:	08015e88 	.word	0x08015e88
 8015aa8:	08015ea8 	.word	0x08015ea8
 8015aac:	08015e68 	.word	0x08015e68

08015ab0 <abort>:
 8015ab0:	b508      	push	{r3, lr}
 8015ab2:	2006      	movs	r0, #6
 8015ab4:	f000 f898 	bl	8015be8 <raise>
 8015ab8:	2001      	movs	r0, #1
 8015aba:	f7ec fb41 	bl	8002140 <_exit>

08015abe <__swhatbuf_r>:
 8015abe:	b570      	push	{r4, r5, r6, lr}
 8015ac0:	460e      	mov	r6, r1
 8015ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ac6:	2900      	cmp	r1, #0
 8015ac8:	b096      	sub	sp, #88	; 0x58
 8015aca:	4614      	mov	r4, r2
 8015acc:	461d      	mov	r5, r3
 8015ace:	da08      	bge.n	8015ae2 <__swhatbuf_r+0x24>
 8015ad0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	602a      	str	r2, [r5, #0]
 8015ad8:	061a      	lsls	r2, r3, #24
 8015ada:	d410      	bmi.n	8015afe <__swhatbuf_r+0x40>
 8015adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ae0:	e00e      	b.n	8015b00 <__swhatbuf_r+0x42>
 8015ae2:	466a      	mov	r2, sp
 8015ae4:	f000 f89c 	bl	8015c20 <_fstat_r>
 8015ae8:	2800      	cmp	r0, #0
 8015aea:	dbf1      	blt.n	8015ad0 <__swhatbuf_r+0x12>
 8015aec:	9a01      	ldr	r2, [sp, #4]
 8015aee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015af2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015af6:	425a      	negs	r2, r3
 8015af8:	415a      	adcs	r2, r3
 8015afa:	602a      	str	r2, [r5, #0]
 8015afc:	e7ee      	b.n	8015adc <__swhatbuf_r+0x1e>
 8015afe:	2340      	movs	r3, #64	; 0x40
 8015b00:	2000      	movs	r0, #0
 8015b02:	6023      	str	r3, [r4, #0]
 8015b04:	b016      	add	sp, #88	; 0x58
 8015b06:	bd70      	pop	{r4, r5, r6, pc}

08015b08 <__smakebuf_r>:
 8015b08:	898b      	ldrh	r3, [r1, #12]
 8015b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b0c:	079d      	lsls	r5, r3, #30
 8015b0e:	4606      	mov	r6, r0
 8015b10:	460c      	mov	r4, r1
 8015b12:	d507      	bpl.n	8015b24 <__smakebuf_r+0x1c>
 8015b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015b18:	6023      	str	r3, [r4, #0]
 8015b1a:	6123      	str	r3, [r4, #16]
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	6163      	str	r3, [r4, #20]
 8015b20:	b002      	add	sp, #8
 8015b22:	bd70      	pop	{r4, r5, r6, pc}
 8015b24:	ab01      	add	r3, sp, #4
 8015b26:	466a      	mov	r2, sp
 8015b28:	f7ff ffc9 	bl	8015abe <__swhatbuf_r>
 8015b2c:	9900      	ldr	r1, [sp, #0]
 8015b2e:	4605      	mov	r5, r0
 8015b30:	4630      	mov	r0, r6
 8015b32:	f7fb fcad 	bl	8011490 <_malloc_r>
 8015b36:	b948      	cbnz	r0, 8015b4c <__smakebuf_r+0x44>
 8015b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b3c:	059a      	lsls	r2, r3, #22
 8015b3e:	d4ef      	bmi.n	8015b20 <__smakebuf_r+0x18>
 8015b40:	f023 0303 	bic.w	r3, r3, #3
 8015b44:	f043 0302 	orr.w	r3, r3, #2
 8015b48:	81a3      	strh	r3, [r4, #12]
 8015b4a:	e7e3      	b.n	8015b14 <__smakebuf_r+0xc>
 8015b4c:	4b0d      	ldr	r3, [pc, #52]	; (8015b84 <__smakebuf_r+0x7c>)
 8015b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015b50:	89a3      	ldrh	r3, [r4, #12]
 8015b52:	6020      	str	r0, [r4, #0]
 8015b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b58:	81a3      	strh	r3, [r4, #12]
 8015b5a:	9b00      	ldr	r3, [sp, #0]
 8015b5c:	6163      	str	r3, [r4, #20]
 8015b5e:	9b01      	ldr	r3, [sp, #4]
 8015b60:	6120      	str	r0, [r4, #16]
 8015b62:	b15b      	cbz	r3, 8015b7c <__smakebuf_r+0x74>
 8015b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b68:	4630      	mov	r0, r6
 8015b6a:	f000 f86b 	bl	8015c44 <_isatty_r>
 8015b6e:	b128      	cbz	r0, 8015b7c <__smakebuf_r+0x74>
 8015b70:	89a3      	ldrh	r3, [r4, #12]
 8015b72:	f023 0303 	bic.w	r3, r3, #3
 8015b76:	f043 0301 	orr.w	r3, r3, #1
 8015b7a:	81a3      	strh	r3, [r4, #12]
 8015b7c:	89a0      	ldrh	r0, [r4, #12]
 8015b7e:	4305      	orrs	r5, r0
 8015b80:	81a5      	strh	r5, [r4, #12]
 8015b82:	e7cd      	b.n	8015b20 <__smakebuf_r+0x18>
 8015b84:	08011231 	.word	0x08011231

08015b88 <_malloc_usable_size_r>:
 8015b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b8c:	1f18      	subs	r0, r3, #4
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	bfbc      	itt	lt
 8015b92:	580b      	ldrlt	r3, [r1, r0]
 8015b94:	18c0      	addlt	r0, r0, r3
 8015b96:	4770      	bx	lr

08015b98 <_raise_r>:
 8015b98:	291f      	cmp	r1, #31
 8015b9a:	b538      	push	{r3, r4, r5, lr}
 8015b9c:	4604      	mov	r4, r0
 8015b9e:	460d      	mov	r5, r1
 8015ba0:	d904      	bls.n	8015bac <_raise_r+0x14>
 8015ba2:	2316      	movs	r3, #22
 8015ba4:	6003      	str	r3, [r0, #0]
 8015ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015baa:	bd38      	pop	{r3, r4, r5, pc}
 8015bac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015bae:	b112      	cbz	r2, 8015bb6 <_raise_r+0x1e>
 8015bb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015bb4:	b94b      	cbnz	r3, 8015bca <_raise_r+0x32>
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	f000 f830 	bl	8015c1c <_getpid_r>
 8015bbc:	462a      	mov	r2, r5
 8015bbe:	4601      	mov	r1, r0
 8015bc0:	4620      	mov	r0, r4
 8015bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bc6:	f000 b817 	b.w	8015bf8 <_kill_r>
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d00a      	beq.n	8015be4 <_raise_r+0x4c>
 8015bce:	1c59      	adds	r1, r3, #1
 8015bd0:	d103      	bne.n	8015bda <_raise_r+0x42>
 8015bd2:	2316      	movs	r3, #22
 8015bd4:	6003      	str	r3, [r0, #0]
 8015bd6:	2001      	movs	r0, #1
 8015bd8:	e7e7      	b.n	8015baa <_raise_r+0x12>
 8015bda:	2400      	movs	r4, #0
 8015bdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015be0:	4628      	mov	r0, r5
 8015be2:	4798      	blx	r3
 8015be4:	2000      	movs	r0, #0
 8015be6:	e7e0      	b.n	8015baa <_raise_r+0x12>

08015be8 <raise>:
 8015be8:	4b02      	ldr	r3, [pc, #8]	; (8015bf4 <raise+0xc>)
 8015bea:	4601      	mov	r1, r0
 8015bec:	6818      	ldr	r0, [r3, #0]
 8015bee:	f7ff bfd3 	b.w	8015b98 <_raise_r>
 8015bf2:	bf00      	nop
 8015bf4:	20000024 	.word	0x20000024

08015bf8 <_kill_r>:
 8015bf8:	b538      	push	{r3, r4, r5, lr}
 8015bfa:	4d07      	ldr	r5, [pc, #28]	; (8015c18 <_kill_r+0x20>)
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	4604      	mov	r4, r0
 8015c00:	4608      	mov	r0, r1
 8015c02:	4611      	mov	r1, r2
 8015c04:	602b      	str	r3, [r5, #0]
 8015c06:	f7ec fa8b 	bl	8002120 <_kill>
 8015c0a:	1c43      	adds	r3, r0, #1
 8015c0c:	d102      	bne.n	8015c14 <_kill_r+0x1c>
 8015c0e:	682b      	ldr	r3, [r5, #0]
 8015c10:	b103      	cbz	r3, 8015c14 <_kill_r+0x1c>
 8015c12:	6023      	str	r3, [r4, #0]
 8015c14:	bd38      	pop	{r3, r4, r5, pc}
 8015c16:	bf00      	nop
 8015c18:	20005c44 	.word	0x20005c44

08015c1c <_getpid_r>:
 8015c1c:	f7ec ba78 	b.w	8002110 <_getpid>

08015c20 <_fstat_r>:
 8015c20:	b538      	push	{r3, r4, r5, lr}
 8015c22:	4d07      	ldr	r5, [pc, #28]	; (8015c40 <_fstat_r+0x20>)
 8015c24:	2300      	movs	r3, #0
 8015c26:	4604      	mov	r4, r0
 8015c28:	4608      	mov	r0, r1
 8015c2a:	4611      	mov	r1, r2
 8015c2c:	602b      	str	r3, [r5, #0]
 8015c2e:	f7ec fad6 	bl	80021de <_fstat>
 8015c32:	1c43      	adds	r3, r0, #1
 8015c34:	d102      	bne.n	8015c3c <_fstat_r+0x1c>
 8015c36:	682b      	ldr	r3, [r5, #0]
 8015c38:	b103      	cbz	r3, 8015c3c <_fstat_r+0x1c>
 8015c3a:	6023      	str	r3, [r4, #0]
 8015c3c:	bd38      	pop	{r3, r4, r5, pc}
 8015c3e:	bf00      	nop
 8015c40:	20005c44 	.word	0x20005c44

08015c44 <_isatty_r>:
 8015c44:	b538      	push	{r3, r4, r5, lr}
 8015c46:	4d06      	ldr	r5, [pc, #24]	; (8015c60 <_isatty_r+0x1c>)
 8015c48:	2300      	movs	r3, #0
 8015c4a:	4604      	mov	r4, r0
 8015c4c:	4608      	mov	r0, r1
 8015c4e:	602b      	str	r3, [r5, #0]
 8015c50:	f7ec fad5 	bl	80021fe <_isatty>
 8015c54:	1c43      	adds	r3, r0, #1
 8015c56:	d102      	bne.n	8015c5e <_isatty_r+0x1a>
 8015c58:	682b      	ldr	r3, [r5, #0]
 8015c5a:	b103      	cbz	r3, 8015c5e <_isatty_r+0x1a>
 8015c5c:	6023      	str	r3, [r4, #0]
 8015c5e:	bd38      	pop	{r3, r4, r5, pc}
 8015c60:	20005c44 	.word	0x20005c44

08015c64 <_init>:
 8015c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c66:	bf00      	nop
 8015c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c6a:	bc08      	pop	{r3}
 8015c6c:	469e      	mov	lr, r3
 8015c6e:	4770      	bx	lr

08015c70 <_fini>:
 8015c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c72:	bf00      	nop
 8015c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c76:	bc08      	pop	{r3}
 8015c78:	469e      	mov	lr, r3
 8015c7a:	4770      	bx	lr
